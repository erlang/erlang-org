%% 
%% Search data file for xmerl 1.3.20.1
%% generated May 31, 2021
%% 
{"xmerl_scan.html", {function, {"xmerl", "xmerl_scan"}},
[
  {"accumulate_whitespace", "accumulate_whitespace(T::string(), S::global_state(), X3::atom(), Acc::string())", "accumulate_whitespace-4"},
  {"cont_state", "cont_state(S::global_state())", "cont_state-1"},
  {"cont_state", "cont_state(X::ContinuationState, S::global_state())", "cont_state-2"},
  {"event_state", "event_state(S::global_state())", "event_state-1"},
  {"event_state", "event_state(X::EventState, S::global_state())", "event_state-2"},
  {"fetch_state", "fetch_state(S::global_state())", "fetch_state-1"},
  {"fetch_state", "fetch_state(X::FetchState, S::global_state())", "fetch_state-2"},
  {"file", "file(Filename::string())", "file-1"},
  {"file", "file(Filename::string(), Options::option_list())", "file-2"},
  {"hook_state", "hook_state(S::global_state())", "hook_state-1"},
  {"hook_state", "hook_state(X::HookState, S::global_state())", "hook_state-2"},
  {"rules_state", "rules_state(S::global_state())", "rules_state-1"},
  {"rules_state", "rules_state(X::RulesState, S::global_state())", "rules_state-2"},
  {"string", "string(Text::list())", "string-1"},
  {"string", "string(Text::list(), Options::option_list())", "string-2"},
  {"user_state", "user_state(S::global_state())", "user_state-1"},
  {"user_state", "user_state(X::UserState, S::global_state())", "user_state-2"}
]}.
{"xmerl_scan.html", {module, "xmerl"}, ["xmerl_scan"]}.
{"xmerl.html", {function, {"xmerl", "xmerl"}},
[
  {"callbacks", "callbacks(Module)", "callbacks-1"},
  {"export", "export(Content, Callback)", "export-2"},
  {"export", "export(Content, Callback, RootAttributes)", "export-3"},
  {"export_content", "export_content(Es::Content, Callbacks)", "export_content-2"},
  {"export_element", "export_element(E, CB)", "export_element-2"},
  {"export_element", "export_element(E, CallbackModule, CallbackState)", "export_element-3"},
  {"export_simple", "export_simple(Content, Callback)", "export_simple-2"},
  {"export_simple", "export_simple(Content, Callback, RootAttrs::RootAttributes)", "export_simple-3"},
  {"export_simple_content", "export_simple_content(Content, Callback)", "export_simple_content-2"},
  {"export_simple_element", "export_simple_element(Content, Callback)", "export_simple_element-2"}
]}.
{"xmerl.html", {module, "xmerl"}, ["xmerl"]}.
{"xmerl_xs.html", {function, {"xmerl", "xmerl_xs"}},
[
  {"built_in_rules", "built_in_rules(Fun, E)", "built_in_rules-2"},
  {"select", "select(String::string(), E)", "select-2"},
  {"value_of", "value_of(E)", "value_of-1"},
  {"xslapply", "xslapply(Fun::Function, EList::list())", "xslapply-2"}
]}.
{"xmerl_xs.html", {module, "xmerl"}, ["xmerl_xs"]}.
{"xmerl_eventp.html", {function, {"xmerl", "xmerl_eventp"}},
[
  {"file_sax", "file_sax(Fname::string(), CallBackModule::atom(), UserState, Options::option_list())", "file_sax-4"},
  {"stream", "stream(Fname::string(), Options::option_list())", "stream-2"},
  {"stream_sax", "stream_sax(Fname, CallBack::CallBackModule, UserState, Options)", "stream_sax-4"},
  {"string_sax", "string_sax(String::list(), CallBackModule::atom(), UserState, Options::option_list())", "string_sax-4"}
]}.
{"xmerl_eventp.html", {module, "xmerl"}, ["xmerl_eventp"]}.
{"xmerl_xpath.html", {function, {"xmerl", "xmerl_xpath"}},
[
  {"string", "string(Str, Doc)", "string-2"},
  {"string", "string(Str, Doc, Options)", "string-3"},
  {"string", "string(Str, Node, Parents, Doc, Options)", "string-5"}
]}.
{"xmerl_xpath.html", {module, "xmerl"}, ["xmerl_xpath"]}.
{"xmerl_xsd.html", {function, {"xmerl", "xmerl_xsd"}},
[
  {"file2state", "file2state(FileName)", "file2state-1"},
  {"format_error", "format_error(L::Errors)", "format_error-1"},
  {"process_schema", "process_schema(Schema)", "process_schema-1"},
  {"process_schema", "process_schema(Schema, Options)", "process_schema-2"},
  {"process_schemas", "process_schemas(Schemas)", "process_schemas-1"},
  {"process_schemas", "process_schemas(Schemas, Options)", "process_schemas-2"},
  {"process_validate", "process_validate(Schema, Xml::Element)", "process_validate-2"},
  {"process_validate", "process_validate(Schema, Xml::Element, Opts::Options)", "process_validate-3"},
  {"state2file", "state2file(S::State)", "state2file-1"},
  {"state2file", "state2file(S::State, FileName)", "state2file-2"},
  {"validate", "validate(Xml::Element, State)", "validate-2"},
  {"validate", "validate(Xml::Element, State, Opts::Options)", "validate-3"}
]}.
{"xmerl_xsd.html", {module, "xmerl"}, ["xmerl_xsd"]}.
{"xmerl_sax_parser.html", {function, {"xmerl", "xmerl_sax_parser"}},
[
  {"file", "file(Filename, Options)", "file-2"},
  {"stream", "stream(Xml, Options)", "stream-2"},
  {"ContinuationFun", "ContinuationFun(State)", "ContinuationFun-1"},
  {"EventFun", "EventFun(Event, Location, State)", "EventFun-3"}
]}.
{"xmerl_sax_parser.html", {module, "xmerl"}, ["xmerl_sax_parser"]}.
{notused, application, ["xmerl"]}.
