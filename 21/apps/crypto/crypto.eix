%% 
%% Search data file for crypto 4.4.2.3
%% generated May 31, 2021
%% 
{"crypto_app.html", {app, "crypto"}, ["crypto"]}.
{"crypto.html", {function, {"crypto", "crypto"}},
[
  {"block_encrypt", "block_encrypt(Type :: block_cipher_without_iv(),Key :: key(),PlainText :: iodata())", "block_encrypt-3"},
  {"block_decrypt", "block_decrypt(Type :: block_cipher_without_iv(),Key :: key(),Data :: iodata())", "block_decrypt-3"},
  {"block_encrypt", "block_encrypt(Type, Key, Ivec, PlainText)", "block_encrypt-4"},
  {"block_encrypt", "block_encrypt(AeadType, Key, Ivec, {AAD, PlainText})", "block_encrypt-4"},
  {"block_encrypt", "block_encrypt(aes_gcm | aes_ccm, Key, Ivec, {AAD, PlainText, TagLength})", "block_encrypt-4"},
  {"block_decrypt", "block_decrypt(Type, Key, Ivec, CipherText)", "block_decrypt-4"},
  {"block_decrypt", "block_decrypt(AeadType, Key, Ivec, {AAD, CipherText, CipherTag})", "block_decrypt-4"},
  {"bytes_to_integer", "bytes_to_integer(Bin :: binary())", "bytes_to_integer-1"},
  {"compute_key", "compute_key(Type, OthersPublicKey, MyPrivateKey, Params)", "compute_key-4"},
  {"exor", "exor(Bin1 :: iodata(), Bin2 :: iodata())", "exor-2"},
  {"generate_key", "generate_key(Type, Params)", "generate_key-2"},
  {"generate_key", "generate_key(Type, Params, PrivKeyIn)", "generate_key-3"},
  {"hash", "hash(Type, Data)", "hash-2"},
  {"hash_init", "hash_init(Type)", "hash_init-1"},
  {"hash_update", "hash_update(State, Data)", "hash_update-2"},
  {"hash_final", "hash_final(State)", "hash_final-1"},
  {"hmac", "hmac(Type, Key, Data)", "hmac-3"},
  {"hmac", "hmac(Type, Key, Data, MacLength)", "hmac-4"},
  {"hmac_init", "hmac_init(Type, Key)", "hmac_init-2"},
  {"hmac_update", "hmac_update(State, Data)", "hmac_update-2"},
  {"hmac_final", "hmac_final(State)", "hmac_final-1"},
  {"hmac_final_n", "hmac_final_n(State, HashLen)", "hmac_final_n-2"},
  {"cmac", "cmac(Type, Key, Data)", "cmac-3"},
  {"cmac", "cmac(Type, Key, Data, MacLength)", "cmac-4"},
  {"info_fips", "info_fips()", "info_fips-0"},
  {"enable_fips_mode", "enable_fips_mode(Enable)", "enable_fips_mode-1"},
  {"info_lib", "info_lib()", "info_lib-0"},
  {"mod_pow", "mod_pow(N, P, M)", "mod_pow-3"},
  {"next_iv", "next_iv(Type :: cbc_cipher(), Data)", "next_iv-2"},
  {"next_iv", "next_iv(Type :: des_cfb, Data, IVec)", "next_iv-3"},
  {"poly1305", "poly1305(Key :: iodata(), Data :: iodata())", "poly1305-2"},
  {"private_decrypt", "private_decrypt(Algorithm, CipherText, PrivateKey, Options)", "private_decrypt-4"},
  {"private_encrypt", "private_encrypt(Algorithm, PlainText, PrivateKey, Options)", "private_encrypt-4"},
  {"public_decrypt", "public_decrypt(Algorithm, CipherText, PublicKey, Options)", "public_decrypt-4"},
  {"public_encrypt", "public_encrypt(Algorithm, PlainText, PublicKey, Options)", "public_encrypt-4"},
  {"rand_seed", "rand_seed(Seed :: binary())", "rand_seed-1"},
  {"rand_uniform", "rand_uniform(Lo, Hi)", "rand_uniform-2"},
  {"start", "start()", "start-0"},
  {"stop", "stop()", "stop-0"},
  {"strong_rand_bytes", "strong_rand_bytes(N :: integer() >= 0)", "strong_rand_bytes-1"},
  {"rand_seed", "rand_seed()", "rand_seed-0"},
  {"rand_seed_s", "rand_seed_s()", "rand_seed_s-0"},
  {"rand_seed_alg", "rand_seed_alg(Alg)", "rand_seed_alg-1"},
  {"rand_seed_alg_s", "rand_seed_alg_s(Alg)", "rand_seed_alg_s-1"},
  {"stream_init", "stream_init(Type, Key)", "stream_init-2"},
  {"stream_init", "stream_init(Type, Key, IVec)", "stream_init-3"},
  {"stream_encrypt", "stream_encrypt(State, PlainText)", "stream_encrypt-2"},
  {"stream_decrypt", "stream_decrypt(State, CipherText)", "stream_decrypt-2"},
  {"supports", "supports()", "supports-0"},
  {"ec_curves", "ec_curves()", "ec_curves-0"},
  {"ec_curve", "ec_curve(CurveName)", "ec_curve-1"},
  {"sign", "sign(Algorithm, DigestType, Msg, Key)", "sign-4"},
  {"sign", "sign(Algorithm, DigestType, Msg, Key, Options)", "sign-5"},
  {"verify", "verify(Algorithm, DigestType, Msg, Signature, Key)", "verify-5"},
  {"verify", "verify(Algorithm, DigestType, Msg, Signature, Key, Options)", "verify-6"},
  {"privkey_to_pubkey", "privkey_to_pubkey(Type, EnginePrivateKeyRef)", "privkey_to_pubkey-2"},
  {"engine_get_all_methods", "engine_get_all_methods()", "engine_get_all_methods-0"},
  {"engine_load", "engine_load(EngineId, PreCmds, PostCmds)", "engine_load-3"},
  {"engine_load", "engine_load(EngineId, PreCmds, PostCmds, EngineMethods)", "engine_load-4"},
  {"engine_unload", "engine_unload(Engine)", "engine_unload-1"},
  {"engine_by_id", "engine_by_id(EngineId)", "engine_by_id-1"},
  {"engine_ctrl_cmd_string", "engine_ctrl_cmd_string(Engine, CmdName, CmdArg)", "engine_ctrl_cmd_string-3"},
  {"engine_ctrl_cmd_string", "engine_ctrl_cmd_string(Engine, CmdName, CmdArg, Optional)", "engine_ctrl_cmd_string-4"},
  {"engine_add", "engine_add(Engine)", "engine_add-1"},
  {"engine_remove", "engine_remove(Engine)", "engine_remove-1"},
  {"engine_get_id", "engine_get_id(Engine)", "engine_get_id-1"},
  {"engine_get_name", "engine_get_name(Engine)", "engine_get_name-1"},
  {"engine_list", "engine_list()", "engine_list-0"},
  {"ensure_engine_loaded", "ensure_engine_loaded(EngineId, LibPath)", "ensure_engine_loaded-2"},
  {"ensure_engine_loaded", "ensure_engine_loaded(EngineId, LibPath, EngineMethods)", "ensure_engine_loaded-3"},
  {"ensure_engine_unloaded", "ensure_engine_unloaded(Engine)", "ensure_engine_unloaded-1"},
  {"ensure_engine_unloaded", "ensure_engine_unloaded(Engine, EngineMethods)", "ensure_engine_unloaded-2"}
]}.
{"crypto.html", {module, "crypto"}, ["crypto"]}.
{notused, application, ["crypto"]}.
