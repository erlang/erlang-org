searchData={"items":[{"type":"module","title":"atomics","doc":"Atomic Functions\n\nThis module provides a set of functions to do atomic operations towards mutable\natomic variables. The implementation utilizes only atomic hardware instructions\nwithout any software level locking, which makes it very efficient for concurrent\naccess. The atomics are organized into arrays with the following semantics:\n\n- Atomics are 64 bit integers.\n- Atomics can be represented as either signed or unsigned.\n- Atomics wrap around at overflow and underflow operations.\n- All operations guarantee atomicity. No intermediate results can be seen. The\n  result of one mutation can only be the input to one following mutation.\n- All atomic operations are mutually ordered. If atomic B is updated _after_\n  atomic A, then that is how it will appear to any concurrent readers. No one\n  can read the new value of B and then read the old value of A.\n- Indexes into atomic arrays are one-based. An atomic array of arity N contains\n  N atomics with index from 1 to N.","ref":"atomics.html"},{"type":"function","title":"atomics.add/3","doc":"Add `Incr` to atomic.","ref":"atomics.html#add/3"},{"type":"function","title":"atomics.add_get/3","doc":"Atomically add `Incr` to atomic and return the result.","ref":"atomics.html#add_get/3"},{"type":"opaque","title":"atomics.atomics_ref/0","doc":"Identifies an atomic array returned from `new/2`.","ref":"atomics.html#t:atomics_ref/0"},{"type":"function","title":"atomics.compare_exchange/4","doc":"Atomically compare the atomic with `Expected`, and if those are equal, set\natomic to `Desired`.\n\nReturn `ok` if `Desired` was written. Return the actual atomic value if\nnot equal to `Expected`.","ref":"atomics.html#compare_exchange/4"},{"type":"function","title":"atomics.exchange/3","doc":"Atomically replace the value of the atomic with `Desired` and return the previous value.","ref":"atomics.html#exchange/3"},{"type":"function","title":"atomics.get/2","doc":"Read atomic value.","ref":"atomics.html#get/2"},{"type":"function","title":"atomics.info/1","doc":"Return information about an atomic array in a map.\n\nThe map has the following keys:\n\n- **`size`** - The number of atomics in the array.\n- **`max`** - The highest possible value an atomic in this array can hold.\n- **`min`** - The lowest possible value an atomic in this array can hold.\n- **`memory`** - Approximate memory consumption for the array in bytes.","ref":"atomics.html#info/1"},{"type":"function","title":"atomics.new/2","doc":"Create a new array of `Arity` number of atomics. All atomics in the array are\ninitially set to zero.\n\nArgument `Opts` is a list of the following possible options:\n\n- **`{signed, boolean()}`** - Indicate if the elements of the array will be\n  treated as signed or unsigned integers. Default is `true` (signed).\n\n  The integer interval for signed atomics are from `-(1 bsl 63)` to\n  `(1 bsl 63)-1` and for unsigned atomics from `0` to `(1 bsl 64)-1`.\n\nAtomics are not tied to the current process and are automatically garbage\ncollected when they are no longer referenced.","ref":"atomics.html#new/2"},{"type":"function","title":"atomics.put/3","doc":"Set atomic to `Value`.","ref":"atomics.html#put/3"},{"type":"function","title":"atomics.sub/3","doc":"Subtract `Decr` from atomic.","ref":"atomics.html#sub/3"},{"type":"function","title":"atomics.sub_get/3","doc":"Atomically subtract `Decr` from atomic and return the result.","ref":"atomics.html#sub_get/3"},{"type":"module","title":"counters","doc":"Counter Functions\n\nThis module provides a set of functions to do operations towards shared mutable\ncounter variables. The implementation does not utilize any software level\nlocking, which makes it very efficient for concurrent access. The counters are\norganized into arrays with the following semantics:\n\n- Counters are 64 bit signed integers.\n- Counters wrap around at overflow and underflow operations.\n- Counters are initialized to zero.\n- Write operations guarantee atomicity. No intermediate results can be seen from\n  a single write operation.\n- Two types of counter arrays can be created with options `atomics` or\n  `write_concurrency`. The `atomics` counters have good allround performance\n  with nice consistent semantics while `write_concurrency` counters offers even\n  better concurrent write performance at the expense of some potential read\n  inconsistencies. See `new/2`.\n- Indexes into counter arrays are one-based. A counter array of size N contains\n  N counters with index from 1 to N.","ref":"counters.html"},{"type":"function","title":"counters.add/3","doc":"Add `Incr` to counter at index `Ix`.","ref":"counters.html#add/3"},{"type":"opaque","title":"counters.counters_ref/0","doc":"Identifies a counter array returned from `new/2`.","ref":"counters.html#t:counters_ref/0"},{"type":"function","title":"counters.get/2","doc":"Read counter value.","ref":"counters.html#get/2"},{"type":"function","title":"counters.info/1","doc":"Return information about a counter array in a map.\n\nThe map has the following keys (at least):\n\n- **`size`** - The number of counters in the array.\n- **`memory`** - Approximate memory consumption for the array in bytes.","ref":"counters.html#info/1"},{"type":"function","title":"counters.new/2","doc":"Create a new counter array of `Size` counters. All counters in the array are\ninitially set to zero.\n\nArgument `Opts` is a list of the following possible options:\n\n- **`atomics` (Default)** - Counters will be sequentially consistent. If write\n  operation A is done sequentially before write operation B, then a concurrent\n  reader may see the result of none of them, only A, or both A and B. It cannot\n  see the result of only B.\n\n- **`write_concurrency`** - This is an optimization to achieve very efficient\n  concurrent [`add`](`add/3`) and [`sub`](`sub/3`) operations at the expense of\n  potential read inconsistency and memory consumption per counter.\n\n  Read operations may see sequentially inconsistent results with regard to\n  concurrent write operations. Even if write operation A is done sequentially\n  before write operation B, a concurrent reader may see any combination of A and\n  B, including only B. A read operation is only guaranteed to see all writes\n  done sequentially before the read. No writes are ever lost, but will\n  eventually all be seen.\n\n  The typical use case for `write_concurrency` is when concurrent calls to\n  [`add`](`add/3`) and [`sub`](`sub/3`) toward the same counters are very\n  frequent, while calls to [`get` ](`get/2`)and [`put`](`put/3`) are much less\n  frequent. The lack of absolute read consistency must also be acceptable.\n\nCounters are not tied to the current process and are automatically garbage\ncollected when they are no longer referenced.","ref":"counters.html#new/2"},{"type":"function","title":"counters.put/3","doc":"Write `Value` to counter at index `Ix`.\n\n> #### Note {: .info }\n>\n> Despite its name, the `write_concurrency` optimization does not improve `put`.\n> A call to `put` is a relatively heavy operation compared to the very\n> lightweight and scalable [`add`](`add/3`) and [`sub`](`sub/3`). The cost for a\n> `put` with `write_concurrency` is like a [`get` ](`get/2`)plus a `put` without\n> `write_concurrency`.","ref":"counters.html#put/3"},{"type":"function","title":"counters.sub/3","doc":"Subtract `Decr` from counter at index `Ix`.","ref":"counters.html#sub/3"},{"type":"module","title":"erl_prim_loader","doc":"The low-level Erlang loader. This module is used to load all Erlang modules into\nthe system. The start script is also fetched with this low-level loader.\n\n`erl_prim_loader` knows about the environment and how to fetch modules.\n\nCommand-line flag `-loader Loader` can be used to choose the method used by\n`erl_prim_loader`. Two `Loader` methods are supported by the Erlang runtime\nsystem: `efile` and `inet`.","ref":"erl_prim_loader.html"},{"type":"module","title":"Command-Line Flags - erl_prim_loader","doc":"The `erl_prim_loader` module interprets the following command-line flags:\n\n- **`-loader Loader`** - Specifies the name of the loader used by\n  `erl_prim_loader`. `Loader` can be `efile` (use the local file system) or\n  `inet` (load using the `boot_server` on another Erlang node).\n\n  If flag `-loader` is omitted, it defaults to `efile`.\n\n- **`-loader_debug`** - Makes the `efile` loader write some debug information,\n  such as the reason for failures, while it handles files.\n\n- **`-hosts Hosts`** - Specifies which other Erlang nodes the `inet` loader can\n  use. This flag is mandatory if flag `-loader inet` is present. On each host,\n  there must be on Erlang node with the `m:erl_boot_server`, which handles the\n  load requests. `Hosts` is a list of IP addresses (hostnames are not\n  acceptable).\n\n- **`-setcookie Cookie`** - Specifies the cookie of the Erlang runtime system.\n  This flag is mandatory if flag `-loader inet` is present.","ref":"erl_prim_loader.html#module-command-line-flags"},{"type":"module","title":"See Also - erl_prim_loader","doc":"`m:init`, `m:erl_boot_server`","ref":"erl_prim_loader.html#module-see-also"},{"type":"function","title":"erl_prim_loader.get_file/1","doc":"_Use of this function is deprecated in favor of [`read_file/1`](`read_file/1`)._\n\nFetches a file using the low-level loader. `Filename` is either an absolute\nfilename or only the name of the file, for example, `\"lists.beam\"`. If an\ninternal path is set to the loader, this path is used to find the file.\n`FullName` is the complete name of the fetched file. `Bin` is the contents of\nthe file as a binary.\n\n`Filename` can also be a file in an archive, for example,\n`$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin/mnesia.beam`. For\ninformation about archive files, see `m:code`.","ref":"erl_prim_loader.html#get_file/1"},{"type":"function","title":"erl_prim_loader.get_path/0","doc":"_Use of this function is deprecated in favor of `code:get_path/0`._\n\nGets the path set in the loader. The path is set by the `m:init` process\naccording to information found in the start script.","ref":"erl_prim_loader.html#get_path/0"},{"type":"function","title":"erl_prim_loader.list_dir/1","doc":"Lists all the files in a directory.\n\nReturns `{ok, Filenames}` if successful, otherwise `error`. `Filenames`\nis a list of the names of all the files in the directory. The names are\nnot sorted.\n\n`Dir` can also be a directory in an archive, for example,\n`$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin`. For information about\narchive files, see `m:code`.","ref":"erl_prim_loader.html#list_dir/1"},{"type":"function","title":"erl_prim_loader.read_file/1","doc":"Reads a file using the low-level loader.\n\nReturns `{ok, Bin}` if successful, otherwise `error`. `Bin` is the contents\nof the file as a binary.\n\n`Filename` can also be a file in an archive, for example,\n`$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin/mnesia.beam`. For\ninformation about archive files, see `m:code`.","ref":"erl_prim_loader.html#read_file/1"},{"type":"function","title":"erl_prim_loader.read_file_info/1","doc":"Retrieves information about a file.\n\nReturns `{ok, FileInfo}` if successful, otherwise `error`. `FileInfo` is a\nrecord [`file_info`](`t:file:file_info/0`), defined in the Kernel include file\n `file.hrl`. Include the following directive in the module from which the\nfunction is called:\n\n```erlang\n-include_lib(\"kernel/include/file.hrl\").\n```\n\nFor more information about the record see `file:read_file_info/2`.\n\n`Filename` can also be a file in an archive, for example,\n`$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin/mnesia`. For information\nabout archive files, see `m:code`.","ref":"erl_prim_loader.html#read_file_info/1"},{"type":"function","title":"erl_prim_loader.read_link_info/1","doc":"Works like `read_file_info/1` except that if `Filename` is a symbolic link,\ninformation about the link is returned in the [`file_info`](`t:file:file_info/0`)\nrecord and the `type` field of the record is set to `symlink`.\n\nIf `Filename` is not a symbolic link, this function returns exactly the same\nresult as [`read_file_info/1`](`read_file_info/1`). On platforms that do not\nsupport symbolic links, this function is always equivalent to\n[`read_file_info/1`](`read_file_info/1`).","ref":"erl_prim_loader.html#read_link_info/1"},{"type":"function","title":"erl_prim_loader.set_path/1","doc":"Sets the path of the loader if `m:init` interprets a `path` command in the start\nscript.","ref":"erl_prim_loader.html#set_path/1"},{"type":"behaviour","title":"erl_tracer","doc":"Erlang tracer behavior.\n\nThis behavior module implements the back end of the Erlang tracing system. The\nfunctions in this module are called whenever a trace probe is triggered. Both\nthe `enabled` and `trace` functions are called in the context of the entity that\ntriggered the trace probe. This means that the overhead by having the tracing\nenabled is greatly effected by how much time is spent in these functions. So, do\nas little work as possible in these functions.\n\n> #### Note {: .info }\n>\n> All functions in this behavior must be implemented as NIFs. This limitation\n> can be removed in a future releases. An\n> [example tracer module NIF](`m:erl_tracer#example`) implementation is provided\n> below.\n\n> #### Warning {: .warning }\n>\n> Do not send messages or issue port commands to the `Tracee` in any of the\n> callbacks. This is not allowed and can cause all sorts of strange behavior,\n> including, but not limited to, infinite recursions.\n\n[](){: #example }","ref":"erl_tracer.html"},{"type":"behaviour","title":"Erl Tracer Module Example - erl_tracer","doc":"In this example, a tracer module with a NIF back end sends a message for each\n`send` trace tag containing only the sender and receiver. Using this tracer\nmodule, a much more lightweight message tracer is used, which only records who\nsent messages to who.\n\nThe following is an example session using it on Linux:\n\n```erlang\n$ gcc -I erts-8.0/include/ -fPIC -shared -o erl_msg_tracer.so erl_msg_tracer.c\n$ erl\nErlang/OTP 19 [DEVELOPMENT] [erts-8.0] [source-ed2b56b] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false]\n\nEshell V8.0  (abort with ^G)\n1> c(erl_msg_tracer), erl_msg_tracer:load().\nok\n2> Tracer = spawn(fun F() -> receive M -> io:format(\"~p~n\",[M]), F() end end).\n<0.37.0>\n3> erlang:trace(new, true, [send,{tracer, erl_msg_tracer, Tracer}]).\n0\n{trace,<0.39.0>,<0.27.0>}\n4> {ok, D} = file:open(\"/tmp/tmp.data\",[write]).\n{trace,#Port<0.486>,<0.40.0>}\n{trace,<0.40.0>,<0.21.0>}\n{trace,#Port<0.487>,<0.4.0>}\n{trace,#Port<0.488>,<0.4.0>}\n{trace,#Port<0.489>,<0.4.0>}\n{trace,#Port<0.490>,<0.4.0>}\n{ok,<0.40.0>}\n{trace,<0.41.0>,<0.27.0>}\n5>\n```\n\n`erl_msg_tracer.erl`:\n\n```erlang\n-module(erl_msg_tracer).\n\n-export([enabled/3, trace/5, load/0]).\n\nload() ->\n    erlang:load_nif(\"erl_msg_tracer\", []).\n\nenabled(_, _, _) ->\n    error.\n\ntrace(_, _, _, _, _) ->\n    error.\n```\n\n`erl_msg_tracer.c`:\n\n```c\n#include  \n\n/* NIF interface declarations */\nstatic int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info);\nstatic int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data, ERL_NIF_TERM load_info);\nstatic void unload(ErlNifEnv* env, void* priv_data);\n\n/* The NIFs: */\nstatic ERL_NIF_TERM enabled(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\nstatic ERL_NIF_TERM trace(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n\nstatic ErlNifFunc nif_funcs[] = {\n    {\"enabled\", 3, enabled},\n    {\"trace\", 5, trace}\n};\n\nERL_NIF_INIT(erl_msg_tracer, nif_funcs, load, NULL, upgrade, unload)\n\nstatic int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info)\n{\n    *priv_data = NULL;\n    return 0;\n}\n\nstatic void unload(ErlNifEnv* env, void* priv_data)\n{\n\n}\n\nstatic int upgrade(ErlNifEnv* env, void** priv_data, void** old_priv_data,\n\t\t   ERL_NIF_TERM load_info)\n{\n    if (*old_priv_data != NULL || *priv_data != NULL) {\n\treturn -1; /* Don't know how to do that */\n    }\n    if (load(env, priv_data, load_info)) {\n\treturn -1;\n    }\n    return 0;\n}\n\n/*\n * argv[0]: TraceTag\n * argv[1]: TracerState\n * argv[2]: Tracee\n */\nstatic ERL_NIF_TERM enabled(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    ErlNifPid to_pid;\n    if (enif_get_local_pid(env, argv[1], &to_pid))\n        if (!enif_is_process_alive(env, &to_pid))\n            if (enif_is_identical(enif_make_atom(env, \"trace_status\"), argv[0]))\n                /* tracer is dead so we should remove this tracepoint */\n                return enif_make_atom(env, \"remove\");\n            else\n                return enif_make_atom(env, \"discard\");\n\n    /* Only generate trace for when tracer != tracee */\n    if (enif_is_identical(argv[1], argv[2]))\n        return enif_make_atom(env, \"discard\");\n\n    /* Only trigger trace messages on 'send' */\n    if (enif_is_identical(enif_make_atom(env, \"send\"), argv[0]))\n        return enif_make_atom(env, \"trace\");\n\n    /* Have to answer trace_status */\n    if (enif_is_identical(enif_make_atom(env, \"trace_status\"), argv[0]))\n        return enif_make_atom(env, \"trace\");\n\n    return enif_make_atom(env, \"discard\");\n}\n\n/*\n * argv[0]: TraceTag, should only be 'send'\n * argv[1]: TracerState, process to send {Tracee, Recipient} to\n * argv[2]: Tracee\n * argv[3]: Message\n * argv[4]: Options, map containing Recipient\n */\nstatic ERL_NIF_TERM trace(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    ErlNifPid to_pid;\n    ERL_NIF_TERM recipient, msg;\n\n    if (enif_get_local_pid(env, argv[1], &to_pid)) {\n      if (enif_get_map_value(env, argv[4], enif_make_atom(env, \"extra\"), &recipient)) {\n        msg = enif_make_tuple3(env, enif_make_atom(env, \"trace\"), argv[2], recipient);\n        enif_send(env, &to_pid, NULL, msg);\n      }\n    }\n\n    return enif_make_atom(env, \"ok\");\n}\n```","ref":"erl_tracer.html#module-erl-tracer-module-example"},{"type":"callback","title":"erl_tracer.enabled/3","doc":"This callback is called whenever a tracepoint is triggered.\n\nIt allows the tracer to decide whether a trace is to be generated or not. This\ncheck is made as early as possible to limit the amount of overhead associated\nwith tracing. If `trace` is returned, the necessary trace data is created and\nthe trace callback of the tracer is called. If `discard` is returned, this trace\ncall is discarded and no call to trace is done.\n\n`trace_status` is a special type of `TraceTag`, which is used to check if the\ntracer is still to be active. It is called in multiple scenarios, but most\nsignificantly it is used when tracing is started using this tracer. If `remove`\nis returned when the `trace_status` is checked, the tracer is removed from the\ntracee.\n\nThis function can be called multiple times per tracepoint, so it is important\nthat it is both fast and without side effects.","ref":"erl_tracer.html#c:enabled/3"},{"type":"callback","title":"erl_tracer.enabled_call/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`call | return_to`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_call/3`](`c:enabled_call/3`) is undefined,\n[`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_call/3"},{"type":"callback","title":"erl_tracer.enabled_garbage_collection/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`garbage_collection`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_garbage_collection/3`](`c:enabled_garbage_collection/3`) is\nundefined, [`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_garbage_collection/3"},{"type":"callback","title":"erl_tracer.enabled_ports/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`ports`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_ports/3`](`c:enabled_ports/3`) is undefined,\n[`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_ports/3"},{"type":"callback","title":"erl_tracer.enabled_procs/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`procs`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_procs/3`](`c:enabled_procs/3`) is undefined,\n[`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_procs/3"},{"type":"callback","title":"erl_tracer.enabled_receive/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`'receive'`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_receive/3`](`c:enabled_receive/3`) is undefined,\n[`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_receive/3"},{"type":"callback","title":"erl_tracer.enabled_running_ports/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`running_ports`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_running_ports/3`](`c:enabled_running_ports/3`) is undefined,\n[`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_running_ports/3"},{"type":"callback","title":"erl_tracer.enabled_running_procs/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`running_procs | running`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_running_procs/3`](`c:enabled_running_procs/3`) is undefined,\n[`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_running_procs/3"},{"type":"callback","title":"erl_tracer.enabled_send/3","doc":"This callback is called whenever a tracepoint with trace flag\n[`send`](`erlang:trace/3`) is triggered.\n\nIf [`enabled_send/3`](`c:enabled_send/3`) is undefined,\n[`Module:enabled/3`](`c:enabled/3`) is called instead.","ref":"erl_tracer.html#c:enabled_send/3"},{"type":"callback","title":"erl_tracer.trace/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled/3`](`c:enabled/3`) callback returned `trace`.\n\nIn it any side effects needed by the tracer are to be done. The tracepoint\npayload is located in the `TraceTerm`. The content of the `TraceTerm` depends on\nwhich `TraceTag` is triggered. `TraceTerm` corresponds to the fourth element in\nthe trace tuples described in [`trace:process/4`](`m:trace#process_trace_messages`).\n\nIf the trace tuple has five elements, the fifth element will be sent as the\n`extra` value in the `Opts` maps.\n\nThe `TraceTag` `seq_trace` is handled slightly differently. There is no `Tracee`\nfor `seq_trace`, instead the `Label` associated with the `seq_trace` event is\nspecified.\n\nFor more information on what `Label` and `SeqTraceInfo` can be, see\n`m:seq_trace`.","ref":"erl_tracer.html#c:trace/5"},{"type":"callback","title":"erl_tracer.trace_call/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_call/3`](`c:enabled_call/3`) callback returned `trace`.\n\nIf [`trace_call/5`](`c:trace_call/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_call/5"},{"type":"callback","title":"erl_tracer.trace_garbage_collection/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_garbage_collection/3`](`c:enabled_garbage_collection/3`)\ncallback returned `trace`.\n\nIf [`trace_garbage_collection/5`](`c:trace_garbage_collection/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_garbage_collection/5"},{"type":"type","title":"erl_tracer.trace_opts/0","doc":"The options for the tracee:\n\n- **`timestamp`** - If set the tracer has been requested to include a time\n  stamp.\n\n- **`extra`** - If set the tracepoint has included additional data about the\n  trace event. What the additional data is depends on which `TraceTag` has been\n  triggered. The `extra` trace data corresponds to the fifth element in the\n  trace tuples described in [trace:process/4](`m:trace#process_trace_messages`).\n\n- **`match_spec_result`** - If set the tracer has been requested to include the\n  output of a match specification that was run.\n\n- **`scheduler_id`** - If set the scheduler id is to be included by the tracer.","ref":"erl_tracer.html#t:trace_opts/0"},{"type":"callback","title":"erl_tracer.trace_ports/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_ports/3`](`c:enabled_ports/3`) callback returned `trace`.\n\nIf [`trace_ports/5`](`c:trace_ports/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_ports/5"},{"type":"callback","title":"erl_tracer.trace_procs/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_procs/3`](`c:enabled_procs/3`) callback returned `trace`.\n\nIf [`trace_procs/5`](`c:trace_procs/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_procs/5"},{"type":"callback","title":"erl_tracer.trace_receive/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_receive/3`](`c:enabled_receive/3`) callback returned `trace`.\n\nIf [`trace_receive/5`](`c:trace_receive/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_receive/5"},{"type":"callback","title":"erl_tracer.trace_running_ports/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_running_ports/3`](`c:enabled_running_ports/3`) callback\nreturned `trace`.\n\nIf [`trace_running_ports/5`](`c:trace_running_ports/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_running_ports/5"},{"type":"callback","title":"erl_tracer.trace_running_procs/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_running_procs/3`](`c:enabled_running_procs/3`) callback\nreturned `trace`.\n\nIf [`trace_running_procs/5`](`c:trace_running_procs/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_running_procs/5"},{"type":"callback","title":"erl_tracer.trace_send/5","doc":"This callback is called when a tracepoint is triggered and the\n[`Module:enabled_send/3`](`c:enabled_send/3`) callback returned `trace`.\n\nIf [`trace_send/5`](`c:trace_send/5`) is undefined,\n[`Module:trace/5`](`c:trace/5`) is called instead.","ref":"erl_tracer.html#c:trace_send/5"},{"type":"type","title":"erl_tracer.trace_tag/0","doc":"The different trace tags that the tracer is called with.\n\nEach trace tag is described in detail in [`Module:trace/5`](`c:trace/5`).","ref":"erl_tracer.html#t:trace_tag/0"},{"type":"type","title":"erl_tracer.trace_tag_call/0","doc":"","ref":"erl_tracer.html#t:trace_tag_call/0"},{"type":"type","title":"erl_tracer.trace_tag_gc/0","doc":"","ref":"erl_tracer.html#t:trace_tag_gc/0"},{"type":"type","title":"erl_tracer.trace_tag_ports/0","doc":"","ref":"erl_tracer.html#t:trace_tag_ports/0"},{"type":"type","title":"erl_tracer.trace_tag_procs/0","doc":"","ref":"erl_tracer.html#t:trace_tag_procs/0"},{"type":"type","title":"erl_tracer.trace_tag_receive/0","doc":"","ref":"erl_tracer.html#t:trace_tag_receive/0"},{"type":"type","title":"erl_tracer.trace_tag_running_ports/0","doc":"","ref":"erl_tracer.html#t:trace_tag_running_ports/0"},{"type":"type","title":"erl_tracer.trace_tag_running_procs/0","doc":"","ref":"erl_tracer.html#t:trace_tag_running_procs/0"},{"type":"type","title":"erl_tracer.trace_tag_send/0","doc":"","ref":"erl_tracer.html#t:trace_tag_send/0"},{"type":"type","title":"erl_tracer.tracee/0","doc":"The process or port that the trace belongs to.","ref":"erl_tracer.html#t:tracee/0"},{"type":"module","title":"erlang","doc":"The Erlang BIFs and predefined types.\n\nBy convention, most [Built-In Functions](`e:system:ref_man_functions.md#built-in-functions-bifs`)\n(BIFs) and all [predefined types](`e:system:typespec.md#predefined`) are included\nin this module. Some of the BIFs and all of the predefined types are viewed more\nor less as part of the Erlang programming language and are _auto-imported_.\nThus, it is not necessary to specify the module name. For example, the calls\n[`atom_to_list(erlang)`](`atom_to_list/1`) and [`erlang:atom_to_list(erlang)`](`atom_to_list/1`)\nare identical.\n\nAuto-imported BIFs are annotated with `auto-imported` and predefined types are\nannotated with `predefined`.\n\nSome auto-imported BIFs are also allowed in [guard expression](`e:system:expressions.md#guard-expressions`).\nSuch BIFs are annoted with both `auto-imported` and `guard-bif`.\n\nBIFs can fail for various reasons. All BIFs fail with reason `badarg` if they\nare called with arguments of an incorrect type. The other reasons are described\nin the description of each individual BIF.","ref":"erlang.html"},{"type":"type","title":"erlang./0","doc":"The empty `t:list/0`.","ref":"erlang.html#t:nil/0"},{"type":"function","title":"erlang.abs/1","doc":"Returns an integer or float representing the absolute value of `Float`\nor `Int`.","ref":"erlang.html#abs/1"},{"type":"function","title":"Examples - erlang.abs/1","doc":"```erlang\n1> abs(-3.33).\n3.33\n2> abs(-3).\n3\n3> abs(5).\n5\n```","ref":"erlang.html#abs/1-examples"},{"type":"function","title":"erlang.adler32/1","doc":"Computes and returns the adler32 checksum for `Data`.","ref":"erlang.html#adler32/1"},{"type":"function","title":"erlang.adler32/2","doc":"Continues computing the adler32 checksum by combining the previous checksum,\n`OldAdler`, with the checksum of `Data`.\n\nThe following code:\n\n```erlang\nX = erlang:adler32(Data1),\nY = erlang:adler32(X,Data2).\n```\n\nassigns the same value to `Y` as this:\n\n```erlang\nY = erlang:adler32([Data1,Data2]).\n```","ref":"erlang.html#adler32/2"},{"type":"function","title":"erlang.adler32_combine/3","doc":"Combines two previously computed adler32 checksums.\n\nThis computation requires the size of the data object for the second checksum\nto be known.\n\nThe following code:\n\n```erlang\nY = erlang:adler32(Data1),\nZ = erlang:adler32(Y,Data2).\n```\n\nassigns the same value to `Z` as this:\n\n```erlang\nX = erlang:adler32(Data1),\nY = erlang:adler32(Data2),\nZ = erlang:adler32_combine(X,Y,iolist_size(Data2)).\n```","ref":"erlang.html#adler32_combine/3"},{"type":"function","title":"erlang.alias/0","doc":"Equivalent to  alias([]) .","ref":"erlang.html#alias/0"},{"type":"function","title":"erlang.alias/1","doc":"Create an alias which can be used when sending messages to the process that\ncreated the alias. When the alias has been deactivated, messages sent using the\nalias will be dropped. An alias can be deactivated using `unalias/1`.\n\nCurrently available options for [`alias/1`](`alias/1`):\n\n- **`explicit_unalias`** - The alias can only be deactivated via a call to\n  [`unalias/1`](`unalias/1`). This is also the default behaviour if no options\n  are passed or if `alias/0` is called.\n\n- **`reply`** - The alias will be automatically deactivated when a reply message\n  sent via the alias is received. The alias can also still be deactivated via a\n  call to [`unalias/1`](`unalias/1`).\n\n- **`priority`** - [](){: #priority_alias } Since OTP 28.0\n\n  The alias can be used for sending\n  [priority messages](`e:system:ref_man_processes.md#priority-messages`) to the\n  process that created this alias. An alias created with this option is also\n  known as a *priority process alias* or shorter *priority alias*.\n\n  > #### Warning {: .warning }\n  >\n  > You *very seldom* need to resort to using priority messages and you may\n  > [cause issues](`e:system:ref_man_processes.md#priority-message-warning`)\n  > instead of solving issues if not used with care.\n\n  For more information see, the\n  [Enabling Priority Message Reception](`e:system:ref_man_processes.md#enable-prio-msg-recv`)\n  section of the _Erlang Reference Manual_.\n\nExample:\n\n```erlang\nserver() ->\n    receive\n        {request, AliasReqId, Request} ->\n            Result = perform_request(Request),\n            AliasReqId ! {reply, AliasReqId, Result}\n    end,\n    server().\n\nclient(ServerPid, Request) ->\n    AliasReqId = alias([reply]),\n    ServerPid ! {request, AliasReqId, Request},\n    %% Alias will be automatically deactivated if we receive a reply\n    %% since we used the 'reply' option...\n    receive\n        {reply, AliasReqId, Result} -> Result\n    after 5000 ->\n            unalias(AliasReqId),\n            %% Flush message queue in case the reply arrived\n            %% just before the alias was deactivated...\n            receive {reply, AliasReqId, Result} -> Result\n            after 0 -> exit(timeout)\n            end\n    end.\n```\n\nNote that both the server and the client in this example must be executing on at\nleast OTP 24 systems in order for this to work.\n\nFor more information on process aliases see the\n[_Process Aliases_](`e:system:ref_man_processes.md#process-aliases`) section of\nthe _Erlang Reference Manual_.","ref":"erlang.html#alias/1"},{"type":"type","title":"erlang.any/0","doc":"All possible Erlang terms. Synonym for `t:term/0`.","ref":"erlang.html#t:any/0"},{"type":"function","title":"erlang.append_element/2","doc":"Returns a new tuple that has one element more than `Tuple1`, and contains the\nelements in `Tuple1` followed by `Term` as the last element.\n\nSemantically equivalent to\n[`list_to_tuple(tuple_to_list(Tuple1) ++ [Term])`](`list_to_tuple/1`), but\nfaster.","ref":"erlang.html#append_element/2"},{"type":"function","title":"Examples - erlang.append_element/2","doc":"```erlang\n1> erlang:append_element({one, two}, three).\n{one,two,three}\n```","ref":"erlang.html#append_element/2-examples"},{"type":"function","title":"erlang.apply/2","doc":"Calls a fun, passing the elements in `Args` as arguments.\n\nIf the number of elements in the arguments are known at compile time, the call\nis better written as `Fun(Arg1, Arg2, ... ArgN)`.\n\n> #### Warning {: .warning }\n>\n> Earlier, `Fun` could also be specified as `{Module, Function}`, equivalent to\n> [`apply(Module, Function, Args)`](`apply/3`). _This use is deprecated and will\n> stop working in a future release._","ref":"erlang.html#apply/2"},{"type":"function","title":"erlang.apply/3","doc":"Returns the result of applying `Function` in `Module` to `Args`. The applied\nfunction must be exported from `Module`. The arity of the function is the length\nof `Args`.\n\nFor example:\n\n```erlang\n> apply(lists, reverse, [[a, b, c]]).\n[c,b,a]\n> apply(erlang, atom_to_list, ['Erlang']).\n\"Erlang\"\n```\n\nIf the number of arguments are known at compile time, the call is better written\nas `Module:Function(Arg1, Arg2, ..., ArgN)`.\n\nFailure: `error_handler:undefined_function/3` is called if the applied function\nis not exported. The error handler can be redefined (see `process_flag/2`). If\n`error_handler` is undefined, or if the user has redefined the default\n`error_handler` so the replacement module is undefined, an error with reason\n`undef` is generated.","ref":"erlang.html#apply/3"},{"type":"type","title":"erlang.arity/0","doc":"The arity of a function or type.","ref":"erlang.html#t:arity/0"},{"type":"type","title":"erlang.atom/0","doc":"An Erlang [atom](`e:system:data_types.md#atom`).","ref":"erlang.html#t:atom/0"},{"type":"function","title":"erlang.atom_to_binary/1","doc":"Equivalent to  atom_to_binary(Atom, utf8) .","ref":"erlang.html#atom_to_binary/1"},{"type":"function","title":"erlang.atom_to_binary/2","doc":"Returns a binary corresponding to the text representation of `Atom`.\n\nIf `Encoding` is `latin1`, each character in the text representation\nis stored as a single byte.  If `Encoding` is `utf8` or `unicode`, the\ncharacters are encoded using UTF-8, where some characters may require\nmultiple bytes.\n\n> #### Change {: .info }\n>\n> As from Erlang/OTP 20, atoms can contain any Unicode character and\n> [`atom_to_binary(Atom, latin1)`](`atom_to_binary/2`) may fail if the text\n> representation for `Atom` contains a Unicode character > 255.","ref":"erlang.html#atom_to_binary/2"},{"type":"function","title":"Examples - erlang.atom_to_binary/2","doc":"```erlang\n1> atom_to_binary('Erlang', latin1).\n<<\"Erlang\">>\n2> atom_to_binary('π', unicode).\n<<207,128>>\n3> atom_to_binary('π', latin1).\n** exception error: bad argument\n     in function  atom_to_binary/2\n        called as atom_to_binary('π',latin1)\n        *** argument 1: contains a character not expressible in latin1\n```","ref":"erlang.html#atom_to_binary/2-examples"},{"type":"function","title":"erlang.atom_to_list/1","doc":"Returns a list of unicode code points corresponding to the text representation\nof `Atom`.\n\nSee the `m:unicode` module for instructions on converting the resulting list into\ndifferent formats.","ref":"erlang.html#atom_to_list/1"},{"type":"function","title":"Examples - erlang.atom_to_list/1","doc":"```erlang\n1> atom_to_list('Erlang').\n\"Erlang\"\n2> atom_to_list('π').\n[960]\n3> atom_to_list('你好').\n[20320,22909]\n```","ref":"erlang.html#atom_to_list/1-examples"},{"type":"type","title":"erlang.binary/0","doc":"An Erlang [binary](`e:system:data_types.md#bit-strings-and-binaries`), that is,\na bitstring with a size divisible by 8.","ref":"erlang.html#t:binary/0"},{"type":"function","title":"erlang.binary_part/2","doc":"Equivalent to  binary_part(Subject, Start, Length) .","ref":"erlang.html#binary_part/2"},{"type":"function","title":"erlang.binary_part/3","doc":"Extracts the part of the binary described by `Start` and `Length`.\n\nA negative length can be used to extract bytes at the end of a binary.\n\n`Start` is zero-based.\n\nFailure: `badarg` if `Start` and `Length` in any way reference\noutside the binary.\n\nFor details about the semantics of `Start` and `Length`, see\n`binary:part/3`.","ref":"erlang.html#binary_part/3"},{"type":"function","title":"Examples - erlang.binary_part/3","doc":"```erlang\n1> Bin = <<1,2,3,4,5,6,7,8,9,10>>.\n2> binary_part(Bin, 0, 2).\n<<1,2>>\n3> binary_part(Bin, 2, 3).\n<<3,4,5>>\n4> binary_part(Bin, byte_size(Bin), -5).\n<<6,7,8,9,10>>\n```","ref":"erlang.html#binary_part/3-examples"},{"type":"function","title":"erlang.binary_to_atom/1","doc":"Equivalent to  binary_to_atom(Binary, utf8) .","ref":"erlang.html#binary_to_atom/1"},{"type":"function","title":"erlang.binary_to_atom/2","doc":"Returns the atom whose text representation is `Binary`, creating a new\natom if necessary.\n\nIf `Encoding` is `utf8` or `unicode`, the binary must contain valid\nUTF-8 sequences.\n\n> #### Note {: .info }\n>\n> Note that once an atom is created, it cannot be deleted.\n> The Erlang system has a\n> [configurable limit](`e:system:system_limits.md#atoms`)\n> on the number of atoms that can exist.\n> To avoid reaching this limit, consider whether\n> [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`) is a better choice\n> than [`binary_to_atom/2`](`binary_to_atom/2`).\n>\n> The number of characters that are permitted in an atom name is\n> [limited](`e:system:system_limits.md#atom_name_limit`).\n\n> #### Change {: .info }\n>\n> As from Erlang/OTP 20, [`binary_to_atom(Binary, utf8)`](`binary_to_atom/2`) is\n> capable of decoding any Unicode character. Earlier versions would fail if the\n> binary contained Unicode characters > 255.","ref":"erlang.html#binary_to_atom/2"},{"type":"function","title":"Examples - erlang.binary_to_atom/2","doc":"```erlang\n1> binary_to_atom(<<\"Erlang\">>, latin1).\n'Erlang'\n2> binary_to_atom(<<960/utf8>>, utf8).\n'π'\n```","ref":"erlang.html#binary_to_atom/2-examples"},{"type":"function","title":"erlang.binary_to_existing_atom/1","doc":"Equivalent to  binary_to_existing_atom(Binary, utf8) .","ref":"erlang.html#binary_to_existing_atom/1"},{"type":"function","title":"erlang.binary_to_existing_atom/2","doc":"Returns the atom whose text representation is `Binary` provided that such\natom already exists.\n\nThe Erlang system has a [configurable\nlimit](`e:system:system_limits.md#atoms`) for the total number of\natoms that can exist. Once an atom is created, it cannot be\ndeleted. Therefore, it is not safe to create many atoms from binaries\nthat come from an untrusted source (for example, a file fetched from\nthe Internet), for example, using `binary_to_atom/2`. This function is\nthus the appropriate option when the input binary comes from an\nuntrusted source.\n\nAn atom exists in an Erlang system when included in a loaded Erlang module or\nwhen created programmatically (for example, by\n[`binary_to_atom/2`](`binary_to_atom/2`)). See the next note for an example of\nwhen an atom exists in the source code for an Erlang module but not in the\ncompiled version of the same module.\n\nFailure: `badarg` if the atom does not exist.\n\n> #### Note {: .info }\n>\n> Note that the compiler may optimize away atoms. For example, the compiler will\n> rewrite [`atom_to_list(some_atom)`](`atom_to_list/1`) to `\"some_atom\"`. If\n> that expression is the only mention of the atom `some_atom` in the containing\n> module, the atom will not be created when the module is loaded, and a\n> subsequent call to\n> [`binary_to_existing_atom(<<\"some_atom\">>, utf8)`](`binary_to_existing_atom/2`)\n> will fail.\n\n> #### Note {: .info }\n>\n> The number of characters that are permitted in an atom name is limited. The\n> default limits can be found in the\n> [Efficiency Guide (section System Limits)](`e:system:system_limits.md`).","ref":"erlang.html#binary_to_existing_atom/2"},{"type":"function","title":"Examples - erlang.binary_to_existing_atom/2","doc":"```erlang\n1> binary_to_existing_atom(~\"definitely_not_existing_at_all\", utf8).\n** exception error: bad argument\n     in function  binary_to_existing_atom/2\n        called as binary_to_existing_atom(<<\"definitely_not_existing_at_all\">>,utf8)\n        *** argument 1: not an already existing atom\n2> hello.\nhello\n3> binary_to_existing_atom(~\"hello\", utf8).\nhello\n```","ref":"erlang.html#binary_to_existing_atom/2-examples"},{"type":"function","title":"erlang.binary_to_float/1","doc":"Returns the float whose text representation is `Binary`.\n\nThe float string format is the same as the format for\n[Erlang float literals](`e:system:data_types.md`), except that underscores\nare not permitted.\n\nFailure: `badarg` if `Binary` contains an invalid representation of a float.","ref":"erlang.html#binary_to_float/1"},{"type":"function","title":"Examples - erlang.binary_to_float/1","doc":"```erlang\n1> binary_to_float(~\"10.5\").\n10.5\n2> binary_to_float(~\"17.0\").\n17.0\n3> binary_to_float(<<\"2.2017764e+1\">>).\n22.017764\n```","ref":"erlang.html#binary_to_float/1-examples"},{"type":"function","title":"erlang.binary_to_integer/1","doc":"Returns an integer whose text representation is `Binary`.\n\n[`binary_to_integer/1`](`binary_to_integer/1`) accepts the same string formats\nas `list_to_integer/1`.\n\nFailure: `badarg` if `Binary` contains an invalid representation of an integer.","ref":"erlang.html#binary_to_integer/1"},{"type":"function","title":"Examples - erlang.binary_to_integer/1","doc":"```erlang\n1> binary_to_integer(<<\"123\">>).\n123\n2> binary_to_integer(<<\"-99\">>).\n-99\n3> binary_to_integer(<<\"+33\">>).\n33\n```","ref":"erlang.html#binary_to_integer/1-examples"},{"type":"function","title":"erlang.binary_to_integer/2","doc":"Returns an integer whose text representation in base `Base` is `Binary`.","ref":"erlang.html#binary_to_integer/2"},{"type":"function","title":"Example - erlang.binary_to_integer/2","doc":"```erlang\n1> binary_to_integer(<<\"3FF\">>, 16).\n1023\n2> binary_to_integer(<<\"101\">>, 2).\n5\n```\n\n[`binary_to_integer/2`](`binary_to_integer/2`) accepts the same string formats\nas `list_to_integer/2`.\n\nFailure: `badarg` if `Binary` contains a invalid representation of an integer.","ref":"erlang.html#binary_to_integer/2-example"},{"type":"function","title":"erlang.binary_to_list/1","doc":"Returns a list of integers corresponding to the bytes of `Binary`.","ref":"erlang.html#binary_to_list/1"},{"type":"function","title":"Examples - erlang.binary_to_list/1","doc":"```erlang\n1> binary_to_list(<<1,2,3>>).\n[1,2,3]\n```","ref":"erlang.html#binary_to_list/1-examples"},{"type":"function","title":"erlang.binary_to_list/3","doc":"As [`binary_to_list/1`](`binary_to_list/1`), but returns a list of integers\ncorresponding to the bytes from position `Start` to position `Stop` in `Binary`.\n\nThe positions in the binary are numbered starting from 1.\n\n> #### Note {: .info }\n>\n> **The one-based indexing for binaries used by this function is deprecated.** New\n> code should use `binary:bin_to_list/3`. All functions in\n> module `binary` consistently use zero-based indexing.","ref":"erlang.html#binary_to_list/3"},{"type":"function","title":"Examples - erlang.binary_to_list/3","doc":"```erlang\n1> binary_to_list(~\"abcdef\", 2, 3).\n\"bc\"\n```","ref":"erlang.html#binary_to_list/3-examples"},{"type":"function","title":"erlang.binary_to_term/1","doc":"Returns an Erlang term that is the result of decoding binary object `Binary`,\nwhich must be encoded according to the\n[Erlang external term format](erl_ext_dist.md).\n\n> #### Warning {: .warning }\n>\n> When decoding binaries from untrusted sources, the untrusted source may submit\n> data in a way to create resources, such as atoms and remote references, that\n> cannot be garbage collected and lead to a Denial of Service (DoS) attack.\n> In such cases, use [`binary_to_term/2`](`binary_to_term/2`) with the `safe`\n> option.","ref":"erlang.html#binary_to_term/1"},{"type":"function","title":"Examples - erlang.binary_to_term/1","doc":"```erlang\n1> Bin = term_to_binary(hello).\n<<131,119,5,104,101,108,108,111>>\n2> hello = binary_to_term(Bin).\nhello\n```\n\nSee also `term_to_binary/1` and `binary_to_term/2`.","ref":"erlang.html#binary_to_term/1-examples"},{"type":"function","title":"erlang.binary_to_term/2","doc":"Equivalent to [`binary_to_term(Binary)`](`binary_to_term/1`), but can be configured to\nfit special purposes.\n\nThe allowed options are:\n\n- **`safe`** - Use this option when receiving binaries from an untrusted source.\n\n  When enabled, it prevents decoding data that can be used to attack the Erlang\n  runtime. In the event of receiving unsafe data, decoding fails with a `badarg`\n  error.\n\n  The `safe` option prevents direct and indirect creation of new atoms\n  (such as those embedded in certain structures like process\n  identifiers) and creation of new external function references. None\n  of these resources are garbage collected, so unchecked creation can\n  exhaust available memory.\n\n  > #### Warning {: .warning }\n  >\n  > The `safe` option ensures data is safely processed by the Erlang runtime,\n  > but it does not guarantee that the data is safe for your application.\n  > Always validate data from untrusted sources. If a binary is stored or\n  > transmitted through untrusted sources, consider cryptographically signing it.","ref":"erlang.html#binary_to_term/2"},{"type":"function","title":"Examples - erlang.binary_to_term/2","doc":"```erlang\n  1> Bin = <<131,119,8,\"tjenixen\">>.\n  2> binary_to_term(Bin, [safe]).\n  ** exception error: bad argument\n       in function  binary_to_term/2\n          called as binary_to_term(<<131,119,8,116,106,101,110,105,120,101,110>>,[safe])\n          *** argument 1: invalid or unsafe external representation of a term\n  3> tjenixen.\n  tjenixen\n  4> binary_to_term(Bin, [safe]).\n  tjenixen\n  ```\n\n- **`used`** - Changes the return value to `{Term, Used}` where `Used` is the\n  number of bytes actually read from `Binary`.","ref":"erlang.html#binary_to_term/2-examples"},{"type":"function","title":"Examples - erlang.binary_to_term/2","doc":"```erlang\n  1> Input = <<(term_to_binary(hello))/binary, \"world\">>.\n  <<131,119,5,104,101,108,108,111,119,111,114,108,100>>\n  2> {Term, Used} = binary_to_term(Input, [used]).\n  {hello, 8}\n  3> split_binary(Input, Used).\n  {<<131,119,5,104,101,108,108,111>>, <<\"world\">>}\n  ```\n\nFailure: `badarg` if `safe` is specified and unsafe data is decoded.\n\nSee also `term_to_binary/1`, `binary_to_term/1`, and `list_to_existing_atom/1`.","ref":"erlang.html#binary_to_term/2-examples-1"},{"type":"function","title":"erlang.bit_size/1","doc":"Returns an integer that is the size in bits of `Bitstring`.","ref":"erlang.html#bit_size/1"},{"type":"function","title":"Examples - erlang.bit_size/1","doc":"```erlang\n1> bit_size(<<433:16,3:3>>).\n19\n2> bit_size(<<1,2,3>>).\n24\n```","ref":"erlang.html#bit_size/1-examples"},{"type":"type","title":"erlang.bitstring/0","doc":"An Erlang [bitstring](`e:system:data_types.md#bit-strings-and-binaries`).","ref":"erlang.html#t:bitstring/0"},{"type":"type","title":"erlang.bitstring_list/0","doc":"","ref":"erlang.html#t:bitstring_list/0"},{"type":"function","title":"erlang.bitstring_to_list/1","doc":"Returns a list of integers corresponding to the bytes of `Bitstring`.\n\nIf the number of bits in the binary is not a multiple of 8, the last element of\nthe list is a bitstring containing the remaining 1 to 7 bits.","ref":"erlang.html#bitstring_to_list/1"},{"type":"function","title":"Examples - erlang.bitstring_to_list/1","doc":"```erlang\n1> bitstring_to_list(<<433:16>>).\n[1,177]\n2> bitstring_to_list(<<433:16,3:3>>).\n[1,177,<<3:3>>]\n```","ref":"erlang.html#bitstring_to_list/1-examples"},{"type":"type","title":"erlang.boolean/0","doc":"A [boolean](`e:system:data_types.md#boolean`) value.","ref":"erlang.html#t:boolean/0"},{"type":"function","title":"erlang.bump_reductions/1","doc":"This implementation-dependent function increments the reduction counter for the\ncalling process.\n\nIn the Beam emulator, the reduction counter is normally incremented by one for\neach function and BIF call. A context switch is forced when the counter reaches\nthe maximum number of reductions for a process (4000 reductions in Erlang/OTP 19.2 and later).\n\n> #### Warning {: .warning }\n>\n> This BIF can be removed in a future version of the Beam machine without prior\n> warning. It is unlikely to be implemented in other Erlang implementations.","ref":"erlang.html#bump_reductions/1"},{"type":"type","title":"erlang.byte/0","doc":"A byte of data represented by an integer.","ref":"erlang.html#t:byte/0"},{"type":"function","title":"erlang.byte_size/1","doc":"Returns an integer that is the number of bytes needed to contain `Bitstring`.\n\nIf the number of bits in `Bitstring` is not a multiple of 8, the\nresult is rounded **up**.","ref":"erlang.html#byte_size/1"},{"type":"function","title":"Examples - erlang.byte_size/1","doc":"```erlang\n1> byte_size(<<433:16,3:3>>).\n3\n2> byte_size(<<1,2,3,4>>).\n4\n```","ref":"erlang.html#byte_size/1-examples"},{"type":"function","title":"erlang.cancel_timer/1","doc":"Equivalent to  erlang:cancel_timer(TimerRef, []) .","ref":"erlang.html#cancel_timer/1"},{"type":"function","title":"erlang.cancel_timer/2","doc":"Cancels a timer that has been created by [`erlang:start_timer`](`start_timer/4`)\nor [`erlang:send_after`](`send_after/4`). `TimerRef` identifies the timer, and\nwas returned by the BIF that created the timer.\n\n`Option`s:\n\n- **`{async, Async}`** - Asynchronous request for cancellation. `Async` defaults\n  to `false`, which causes the cancellation to be performed synchronously. When\n  `Async` is set to `true`, the cancel operation is performed asynchronously.\n  That is, `cancel_timer()` sends an asynchronous request for cancellation to\n  the timer service that manages the timer, and then returns `ok`.\n\n- **`{info, Info}`** - Requests information about the `Result` of the\n  cancellation. `Info` defaults to `true`, which means the `Result` is given.\n  When `Info` is set to `false`, no information about the result of the\n  cancellation is given.\n\n  - When `Async` is `false`: if `Info` is `true`, the `Result` is returned by\n    `erlang:cancel_timer()`. otherwise `ok` is returned.\n  - When `Async` is `true`: if `Info` is `true`, a message on the form\n    `{cancel_timer, TimerRef, Result}` is sent to the caller of\n    `erlang:cancel_timer()` when the cancellation operation has been performed,\n    otherwise no message is sent.\n\nMore `Option`s may be added in the future.\n\nIf `Result` is an integer, it represents the time in milliseconds left until the\ncanceled timer would have expired.\n\nIf `Result` is `false`, a timer corresponding to `TimerRef` could not be found.\nThis can be either because the timer had expired, already had been canceled, or\nbecause `TimerRef` never corresponded to a timer. Even if the timer had expired,\nit does not tell you if the time-out message has arrived at its destination yet.\n\n> #### Note {: .info }\n>\n> The timer service that manages the timer can be co-located with another\n> scheduler than the scheduler that the calling process is executing on. If so,\n> communication with the timer service takes much longer time than if it is\n> located locally. If the calling process is in critical path, and can do other\n> things while waiting for the result of this operation, or is not interested in\n> the result of the operation, you want to use option `{async, true}`. If using\n> option `{async, false}`, the calling process blocks until the operation has\n> been performed.\n\nSee also [`erlang:send_after/4`](`send_after/4`),\n[`erlang:start_timer/4`](`start_timer/4`), and\n[`erlang:read_timer/2`](`read_timer/2`).","ref":"erlang.html#cancel_timer/2"},{"type":"function","title":"erlang.ceil/1","doc":"Returns the smallest integer not less than `Number`.\n\nSee also `trunc/1`.","ref":"erlang.html#ceil/1"},{"type":"function","title":"Examples - erlang.ceil/1","doc":"```erlang\n1> ceil(5.5).\n6\n2> ceil(-2.3).\n-2\n3> ceil(10.0).\n10\n```","ref":"erlang.html#ceil/1-examples"},{"type":"type","title":"erlang.char/0","doc":"An ASCII character or a `m:unicode` codepoint presented by an integer.","ref":"erlang.html#t:char/0"},{"type":"function","title":"erlang.check_old_code/1","doc":"Returns `true` if `Module` has\n[old code](`e:system:code_loading.md#code-replacement`), otherwise `false`.\n\nSee also `m:code`.","ref":"erlang.html#check_old_code/1"},{"type":"function","title":"erlang.check_process_code/2","doc":"Equivalent to  check_process_code(Pid, Module, []) .","ref":"erlang.html#check_process_code/2"},{"type":"function","title":"erlang.check_process_code/3","doc":"Checks if the node local process identified by `Pid` executes old code for\n`Module`.\n\n`Option`s:\n\n- **`{allow_gc, boolean()}`** - Determines if garbage collection is allowed when\n  performing the operation. If `{allow_gc, false}` is passed, and a garbage\n  collection is needed to determine the result of the operation, the operation\n  is aborted (see information on `CheckResult` below). The default is to allow\n  garbage collection, that is, `{allow_gc, true}`.\n\n- **`{async, RequestId}`** - The function\n  [`check_process_code/3`](`check_process_code/3`) returns the value `async`\n  immediately after the request has been sent. When the request has been\n  processed, the process that called this function is passed a message on the\n  form `{check_process_code, RequestId, CheckResult}`.\n\nIf `Pid` equals `self/0`, and no `async` option has been passed, the operation\nis performed at once. Otherwise a request for the operation is sent to the\nprocess identified by `Pid`, and is handled when appropriate. If no `async`\noption has been passed, the caller blocks until `CheckResult` is available and\ncan be returned.\n\n`CheckResult` informs about the result of the request as follows:\n\n- **`true`** - The process identified by `Pid` executes old code for `Module`.\n  That is, the current call of the process executes old code for this module, or\n  the process has references to old code for this module, or the process\n  contains funs that references old code for this module.\n\n- **`false`** - The process identified by `Pid` does not execute old code for\n  `Module`.\n\n- **`aborted`** - The operation was aborted, as the process needed to be garbage\n  collected to determine the operation result, and the operation was requested\n  by passing option `{allow_gc, false}`.\n\n> #### Change {: .info }\n>\n> Up until ERTS version 8.\\*, the check process code operation checks for all\n> types of references to the old code. That is, direct references (e.g. return\n> addresses on the process stack), indirect references (`fun`s in process\n> context), and references to literals in the code.\n>\n> As of ERTS version 9.0, the check process code operation only checks for\n> direct references to the code. Indirect references via `fun`s will be ignored.\n> If such `fun`s exist and are used after a purge of the old code, an exception\n> will be raised upon usage (same as the case when the `fun` is received by the\n> process after the purge). Literals will be taken care of (copied) at a later\n> stage. This behavior can as of ERTS version 8.1 be enabled when\n> [building OTP](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring`),\n> and will automatically be enabled if dirty scheduler support is enabled.\n\nSee also `m:code`.\n\nFailures:\n\n- **`badarg`** - If `Pid` is not a node local process identifier.\n\n- **`badarg`** - If `Module` is not an atom.\n\n- **`badarg`** - If `OptionList` is an invalid list of options.","ref":"erlang.html#check_process_code/3"},{"type":"function","title":"erlang.convert_time_unit/3","doc":"Converts the `Time` value of time unit `FromUnit` to the corresponding\n`ConvertedTime` value of time unit `ToUnit`. The result is rounded using the\n`floor/1` function.\n\n> #### Warning {: .warning }\n>\n> You can lose accuracy and precision when converting between time units. To\n> minimize such loss, collect all data at `native` time unit and do the\n> conversion on the end result.","ref":"erlang.html#convert_time_unit/3"},{"type":"type","title":"erlang.cpu_topology/0","doc":"The current cpu topology.\n\n`node` refers to Non-Uniform Memory Access (NUMA) nodes. `thread` refers\nto hardware threads (for example, Intel hyper-threads).\n\nA level in term `CpuTopology` can be omitted if only one entry exists and\n`InfoList` is empty.\n\n`thread` can only be a sublevel to `core`. `core` can be a sublevel to\n`processor` or `node`. `processor` can be on the top level or a sublevel to\n`node`. `node` can be on the top level or a sublevel to `processor`. That\nis, NUMA nodes can be processor internal or processor external. A CPU\ntopology can consist of a mix of processor internal and external NUMA nodes,\nas long as each logical CPU belongs to _one_ NUMA node. Cache hierarchy is\nnot part of the `CpuTopology` type, but will be in a future release. Other\nthings can also make it into the CPU topology in a future release. So, expect\nthe `CpuTopology` type to change.","ref":"erlang.html#t:cpu_topology/0"},{"type":"function","title":"erlang.crc32/1","doc":"Computes and returns the crc32 (IEEE 802.3 style) checksum for `Data`.","ref":"erlang.html#crc32/1"},{"type":"function","title":"erlang.crc32/2","doc":"Continues computing the crc32 checksum by combining the previous checksum,\n`OldCrc`, with the checksum of `Data`.\n\nThe following code:\n\n```erlang\nX = erlang:crc32(Data1),\nY = erlang:crc32(X,Data2).\n```\n\nassigns the same value to `Y` as this:\n\n```erlang\nY = erlang:crc32([Data1,Data2]).\n```","ref":"erlang.html#crc32/2"},{"type":"function","title":"erlang.crc32_combine/3","doc":"Combines two previously computed crc32 checksums.\n\nThis computation requires the size of the data object for the second checksum\nto be known.\n\nThe following code:\n\n```erlang\nY = erlang:crc32(Data1),\nZ = erlang:crc32(Y,Data2).\n```\n\nassigns the same value to `Z` as this:\n\n```erlang\nX = erlang:crc32(Data1),\nY = erlang:crc32(Data2),\nZ = erlang:crc32_combine(X,Y,iolist_size(Data2)).\n```","ref":"erlang.html#crc32_combine/3"},{"type":"function","title":"erlang.date/0","doc":"Returns the current date as `{Year, Month, Day}`.\n\nThe time zone and Daylight Saving Time correction depend on the underlying OS.\nThe return value is based on the\n[OS System Time](time_correction.md#os-system-time).\n\nFor example:\n\n```erlang\n> date().\n{1995,2,19}\n```","ref":"erlang.html#date/0"},{"type":"function","title":"erlang.decode_packet/3","doc":"Decodes the binary `Bin` according to the packet protocol specified by `Type`,\nsimilar to the packet handling done by sockets with the `{packet,Type}` option.\n\nIf `Bin` contains an entire packet, it is returned along with the\nremainder of the binary as `{ok,Packet,Rest}`.\n\nIf `Bin` does not contain the entire packet, `{more,Length}` is returned.\n`Length` is either the expected _total size_ of the packet or `undefined` if\nthe expected packet size is unknown. `decode_packet` can then be called again\nwith additional data.\n\nIf the packet does not conform to the protocol format, `{error,Reason}` is\nreturned.\n\n`Type`s:\n\n- **`raw | 0`** - No packet handling is done. The entire binary is returned\n  unless it is empty.\n\n- **`1 | 2 | 4`** - Packets consist of a header specifying the number of bytes\n  in the packet, followed by that number of bytes. The length of the header can\n  be one, two, or four bytes; the order of the bytes is big-endian. The header\n  is stripped off when the packet is returned.\n\n- **`line`** - A packet is a line-terminated by a delimiter byte, default is the\n  latin-1 newline character. The delimiter byte is included in the returned\n  packet unless the line was truncated according to option `line_length`.\n\n- **`asn1 | cdr | sunrm | fcgi | tpkt`** - The header is _not_ stripped off.\n\n  The meanings of the packet types are as follows:\n\n  - **`asn1` \\- ASN.1 BER**\n\n  - **`sunrm` \\- Sun's RPC encoding**\n\n  - **`cdr` \\- CORBA (GIOP 1.1)**\n\n  - **`fcgi` \\- Fast CGI**\n\n  - **`tpkt` \\- TPKT format \\[RFC1006]**\n\n- **`http | httph | http_bin | httph_bin`** - The Hypertext Transfer Protocol.\n  The packets are returned with the format according to `HttpPacket` described\n  earlier. A packet is either a request, a response, a header, or an end of\n  header mark. Invalid lines are returned as `HttpError`.\n\n  Recognized request methods and header fields are returned as atoms. Others are\n  returned as strings. Strings of unrecognized header fields are formatted with\n  only capital letters first and after hyphen characters, for example,\n  `\"Sec-Websocket-Key\"`. Header field names are also returned in\n  `UnmodifiedField` as strings, without any conversion or formatting.\n\n  The protocol type `http` is only to be used for the first line when an\n  `HttpRequest` or an `HttpResponse` is expected. The following calls are to use\n  `httph` to get `HttpHeader`s until `http_eoh` is returned, which marks the end\n  of the headers and the beginning of any following message body.\n\n  The variants `http_bin` and `httph_bin` return strings (`HttpString`) as\n  binaries instead of lists.\n\n  Since OTP 26.0, `Host` may be an IPv6 address enclosed in `[]`, as defined in\n  [RFC2732 ](https://www.ietf.org/rfc/rfc2732.txt).\n\nOptions:\n\n- **`{packet_size, integer() >= 0}`** - Sets the maximum allowed size of the\n  packet body. If the packet header indicates that the length of the packet is\n  longer than the maximum allowed length, the packet is considered invalid.\n  Defaults to 0, which means no size limit.\n\n- **`{line_length, integer() >= 0}`** - For packet type `line`, lines longer\n  than the indicated length are truncated.\n\n  Option `line_length` also applies to `http*` packet types as an alias for\n  option `packet_size` if `packet_size` itself is not set. This use is only\n  intended for backward compatibility.\n\n- **`{line_delimiter, 0 =< byte() =< 255}`** - For packet type `line`, sets the\n  delimiting byte. Default is the latin-1 character `$\\n`.","ref":"erlang.html#decode_packet/3"},{"type":"function","title":"Examples - erlang.decode_packet/3","doc":"```erlang\n1> erlang:decode_packet(1, <<3,\"abcd\">>, []).\n{ok,<<\"abc\">>,<<\"d\">>}\n2> erlang:decode_packet(1, <<5,\"abcd\">>, []).\n{more,6}\n```","ref":"erlang.html#decode_packet/3-examples"},{"type":"function","title":"erlang.delete_element/2","doc":"Returns a new tuple with element at `Index` removed from tuple `Tuple1`.","ref":"erlang.html#delete_element/2"},{"type":"function","title":"Examples - erlang.delete_element/2","doc":"```erlang\n1> erlang:delete_element(2, {one, two, three}).\n{one,three}\n```","ref":"erlang.html#delete_element/2-examples"},{"type":"function","title":"erlang.delete_module/1","doc":"Makes the current code for `Module` become old code and deletes all references\nfor this module from the export table. Returns `undefined` if the module does\nnot exist, otherwise `true`.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for the code server (see `m:code`) and is not to be used\n> elsewhere.\n\nFailure: `badarg` if there already is an old version of `Module`.","ref":"erlang.html#delete_module/1"},{"type":"function","title":"erlang.demonitor/1","doc":"If `MonitorRef` is a reference that the calling process obtained by calling\n`monitor/2`, this monitoring is turned off. If the monitoring is already turned\noff, nothing happens.\n\nOnce [`demonitor(MonitorRef)`](`demonitor/1`) has returned, it is guaranteed\nthat no `{'DOWN', MonitorRef, _, _, _}` message, because of the monitor, will be\nplaced in the caller message queue in the future. However, a\n`{'DOWN', MonitorRef, _, _, _}` message can have been placed in the caller\nmessage queue before the call. It is therefore usually advisable to remove such\na `'DOWN'` message from the message queue after monitoring has been stopped.\n[`demonitor(MonitorRef, [flush])`](`demonitor/2`) can be used instead of\n[`demonitor(MonitorRef)`](`demonitor/1`) if this cleanup is wanted.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.\n\n> #### Change {: .info }\n>\n> Before Erlang/OTP R11B (ERTS 5.5) [`demonitor/1`](`demonitor/1`) behaved\n> completely asynchronously, that is, the monitor was active until the\n> \"demonitor signal\" reached the monitored entity. This had one undesirable\n> effect. You could never know when you were guaranteed _not_ to receive a\n> `DOWN` message because of the monitor.\n>\n> The current behavior can be viewed as two combined operations: asynchronously\n> send a \"demonitor signal\" to the monitored entity and ignore any future\n> results of the monitor.\n\nFailure: It is an error if `MonitorRef` refers to a monitoring started by\nanother process. Not all such cases are cheap to check. If checking is cheap,\nthe call fails with `badarg`, for example if `MonitorRef` is a remote reference.","ref":"erlang.html#demonitor/1"},{"type":"function","title":"erlang.demonitor/2","doc":"The returned value is `true` unless `info` is part of `OptionList`.\n\n[`demonitor(MonitorRef, [])`](`demonitor/2`) is equivalent to\n[`demonitor(MonitorRef)`](`demonitor/1`).\n\n`Option`s:\n\n- **`flush`** - Removes (one) `{_, MonitorRef, _, _, _}` message, if there is\n  one, from the caller message queue after monitoring has been stopped.\n\n  Calling [`demonitor(MonitorRef, [flush])`](`demonitor/2`) is equivalent to the\n  following, but more efficient:\n\n  ```erlang\n  demonitor(MonitorRef),\n  receive\n      {_, MonitorRef, _, _, _} ->\n          true\n  after 0 ->\n          true\n  end\n  ```\n\n- **`info`** - The returned value is one of the following:\n\n  - **`true`** - The monitor was found and removed. In this case, no `'DOWN'`\n    message corresponding to this monitor has been delivered and will not be\n    delivered.\n\n  - **`false`** - The monitor was not found and could not be removed. This\n    probably because someone already has placed a `'DOWN'` message corresponding\n    to this monitor in the caller message queue.\n\n  If option `info` is combined with option `flush`, `false` is returned if a\n  flush was needed, otherwise `true`.\n\n> #### Change {: .info }\n>\n> More options can be added in a future release.\n\nFailures:\n\n- **`badarg`** - If `OptionList` is not a list.\n\n- **`badarg`** - If `Option` is an invalid option.\n\n- **`badarg`** - The same failure as for `demonitor/1`.","ref":"erlang.html#demonitor/2"},{"type":"type","title":"erlang.deprecated_time_unit/0","doc":"The `t:time_unit/0` type also consist of the following _deprecated_ symbolic\ntime units:\n\n- **`seconds`** - Same as [`second`](`t:time_unit/0`).\n\n- **`milli_seconds`** - Same as [`millisecond`](`t:time_unit/0`).\n\n- **`micro_seconds`** - Same as [`microsecond`](`t:time_unit/0`).\n\n- **`nano_seconds`** - Same as [`nanosecond`](`t:time_unit/0`).","ref":"erlang.html#t:deprecated_time_unit/0"},{"type":"function","title":"erlang.disconnect_node/1","doc":"Forces the disconnection of a node.\n\nDoing this makes it appears to the node `Node` as if the local node has crashed.\nThis BIF is mainly used in the Erlang network authentication protocols.\n\nReturns `true` if disconnection succeeds, otherwise `false`. If the local node\nis not alive, `ignored` is returned.\n\n> #### Note {: .info }\n>\n> This function may return before [`nodedown` messages](`monitor_node/2`) have\n> been delivered.","ref":"erlang.html#disconnect_node/1"},{"type":"function","title":"erlang.display/1","doc":"Prints a text representation of `Term` on the standard output.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging only. The printed representation may\n> contain internal details that do not match the high-level representation of\n> the term in Erlang.","ref":"erlang.html#display/1"},{"type":"function","title":"erlang.dist_ctrl_get_data/1","doc":"Get distribution channel data from the local node that is to be passed to the\nremote node.\n\nThe distribution channel is identified by `DHandle`. If no data is\navailable, the atom `none` is returned. One can request to be informed by a\nmessage when more data is available by calling\n[`erlang:dist_ctrl_get_data_notification(DHandle)`](`dist_ctrl_get_data_notification/1`).\n\nThe returned value when there are data available depends on the value of the\n`get_size` option configured on the distribution channel identified by\n`DHandle`. For more information see the documentation of the `get_size` option\nfor the [`erlang:dist_ctrl_set_opt/3`](`dist_ctrl_set_opt/3`) function.\n\n> #### Note {: .info }\n>\n> Only the process registered as distribution controller for the distribution\n> channel identified by `DHandle` is allowed to call this function.\n\nThis function is used when implementing an alternative distribution carrier\nusing processes as distribution controllers. `DHandle` is retrieved via the\ncallback [`f_handshake_complete`](alt_dist.md#hs_data_f_handshake_complete).\nMore information can be found in the documentation of\n[ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module](alt_dist.md#distribution-module).","ref":"erlang.html#dist_ctrl_get_data/1"},{"type":"function","title":"erlang.dist_ctrl_get_data_notification/1","doc":"Request notification when more data is available to fetch using\n[`erlang:dist_ctrl_get_data(DHandle)`](`dist_ctrl_get_data/1`) for the\ndistribution channel identified by `DHandle`.\n\nWhen more data is present, the caller will be sent the message `dist_data`.\nOnce a `dist_data` messages has been sent, no more `dist_data` messages will\nbe sent until the [`dist_ctrl_get_data_notification/1`](`dist_ctrl_get_data_notification/1`)\nfunction has been called again.\n\n> #### Note {: .info }\n>\n> Only the process registered as distribution controller for the distribution\n> channel identified by `DHandle` is allowed to call this function.\n\nThis function is used when implementing an alternative distribution carrier\nusing processes as distribution controllers. `DHandle` is retrieved via the\ncallback [`f_handshake_complete`](alt_dist.md#hs_data_f_handshake_complete).\nMore information can be found in the documentation of\n[ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module](alt_dist.md#distribution-module).","ref":"erlang.html#dist_ctrl_get_data_notification/1"},{"type":"function","title":"erlang.dist_ctrl_get_opt/2","doc":"Returns the value of the `get_size` option on the distribution channel\nidentified by `DHandle`. For more information see the documentation of the\n`get_size` option for the [`erlang:dist_ctrl_set_opt/3`](`dist_ctrl_set_opt/3`)\nfunction.\n\n> #### Note {: .info }\n>\n> Only the process registered as distribution controller for the distribution\n> channel identified by `DHandle` is allowed to call this function.\n\nThis function is used when implementing an alternative distribution carrier\nusing processes as distribution controllers. `DHandle` is retrieved via the\ncallback [`f_handshake_complete`](alt_dist.md#hs_data_f_handshake_complete).\nMore information can be found in the documentation of\n[ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module](alt_dist.md#distribution-module).","ref":"erlang.html#dist_ctrl_get_opt/2"},{"type":"function","title":"erlang.dist_ctrl_input_handler/2","doc":"Register an alternate input handler process for the distribution channel\nidentified by `DHandle`.\n\nOnce this function has been called, `InputHandler` is the only process allowed to call\n[`erlang:dist_ctrl_put_data(DHandle, Data)`](`dist_ctrl_put_data/2`) with the\n`DHandle` identifying this distribution channel.\n\n> #### Note {: .info }\n>\n> When the distribution controller for the distribution channel identified by\n> `DHandle` is a process, it is the only process allowed to call this function.\n> This function is also allowed to be called when the distribution controller\n> for the distribution channel identified by `DHandle` is a port. The data\n> received by the port should in this case be delivered to the process\n> identified by `InputHandler` which in turn should call\n> [`erlang:dist_ctrl_put_data/2`](`dist_ctrl_put_data/2`).\n\nThis function is used when implementing an alternative distribution carrier.\n`DHandle` is retrieved via the callback\n[`f_handshake_complete`](alt_dist.md#hs_data_f_handshake_complete). More\ninformation can be found in the documentation of\n[ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module](alt_dist.md#distribution-module).","ref":"erlang.html#dist_ctrl_input_handler/2"},{"type":"function","title":"erlang.dist_ctrl_put_data/2","doc":"Deliver distribution channel data from a remote node to the local node.\n\n> #### Note {: .info }\n>\n> Only the process registered as distribution controller for the distribution\n> channel identified by `DHandle` is allowed to call this function unless an\n> alternate input handler process has been registered using\n> [`erlang:dist_ctrl_input_handler(DHandle, InputHandler)`](`dist_ctrl_input_handler/2`).\n> If an alternate input handler has been registered, only the registered input\n> handler process is allowed to call this function.\n\nThis function is used when implementing an alternative distribution carrier.\n`DHandle` is retrieved via the callback\n[`f_handshake_complete`](alt_dist.md#hs_data_f_handshake_complete). More\ninformation can be found in the documentation of\n[ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module](alt_dist.md#distribution-module).","ref":"erlang.html#dist_ctrl_put_data/2"},{"type":"function","title":"erlang.dist_ctrl_set_opt/3","doc":"Sets the value of the `get_size` option on the distribution channel identified\nby `DHandle`.\n\nThis option controls the return value of calls to\n[erlang:dist_ctrl_get_data(DHandle)](`dist_ctrl_get_data/1`) where `DHandle`\nequals `DHandle` used when setting this option. When the `get_size` option is:\n\n- **`false`** - and there are distribution data available, a call to\n  `erlang:dist_ctrl_get_data(DHandle)` will just return `Data` to pass over the\n  channel. This is the default value of the `get_size` option.\n\n- **`true`** - and there are distribution data available, a call to\n  `erlang:dist_ctrl_get_data(DHandle)` will return `Data` to pass over the\n  channel as well as the `Size` of `Data` in bytes. This is returned as a tuple\n  of the form `{Size, Data}`.\n\nAll options are set to default when a channel is closed.\n\n> #### Note {: .info }\n>\n> Only the process registered as distribution controller for the distribution\n> channel identified by `DHandle` is allowed to call this function.\n\nThis function is used when implementing an alternative distribution carrier\nusing processes as distribution controllers. `DHandle` is retrieved via the\ncallback [`f_handshake_complete`](alt_dist.md#hs_data_f_handshake_complete).\nMore information can be found in the documentation of\n[ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module](alt_dist.md#distribution-module).","ref":"erlang.html#dist_ctrl_set_opt/3"},{"type":"opaque","title":"erlang.dist_handle/0","doc":"An opaque handle identifying a distribution channel.","ref":"erlang.html#t:dist_handle/0"},{"type":"type","title":"erlang.dynamic/0","doc":"The [dynamic](`e:system:typespec.md#dynamic`) type, which represents a statically unknown type","ref":"erlang.html#t:dynamic/0"},{"type":"function","title":"erlang.element/2","doc":"Returns the `N`th element (numbering from 1) of `Tuple`.","ref":"erlang.html#element/2"},{"type":"function","title":"Examples - erlang.element/2","doc":"```erlang\n1> element(2, {a, b, c}).\nb\n```","ref":"erlang.html#element/2-examples"},{"type":"function","title":"erlang.erase/0","doc":"Returns the process dictionary and deletes it.\n\nFor example:\n\n```erlang\n> put(key1, {1, 2, 3}),\nput(key2, [a, b, c]),\nerase().\n[{key1,{1,2,3}},{key2,[a,b,c]}]\n```","ref":"erlang.html#erase/0"},{"type":"function","title":"erlang.erase/1","doc":"Returns the value `Val` associated with `Key` and deletes it from the process\ndictionary. Returns `undefined` if no value is associated with `Key`.\n\nThe average time complexity for the current implementation of this function is\nO(`1`) and the worst case time complexity is O(`N`), where `N` is the number of\nitems in the process dictionary.\n\nFor example:\n\n```erlang\n> put(key1, {merry, lambs, are, playing}),\nX = erase(key1),\n{X, erase(key1)}.\n{{merry,lambs,are,playing},undefined}\n```","ref":"erlang.html#erase/1"},{"type":"function","title":"erlang.error/1","doc":"Raises an exception of class `error` with the reason `Reason`.\n\nAs evaluating this function causes an exception to be thrown, it has no return value.\n\nThe intent of the exception class `error` is to signal that an unexpected error\nhas happened (for example, a function is called with a parameter that has an\nincorrect type). See the guide about\n[errors and error handling](`e:system:errors.md`) for additional information.\nExample:\n\n```erlang\n> catch error(foobar).\n{'EXIT',{foobar,[{shell,apply_fun,3,\n                        [{file,\"shell.erl\"},{line,906}]},\n                 {erl_eval,do_apply,6,[{file,\"erl_eval.erl\"},{line,677}]},\n                 {erl_eval,expr,5,[{file,\"erl_eval.erl\"},{line,430}]},\n                 {shell,exprs,7,[{file,\"shell.erl\"},{line,687}]},\n                 {shell,eval_exprs,7,[{file,\"shell.erl\"},{line,642}]},\n                 {shell,eval_loop,3,[{file,\"shell.erl\"},{line,627}]}]}}\n```","ref":"erlang.html#error/1"},{"type":"function","title":"erlang.error/2","doc":"Raises an exception of class `error` with the reason `Reason`. `Args` is\nexpected to be the list of arguments for the current function or the atom\n`none`.\n\nIf `Args` is a list, it is used to provide the arguments for the current\nfunction in the stack back-trace. If it is `none`, the arity of the calling\nfunction is used in the stacktrace. As evaluating this function causes an\nexception to be raised, it has no return value.\n\nThe intent of the exception class `error` is to signal that an unexpected error\nhas happened (for example, a function is called with a parameter that has an\nincorrect type). See the guide about\n[errors and error handling](`e:system:errors.md`) for additional information.","ref":"erlang.html#error/2"},{"type":"function","title":"Examples - erlang.error/2","doc":"`test.erl`:\n\n```erlang\n-module(test).\n-export([example_fun/2]).\n\nexample_fun(A1, A2) ->\n    erlang:error(my_error, [A1, A2]).\n```\n\nErlang shell:\n\n```text\n1> c(test).\n{ok,test}\n2> test:example_fun(arg1, \"this is the second argument\").\n** exception error: my_error\n     in function  test:example_fun/2\n         called as test:example_fun(arg1,\"this is the second argument\")\n```","ref":"erlang.html#error/2-examples"},{"type":"function","title":"erlang.error/3","doc":"Raises an exception of class `error` with the reason `Reason`. `Args` is\nexpected to be the list of arguments for the current function or the atom\n`none`.\n\nIf `Args` is a list, it is used to provide the arguments for the current\nfunction in the stack back-trace. If it is `none`, the arity of the calling\nfunction is used in the stacktrace. As evaluating this function causes an\nexception to be raised, it has no return value.\n\nIf the `error_info` option is given, the `ErrorInfoMap` will be inserted into\nthe stacktrace. The information given in the `ErrorInfoMap` is to be used by\nerror formatters such as [`erl_error`](`erl_error:format_exception/4`) to\nprovide more context around an error.\n\nThe default `module` of the `ErrorInfoMap` is the module that the call to\n`error/3` is made. The default `function` is `format_error`. See\n[`format_error/2`](`c:erl_error:format_error/2`) for more details on how this\nModule:Function/2 is to be used\n\nThe intent of the exception class `error` is to signal that an unexpected error\nhas happened (for example, a function is called with a parameter that has an\nincorrect type). See the guide about\n[errors and error handling](`e:system:errors.md`) for additional information.","ref":"erlang.html#error/3"},{"type":"function","title":"erlang.exit/1","doc":"Raises an exception of class `exit` with exit reason `Reason`.\n\nAs evaluating this function causes an exception to be raised, it has no return value.\n\nThe intent of the exception class `exit` is that the current process should be\nstopped (for example when a message telling a process to stop is received).\n\nThis function differ from [`error/1,2,3`](`error/1`) by causing an exception of\na different class and by having a reason that does not include the list of\nfunctions from the call stack.\n\nSee the guide about [errors and error handling](`e:system:errors.md`) for\nadditional information.\n\nExample:\n\n```erlang\n> exit(foobar).\n** exception exit: foobar\n> catch exit(foobar).\n{'EXIT',foobar}\n```\n\n> #### Note {: .info }\n>\n> If a process calls [`exit(kill)`](`exit/1`) and does not catch the exception,\n> it will terminate with exit reason `kill` and also emit exit signals with exit\n> reason `kill` (not `killed`) to all linked processes. Such exit signals with\n> exit reason `kill` can be trapped by the linked processes. Note that this\n> means that signals with exit reason `kill` behave differently depending on how\n> they are sent because the signal will be untrappable if a process sends such a\n> signal to another process with [`erlang:exit/2`](`exit/2`).","ref":"erlang.html#exit/1"},{"type":"function","title":"erlang.exit/2","doc":"Sends an exit signal with exit reason `Reason` to the process or port identified\nby `Dest`. If `Dest` is a reference, the exit signal will *only* affect the\nidentified process if the reference is an active\n[process alias](`e:system:ref_man_processes.md#process-aliases`) of a process\nexecuting on an OTP 28.0 node or newer.\n\nThe following behavior applies if `Reason` is any term, except `normal` or\n`kill`, and `P` is the process or port identified by `Dest`:\n\n- If `P` is not [trapping exits](`process_flag/2`), `P` exits with exit reason\n  `Reason`.\n- If `P` is [trapping exits](`process_flag/2`), the exit signal is transformed\n  into a message `{'EXIT', From, Reason}`, where `From` is the process\n  identifier of the process that sent the exit signal, and delivered to the\n  message queue of `P`.\n\nThe following behavior applies if `Reason` is the term `normal` and `Dest` is the\nidentifier of a process `P` which is not the same as the process that invoked\n`erlang:exit(Dest, normal)` (the behavior when a process sends a signal with the\n`normal` reason to itself is described in the warning):\n\n- If `P` is [trapping exits](`process_flag/2`), the exit signal is transformed\n  into a message `{'EXIT', From, normal}`, where `From` is the process\n  identifier of the process that sent the exit signal, and delivered to `P`'s\n  message queue.\n- The signal has no effect if `P` is not trapping exits.\n\nIf `Reason` is the atom `kill`, that is, if [`exit(Dest, kill)`](`exit/2`) is\ncalled, an untrappable exit signal is sent to the process that is identified by\n`Dest`, which unconditionally exits with exit reason `killed`. The exit reason is\nchanged from `kill` to `killed` to hint to linked processes that the killed\nprocess got killed by a call to [`exit(Dest, kill)`](`exit/2`).\n\n> #### Note {: .info }\n>\n> The functions [`erlang:exit/1`](`exit/1`) and [`erlang:exit/2`](`exit/2`) are\n> named similarly but provide very different functionalities. The\n> `erlang:exit/1` function should be used when the intent is to stop the current\n> process while `erlang:exit/2` should be used when the intent is to send an\n> exit signal to another process. Note also that `erlang:exit/1` raises an\n> exception that can be caught while `erlang:exit/2` does not cause any\n> exception to be raised.\n\n> #### Warning {: .warning }\n>\n> The only scenario that has not been covered by the description above is when a\n> process `P` sends an exit signal with reason `normal` to itself, that is\n> `erlang:exit(self(), normal)`. The behavior in this scenario is as follows:\n>\n> - If `P` is [trapping exits](`process_flag/2`), the exit signal is transformed\n>   into a message `{'EXIT', From, normal}`, where `From` is `P`'s process\n>   identifier, and delivered to `P`'s message queue.\n> - `P` exits with reason `normal` if `P` is not trapping exits.\n>\n> Note that the behavior described above is different from when a process sends\n> an exit signal with reason `normal` to another process. This is arguably\n> strange but this behavior is kept for backward compatibility reasons.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.","ref":"erlang.html#exit/2"},{"type":"function","title":"erlang.exit/3","doc":"Provides an option list for modification of the functionality provided by the\n`exit/2` BIF. The `Dest` and `Reason` arguments has the same meaning as when\npassed to the `exit/2` BIF.\n\nCurrently available options:\n\n- **`priority`** -- Since OTP 28.0\n\n  Send this exit signal as a priority exit signal. In order for\n  the signal to be handled as a\n  [priority `EXIT` message](`e:system:ref_man_processes.md#priority-messages`)\n  by the receiver, this option *must* be passed, `Dest` *must* be an active\n  [*priority alias*](#priority_alias) and the receiver *must* be\n  [trapping exits](#process_flag_trap_exit).\n\n  If `Dest` is an active priority alias, but this option is not passed, the exit\n  signal will be handled as on ordinary exit signal. The same is true, if this\n  option is passed, but `Dest` is not an active priority alias.\n\n  > #### Warning {: .warning }\n  >\n  > You *very seldom* need to resort to using priority messages and you may\n  > [cause issues](`e:system:ref_man_processes.md#priority-message-warning`)\n  > instead of solving issues if not used with care.\n\n  For more information see, the\n  [_Adding Messages to the Message Queue_](`e:system:ref_man_processes.md#message-queue-order`)\n  and the\n  [Enabling Priority Message Reception](`e:system:ref_man_processes.md#enable-prio-msg-recv`)\n  sections of the _Erlang Reference Manual_.","ref":"erlang.html#exit/3"},{"type":"type","title":"erlang.ext_binary/0","doc":"A binary data object, structured according to the Erlang external term format.","ref":"erlang.html#t:ext_binary/0"},{"type":"type","title":"erlang.ext_iovec/0","doc":"A term of type `t:iovec/0`, structured according to the Erlang external term\nformat.","ref":"erlang.html#t:ext_iovec/0"},{"type":"function","title":"erlang.external_size/1","doc":"Calculates, without doing the encoding, the maximum byte size for a term encoded\nin the Erlang external term format.\n\nThe following condition applies always:\n\n```erlang\n> Size1 = byte_size(term_to_binary(Term)),\n> Size2 = erlang:external_size(Term),\n> true = Size1 =< Size2.\ntrue\n```","ref":"erlang.html#external_size/1"},{"type":"function","title":"Examples - erlang.external_size/1","doc":"```erlang\n1> Term = {ok,\"abc\"}.\n2> erlang:external_size(Term).\n13\n3> byte_size(term_to_binary(Term)).\n13\n```","ref":"erlang.html#external_size/1-examples"},{"type":"function","title":"erlang.external_size/2","doc":"Calculates, without doing the encoding, the maximum byte size for a term encoded\nin the Erlang external term format.\n\nThe following condition applies always:\n\n```erlang\n> Size1 = byte_size(term_to_binary(Term, Options)),\n> Size2 = erlang:external_size(Term, Options),\n> true = Size1 =< Size2.\ntrue\n```\n\nSee `term_to_binary/2` for a description of the options.","ref":"erlang.html#external_size/2"},{"type":"function","title":"Examples - erlang.external_size/2","doc":"```erlang\n1> Term = {ok,lists:duplicate(50, $A)}.\n{ok,\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}\n2> erlang:external_size(Term, [compressed]).\n60\n3> byte_size(term_to_binary(Term, [compressed])).\n26\n```","ref":"erlang.html#external_size/2-examples"},{"type":"type","title":"erlang.float/0","doc":"An Erlang [float](`e:system:data_types.md#number`).","ref":"erlang.html#t:float/0"},{"type":"function","title":"erlang.float/1","doc":"Returns a float by converting `Number` to a float.","ref":"erlang.html#float/1"},{"type":"function","title":"Examples - erlang.float/1","doc":"```erlang\n1> float(55).\n55.0\n```\n\n> #### Note {: .info }\n>\n> If used on the top level in a guard, it tests whether the argument is a\n> floating point number; for clarity, use `is_float/1` instead.\n>\n> When [`float/1`](`float/1`) is used in an expression in a guard, such as\n> '`float(A) == 4.0`', it converts a number as described earlier.","ref":"erlang.html#float/1-examples"},{"type":"function","title":"erlang.float_to_binary/1","doc":"Equivalent to  float_to_binary(Float, [{scientific, 20}]) .","ref":"erlang.html#float_to_binary/1"},{"type":"function","title":"erlang.float_to_binary/2","doc":"Returns a binary corresponding to the text representation of `Float` using fixed\ndecimal point formatting.\n\n`Options` behaves in the same way as `float_to_list/2`.","ref":"erlang.html#float_to_binary/2"},{"type":"function","title":"Examples - erlang.float_to_binary/2","doc":"```erlang\n1> float_to_binary(7.12, [{decimals, 4}]).\n<<\"7.1200\">>\n2> float_to_binary(7.12, [{decimals, 4}, compact]).\n<<\"7.12\">>\n3> float_to_binary(7.12, [{scientific, 3}]).\n<<\"7.120e+00\">>\n4> float_to_binary(7.12, [short]).\n<<\"7.12\">>\n5> float_to_binary(0.1+0.2, [short]).\n<<\"0.30000000000000004\">>\n6> float_to_binary(0.1+0.2)\n<<\"3.00000000000000044409e-01\">>\n```","ref":"erlang.html#float_to_binary/2-examples"},{"type":"function","title":"erlang.float_to_list/1","doc":"Equivalent to  float_to_list(Float, [{scientific, 20}]) .","ref":"erlang.html#float_to_list/1"},{"type":"function","title":"erlang.float_to_list/2","doc":"Returns a string corresponding to the text representation of `Float` using fixed\ndecimal point formatting.\n\nAvailable options:\n\n- If option `decimals` is specified, the returned value contains at most\n  `Decimals` number of digits past the decimal point. If the number does not fit\n  in the internal static buffer of 256 bytes, the function throws `badarg`.\n- If option `compact` is specified, the trailing zeros at the end of the list\n  are truncated. This option is only meaningful together with option `decimals`.\n- If option `scientific` is specified, the float is formatted using scientific\n  notation with `Decimals` digits of precision.\n- If option `short` is specified, the float is formatted with the smallest\n  number of digits that still guarantees that\n  `F =:= list_to_float(float_to_list(F, [short]))`. When the float is inside the\n  range (-2⁵³, 2⁵³), the notation that yields the smallest number of characters\n  is used (scientific notation or normal decimal notation). Floats outside the\n  range (-2⁵³, 2⁵³) are always formatted using scientific notation to avoid\n  confusing results when doing arithmetic operations.\n- If `Options` is `[]`, the function behaves as `float_to_list/1`.","ref":"erlang.html#float_to_list/2"},{"type":"function","title":"Examples - erlang.float_to_list/2","doc":"```erlang\n1> float_to_list(7.12, [{decimals, 4}]).\n\"7.1200\"\n2> float_to_list(7.12, [{decimals, 4}, compact]).\n\"7.12\"\n3> float_to_list(7.12, [{scientific, 3}]).\n\"7.120e+00\"\n4> float_to_list(7.12, [short]).\n\"7.12\"\n5> float_to_list(0.1+0.2, [short]).\n\"0.30000000000000004\"\n6> float_to_list(0.1+0.2)\n\"3.00000000000000044409e-01\"\n```\n\nIn the last example, [`float_to_list(0.1+0.2)`](`float_to_list/1`) evaluates to\n`\"3.00000000000000044409e-01\"`. The reason for this is explained in\n[Representation of Floating Point Numbers](`e:system:data_types.md#float_representation_problem`).","ref":"erlang.html#float_to_list/2-examples"},{"type":"function","title":"erlang.floor/1","doc":"Returns the largest integer not greater than `Number`.\n\nSee also `trunc/1`.","ref":"erlang.html#floor/1"},{"type":"function","title":"Examples - erlang.floor/1","doc":"```erlang\n1> floor(-10.5).\n-11\n2> floor(5.5).\n5\n3> floor(10.0).\n10\n```","ref":"erlang.html#floor/1-examples"},{"type":"function","title":"erlang.fun_info/1","doc":"Returns a list with information about the fun `Fun`.\n\nEach list element is a tuple. The order of the tuples is undefined,\nand more tuples can be added in a future release.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging. Library functions that\n> need to check some property of a fun should use `fun_info/2`.\n\nTwo types of funs have slightly different semantics:\n\n- A fun created by `fun M:F/A` is called an _external_ fun. Calling it will\n  always call the function `F` with arity `A` in the latest code for module `M`.\n  Notice that module `M` does not even need to be loaded when the fun\n  `fun M:F/A` is created.\n- All other funs are called _local_. When a local fun is called, the same\n  version of the code that created the fun is called (even if a newer version of\n  the module has been loaded).\n\nThe following elements are always present in the list for both local and\nexternal funs:\n\n- **`{type, Type}`** - `Type` is `local` or `external`.\n\n- **`{module, Module}`** - `Module` (an atom) is the module name.\n\n  If `Fun` is a local fun, `Module` is the module in which the fun is defined.\n\n  If `Fun` is an external fun, `Module` is the module that the fun refers to.\n\n- **`{name, Name}`** - `Name` (an atom) is a function name.\n\n  If `Fun` is a local fun, `Name` is the name of the local function that\n  implements the fun. (This name was generated by the compiler, and is only of\n  informational use. As it is a local function, it cannot be called directly.)\n  If no code is currently loaded for the fun, `[]` is returned instead of an\n  atom.\n\n  If `Fun` is an external fun, `Name` is the name of the exported function that\n  the fun refers to.\n\n- **`{arity, Arity}`** - `Arity` is the number of arguments that the fun is to\n  be called with.\n\n- **`{env, Env}`** - `Env` (a list) is the environment or free variables for the\n  fun. For external funs, the returned list is always empty.\n\nThe following elements are only present in the list if `Fun` is local:\n\n- **`{pid, Pid}`** - `Pid` is the process identifier of `init` process on\n  the local node.\n\n  > #### Change {: .info }\n  >\n  > Starting in Erlang/OTP 27, `Pid` always points to the local `init` process,\n  > regardless of which process or node the fun was originally created on.\n  >\n  > See\n  > [Upcoming Potential Incompatibilities ](`e:general_info:upcoming_incompatibilities.md#fun-creator-pid-will-always-be-local-init-process`).\n\n- **`{index, Index}`** - `Index` (an integer) is an index into the module fun\n  table.\n\n- **`{new_index, Index}`** - `Index` (an integer) is an index into the module\n  fun table.\n\n- **`{new_uniq, Uniq}`** - `Uniq` (a binary) is a unique value for this fun. It\n  is calculated from the compiled code for the entire module.\n\n- **`{uniq, Uniq}`** - `Uniq` (an integer) is a unique value for this fun. As\n  from Erlang/OTP R15, this integer is calculated from the compiled code for the\n  entire module. Before Erlang/OTP R15, this integer was based on only the body\n  of the fun.\n\nSee also `fun_info/2` and `is_function/2`.","ref":"erlang.html#fun_info/1"},{"type":"function","title":"erlang.fun_info/2","doc":"Returns information about `Fun` as specified by `Item`, in the form\n`{Item,Info}`.\n\nFor any fun, `Item` can be any of the atoms `module`, `name`, `arity`, `env`, or\n`type`.\n\nFor a local fun, `Item` can also be any of the atoms `index`, `new_index`,\n`new_uniq`, `uniq`, and `pid`. For an external fun, the value of any of these\nitems is always the atom `undefined`.\n\nSee [`erlang:fun_info/1`](`fun_info/1`) for a description of the items.","ref":"erlang.html#fun_info/2"},{"type":"function","title":"Examples - erlang.fun_info/2","doc":"```erlang\n1> erlang:fun_info(fun() -> ok end, type).\n{type,local}\n2> erlang:fun_info(fun lists:sum/1, type).\n{type,external}\n```","ref":"erlang.html#fun_info/2-examples"},{"type":"type","title":"erlang.fun_info_item/0","doc":"","ref":"erlang.html#t:fun_info_item/0"},{"type":"function","title":"erlang.fun_to_list/1","doc":"Returns `String` that represents the code that created `Fun`.\n\n`String` has the following form, if `Fun` was created by a\n[fun expression](`e:system:expressions.md#fun-expressions`) of the form\n`fun ModuleName:FuncName/Arity`:\n\n`\"fun ModuleName:FuncName/Arity\"`\n\nThe form of `String` when `Fun` is created from other types of\n[fun expressions](`e:system:expressions.md#fun-expressions`) differs depending\non if the fun expression was executed while executing compiled code or if the\nfun expression was executed while executing uncompiled code (uncompiled\nescripts, the Erlang shell, and other code executed by the erl_eval module):\n\n- **compiled code** - `\"#Fun \"`, where M, I and U correspond to the values\n  named `module`, `index` and `uniq` in the result of\n  [`erlang:fun_info(Fun)`](`fun_info/1`).\n\n- **uncompiled code** - All funs created from fun expressions in uncompiled code\n  with the same arity are mapped to the same list by\n  [`fun_to_list/1`](`fun_to_list/1`).\n\n> #### Note {: .info }\n>\n> Generally, one can not use [`fun_to_list/1`](`fun_to_list/1`) to check if two\n> funs are equal as [`fun_to_list/1`](`fun_to_list/1`) does not take the fun's\n> environment into account. See [`erlang:fun_info/1`](`fun_info/1`) for how to\n> get the environment of a fun.\n\n> #### Change {: .info }\n>\n> The output of [`fun_to_list/1`](`fun_to_list/1`) can differ between Erlang\n> implementations and may change in future versions.","ref":"erlang.html#fun_to_list/1"},{"type":"function","title":"Examples - erlang.fun_to_list/1","doc":"```erlang\n-module(test).\n-export([add/1, add2/0, fun_tuple/0]).\nadd(A) -> fun(B) -> A + B end.\nadd2() -> fun add/1.\nfun_tuple() -> {fun() -> 1 end, fun() -> 1 end}.\n```\n\n```erlang\n> {fun test:add/1, test:add2()}.\n{fun test:add/1,#Fun }\n```\n\nExplanation: `fun test:add/1` is upgradable but `test:add2()` is not upgradable.\n\n```erlang\n> {test:add(1), test:add(42)}.\n{#Fun ,#Fun }\n```\n\nExplanation: `test:add(1)` and `test:add(42)` has the same string representation\nas the environment is not taken into account.\n\n```erlang\n> test:fun_tuple().\n{#Fun ,#Fun }\n```\n\nExplanation: The string representations differ because the funs come from\ndifferent fun expressions.\n\n```erlang\n> {fun() -> 1 end, fun() -> 1 end}. >\n{#Fun ,#Fun }\n```\n\nExplanation: All funs created from fun expressions of this form in uncompiled\ncode with the same arity are mapped to the same list by\n[`fun_to_list/1`](`fun_to_list/1`).","ref":"erlang.html#fun_to_list/1-examples"},{"type":"type","title":"erlang.function/0","doc":"An Erlang [fun](`e:system:data_types.md#fun`).","ref":"erlang.html#t:function/0"},{"type":"function","title":"erlang.function_exported/3","doc":"Returns `true` if the module `Module` is\n[current](`e:system:code_loading.md#code-replacement`) and contains an exported\nfunction `Function/Arity`, or if there is a BIF (a built-in function implemented\nin C) with the specified name, otherwise returns `false`.","ref":"erlang.html#function_exported/3"},{"type":"function","title":"erlang.garbage_collect/0","doc":"Forces an immediate garbage collection of the executing process.\n\nThe function is not to be used unless it has been noticed (or there are good\nreasons to suspect) that the spontaneous garbage collection will occur too late\nor not at all.\n\n> #### Warning {: .warning }\n>\n> Improper use can seriously degrade system performance.","ref":"erlang.html#garbage_collect/0"},{"type":"function","title":"erlang.garbage_collect/1","doc":"Equivalent to  garbage_collect(Pid, []) .","ref":"erlang.html#garbage_collect/1"},{"type":"function","title":"erlang.garbage_collect/2","doc":"Garbage collects the node local process identified by `Pid`.\n\n`Option`:\n\n- **`{async, RequestId}`** - The function\n  [`garbage_collect/2`](`garbage_collect/2`) returns the value `async`\n  immediately after the request has been sent. When the request has been\n  processed, the process that called this function is passed a message on the\n  form `{garbage_collect, RequestId, GCResult}`.\n\n- **`{type, 'major' | 'minor'}`** - Triggers garbage collection of requested\n  type. Default value is `'major'`, which would trigger a fullsweep GC. The\n  option `'minor'` is considered a hint and may lead to either minor or major GC\n  run.\n\nIf `Pid` equals `self/0`, and no `async` option has been passed, the garbage\ncollection is performed at once, that is, the same as calling\n`garbage_collect/0`. Otherwise a request for garbage collection is sent to the\nprocess identified by `Pid`, and will be handled when appropriate. If no `async`\noption has been passed, the caller blocks until `GCResult` is available and can\nbe returned.\n\n`GCResult` informs about the result of the garbage collection request as\nfollows:\n\n- **`true`** - The process identified by `Pid` has been garbage collected.\n\n- **`false`** - No garbage collection was performed, as the process identified\n  by `Pid` terminated before the request could be satisfied.\n\nNotice that the same caveats apply as for `garbage_collect/0`.\n\nFailures:\n\n- **`badarg`** - If `Pid` is not a node local process identifier.\n\n- **`badarg`** - If `OptionList` is an invalid list of options.","ref":"erlang.html#garbage_collect/2"},{"type":"type","title":"erlang.garbage_collection_defaults/0","doc":"A list with the system wide garbage collection defaults.","ref":"erlang.html#t:garbage_collection_defaults/0"},{"type":"function","title":"erlang.get/0","doc":"Returns the process dictionary as a list of `{Key, Val}` tuples. The items in\nthe returned list can be in any order.\n\nFor example:\n\n```erlang\n> put(key1, merry),\nput(key2, lambs),\nput(key3, {are, playing}),\nget().\n[{key1,merry},{key2,lambs},{key3,{are,playing}}]\n```","ref":"erlang.html#get/0"},{"type":"function","title":"erlang.get/1","doc":"Returns the value `Val` associated with `Key` in the process dictionary, or\n`undefined` if `Key` does not exist.\n\nThe expected time complexity for the current implementation of this function is\nO(`1`) and the worst case time complexity is O(`N`), where `N` is the number of\nitems in the process dictionary.\n\nFor example:\n\n```erlang\n> put(key1, merry),\nput(key2, lambs),\nput({any, [valid, term]}, {are, playing}),\nget({any, [valid, term]}).\n{are,playing}\n```","ref":"erlang.html#get/1"},{"type":"function","title":"erlang.get_cookie/0","doc":"Returns the magic cookie of the local node if the node is alive, otherwise the\natom `nocookie`. This value is set by `set_cookie/1`.","ref":"erlang.html#get_cookie/0"},{"type":"function","title":"erlang.get_cookie/1","doc":"Returns the magic cookie for node `Node` if the local node is alive, otherwise\nthe atom `nocookie`. This value is set by `set_cookie/2`.","ref":"erlang.html#get_cookie/1"},{"type":"function","title":"erlang.get_keys/0","doc":"Returns a list of all keys present in the process dictionary. The items in the\nreturned list can be in any order.\n\nFor example:\n\n```erlang\n> put(dog, {animal,1}),\nput(cow, {animal,2}),\nput(lamb, {animal,3}),\nget_keys().\n[dog,cow,lamb]\n```","ref":"erlang.html#get_keys/0"},{"type":"function","title":"erlang.get_keys/1","doc":"Returns a list of keys that are associated with the value `Val` in the process\ndictionary. The items in the returned list can be in any order.\n\nFor example:\n\n```erlang\n> put(mary, {1, 2}),\nput(had, {1, 2}),\nput(a, {1, 2}),\nput(little, {1, 2}),\nput(dog, {1, 3}),\nput(lamb, {1, 2}),\nget_keys({1, 2}).\n[mary,had,a,little,lamb]\n```","ref":"erlang.html#get_keys/1"},{"type":"function","title":"erlang.group_leader/0","doc":"Returns the process identifier of the group leader for the process evaluating\nthe function.\n\nEvery process is a member of some process group and all groups have a _group\nleader_. All I/O from the group is channeled to the group leader. When a new\nprocess is spawned, it gets the same group leader as the spawning process.\n\nInitially, at system startup, `init` is both its own group leader and the group\nleader of all processes. During the boot of a system the group leader for\nprocesses will be changed depending on the need of the system. Some examples\nwhere this is done are:\n\n- When an application is started, the top supervisor of that application will\n  have its group leader set to the application master. See `application:start/2`\n  for more details.\n- When running tests, both [`common_test`](`e:common_test:index.html`) and\n  `m:eunit` set the group leader in order to capture any I/O from the testcase.\n- The [interactive shell](`m:shell`) sets the group leader to intercept I/O.","ref":"erlang.html#group_leader/0"},{"type":"function","title":"erlang.group_leader/2","doc":"Sets the group leader of `Pid` to `GroupLeader`. Typically, this is used when a\nprocess started from a certain shell is to have another group leader than\n`init`.\n\nThe group leader should be rarely changed in applications with a supervision\ntree, because OTP assumes the group leader of their processes is their\napplication master.\n\nSetting the group leader follows the signal ordering guarantees described in the\n[Processes Chapter](`e:system:ref_man_processes.md#signals`) in the _Erlang\nReference Manual_.\n\nSee also `group_leader/0` and\n[OTP design principles](`e:system:applications.md#stopping`) related to starting\nand stopping applications.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.","ref":"erlang.html#group_leader/2"},{"type":"function","title":"erlang.halt/0","doc":"Equivalent to calling [`halt(0, [])`](`halt/2`).\n\nFor example:\n\n```erlang\n> halt().\nos_prompt%\n```","ref":"erlang.html#halt/0"},{"type":"function","title":"erlang.halt/1","doc":"Equivalent to calling [`halt(HaltType, [])`](`halt/2`).\n\nFor example:\n\n```erlang\n> halt(17).\nos_prompt% echo $?\n17\nos_prompt%\n```","ref":"erlang.html#halt/1"},{"type":"function","title":"erlang.halt/2","doc":"Halt the runtime system.\n\n- ```erlang\n  halt(Status :: non_neg_integer(), Options :: halt_options())\n  ```\n  {: #halt_status_2 }\n\n  Halt the runtime system with status code `Status`.\n\n  > #### Note {: .info }\n  >\n  > On many platforms, the OS supports only status codes 0-255. A too large\n  > status code is truncated by clearing the high bits.\n\n  Currently the following options are valid:\n\n  - **`{flush, EnableFlushing}`{: #halt_flush }** - If `EnableFlushing` equals\n    `true`, which also is the default behavior, the runtime system will perform\n    the following operations before terminating:\n\n    - Flush all outstanding output.\n    - Send all Erlang ports exit signals and wait for them to exit.\n    - Wait for all async threads to complete all outstanding async jobs.\n    - Call all installed [NIF _on halt_ callbacks](erl_nif.md#on_halt).\n    - Wait for all ongoing\n      [NIF calls with the _delay halt_ setting](erl_nif.md#delay_halt) enabled\n      to return.\n    - Call all installed `atexit`/`on_exit` callbacks.\n\n    If `EnableFlushing` equals `false`, the runtime system will terminate\n    immediately without performing any of the above listed operations.\n\n    > #### Change {: .info }\n    >\n    > Runtime systems prior to OTP 26.0 called all installed `atexit`/`on_exit`\n    > callbacks also when `flush` was disabled, but as of OTP 26.0 this is no\n    > longer the case.\n\n  - **`{flush_timeout, Timeout :: 0..2147483647 | infinity}`{: #halt_flush_timeout }** -\n    Sets a limit on the time allowed for [flushing](#halt_flush) prior to\n    termination of the runtime system. `Timeout` is in milliseconds. The default\n    value is determined by the the `erl` [`+zhft  `](erl_cmd.md#+zhft)\n    command line flag.\n\n    If flushing has been ongoing for `Timeout` milliseconds, flushing operations\n    will be interrupted and the runtime system will immediately be terminated\n    with the exit code `255`. If flushing is not enabled, the timeout will have\n    no effect on the system.\n\n    See also the `erl` [`+zhft  `](erl_cmd.md#+zhft) command line flag.\n    Note that the shortest timeout set by the command line flag and the\n    `flush_timeout` option will be the actual timeout value in effect.\n\n    Since: OTP 27.0\n\n- ```erlang\n  halt(Abort :: abort, Options :: halt_options())\n  ```\n  {: #halt_abort_2 }\n\n  Halt the Erlang runtime system by aborting and produce a core dump if core\n  dumping has been enabled in the environment that the runtime system is\n  executing in.\n\n  > #### Note {: .info }\n  >\n  > The [`{flush, boolean()}`](#halt_flush) option will be ignored, and\n  > flushing will be disabled.\n\n- ```erlang\n  halt(CrashDumpSlogan :: string(), Options :: halt_options())\n  ```\n  {: #halt_crash_dump_2 }\n\n  Halt the Erlang runtime system and generate an\n  [Erlang crash dump](crash_dump.md). The string `CrashDumpSlogan` will be used\n  as slogan in the Erlang crash dump created. The slogan will be trunkated if\n  `CrashDumpSlogan` is longer than 1023 characters.\n\n  > #### Note {: .info }\n  >\n  > The [`{flush, boolean()}`](#halt_flush) option will be ignored, and\n  > flushing will be disabled.\n\n  > #### Change {: .info }\n  >\n  > Behavior changes compared to earlier versions:\n  >\n  > - Before OTP 24.2, the slogan was truncated if `CrashDumpSlogan` was longer\n  >   than 200 characters. Now it will be truncated if longer than 1023\n  >   characters.\n  > - Before OTP 20.1, only code points in the range 0-255 were accepted in the\n  >   slogan. Now any Unicode string is valid.","ref":"erlang.html#halt/2"},{"type":"type","title":"erlang.halt_options/0","doc":"","ref":"erlang.html#t:halt_options/0"},{"type":"function","title":"erlang.hd/1","doc":"Returns the first element of `List`.\n\nIt works with improper lists.\n\nFailure: `badarg` if `List` is the empty list `[]`.","ref":"erlang.html#hd/1"},{"type":"function","title":"Examples - erlang.hd/1","doc":"```erlang\n1> hd([1,2,3,4,5]).\n1\n2> hd([first, second, third, so_on | improper_end]).\nfirst\n3> hd([]).\n** exception error: bad argument\n     in function  hd/1\n        called as hd([])\n        *** argument 1: not a nonempty list\n```","ref":"erlang.html#hd/1-examples"},{"type":"function","title":"erlang.hibernate/0","doc":"Puts the calling process into a wait state where its memory allocation has been\nreduced as much as possible. This is useful if the process does not expect to\nreceive any messages soon.\n\nThe process is awakened when a message is sent to it, and control resumes\nnormally to the caller. Unlike `erlang:hibernate/3`, it does not discard the\ncall stack.","ref":"erlang.html#hibernate/0"},{"type":"function","title":"erlang.hibernate/3","doc":"Puts the calling process into a wait state where its memory allocation has been\nreduced as much as possible. This is useful if the process does not expect to\nreceive any messages soon.\n\nThe process is awakened when a message is sent to it, and control resumes in\n`Module:Function` with the arguments specified by `Args` with the call stack\nemptied, meaning that the process terminates when that function returns. Thus\n`erlang:hibernate/3` never returns to its caller. The resume function\n`Module:Function/Arity` must be exported (`Arity` =:=\n[`length(Args)`](`length/1`)).\n\nIf the process has any message in its message queue, the process is awakened\nimmediately in the same way as described earlier.\n\nIn more technical terms, `erlang:hibernate/3` discards the call stack for the\nprocess, and then garbage collects the process. After this, all live data is in\none continuous heap. The heap is then shrunken to the exact same size as the\nlive data that it holds (even if that size is less than the minimum heap size\nfor the process).\n\nIf the size of the live data in the process is less than the minimum heap size,\nthe first garbage collection occurring after the process is awakened ensures\nthat the heap size is changed to a size not smaller than the minimum heap size.\n\nNotice that emptying the call stack means that any surrounding `catch` is\nremoved and must be re-inserted after hibernation. One effect of this is that\nprocesses started using `proc_lib` (also indirectly, such as `gen_server`\nprocesses), are to use `proc_lib:hibernate/3` instead, to ensure that the\nexception handler continues to work when the process wakes up.","ref":"erlang.html#hibernate/3"},{"type":"type","title":"erlang.identifier/0","doc":"An unique identifier for some entity, for example a\n[process](`e:system:ref_man_processes.md`), [port](`e:system:ports.md#ports`) or\n[monitor](`monitor/2`).","ref":"erlang.html#t:identifier/0"},{"type":"type","title":"erlang.info_list/0","doc":"","ref":"erlang.html#t:info_list/0"},{"type":"function","title":"erlang.insert_element/3","doc":"Returns a new tuple with element `Term` inserted at position `Index` in tuple\n`Tuple1`.\n\nAll elements from position `Index` and upwards are pushed one step\nhigher in the new tuple `Tuple2`.","ref":"erlang.html#insert_element/3"},{"type":"function","title":"Examples - erlang.insert_element/3","doc":"```erlang\n1> erlang:insert_element(2, {one, two, three}, new).\n{one,new,two,three}\n```","ref":"erlang.html#insert_element/3-examples"},{"type":"type","title":"erlang.integer/0","doc":"An Erlang [integer](`e:system:data_types.md#number`).","ref":"erlang.html#t:integer/0"},{"type":"function","title":"erlang.integer_to_binary/1","doc":"Returns a binary corresponding to the text representation of `Integer`.","ref":"erlang.html#integer_to_binary/1"},{"type":"function","title":"Examples - erlang.integer_to_binary/1","doc":"```erlang\n1> integer_to_binary(77).\n<<\"77\">>\n```","ref":"erlang.html#integer_to_binary/1-examples"},{"type":"function","title":"erlang.integer_to_binary/2","doc":"Returns a binary corresponding to the text representation of `Integer` in base\n`Base`.","ref":"erlang.html#integer_to_binary/2"},{"type":"function","title":"Examples - erlang.integer_to_binary/2","doc":"```erlang\n1> integer_to_binary(1023, 16).\n<<\"3FF\">>\n```","ref":"erlang.html#integer_to_binary/2-examples"},{"type":"function","title":"erlang.integer_to_list/1","doc":"Returns a string corresponding to the text representation of `Integer`.","ref":"erlang.html#integer_to_list/1"},{"type":"function","title":"Examples - erlang.integer_to_list/1","doc":"```erlang\n1> integer_to_list(77).\n\"77\"\n```","ref":"erlang.html#integer_to_list/1-examples"},{"type":"function","title":"erlang.integer_to_list/2","doc":"Returns a string corresponding to the text representation of `Integer` in base\n`Base`.","ref":"erlang.html#integer_to_list/2"},{"type":"function","title":"Examples - erlang.integer_to_list/2","doc":"```erlang\n1> integer_to_list(1023, 16).\n\"3FF\"\n```","ref":"erlang.html#integer_to_list/2-examples"},{"type":"type","title":"erlang.iodata/0","doc":"A binary or list containing bytes and/or iodata.\n\nThis datatype is used to represent data that is meant to be output using\nany I/O module. For example: `file:write/2` or `gen_tcp:send/2`.\n\nTo convert an `t:iodata/0` term to `t:binary/0` you can use\n[iolist_to_binary/2](`iolist_to_binary/1`). To transcode a `t:string/0` or\n`t:unicode:chardata/0` to `t:iodata/0` you can use `unicode:characters_to_binary/1`.","ref":"erlang.html#t:iodata/0"},{"type":"type","title":"erlang.iolist/0","doc":"A list containing bytes and/or iodata.\n\nThis datatype is used to represent data that is meant to be output using any\nI/O module. For example: `file:write/2` or `gen_tcp:send/2`.\n\nIn most use cases you want to use `t:iodata/0` instead of this type.","ref":"erlang.html#t:iolist/0"},{"type":"function","title":"erlang.iolist_size/1","doc":"Returns the size in bytes of the binary that would result from\n[`iolist_to_binary(Item)`](`iolist_to_binary/1`).","ref":"erlang.html#iolist_size/1"},{"type":"function","title":"Examples - erlang.iolist_size/1","doc":"```erlang\n1> iolist_size([1,2|<<3,4>>]).\n4\n```","ref":"erlang.html#iolist_size/1-examples"},{"type":"function","title":"erlang.iolist_to_binary/1","doc":"Returns a binary constructed from the integers and binaries in\n`IoListOrBinary`.","ref":"erlang.html#iolist_to_binary/1"},{"type":"function","title":"Examples - erlang.iolist_to_binary/1","doc":"```erlang\n1> Bin1 = <<1,2,3>>.\n<<1,2,3>>\n2> Bin2 = <<4,5>>.\n<<4,5>>\n3> Bin3 = <<6>>.\n<<6>>\n4> iolist_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).\n<<1,2,3,1,2,3,4,5,4,6>>\n```","ref":"erlang.html#iolist_to_binary/1-examples"},{"type":"function","title":"erlang.iolist_to_iovec/1","doc":"Returns an [iovec](`t:iovec/0`) that is made from the integers and binaries in\n`IoListOrBinary`.\n\nThis function is useful when you need to flatten an iolist but do not\nrequire a single binary. It can be beneficial for passing data to NIF\nfunctions such as\n[`enif_inspect_iovec`](erl_nif.md#enif_inspect_iovec) or for more\nefficient message passing. The advantage of using this function over\n`iolist_to_binary/1` is that it does not need to copy off-heap binaries.","ref":"erlang.html#iolist_to_iovec/1"},{"type":"function","title":"Examples - erlang.iolist_to_iovec/1","doc":"If you pass small binaries and integers, it works like `iolist_to_binary/1`.\n\n```erlang\n1> Bin1 = <<1,2,3>>.\n<<1,2,3>>\n2> Bin2 = <<4,5>>.\n<<4,5>>\n3> Bin3 = <<6>>.\n<<6>>\n4> erlang:iolist_to_iovec([Bin1,1,[2,3,Bin2],4|Bin3]).\n[<<1,2,3,1,2,3,4,5,4,6>>]\n```\n\nIf you pass larger binaries, they are split and returned in a form\noptimized for calling the C function `writev()`.\n\n```erlang\n> erlang:iolist_to_iovec([<<1>>,<<2:8096>>,<<3:8096>>]).\n[<<1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n   0,...>>,\n <<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n   ...>>,\n <<0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,...>>]\n```","ref":"erlang.html#iolist_to_iovec/1-examples"},{"type":"type","title":"erlang.iovec/0","doc":"A list of binaries. This datatype is useful to use together with\n[`enif_inspect_iovec`](erl_nif.md#enif_inspect_iovec).","ref":"erlang.html#t:iovec/0"},{"type":"function","title":"erlang.is_alive/0","doc":"Returns `true` if the local node is alive (that is, if the node can be part of a\ndistributed system), otherwise `false`. A node is alive if it is started with:\n\n1. [`\"erl -name LONGNAME\"`](erl_cmd.md#name) or,\n1. [`\"erl -sname SHORTNAME\"`](erl_cmd.md#sname).\n\nA node can also be alive if it has got a name from a call to\n`net_kernel:start/2` and has not been stopped by a call to `net_kernel:stop/0`.","ref":"erlang.html#is_alive/0"},{"type":"function","title":"erlang.is_atom/1","doc":"Returns `true` if `Term` is an atom; otherwise, returns `false`.","ref":"erlang.html#is_atom/1"},{"type":"function","title":"Examples - erlang.is_atom/1","doc":"```erlang\n1> is_atom(42).\nfalse\n2> is_atom(ok).\ntrue\n```","ref":"erlang.html#is_atom/1-examples"},{"type":"function","title":"erlang.is_binary/1","doc":"Returns `true` if `Term` is a binary; otherwise, returns `false`.\n\nA binary always contains a complete number of bytes.","ref":"erlang.html#is_binary/1"},{"type":"function","title":"Examples - erlang.is_binary/1","doc":"```erlang\n1> is_binary(42).\nfalse\n2> is_binary(<<1,2,3>>).\ntrue\n3> is_binary(<<7:12>>).\nfalse\n```","ref":"erlang.html#is_binary/1-examples"},{"type":"function","title":"erlang.is_bitstring/1","doc":"Returns `true` if `Term` is a bitstring (including a binary); otherwise, returns `false`.","ref":"erlang.html#is_bitstring/1"},{"type":"function","title":"Examples - erlang.is_bitstring/1","doc":"```erlang\n1> is_bitstring(42).\nfalse\n2> is_bitstring(<<1,2,3>>).\ntrue\n3> is_bitstring(<<7:12>>).\ntrue\n```","ref":"erlang.html#is_bitstring/1-examples"},{"type":"function","title":"erlang.is_boolean/1","doc":"Returns `true` if `Term` is the atom `true` or `false`; otherwise, returns `false`.","ref":"erlang.html#is_boolean/1"},{"type":"function","title":"Examples - erlang.is_boolean/1","doc":"```erlang\n1> is_boolean(true).\ntrue\n2> is_boolean(false).\ntrue\n3> is_boolean(ok).\nfalse\n4> is_boolean(42).\nfalse\n```","ref":"erlang.html#is_boolean/1-examples"},{"type":"function","title":"erlang.is_builtin/3","doc":"This BIF is useful for builders of cross-reference tools.\n\nReturns `true` if `Module:Function/Arity` is a BIF implemented in C, otherwise\n`false`.","ref":"erlang.html#is_builtin/3"},{"type":"function","title":"erlang.is_float/1","doc":"Returns `true` if `Term` is a floating point number; otherwise, returns `false`.","ref":"erlang.html#is_float/1"},{"type":"function","title":"Examples - erlang.is_float/1","doc":"```erlang\n1> is_float(42).\nfalse\n2> is_float(42.0).\ntrue\n3> is_float(zero).\nfalse\n```","ref":"erlang.html#is_float/1-examples"},{"type":"function","title":"erlang.is_function/1","doc":"Returns `true` if `Term` is a fun; otherwise, returns `false`.","ref":"erlang.html#is_function/1"},{"type":"function","title":"Examples - erlang.is_function/1","doc":"```erlang\n1> is_function(fun() -> ok end).\ntrue\n2> is_function(fun lists:sum/1).\ntrue\n3> is_function({lists,sum}).\nfalse\n```","ref":"erlang.html#is_function/1-examples"},{"type":"function","title":"erlang.is_function/2","doc":"Returns `true` if `Term` is a fun that can be applied with `Arity` number of\narguments; otherwise, returns `false`.","ref":"erlang.html#is_function/2"},{"type":"function","title":"Examples - erlang.is_function/2","doc":"```erlang\n1> is_function(fun() -> ok end, 0).\ntrue\n2> is_function(fun lists:sum/1, 1).\ntrue\n3> is_function({lists,sum}, 1).\nfalse\n4> is_function(fun lists:sum/1, -1).\n** exception error: bad argument\n     in function  is_function/2\n        called as is_function(fun lists:sum/1,-1)\n        *** argument 2: out of range\n5> is_function(fun lists:sum/1, bad_arity).\n** exception error: bad argument\n     in function  is_function/2\n        called as is_function(fun lists:sum/1,bad_arity)\n        *** argument 2: not an integer\n```","ref":"erlang.html#is_function/2-examples"},{"type":"function","title":"erlang.is_integer/1","doc":"Returns `true` if `Term` is an integer; otherwise, returns `false`.","ref":"erlang.html#is_integer/1"},{"type":"function","title":"Examples - erlang.is_integer/1","doc":"```erlang\n1> is_integer(1).\ntrue\n2> is_integer(-1234567890123456789012345678901234567890).\ntrue\n3> is_integer(1.0).\nfalse\n4> is_integer(zero).\nfalse\n```","ref":"erlang.html#is_integer/1-examples"},{"type":"function","title":"erlang.is_list/1","doc":"Returns `true` if `Term` is a list with zero or more elements; otherwise,\nreturns `false`.","ref":"erlang.html#is_list/1"},{"type":"function","title":"Examples - erlang.is_list/1","doc":"```erlang\n1> is_list({a,b,c}).\nfalse\n2> is_list([]).\ntrue\n3> is_list([1]).\ntrue\n4> is_list([1,2]).\ntrue\n5> is_list([1,2|3]).\ntrue\n```","ref":"erlang.html#is_list/1-examples"},{"type":"function","title":"erlang.is_map/1","doc":"Returns `true` if `Term` is a map; otherwise, returns `false`.","ref":"erlang.html#is_map/1"},{"type":"function","title":"Examples - erlang.is_map/1","doc":"```erlang\n1> is_map(#{}).\ntrue\n2> is_map(#{key => value}).\ntrue\n3> is_map([]).\nfalse\n```","ref":"erlang.html#is_map/1-examples"},{"type":"function","title":"erlang.is_map_key/2","doc":"Returns `true` if map `Map` contains `Key` and returns `false` if it does not\ncontain the `Key`.\n\nFailure: A `{badmap,Map}` exception is raised if `Map` is not a map.","ref":"erlang.html#is_map_key/2"},{"type":"function","title":"Examples - erlang.is_map_key/2","doc":"```erlang\n> Map = #{\"42\" => value}.\n#{\"42\" => value}\n1> is_map_key(\"42\", Map).\ntrue\n2> is_map_key(value, Map).\nfalse\n3> is_map_key(value, no_map).\n** exception error: bad map: no_map\n     in function  is_map_key/2\n        called as is_map_key(value,no_map)\n        *** argument 2: not a map\n```","ref":"erlang.html#is_map_key/2-examples"},{"type":"function","title":"erlang.is_number/1","doc":"Returns `true` if `Term` is an integer or a floating point number; otherwise,\nreturns `false`.","ref":"erlang.html#is_number/1"},{"type":"function","title":"Examples - erlang.is_number/1","doc":"```erlang\n1> is_number(10.0).\ntrue\n2> is_number(7).\ntrue\n3> is_number(zero).\nfalse\n```","ref":"erlang.html#is_number/1-examples"},{"type":"function","title":"erlang.is_pid/1","doc":"Returns `true` if `Term` is a process identifier; otherwise, returns `false`.","ref":"erlang.html#is_pid/1"},{"type":"function","title":"Examples - erlang.is_pid/1","doc":"```erlang\n1> is_pid(self()).\ntrue\n2> is_pid(ok).\nfalse\n```","ref":"erlang.html#is_pid/1-examples"},{"type":"function","title":"erlang.is_port/1","doc":"Returns `true` if `Term` is a port identifier; otherwise, returns `false`.","ref":"erlang.html#is_port/1"},{"type":"function","title":"Examples - erlang.is_port/1","doc":"```erlang\n1> APort = hd(erlang:ports()).\n2> is_port(APort).\ntrue\n3> is_port(self()).\nfalse\n```","ref":"erlang.html#is_port/1-examples"},{"type":"function","title":"erlang.is_process_alive/1","doc":"`Pid` must refer to a process at the local node.\n\nReturns `true` if the process exists and is alive, that is, is not exiting and\nhas not exited. Otherwise returns `false`.\n\nIf process `P1` calls [`is_process_alive(P2Pid)`](`is_process_alive/1`) it is\nguaranteed that all signals, sent from `P1` to `P2` (`P2` is the process with\nidentifier `P2Pid`) before the call, will be delivered to `P2` before the\naliveness of `P2` is checked. This guarantee means that one can use\n[`is_process_alive/1`](`is_process_alive/1`) to let a process `P1` wait until a\nprocess `P2`, which has got an exit signal with reason `kill` from P1, is\nkilled.\n\nFor example:\n\n```erlang\nexit(P2Pid, kill),\n% P2 might not be killed\nis_process_alive(P2Pid),\n% P2 is not alive (the call above always return false)\n```\n\nSee the documentation about [signals](`e:system:ref_man_processes.md#signals`)\nand [erlang:exit/2](`exit/2`) for more information about signals and exit\nsignals.","ref":"erlang.html#is_process_alive/1"},{"type":"function","title":"erlang.is_record/2","doc":"Returns `true` if `Term` is a tuple and its first element is `RecordTag`;\notherwise, returns `false`.\n\n> #### Note {: .info }\n>\n> Normally, the compiler treats calls to [`is_record/2`](`is_record/2`)\n> specially. It emits code to verify that `Term` is a tuple, its first\n> element is `RecordTag`, and its size is correct. However, if `RecordTag`\n> is not a literal atom, the BIF [`is_record/2`](`is_record/2`) is called\n> instead and the size of the tuple is not verified.\n\nAllowed in guard tests, if `RecordTag` is a literal atom.","ref":"erlang.html#is_record/2"},{"type":"function","title":"erlang.is_record/3","doc":"Returns `true` if `Term` is a tuple, its first element is `RecordTag`, and its\nsize is `Size`; otherwise, returns `false`.\n\nAllowed in guard tests if `RecordTag` is a literal atom and `Size` is a literal\ninteger.\n\n> #### Note {: .info }\n>\n> This BIF is documented for completeness. Usually\n> [`is_record/2`](`is_record/2`) is to be used.","ref":"erlang.html#is_record/3"},{"type":"function","title":"erlang.is_reference/1","doc":"Returns `true` if `Term` is a reference; otherwise, returns `false`.","ref":"erlang.html#is_reference/1"},{"type":"function","title":"Examples - erlang.is_reference/1","doc":"```erlang\n1> is_reference(make_ref()).\ntrue\n2> is_reference(self()).\nfalse\n```","ref":"erlang.html#is_reference/1-examples"},{"type":"function","title":"erlang.is_tuple/1","doc":"Returns `true` if `Term` is a tuple; otherwise, returns `false`.","ref":"erlang.html#is_tuple/1"},{"type":"function","title":"Examples - erlang.is_tuple/1","doc":"```erlang\n1> is_tuple({a, b, c}).\ntrue\n2> is_tuple([a, b, c]).\nfalse\n```","ref":"erlang.html#is_tuple/1-examples"},{"type":"function","title":"erlang.length/1","doc":"Returns the length of `List`.","ref":"erlang.html#length/1"},{"type":"function","title":"Examples - erlang.length/1","doc":"```erlang\n1> length([1,2,3,4,5,6,7,8,9]).\n9\n2> length([a,b|c]).\n** exception error: bad argument\n     in function  length/1\n        called as length([a,b|c])\n        *** argument 1: not a list\n```","ref":"erlang.html#length/1-examples"},{"type":"type","title":"erlang.level_entry/0","doc":"","ref":"erlang.html#t:level_entry/0"},{"type":"type","title":"erlang.level_tag/0","doc":"","ref":"erlang.html#t:level_tag/0"},{"type":"function","title":"erlang.link/1","doc":"Sets up and activates a link between the calling process and another process or\na port identified by `PidOrPort`.\n\nWe will from here on call the identified process or port linkee. If the linkee\nis a port, it must reside on the same node as the caller.\n\nIf one of the participants of a link terminates, it will\n[send an exit signal](`e:system:ref_man_processes.md#sending_exit_signals`) to\nthe other participant. The exit signal will contain the\n[exit reason](`e:system:ref_man_processes.md#link_exit_signal_reason`) of the\nterminated participant. Other cases when exit signals are triggered due to a\nlink are when no linkee exist (`noproc` exit reason) and when the connection\nbetween linked processes on different nodes is lost or cannot be established\n(`noconnection` exit reason).\n\nAn existing link can be removed by calling `unlink/1`. For more information on\nlinks and exit signals due to links, see the _Processes_ chapter in the _Erlang\nReference Manual_:\n\n- [Links](`e:system:ref_man_processes.md#links`)\n- [Sending Exit Signals](`e:system:ref_man_processes.md#sending_exit_signals`)\n- [Receiving Exit Signals](`e:system:ref_man_processes.md#receiving_exit_signals`)\n\nFor historical reasons, [`link/1`](`link/1`) has a strange semi-synchronous\nbehavior when it is \"cheap\" to check if the linkee exists or not, and the caller\ndoes not [trap exits](#process_flag_trap_exit). If the above is true\nand the linkee does not exist, [`link/1`](`link/1`) will raise a `noproc` error\n_exception_. The expected behavior would instead have been that\n[`link/1`](`link/1`) returned `true`, and the caller later was sent an exit\nsignal with `noproc` exit reason, but this is unfortunately not the case. The\n`noproc` [exception](`e:system:errors.md#exceptions`) is not to be confused with\nan [exit signal](`e:system:ref_man_processes.md#sending_exit_signals`) with exit\nreason `noproc`. Currently it is \"cheap\" to check if the linkee exists when it\nis supposed to reside on the same node as the calling process.\n\nThe link setup and activation is performed asynchronously. If the link already\nexists, or if the caller attempts to create a link to itself, nothing is done. A\ndetailed description of the [link protocol](erl_dist_protocol.md#link_protocol)\ncan be found in the _Distribution Protocol_ chapter of the _ERTS User's Guide_.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.\n\nFailure:\n\n- `badarg` if `PidOrPort` does not identify a process or a node local port.\n- `noproc` linkee does not exist and it is \"cheap\" to check if it exists as\n  described above.","ref":"erlang.html#link/1"},{"type":"function","title":"erlang.link/2","doc":"Provides an option list for modification of the link functionality provided by\n`link/1`. The `PidOrPort` argument has the same meaning as when passed to\n`link/1`.\n\nCurrently available options:\n\n- **`priority`** - Since OTP 28.0\n\n  [Enables priority message reception](`e:system:ref_man_processes.md#enable-prio-msg-recv`)\n  of `EXIT` messages due to the link for the calling process. If the link\n  already exists without priority message reception enabled for the link,\n  priority message reception will be enabled on the existing link. If the link\n  already exists with priority message reception enabled and this option is not\n  passed or `link/1` is called, priority message reception for this link will be\n  disabled.\n\n  Note that priority message reception due to the link is *only* enabled for the\n  process that passed this option. If the linked process also wants to enable\n  priority message reception, it needs to call `link/2` passing the `priority`\n  option itself.\n\n  > #### Warning {: .warning }\n  >\n  > You *very seldom* need to resort to using priority messages and you may\n  > [cause issues](`e:system:ref_man_processes.md#priority-message-warning`)\n  > instead of solving issues if not used with care.\n\n  For more information see the\n  [_Adding Messages to the Message Queue_](`e:system:ref_man_processes.md#message-queue-order`)\n  section of the _Erlang Reference Manual_.","ref":"erlang.html#link/2"},{"type":"type","title":"erlang.link_option/0","doc":"See `link/2`.\n\nSince OTP 28.0\"","ref":"erlang.html#t:link_option/0"},{"type":"type","title":"erlang.list/0","doc":"An Erlang [list](`e:system:data_types.md#list`) containing terms of any type.","ref":"erlang.html#t:list/0"},{"type":"type","title":"erlang.list/1","doc":"An Erlang [list](`e:system:data_types.md#list`) containing terms of the type\n`ContentType`.","ref":"erlang.html#t:list/1"},{"type":"function","title":"erlang.list_to_atom/1","doc":"Returns the atom whose text representation is `String`, creating a new\natom if necessary.\n\nAs from Erlang/OTP 20, `String` may contain any Unicode character. Earlier\nversions allowed only ISO-latin-1 characters as the implementation did not allow\nUnicode characters above 255.\n\n> #### Note {: .info }\n>\n> Note that once an atom is created, it cannot be deleted.\n> The Erlang system has a\n> [configurable limit](`e:system:system_limits.md#atoms`)\n> on the number of atoms that can exist.\n> To avoid reaching this limit, consider whether\n> [`list_to_existing_atom/1`](`list_to_existing_atom/1`) is a better choice\n> than [`list_to_atom/1`](`list_to_atom/1`).\n>\n> The number of characters that are permitted in an atom name is\n> [limited](`e:system:system_limits.md#atom_name_limit`).","ref":"erlang.html#list_to_atom/1"},{"type":"function","title":"Examples - erlang.list_to_atom/1","doc":"```erlang\n1> list_to_atom(\"Erlang\").\n'Erlang'\n2> list_to_atom([960]).\n'π'\n```","ref":"erlang.html#list_to_atom/1-examples"},{"type":"function","title":"erlang.list_to_binary/1","doc":"Returns a binary made from the integers and binaries in `IoList`.","ref":"erlang.html#list_to_binary/1"},{"type":"function","title":"Examples - erlang.list_to_binary/1","doc":"```erlang\n1> Bin1 = <<1,2,3>>.\n<<1,2,3>>\n2> Bin2 = <<4,5>>.\n<<4,5>>\n3> Bin3 = <<6>>.\n<<6>>\n4> list_to_binary([Bin1,1,[2,3,Bin2],4|Bin3]).\n<<1,2,3,1,2,3,4,5,4,6>>\n```","ref":"erlang.html#list_to_binary/1-examples"},{"type":"function","title":"erlang.list_to_bitstring/1","doc":"Returns a bitstring made from the integers and bitstrings in\n`BitstringList`.\n\nThe last tail in `BitstringList` is allowed to be a bitstring.","ref":"erlang.html#list_to_bitstring/1"},{"type":"function","title":"Examples - erlang.list_to_bitstring/1","doc":"```erlang\n1> Bin1 = <<1,2,3>>.\n<<1,2,3>>\n2> Bin2 = <<4,5>>.\n<<4,5>>\n3> Bin3 = <<6,7:4>>.\n<<6,7:4>>\n4> list_to_bitstring([Bin1,1,[2,3,Bin2],4|Bin3]).\n<<1,2,3,1,2,3,4,5,4,6,7:4>>\n```","ref":"erlang.html#list_to_bitstring/1-examples"},{"type":"function","title":"erlang.list_to_existing_atom/1","doc":"Returns the atom whose text representation is `String`, but only if there\nalready exists such atom.\n\nAn atom exists if it has been created by the run-time system by either\nloading code or creating a term that the atom is a part of.\n\nFailure: `badarg` if there does not already exist an atom whose text\nrepresentation is `String`.\n\n> #### Note {: .info }\n>\n> Note that the compiler may optimize away atoms. For example, the compiler will\n> rewrite [`atom_to_list(some_atom)`](`atom_to_list/1`) to `\"some_atom\"`. If\n> that expression is the only mention of the atom `some_atom` in the containing\n> module, the atom will not be created when the module is loaded, and a\n> subsequent call to\n> [`list_to_existing_atom(\"some_atom\")`](`list_to_existing_atom/1`) will fail.","ref":"erlang.html#list_to_existing_atom/1"},{"type":"function","title":"Examples - erlang.list_to_existing_atom/1","doc":"```erlang\n1> list_to_existing_atom(\"a_blatal_DOS_attack\").\n** exception error: bad argument\n     in function  list_to_existing_atom/1\n        called as list_to_existing_atom(\"a_blatal_DOS_attack\")\n        *** argument 1: not an already existing atom\n2> hello.\nhello\n3> list_to_existing_atom(\"hello\").\nhello\n```","ref":"erlang.html#list_to_existing_atom/1-examples"},{"type":"function","title":"erlang.list_to_float/1","doc":"Returns the float whose text representation is `String`.","ref":"erlang.html#list_to_float/1"},{"type":"function","title":"Examples - erlang.list_to_float/1","doc":"```erlang\n1> list_to_float(\"2.2017764e+0\").\n2.2017764\n```\n\nThe float string format is the same as the format for\n[Erlang float literals](`e:system:data_types.md`) except for that underscores\nare not permitted.\n\nFailure: `badarg` if `String` contains a invalid representation of a float.","ref":"erlang.html#list_to_float/1-examples"},{"type":"function","title":"erlang.list_to_integer/1","doc":"Returns an integer whose text representation is `String`.\n\n`String` must contain at least one digit character and can have an optional\nprefix consisting of a single \"`+`\" or \"`-`\" character (that is, `String` must\nmatch the regular expression `\"^[+-]?[0-9]+$\"`).\n\nFailure: `badarg` if `String` contains a invalid representation of an integer.","ref":"erlang.html#list_to_integer/1"},{"type":"function","title":"Examples - erlang.list_to_integer/1","doc":"```erlang\n1> list_to_integer(\"123\").\n123\n2> list_to_integer(\"-123\").\n-123\n3> list_to_integer(\"+123234982304982309482093833234234\").\n123234982304982309482093833234234\n```","ref":"erlang.html#list_to_integer/1-examples"},{"type":"function","title":"erlang.list_to_integer/2","doc":"Returns an integer whose text representation in base `Base` is `String`.\n\n`String` must contain at least one digit character and can have an optional\nprefix consisting of a single \"`+`\" or \"`-`\" character.\n\nFailure: `badarg` if `String` contains an invalid integer representation.","ref":"erlang.html#list_to_integer/2"},{"type":"function","title":"Examples - erlang.list_to_integer/2","doc":"```erlang\n1> list_to_integer(\"3FF\", 16).\n1023\n2> list_to_integer(\"+3FF\", 16).\n1023\n3> list_to_integer(\"3ff\", 16).\n1023\n4> list_to_integer(\"-3FF\", 16).\n-1023\n5> list_to_integer(\"Base36IsFun\", 36).\n41313437507787071\n6> list_to_integer(\"102\", 2).\n** exception error: bad argument\n     in function  list_to_integer/2\n        called as list_to_integer(\"102\",2)\n        *** argument 1: not a textual representation of an integer\n```","ref":"erlang.html#list_to_integer/2-examples"},{"type":"function","title":"erlang.list_to_pid/1","doc":"Returns a process identifier whose text representation is a `String`.\n\nFailure: `badarg` if `String` contains an invalid representation of a process\nidentifier.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging and is not to be used in application\n> programs.","ref":"erlang.html#list_to_pid/1"},{"type":"function","title":"Examples - erlang.list_to_pid/1","doc":"```erlang\n> list_to_pid(\"<0.4.1>\").\n<0.4.1>\n```","ref":"erlang.html#list_to_pid/1-examples"},{"type":"function","title":"erlang.list_to_port/1","doc":"Returns a port identifier whose text representation is a `String`.\n\nFailure: `badarg` if `String` contains a bad representation of a port\nidentifier.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging and is not to be used in application\n> programs.","ref":"erlang.html#list_to_port/1"},{"type":"function","title":"Examples - erlang.list_to_port/1","doc":"```erlang\n> list_to_port(\"#Port<0.4>\").\n#Port<0.4>\n```","ref":"erlang.html#list_to_port/1-examples"},{"type":"function","title":"erlang.list_to_ref/1","doc":"Returns a reference whose text representation is a `String`.\n\nFailure: `badarg` if `String` contains a bad representation of a reference.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging and is not to be used in application\n> programs.","ref":"erlang.html#list_to_ref/1"},{"type":"function","title":"Examples - erlang.list_to_ref/1","doc":"```erlang\n> list_to_ref(\"#Ref<0.4192537678.4073193475.71181>\").\n#Ref<0.4192537678.4073193475.71181>\n```","ref":"erlang.html#list_to_ref/1-examples"},{"type":"function","title":"erlang.list_to_tuple/1","doc":"Returns a tuple whose elements are the elements of `List`.","ref":"erlang.html#list_to_tuple/1"},{"type":"function","title":"Examples - erlang.list_to_tuple/1","doc":"```erlang\n1> list_to_tuple([share, ['Ericsson_B', 163]]).\n{share, ['Ericsson_B', 163]}\n```","ref":"erlang.html#list_to_tuple/1-examples"},{"type":"function","title":"erlang.load_module/2","doc":"Loads `Module` described by the object code contained within `Binary`.\n\nIf the code for module `Module` already exists, all export\nreferences are replaced so they point to the newly loaded code. The previously\nloaded code is kept in the system as old code, as there can still be processes\nexecuting that code.\n\nReturns either `{module, Module}`, or `{error, Reason}` if loading fails.\n`Reason` is one of the following:\n\n- **`badfile`** - The object code in `Binary` has an incorrect format _or_ the\n  object code contains code for another module than `Module`.\n\n- **`not_purged`** - `Binary` contains a module that cannot be loaded because\n  old code for this module already exists.\n\n- **`on_load`** - The code in `Binary` contains an `on_load` declaration that\n  must be executed before `Binary` can become the current code. Any previous\n  current code for `Module` will remain until the `on_load` call has finished.\n\n- **not_allowed** - The code in `Binary` has been compiled with features that\n  are currently not enabled in the runtime system.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for the code server (see `m:code`) and is not to be used\n> elsewhere.","ref":"erlang.html#load_module/2"},{"type":"function","title":"erlang.load_nif/2","doc":"Loads and links a dynamic library containing native implemented functions (NIFs)\nfor a module.\n\n`Path` is a file path to the shareable object/dynamic library file\nminus the OS-dependent file extension (`.so` for Unix and `.dll` for Windows).\nNotice that on most OSs the library has to have a different name on disc when an\nupgrade of the nif is done. If the name is the same, but the contents differ,\nthe old library may be loaded instead. For information on how to implement a NIF\nlibrary, see [`erl_nif(3)`](erl_nif.md).\n\n`LoadInfo` can be any term. It is passed on to the library as part of the\ninitialization. A good practice is to include a module version number to support\nfuture code upgrade scenarios.\n\nThe call to [`load_nif/2`](`load_nif/2`) must be made _directly_ from the Erlang\ncode of the module that the NIF library belongs to. It returns either `ok`, or\n`{error,{Reason,Text}}` if loading fails. `Reason` is one of the following atoms\nwhile `Text` is a human readable string that can give more information about the\nfailure:\n\n- **`load_failed`** - The OS failed to load the NIF library.\n\n- **`bad_lib`** - The library did not fulfill the requirements as a NIF library\n  of the calling module.\n\n- **`load | upgrade`** - The corresponding library callback was unsuccessful.\n\n- **`reload`** - A NIF library is already loaded for this module instance. The\n  previously deprecated `reload` feature was removed in OTP 20.\n\n- **`old_code`** - The call to [`load_nif/2`](`load_nif/2`) was made from the\n  old code of a module that has been upgraded; this is not allowed.\n\nIf the [`-nifs()`](`e:system:modules.md#nifs_attribute`) attribute is used\n(which is recommended), all NIFs in the dynamic library must be declared as such\nfor [`load_nif/2`](`load_nif/2`) to succeed. On the other hand, all functions\ndeclared with the `-nifs()` attribute do not have to be implemented by the\ndynamic library. This allows a target independent Erlang file to contain\nfallback implementations for functions that may lack NIF support depending on\ntarget OS/hardware platform.","ref":"erlang.html#load_nif/2"},{"type":"function","title":"erlang.loaded/0","doc":"Returns a list of all loaded Erlang modules (current and old code), including\npreloaded modules.\n\nSee also `m:code`.","ref":"erlang.html#loaded/0"},{"type":"function","title":"erlang.localtime/0","doc":"Returns the current local date and time,\n`{{Year, Month, Day}, {Hour, Minute, Second}}`.\n\nFor example:\n\n```erlang\n> erlang:localtime().\n{{1996,11,6},{14,45,17}}\n```\n\nThe time zone and Daylight Saving Time correction depend on the underlying OS.\nThe return value is based on the\n[OS System Time](time_correction.md#os-system-time).","ref":"erlang.html#localtime/0"},{"type":"function","title":"erlang.localtime_to_universaltime/1","doc":"Converts local date and time to Universal Time Coordinated (UTC), if supported\nby the underlying OS. Otherwise no conversion is done and `Localtime` is\nreturned.\n\nFor example:\n\n```erlang\n> erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}).\n{{1996,11,6},{13,45,17}}\n```\n\nFailure: `badarg` if `Localtime` denotes an invalid date and time.","ref":"erlang.html#localtime_to_universaltime/1"},{"type":"function","title":"erlang.localtime_to_universaltime/2","doc":"Converts local date and time to Universal Time Coordinated (UTC) as\n`erlang:localtime_to_universaltime/1`, but the caller decides if Daylight Saving\nTime is active.\n\nIf `IsDst == true`, `Localtime` is during Daylight Saving Time, if\n`IsDst == false` it is not. If `IsDst == undefined`, the underlying OS can\nguess, which is the same as calling\n`erlang:localtime_to_universaltime(Localtime)`.\n\nExamples:\n\n```erlang\n> erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, true).\n{{1996,11,6},{12,45,17}}\n> erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, false).\n{{1996,11,6},{13,45,17}}\n> erlang:localtime_to_universaltime({{1996,11,6},{14,45,17}}, undefined).\n{{1996,11,6},{13,45,17}}\n```\n\nFailure: `badarg` if `Localtime` denotes an invalid date and time.","ref":"erlang.html#localtime_to_universaltime/2"},{"type":"function","title":"erlang.make_ref/0","doc":"Returns a [unique reference](`e:system:system_limits.md#unique_references`).\n\nThe reference is unique among connected nodes.\n\n> #### Warning {: .warning }\n>\n> Before OTP 23, if a node was restarted multiple times with the same\n> node name, references created on a newer instance could be mistaken\n> for those created on an older instance with the same name.","ref":"erlang.html#make_ref/0"},{"type":"function","title":"Examples - erlang.make_ref/0","doc":"```erlang\n1> is_reference(make_ref()).\ntrue\n```","ref":"erlang.html#make_ref/0-examples"},{"type":"function","title":"erlang.make_tuple/2","doc":"Creates a new tuple of the specified `Arity`, where all elements are\n`InitialValue`.","ref":"erlang.html#make_tuple/2"},{"type":"function","title":"Examples - erlang.make_tuple/2","doc":"```erlang\n1> erlang:make_tuple(4, []).\n{[],[],[],[]}\n```","ref":"erlang.html#make_tuple/2-examples"},{"type":"function","title":"erlang.make_tuple/3","doc":"Creates a tuple of size `Arity`, where each element has value `DefaultValue`,\nand then fills in values from `InitList`.\n\nEach list element in `InitList` must be a two-tuple, where the first element is\na position in the newly created tuple and the second element is any term. If a\nposition occurs more than once in the list, the term corresponding to the last\noccurrence is used.","ref":"erlang.html#make_tuple/3"},{"type":"function","title":"Examples - erlang.make_tuple/3","doc":"```erlang\n1> erlang:make_tuple(5, [], [{2,ignored},{5,zz},{2,aa}]).\n{[],aa,[],[],zz}\n```","ref":"erlang.html#make_tuple/3-examples"},{"type":"type","title":"erlang.map/0","doc":"An Erlang [map](`e:system:data_types.md#map`) containing any number of key and\nvalue associations.","ref":"erlang.html#t:map/0"},{"type":"function","title":"erlang.map_get/2","doc":"Returns value `Value` associated with `Key` if `Map` contains `Key`.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map, or with a\n`{badkey,Key}` exception if no value is associated with `Key`.","ref":"erlang.html#map_get/2"},{"type":"function","title":"Examples - erlang.map_get/2","doc":"```erlang\n1> Key = 1337.\n2> Map = #{42 => value_two,Key => \"value one\",\"a\" => 1}.\n3> map_get(Key, Map).\n\"value one\"\n4> map_get(unknown_key, Map).\n** exception error: bad key: unknown_key\n     in function  map_get/2\n        called as map_get(unknown_key,#{42 => value_two,1337 => \"value one\",\"a\" => 1})\n        *** argument 1: not present in map\n5> map_get(key, no_map).\n** exception error: bad map: no_map\n     in function  map_get/2\n        called as map_get(key,no_map)\n        *** argument 2: not a map\n```","ref":"erlang.html#map_get/2-examples"},{"type":"function","title":"erlang.map_size/1","doc":"Returns the number of key-value pairs in `Map`.","ref":"erlang.html#map_size/1"},{"type":"function","title":"Examples - erlang.map_size/1","doc":"```erlang\n1> map_size(#{a=>1, b=>2, c=>3}).\n3\n```","ref":"erlang.html#map_size/1-examples"},{"type":"function","title":"erlang.match_spec_test/3","doc":"Tests a match specification used in calls to `ets:select/2` and\n`trace:function/4`.\n\nThe function tests both a match specification for \"syntactic\" correctness and\nruns the match specification against the object.\nIf the match specification contains errors, the tuple\n`{error, Errors}` is returned, where `Errors` is a list of natural language\ndescriptions of what was wrong with the match specification.\n\nIf `Type` is `table`, the object to match against is to be a tuple. The function\nthen returns `{ok,Result,[],Warnings}`, where `Result` is what would have been\nthe result in a real `ets:select/2` call, or `false` if the match specification\ndoes not match the object tuple.\n\nIf `Type` is `trace`, the object to match against is to be a list. The function\nreturns `{ok, Result, Flags, Warnings}`, where `Result` is one of the following:\n\n- `true` if a trace message is to be emitted\n- `false` if a trace message is not to be emitted\n- The message term to be appended to the trace message\n\n`Flags` is a list of trace flags to be enabled; currently, the only\navailable flag is `return_trace`.\n\nSee also `ets:test_ms/2`.","ref":"erlang.html#match_spec_test/3"},{"type":"function","title":"Examples - erlang.match_spec_test/3","doc":"```erlang\n1> Ms = [{{'$1','$2'}, [], [{{'$2','$1'}}]}].\n2> erlang:match_spec_test({a,b}, Ms, table).\n{ok,{b,a},[],[]}\n3> erlang:match_spec_test({a,b,c}, Ms, table).\n{ok,false,[],[]}\n```","ref":"erlang.html#match_spec_test/3-examples"},{"type":"type","title":"erlang.match_variable/0","doc":"","ref":"erlang.html#t:match_variable/0"},{"type":"function","title":"erlang.max/2","doc":"Returns the largest of `Term1` and `Term2`.\n\nIf the terms compare equal with the `==` operator, `Term1` is returned.\n\nThe [Expressions section](`e:system:expressions.md#term-comparisons`) contains\ndescriptions of the `==` operator and how terms are ordered.\n\n> #### Change {: .info }\n>\n> Allowed in guards tests from Erlang/OTP 26.","ref":"erlang.html#max/2"},{"type":"function","title":"Examples: - erlang.max/2","doc":"```erlang\n1> max(1, 2).\n2\n2> max(1.0, 1).\n1.0\n3> max(1, 1.0).\n1\n4> max(\"abc\", \"b\").\n\"b\"\n```","ref":"erlang.html#max/2-examples"},{"type":"type","title":"erlang.max_heap_size/0","doc":"Process max heap size configuration. For more info see\n[`process_flag(max_heap_size, MaxHeapSize)`](#process_flag_max_heap_size)","ref":"erlang.html#t:max_heap_size/0"},{"type":"type","title":"erlang.maybe_improper_list/0","doc":"An Erlang [list](`e:system:data_types.md#list`) that is not guaranteed to end\nwith a [`[]`](`t:nil/0`), and where the list elements can be of any type.","ref":"erlang.html#t:maybe_improper_list/0"},{"type":"type","title":"erlang.maybe_improper_list/2","doc":"An Erlang [list](`e:system:data_types.md#list`), that is not guaranteed to end\nwith a [`[]`](`t:nil/0`), and where the list elements are of the type\n`ContentType`.","ref":"erlang.html#t:maybe_improper_list/2"},{"type":"function","title":"erlang.md5/1","doc":"Computes an MD5 message digest from `Data`, where the length of the digest is\n128 bits (16 bytes). `Data` is a binary or a list of small integers and\nbinaries.\n\nFor more information about MD5, see\n[RFC 1321 - The MD5 Message-Digest Algorithm](https://www.ietf.org/rfc/rfc1321.txt).\n\n> #### Warning {: .warning }\n>\n> The MD5 Message-Digest Algorithm is _not_ considered safe for code-signing or\n> software-integrity purposes.","ref":"erlang.html#md5/1"},{"type":"function","title":"erlang.md5_final/1","doc":"Finishes the update of an MD5 `Context` and returns the computed `MD5` message\ndigest.","ref":"erlang.html#md5_final/1"},{"type":"function","title":"erlang.md5_init/0","doc":"Creates an MD5 context, to be used in the following calls to\n[`md5_update/2`](`md5_update/2`).","ref":"erlang.html#md5_init/0"},{"type":"function","title":"erlang.md5_update/2","doc":"Update an MD5 `Context` with `Data` and returns a `NewContext`.","ref":"erlang.html#md5_update/2"},{"type":"function","title":"erlang.memory/0","doc":"Returns a list with information about memory dynamically allocated by the Erlang\nemulator.\n\nEach list element is a tuple `{Type, Size}`. The first element `Type`\nis an atom describing memory type. The second element `Size` is the memory size\nin bytes.\n\nMemory types:\n\n- **`total`** - The total amount of memory currently allocated. This is the same\n  as the sum of the memory size for `processes` and `system`.\n\n- **`processes`** - The total amount of memory currently allocated for the\n  Erlang processes.\n\n- **`processes_used`** - The total amount of memory currently used by the Erlang\n  processes. This is part of the memory presented as `processes` memory.\n\n- **`system`** - The total amount of memory currently allocated for the emulator\n  that is not directly related to any Erlang process. Memory presented as\n  `processes` is not included in this memory. `m:instrument` can be used to get\n  a more detailed breakdown of what memory is part of this type.\n\n- **`atom`** - The total amount of memory currently allocated for atoms. This\n  memory is part of the memory presented as `system` memory.\n\n- **`atom_used`** - The total amount of memory currently used for atoms. This\n  memory is part of the memory presented as `atom` memory.\n\n- **`binary`** - The total amount of memory currently allocated for binaries.\n  This memory is part of the memory presented as `system` memory.\n\n- **`code`** - The total amount of memory currently allocated for Erlang code.\n  This memory is part of the memory presented as `system` memory.\n\n- **`ets`** - The total amount of memory currently allocated for ETS tables.\n  This memory is part of the memory presented as `system` memory.\n\n- **`maximum`** - The maximum total amount of memory allocated since the\n  emulator was started. This tuple is only present when the emulator is run with\n  instrumentation.\n\n  For information on how to run the emulator with instrumentation, see\n  `m:instrument` and/or [`erl(1)`](erl_cmd.md).\n\n> #### Note {: .info }\n>\n> The `system` value is not complete. Some allocated memory that is to be part\n> of this value is not.\n>\n> When the emulator is run with instrumentation, the `system` value is more\n> accurate, but memory directly allocated for `malloc` (and friends) is still\n> not part of the `system` value. Direct calls to `malloc` are only done from\n> OS-specific runtime libraries and perhaps from user-implemented Erlang drivers\n> that do not use the memory allocation functions in the driver interface.\n>\n> As the `total` value is the sum of `processes` and `system`, the error in\n> `system` propagates to the `total` value.\n>\n> The different amounts of memory that are summed are _not_ gathered atomically,\n> which introduces an error in the result.\n\nThe different values have the following relation to each other. Values beginning\nwith an uppercase letter is not part of the result.\n\n```text\ntotal      = processes + system\nprocesses  = processes_used + ProcessesNotUsed\nsystem     = atom + binary + code + ets + OtherSystem\natom       = atom_used + AtomNotUsed\nRealTotal  = processes + RealSystem\nRealSystem = system + MissedSystem\n```\n\nMore tuples in the returned list can be added in a future release.\n\n> #### Note {: .info }\n>\n> The `total` value is supposed to be the total amount of memory dynamically\n> allocated by the emulator. Shared libraries, the code of the emulator itself,\n> and the emulator stacks are not supposed to be included. That is, the `total`\n> value is _not_ supposed to be equal to the total size of all pages mapped to\n> the emulator.\n>\n> Also, because of fragmentation and prereservation of memory areas, the size of\n> the memory segments containing the dynamically allocated memory blocks can be\n> much larger than the total size of the dynamically allocated memory blocks.\n\n> #### Change {: .info }\n>\n> As from ERTS 5.6.4, `erlang:memory/0` requires that all\n> [`erts_alloc(3)`](erts_alloc.md) allocators are enabled (default behavior).\n\nFailure: `notsup` if an [`erts_alloc(3)`](erts_alloc.md) allocator has been\ndisabled.","ref":"erlang.html#memory/0"},{"type":"function","title":"erlang.memory/1","doc":"Returns the memory size in bytes allocated for memory of type `Type`. The\nargument can also be specified as a list of `t:memory_type/0` atoms, in which case\na corresponding list of `{memory_type(), Size :: integer >= 0}` tuples is\nreturned.\n\n> #### Change {: .info }\n>\n> As from ERTS 5.6.4, `erlang:memory/1` requires that all\n> [`erts_alloc(3)`](erts_alloc.md) allocators are enabled (default behavior).\n\nFailures:\n\n- **`badarg`** - If `Type` is not one of the memory types listed in the\n  description of [`erlang:memory/0`](`memory/0`).\n\n- **`badarg`** - If `maximum` is passed as `Type` and the emulator is not run in\n  instrumented mode.\n\n- **`notsup`** - If an [`erts_alloc(3)`](erts_alloc.md) allocator has been\n  disabled.\n\nSee also [`erlang:memory/0`](`memory/0`).","ref":"erlang.html#memory/1"},{"type":"type","title":"erlang.memory_type/0","doc":"","ref":"erlang.html#t:memory_type/0"},{"type":"type","title":"erlang.message_queue_data/0","doc":"See\n[`process_flag(message_queue_data, MQD)`](#process_flag_message_queue_data).\n\nProcess message queue data configuration. For more information, see\n[`process_flag(message_queue_data, MQD)`](#process_flag_message_queue_data)","ref":"erlang.html#t:message_queue_data/0"},{"type":"type","title":"erlang.mfa/0","doc":"A three-tuple representing a `Module:Function/Arity` function signature.","ref":"erlang.html#t:mfa/0"},{"type":"function","title":"erlang.min/2","doc":"Returns the smallest of `Term1` and `Term2`.\n\nIf the terms compare equal with the `==` operator, `Term1` is returned.\n\nThe [Expressions section](`e:system:expressions.md#term-comparisons`) contains\ndescriptions of the `==` operator and how terms are ordered.\n\n> #### Change {: .info }\n>\n> Allowed in guards tests from Erlang/OTP 26.","ref":"erlang.html#min/2"},{"type":"function","title":"Examples - erlang.min/2","doc":"```erlang\n> min(1, 2).\n1\n> min(1.0, 1).\n1.0\n> min(1, 1.0).\n1\n> min(\"abc\", \"b\").\n\"abc\"\n```","ref":"erlang.html#min/2-examples"},{"type":"type","title":"erlang.module/0","doc":"An Erlang module represented by an atom.","ref":"erlang.html#t:module/0"},{"type":"function","title":"erlang.module_loaded/1","doc":"Returns `true` if the module `Module` is loaded as\n[_current code_](`e:system:code_loading.md#code-replacement`); otherwise,\n`false`. It does not attempt to load the module.","ref":"erlang.html#module_loaded/1"},{"type":"function","title":"erlang.monitor/2","doc":"Sends a monitor request of type `Type` to the entity identified by `Item`.\n\nIf the monitored entity does not exist or it changes monitored state, the caller\nof `monitor/2` is notified by a message on the following format:\n{: #monitor_message}\n\n```erlang\n{Tag, MonitorRef, Type, Object, Info}\n```\n\n> #### Note {: .info }\n>\n> The monitor request is an asynchronous signal. That is, it takes time before\n> the signal reaches its destination.\n\n`Type` can be one of the following atoms: `process`, `port` or `time_offset`.\n\nA `process` or `port` monitor is triggered only once, after that it is removed\nfrom both monitoring process and the monitored entity. Monitors are fired when\nthe monitored process or port terminates, does not exist at the moment of\ncreation, or if the connection to it is lost. If the connection to it is lost,\nwe do not know if it still exists. The monitoring is also turned off when\n`demonitor/1` is called.\n\nA `process` or `port` monitor by name resolves the `RegisteredName` to `t:pid/0`\nor `t:port/0` only once at the moment of monitor instantiation, later changes to\nthe name registration will not affect the existing monitor.\n\nWhen a `process` or `port` monitor is triggered, a `'DOWN'` message is sent that\nhas the following pattern:\n\n```erlang\n{'DOWN', MonitorRef, Type, Object, Info}\n```\n\nIn the monitor message `MonitorRef` and `Type` are the same as described\nearlier, and:\n\n- **`Object`** - The monitored entity, which triggered the event. When\n  monitoring a process or a local port, `Object` will be equal to the `t:pid/0`\n  or `t:port/0` that was being monitored. When monitoring process or port by\n  name, `Object` will have format `{RegisteredName, Node}` where\n  `RegisteredName` is the name which has been used with\n  `monitor/2` call and `Node` is local or remote node name (for\n  ports monitored by name, `Node` is always local node name).\n\n- **`Info`** - Either the exit reason of the process, `noproc` (process or port\n  did not exist at the time of monitor creation), or `noconnection` (no\n  connection to the node where the monitored process resides).\n\n- **Monitoring a `process`{: #monitor_process }** - Creates monitor between the\n  current process and another process identified by `Item`, which can be a\n  `t:pid/0` (local or remote), an atom `RegisteredName` or a tuple\n  `{RegisteredName, Node}` for a registered process, located elsewhere.\n\n  > #### Change {: .info }\n  >\n  > Before ERTS 10.0 (OTP 21.0), monitoring a process could fail with `badarg`\n  > if the monitored process resided on a primitive node (such as erl_interface\n  > or jinterface), where remote process monitoring is not implemented.\n  >\n  > Now, such a call to `monitor` will instead succeed and a monitor is created.\n  > But the monitor will only supervise the connection. That is, a\n  > `{'DOWN', _, process, _, noconnection}` is the only message that may be\n  > received, as the primitive node has no way of reporting the status of the\n  > monitored process.\n\n- **Monitoring a `port`{: #monitor_port }** - Creates monitor between the\n  current process and a port identified by `Item`, which can be a `t:port/0`\n  (only local), an atom `RegisteredName` or a tuple `{RegisteredName, Node}` for\n  a registered port, located on this node. Note, that attempt to monitor a\n  remote port will result in `badarg`.\n\n  Available since OTP 19.0.\n\n- **Monitoring a `time_offset`{: #monitor_time_offset }** - Monitors changes in\n  `time_offset/0` between\n  [Erlang monotonic time](time_correction.md#erlang-monotonic-time) and\n  [Erlang system time](time_correction.md#erlang-system-time). One valid `Item`\n  exists in combination with the `time_offset Type`, namely the atom\n  `clock_service`. Notice that the atom `clock_service` is _not_ the registered\n  name of a process. In this case it serves as an identifier of the runtime\n  system internal clock service at current runtime system instance.\n\n  The monitor is triggered when the time offset is changed. This either if the\n  time offset value is changed, or if the offset is changed from preliminary to\n  final during\n  [finalization of the time offset](#system_flag_time_offset) when the\n  [single time warp mode](time_correction.md#single-time-warp-mode) is used.\n  When a change from preliminary to final time offset is made, the monitor is\n  triggered once regardless of whether the time offset value was changed or not.\n\n  If the runtime system is in\n  [multi time warp mode](time_correction.md#multi-time-warp-mode), the time\n  offset is changed when the runtime system detects that the\n  [OS system time](time_correction.md#os-system-time) has changed. The runtime\n  system does, however, not detect this immediately when it occurs. A task\n  checking the time offset is scheduled to execute at least once a minute, so\n  under normal operation this is to be detected within a minute, but during\n  heavy load it can take longer time.\n\n  The monitor is _not_ automatically removed after it has been triggered. That\n  is, repeated changes of the time offset trigger the monitor repeatedly.\n\n  When the monitor is triggered a `'CHANGE'` message is sent to the monitoring\n  process. A `'CHANGE'` message has the following pattern:\n\n  ```erlang\n  {'CHANGE', MonitorRef, Type, Item, NewTimeOffset}\n  ```\n\n  where `MonitorRef`, `Type`, and `Item` are the same as described above, and\n  `NewTimeOffset` is the new time offset.\n\n  When the `'CHANGE'` message has been received you are guaranteed not to\n  retrieve the old time offset when calling\n  `erlang:time_offset/0`. Notice that you can observe the\n  change of the time offset when calling `erlang:time_offset/0` before you get\n  the `'CHANGE'` message.\n\n  Available since OTP 18.0.\n\nMaking several calls to `monitor/2` for the same `Item` and/or\n`Type` is not an error; it results in as many independent monitoring instances.\n\nThe monitor functionality is expected to be extended. That is, other `Type`s and\n`Item`s are expected to be supported in a future release.\n\n> #### Note {: .info }\n>\n> If or when `monitor/2` is extended, other possible values for\n> `Tag`, `Object`, and `Info` in the monitor message will be introduced.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.","ref":"erlang.html#monitor/2"},{"type":"function","title":"erlang.monitor/3","doc":"Provides an option list for modification of monitoring functionality provided by\n`monitor/2`. The `Type` and `Item` arguments have the same meaning as when\npassed to [`monitor/2`](`monitor/2`).\n\nCurrently available options:\n\n- **`{alias, UnaliasOpt}`** - The returned monitor reference will also become an\n  alias for the calling process. That is, the returned reference can be used for\n  sending messages to the calling process. See also `alias/0`. The `UnaliasOpt`\n  determines how the alias should be deactivated.\n\n  - **`explicit_unalias`** - Only an explicit call to `unalias/1` will\n    deactivate the alias.\n\n  - **`demonitor`** - The alias will be automatically deactivated when the\n    monitor is removed. This either via an explicit call to `demonitor/1` or\n    when it is automatically removed at the same time as a `'DOWN'` message is\n    delivered due to the monitor. The alias can also still be deactivated via a\n    call to [`unalias/1`](`unalias/1`).\n\n  - **`reply_demonitor`** - The alias will be automatically deactivated when the\n    monitor is removed (see `demonitor` option above) or a reply message sent\n    via the alias is received. When a reply message is received via the alias\n    the monitor will also be automatically removed. This is useful in\n    client/server scenarios when a client monitors the server and will get the\n    reply via the alias. Once the response is received both the alias and the\n    monitor will be automatically removed regardless of whether the response is\n    a reply or a `'DOWN'` message. The alias can also still be deactivated via a\n    call to [`unalias/1`](`unalias/1`). Note that if the alias is removed using\n    the [`unalias/1`](`unalias/1`) BIF, the monitor will still be left active.\n\n  Example:\n\n  ```erlang\n  server() ->\n      receive\n          {request, AliasReqId, Request} ->\n              Result = perform_request(Request),\n              AliasReqId ! {reply, AliasReqId, Result}\n      end,\n      server().\n\n  client(ServerPid, Request) ->\n      AliasMonReqId = monitor(process, ServerPid, [{alias, reply_demonitor}]),\n      ServerPid ! {request, AliasMonReqId, Request},\n      %% Alias as well as monitor will be automatically deactivated if we\n      %% receive a reply or a 'DOWN' message since we used 'reply_demonitor'\n      %% as unalias option...\n      receive\n          {reply, AliasMonReqId, Result} ->\n              Result;\n          {'DOWN', AliasMonReqId, process, ServerPid, ExitReason} ->\n              error(ExitReason)\n      end.\n  ```\n\n  Note that both the server and the client in this example must be executing on\n  at least OTP 24 systems in order for this to work.\n\n  For more information on process aliases see the\n  [_Process Aliases_](`e:system:ref_man_processes.md#process-aliases`) section\n  of the _Erlang Reference Manual_.\n\n- **`{tag, UserDefinedTag}`** - Replace the default `Tag` with `UserDefinedTag`\n  in the [monitor message](#monitor_message) delivered when the\n  monitor is triggered. For example, when monitoring a process, the `'DOWN'` tag\n  in the down message will be replaced by `UserDefinedTag`.\n\n  An example of how the `{tag, UserDefinedTag}` option can be used in order to\n  enable the new\n  [selective receive optimization](`e:system:eff_guide_processes.md#receiving-messages`),\n  introduced in OTP 24, when making multiple requests to different servers:\n\n  ```erlang\n  server() ->\n      receive\n          {request, From, ReqId, Request} ->\n              Result = perform_request(Request),\n              From ! {reply, self(), ReqId, Result}\n      end,\n      server().\n\n  client(ServerPids, Request) when is_list(ServerPids) ->\n      ReqId = make_ref(),\n      lists:foreach(fun (ServerPid) ->\n                            _ = monitor(process, ServerPid,\n                                        [{tag, {'DOWN', ReqId}}]),\n                            ServerPid ! {request, self(), ReqId, Request}\n                    end,\n                    ServerPids),\n      receive_replies(ReqId, length(ServerPids), []).\n\n  receive_replies(_ReqId, 0, Acc) ->\n      Acc;\n  receive_replies(ReqId, N, Acc) ->\n      %% The compiler will detect that we match on the 'ReqId'\n      %% reference in all clauses, and will enable the selective\n      %% receive optimization which makes the receive able to\n      %% skip past all messages present in the message queue at\n      %% the time when the 'ReqId' reference was created...\n      Res = receive\n                {reply, ServerPid, ReqId, Result} ->\n                    %% Here we typically would have deactivated the\n                    %% monitor by a call to demonitor(Mon, [flush]) but\n                    %% we ignore this in this example for simplicity...\n                    {ok, ServerPid, Result};\n                {{'DOWN', ReqId}, _Mon, process, ServerPid, ExitReason} ->\n                    {error, ServerPid, ExitReason}\n            end,\n      receive_replies(ReqId, N-1, [Res | Acc]).\n  ```\n\n  In order for this example to work as intended, the client must be executing on\n  at least an OTP 24 system, but the servers may execute on older systems.\n\n- **`priority`** - Since OTP 28.0\n\n  [Enables priority message reception](`e:system:ref_man_processes.md#enable-prio-msg-recv`)\n  of the monitor message(s) sent when this monitor is triggered for the calling\n  process.\n\n  > #### Warning {: .warning }\n  >\n  > You *very seldom* need to resort to using priority messages and you may\n  > [cause issues](`e:system:ref_man_processes.md#priority-message-warning`)\n  > instead of solving issues if not used with care.\n\n  For more information see the\n  [_Adding Messages to the Message Queue_](`e:system:ref_man_processes.md#message-queue-order`)\n  section of the _Erlang Reference Manual_.","ref":"erlang.html#monitor/3"},{"type":"function","title":"erlang.monitor_node/2","doc":"Monitor the status of the node `Node`. If `Flag` is `true`, monitoring is turned\non. If `Flag` is `false`, monitoring is turned off.\n\nMaking several calls to [`monitor_node(Node, true)`](`monitor_node/2`) for the\nsame `Node` is not an error; it results in as many independent monitoring\ninstances.\n\nIf `Node` fails or does not exist, the message `{nodedown, Node}` is delivered\nto the process. If a process has made two calls to\n[`monitor_node(Node, true)`](`monitor_node/2`) and `Node` terminates, two\n`nodedown` messages are delivered to the process. If there is no connection to\n`Node`, an attempt is made to create one. If this fails, a `nodedown` message is\ndelivered.\n\nThe delivery of the `nodedown` signal is not ordered with respect to other link\nor monitor signals from the node that goes down. If you need a guarantee that\nall signals from the remote node has been delivered before the `nodedown` signal\nis sent, you should use `net_kernel:monitor_nodes/1`.\n\nNodes connected through hidden connections can be monitored as any other nodes.\n\nFailure: `notalive` if the local node is not alive.","ref":"erlang.html#monitor_node/2"},{"type":"function","title":"erlang.monitor_node/3","doc":"Behaves as `monitor_node/2` except that it allows an extra option to be\nspecified, namely `allow_passive_connect`.\n\nThis option allows the BIF to wait the normal network connection time-out\nfor the _monitored node_ to connect itself, even if it cannot be actively\nconnected from this node (that is, it is blocked). The state where this can\nbe useful can only be achieved by using the Kernel option `dist_auto_connect once`.\nIf that option is not used, option `allow_passive_connect` has no effect.\n\n> #### Note {: .info }\n>\n> Option `allow_passive_connect` is used internally and is seldom needed in\n> applications where the network topology and the Kernel options in effect are\n> known in advance.\n\nFailure: `badarg` if the local node is not alive or the option list is\nmalformed.","ref":"erlang.html#monitor_node/3"},{"type":"type","title":"erlang.monitor_option/0","doc":"See `monitor/3`.","ref":"erlang.html#t:monitor_option/0"},{"type":"type","title":"erlang.monitor_port_identifier/0","doc":"","ref":"erlang.html#t:monitor_port_identifier/0"},{"type":"type","title":"erlang.monitor_process_identifier/0","doc":"","ref":"erlang.html#t:monitor_process_identifier/0"},{"type":"function","title":"erlang.monotonic_time/0","doc":"Returns the current\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time) in `native`\n[time unit](`t:time_unit/0`). This is a monotonically increasing time\nsince some unspecified point in time.\n\n> #### Note {: .info }\n>\n> This is a\n> [monotonically increasing](time_correction.md#monotonically-increasing) time,\n> but _not_ a\n> [strictly monotonically increasing](time_correction.md#strictly-monotonically-increasing)\n> time. That is, consecutive calls to `erlang:monotonic_time/0` can produce the\n> same result.\n>\n> Different runtime system instances will use different unspecified points in\n> time as base for their Erlang monotonic clocks. That is, it is _pointless_\n> comparing monotonic times from different runtime system instances. Different\n> runtime system instances can also place this unspecified point in time\n> different relative runtime system start. It can be placed in the future (time\n> at start is a negative value), the past (time at start is a positive value),\n> or the runtime system start (time at start is zero). The monotonic time at\n> runtime system start can be retrieved by calling\n> [`erlang:system_info(start_time)`](#system_info_start_time).","ref":"erlang.html#monotonic_time/0"},{"type":"function","title":"erlang.monotonic_time/1","doc":"Returns the current\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time) converted into\nthe `Unit` passed as argument.\n\nSame as calling\n[`erlang:convert_time_unit`](`convert_time_unit/3`)`(`[ `erlang:monotonic_time()`](`monotonic_time/0`)`, native, Unit)`,\nhowever optimized for commonly used `Unit`s.","ref":"erlang.html#monotonic_time/1"},{"type":"type","title":"erlang.neg_integer/0","doc":"A negative integer.","ref":"erlang.html#t:neg_integer/0"},{"type":"function","title":"erlang.nif_error/1","doc":"Works exactly like `error/1`, but Dialyzer thinks that this BIF will return an\narbitrary term. When used in a stub function for a NIF to generate an exception\nwhen the NIF library is not loaded, Dialyzer does not generate false warnings.","ref":"erlang.html#nif_error/1"},{"type":"function","title":"erlang.nif_error/2","doc":"Works exactly like `error/2`, but Dialyzer thinks that this BIF will return an\narbitrary term. When used in a stub function for a NIF to generate an exception\nwhen the NIF library is not loaded, Dialyzer does not generate false warnings.","ref":"erlang.html#nif_error/2"},{"type":"opaque","title":"erlang.nif_resource/0","doc":"An opaque handle identifying a\n[NIF resource object ](erl_nif.md#resource_objects).","ref":"erlang.html#t:nif_resource/0"},{"type":"type","title":"erlang.no_return/0","doc":"The type used to show that a function will _never_ return a value, that is it\nwill _always_ throw an exception.","ref":"erlang.html#t:no_return/0"},{"type":"type","title":"erlang.node/0","doc":"An Erlang [node](`e:system:distributed.md#nodes`) represented by an atom.","ref":"erlang.html#t:node/0"},{"type":"function","title":"erlang.node/0","doc":"Returns the name of the local node.\n\nIf the node is not alive, `nonode@nohost` is returned.","ref":"erlang.html#node/0"},{"type":"function","title":"Examples - erlang.node/0","doc":"```erlang\n> node().\nnonode@nohost\n```","ref":"erlang.html#node/0-examples"},{"type":"function","title":"erlang.node/1","doc":"Returns the node where `Arg` originates.\n\nIf `Arg` originates from the local node and the local node is not\nalive, `nonode@nohost` is returned.","ref":"erlang.html#node/1"},{"type":"function","title":"Examples - erlang.node/1","doc":"```erlang\n1> node(self()) =:= node().\ntrue\n```","ref":"erlang.html#node/1-examples"},{"type":"function","title":"erlang.nodes/0","doc":"Returns a list of all nodes connected to this node through normal connections\n(that is, [hidden nodes](`e:system:distributed.md#hidden-nodes`) are not\nlisted). Same as [nodes(visible)](#nodes_visible).","ref":"erlang.html#nodes/0"},{"type":"function","title":"erlang.nodes/1","doc":"Returns a list of nodes according to the argument specified. The returned\nresult, when the argument is a list, is the list of nodes satisfying the\ndisjunction(s) of the list elements.\n\n`NodeType`s:\n\n- **`visible`{: #nodes_visible }** - Nodes connected to this node through normal\n  connections.\n\n- **`hidden`** - Nodes connected to this node through hidden connections.\n\n- **`connected`** - All nodes connected to this node.\n\n- **`this`** - This node.\n\n- **`known`** - Nodes that are known to this node. That is, connected nodes and\n  nodes referred to by process identifiers, port identifiers, and references\n  located on this node. The set of known nodes is garbage collected. Notice that\n  this garbage collection can be delayed. For more information, see\n  [`erlang:system_info(delayed_node_table_gc)`](#system_info_delayed_node_table_gc).\n\nSome equalities: `[node()] = nodes(this)`,\n`nodes(connected) = nodes([visible, hidden])`, and `nodes() = nodes(visible)`.","ref":"erlang.html#nodes/1"},{"type":"function","title":"erlang.nodes/2","doc":"Returns a list of `NodeInfo` tuples.\n\nThe first element is the node name. Nodes to be included in the list are determined\nby the first argument `Arg` in the same way as for [`nodes(Arg)`](`nodes/1`).\nThe second element of `NodeInfo` tuples is a map containing further information\nabout the node identified by the first element.\nThe information present in this map is determined by the\n`InfoOpts` map passed as the second argument. Currently the following\nassociations are allowed in the `InfoOpts` map:\n\n- **`connection_id => boolean()`** - If the value of the association equals\n  `true`, the `Info` map in the returned result will contain the key\n  `connection_id` associated with the value `ConnectionId`. If `ConnectionId`\n  equals `undefined`, the node is not connected to the node which the caller is\n  executing on, or is the node which the caller is executing on. If\n  `ConnectionId` is an integer, the node is currently connected to the node\n  which the caller is executing on.\n\n  [](){: #connection_id } The integer connection identifier value together with\n  a node name identifies a specific connection instance to the node with that\n  node name. The connection identifier value is node local. That is, on the\n  other node the connection identifier will _not_ be the same value. If a\n  connection is taken down and then taken up again, the connection identifier\n  value will change for the connection to that node. The amount of values for\n  connection identifiers are limited, so it is possible to see the same value\n  for different instances, but quite unlikely. It is undefined how the value\n  change between two consecutive connection instances.\n\n- **`node_type => boolean()`** - If the value of the association equals `true`,\n  the `Info` map in the returned result will contain the key `node_type`\n  associated with the value `NodeTypeInfo`. Currently the following node types\n  exist:\n\n  - **`visible`** - The node is connected to the node of the calling process\n    through an ordinary visible connection. That is, the node name would appear\n    in the result returned by `nodes/0`.\n\n  - **`hidden`** - The node is connected to the node of the calling process\n    through a hidden connection. That is, the node name would _not_ appear in\n    the result returned by `nodes/0`.\n\n  - **`this`** - This is the node of the calling process.\n\n  - **`known`** - The node is not connected but known to the node of the calling\n    process.\n\nExample:\n\n```erlang\n(a@localhost)1> nodes([this, connected], #{connection_id=>true, node_type=>true}).\n[{c@localhost,#{connection_id => 13892108,node_type => hidden}},\n {b@localhost,#{connection_id => 3067553,node_type => visible}},\n {a@localhost,#{connection_id => undefined,node_type => this}}]\n(a@localhost)2>\n```","ref":"erlang.html#nodes/2"},{"type":"type","title":"erlang.non_neg_integer/0","doc":"A non-negative integer, that is any positive integer or 0.","ref":"erlang.html#t:non_neg_integer/0"},{"type":"type","title":"erlang.none/0","doc":"This type is used to show that a function will _never_ return a value; that is\nit will _always_ throw an exception.\n\nIn a spec, use `t:no_return/0` for the sake of clarity.","ref":"erlang.html#t:none/0"},{"type":"type","title":"erlang.nonempty_binary/0","doc":"A `t:binary/0` that contains some data.","ref":"erlang.html#t:nonempty_binary/0"},{"type":"type","title":"erlang.nonempty_bitstring/0","doc":"A `t:bitstring/0` that contains some data.","ref":"erlang.html#t:nonempty_bitstring/0"},{"type":"type","title":"erlang.nonempty_improper_list/2","doc":"A [maybe_improper_list/2](`t:maybe_improper_list/0`) that contains some items.","ref":"erlang.html#t:nonempty_improper_list/2"},{"type":"type","title":"erlang.nonempty_list/0","doc":"A `t:list/0` that contains some items.","ref":"erlang.html#t:nonempty_list/0"},{"type":"type","title":"erlang.nonempty_list/1","doc":"A [list(ContentType)](`t:list/0`) that contains some items.","ref":"erlang.html#t:nonempty_list/1"},{"type":"type","title":"erlang.nonempty_maybe_improper_list/0","doc":"A `t:maybe_improper_list/0` that contains some items.","ref":"erlang.html#t:nonempty_maybe_improper_list/0"},{"type":"type","title":"erlang.nonempty_maybe_improper_list/2","doc":"A [maybe_improper_list(ContentType, TerminationType)](`t:maybe_improper_list/0`)\nthat contains some items.","ref":"erlang.html#t:nonempty_maybe_improper_list/2"},{"type":"type","title":"erlang.nonempty_string/0","doc":"A `t:string/0` that contains some characters.","ref":"erlang.html#t:nonempty_string/0"},{"type":"function","title":"erlang.now/0","doc":"> #### Warning {: .warning }\n>\n> _This function is deprecated. Do not use it._\n>\n> For more information, see section\n> [Time and Time Correction](time_correction.md) in the User's Guide.\n> Specifically, section [Dos and Dont's](time_correction.md#Dos_and_Donts)\n> describes what to use instead of `erlang:now/0`.\n\nReturns the tuple `{MegaSecs, Secs, MicroSecs}`, which is the elapsed time since\n00:00 GMT, January 1, 1970 (zero hour), if provided by the underlying OS.\nOtherwise some other point in time is chosen. It is also guaranteed that the\nfollowing calls to this BIF return continuously increasing values. Hence, the\nreturn value from `erlang:now/0` can be used to generate unique time stamps. If\nit is called in a tight loop on a fast machine, the time of the node can become\nskewed.\n\nCan only be used to check the local time of day if the time-zone information of\nthe underlying OS is properly configured.","ref":"erlang.html#now/0"},{"type":"type","title":"erlang.number/0","doc":"An Erlang [number](`e:system:data_types.md#number`).","ref":"erlang.html#t:number/0"},{"type":"function","title":"erlang.open_port/2","doc":"Returns a port identifier as the result of opening a new Erlang port. A port can\nbe seen as an external Erlang process.\n\nThe name of the executable as well as the arguments specified in `cd`, `env`,\n`args`, and `arg0` are subject to Unicode filename translation if the system is\nrunning in Unicode filename mode. To avoid translation or to force, for example\nUTF-8, supply the executable and/or arguments as a binary in the correct\nencoding. For details, see the module `m:file`, the function\n`file:native_name_encoding/0` in Kernel, and the\n[`Using Unicode in Erlang`](`e:stdlib:unicode_usage.md`) User's Guide.\n\n> #### Note {: .info }\n>\n> The characters in the name (if specified as a list) can only be > 255 if the\n> Erlang virtual machine is started in Unicode filename translation mode.\n> Otherwise the name of the executable is limited to the ISO Latin-1 character\n> set.\n\n`PortName`s:\n\n- **`{spawn, Command}`** - Starts an external program. `Command` is the name of\n  the external program to be run. `Command` runs outside the Erlang work space\n  unless an Erlang driver with the name `Command` is found. If found, that\n  driver is started. A driver runs in the Erlang work space, which means that it\n  is linked with the Erlang runtime system.\n\n  For external programs, `PATH` is searched (or an equivalent method is used to\n  find programs, depending on the OS). This is done by invoking the shell on\n  certain platforms. The first space-separated token of the command is\n  considered as the name of the executable (or driver). This (among other\n  things) makes this option unsuitable for running programs with spaces in\n  filenames or directory names. If spaces in executable filenames are desired,\n  use `{spawn_executable, Command}` instead.\n\n  > #### Warning {: .warning }\n  >\n  > On Unix systems, arguments are passed to a new operating system process as\n  > an array of strings but on Windows it is up to the child process to parse\n  > them and some Windows programs may apply their own rules, which are\n  > inconsistent with the standard C runtime `argv` parsing.\n  >\n  > This is particularly troublesome when invoking `.bat`, `.cmd`, or `.com`\n  > files as these run implicitly through `cmd.exe`, whose argument parsing is\n  > vulnerable to malicious input and can be used to run arbitrary shell\n  > commands.\n  >\n  > Therefore, if you are running on Windows and you execute batch files or\n  > `.com` applications, you must not pass untrusted input as arguments to the\n  > program. This affects both `spawn` and `spawn_executable`.\n\n- **`{spawn_executable, FileName}`** - Works like `{spawn, FileName}`, but only\n  runs external executables. `FileName` in its whole is used as the name of the\n  executable, including any spaces. If arguments are to be passed, the\n  `PortSettings` `args` and `arg0` can be used.\n\n  The shell is usually not invoked to start the program, it is executed\n  directly. `PATH` (or equivalent) is not searched. To find a program in `PATH`\n  to execute, use `os:find_executable/1`.\n\n  Only if a shell script or `.bat` file is executed, the appropriate command\n  interpreter is invoked implicitly, but there is still no command-argument\n  expansion or implicit `PATH` search.\n\n  If `FileName` cannot be run, an error exception is raised, with the POSIX\n  error code as the reason. The error reason can differ between OSs. Typically\n  the error `enoent` is raised when an attempt is made to run a program that is\n  not found and `eacces` is raised when the specified file is not executable.\n\n- **`{spawn_driver, Command}`** - Works like `{spawn, Command}`, but demands the\n  first (space-separated) token of the command to be the name of a loaded\n  driver. If no driver with that name is loaded, a `badarg` error is raised.\n\n- **`{fd, In, Out}`** - Allows an Erlang process to access any currently opened\n  file descriptors used by Erlang. The file descriptor `In` can be used for\n  standard input, and the file descriptor `Out` for standard output. It is only\n  used for various servers in the Erlang OS (`shell` and `user`). Hence, its use\n  is limited.\n\n`PortSettings` is a list of settings for the port. The valid settings are as\nfollows:\n\n- **`{packet, N}`** - Messages are preceded by their length, sent in `N` bytes,\n  with the most significant byte first. The valid values for `N` are 1, 2,\n  and 4.\n\n- **`stream`** - Output messages are sent without packet lengths. A user-defined\n  protocol must be used between the Erlang process and the external object.\n\n- **`{line, L}`** - Messages are delivered on a per line basis. Each line\n  (delimited by the OS-dependent newline sequence) is delivered in a single\n  message. The message data format is `{Flag, Line}`, where `Flag` is `eol` or\n  `noeol`, and `Line` is the data delivered (without the newline sequence).\n\n  `L` specifies the maximum line length in bytes. Lines longer than this are\n  delivered in more than one message, with `Flag` set to `noeol` for all but the\n  last message. If end of file is encountered anywhere else than immediately\n  following a newline sequence, the last line is also delivered with `Flag` set\n  to `noeol`. Otherwise lines are delivered with `Flag` set to `eol`.\n\n  The `{packet, N}` and `{line, L}` settings are mutually exclusive.\n\n- **`{cd, Dir}`** - Only valid for `{spawn, Command}` and\n  `{spawn_executable, FileName}`. The external program starts using `Dir` as its\n  working directory. `Dir` must be a string.\n\n- **`{env, Env}`** - Only valid for `{spawn, Command}`, and `{spawn_executable, FileName}`.\n  The environment of the started process is extended using the environment\n  specifications in `Env`.\n\n  `Env` is to be a list of tuples `{Name, Val}`, where `Name` is a `t:os:env_var_name/0`\n  representing the name of an environment variable, and `Val` is a `t:os:env_var_name/0`\n  representing the value it is to have in the spawned port process. Both `Name` and `Val` must\n  be strings.\n\n  If `Val` is set to the atom `false` or the empty string (that is `\"\"` or `[]`), open_port\n  will consider those variables unset just as if `os:unsetenv/1` had been called.\n\n  For information about encoding requirements, see documentation of the types\n  for `Name` and `Val`.\n\n- **`{args, [ string() | binary() ]}`** - Only valid for\n  `{spawn_executable, FileName}` and specifies arguments to the executable. Each\n  argument is specified as a separate string and (on Unix) eventually ends up as\n  one element each in the argument vector. On other platforms, a similar\n  behavior is mimicked.\n\n  The arguments are not expanded by the shell before they are supplied to the\n  executable. Most notably this means that file wildcard expansion does not\n  occur. To expand wildcards for the arguments, use `filelib:wildcard/1`. Notice\n  that even if the program is a Unix shell script, meaning that the shell\n  ultimately is invoked, wildcard expansion does not occur, and the script is\n  provided with the untouched arguments. On Windows, wildcard expansion is\n  always up to the program itself, therefore this is not an issue.\n\n  The executable name (also known as `argv[0]`) is not to be specified in this\n  list. The proper executable name is automatically used as `argv[0]`, where\n  applicable.\n\n  If you explicitly want to set the program name in the argument vector, option\n  `arg0` can be used.\n\n- **`{arg0, string() | binary()}`** - Only valid for\n  `{spawn_executable, FileName}` and explicitly specifies the program name\n  argument when running an executable. This can in some circumstances, on some\n  OSs, be desirable. How the program responds to this is highly system-dependent\n  and no specific effect is guaranteed.\n\n- **`exit_status`** - Only valid for `{spawn, Command}`, where `Command` refers\n  to an external program, and for `{spawn_executable, FileName}`.\n\n  When the external process connected to the port exits, a message of the form\n  `{Port,{exit_status,Status}}` is sent to the connected process, where `Status`\n  is the exit status of the external process. If the program aborts on Unix, the\n  same convention is used as the shells do (that is, 128+signal).\n\n  If option `eof` is specified also, the messages `eof` and `exit_status` appear\n  in an unspecified order.\n\n- **`use_stdio`** - Only valid for `{spawn, Command}` and\n  `{spawn_executable, FileName}`. It allows the standard input and output (file\n  descriptors 0 and 1) of the spawned (Unix) process for communication with\n  Erlang.\n\n- **`nouse_stdio`** - The opposite of `use_stdio`. It uses file descriptors 3\n  and 4 for communication with Erlang.\n\n- **`stderr_to_stdout`** - Affects ports to external programs. The executed\n  program gets its standard error file redirected to its standard output file.\n  `stderr_to_stdout` and `nouse_stdio` are mutually exclusive.\n\n- **`overlapped_io`** - Affects ports to external programs on Windows only. The\n  standard input and standard output handles of the port program are, if this\n  option is supplied, opened with flag `FILE_FLAG_OVERLAPPED`, so that the port\n  program can (and must) do overlapped I/O on its standard handles. This is not\n  normally the case for simple port programs, but an option of value for the\n  experienced Windows programmer. _On all other platforms, this option is\n  silently discarded._\n\n- **`in`** - The port can only be used for input.\n\n- **`out`** - The port can only be used for output.\n\n- **`binary`** - All I/O from the port is binary data objects as opposed to\n  lists of bytes.\n\n- **`eof`** - The port is not closed at the end of the file and does not produce\n  an exit signal. Instead, it remains open and a `{Port, eof}` message is sent\n  to the process holding the port.\n\n- **`hide`** - When running on Windows, suppresses creation of a new console\n  window when spawning the port program. (This option has no effect on other\n  platforms.)\n\n- **`{parallelism, Boolean}`** - [](){: #open_port_parallelism } Sets scheduler\n  hint for port parallelism. If set to `true`, the virtual machine schedules\n  port tasks; when doing so, it improves parallelism in the system. If set to\n  `false`, the virtual machine tries to perform port tasks immediately,\n  improving latency at the expense of parallelism. The default can be set at\n  system startup by passing command-line argument [`+spp`](erl_cmd.md#%2Bspp) to\n  [erl](erl_cmd.md).\n\n- **`{busy_limits_port, {Low, High} | disabled}`** - Sets limits that will be\n  used for controlling the busy state of the port.\n\n  When the ports internal output queue size becomes larger than or equal to\n  `High` bytes, it enters the busy state. When it becomes less than `Low` bytes\n  it leaves the busy state. When the port is in the busy state, processes\n  sending commands to it will be suspended until the port leaves the busy state.\n  Commands are in this context either `Port ! {Owner, {command, Data}}` or\n  `port_command/[2,3]`.\n\n  The `Low` limit is automatically adjusted to the same as `High` if it is set\n  larger then `High`. Valid range of values for `Low` and `High` is\n  `[1, (1 bsl (8*erlang:system_info(wordsize)))-2]`. If the atom `disabled` is\n  passed, the port will never enter the busy state.\n\n  The defaults are `Low = 4096` and `High = 8192`.\n\n  _Note_ that this option is only valid when spawning an executable (port\n  program) by opening the spawn driver and when opening the `fd` driver. This\n  option will cause a failure with a `badarg` exception when opening other\n  drivers.\n\n- **`{busy_limits_msgq, {Low, High} | disabled}`** - Sets limits that will be\n  used for controlling the busy state of the port message queue.\n\n  When the ports message queue size becomes larger than or equal to `High` bytes\n  it enters the busy state. When it becomes less than `Low` bytes it leaves the\n  busy state. When the port message queue is in the busy state, processes\n  sending commands to it will be suspended until the port message queue leaves\n  the busy state. Commands are in this context either\n  `Port ! {Owner, {command, Data}}` or `port_command/[2,3]`.\n\n  The `Low` limit is automatically adjusted to the same as `High` if it is set\n  larger then `High`. Valid range of values for `Low` and `High` is\n  `[1, (1 bsl (8*erlang:system_info(wordsize)))-2]`. If the atom `disabled` is\n  passed, the port message queue will never enter the busy state.\n\n  _Note_ that if the driver statically has disabled the use of this feature, a\n  failure with a `badarg` exception will be raised unless this option also is\n  set to `disable` or not passed at all.\n\n  The defaults are `Low = 4096` and `High = 8192` unless the driver itself does\n  modifications of these values.\n\n  _Note_ that the driver might fail if it also adjust these limits by itself and\n  you have disabled this feature.\n\n  The spawn driver (used when spawning an executable) and the `fd` driver do not\n  disable this feature and do not adjust these limits by themselves.\n\n  For more information see the documentation\n  [`erl_drv_busy_msgq_limits()`](erl_driver.md#erl_drv_busy_msgq_limits).\n\nDefault is `stream` for all port types and `use_stdio` for spawned ports.\n\nFailure: if the port cannot be opened, the exit reason is `badarg`,\n`system_limit`, or the POSIX error code that most closely describes the error,\nor `einval` if no POSIX code is appropriate:\n\n- **`badarg`** - Bad input arguments to `open_port`.\n\n- **`system_limit`** - All available ports in the Erlang emulator are in use.\n\n- **`enomem`** - Not enough memory to create the port.\n\n- **`eagain`** - No more available OS processes.\n\n- **`enametoolong`** - Too long external command.\n\n- **`emfile`** - No more available file descriptors (for the OS process that the\n  Erlang emulator runs in).\n\n- **`enfile`** - Full file table (for the entire OS).\n\n- **`eacces`** - `Command` specified in `{spawn_executable, Command}` does not\n  point out an executable file.\n\n- **`enoent`** - `FileName` specified in `{spawn_executable, FileName}` does not\n  point out an existing file.\n\nDuring use of a port opened using `{spawn, Name}`, `{spawn_driver, Name}`, or\n`{spawn_executable, Name}`, errors arising when sending messages to it are\nreported to the owning process using signals of the form\n`{'EXIT', Port, PosixCode}`. For the possible values of `PosixCode`, see\n`m:file`.\n\nThe maximum number of ports that can be open at the same time can be configured\nby passing command-line flag [`+Q`](erl_cmd.md#max_ports) to [erl](erl_cmd.md).","ref":"erlang.html#open_port/2"},{"type":"function","title":"erlang.phash2/1","doc":"Equivalent to  phash2(Term, Range) .","ref":"erlang.html#phash2/1"},{"type":"function","title":"erlang.phash2/2","doc":"Returns a hash value for `Term`.\n\nThe hash value for the same Erlang term is guaranteed to be the same\nregardless of machine architecture and ERTS version.\n\nThe function returns a hash value for `Term` within the range\n`0..Range-1`. The maximum value for `Range` is 2^32. When without argument\n`Range`, a value in the range 0..2^27-1 is returned.\n\nThis BIF is always to be used for hashing terms. It distributes small\nintegers better than [`phash/2`](`phash/2`), and it is faster for\nlarge integers and binaries.\n\nNotice that the range `0..Range-1` is different from the range of\n[`phash/2`](`phash/2`), which is `1..Range`.","ref":"erlang.html#phash2/2"},{"type":"function","title":"Examples - erlang.phash2/2","doc":"```erlang\n1> erlang:phash2({a,b,c}, 1_000).\n870\n2> erlang:phash2(41, 1_000).\n297\n3> erlang:phash2(42, 1_000).\n368\n4> erlang:phash2(43, 1_000).\n725\n```","ref":"erlang.html#phash2/2-examples"},{"type":"function","title":"erlang.phash/2","doc":"> #### Warning {: .warning }\n>\n> This function is deprecated as [`erlang:phash2/2`](`phash2/2`) should be used\n> for new code. Note that `erlang:phash(X,N)` is not necessary equal to\n> `erlang:phash2(X,N)`\n\nPortable hash function that gives the same hash for the same Erlang term\nregardless of machine architecture and ERTS version (the BIF was introduced in\nERTS 4.9.1.1). The function returns a hash value for `Term` within the range\n`1..Range`. The maximum value for `Range` is 2^32.","ref":"erlang.html#phash/2"},{"type":"type","title":"erlang.pid/0","doc":"An Erlang [process identifier](`e:system:data_types.md#pid`).","ref":"erlang.html#t:pid/0"},{"type":"function","title":"erlang.pid_to_list/1","doc":"Returns a string corresponding to the text representation of `Pid`.\n\n> #### Note {: .info }\n>\n> The [creation](erl_dist_protocol.md) for the node is not included in the list\n> representation of `Pid`. This means that processes in different incarnations\n> of a node with a specific name can get the same list representation.","ref":"erlang.html#pid_to_list/1"},{"type":"function","title":"Examples - erlang.pid_to_list/1","doc":"```erlang\n> erlang:pid_to_list(self()).\n\"<0.85.0>\"\n```","ref":"erlang.html#pid_to_list/1-examples"},{"type":"type","title":"erlang.port/0","doc":"An Erlang [port identifier](`e:system:data_types.md#port-identifier`).","ref":"erlang.html#t:port/0"},{"type":"function","title":"erlang.port_call/3","doc":"Performs a synchronous call to a port. The meaning of `Operation` and `Data`\ndepends on the port, that is, on the port driver. Not all port drivers support\nthis feature.\n\n`Port` is a port identifier, referring to a driver.\n\n`Operation` is an integer, which is passed on to the driver.\n\n`Data` is any Erlang term. This data is converted to binary term format and sent\nto the port.\n\nReturns a term from the driver. The meaning of the returned data also depends on\nthe port driver.\n\nFailures:\n\n- **`badarg`** - If `Port` is not an identifier of an open port, or the\n  registered name of an open port. If the calling process was previously linked\n  to the closed port, identified by `Port`, the exit signal from the port is\n  guaranteed to be delivered before this `badarg` exception occurs.\n\n- **`badarg`** - If `Operation` does not fit in a 32-bit integer.\n\n- **`badarg`** - If the port driver does not support synchronous control\n  operations.\n\n- **`badarg`** - If the port driver so decides for any reason (probably\n  something wrong with `Operation` or `Data`).\n\n  > #### Warning {: .warning }\n  >\n  > Do not call `port_call` with an unknown `Port` identifier and expect\n  > `badarg` exception. Any undefined behavior is possible (including node\n  > crash) depending on how the port driver interprets the supplied arguments.","ref":"erlang.html#port_call/3"},{"type":"function","title":"erlang.port_close/1","doc":"Closes an open port. Roughly the same as `Port ! {self(), close}` except for the\nerror behavior (see below), being synchronous, and that the port does _not_\nreply with `{Port, closed}`.\n\nAny process can close a port with [`port_close/1`](`port_close/1`), not only the\nport owner (the connected process). If the calling process is linked to the port\nidentified by `Port`, the exit signal from the port is guaranteed to be delivered before\n[`port_close/1`](`port_close/1`) returns.\n\nFor comparison: `Port ! {self(), close}` only fails with `badarg` if `Port` does\nnot refer to a port or a process. If `Port` is a closed port, nothing happens.\nIf `Port` is an open port and the calling process is the port owner, the port\nreplies with `{Port, closed}` when all buffers have been flushed and the port\nreally closes. If the calling process is not the port owner, the _port owner_\nfails with `badsig`.\n\nNotice that any process can close a port using `Port ! {PortOwner, close}` as if\nit itself was the port owner, but the reply always goes to the port owner.\n\nAs from Erlang/OTP R16, `Port ! {PortOwner, close}` is truly asynchronous.\nNotice that this operation has always been documented as an asynchronous\noperation, while the underlying implementation has been synchronous.\n[`port_close/1`](`port_close/1`) is however still fully synchronous because of\nits error behavior.\n\nFailure: `badarg` if `Port` is not an identifier of an open port, or the\nregistered name of an open port. If the calling process was previously linked to\nthe closed port, identified by `Port`, the exit signal from the port is\nguaranteed to be delivered before this `badarg` exception occurs.","ref":"erlang.html#port_close/1"},{"type":"function","title":"erlang.port_command/2","doc":"Sends data to a port. Same as `Port ! {PortOwner, {command, Data}}` except for\nthe error behavior and being synchronous (see below).\n\nAny process can send data to a port with [`port_command/2`](`port_command/2`),\nnot only the port owner (the connected process).\n\nFor comparison: `Port ! {PortOwner, {command, Data}}` only fails with `badarg`\nif `Port` does not refer to a port or a process. If `Port` is a closed port, the\ndata message disappears without a sound. If `Port` is open and the calling\nprocess is not the port owner, the _port owner_ fails with `badsig`. The port\nowner fails with `badsig` also if `Data` is an invalid I/O list.\n\nNotice that any process can send to a port using\n`Port ! {PortOwner, {command, Data}}` as if it itself was the port owner.\n\nIf the port is busy, the calling process is suspended until the port is not busy\nany more.\n\nAs from Erlang/OTP R16, `Port ! {PortOwner, {command, Data}}` is truly\nasynchronous. Notice that this operation has always been documented as an\nasynchronous operation, while the underlying implementation has been\nsynchronous. [`port_command/2`](`port_command/2`) is however still fully\nsynchronous because of its error behavior.\n\nFailures:\n\n- **`badarg`** - If `Port` is not an identifier of an open port, or the\n  registered name of an open port. If the calling process was previously linked\n  to the closed port, identified by `Port`, the exit signal from the port is\n  guaranteed to be delivered before this `badarg` exception occurs.\n\n- **`badarg`** - If `Data` is an invalid I/O list.\n\n> #### Warning {: .warning }\n>\n> Do not send data to an unknown port. Any undefined behavior is possible\n> (including node crash) depending on how the port driver interprets the data.","ref":"erlang.html#port_command/2"},{"type":"function","title":"erlang.port_command/3","doc":"Sends data to a port. [`port_command(Port, Data, [])`](`port_command/3`) equals\n[`port_command(Port, Data)`](`port_command/2`).\n\nIf the port command is aborted, `false` is returned, otherwise `true`.\n\nIf the port is busy, the calling process is suspended until the port is not busy\nanymore.\n\n`Option`s:\n\n- **`force`** - The calling process is not suspended if the port is busy,\n  instead the port command is forced through. The call fails with a `notsup`\n  exception if the driver of the port does not support this. For more\n  information, see driver flag\n  [`ERL_DRV_FLAG_SOFT_BUSY`](driver_entry.md#driver_flags).\n\n- **`nosuspend`** - The calling process is not suspended if the port is busy,\n  instead the port command is aborted and `false` is returned.\n\n> #### Change {: .info }\n>\n> More options can be added in a future release.\n\nFailures:\n\n- **`badarg`** - If `Port` is not an identifier of an open port, or the\n  registered name of an open port. If the calling process was previously linked\n  to the closed port, identified by `Port`, the exit signal from the port is\n  guaranteed to be delivered before this `badarg` exception occurs.\n\n- **`badarg`** - If `Data` is an invalid I/O list.\n\n- **`badarg`** - If `OptionList` is an invalid option list.\n\n- **`notsup`** - If option `force` has been passed, but the driver of the port\n  does not allow forcing through a busy port.\n\n> #### Warning {: .warning }\n>\n> Do not send data to an unknown port. Any undefined behavior is possible\n> (including node crash) depending on how the port driver interprets the data.","ref":"erlang.html#port_command/3"},{"type":"function","title":"erlang.port_connect/2","doc":"Sets the port owner (the connected port) to `Pid`. Roughly the same as\n`Port ! {Owner, {connect, Pid}}` except for the following:\n\n- The error behavior differs, see below.\n- The port does _not_ reply with `{Port,connected}`.\n- `port_connect/1` is synchronous, see below.\n- The new port owner gets linked to the port.\n\nThe old port owner stays linked to the port and must call\n[`unlink(Port)`](`unlink/1`) if this is not desired. Any process can set the\nport owner to be any process with [`port_connect/2`](`port_connect/2`).\n\nFor comparison: `Port ! {self(), {connect, Pid}}` only fails with `badarg` if\n`Port` does not refer to a port or a process. If `Port` is a closed port,\nnothing happens. If `Port` is an open port and the calling process is the port\nowner, the port replies with `{Port, connected}` to the old port owner. Notice\nthat the old port owner is still linked to the port, while the new is not. If\n`Port` is an open port and the calling process is not the port owner, the _port\nowner_ fails with `badsig`. The port owner fails with `badsig` also if `Pid` is\nnot an existing local process identifier.\n\nNotice that any process can set the port owner using\n`Port ! {PortOwner, {connect, Pid}}` as if it itself was the port owner, but the\nreply always goes to the port owner.\n\nAs from Erlang/OTP R16, `Port ! {PortOwner, {connect, Pid}}` is truly\nasynchronous. Notice that this operation has always been documented as an\nasynchronous operation, while the underlying implementation has been\nsynchronous. [`port_connect/2`](`port_connect/2`) is however still fully\nsynchronous because of its error behavior.\n\nFailures:\n\n- **`badarg`** - If `Port` is not an identifier of an open port, or the\n  registered name of an open port. If the calling process was previously linked\n  to the closed port, identified by `Port`, the exit signal from the port is\n  guaranteed to be delivered before this `badarg` exception occurs.\n\n- **`badarg`** - If the process identified by `Pid` is not an existing local\n  process.","ref":"erlang.html#port_connect/2"},{"type":"function","title":"erlang.port_control/3","doc":"Performs a synchronous control operation on a port. The meaning of `Operation`\nand `Data` depends on the port, that is, on the port driver. Not all port\ndrivers support this control feature.\n\nReturns a list of integers in the range 0..255, or a binary, depending on the\nport driver. The meaning of the returned data also depends on the port driver.\n\nFailures:\n\n- **`badarg`** - If `Port` is not an open port or the registered name of an open\n  port.\n\n- **`badarg`** - If `Operation` cannot fit in a 32-bit integer.\n\n- **`badarg`** - If the port driver does not support synchronous control\n  operations.\n\n- **`badarg`** - If the port driver so decides for any reason (probably\n  something wrong with `Operation` or `Data`).\n  > #### Warning {: .warning }\n  >\n  > Do not call [`port_control/3`](`port_control/3`) with an unknown `Port`\n  > identifier and expect `badarg` exception. Any undefined behavior is possible\n  > (including node crash) depending on how the port driver interprets the\n  > supplied arguments.","ref":"erlang.html#port_control/3"},{"type":"function","title":"erlang.port_info/1","doc":"Returns a list containing tuples with information about `Port`, or `undefined`\nif the port is not open.\n\nThe order of the tuples is undefined, and all the tuples are not mandatory.\nIf the port is closed and the calling process was\npreviously linked to the port, the exit signal from the port is guaranteed to be\ndelivered before [`port_info/1`](`port_info/1`) returns `undefined`.\n\nThe result contains information about the following `Item`s:\n\n- `registered_name` (if the port has a registered name)\n- `id`\n- `connected`\n- `links`\n- `name`\n- `input`\n- `output`\n\nFor more information about the different `Item`s, see `port_info/2`.\n\nFailure: `badarg` if `Port` is not a local port identifier, or an atom.","ref":"erlang.html#port_info/1"},{"type":"function","title":"erlang.port_info/2","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2023-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\nReturns information about `Port`.\n\nIf the port identified by `Port` is not open, `undefined` is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before `port_info/2` returns `undefined`.\n\n`Item` is one of the following and can be used to get various information about the `Port`.\n\n- `connected` - returns `{connected, Pid}` where `Pid` is the process identifier of the process connected to the port.\n- `id` - returns `{id, Index}` where `Index` is the internal index of the port. This index can be used to separate ports.\n- `input` - returns `{input, Bytes}` where `Bytes` is the total number of bytes read from the port.\n- `links` - returns `{links, Pids}` where `Pids` is a list of the process identifiers of the processes that the port is linked to.\n- `locking` - returns `{locking, Locking}` where `Locking` is one of the following:\n  * `port_level` (port-specific locking)\n  * `driver_level` (driver-specific locking)\n  Notice that these results are highly implementation-specific and can change in a future release.\n  \n  Since: OTP R16B\n- `memory` {: #port_info_memory } - returns `{memory, Bytes}` where `Bytes` is the total number of bytes allocated for this port by the runtime system. The port itself can have allocated memory that is not included in `Bytes`.\n  \n  Since: OTP R16B\n- `monitors` - returns `{monitors, Monitors}` where `Monitors` represent processes monitored by this port.\n  \n  Since: OTP R16B\n- `monitored_by` - returns `{monitored_by, MonitoredBy}` where `MonitoredBy` is a list of pids that are monitoring given port at the moment.\n  \n  Since: OTP 19.0\n- `name` - returns `{name, Name}` where `Name` is the command name set by `open_port/2`.\n- `os_pid` - returns `{os_pid, OsPid}` where `OsPid` is the process identifier (or equivalent) of an OS process created with [`open_port({spawn | spawn_executable, Command}, Options)`](`open_port/2`). If the port is not the result of spawning an OS process, the value is `undefined`.\n  \n  Since: OTP R16B\n- `output` - returns `{output, Bytes}` where `Bytes` is the total number of bytes written to the port from Erlang processes using `port_command/2`, `port_command/3`, or `Port ! {Owner, {command, Data}`.\n- `parallelism` - returns `{parallelism, Boolean}` where `Boolean` corresponds to the port parallelism hint used by this port. For more information, see option [`parallelism`](`m:erlang#open_port_parallelism`) of `open_port/2`.\n  \n  Since: OTP R16B\n- `queue_size` - returns `{queue_size, Bytes}` where `Bytes` is the total number of bytes queued by the port using the ERTS driver queue implementation.\n  \n  Since: OTP R16B\n- `registered_name` - returns `{registered_name, RegisteredName}` where `RegisteredName` is the registered name of the port. If the port has no registered name, `[]` is returned.\n\nFailure: `badarg` if `Port` is not a local port identifier, or an atom.","ref":"erlang.html#port_info/2"},{"type":"function","title":"erlang.port_to_list/1","doc":"Returns a string corresponding to the text representation of the port identifier\n`Port`.","ref":"erlang.html#port_to_list/1"},{"type":"function","title":"erlang.ports/0","doc":"Returns a list of port identifiers corresponding to all the ports existing on\nthe local node.\n\nNotice that an exiting port exists, but is not open.","ref":"erlang.html#ports/0"},{"type":"type","title":"erlang.pos_integer/0","doc":"An integer greater than zero.","ref":"erlang.html#t:pos_integer/0"},{"type":"function","title":"erlang.pre_loaded/0","doc":"Returns a list of Erlang modules that are preloaded in the run-time system.\n\nPre-loaded modules are Erlang modules that are needed to bootstrap the system to\nload the first Erlang modules from either disk or by using `m:erl_boot_server`.","ref":"erlang.html#pre_loaded/0"},{"type":"opaque","title":"erlang.prepared_code/0","doc":"","ref":"erlang.html#t:prepared_code/0"},{"type":"type","title":"erlang.priority_level/0","doc":"Process priority level. For more info see\n[`process_flag(priority, Level)`](#process_flag_priority)","ref":"erlang.html#t:priority_level/0"},{"type":"function","title":"erlang.process_display/2","doc":"Writes information about the local process `Pid` on [standard error](`t:io:standard_error/0`).\n\nThe only allowed value for the atom `Type` is `backtrace`, which shows the contents of\nthe call stack, including information about the call chain, with the current\nfunction printed first. The format of the output is not further defined.","ref":"erlang.html#process_display/2"},{"type":"function","title":"erlang.process_flag/2","doc":"Sets the process flag indicated to the specified value. Returns the previous value\nof the flag.\n\n`Flag` is one of the following:\n\n- ```erlang\n  process_flag(async_dist, boolean())\n  ```\n  {: #process_flag_async_dist }\n  \n  Enable or disable _fully asynchronous distributed signaling_ for the calling\n  process. When disabled, which is the default, the process sending a distributed\n  signal will block in the send operation if the buffer for the distribution\n  channel reach the [distribution buffer busy limit](erl_cmd.md#%2Bzdbbl). The\n  process will remain blocked until the buffer shrinks enough. This might in some\n  cases take a substantial amount of time. When `async_dist` is enabled, send\n  operations of distributed signals will always buffer the signal on the outgoing\n  distribution channel and then immediately return. That is, these send operations\n  will _never_ block the sending process.\n  \n  > #### Note {: .info }\n  >\n  > Since no flow control is enforced by the runtime system when `async_dist`\n  > process flag is enabled, you need to make sure that flow control for such data\n  > is implemented, or that the amount of such data is known to always be limited.\n  > Unlimited signaling with `async_dist` enabled in the absence of flow control\n  > will typically cause the sending runtime system to crash on an out of memory\n  > condition.\n  \n  Blocking due to disabled `async_dist` can be monitored by\n  [`trace:system()`](`trace:system/3`) using the\n  [`busy_dist_port`](`m:trace#busy_dist_port`) option. Only data buffered by\n  processes which (at the time of sending a signal) have disabled `async_dist`\n  will be counted when determining whether or not an operation should block the\n  caller.\n  \n  The `async_dist` flag can also be set on a new process when spawning it using\n  the [`spawn_opt()`](`spawn_opt/4`) BIF with the option\n  [`{async_dist, Enable}`](#spawn_opt_async_dist). The default\n  `async_dist` flag to use on newly spawned processes can be set by passing the\n  command line argument [`+pad  `](erl_cmd.md#%2Bpad) when starting the\n  runtime system. If the `+pad  ` command line argument is not passed, the\n  default value of the `async_dist` flag will be `false`.\n  \n  You can inspect the state of the `async_dist` process flag of a process by\n  calling [`process_info(Pid, async_dist)`](#process_info_async_dist).\n  \n- ```erlang\n  process_flag(trap_exit, boolean())\n  ```\n  {: #process_flag_trap_exit }\n  \n  When `trap_exit` is set to `true`, exit signals arriving to a process are\n  converted to `{'EXIT', From, Reason}` messages, which can be received as\n  ordinary messages. If `trap_exit` is set to `false`, the process exits if it\n  receives an exit signal other than `normal` and the exit signal is propagated to\n  its linked processes. Application processes are normally not to trap exits.\n  \n  See also `exit/2`.\n  \n- ```erlang\n  process_flag(error_handler, module())\n  ```\n  {: #process_flag_error_handler }\n  \n  Used by a process to redefine the `m:error_handler` for undefined function calls and\n  undefined registered processes. Use this flag with substantial caution, as code\n  auto-loading depends on the correct operation of the error handling module.\n  \n- ```erlang\n  process_flag(fullsweep_after,  non_neg_integer())\n  ```\n  \n  Changes the maximum number of generational collections before forcing a\n  fullsweep for the calling process.\n  \n- ```erlang\n  process_flag(min_heap_size, non_neg_integer())\n  ```\n  {: #process_flag_min_heap_size }\n  \n  Changes the minimum heap size for the calling process.\n  \n- ```erlang\n  process_flag(min_bin_vheap_size, non_neg_integer())\n  ```\n  \n  Changes the minimum binary virtual heap size for the calling process.\n  \n- ```erlang\n  process_flag(max_heap_size, max_heap_size())\n  ```\n  {: #process_flag_max_heap_size }\n  \n  This flag sets the maximum heap size for the calling process. If `MaxHeapSize`\n  is an integer, the system default values for `kill` and `error_logger` are used.\n  \n  For details on how the heap grows, see\n  [Sizing the heap](GarbageCollection.md#sizing-the-heap) in the ERTS internal\n  documentation.\n  \n  - **`size`** - The maximum size in words of the process. If set to zero, the\n    heap size limit is disabled. `badarg` is be thrown if the value is smaller\n    than [`min_heap_size`](#process_flag_min_heap_size). The size check\n    is only done when a garbage collection is triggered.\n  \n    `size` is the entire heap of the process when garbage collection is triggered.\n    This includes all generational heaps, the process stack, any\n    [messages that are considered to be part of the heap](#process_flag_message_queue_data),\n    and any extra memory that the garbage collector needs during collection.\n  \n    `size` is the same as can be retrieved using\n    [`erlang:process_info(Pid, total_heap_size)`](#process_info_total_heap_size),\n    or by adding `heap_block_size`, `old_heap_block_size` and `mbuf_size` from\n    [`erlang:process_info(Pid, garbage_collection_info)`](#process_info_garbage_collection_info).\n  \n  - **`kill`** - When set to `true`, the runtime system sends an untrappable exit\n    signal with reason `kill` to the process if the maximum heap size is reached.\n    The garbage collection that triggered the `kill` is not completed, instead the\n    process exits as soon as possible. When set to `false`, no exit signal is sent\n    to the process, instead it continues executing.\n  \n    If `kill` is not defined in the map, the system default will be used. The\n    default system default is `true`. It can be changed by either option\n    [\\+hmaxk](erl_cmd.md#%2Bhmaxk) in [erl](erl_cmd.md), or\n    [`erlang:system_flag(max_heap_size, MaxHeapSize)`](#system_flag_max_heap_size).\n  \n  - **`error_logger`** - When set to `true`, the runtime system logs an error\n    event via `m:logger`, containing details about the process when the maximum\n    heap size is reached. One log event is sent each time the limit is reached.\n  \n    If `error_logger` is not defined in the map, the system default is used. The\n    default system default is `true`. It can be changed by either the option\n    [\\+hmaxel](erl_cmd.md#%2Bhmaxel) int [erl](erl_cmd.md), or\n    [`erlang:system_flag(max_heap_size, MaxHeapSize)`](#system_flag_max_heap_size).\n  \n  - **`include_shared_binaries`** - When set to `true`, off-heap binaries are\n    included in the total sum compared against the `size` limit. Off-heap binaries\n    are typically larger binaries that may be shared between processes. The size\n    of a shared binary is included by all processes that are referring it. Also,\n    the entire size of a large binary may be included even if only a smaller part\n    of it is referred by the process.\n  \n    If `include_shared_binaries` is not defined in the map, the system default is\n    used. The default system default is `false`. It can be changed by either the\n    option [\\+hmaxib](erl_cmd.md#%2Bhmaxib) in [erl](erl_cmd.md), or\n    [`erlang:system_flag(max_heap_size, MaxHeapSize)`](#system_flag_max_heap_size).\n  \n  The heap size of a process is quite hard to predict, especially the amount of\n  memory that is used during the garbage collection. When contemplating using this\n  option, it is recommended to first run it in production with `kill` set to\n  `false` and inspect the log events to see what the normal peak sizes of the\n  processes in the system is and then tune the value accordingly.\n  \n- ```erlang\n  process_flag(message_queue_data, message_queue_data())\n  ```\n  {: #process_flag_message_queue_data }\n  \n  Determines how messages in the message queue are stored, as follows:\n  \n  - **`off_heap`** - _All_ messages in the message queue will be stored outside\n    the process heap. This implies that _no_ messages in the message queue will be\n    part of a garbage collection of the process.\n  \n  - **`on_heap`** - All messages in the message queue will eventually be placed on\n    the process heap. They can, however, be temporarily stored off the heap. This\n    is how messages have always been stored up until ERTS 8.0.\n  \n  The default value of the `message_queue_data` process flag is determined by the\n  command-line argument [`+hmqd`](erl_cmd.md#%2Bhmqd) in [erl](erl_cmd.md).\n  \n  If the process may potentially accumulate a large number of messages in its\n  queue it is recommended to set the flag value to `off_heap`. This is due to the\n  fact that the garbage collection of a process that has a large number of\n  messages stored on the heap can become extremely expensive and the process can\n  consume large amounts of memory. The performance of the actual message passing\n  is, however, generally better when the flag value is `on_heap`.\n  \n  Changing the flag value causes any existing messages to be moved. The move\n  operation is initiated, but not necessarily completed, by the time the function\n  returns.\n  \n- ```erlang\n  process_flag(priority, priority_level())\n  ```\n  {: #process_flag_priority }\n  \n  Sets the process priority. `Level` is an atom. Four priority levels exist:\n  `low`, `normal`, `high`, and `max`. Default is `normal`.\n  \n  > #### Note {: .info }\n  >\n  > Priority level `max` is reserved for internal use in the Erlang runtime\n  > system, and is _not_ to be used by others.\n  \n  Internally in each priority level, processes are scheduled in a round robin\n  fashion.\n  \n  Execution of processes on priority `normal` and `low` are interleaved. Processes\n  on priority `low` are selected for execution less frequently than processes on\n  priority `normal`.\n  \n  When runnable processes on priority `high` exist, no processes on priority `low`\n  or `normal` are selected for execution. Notice however that this does _not_ mean\n  that no processes on priority `low` or `normal` can run when processes are\n  running on priority `high`. When using multiple schedulers, more processes can\n  be running in parallel than processes on priority `high`. That is, a `low` and a\n  `high` priority process can execute at the same time.\n  \n  When runnable processes on priority `max` exist, no processes on priority `low`,\n  `normal`, or `high` are selected for execution. As with priority `high`,\n  processes on lower priorities can execute in parallel with processes on priority\n  `max`.\n  \n  Scheduling is pre-emptive. Regardless of priority, a process is pre-empted when\n  it has consumed more than a certain number of reductions since the last time it\n  was selected for execution.\n  \n  > #### Note {: .info }\n  >\n  > Do not depend on the scheduling to remain exactly as it is today. Scheduling\n  > is likely to be changed in a future release to use available processor cores\n  > better.\n  \n  There is _no_ automatic mechanism for avoiding priority inversion, such as\n  priority inheritance or priority ceilings. When using priorities, take this into\n  account and handle such scenarios by yourself.\n  \n  Making calls from a `high` priority process into code that you has no control\n  over can cause the `high` priority process to wait for a process with lower\n  priority. That is, effectively decreasing the priority of the `high` priority\n  process during the call. Even if this is not the case with one version of the\n  code that you have no control over, it can be the case in a future version of\n  it. This can, for example, occur if a `high` priority process triggers code\n  loading, as the code server runs on priority `normal`.\n  \n  Other priorities than `normal` are normally not needed. When other priorities\n  are used, use them with care, _especially_ priority `high`. A process on\n  priority `high` is only to perform work for short periods. Busy looping for long\n  periods in a `high` priority process causes most likely problems, as important\n  OTP servers run on priority `normal`.\n  \n- ```erlang\n  process_flag(save_calls, 0..10000)\n  ```\n  \n  `N` must be an integer in the interval 0..10000. If `N` > 0, call saving is made\n  active for the process. This means that information about the `N` most recent\n  global function calls, BIF calls, sends, and receives made by the process are\n  saved in a list, which can be retrieved with\n  [`process_info(Pid, last_calls)`](`process_info/2`). A global function call is\n  one in which the module of the function is explicitly mentioned. Only a fixed\n  amount of information is saved, as follows:\n  \n  - A tuple `{Module, Function, Arity}` for function calls\n  - The atoms `send`, `'receive'`, and `timeout` for sends and receives\n    (`'receive'` when a message is received and `timeout` when a receive times\n    out)\n  \n  If `N` = 0, call saving is disabled for the process, which is the default.\n  Whenever the size of the call saving list is set, its contents are reset.\n  \n- ```erlang\n  process_flag(sensitive, boolean())\n  ```\n  \n  Sets or clears flag `sensitive` for the current process. When a process has been\n  marked as sensitive by calling\n  [`process_flag(sensitive, true)`](`process_flag/2`), features in the runtime\n  system that can be used for examining the data or inner working of the process\n  are silently disabled.\n  \n  Features that are disabled include (but are not limited to) the following:\n  \n  - Tracing. Trace flags can still be set for the process, but no trace messages\n    of any kind are generated. (If flag `sensitive` is turned off, trace messages\n    are again generated if any trace flags are set.)\n  - Sequential tracing. The sequential trace token is propagated as usual, but no\n    sequential trace messages are generated.\n  \n  `process_info/1,2` cannot be used to read out the message queue or the process\n  dictionary (both are returned as empty lists).\n  \n  Stack back-traces cannot be displayed for the process.\n  \n  In crash dumps, the stack, messages, and the process dictionary are omitted.\n  \n  If `{save_calls,N}` has been set for the process, no function calls are saved to\n  the call saving list. (The call saving list is not cleared. Also, send, receive,\n  and time-out events are still added to the list.)","ref":"erlang.html#process_flag/2"},{"type":"function","title":"erlang.process_flag/3","doc":"Sets certain flags for the process `Pid`, in the same manner as\n`process_flag/2`. Returns the old value of the flag. The valid values for `Flag`\nare only a subset of those allowed in [`process_flag/2`](`process_flag/2`),\nnamely `save_calls`.\n\nFailure: `badarg` if `Pid` is not a local process.","ref":"erlang.html#process_flag/3"},{"type":"function","title":"erlang.process_info/1","doc":"Returns a list containing `InfoTuple`s with miscellaneous information about the\nprocess identified by `Pid`, or `undefined` if the process is not alive.\n\nThe order of the `InfoTuple`s is undefined and all `InfoTuple`s are not\nmandatory. The `InfoTuple`s part of the result can be changed without prior\nnotice.\n\nThe `InfoTuple`s with the following items are part of the result:\n\n- `current_function`\n- `initial_call`\n- `status`\n- `message_queue_len`\n- `links`\n- `dictionary`\n- `trap_exit`\n- `error_handler`\n- `priority`\n- `group_leader`\n- `total_heap_size`\n- `heap_size`\n- `stack_size`\n- `reductions`\n- `garbage_collection`\n\nIf the process identified by `Pid` has a registered name, also an `InfoTuple`\nwith item `registered_name` is included.\n\nFor information about specific `InfoTuple`s, see `process_info/2`.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for _debugging only_. For all other purposes, use\n> `process_info/2`.\n\nFailure: `badarg` if `Pid` is not a local process.","ref":"erlang.html#process_info/1"},{"type":"function","title":"erlang.process_info/2","doc":"Returns information about the process identified by `Pid`, as specified by\n`Item` or `ItemList`. Returns `undefined` if the process is not alive.\n\nIf the process is alive and a single `Item` is specified, the returned value is\nthe corresponding `InfoTuple`, unless `Item =:= registered_name` and the process\nhas no registered name. In this case, `[]` is returned. This strange behavior is\nbecause of historical reasons, and is kept for backward compatibility.\n\nIf `ItemList` is specified, the result is `InfoTupleList`. The `InfoTuple`s in\n`InfoTupleList` are included with the corresponding `Item`s in the same order as\nthe `Item`s were included in `ItemList`. Valid `Item`s can be included multiple\ntimes in `ItemList`.\n\nGetting process information follows the signal ordering guarantees described in\nthe [Processes Chapter](`e:system:ref_man_processes.md#signals`) in the _Erlang\nReference Manual_.\n\n> #### Note {: .info }\n>\n> If `registered_name` is part of `ItemList` and the process has no name\n> registered, a `{registered_name, []}`, `InfoTuple` _will_ be included in the\n> resulting `InfoTupleList`. This behavior is different when a single\n> `Item =:= registered_name` is specified, and when\n> [`process_info/1`](`process_info/1`) is used.\n\nValid `InfoTuple`s with corresponding `Item`s:\n\n- **`{async_dist, Enabled}`{: #process_info_async_dist }** - Current value of the\n  [`async_dist`](#process_flag_async_dist) process flag.\n\n  Since: OTP 25.3\n\n- **`{backtrace, Bin}`** - Binary `Bin` contains the same information as the\n  output from `erlang:process_display(Pid, backtrace)`. Use\n  [`binary_to_list/1`](`binary_to_list/1`) to obtain the string of characters\n  from the binary.\n\n- **`{binary, BinInfo}`** - `BinInfo` is a list containing miscellaneous\n  information about binaries on the heap of this process. This `InfoTuple` can\n  be changed or removed without prior notice. In the current implementation\n  `BinInfo` is a list of tuples. The tuples contain; `BinaryId`, `BinarySize`,\n  `BinaryRefcCount`.\n\n  Depending on the value of the\n  [`message_queue_data`](#process_flag_message_queue_data) process\n  flag the message queue may be stored on the heap.\n\n- **`{catchlevel, CatchLevel}`** - `CatchLevel` is the number of currently\n  active catches in this process. This `InfoTuple` can be changed or removed\n  without prior notice.\n\n- **`{current_function, {Module, Function, Arity} | undefined}`** - `Module`,\n  `Function`, `Arity` is the current function call of the process. The value\n  `undefined` can be returned if the process is currently executing native\n  compiled code.\n\n- **`{current_location, {Module, Function, Arity, Location}}`** - `Module`,\n  `Function`, `Arity` is the current function call of the process. `Location` is\n  a list of two-tuples describing the location in the source code.\n\n- **`{current_stacktrace, Stack}`**{: #process_info_current_stacktrace } -\n  Returns the current call stack back-trace\n  (_stacktrace_) of the process. The stack has the same format as in the `catch`\n  part of a `try`. See\n  [The call-stack back trace (stacktrace)](`e:system:errors.md#stacktrace`). The\n  depth of the stacktrace is truncated according to the `backtrace_depth` system\n  flag setting.\n\n- **`{dictionary, Dictionary}`** - `Dictionary` is the process dictionary.\n\n- **`{{dictionary, Key}, Value}`** - `Value` associated with `Key` in the\n  process dictionary.\n\n- **`{error_handler, Module}`** - `Module` is the `m:error_handler` module used by\n  the process (for undefined function calls, for example).\n\n- **`{garbage_collection, GCInfo}`** - `GCInfo` is a list containing\n  miscellaneous information about garbage collection for this process. The\n  content of `GCInfo` can be changed without prior notice.\n\n- **`{garbage_collection_info, GCInfo}`{: #process_info_garbage_collection_info }** -\n  `GCInfo` is a list containing miscellaneous detailed information about\n  garbage collection for this process. The content of `GCInfo` can be changed\n  without prior notice. For details about the meaning of each item, see\n  [`gc_minor_start`](`m:trace#gc_minor_start`) in `trace:process/4`.\n\n- **`{group_leader, GroupLeader}`** - `GroupLeader` is the group leader for the\n  I/O of the process.\n\n- **`{heap_size, Size}`** - `Size` is the size in words of the youngest heap\n  generation of the process. This generation includes the process stack. This\n  information is highly implementation-dependent, and can change if the\n  implementation changes.\n\n- **`{initial_call, {Module, Function, Arity}}`** - `Module`, `Function`,\n  `Arity` is the initial function call with which the process was spawned.\n\n- **`{links, PidsAndPorts}`** - `PidsAndPorts` is a list of process identifiers\n  and port identifiers, with processes or ports to which the process has a link.\n\n- **`{label, Label}`** -\n  `Label` is the label for the process. See `proc_lib:get_label/1`.\n\n   Since: OTP 27.2\n\n- **`{last_calls, false|Calls}`** - The value is `false` if call saving is not\n  active for the process (see `process_flag/3`). If call saving is active, a\n  list is returned, in which the last element is the most recent called.\n\n- **`{memory, Size}`** - [](){: #process_info_memory } `Size` is the size in\n  bytes of the process. This includes call stack, heap, and internal structures.\n\n- **`{message_queue_len, MessageQueueLen}`** - `MessageQueueLen` is the number\n  of messages currently in the message queue of the process. This is the length\n  of the list `MessageQueue` returned as the information item `messages` (see\n  below).\n\n- **`{messages, MessageQueue}`** - `MessageQueue` is a list of the messages to\n  the process, which have not yet been processed.\n\n- **`{min_heap_size, MinHeapSize}`** - `MinHeapSize` is the minimum heap size\n  for the process.\n\n- **`{min_bin_vheap_size, MinBinVHeapSize}`** - `MinBinVHeapSize` is the minimum\n  binary virtual heap size for the process.\n\n- **`{monitored_by, MonitoredBy}`** - A list of identifiers for all the\n  processes, ports and NIF resources, that are monitoring the process.\n\n- **`{monitors, Monitors}`** - A list of monitors (started by\n  [`monitor/2`](`monitor/2`)) that are active for the process. For a local\n  process monitor or a remote process monitor by a process identifier, the list\n  consists of:\n\n  - **`{process, Pid}`** - Process is monitored by pid.\n\n  - **`{process, {RegName, Node}}`** - Local or remote process is monitored by\n    name.\n\n  - **`{port, PortId}`** - Local port is monitored by port id.\n\n  - **`{port, {RegName, Node}}`** - Local port is monitored by name. Please\n    note, that remote port monitors are not supported, so `Node` will always be\n    the local node name.\n\n- **`{message_queue_data, MQD}`** - `MQD` is the current value of the\n  `message_queue_data` process flag, which can be either `off_heap` or\n  `on_heap`. For more information, see the documentation of\n  [`process_flag(message_queue_data, MQD)`](#process_flag_message_queue_data).\n\n- **`{parent, Pid}`** - `Pid` is the identifier of the parent process, the one\n  that spawned current process. When the process does not have a parent\n  `undefined` is returned. Only the initial process (`init`) on a node lacks a\n  parent, though.\n\n  Since: OTP 25.0\n\n- **`{priority, Level}`** - `Level` is the current priority level for the\n  process. For more information on priorities, see\n  [`process_flag(priority, Level)`](#process_flag_priority).\n\n- **`{priority_messages, Enabled}`** - Since OTP 28.0\n\n  If `Enabled` equals `true`, the process has\n  [enabled priority message reception](`e:system:ref_man_processes.md#enable-prio-msg-recv`)\n  enabled priority message reception for at least one type of messages.\n\n  For more information see the\n  [_Adding Messages to the Message Queue_](`e:system:ref_man_processes.md#message-queue-order`)\n  section of the _Erlang Reference Manual_.\n\n\n- **`{reductions, Number}`** - `Number` is the number of reductions executed by\n  the process.\n\n- **`{registered_name, Atom}`** - `Atom` is the registered process name. If the\n  process has no registered name, this tuple is not present in the list.\n\n- **`{sequential_trace_token, [] | SequentialTraceToken}`** -\n  `SequentialTraceToken` is the sequential trace token for the process. This\n  `InfoTuple` can be changed or removed without prior notice.\n\n- **`{stack_size, Size}`** - `Size` is the stack size, in words, of the process.\n\n- **`{status, Status}`** - `Status` is the status of the process and is one of\n  the following:\n\n  - `exiting`\n  - `garbage_collecting`\n  - `waiting` (for a message)\n  - `running`\n  - `runnable` (ready to run, but another process is running)\n  - `suspended` (suspended on a \"busy\" port or by the BIF\n    `erlang:suspend_process/1,2`)\n\n- **`{suspending, SuspendeeList}`** - `SuspendeeList` is a list of\n  `{Suspendee, ActiveSuspendCount, OutstandingSuspendCount}` tuples. `Suspendee`\n  is the process identifier of a process that has been, or is to be, suspended\n  by the process identified by `Pid` through the BIF\n  [`erlang:suspend_process/2`](`suspend_process/2`) or\n  [`erlang:suspend_process/1`](`suspend_process/1`).\n\n  `ActiveSuspendCount` is the number of times `Suspendee` has been suspended by\n  `Pid`. `OutstandingSuspendCount` is the number of not yet completed suspend\n  requests sent by `Pid`, that is:\n\n  - If `ActiveSuspendCount =/= 0`, `Suspendee` is currently in the suspended\n    state.\n  - If `OutstandingSuspendCount =/= 0`, option `asynchronous` of\n    `erlang:suspend_process/2` has been used and the suspendee has not yet been\n    suspended by `Pid`.\n\n  Notice that `ActiveSuspendCount` and `OutstandingSuspendCount` are not the\n  total suspend count on `Suspendee`, only the parts contributed by `Pid`.\n\n- **`{total_heap_size, Size}`{: #process_info_total_heap_size }** - `Size` is\n  the total size, in words, of all heap fragments of the process. This includes\n  the process stack and any unreceived messages that are considered to be part\n  of the heap.\n\n- **`{trace, InternalTraceFlags}`** - `InternalTraceFlags` is an integer\n  representing the internal trace flag for this process. This `InfoTuple` can be\n  changed or removed without prior notice.\n\n- **`{trap_exit, Boolean}`** - `Boolean` is `true` if the process is trapping\n  exits, otherwise `false`.\n\nNotice that not all implementations support all these `Item`s.\n\nFailures:\n\n- **`badarg`** - If `Pid` is not a local process.\n\n- **`badarg`** - If `Item` is an invalid item.","ref":"erlang.html#process_info/2"},{"type":"type","title":"erlang.process_info_item/0","doc":"","ref":"erlang.html#t:process_info_item/0"},{"type":"type","title":"erlang.process_info_result_item/0","doc":"","ref":"erlang.html#t:process_info_result_item/0"},{"type":"function","title":"erlang.processes/0","doc":"Returns a list of process identifiers corresponding to all the processes\ncurrently existing on the local node.\n\nNotice that an exiting process exists, but is not alive. That is,\n[`is_process_alive/1`](`is_process_alive/1`) returns `false` for an exiting\nprocess, but its process identifier is part of the result returned from\n`processes/0`.\n\nExample:\n\n```erlang\n> processes().\n[<0.0.0>,<0.2.0>,<0.4.0>,<0.5.0>,<0.7.0>,<0.8.0>]\n```","ref":"erlang.html#processes/0"},{"type":"opaque","title":"erlang.processes_iter_ref/0","doc":"","ref":"erlang.html#t:processes_iter_ref/0"},{"type":"function","title":"erlang.processes_iterator/0","doc":"Returns a processes iterator that can be used in\n[`processes_next/1`](`processes_next/1`).","ref":"erlang.html#processes_iterator/0"},{"type":"function","title":"erlang.processes_next/1","doc":"Returns a 2-tuple, consisting of one process identifier and a new processes\niterator. If the process iterator has run out of processes in the process table,\n`none` will be returned.\n\nThe two major benefits of using the `processes_iterator/0`/`processes_next/1`\nBIFs instead of using the `processes/0` BIF are that they scale better since\nno locking is needed, and you do not risk getting a huge list allocated on the\nheap if there are a huge amount of processes alive in the system.\n\nExample:\n\n```erlang\n> I0 = erlang:processes_iterator(), ok.\nok\n> {Pid1, I1} = erlang:processes_next(I0), Pid1.\n<0.0.0>,\n> {Pid2, I2} = erlang:processes_next(I1), Pid2.\n<0.1.0>\n```\n\n> #### Note {: .info }\n>\n> This BIF has less consistency guarantee than [`processes/0`](`processes/0`).\n> Process identifiers returned from consecutive calls of this BIF may not be a\n> consistent snapshot of all elements existing in the table during any of the\n> calls. The process identifier of a process that is alive before\n> `processes_iterator/0` is called and continues to be alive until\n> `processes_next/1` returns `none` is guaranteed to be part of the result\n> returned from one of the calls to `processes_next/1`.","ref":"erlang.html#processes_next/1"},{"type":"function","title":"erlang.purge_module/1","doc":"Removes old code for `Module`. Before this BIF is used, `check_process_code/2`\nis to be called to check that no processes execute old code in the module.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for the code server (see `m:code`) and is not to be used\n> elsewhere.\n\n> #### Change {: .info }\n>\n> As from ERTS 8.0 (Erlang/OTP 19), any lingering processes that still execute\n> the old code is killed by this function. In earlier versions, such incorrect\n> use could cause much more fatal failures, like emulator crash.\n\nFailure: `badarg` if there is no old code for `Module`.","ref":"erlang.html#purge_module/1"},{"type":"function","title":"erlang.put/2","doc":"Adds a new `Key` to the process dictionary, associated with the value `Val`, and\nreturns `undefined`. If `Key` exists, the old value is deleted and replaced by\n`Val`, and the function returns the old value.\n\nThe average time complexity for the current implementation of this function is\nO(`1`) and the worst case time complexity is O(`N`), where `N` is the number of\nitems in the process dictionary.\n\nFor example:\n\n```erlang\n> X = put(name, walrus), Y = put(name, carpenter),\nZ = get(name),\n{X, Y, Z}.\n{undefined,walrus,carpenter}\n```\n\n> #### Note {: .info }\n>\n> The values stored when `put` is evaluated within the scope of a `catch` are\n> not retracted if a `throw` is evaluated, or if an error occurs.","ref":"erlang.html#put/2"},{"type":"function","title":"erlang.raise/3","doc":"Raises an exception of the specified class, reason, and call stack backtrace\n(_stacktrace_).\n\n`Class` is `error`, `exit`, or `throw`. So, if it were not for the stacktrace,\n`erlang:raise(Class, Reason, Stacktrace)` is equivalent to\n`erlang:Class(Reason)` (given that `Class` is a valid class).\n\n`Reason` can be any term.\n\n`Stacktrace` is a list as provided in a try-catch clause.\n\n```erlang\ntry\n    ...\ncatch Class:Reason:Stacktrace ->\n    ...\nend\n```\n\nThat is, a list of four-tuples `{Module, Function, Arity | Args, ExtraInfo}`,\nwhere `Module` and `Function` are atoms, and the third element is an integer\narity or an argument list. The stacktrace can also contain\n`{Fun, Args, ExtraInfo}` tuples, where `Fun` is a local fun and `Args` is an\nargument list.\n\nElement `ExtraInfo` at the end is optional. Omitting it is equivalent to\nspecifying an empty list.\n\nThe stacktrace is used as the exception stacktrace for the calling process; it\nis truncated to the current maximum stacktrace depth.\n\nAs evaluating this function causes the process to terminate, it has no return\nvalue unless the arguments are invalid, in which case the function _returns the\nerror reason_ `badarg`. If you want to be sure not to return, you can call\n[`error(erlang:raise(Class, Reason, Stacktrace))`](`error/1`) and hope to\ndistinguish exceptions later.\n\nSee the reference manual about [errors and error handling](`e:system:errors.md`)\nfor more information about exception classes and how to catch exceptions.","ref":"erlang.html#raise/3"},{"type":"type","title":"erlang.raise_stacktrace/0","doc":"A extended `t:stacktrace/0` that can be passed to `raise/3`.","ref":"erlang.html#t:raise_stacktrace/0"},{"type":"function","title":"erlang.read_timer/1","doc":"Equivalent to  erlang:read_timer(TimerRef, []) .","ref":"erlang.html#read_timer/1"},{"type":"function","title":"erlang.read_timer/2","doc":"Reads the state of a timer that has been created by either\n[`erlang:start_timer`](`start_timer/4`) or\n[`erlang:send_after`](`send_after/4`). `TimerRef` identifies the timer, and was\nreturned by the BIF that created the timer.\n\n`Options`:\n\n- **`{async, Async}`** - Asynchronous request for state information. `Async`\n  defaults to `false`, which causes the operation to be performed synchronously.\n  In this case, the `Result` is returned by `erlang:read_timer`. When `Async` is\n  `true`, `erlang:read_timer` sends an asynchronous request for the state\n  information to the timer service that manages the timer, and then returns\n  `ok`. A message on the format `{read_timer, TimerRef, Result}` is sent to the\n  caller of `erlang:read_timer` when the operation has been processed.\n\nMore `Option`s can be added in the future.\n\nIf `Result` is an integer, it represents the time in milliseconds left until the\ntimer expires.\n\nIf `Result` is `false`, a timer corresponding to `TimerRef` could not be found.\nThis because the timer had expired, or been canceled, or because `TimerRef`\nnever has corresponded to a timer. Even if the timer has expired, it does not\ntell you whether or not the time-out message has arrived at its destination yet.\n\n> #### Note {: .info }\n>\n> The timer service that manages the timer can be co-located with another\n> scheduler than the scheduler that the calling process is executing on. If so,\n> communication with the timer service takes much longer time than if it is\n> located locally. If the calling process is in a critical path, and can do\n> other things while waiting for the result of this operation, you want to use\n> option `{async, true}`. If using option `{async, false}`, the calling process\n> is blocked until the operation has been performed.\n\nSee also [`erlang:send_after/4`](`send_after/4`),\n[`erlang:start_timer/4`](`start_timer/4`), and\n[`erlang:cancel_timer/2`](`cancel_timer/2`).","ref":"erlang.html#read_timer/2"},{"type":"function","title":"erlang.ref_to_list/1","doc":"Returns a string corresponding to the text representation of `Ref`.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging and is not to be used in application\n> programs.","ref":"erlang.html#ref_to_list/1"},{"type":"type","title":"erlang.reference/0","doc":"An Erlang [reference](`e:system:data_types.md#reference`).","ref":"erlang.html#t:reference/0"},{"type":"function","title":"erlang.register/2","doc":"Registers the name `RegName` with a process identifier (pid) or a port\nidentifier in the\n[`name registry`](`e:system:ref_man_processes.md#runtime-service`).\n`RegName`, which must be an atom, can be used instead of the pid or port\nidentifier in send operator (`RegName ! Message`) and most other BIFs that take\na pid or port identifies as an argument.\n\nFor example:\n\n```erlang\n> register(db, Pid).\ntrue\n```\n\nThe registered name is considered a\n[Directly Visible Erlang Resource](`e:system:ref_man_processes.md#visible-resources`)\nand is automatically unregistered when the process terminates.\n\nFailures:\n\n- **`badarg`** - If `PidOrPort` is not an existing local process or port.\n\n- **`badarg`** - If `RegName` is already in use.\n\n- **`badarg`** - If the process or port is already registered (already has a\n  name).\n\n- **`badarg`** - If `RegName` is the atom `undefined`.","ref":"erlang.html#register/2"},{"type":"function","title":"erlang.registered/0","doc":"Returns a list of names that have been registered using `register/2`.\n\nFor example:\n\n```erlang\n> registered().\n[code_server, file_server, init, user, my_db]\n```","ref":"erlang.html#registered/0"},{"type":"type","title":"erlang.registered_name/0","doc":"","ref":"erlang.html#t:registered_name/0"},{"type":"type","title":"erlang.registered_process_identifier/0","doc":"","ref":"erlang.html#t:registered_process_identifier/0"},{"type":"function","title":"erlang.resume_process/1","doc":"Decreases the suspend count on the process identified by `Suspendee`.\n\n`Suspendee` is previously to have been suspended through\n[`erlang:suspend_process/2`](`suspend_process/2`) or\n[`erlang:suspend_process/1`](`suspend_process/1`) by the process calling\n`erlang:resume_process(Suspendee)`. When the suspend count on `Suspendee`\nreaches zero, `Suspendee` is resumed, that is, its state is changed from\nsuspended into the state it had before it was suspended.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging only.\n\nFailures:\n\n- **`badarg`** - If `Suspendee` is not a process identifier.\n\n- **`badarg`** - If the process calling `erlang:resume_process/1` had not\n  previously increased the suspend count on the process identified by\n  `Suspendee`.\n\n- **`badarg`** - If the process identified by `Suspendee` is not alive.","ref":"erlang.html#resume_process/1"},{"type":"function","title":"erlang.round/1","doc":"Returns an integer by rounding `Number` to the nearest integer.\n\nExample:\n\n```erlang\n1> round(42.1).\n42\n2> round(5.5).\n6\n3> round(-5.5).\n-6\n4> round(36028797018963969.0).\n36028797018963968\n```\n\nIn the last example, [`round(36028797018963969.0)`](`round/1`) evaluates to\n`36028797018963968`. The reason for this is that the number\n`36028797018963969.0` cannot be represented exactly as a float value. Instead,\nthe float literal is represented as `36028797018963968.0`, which is the closest\nnumber that can be represented exactly as a float value. See\n[Representation of Floating Point Numbers](`e:system:data_types.md#float_representation_problem`)\nfor additional information.","ref":"erlang.html#round/1"},{"type":"type","title":"erlang.scheduler_bind_type/0","doc":"The requested scheduler bind type.","ref":"erlang.html#t:scheduler_bind_type/0"},{"type":"function","title":"erlang.self/0","doc":"Returns the process identifier of the calling process.\n\nFor example:\n\n```erlang\n> self().\n<0.26.0>\n```","ref":"erlang.html#self/0"},{"type":"function","title":"erlang.send/2","doc":"Sends a message and returns `Msg`. This is the same as using the\n[send operator](`e:system:expressions.md#send`): `Dest ! Msg`.\n\n`Dest` can be a remote or local process identifier, an alias, a (local) port, a\nlocally registered name, or a tuple `{RegName, Node}` for a registered name at\nanother node.\n\nThe function fails with a `badarg` run-time error if `Dest` is an atom name, but\nthis name is not registered. This is the only case when `send` fails for an\nunreachable destination `Dest` (of correct type).\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.","ref":"erlang.html#send/2"},{"type":"function","title":"erlang.send/3","doc":"Either sends a message and returns `ok`, or does not send the message but\nreturns something else (see below). Otherwise the same as\n[`erlang:send/2`](`send/2`).\n\nFor more detailed explanation and warnings, see [`erlang:send_nosuspend/2,3`](`send_nosuspend/2`).\n\nOptions:\n\n- **`nosuspend`** - If the sender would have to be suspended to do the send,\n  `nosuspend` is returned instead.\n\n- **`noconnect`** - If the destination node would have to be auto-connected to\n  do the send, `noconnect` is returned instead.\n\n- **`priority`** - Since OTP 28.0\n\n  Send this message as a priority message. In order for the message to be\n  handled as a\n  [priority message](`e:system:ref_man_processes.md#priority-messages`) by the\n  receiver, this option *must* be passed, and `Dest` *must* be an active\n  [*priority alias*](#priority_alias).\n\n  If `Dest` is an active priority alias, but this option is not passed, the\n  message will be handled as on ordinary message. The same is true, if this\n  option is passed, but `Dest` is not an active priority alias.\n\n  > #### Warning {: .warning }\n  >\n  > You *very seldom* need to resort to using priority messages and you may\n  > [cause issues](`e:system:ref_man_processes.md#priority-message-warning`)\n  > instead of solving issues if not used with care.\n\n  For more information see, the\n  [_Adding Messages to the Message Queue_](`e:system:ref_man_processes.md#message-queue-order`)\n  and the\n  [Enabling Priority Message Reception](`e:system:ref_man_processes.md#enable-prio-msg-recv`)\n  sections of the _Erlang Reference Manual_.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.\n\n> #### Warning {: .warning }\n>\n> As with `erlang:send_nosuspend/2,3`: use with extreme care.","ref":"erlang.html#send/3"},{"type":"function","title":"erlang.send_after/3","doc":"Equivalent to  erlang:send_after(Time, Dest, Msg, []) .","ref":"erlang.html#send_after/3"},{"type":"function","title":"erlang.send_after/4","doc":"Starts a timer. When the timer expires, the message `Msg` is sent to the process\nidentified by `Dest`. Apart from the format of the time-out message, this\nfunction works exactly as [`erlang:start_timer/4`](`start_timer/4`).","ref":"erlang.html#send_after/4"},{"type":"type","title":"erlang.send_destination/0","doc":"The destination for a send operation.\n\nThis can be a remote or local process identifier, a (local) port, a reference\ndenoting a process alias, a locally registered name, or a tuple `{RegName, Node}`\nfor a registered name at another node.","ref":"erlang.html#t:send_destination/0"},{"type":"function","title":"erlang.send_nosuspend/2","doc":"Send a message without suspending the caller.\n\nEquivalent to [`erlang:send(Dest, Msg, [nosuspend])`](`send/3`), but returns\n`true` if the message was sent and `false` if the message was not sent because\nthe sender would have had to be suspended.\n\nThis function is intended for send operations to an unreliable remote node\nwithout ever blocking the sending (Erlang) process. If the connection to the\nremote node (usually not a real Erlang node, but a node written in C or Java) is\noverloaded, this function _does not send the message_ and returns `false`.\n\nThe same occurs if `Dest` refers to a local port that is busy. For all other\ndestinations (allowed for the ordinary send operator `'!'`), this function sends\nthe message and returns `true`.\n\nThis function is only to be used in rare circumstances where a process\ncommunicates with Erlang nodes that can disappear without any trace, causing the\nTCP buffers and the drivers queue to be over-full before the node is shut down\n(because of tick time-outs) by `net_kernel`. The normal reaction to take when\nthis occurs is some kind of premature shutdown of the other node.\n\nNotice that ignoring the return value from this function would result in an\n_unreliable_ message passing, which is contradictory to the Erlang programming\nmodel. The message is _not_ sent if this function returns `false`.\n\nIn many systems, transient states of overloaded queues are normal. Although this\nfunction returns `false` does not mean that the other node is guaranteed to be\nnon-responsive, it could be a temporary overload. Also, a return value of `true`\ndoes only mean that the message can be sent on the (TCP) channel without\nblocking; the message is not guaranteed to arrive at the remote node. For a\ndisconnected non-responsive node, the return value is `true` (mimics the\nbehavior of operator `!`). The expected behavior and the actions to take when\nthe function returns `false` are application- and hardware-specific.\n\n> #### Warning {: .warning }\n>\n> Use with extreme care.","ref":"erlang.html#send_nosuspend/2"},{"type":"function","title":"erlang.send_nosuspend/3","doc":"Equivalent to [`erlang:send(Dest, Msg, [nosuspend | Options])`](`send/3`), but\nwith a Boolean return value.\n\nThis function behaves like [`erlang:send_nosuspend/2`](`send_nosuspend/2`), but\ntakes a third parameter, a list of options. The only option is `noconnect`,\nwhich makes the function return `false` if the remote node is not currently\nreachable by the local node. The normal behavior is to try to connect to the\nnode, which can stall the process during a short period. The use of option\n`noconnect` makes it possible to be sure not to get the slightest delay when\nsending to a remote process. This is especially useful when communicating with\nnodes that expect to always be the connecting part (that is, nodes written in C\nor Java).\n\nWhenever the function returns `false` (either when a suspend would occur or when\n`noconnect` was specified and the node was not already connected), the message\nis guaranteed _not_ to have been sent.\n\n> #### Warning {: .warning }\n>\n> Use with extreme care.","ref":"erlang.html#send_nosuspend/3"},{"type":"function","title":"erlang.set_cookie/1","doc":"Sets the magic cookie of the local node to the atom `Cookie`, which is also the\ncookie for all nodes that have no explicit cookie set with `set_cookie/2`\n`Cookie`.\n\nSee section [Distributed Erlang](`e:system:distributed.md`) in the\nErlang Reference Manual in System Documentation for more information.\n\nYou can get this value using `get_cookie/0`.\n\nFailure: `function_clause` if the local node is not alive.","ref":"erlang.html#set_cookie/1"},{"type":"function","title":"erlang.set_cookie/2","doc":"Sets the magic cookie for `Node` to the atom `Cookie`. If `Node` is the local\nnode, the function sets the cookie of all other nodes (that have no explicit\ncookie set with this function) to `Cookie`.\n\nSee section [Distributed Erlang](`e:system:distributed.md`) in the\nErlang Reference Manual in System Documentation for more information.\n\nYou can get this value using `get_cookie/1`.\n\nFailure: `function_clause` if the local node is not alive.","ref":"erlang.html#set_cookie/2"},{"type":"function","title":"erlang.setelement/3","doc":"Returns a tuple that is a copy of argument `Tuple1` with the element specified\nby integer argument `Index` (the first element is the element with index 1)\nreplaced by argument `Value`.","ref":"erlang.html#setelement/3"},{"type":"function","title":"Examples - erlang.setelement/3","doc":"```erlang\n1> setelement(2, {10, green, bottles}, red).\n{10,red,bottles}\n```","ref":"erlang.html#setelement/3-examples"},{"type":"function","title":"erlang.size/1","doc":"Returns the number of elements in a tuple or the number of bytes in a binary or\nbitstring.\n\nFor bitstrings, the number of whole bytes is returned. That is, if the number of\nbits in the bitstring is not divisible by 8, the resulting number of bytes is\nrounded _down_.\n\nSee also `tuple_size/1`, `byte_size/1`, and `bit_size/1`.\n\n> #### Note {: .info }\n>\n> It is recommended to avoid `size/1` in new code.","ref":"erlang.html#size/1"},{"type":"function","title":"Examples - erlang.size/1","doc":"```erlang\n1> size({a, b, c}).\n3\n2> tuple_size({a, b, c}).\n3\n3> size(<<11, 22, 33>>).\n3\n4> byte_size(<<11, 22, 33>>).\n3\n5> size(<<11, 7:4>>).\n1\n6> byte_size(<<11, 7:4>>).\n2\n7> bit_size(<<11, 7:4>>).\n12\n```","ref":"erlang.html#size/1-examples"},{"type":"function","title":"erlang.spawn/1","doc":"Returns the process identifier of a new process started by the application of\n`Fun` to the empty list `[]`. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn/1"},{"type":"function","title":"erlang.spawn/2","doc":"Returns the process identifier of a new process started by the application of\n`Fun` to the empty list `[]` on `Node`. If `Node` does not exist, a useless pid\nis returned. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn/2"},{"type":"function","title":"erlang.spawn/3","doc":"Returns the process identifier of a new process started by the application of\n`Module:Function` to `Args`.\n\n[`error_handler:undefined_function(Module, Function, Args)`](`error_handler`) is\n evaluated by the new process if `Module:Function/Arity` does not exist\n(where `Arity` is the length of `Args`). The error handler can be redefined\n(see `process_flag/2`). If\n`error_handler` is undefined, or the user has redefined the default\n`error_handler` and its replacement is undefined, a failure with reason `undef`\noccurs.\n\nExample:\n\n```erlang\n> spawn(speed, regulator, [high_speed, thin_cut]).\n<0.13.1>\n```","ref":"erlang.html#spawn/3"},{"type":"function","title":"erlang.spawn/4","doc":"Returns the process identifier (pid) of a new process started by the application\nof `Module:Function` to `Args` on `Node`. If `Node` does not exist, a useless\npid is returned. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn/4"},{"type":"function","title":"erlang.spawn_link/1","doc":"Returns the process identifier of a new process started by the application of\n`Fun` to the empty list `[]`. A link is created between the calling process and\nthe new process, atomically. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn_link/1"},{"type":"function","title":"erlang.spawn_link/2","doc":"Returns the process identifier (pid) of a new process started by the application\nof `Fun` to the empty list `[]` on `Node`. A link is created between the calling\nprocess and the new process, atomically. If `Node` does not exist, a useless pid\nis returned and an exit signal with reason `noconnection` is sent to the calling\nprocess. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn_link/2"},{"type":"function","title":"erlang.spawn_link/3","doc":"Returns the process identifier of a new process started by the application of\n`Module:Function` to `Args`. A link is created between the calling process and\nthe new process, atomically. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn_link/3"},{"type":"function","title":"erlang.spawn_link/4","doc":"Returns the process identifier (pid) of a new process started by the application\nof `Module:Function` to `Args` on `Node`. A link is created between the calling\nprocess and the new process, atomically. If `Node` does not exist, a useless pid\nis returned and an exit signal with reason `noconnection` is sent to the calling\nprocess. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn_link/4"},{"type":"function","title":"erlang.spawn_monitor/1","doc":"Returns the process identifier of a new process, started by the application of\n`Fun` to the empty list `[]`, and a reference for a monitor created to the new\nprocess. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn_monitor/1"},{"type":"function","title":"erlang.spawn_monitor/2","doc":"Returns the process identifier of a new process, started by the application of\n`Fun` to the empty list `[]` on the node `Node`, and a reference for a monitor\ncreated to the new process. Otherwise works like `spawn/3`.\n\nIf the node identified by `Node` does not support distributed `spawn_monitor()`,\nthe call will fail with a `notsup` exception.","ref":"erlang.html#spawn_monitor/2"},{"type":"function","title":"erlang.spawn_monitor/3","doc":"A new process is started by the application of `Module:Function` to `Args`. The\nprocess is monitored at the same time. Returns the process identifier and a\nreference for the monitor. Otherwise works like `spawn/3`.","ref":"erlang.html#spawn_monitor/3"},{"type":"function","title":"erlang.spawn_monitor/4","doc":"A new process is started by the application of `Module:Function` to `Args` on\nthe node `Node`. The process is monitored at the same time. Returns the process\nidentifier and a reference for the monitor. Otherwise works like `spawn/3`.\n\nIf the node identified by `Node` does not support distributed `spawn_monitor()`,\nthe call will fail with a `notsup` exception.","ref":"erlang.html#spawn_monitor/4"},{"type":"function","title":"erlang.spawn_opt/2","doc":"Returns the process identifier (pid) of a new process started by the application\nof `Fun` to the empty list `[]`. Otherwise works like `spawn_opt/4`.\n\nIf option `monitor` is specified, the newly created process is monitored, and\nboth the pid and reference for the monitor are returned.","ref":"erlang.html#spawn_opt/2"},{"type":"function","title":"erlang.spawn_opt/3","doc":"Returns the process identifier (pid) of a new process started by the application\nof `Fun` to the empty list `[]` on `Node`. If `Node` does not exist, a useless\npid is returned. Otherwise works like `spawn_opt/4`.\n\nValid options depends on what options are supported by the node identified by\n`Node`. A description of valid `Option`s for the local node of current OTP\nversion can be found in the documentation of `spawn_opt/4`.","ref":"erlang.html#spawn_opt/3"},{"type":"function","title":"erlang.spawn_opt/4","doc":"Works as `spawn/3`, except that an extra option list is specified when creating\nthe process.\n\nIf option `monitor` is specified, the newly created process is monitored, and\nboth the pid and reference for the monitor are returned.\n\nOptions:\n\n- **`link`** - Sets a link to the parent process (like `spawn_link/3` does).\n\n- **`monitor`** - Monitors the new process (like\n  [`monitor(process, Pid)`](`monitor/2`) does). A `{Pid, MonitorRef}` tuple will\n  be returned instead of just a `Pid`.\n\n- **`{monitor, MonitorOpts}`** - Monitors the new process with options (like\n  [`monitor(process, Pid, MonitorOpts)`](`monitor/3`) does). A\n  `{Pid, MonitorRef}` tuple will be returned instead of just a `Pid`.\n\n- **`{priority, Level}`** - Sets the priority of the new process. Equivalent to\n  executing [`process_flag(priority, Level)`](#process_flag_priority)\n  in the start function of the new process, except that the priority is set\n  before the process is selected for execution for the first time. For more\n  information on priorities, see\n  [`process_flag(priority, Level)`](#process_flag_priority).\n\n- **`{fullsweep_after, Number}`** - Useful only for performance tuning. Do not\n  use this option unless you know that there is problem with execution times or\n  memory consumption, and ensure that the option improves matters.\n\n  The Erlang runtime system uses a generational garbage collection scheme, using\n  an \"old heap\" for data that has survived at least one garbage collection. When\n  there is no more room on the old heap, a fullsweep garbage collection is done.\n\n  Option `fullsweep_after` makes it possible to specify the maximum number of\n  generational collections before forcing a fullsweep, even if there is room on\n  the old heap. Setting the number to zero disables the general collection\n  algorithm, that is, all live data is copied at every garbage collection.\n\n  A few cases when it can be useful to change `fullsweep_after`:\n\n  - If binaries that are no longer used are to be thrown away as soon as\n    possible. (Set `Number` to zero.)\n  - A process that mostly have short-lived data is fullsweeped seldom or never,\n    that is, the old heap contains mostly garbage. To ensure a fullsweep\n    occasionally, set `Number` to a suitable value, such as 10 or 20.\n  - In embedded systems with a limited amount of RAM and no virtual memory, you\n    might want to preserve memory by setting `Number` to zero. (The value can be\n    set globally, see [`erlang:system_flag/2`](`system_flag/2`).)\n\n- **`{min_heap_size, Size}`** - Useful only for performance tuning. Do not use\n  this option unless you know that there is problem with execution times or\n  memory consumption, and ensure that the option improves matters.\n\n  Gives a minimum heap size, in words. Setting this value higher than the system\n  default can speed up some processes because less garbage collection is done.\n  However, setting a too high value can waste memory and slow down the system\n  because of worse data locality. Therefore, use this option only for\n  fine-tuning an application and to measure the execution time with various\n  `Size` values.\n\n- **`{min_bin_vheap_size, VSize}`** - Useful only for performance tuning. Do not\n  use this option unless you know that there is problem with execution times or\n  memory consumption, and ensure that the option improves matters.\n\n  Gives a minimum binary virtual heap size, in words. Setting this value higher\n  than the system default can speed up some processes because less garbage\n  collection is done. However, setting a too high value can waste memory.\n  Therefore, use this option only for fine-tuning an application and to measure\n  the execution time with various `VSize` values.\n\n- **`{max_heap_size, Size}`** - Sets the `max_heap_size` process flag. The\n  default `max_heap_size` is determined by command-line argument\n  [`+hmax`](erl_cmd.md#%2Bhmax) in [erl](erl_cmd.md). For more information, see\n  the documentation of\n  [`process_flag(max_heap_size, Size)`](#process_flag_max_heap_size).\n\n- **`{message_queue_data, MQD}`** - Sets the value of the `message_queue_data`\n  process flag. `MQD` can be either `off_heap` or `on_heap`. The default value\n  of the `message_queue_data` process flag is determined by the command-line\n  argument [`+hmqd`](erl_cmd.md#%2Bhmqd) in [erl](erl_cmd.md). For more\n  information, see the documentation of\n  [`process_flag(message_queue_data, MQD)`](#process_flag_message_queue_data).\n\n- **`{async_dist, Enabled}`{: #spawn_opt_async_dist }** - Sets the\n  [`async_dist`](#process_flag_async_dist) process flag of the spawned process.\n  This option will override the default value set by the command line argument\n  [`+pad  `](erl_cmd.md#%2Bpad).\n\n  Since: OTP 25.3","ref":"erlang.html#spawn_opt/4"},{"type":"function","title":"erlang.spawn_opt/5","doc":"Returns the process identifier (pid) of a new process started by the application\nof `Module:Function` to `Args` on `Node`. If `Node` does not exist, a useless\npid is returned. Otherwise works like `spawn_opt/4`.\n\nValid options depends on what options are supported by the node identified by\n`Node`. A description of valid `Option`s for the local node of current OTP\nversion can be found in the documentation of `spawn_opt/4`.","ref":"erlang.html#spawn_opt/5"},{"type":"type","title":"erlang.spawn_opt_option/0","doc":"Options for [`spawn_opt()`](`spawn_opt/4`).","ref":"erlang.html#t:spawn_opt_option/0"},{"type":"function","title":"erlang.spawn_request/1","doc":"Equivalent to the call [`spawn_request(node(),Fun,[])`](`spawn_request/3`). That\nis, a spawn request on the local node with no options.","ref":"erlang.html#spawn_request/1"},{"type":"function","title":"erlang.spawn_request/2","doc":"Equivalent to [`spawn_request(node(),Fun,Options)`](`spawn_request/3`) or\n[`spawn_request(Node,Fun,[])`](`spawn_request/3`) depending on the arguments.\n\nThat is either:\n- a spawn request on the local node.\n- a spawn request with no options.","ref":"erlang.html#spawn_request/2"},{"type":"function","title":"erlang.spawn_request/3","doc":"Equivalent to\n[`spawn_request(Node,erlang,apply,[Fun,[]],Options)`](`spawn_request/5`) or\n[`spawn_request(node(),Module,Function,Args,[])`](`spawn_request/5`) depending\non the arguments.\n\nThat is either:\n\n- a spawn request using the fun `Fun` of arity zero as entry point\n- a spawn request on the local node with no options.\n\nThis function will fail with a `badarg` exception if:\n\n- `Node` is not an atom.\n- `Fun` is not a fun of arity zero.\n- `Options` is not a proper list of terms.","ref":"erlang.html#spawn_request/3"},{"type":"function","title":"erlang.spawn_request/4","doc":"Equivalent to\n[`spawn_request(Node,Module,Function,Args,[])`](`spawn_request/5`) or\n[`spawn_request(node(),Module,Function,Args,Options)`](`spawn_request/5`)\ndepending on the arguments.\n\nThat is either:\n- a spawn request with no options.\n- a spawn request on the local node.","ref":"erlang.html#spawn_request/4"},{"type":"function","title":"erlang.spawn_request/5","doc":"Asynchronously send a spawn request. Returns a request identifier `ReqId`.\n\n[](){: #spawn_request_success_message }\n\nIf the spawn operation succeeds, a new process is created on the node identified\nby `Node`. When a spawn operation succeeds, the caller will by default be sent a\nmessage of the form `{ReplyTag, ReqId, ok, Pid}` where `Pid` is the process\nidentifier of the newly created process. Such a message is referred to as a\n_success message_ below in the text. `ReplyTag` is by default the atom\n`spawn_reply` unless modified by the `{reply_tag, ReplyTag}` option. The new\nprocess is started by the application of `Module:Function` to `Args`.\n\n[](){: #spawn_request_error_message }\n\nThe spawn operation fails either if creation of a new process failed or if the\nspawn operation was interrupted by a connection failure. When a spawn operation\nfails, the caller will by default be sent a message on the form\n`{ReplyTag, ReqId, error, Reason}` where `Reason` is the error reason. Such a\nmessage is referred to as an _error message_ below in the text. Currently the\nfollowing spawn error `Reason`s are defined, but other reasons can appear at any\ntime without prior notice:\n\n- **`badopt`** - An invalid `Option` was passed as argument. Note that different\n  runtime systems may support different options.\n\n- **`notsup`** - The node identified by `Node` does not support spawn operations\n  issued by `spawn_request()`.\n\n- **`noconnection`** - Failure to set up a connection to the node identified by\n  `Node` or the connection to that node was lost during the spawn operation. In\n  the case the connection was lost, a process may or may not have been created.\n\n- **`system_limit`** - Could not create a new process due to that some system\n  limit was reached. Typically the process table was full.\n\nValid `Option`s:\n\n- **`monitor`** - In the absence of spawn operation failures, atomically sets up\n  a monitor to the newly created process. That is, as if the calling process had\n  called [`monitor(process, Pid)`](`monitor/2`) where `Pid` is the process\n  identifier of the newly created process. The `ReqId` returned by\n  `spawn_request()` is also used as monitor reference as if it was returned from\n  [`monitor(process, Pid)`](`monitor/2`).\n\n  The monitor will not be activated for the calling process until the spawn\n  operation has succeeded. The monitor can not be [demonitored](`demonitor/1`)\n  before the operation has succeeded. A `'DOWN'` message for the corresponding\n  monitor is guaranteed not to be delivered before a\n  [_success message_](#spawn_request_success_message) that corresponds\n  to the spawn operation. If the spawn operation fails, no `'DOWN'` message will\n  be delivered.\n\n  If the connection between the nodes involved in the spawn operation is lost\n  during the spawn operation, the spawn operation will fail with an error reason\n  of `noconnection`. A new process may or may not have been created.\n\n- **`{monitor, MonitorOpts}`** - In the absence of spawn operation failures,\n  atomically sets up a monitor to the newly created process. That is, as if the\n  calling process had called [`monitor(process, Pid, MonitorOpts)`](`monitor/2`)\n  where `Pid` is the process identifier of the newly created process. See the\n  `monitor` option above for more information.\n\n  Note that the monitor will not be activated for the calling process until the\n  spawn operation has succeeded. For example, in the case that an alias is\n  created using the monitor option, the alias will not be active until the\n  monitor is activated.\n\n- **`link`** - In absence of spawn operation failures, atomically sets up a link\n  between the calling process and the newly created process. That is, as if the\n  calling process had called [`link(Pid)`](`link/1`) where `Pid` is the process\n  identifier of the newly created process.\n\n  The link will not be activated for the calling process until the spawn\n  operation has succeeded. The link can not be removed before the operation has\n  succeeded. An exit signal due to the link is guaranteed not to be delivered\n  before a [_success message_](#spawn_request_success_message) that\n  corresponds to the spawn operation. If the spawn operation fails, no exit\n  signal due to the link will be delivered to the caller of `spawn_request()`.\n\n  If the connection between the nodes involved in the spawn operation is lost\n  during the spawn operation, the spawn operation will fail with an error reason\n  of `noconnection`. A new process may or may not have been created. If it has\n  been created, it will be delivered an exit signal with an exit reason of\n  `noconnection`.\n\n- **`{reply, Reply}`** - Valid `Reply` values:\n\n  - **`yes`** - A spawn reply message will be sent to the caller regardless of\n    whether the operation succeeds or not. If the call to `spawn_request()`\n    returns without raising an exception and the `reply` option is set to `yes`,\n    the caller is guaranteed to be delivered either a\n    [_success message_](#spawn_request_success_message) or an\n    [_error message_](#spawn_request_error_message). The `reply`\n    option is by default set to `yes`.\n\n  - **`no`** - No spawn reply message will be sent to the caller when the spawn\n    operation completes. This regardless of whether the operation succeeds or\n    not.\n\n  - **`error_only`** - No spawn reply message will be sent to the caller if the\n    spawn operation succeeds, but an\n    [_error message_](#spawn_request_error_message) will be sent to\n    the caller if the operation fails.\n\n  - **`success_only`** - No spawn reply message will be sent to the caller if\n    the spawn operation fails, but a\n    [_success message_](#spawn_request_success_message) will be sent\n    to the caller if the operation succeeds.\n\n- **`{reply_tag, ReplyTag}`** - Sets the reply tag to `ReplyTag` in the reply\n  message. That is, in the [_success_](#spawn_request_success_message)\n  or [_error_](#spawn_request_error_message) message that is sent to\n  the caller due to the spawn operation. The default reply tag is the atom\n  `spawn_reply`.\n\n- **`OtherOption`** - Other valid options depends on what options are supported\n  by the node identified by `Node`. A description of other valid `Option`s for\n  the local node of current OTP version can be found in the documentation of\n  `spawn_opt/4`.\n\nIf a spawn reply message is delivered, it is guaranteed to be delivered before\nany other signals from the newly spawned process are delivered to the process\nissuing the spawn request.\n\nThis function will fail with a `badarg` exception if:\n\n- `Node` is not an atom.\n- `Module` is not an atom.\n- `Function` is not an atom.\n- `Args` is not a proper list of terms.\n- `Options` is not a proper list of terms.\n\nNote that not all individual `Option`s are checked when the spawn request is\nsent. Some `Option`s can only be checked on reception of the request. Therefore\nan invalid option does _not_ cause a `badarg` exception, but will cause the\nspawn operation to fail with an error reason of `badopt`.\n\nA spawn request can be abandoned by calling `spawn_request_abandon/1`.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.","ref":"erlang.html#spawn_request/5"},{"type":"function","title":"erlang.spawn_request_abandon/1","doc":"Abandon a previously issued spawn request. `ReqId` corresponds to a request\nidentifier previously returned by [`spawn_request()`](`spawn_request/5`) in a\ncall from current process. That is, only the process that has made the request\ncan abandon the request.\n\nA spawn request can only be successfully abandoned until the spawn request has\ncompleted. When a spawn request has been successfully abandoned, the caller will\nnot be effected by future direct effects of the spawn request itself. For\nexample, it will not receive a spawn reply message. The request is however not\nwithdrawn, so a new process may or may not be created due to the request. If a\nnew process is created after the spawn request was abandoned, no monitors nor\nlinks will be set up to the caller of\n[`spawn_request_abandon/1`](`spawn_request_abandon/1`) due to the spawn request.\nIf the spawn request included the `link` option, the process created due to this\nrequest will be sent an exit signal from its parent with the exit reason\n`abandoned` when it is detected that the spawn operation has succeeded.\n\n> #### Note {: .info }\n>\n> A process created due to a spawn request that has been abandoned may\n> communicate with its parent as any other process. It is _only_ the direct\n> effects on the parent of the actual spawn request, that will be canceled by\n> abandoning a spawn request.\n\nReturn values:\n\n- **`true`** - The spawn request was successfully abandoned.\n\n- **`false`** - No spawn request was abandoned. The `ReqId` request identifier\n  did not correspond to an outstanding spawn request issued by the calling\n  process. The reason for this is either:\n\n  - `ReqId` corresponds to a spawn request previoulsy made by the calling\n    process. The spawn operation has completed and a spawn reply has already\n    been delivered to the calling process unless the spawn reply was disabled in\n    the request.\n  - `ReqId` does not correspond to a spawn request that has been made by the\n    calling process.\n\nThis function fail with a `badarg` exception if `ReqId` is not a reference.","ref":"erlang.html#spawn_request_abandon/1"},{"type":"function","title":"erlang.split_binary/2","doc":"Returns a tuple containing the binaries that are the result of splitting `Bin`\ninto two parts at position `Pos`.\n\nThis operation is non-destructive. After the operation, there are\nthree binaries altogether.","ref":"erlang.html#split_binary/2"},{"type":"function","title":"Examples - erlang.split_binary/2","doc":"```erlang\n1> B = list_to_binary(\"0123456789\").\n<<\"0123456789\">>\n2> byte_size(B).\n10\n3> {B1, B2} = split_binary(B, 3).\n{<<\"012\">>,<<\"3456789\">>}\n4> byte_size(B1).\n3\n5> byte_size(B2).\n7\n```","ref":"erlang.html#split_binary/2-examples"},{"type":"type","title":"erlang.stack_item/0","doc":"","ref":"erlang.html#t:stack_item/0"},{"type":"type","title":"erlang.stacktrace/0","doc":"An Erlang stacktrace as described by\n[Errors and Error Handling](`e:system:errors.md#stacktrace`) section in the\nErlang Reference Manual.","ref":"erlang.html#t:stacktrace/0"},{"type":"type","title":"erlang.stacktrace_extrainfo/0","doc":"","ref":"erlang.html#t:stacktrace_extrainfo/0"},{"type":"function","title":"erlang.start_timer/3","doc":"Equivalent to  erlang:start_timer(Time, Dest, Msg, []) .","ref":"erlang.html#start_timer/3"},{"type":"function","title":"erlang.start_timer/4","doc":"Starts a timer. When the timer expires, the message `{timeout, TimerRef, Msg}`\nis sent to the process identified by `Dest`.\n\n`Option`s:\n\n- **`{abs, false}`** - This is the default. It means the `Time` value is\n  interpreted as a time in milliseconds _relative_ current\n  [Erlang monotonic time](time_correction.md#erlang-monotonic-time).\n\n- **`{abs, true}`** - Absolute `Time` value. The `Time` value is interpreted as\n  an absolute Erlang monotonic time in milliseconds.\n\nMore `Option`s can be added in the future.\n\nThe absolute point in time, the timer is set to expire on, must be in the\ninterval\n`[ `[erlang:convert_time_unit](`convert_time_unit/3`)`(`[erlang:system_info](#system_info_start_time)`(start_time), native, millisecond), `[erlang:convert_time_unit](`convert_time_unit/3`)`(`[erlang:system_info](#system_info_end_time)`(end_time), native, millisecond) ]`.\nIf a relative time is specified, the `Time` value is not allowed to be negative.\n\nIf `Dest` is a `t:pid/0`, it must be a `t:pid/0` of a process created on the\ncurrent runtime system instance. This process has either terminated or not. If\n`Dest` is an `t:atom/0`, it is interpreted as the name of a locally registered\nprocess. The process referred to by the name is looked up at the time of timer\nexpiration. No error is returned if the name does not refer to a process.\n\nIf `Dest` is a `t:pid/0`, the timer is automatically canceled if the process\nreferred to by the `t:pid/0` is not alive, or if the process exits. This feature\nwas introduced in ERTS 5.4.11. Notice that timers are not automatically canceled\nwhen `Dest` is an `t:atom/0`.\n\nSee also [`erlang:send_after/4`](`send_after/4`),\n[`erlang:cancel_timer/2`](`cancel_timer/2`), and\n[`erlang:read_timer/2`](`read_timer/2`).\n\nFor more information on timers in Erlang in general, see the\n[*Timers*](`e:erts:time_correction.md#timers`) section of the\n[*Time and Time Correction in Erlang*](`e:erts:time_correction.md`)\nERTS User's guide.\n\nFailure: `badarg` if the arguments do not satisfy the requirements specified\nhere.","ref":"erlang.html#start_timer/4"},{"type":"function","title":"erlang.statistics/1","doc":"Returns statistics about the current system.\n\nThe possible flags are:\n\n- ```erlang\n  statistics(active_tasks) -> [non_neg_integer()]\n  ```\n  {: #statistics_active_tasks }\n\n  Returns the same as\n  [`statistics(active_tasks_all)`](#statistics_active_tasks_all) with\n  the exception that no information about the dirty IO run queue and its\n  associated schedulers is part of the result. That is, only tasks that are\n  expected to be CPU bound are part of the result.\n\n  Available since OTP 18.3\n\n- ```erlang\n  statistics(active_tasks_all) -> [non_neg_integer()]\n  ```\n  {: #statistics_active_tasks_all }\n\n  Returns a list where each element represents the amount of active processes and\n  ports on each run queue and its associated schedulers. That is, the number of\n  processes and ports that are ready to run, or are currently running. Values for\n  normal run queues and their associated schedulers are located first in the\n  resulting list. The first element corresponds to scheduler number 1 and so on.\n  If support for dirty schedulers exist, an element with the value for the dirty\n  CPU run queue and its associated dirty CPU schedulers follow and then as last\n  element the value for the dirty IO run queue and its associated dirty IO\n  schedulers follow. The information is _not_ gathered atomically. That is, the\n  result is not necessarily a consistent snapshot of the state, but instead quite\n  efficiently gathered.\n\n  > #### Note {: .info }\n  >\n  > Each normal scheduler has one run queue that it manages. If dirty schedulers\n  > are supported, all dirty CPU schedulers share one run queue, and all dirty IO\n  > schedulers share one run queue. That is, we have multiple normal run queues,\n  > one dirty CPU run queue and one dirty IO run queue. Work can _not_ migrate\n  > between the different types of run queues. Only work in normal run queues can\n  > migrate to other normal run queues. This has to be taken into account when\n  > evaluating the result.\n\n  See also\n  [`statistics(total_active_tasks)`](#statistics_total_active_tasks),\n  [`statistics(run_queue_lengths)`](#statistics_run_queue_lengths),\n  [`statistics(run_queue_lengths_all)`](#statistics_run_queue_lengths_all),\n  [`statistics(total_run_queue_lengths)`](#statistics_total_run_queue_lengths),\n  and\n  [`statistics(total_run_queue_lengths_all)`](#statistics_total_run_queue_lengths_all).\n\n  Available since OTP 20.0\n\n- ```erlang\n  statistics(context_switches) -> {non_neg_integer(), 0}\n  ```\n  {: #statistics_context_switches }\n\n  Returns the total number of context switches since the system started.\n\n- ```erlang\n  statistics(exact_reductions) -> {Total :: non_neg_integer(), SinceLastCall :: non_neg_integer()}\n  ```\n  {: #statistics_exact_reductions }\n\n  Returns the number of exact reductions.\n\n  > #### Note {: .info }\n  >\n  > [`statistics(exact_reductions)`](`statistics/1`) is a more expensive operation\n  > than [statistics(reductions)](#statistics_reductions).\n\n- ```erlang\n  statistics(garbage_collection) ->\n    { NumerOfGCs :: non_neg_integer(), WordsReclaimed :: non_neg_integer(), 0}\n  ```\n\n  Returns information about garbage collection, for example:\n\n  ```erlang\n  > statistics(garbage_collection).\n  {85,23961,0}\n  ```\n\n  This information can be invalid for some implementations.\n\n- ```erlang\n  statistics(io) -> {{input, non_neg_integer()}, {output, non_neg_integer()}}\n  ```\n\n  Returns `Input`, which is the total number of bytes received through ports, and\n  `Output`, which is the total number of bytes output to ports.\n\n- ```erlang\n  statistics(microstate_accounting) -> [MSAcc_Thread]\n  ```\n  {: #statistics_microstate_accounting }\n\n  Microstate accounting can be used to measure how much time the Erlang runtime\n  system spends doing various tasks. It is designed to be as lightweight as\n  possible, but some overhead exists when this is enabled. Microstate accounting\n  is meant to be a profiling tool to help finding performance bottlenecks. To\n  `start`/`stop`/`reset` microstate accounting, use system flag\n  [`microstate_accounting`](#system_flag_microstate_accounting).\n\n  [`statistics(microstate_accounting)`](`statistics/1`) returns a list of maps\n  representing some of the OS threads within ERTS. Each map contains `type` and\n  `id` fields that can be used to identify what thread it is, and also a counters\n  field that contains data about how much time has been spent in the various\n  states.\n\n  Example:\n\n  ```erlang\n  > erlang:statistics(microstate_accounting).\n  [#{counters => #{aux => 1899182914,\n                   check_io => 2605863602,\n                   emulator => 45731880463,\n                   gc => 1512206910,\n                   other => 5421338456,\n                   port => 221631,\n                   sleep => 5150294100},\n     id => 1,\n     type => scheduler}|...]\n  ```\n\n  The time unit is the same as returned by `os:perf_counter/0`. So, to convert it\n  to milliseconds, you can do something like this:\n\n  ```erlang\n  lists:map(\n    fun(#{ counters := Cnt } = M) ->\n           MsCnt = maps:map(fun(_K, PerfCount) ->\n                                      erlang:convert_time_unit(PerfCount, perf_counter, 1000)\n                             end, Cnt),\n           M#{ counters := MsCnt }\n    end, erlang:statistics(microstate_accounting)).\n  ```\n\n  Notice that these values are not guaranteed to be the exact time spent in each\n  state. This is because of various optimisation done to keep the overhead as\n  small as possible.\n\n  `MSAcc_Thread_Type`s:\n\n  - **`scheduler`** - The main execution threads that do most of the work. See\n    [erl +S](erl_cmd.md#%2BS) for more details.\n\n  - **`dirty_cpu_scheduler`** - The threads for long running cpu intensive work.\n    See [erl +SDcpu](erl_cmd.md#%2BSDcpu) for more details.\n\n  - **`dirty_io_scheduler`** - The threads for long running I/O work. See\n    [erl +SDio](erl_cmd.md#%2BSDio) for more details.\n\n  - **`async`** - Async threads are used by various linked-in drivers (mainly the\n    file drivers) do offload non-CPU intensive work. See\n    [erl +A](erl_cmd.md#async_thread_pool_size) for more details.\n\n  - **`aux`** - Takes care of any work that is not specifically assigned to a\n    scheduler.\n\n  - **`poll`** - Does the IO polling for the emulator. See\n    [erl +IOt](erl_cmd.md#%2BIOt) for more details.\n\n  The following `MSAcc_Thread_State`s are available. All states are exclusive,\n  meaning that a thread cannot be in two states at once. So, if you add the\n  numbers of all counters in a thread, you get the total runtime for that thread.\n\n  - **`aux`** - Time spent handling auxiliary jobs.\n\n  - **`check_io`** - Time spent checking for new I/O events.\n\n  - **`emulator`** - Time spent executing Erlang processes.\n\n  - **`gc`** - Time spent doing garbage collection. When extra states are enabled\n    this is the time spent doing non-fullsweep garbage collections.\n\n  - **`other`** - Time spent doing unaccounted things.\n\n  - **`port`** - Time spent executing ports.\n\n  - **`sleep`** - Time spent sleeping.\n\n  More fine-grained `MSAcc_Thread_State`s can be added through configure (such as\n  `./configure --with-microstate-accounting=extra`). Enabling these states causes\n  performance degradation when microstate accounting is turned off and increases\n  the overhead when it is turned on.\n\n  - **`alloc`** - Time spent managing memory. Without extra states this time is\n    spread out over all other states.\n\n  - **`bif`** - Time spent in BIFs. Without extra states this time is part of the\n    `emulator` state.\n\n  - **`busy_wait`** - Time spent busy waiting. This is also the state where a\n    scheduler no longer reports that it is active when using\n    [`statistics(scheduler_wall_time)`](#statistics_scheduler_wall_time).\n    So, if you add all other states but this and sleep, and then divide that by\n    all time in the thread, you should get something very similar to the\n    `scheduler_wall_time` fraction. Without extra states this time is part of the\n    `other` state.\n\n  - **`ets`** - Time spent executing ETS BIFs. Without extra states this time is\n    part of the `emulator` state.\n\n  - **`gc_full`** - Time spent doing fullsweep garbage collection. Without extra\n    states this time is part of the `gc` state.\n\n  - **`nif`** - Time spent in NIFs. Without extra states this time is part of the\n    `emulator` state.\n\n  - **`send`** - Time spent sending messages (processes only). Without extra\n    states this time is part of the `emulator` state.\n\n  - **`timers`** - Time spent managing timers. Without extra states this time is\n    part of the `other` state.\n\n  The utility module `m:msacc` can be used to more easily analyse these\n  statistics.\n\n  Returns `undefined` if system flag\n  [`microstate_accounting`](#system_flag_microstate_accounting) is\n  turned off.\n\n  The list of thread information is unsorted and can appear in different order\n  between calls.\n\n  > #### Note {: .info }\n  >\n  > The threads and states are subject to change without any prior notice.\n\n  Available since OTP 19.0\n\n- ```erlang\n  statistics(reductions) -> {Reductions :: non_neg_integer(), SinceLastCall :: non_neg_integer()}\n  ```\n  {: #statistics_reductions }\n\n  Returns information about reductions, for example:\n\n  ```erlang\n  > statistics(reductions).\n  {2046,11}\n  ```\n\n  > #### Change {: .info }\n  >\n  > As from ERTS 5.5 (Erlang/OTP R11B), this value does not include reductions\n  > performed in current time slices of currently scheduled processes. If an exact\n  > value is wanted, use\n  > [`statistics(exact_reductions)`](#statistics_exact_reductions).\n\n- ```erlang\n  statistics(run_queue) -> non_neg_integer()\n  ```\n  {: #statistics_run_queue }\n\n  Returns the total length of all normal and dirty CPU run queues. That is, queued\n  work that is expected to be CPU bound. The information is gathered atomically.\n  That is, the result is a consistent snapshot of the state, but this operation is\n  much more expensive compared to\n  [`statistics(total_run_queue_lengths)`](#statistics_total_run_queue_lengths),\n  especially when a large amount of schedulers is used.\n\n- ```erlang\n  statistics(run_queue_lengths) -> [non_neg_integer()]\n  ```\n  {: #statistics_run_queue_lengths }\n\n  Returns the same as\n  [`statistics(run_queue_lengths_all)`](#statistics_run_queue_lengths_all)\n  with the exception that no information about the dirty IO run queue is part of\n  the result. That is, only run queues with work that is expected to be CPU bound\n  is part of the result.\n\n  Available since OTP 18.3\n\n- ```erlang\n  statistics(run_queue_lengths_all) -> [non_neg_integer()]\n  ```\n  {: #statistics_run_queue_lengths_all }\n\n  Returns a list where each element represents the amount of processes and ports\n  ready to run for each run queue. Values for normal run queues are located first\n  in the resulting list. The first element corresponds to the normal run queue of\n  scheduler number 1 and so on. If support for dirty schedulers exist, values for\n  the dirty CPU run queue and the dirty IO run queue follow (in that order) at the\n  end. The information is _not_ gathered atomically. That is, the result is not\n  necessarily a consistent snapshot of the state, but instead quite efficiently\n  gathered.\n\n  > #### Note {: .info }\n  >\n  > Each normal scheduler has one run queue that it manages. If dirty schedulers\n  > are supported, all dirty CPU schedulers share one run queue, and all dirty IO\n  > schedulers share one run queue. That is, we have multiple normal run queues,\n  > one dirty CPU run queue and one dirty IO run queue. Work can _not_ migrate\n  > between the different types of run queues. Only work in normal run queues can\n  > migrate to other normal run queues. This has to be taken into account when\n  > evaluating the result.\n\n  See also\n  [`statistics(run_queue_lengths)`](#statistics_run_queue_lengths),\n  [`statistics(total_run_queue_lengths_all)`](#statistics_total_run_queue_lengths_all),\n  [`statistics(total_run_queue_lengths)`](#statistics_total_run_queue_lengths),\n  [`statistics(active_tasks)`](#statistics_active_tasks),\n  [`statistics(active_tasks_all)`](#statistics_active_tasks_all), and\n  [`statistics(total_active_tasks)`](#statistics_total_active_tasks),\n  [`statistics(total_active_tasks_all)`](#statistics_total_active_tasks_all).\n\n  Available since OTP 20.0\n\n- ```erlang\n  statistics(runtime) -> {Total :: non_neg_integer(), SinceLastCall :: non_neg_integer()}\n  ```\n\n  Returns information about runtime, in milliseconds.\n\n  This is the sum of the runtime for all threads in the Erlang runtime system and\n  can therefore be greater than the wall clock time.\n\n  > #### Warning {: .warning }\n  >\n  > This value might wrap due to limitations in the underlying functionality\n  > provided by the operating system that is used.\n\n  Example:\n\n  ```erlang\n  > statistics(runtime).\n  {1690,1620}\n  ```\n\n- ```erlang\n  statistics(scheduler_wall_time) ->\n    [{Id :: pos_integer,\n      ActiveTime :: non_neg_integer(),\n      TotalTime :: non_neg_integer()}] |\n    undefined\n  ```\n  {: #statistics_scheduler_wall_time }\n\n  Returns information describing how much time\n  [normal](#system_info_schedulers) and\n  [dirty CPU](#system_info_dirty_cpu_schedulers) schedulers in the\n  system have been busy. This value is normally a better indicator of how much\n  load an Erlang node is under instead of looking at the CPU utilization provided\n  by tools such as `top` or `sysstat`. This is because `scheduler_wall_time` also\n  includes time where the scheduler is waiting for some other resource (such as\n  an internal mutex) to be available but does not use the CPU. In order to better\n  understand what a scheduler is busy doing you can use\n  [microstate accounting](#statistics_microstate_accounting).\n\n  The definition of a busy scheduler is when it is not idle and not\n  [busy waiting](erl_cmd.md#%2Bsbwt) for new work, that is:\n\n  - Executing process code\n  - Executing linked-in driver or NIF code\n  - Executing BIFs, or any other runtime handling\n  - Garbage collecting\n  - Handling any other memory management\n\n  Notice that a scheduler can also be busy even if the OS has scheduled out the\n  scheduler thread.\n\n  > #### Note {: .info }\n  >\n  > It is recommended to use the module `m:scheduler` instead of this function\n  > directly as it provides an easier way to get the information that you usually\n  > want.\n\n  If [enabled](#system_flag_scheduler_wall_time) this function returns a\n  list of tuples with `{SchedulerId, ActiveTime, TotalTime}`, where `SchedulerId`\n  is an integer ID of the scheduler, `ActiveTime` is the duration the scheduler\n  has been busy, and `TotalTime` is the total time duration since\n  [`scheduler_wall_time`](#system_flag_scheduler_wall_time) activation\n  for the specific scheduler. The time unit returned is undefined and can be\n  subject to change between releases, OSs, and system restarts.\n  `scheduler_wall_time` is only to be used to calculate relative values for\n  scheduler utilization. The `ActiveTime` can never exceed `TotalTime`. The list\n  of scheduler information is unsorted and can appear in different order between\n  calls.\n\n  The [disabled](#system_flag_scheduler_wall_time) this function returns\n  `undefined`.\n\n  The activation time can differ significantly between schedulers. Currently dirty\n  schedulers are activated at system start while normal schedulers are activated\n  some time after the `scheduler_wall_time` functionality is enabled.\n\n  Only information about schedulers that are expected to handle CPU bound work is\n  included in the return values from this function. If you also want information\n  about [dirty I/O schedulers](#system_info_dirty_io_schedulers), use\n  [`statistics(scheduler_wall_time_all)`](#statistics_scheduler_wall_time_all)\n  instead.\n\n  Normal schedulers will have scheduler identifiers in the range\n  `1 =  #### Note {: .info }\n  >\n  > The different types of schedulers handle specific types of jobs. Every job is\n  > assigned to a specific scheduler type. Jobs can migrate between different\n  > schedulers of the same type, but never between schedulers of different types.\n  > This fact has to be taken under consideration when evaluating the result\n  > returned.\n\n  You can use `scheduler_wall_time` to calculate scheduler utilization. First you\n  take a sample of the values returned by\n  `erlang:statistics(scheduler_wall_time)`.\n\n  ```erlang\n  > erlang:system_flag(scheduler_wall_time, true).\n  false\n  > Ts0 = lists:sort(erlang:statistics(scheduler_wall_time)), ok.\n  ok\n  ```\n\n  Some time later the user takes another snapshot and calculates scheduler\n  utilization per scheduler, for example:\n\n  ```erlang\n  > Ts1 = lists:sort(erlang:statistics(scheduler_wall_time)), ok.\n  ok\n  > lists:map(fun({{I, A0, T0}, {I, A1, T1}}) ->\n          {I, (A1 - A0)/(T1 - T0)} end, lists:zip(Ts0,Ts1)).\n  [{1,0.9743474730177548},\n   {2,0.9744843782751444},\n   {3,0.9995902361669045},\n   {4,0.9738012596572161},\n   {5,0.9717956667018103},\n   {6,0.9739235846420741},\n   {7,0.973237033077876},\n   {8,0.9741297293248656}]\n  ```\n\n  Using the same snapshots to calculate a total scheduler utilization:\n\n  ```erlang\n  > {A, T} = lists:foldl(fun({{_, A0, T0}, {_, A1, T1}}, {Ai,Ti}) ->\n          {Ai + (A1 - A0), Ti + (T1 - T0)} end, {0, 0}, lists:zip(Ts0,Ts1)),\n    TotalSchedulerUtilization = A/T.\n  0.9769136803764825\n  ```\n\n  Total scheduler utilization will equal `1.0` when all schedulers have been\n  active all the time between the two measurements.\n\n  Another (probably more) useful value is to calculate total scheduler utilization\n  weighted against maximum amount of available CPU time:\n\n  ```erlang\n  > WeightedSchedulerUtilization = (TotalSchedulerUtilization\n                                    * (erlang:system_info(schedulers)\n                                       + erlang:system_info(dirty_cpu_schedulers)))\n                                   / erlang:system_info(logical_processors_available).\n  0.9769136803764825\n  ```\n\n  This weighted scheduler utilization will reach `1.0` when schedulers are active\n  the same amount of time as maximum available CPU time. If more schedulers exist\n  than available logical processors, this value may be greater than `1.0`.\n\n  As of ERTS version 9.0, the Erlang runtime system will as default have more\n  schedulers than logical processors. This due to the dirty schedulers.\n\n  > #### Note {: .info }\n  >\n  > `scheduler_wall_time` is by default disabled. To enable it, use\n  > [`erlang:system_flag(scheduler_wall_time, true)`](#system_flag_scheduler_wall_time).\n\n  Available since OTP R15B01\n\n- ```erlang\n  statistics(scheduler_wall_time_all) ->\n    [{Id :: pos_integer,\n      ActiveTime :: non_neg_integer(),\n      TotalTime :: non_neg_integer()}] |\n    undefined\n  ```\n  {: #statistics_scheduler_wall_time_all }\n\n  Equivalent to\n  [`statistics(scheduler_wall_time)`](#statistics_scheduler_wall_time),\n  except that it also include information about all dirty I/O schedulers.\n\n  Dirty IO schedulers will have scheduler identifiers in the range\n  [`erlang:system_info(schedulers)`](#system_info_schedulers)`+`[`erlang:system_info(dirty_cpu_schedulers)`](#system_info_dirty_cpu_schedulers)`  #### Note {: .info }\n  >\n  > Note that work executing on dirty I/O schedulers are expected to mainly wait\n  > for I/O. That is, when you get high scheduler utilization on dirty I/O\n  > schedulers, CPU utilization is _not_ expected to be high due to this work.\n\n  Available since OTP 20.0\n\n- ```erlang\n  statistics(total_active_tasks) -> non_neg_integer()\n  ```\n  {: #statistics_total_active_tasks }\n\n  Equivalent to calling\n  `lists:sum(`[`statistics(active_tasks)`](#statistics_active_tasks)`)`,\n  but more efficient.\n\n  Available since OTP 18.3\n\n- ```erlang\n  statistics(total_active_tasks_all) -> non_neg_integer()\n  ```\n  {: #statistics_total_active_tasks_all }\n\n  Equivalent to calling\n  `lists:sum(`[`statistics(active_tasks_all)`](#statistics_active_tasks_all)`)`,\n  but more efficient.\n\n  Available since OTP 20.0\n\n- ```erlang\n  statistics(total_run_queue_lengths) -> non_neg_integer()\n  ```\n  {: #statistics_total_run_queue_lengths }\n\n  Equivalent to calling\n  `lists:sum(`[`statistics(run_queue_lengths)`](#statistics_run_queue_lengths)`)`,\n  but more efficient.\n\n  Available since OTP 18.3\n\n- ```erlang\n  statistics(total_run_queue_lengths_all) -> non_neg_integer()\n  ```\n  {: #statistics_total_run_queue_lengths_all }\n\n  Equivalent to calling\n  `lists:sum(`[`statistics(run_queue_lengths_all)`](#statistics_run_queue_lengths_all)`)`,\n  but more efficient.\n\n  Available since OTP 20.0\n\n- ```erlang\n  statistics(wall_clock) -> {Total :: non_neg_integer(), SinceLastCall :: non_neg_integer()}\n  ```\n  {: #statistics_wall_clock }\n\n  Returns information about wall clock. `wall_clock` can be used in the same\n  manner as `runtime`, except that real time is measured as opposed to runtime or\n  CPU time.","ref":"erlang.html#statistics/1"},{"type":"type","title":"erlang.string/0","doc":"A character string represented by a list of ASCII characters or unicode\ncodepoints.","ref":"erlang.html#t:string/0"},{"type":"type","title":"erlang.sub_level/0","doc":"","ref":"erlang.html#t:sub_level/0"},{"type":"function","title":"erlang.suspend_process/1","doc":"Suspends the process identified by `Suspendee`. Equivalent to calling\n[`erlang:suspend_process(Suspendee, [])`](`suspend_process/2`).\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging only.","ref":"erlang.html#suspend_process/1"},{"type":"function","title":"erlang.suspend_process/2","doc":"Increases the suspend count on the process identified by `Suspendee` and puts it\nin the suspended state if it is not already in that state. A suspended process\nis not scheduled for execution until the process has been resumed. If the\nsuspended process currently is waiting in a `receive ... after` expression, the\ntimer for the timeout will, as of OTP 28.0, also be suspended until the process\nis resumed.\n\nA process can be suspended by multiple processes and can be suspended multiple\ntimes by a single process. A suspended process does not leave the suspended\nstate until its suspend count reaches zero. The suspend count of `Suspendee` is\ndecreased when [`erlang:resume_process(Suspendee)`](`resume_process/1`) is\ncalled by the same process that called `erlang:suspend_process(Suspendee)`. All\nincreased suspend counts on other processes acquired by a process are\nautomatically decreased when the process terminates.\n\nOptions (`Opt`s):\n\n- **`asynchronous`** - A suspend request is sent to the process identified by\n  `Suspendee`. `Suspendee` eventually suspends unless it is resumed before it\n  could suspend. The caller of `erlang:suspend_process/2` returns immediately,\n  regardless of whether `Suspendee` has suspended yet or not. The point in time\n  when `Suspendee` suspends cannot be deduced from other events in the system.\n  It is only guaranteed that `Suspendee` _eventually_ suspends (unless it is\n  resumed). If no `asynchronous` options has been passed, the caller of\n  `erlang:suspend_process/2` is blocked until `Suspendee` has suspended.\n\n- **`{asynchronous, ReplyTag}`** - A suspend request is sent to the process\n  identified by `Suspendee`. When the suspend request has been processed, a\n  reply message is sent to the caller of this function. The reply is on the form\n  `{ReplyTag, State}` where `State` is either:\n\n  - **`exited`** - `Suspendee` has exited.\n\n  - **`suspended`** - `Suspendee` is now suspended.\n\n  - **`not_suspended`** - `Suspendee` is not suspended. This can only happen\n    when the process that issued this request, have called\n    [`resume_process(Suspendee)`](`resume_process/1`) before getting the reply.\n\n  Apart from the reply message, the `{asynchronous, ReplyTag}` option behaves\n  exactly the same as the `asynchronous` option without reply tag.\n\n- **`unless_suspending`** - The process identified by `Suspendee` is suspended\n  unless the calling process already is suspending `Suspendee`. If\n  `unless_suspending` is combined with option `asynchronous`, a suspend request\n  is sent unless the calling process already is suspending `Suspendee` or if a\n  suspend request already has been sent and is in transit. If the calling\n  process already is suspending `Suspendee`, or if combined with option\n  `asynchronous` and a send request already is in transit, `false` is returned\n  and the suspend count on `Suspendee` remains unchanged.\n\nIf the suspend count on the process identified by `Suspendee` is increased,\n`true` is returned, otherwise `false`.\n\n> #### Warning {: .warning }\n>\n> This BIF is intended for debugging only.\n\n> #### Warning {: .warning }\n>\n> You can easily create deadlocks if processes suspends each other (directly or\n> in circles). In ERTS versions prior to ERTS version 10.0, the runtime system\n> prevented such deadlocks, but this prevention has now been removed due to\n> performance reasons.\n\nFailures:\n\n- **`badarg`** - If `Suspendee` is not a process identifier.\n\n- **`badarg`** - If the process identified by `Suspendee` is the same process as\n  the process calling `erlang:suspend_process/2`.\n\n- **`badarg`** - If the process identified by `Suspendee` is not alive.\n\n- **`badarg`** - If the process identified by `Suspendee` resides on another\n  node.\n\n- **`badarg`** - If `OptList` is not a proper list of valid `Opt`s.\n\n- **`system_limit`** - If the process identified by `Suspendee` has been\n  suspended more times by the calling process than can be represented by the\n  currently used internal data structures. The system limit is greater than\n  2,000,000,000 suspends and will never be lower.","ref":"erlang.html#suspend_process/2"},{"type":"function","title":"erlang.system_flag/2","doc":"Sets a system flag to the given value.\n\nThe possible flags to set are:\n\n- ```erlang\n  system_flag(backtrace_depth, non_neg_integer()) -> non_neg_integer()\n  ```\n\n   Sets the maximum depth of call stack back-traces in the exit reason element of\n  `'EXIT'` tuples. The flag also limits the stacktrace depth returned by\n  `process_info/2` item [`current_stacktrace`](#process_info_current_stacktrace).\n\n  Returns the old value of the flag.\n\n- ```erlang\n  system_flag(cpu_topology, cpu_topology()) -> cpu_topology()\n  ```\n  {: #system_flag_cpu_topology }\n\n  > #### Warning {: .warning }\n  >\n  > _This argument is deprecated._ Instead of using this argument, use\n  > command-line argument [`+sct`](erl_cmd.md#%2Bsct) in [erl](erl_cmd.md).\n  >\n  > When this argument is removed, a final CPU topology to use is determined at\n  > emulator boot time.\n\n  Sets the user-defined `CpuTopology`. The user-defined CPU topology overrides any\n  automatically detected CPU topology. By passing `undefined` as `CpuTopology`,\n  the system reverts to the CPU topology automatically detected. The returned\n  value equals the value returned from `erlang:system_info(cpu_topology)` before\n  the change was made.\n\n  Returns the old value of the flag.\n\n  The CPU topology is used when binding schedulers to logical processors. If\n  schedulers are already bound when the CPU topology is changed, the schedulers\n  are sent a request to rebind according to the new CPU topology.\n\n  The user-defined CPU topology can also be set by passing command-line argument\n  [`+sct`](erl_cmd.md#%2Bsct) to [erl](erl_cmd.md).\n\n  For information on type `CpuTopology` and more, see\n  [`erlang:system_info(cpu_topology)`](#system_info_cpu_topology) as\n  well as command-line flags [`+sct`](erl_cmd.md#%2Bsct) and\n  [`+sbt`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md).\n\n- ```erlang\n  system_flag(dirty_cpu_schedulers_online, pos_integer()) -> pos_integer()\n  ```\n  {: #system_flag_dirty_cpu_schedulers_online }\n\n  Sets the number of dirty CPU schedulers online. Range is\n  `1 <= DirtyCPUSchedulersOnline <= N`, where `N` is the smallest of the return\n  values of `erlang:system_info(dirty_cpu_schedulers)` and\n  `erlang:system_info(schedulers_online)`.\n\n  Returns the old value of the flag.\n\n  The number of dirty CPU schedulers online can change if the number of schedulers\n  online changes. For example, if 12 schedulers and 6 dirty CPU schedulers are\n  online, and [`system_flag/2`](`system_flag/2`) is used to set the number of\n  schedulers online to 6, then the number of dirty CPU schedulers online is\n  automatically decreased by half as well, down to 3. Similarly, the number of\n  dirty CPU schedulers online increases proportionally to increases in the number\n  of schedulers online.\n\n  For more information, see\n  [`erlang:system_info(dirty_cpu_schedulers)`](#system_info_dirty_cpu_schedulers)\n  and\n  [`erlang:system_info(dirty_cpu_schedulers_online)`](#system_info_dirty_cpu_schedulers_online).\n\n  Available since OTP 17.0\n\n- ```erlang\n  system_flag(erts_alloc, {Alloc :: atom(), F :: atom(), V :: integer()}) ->\n    ok | notsup\n  ```\n\n  Sets system flags for [`erts_alloc(3)`](erts_alloc.md). `Alloc` is the allocator\n  to affect, for example `binary_alloc`. `F` is the flag to change and `V` is the\n  new value.\n\n  Only a subset of all `erts_alloc` flags can be changed at run time. This subset\n  is currently only the flag [`sbct`](erts_alloc.md#M_sbct).\n\n  Returns `ok` if the flag was set or `notsup` if not supported by `erts_alloc`.\n\n  Available since OTP 20.2.3\n\n- ```erlang\n  system_flag(fullsweep_after, non_neg_integer()) -> non_neg_integer()\n  ```\n\n  Sets system flag `fullsweep_after`. `Number` is a non-negative integer\n  indicating how many times generational garbage collections can be done without\n  forcing a fullsweep collection. The value applies to new processes, while\n  processes already running are not affected.\n\n  Returns the old value of the flag.\n\n  In low-memory systems (especially without virtual memory), setting the value to\n  `0` can help to conserve memory.\n\n  This value can also be set through (OS) environment variable\n  `ERL_FULLSWEEP_AFTER`.\n\n- ```erlang\n  system_flag(microstate_accounting, true | false | reset) -> boolean()\n  ```\n  {: #system_flag_microstate_accounting }\n\n  Turns on/off microstate accounting measurements. When passing reset, all\n  counters are reset to 0.\n\n  For more information see\n  [`statistics(microstate_accounting)`](#statistics_microstate_accounting).\n\n  Available since OTP 19.0\n\n- ```erlang\n  system_flag(min_heap_size, non_neg_integer()) -> non_neg_integer()\n  ```\n\n  Sets the default minimum heap size for processes. The size is specified in\n  words. The new `min_heap_size` effects only processes spawned after the change\n  of `min_heap_size` has been made. `min_heap_size` can be set for individual\n  processes by using `spawn_opt/4` or `process_flag/2`.\n\n  Returns the old value of the flag.\n\n- ```erlang\n  system_flag(min_bin_vheap_size, non_neg_integer()) -> non_neg_integer()\n  ```\n\n  Sets the default minimum binary virtual heap size for processes. The size is\n  specified in words. The new `min_bin_vhheap_size` effects only processes spawned\n  after the change of `min_bin_vheap_size` has been made. `min_bin_vheap_size` can\n  be set for individual processes by using [`spawn_opt/2,3,4`](`spawn_opt/4`) or\n  `process_flag/2`.\n\n  Returns the old value of the flag.\n\n  Available since OTP R13B04\n\n- ```erlang\n  system_flag(max_heap_size, max_heap_size()) -> max_heap_size()\n  ```\n  {: #system_flag_max_heap_size }\n\n  Sets the default maximum heap size settings for processes. The size is specified\n  in words. The new `max_heap_size` effects only processes spawned after the\n  change has been made. `max_heap_size` can be set for individual processes using\n  [`spawn_opt/2,3,4`](`spawn_opt/4`) or\n  [`process_flag/2`](#process_flag_max_heap_size).\n\n  Returns the old value of the flag.\n\n  For details on how the heap grows, see\n  [Sizing the heap](GarbageCollection.md#sizing-the-heap) in the ERTS internal\n  documentation.\n\n  Available since OTP 19.0\n\n- ```erlang\n  system_flag(multi_scheduling, BlockState) -> OldBlockState when\n    BlockState :: block | unblock | block_normal | unblock_normal,\n    OldBlockState :: blocked | disabled | enabled\n  ```\n  {: #system_flag_multi_scheduling }\n\n  If multi-scheduling is enabled, more than one scheduler thread is used by the\n  emulator. Multi-scheduling can be blocked in two different ways. Either all\n  schedulers but one is blocked, or all _normal_ schedulers but one is blocked.\n  When only normal schedulers are blocked, dirty schedulers are free to continue\n  to schedule processes.\n\n  If `BlockState =:= block`, multi-scheduling is blocked. That is, one and only\n  one scheduler thread will execute. If `BlockState =:= unblock` and no one else\n  blocks multi-scheduling, and this process has blocked only once,\n  multi-scheduling is unblocked.\n\n  If `BlockState =:= block_normal`, normal multi-scheduling is blocked. That is,\n  only one normal scheduler thread will execute, but multiple dirty schedulers can\n  execute. If `BlockState =:= unblock_normal` and no one else blocks normal\n  multi-scheduling, and this process has blocked only once, normal\n  multi-scheduling is unblocked.\n\n  One process can block multi-scheduling and normal multi-scheduling multiple\n  times. If a process has blocked multiple times, it must unblock exactly as many\n  times as it has blocked before it has released its multi-scheduling block. If a\n  process that has blocked multi-scheduling or normal multi-scheduling exits, it\n  automatically releases its blocking of multi-scheduling and normal\n  multi-scheduling.\n\n  The return values are `disabled`, `blocked`, `blocked_normal`, or `enabled`. The\n  returned value describes the state just after the call to\n  `erlang:system_flag(multi_scheduling, BlockState)` has been made. For\n  information about the return values, see\n  [`erlang:system_info(multi_scheduling)`](#system_info_multi_scheduling).\n\n  > #### Note {: .info }\n  >\n  > Blocking of multi-scheduling and normal multi-scheduling is normally not\n  > needed. If you feel that you need to use these features, consider it a few\n  > more times again. Blocking multi-scheduling is only to be used as a last\n  > resort, as it is most likely a _very inefficient_ way to solve the problem.\n\n  See also\n  [`erlang:system_info(multi_scheduling)`](#system_info_multi_scheduling),\n  [`erlang:system_info(normal_multi_scheduling_blockers)`](#system_info_normal_multi_scheduling_blockers),\n  [`erlang:system_info(multi_scheduling_blockers)`](#system_info_multi_scheduling_blockers),\n  and [`erlang:system_info(schedulers)`](#system_info_schedulers).\n\n- ```erlang\n  system_flag(outstanding_system_requests_limit, 1..134217727) -> 1..134217727\n  ```\n  {: #system_flag_outstanding_system_requests_limit }\n\n  Sets a limit on the amount of outstanding requests made by a system process\n  orchestrating system wide changes. Currently there are two such processes:\n\n  - **The Code Purger** - The code purger orchestrates checking of references to\n    old code before old code is removed from the system.\n\n  - **The Literal Area Collector** - The literal area collector orchestrates\n    copying of references from old literal areas before removal of such areas from\n    the system.\n\n  Each of these processes are allowed to have as many outstanding requests as this\n  limit is set to. By default this limit is set to twice the amount of\n  [schedulers](#system_info_schedulers) on the system. This will ensure\n  that schedulers will have enough work scheduled to perform these operations as\n  quickly as possible at the same time as other work will be interleaved with this\n  work. Currently used limit can be checked by calling\n  [`erlang:system_info(outstanding_system_requests_limit)`](#system_info_outstanding_system_requests_limit).\n\n  This limit can also be set by passing the command line argument\n  [`+zosrl  `](erl_cmd.md#%2Bzosrl) to `erl`.\n\n  Available since OTP 24.2\n\n- ```erlang\n  system_flag(scheduler_bind_type, scheduler_bind_type() | default_bind) ->\n    scheduler_bind_type()\n  ```\n  {: #system_flag_scheduler_bind_type }\n\n  > #### Warning {: .warning }\n  >\n  > _This argument is deprecated._ Instead of using this argument, use\n  > command-line argument [`+sbt`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md). When\n  > this argument is removed, a final scheduler bind type to use is determined at\n  > emulator boot time.\n\n  Controls if and how schedulers are bound to logical processors.\n\n  When `erlang:system_flag(scheduler_bind_type, How)` is called, an asynchronous\n  signal is sent to all schedulers online, causing them to try to bind or unbind\n  as requested.\n\n  > #### Note {: .info }\n  >\n  > If a scheduler fails to bind, this is often silently ignored, as it is not\n  > always possible to verify valid logical processor identifiers. If an error is\n  > reported, an error event is logged. To verify that the schedulers have bound\n  > as requested, call\n  > [`erlang:system_info(scheduler_bindings)`](#system_info_scheduler_bindings).\n\n  Schedulers can be bound on newer Linux, Solaris, FreeBSD, and Windows systems,\n  but more systems will be supported in future releases.\n\n  In order for the runtime system to be able to bind schedulers, the CPU topology\n  must be known. If the runtime system fails to detect the CPU topology\n  automatically, it can be defined. For more information on how to define the CPU\n  topology, see command-line flag [`+sct`](erl_cmd.md#%2Bsct) in\n  [erl](erl_cmd.md).\n\n  The runtime system does by default _not_ bind schedulers to logical processors.\n\n  > #### Note {: .info }\n  >\n  > If the Erlang runtime system is the only OS process binding threads to logical\n  > processors, this improves the performance of the runtime system. However, if\n  > other OS processes (for example, another Erlang runtime system) also bind\n  > threads to logical processors, there can be a performance penalty instead.\n  > Sometimes this performance penalty can be severe. If so, it is recommended to\n  > not bind the schedulers.\n\n  Schedulers can be bound in different ways. Argument `How` determines how\n  schedulers are bound and can be any of the following:\n\n  - **`unbound`** - Same as command-line argument [`+sbt u`](erl_cmd.md#%2Bsbt) in\n    [erl](erl_cmd.md).\n\n  - **`no_spread`** - Same as command-line argument [`+sbt ns`](erl_cmd.md#%2Bsbt)\n    in [erl](erl_cmd.md).\n\n  - **`thread_spread`** - Same as command-line argument\n    [`+sbt ts`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md).\n\n  - **`processor_spread`** - Same as command-line argument\n    [`+sbt ps`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md).\n\n  - **`spread`** - Same as command-line argument [`+sbt s`](erl_cmd.md#%2Bsbt) in\n    [erl](erl_cmd.md).\n\n  - **`no_node_thread_spread`** - Same as command-line argument\n    [`+sbt nnts`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md).\n\n  - **`no_node_processor_spread`** - Same as command-line argument\n    [`+sbt nnps`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md).\n\n  - **`thread_no_node_processor_spread`** - Same as command-line argument\n    [`+sbt tnnps`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md).\n\n  - **`default_bind`** - Same as command-line argument\n    [`+sbt db`](erl_cmd.md#%2Bsbt) in [erl](erl_cmd.md).\n\n  The returned value equals `How` before flag `scheduler_bind_type` was changed.\n\n  Failures:\n\n  - **`notsup`** - If binding of schedulers is not supported.\n\n  - **`badarg`** - If `How` is not one of the documented alternatives.\n\n  - **`badarg`** - If CPU topology information is unavailable.\n\n  The scheduler bind type can also be set by passing command-line argument\n  [`+sbt`](erl_cmd.md#%2Bsbt) to [erl](erl_cmd.md).\n\n  For more information, see\n  [`erlang:system_info(scheduler_bind_type)`](#system_info_scheduler_bind_type),\n  [`erlang:system_info(scheduler_bindings)`](#system_info_scheduler_bindings),\n  as well as command-line flags [`+sbt`](erl_cmd.md#%2Bsbt) and\n  [`+sct`](erl_cmd.md#%2Bsct) in [erl](erl_cmd.md).\n\n- ```erlang\n  system_flag(scheduler_wall_time, boolean()) -> boolean()\n  ```\n  {: #system_flag_scheduler_wall_time }\n\n  Try enable or disable scheduler wall time measurements by passing `Boolean` as\n  either `true` or `false`.\n\n  For more information about how to use scheduler wall time measurements, see\n  [`statistics(scheduler_wall_time)`](#statistics_scheduler_wall_time).\n\n  Scheduler wall time measurements has a node global state. It is either enabled\n  for all processes on the node or disabled for all processes. Each process has a\n  logical counter initialized as zero. A call with `Boolean` as `true` will\n  increase that counter one step for the calling process. A call with `false` will\n  decrease it one step unless it already is zero. The node global state for\n  `scheduler_wall_time` will be enabled as long as there is at least one process\n  alive with a counter value larger than zero. When a process terminates, its\n  counter will also disappear. To ensure `scheduler_wall_time` is kept enabled,\n  the process that enabled it must therefore be kept alive.\n\n  Returns the old value of the node global state, `true` if scheduler wall time\n  measurements were enabled, `false` if it were disabled.\n\n  Scheduler wall time measurements do consume some cpu overhead and should not be\n  left turned on unless used.\n\n  Available since OTP R15B01\n\n- ```erlang\n  system_flag(schedulers_online, pos_integer()) -> pos_integer()\n  ```\n  {: #system_flag_schedulers_online }\n\n  Sets the number of schedulers online. Range is\n  `1 <= SchedulersOnline <= erlang:system_info(schedulers)`.\n\n  Returns the old value of the flag.\n\n  If the emulator was built with support for\n  [dirty schedulers](#system_flag_dirty_cpu_schedulers_online), changing\n  the number of schedulers online can also change the number of dirty CPU\n  schedulers online. For example, if 12 schedulers and 6 dirty CPU schedulers are\n  online, and [`system_flag/2`](`system_flag/2`) is used to set the number of\n  schedulers online to 6, then the number of dirty CPU schedulers online is\n  automatically decreased by half as well, down to 3. Similarly, the number of\n  dirty CPU schedulers online increases proportionally to increases in the number\n  of schedulers online.\n\n  For more information, see\n  [`erlang:system_info(schedulers)`](#system_info_schedulers) and\n  [`erlang:system_info(schedulers_online)`](#system_info_schedulers_online).\n\n- ```erlang\n  system_flag(system_logger, logger | undefined | pid()) -> logger | undefined | pid()\n  ```\n\n  Sets the process that will receive the logging messages generated by ERTS. If\n  set to `undefined`, all logging messages generated by ERTS will be dropped. The\n  messages will be in the format:\n\n  ```erlang\n  {log,Level,Format,ArgList,Metadata} where\n\n  Level = atom(),\n  Format = string(),\n  ArgList = list(term()),\n  Metadata = #{ pid => pid(),\n     group_leader => pid(),\n     time := logger:timestamp(),\n     error_logger := #{ emulator := true, tag := atom() }\n  ```\n\n  If the `system_logger` process dies, this flag will be reset to `logger`.\n\n  The default is the process named `logger`.\n\n  Returns the old value of the flag.\n\n  > #### Note {: .info }\n  >\n  > This function is designed to be used by the KERNEL `m:logger`. Be careful if\n  > you change it to something else as log messages may be lost. If you want to\n  > intercept emulator log messages, do it by adding a specialized handler to the\n  > KERNEL logger.\n\n  Available since OTP 21.2\n\n- ```erlang\n  system_flag(trace_control_word, non_neg_integer()) -> non_neg_integer()\n  ```\n\n  Sets the value of the node trace control word to `TCW`, which is to be an\n  unsigned integer. For more information, see function\n  [`set_tcw`](match_spec.md#set_tcw) in section \"Match Specifications in Erlang\"\n  in the User's Guide.\n\n  Returns the old value of the flag.\n\n- ```erlang\n  system_flag(time_offset, finalize) -> preliminary | final | volatile\n  ```\n  {: #system_flag_time_offset }\n\n  Finalizes the [time offset](`time_offset/0`) when\n  [single time warp mode](time_correction.md#single-time-warp-mode) is used. If\n  another time warp mode is used, the time offset state is left unchanged.\n\n  Returns the old state identifier, that is:\n\n  - If `preliminary` is returned, finalization was performed and the time offset\n    is now final.\n  - If `final` is returned, the time offset was already in the final state. This\n    either because another `erlang:system_flag(time_offset, finalize)` call or\n    because [no time warp mode](time_correction.md#no-time-warp-mode) is used.\n  - If `volatile` is returned, the time offset cannot be finalized because\n    [multi-time warp mode](time_correction.md#multi-time-warp-mode) is used.\n\n  Available since OTP 18.0","ref":"erlang.html#system_flag/2"},{"type":"function","title":"erlang.system_info/1","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2023-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\nReturns information about the current system.\n\nThe documentation of this function is broken into the following sections in\norder to make it easier to navigate.\n\n- [`Memory Allocation`](`m:erlang#system_info/1-memory-allocation`) -\n  [`allocated_areas`](`m:erlang#system_info_allocated_areas`),\n  [`allocator`](`m:erlang#system_info_allocator`),\n  [`alloc_util_allocators`](`m:erlang#system_info_alloc_util_allocators`),\n  [`allocator_sizes`](`m:erlang#system_info_allocator_sizes`)\n\n- [`CPU Topology`](`m:erlang#system_info/1-cpu-topology`) -\n  [`cpu_topology`](`m:erlang#system_info_cpu_topology`),\n  [`logical_processors`](`m:erlang#system_info_logical_processors`),\n  [`update_cpu_info`](`m:erlang#system_info_update_cpu_info`)\n\n- [`Process Information`](`m:erlang#system_info/1-process-information`) -\n  [`fullsweep_after`](`m:erlang#system_info_fullsweep_after`),\n  [`garbage_collection`](`m:erlang#system_info_garbage_collection`),\n  [`heap_sizes`](`m:erlang#system_info_heap_sizes`),\n  [`heap_type`](`m:erlang#system_info_heap_type`),\n  [`max_heap_size`](`m:erlang#system_info_max_heap_size`),\n  [`message_queue_data`](`m:erlang#system_info_message_queue_data`),\n  [`min_heap_size`](`m:erlang#system_info_min_heap_size`),\n  [`min_bin_vheap_size`](`m:erlang#system_info_min_bin_vheap_size`),\n  [`procs`](`m:erlang#system_info_procs`)\n\n- [`System Limits`](`m:erlang#system_info/1-system-limits`) -\n  [`atom_count`](`m:erlang#system_info_atom_count`),\n  [`atom_limit`](`m:erlang#system_info_atom_limit`),\n  [`ets_count`](`m:erlang#system_info_ets_count`),\n  [`ets_limit`](`m:erlang#system_info_ets_limit`),\n  [`port_count`](`m:erlang#system_info_port_count`),\n  [`port_limit`](`m:erlang#system_info_port_limit`),\n  [`process_count`](`m:erlang#system_info_process_count`),\n  [`process_limit`](`m:erlang#system_info_process_limit`)\n\n- [`System Time`](`m:erlang#system_info/1-system-time`) -\n  [`end_time`](`m:erlang#system_info_end_time`),\n  [`os_monotonic_time_source`](`m:erlang#system_info_os_monotonic_time_source`),\n  [`os_system_time_source`](`m:erlang#system_info_os_system_time_source`),\n  [`start_time`](`m:erlang#system_info_start_time`),\n  [`time_correction`](`m:erlang#system_info_time_correction`),\n  [`time_offset`](`m:erlang#system_info_time_offset`),\n  [`time_warp_mode`](`m:erlang#system_info_time_warp_mode`),\n  [`tolerant_timeofday`](`m:erlang#system_info_tolerant_timeofday`)\n\n- [`Scheduler Information`](`m:erlang#system_info/1-scheduler-information`) -\n  [`dirty_cpu_schedulers`](`m:erlang#system_info_dirty_cpu_schedulers`),\n  [`dirty_cpu_schedulers_online`](`m:erlang#system_info_dirty_cpu_schedulers_online`),\n  [`dirty_io_schedulers`](`m:erlang#system_info_dirty_io_schedulers`),\n  [`multi_scheduling`](`m:erlang#system_info_multi_scheduling`),\n  [`multi_scheduling_blockers`](`m:erlang#system_info_multi_scheduling_blockers`),\n  [`normal_multi_scheduling_blockers`](`m:erlang#system_info_normal_multi_scheduling_blockers`),\n  [`scheduler_bind_type`](`m:erlang#system_info_scheduler_bind_type`),\n  [`scheduler_bindings`](`m:erlang#system_info_scheduler_bindings`),\n  [`scheduler_id`](`m:erlang#system_info_scheduler_id`),\n  [`schedulers`](`m:erlang#system_info_schedulers`),\n  [`smp_support`](`m:erlang#system_info_smp_support`),\n  [`threads`](`m:erlang#system_info_threads`),\n  [`thread_pool_size`](`m:erlang#system_info_thread_pool_size`)\n\n- [`Distribution Information`](`m:erlang#system_info/1-distribution-information`) -\n  [`creation`](`m:erlang#system_info_creation`),\n  [`delayed_node_table_gc`](`m:erlang#system_info_delayed_node_table_gc`),\n  [`dist`](`m:erlang#system_info_dist`),\n  [`dist_buf_busy_limit`](`m:erlang#system_info_dist_buf_busy_limit`),\n  [`dist_ctrl`](`m:erlang#system_info_dist_ctrl`)\n\n- [`System Information`](`m:erlang#system_info/1-system-information`) -\n  [`c_compiler_used`](`m:erlang#system_info_c_compiler_used`),\n  [`check_io`](`m:erlang#system_info_check_io`),\n  [`debug_compiled`](`m:erlang#system_info_debug_compiled`),\n  [`driver_version`](`m:erlang#system_info_driver_version`),\n  [`dynamic_trace`](`m:erlang#system_info_dynamic_trace`),\n  [`dynamic_trace_probes`](`m:erlang#system_info_dynamic_trace_probes`),\n  [`emu_flavor`](`m:erlang#system_info_emu_flavor`),\n  [`emu_type`](`m:erlang#system_info_emu_type`),\n  [`info`](`m:erlang#system_info_info`),\n  [`kernel_poll`](`m:erlang#system_info_kernel_poll`),\n  [`loaded`](`m:erlang#system_info_loaded`),\n  [`machine`](`m:erlang#system_info_machine`),\n  [`modified_timing_level`](`m:erlang#system_info_modified_timing_level`),\n  [`nif_version`](`m:erlang#system_info_nif_version`),\n  [`otp_release`](`m:erlang#system_info_otp_release`),\n  [`outstanding_system_requests_limit`](`m:erlang#system_info_outstanding_system_requests_limit`),\n  [`port_parallelism`](`m:erlang#system_info_port_parallelism`),\n  [`system_architecture`](`m:erlang#system_info_system_architecture`),\n  [`system_logger`](`m:erlang#system_info_system_logger`),\n  [`system_version`](`m:erlang#system_info_system_version`),\n  [`trace_control_word`](`m:erlang#system_info_trace_control_word`),\n  [`version`](`m:erlang#system_info_version`),\n  [`wordsize`](`m:erlang#system_info_wordsize`)","ref":"erlang.html#system_info/1"},{"type":"function","title":"Memory Allocation - erlang.system_info/1","doc":"Returns various information about the memory allocators of the current system (emulator) as specified by `Item`:\n\n* __`allocated_areas`__{: #system_info_allocated_areas } - Returns `[tuple()]` with\n  information about miscellaneous allocated memory areas.\n\n  Each tuple contains an atom describing the type of memory as first element and\n  the amount of allocated memory in bytes as second element. When information\n  about allocated and used memory is present, also a third element is present,\n  containing the amount of used memory in bytes.\n\n  `erlang:system_info(allocated_areas)` is intended for debugging, and the content\n  is highly implementation-dependent. The content of the results therefore\n  changes when needed without prior notice.\n\n  Notice that the sum of these values is _not_ the total amount of memory\n  allocated by the emulator. Some values are part of other values, and some\n  memory areas are not part of the result. For information about the total amount\n  of memory allocated by the emulator, see\n  [`erlang:memory/0,1`](`erlang:memory/0`).\n\n- `allocator`{: #system_info_allocator } - Returns\n  ```\n  {Allocator :: undefined | glibc,\n   Version :: [non_neg_integer()],\n   Features :: [atom()],\n   Settings :: [{Subsystem :: atom(),\n                 [{Parameter :: atom(),\n                   Value :: term()}]\n                 }]\n  }\n  ```\n\n  where\n\n  - `Allocator` corresponds to the `malloc()` implementation used. If\n    `Allocator` equals `undefined`, the `malloc()` implementation used cannot be\n    identified. `glibc` can be identified.\n  - `Version` is a list of integers (but not a string) representing the\n    version of the `malloc()` implementation used.\n  - `Features` is a list of atoms representing the allocation features used.\n  - `Settings` is a list of subsystems, their configurable parameters, and used\n    values. Settings can differ between different combinations of platforms,\n    allocators, and allocation features. Memory sizes are given in bytes.\n\n  See also \"System Flags Effecting erts_alloc\" in\n  [`erts_alloc(3)`](erts_alloc.md#flags).\n\n- `{allocator, Alloc}`{: #system_info_allocator_tuple } - Returns\n  information about the specified allocator. As from ERTS 5.6.1, the return\n  value is a list of `{instance, InstanceNo, InstanceInfo}` tuples, where\n  `InstanceInfo` contains information about a specific instance of the\n  allocator. If `Alloc` is not a recognized allocator, `undefined` is\n  returned. If `Alloc` is disabled, `false` is returned.\n\n  Notice that the information returned is highly implementation-dependent and\n  can be changed or removed at any time without prior notice. It was initially\n  intended as a tool when developing new allocators, but as it can be of\n  interest for others it has been briefly documented.\n\n  The recognized allocators are listed in [`erts_alloc(3)`](erts_alloc.md).\n  Information about super carriers can be obtained from ERTS 8.0 with\n  `{allocator, erts_mmap}` or from ERTS 5.10.4; the returned list when calling\n  with `{allocator, mseg_alloc}` also includes an `{erts_mmap, _}` tuple as one\n  element in the list.\n\n  After reading the `erts_alloc(3)` documentation, the returned information more\n  or less speaks for itself, but it can be worth explaining some things. Call\n  counts are presented by two values, the first value is giga calls, and the\n  second value is calls. `mbcs` and `sbcs` denote multi-block carriers, and\n  single-block carriers, respectively. Sizes are presented in bytes. When a\n  size is not presented, it is the amount of something. Sizes and amounts are\n  often presented by three values:\n\n  - The first is the current value.\n  - The second is the maximum value since the last call to\n    `erlang:system_info({allocator, Alloc})`.\n  - The third is the maximum value since the emulator was started.\n\n  If only one value is present, it is the current value. `fix_alloc` memory\n  block types are presented by two values. The first value is the memory pool\n  size and the second value is the used memory size.\n\n- `alloc_util_allocators`{: #system_info_alloc_util_allocators } - Returns a\n  list of the names of all allocators using the ERTS internal `alloc_util`\n  framework as atoms. For more information, see section\n  [The alloc_util framework](erts_alloc.md#alloc_util) in `erts_alloc(3)`.\n\n- `{allocator_sizes, Alloc}`{: #system_info_allocator_sizes } - Returns\n  various size information for the specified allocator. The information\n  returned is a subset of the information returned by\n  [`erlang:system_info({allocator, Alloc})`](`m:erlang#system_info_allocator_tuple`).","ref":"erlang.html#system_info/1-memory-allocation"},{"type":"function","title":"CPU Topology - erlang.system_info/1","doc":"Returns various information about the CPU topology of the current system (emulator) as specified by `Item`:\n\n- `cpu_topology`{: #system_info_cpu_topology } - Returns the `t:cpu_topology()`\n  currently used by the emulator. The CPU topology is used when binding\n  schedulers to logical processors. The CPU topology used is the\n  [user-defined CPU topology](`m:erlang#system_info_cpu_topology_defined`), if\n  such exists, otherwise the\n  [automatically detected CPU topology](`m:erlang#system_info_cpu_topology_detected`),\n  if such exists. If no CPU topology exists, `undefined` is returned.\n\n- `{cpu_topology, defined}`{: #system_info_cpu_topology_defined } - Returns\n  the user-defined `t:cpu_topology()`. For more information, see command-line flag\n  [`+sct`](erl_cmd.md#+sct) in `erl(1)` and argument\n  [`cpu_topology`](`m:erlang#system_info_cpu_topology`).\n\n- `{cpu_topology, detected}`{: #system_info_cpu_topology_detected } -\n  Returns the automatically detected `t:cpu_topology()`. The emulator detects the\n  CPU topology on some newer Linux, Solaris, FreeBSD, and Windows systems. On\n  Windows system with more than 32 logical processors, the CPU topology is not\n  detected.\n\n  For more information, see argument\n  [`cpu_topology`](`m:erlang#system_info_cpu_topology`).\n\n- `{cpu_topology, used}` - Returns `CpuTopology` used by the emulator. For\n  more information, see argument\n  [`cpu_topology`](`m:erlang#system_info_cpu_topology`).\n\n- `logical_processors`{: #system_info_logical_processors } - Returns the\n  detected number of logical processors configured in the system. The return\n  value is either an integer, or the atom `unknown` if the emulator cannot\n  detect the configured logical processors.\n\n- `logical_processors_available`{: #system_info_logical_processors_available\n  } - Returns the detected number of logical processors available to the Erlang\n  runtime system. The return value is either an integer, or the atom `unknown`\n  if the emulator cannot detect the available logical processors. The number of\n  available logical processors is less than or equal to the number of\n  [logical processors online](`m:erlang#system_info_logical_processors_online`).\n\n- `logical_processors_online`{: #system_info_logical_processors_online } -\n  Returns the detected number of logical processors online on the system. The\n  return value is either an integer, or the atom `unknown` if the emulator\n  cannot detect logical processors online. The number of logical processors\n  online is less than or equal to the number of\n  [logical processors configured](`m:erlang#system_info_logical_processors`).\n\n- `cpu_quota`{: #system_info_cpu_quota } - Returns the detected CPU quota\n  the emulator is limited by. The return value is an integer saying how many\n  processors' worth of runtime we get (between 1 and the number of logical\n  processors), or the atom `unknown` if the emulator cannot detect a quota.\n\n- `update_cpu_info`{: #system_info_update_cpu_info } - The runtime system\n  rereads the CPU information available and updates its internally stored\n  information about the\n  [detected CPU topology](`m:erlang#system_info_cpu_topology_detected`) and the\n  number of logical processors\n  [configured](`m:erlang#system_info_logical_processors`),\n  [online](`m:erlang#system_info_logical_processors_online`),\n  [available](`m:erlang#system_info_logical_processors_available`), and\n  [cpu quota](`m:erlang#system_info_cpu_quota`).\n\n  If the CPU information has changed since the last time it was read, the atom\n  `changed` is returned, otherwise the atom `unchanged`. If the CPU information\n  has changed, you probably want to\n  [adjust the number of schedulers online](`m:erlang#system_flag_schedulers_online`).\n  You typically want to have as many schedulers online as\n  [logical processors available](`m:erlang#system_info_logical_processors_available`).\n  \n  Since: OTP R14B","ref":"erlang.html#system_info/1-cpu-topology"},{"type":"function","title":"Process Information - erlang.system_info/1","doc":"Returns information about the default process heap settings:\n\n- `fullsweep_after`{: #system_info_fullsweep_after } - Returns\n  `{fullsweep_after, integer() >= 0}`, which is the `fullsweep_after` garbage\n  collection setting used by default. For more information, see\n  `garbage_collection` described below.\n\n- `garbage_collection`{: #system_info_garbage_collection } - Returns\n  `t:garbage_collection_defaults/0` describing the default garbage collection settings.\n  A process spawned on the local node by a `spawn` or `spawn_link` uses these\n  garbage collection settings. The default settings can be changed by using\n  [`erlang:system_flag/2`](`erlang:system_flag/2`).\n  [`spawn_opt/2,3,4`](`erlang:spawn_opt/4`) can spawn a process that does not\n  use the default settings.\n\n- `heap_sizes`{: #system_info_heap_sizes } - Returns a list of integers\n  representing valid heap sizes in words. All Erlang heaps are sized from sizes\n  in this list.\n\n- `heap_type`{: #system_info_heap_type } - Returns the heap type used by the\n  current emulator. One heap type exists:\n\n  - `private` - Each process has a heap reserved for its use and no\n    references between heaps of different processes are allowed. Messages\n    passed between processes are copied between heaps.\n\n- `max_heap_size`{: #system_info_max_heap_size } - Returns\n  `{max_heap_size, MaxHeapSize}`, where `MaxHeapSize` is the current\n  system-wide maximum heap size settings for spawned processes. This setting\n  can be set using the command-line flags [`+hmax`](erl_cmd.md#+hmax),\n  [`+hmaxk`](erl_cmd.md#+hmaxk), [`+hmaxel`](erl_cmd.md#+hmaxel) and\n  [`+hmaxibl`](erl_cmd.md#+hmaxib) in `erl(1)`. It can also be changed at runtime\n  using\n  [`erlang:system_flag(max_heap_size, MaxHeapSize)`](`m:erlang#system_flag_max_heap_size`).\n  For more details about the `max_heap_size` process flag, see\n  [`process_flag(max_heap_size, MaxHeapSize)`](`m:erlang#process_flag_max_heap_size`).\n  \n  Since: OTP 19.0\n\n- `message_queue_data`{: #system_info_message_queue_data } - Returns the\n  default value of the `message_queue_data` process flag, which can be either\n  `off_heap` or `on_heap`. The default value is set by the command-line\n  argument [`+hmqd`](erl_cmd.md#+hmqd) in `erl(1)`. For more information, see the\n  documentation of\n  [`process_flag(message_queue_data, MQD)`](`m:erlang#process_flag_message_queue_data`).\n  \n  Since: OTP 19.0\n\n- `min_heap_size`{: #system_info_min_heap_size } - Returns\n  `{min_heap_size, MinHeapSize}`, where `MinHeapSize` is the current\n  system-wide minimum heap size for spawned processes.\n  \n  Since: OTP R13B04\n\n- `min_bin_vheap_size`{: #system_info_min_bin_vheap_size } - Returns\n  `{min_bin_vheap_size, MinBinVHeapSize}`, where `MinBinVHeapSize` is the\n  current system-wide minimum binary virtual heap size for spawned processes.\n  \n  Since: OTP R13B04\n\n- `procs`{: #system_info_procs } - Returns a binary containing a string of\n  process and port information formatted as in Erlang crash dumps. For more\n  information, see section\n  [How to interpret the Erlang crash dumps](crash_dump.md) in the User's Guide.","ref":"erlang.html#system_info/1-process-information"},{"type":"function","title":"System Limits - erlang.system_info/1","doc":"Returns information about the current system (emulator) limits as specified by `Item`:\n\n- `atom_count`{: #system_info_atom_count } - Returns the number of atoms\n  currently existing at the local node. The value is given as an integer.\n  \n  Since: OTP 20.0\n\n- `atom_limit`{: #system_info_atom_limit } - Returns the maximum number of\n  atoms allowed. This limit can be increased at startup by passing\n  command-line flag [`+t`](erl_cmd.md#+t_size) to `erl(1)`.\n  \n  Since: OTP 20.0\n\n- `ets_count`{: #system_info_ets_count } - Returns the number of ETS tables\n  currently existing at the local node.\n  \n  Since: OTP 21.1\n\n- `ets_limit`{: #system_info_ets_limit } - Returns the limit for number of\n  ETS tables. This limit is [partially obsolete](`m:ets#max_ets_tables`) and\n  number of tables are only limited by available memory.\n  \n  Since: OTP R16B03\n\n- `port_count`{: #system_info_port_count } - Returns the number of ports\n  currently existing at the local node. The value is given as an integer. This\n  is the same value as returned by `length(erlang:ports())`, but more\n  efficient.\n  \n  Since: OTP R16B\n\n- `port_limit`{: #system_info_port_limit } - Returns the maximum number of\n  simultaneously existing ports at the local node as an integer. This limit can\n  be configured at startup by using command-line flag [`+Q`](erl_cmd.md#+Q) in\n  `erl(1)`.\n  \n  Since OTP R16B\n\n- `process_count`{: #system_info_process_count } - Returns the number of\n  processes currently existing at the local node. The value is given as an\n  integer. This is the same value as returned by `length(processes())`, but\n  more efficient.\n\n- `process_limit`{: #system_info_process_limit } - Returns the maximum\n  number of simultaneously existing processes at the local node. The value is\n  given as an integer. This limit can be configured at startup by using\n  command-line flag [`+P`](erl_cmd.md#+P) in `erl(1)`.","ref":"erlang.html#system_info/1-system-limits"},{"type":"function","title":"System Time - erlang.system_info/1","doc":"Returns information about the current system (emulator) time as specified by `Item`:\n\n- `end_time`{: #system_info_end_time } - The last\n  [Erlang monotonic time](`erlang:monotonic_time/0`) in `native`\n  [time unit](`t:time_unit/0`) that can be represented internally in\n  the current Erlang runtime system instance. The time between the\n  [start time](`m:erlang#system_info_start_time`) and the end time is at least a\n  quarter of a millennium.\n  \n  Since: OTP 18.0\n\n- `os_monotonic_time_source`{: #system_info_os_monotonic_time_source } -\n  Returns a list containing information about the source of\n  [OS monotonic time](time_correction.md#os-monotonic-time) that is used by the\n  runtime system.\n\n  If `[]` is returned, no OS monotonic time is available. The list contains\n  two-tuples with `Key`s as first element, and `Value`s as second element. The\n  order of these tuples is undefined. The following tuples can be part of the\n  list, but more tuples can be introduced in the future:\n\n  - `{function, Function}` - `Function` is the name of the function used.\n    This tuple always exists if OS monotonic time is available to the runtime\n    system.\n\n  - `{clock_id, ClockId}` - This tuple only exists if `Function` can be used\n    with different clocks. `ClockId` corresponds to the clock identifier used\n    when calling `Function`.\n\n  - `{resolution, OsMonotonicTimeResolution}` - Highest possible\n    [resolution](time_correction.md#time-resolution) of current OS monotonic\n    time source as parts per second. If no resolution information can be\n    retrieved from the OS, `OsMonotonicTimeResolution` is set to the resolution\n    of the time unit of `Function`s return value. That is, the actual\n    resolution can be lower than `OsMonotonicTimeResolution`. Notice that the\n    resolution does not say anything about the\n    [accuracy](time_correction.md#time-accuracy) or whether the\n    [precision](time_correction.md#time-precision) aligns with the resolution.\n    You do, however, know that the precision is not better than\n    `OsMonotonicTimeResolution`.\n\n  - `{used_resolution, UsedOsMonotonicTimeResolution}` - The OS monotonic time\n    resolution used by the runtime system. This is very often the same as\n    `OsMonotonicTimeResolution`. However, on some systems the resolution has to\n    be reduced in order to reliably produce monotonic timestamps. An example of\n    this is when `QueryPerformanceCounter()` is used as OS monotonic time\n    source on Windows. If such a reduction of the resolution has been done,\n    `UsedOsMonotonicTimeResolution` will be smaller than\n    `OsMonotonicTimeResolution`.\n\n  - `{extended, Extended}` - `Extended` equals `yes` if the range of time\n    values has been extended; otherwise `Extended` equals `no`. The range must\n    be extended if `Function` returns values that wrap fast. This typically is\n    the case when the return value is a 32-bit value.\n\n  - `{parallel, Parallel}` - `Parallel` equals `yes` if `Function` is called\n    in parallel from multiple threads. If it is not called in parallel, because\n    calls must be serialized, `Parallel` equals `no`.\n\n  - `{time, OsMonotonicTime}` - `OsMonotonicTime` equals current OS\n    monotonic time in `native` [time unit](`t:time_unit/0`).\n  \n  Since: OTP 18.0\n\n- `os_system_time_source`{: #system_info_os_system_time_source } - Returns a\n  list containing information about the source of\n  [OS system time](time_correction.md#os-system-time) that is used by the\n  runtime system.\n\n  The list contains two-tuples with `Key`s as first element, and `Value`s as\n  second element. The order of these tuples is undefined. The following tuples\n  can be part of the list, but more tuples can be introduced in the future:\n\n  - `{function, Function}` - `Function` is the name of the function used.\n\n  - `{clock_id, ClockId}` - Exists only if `Function` can be used with\n    different clocks. `ClockId` corresponds to the clock identifier used when\n    calling `Function`.\n\n  - `{resolution, OsSystemTimeResolution}` - Highest possible\n    [resolution](time_correction.md#time-resolution) of current OS system time\n    source as parts per second. If no resolution information can be retrieved\n    from the OS, `OsSystemTimeResolution` is set to the resolution of the time\n    unit of `Function`s return value. That is, the actual resolution can be\n    lower than `OsSystemTimeResolution`. Notice that the resolution does not\n    say anything about the [accuracy](time_correction.md#time-accuracy) or\n    whether the [precision](time_correction.md#time-precision) do align with the\n    resolution. You do, however, know that the precision is not better than\n    `OsSystemTimeResolution`.\n\n  - `{parallel, Parallel}` - `Parallel` equals `yes` if `Function` is called\n    in parallel from multiple threads. If it is not called in parallel, because\n    calls needs to be serialized, `Parallel` equals `no`.\n\n  - `{time, OsSystemTime}` - `OsSystemTime` equals current OS system time in\n    `native` [time unit](`t:time_unit/0`).\n  \n  Since: OTP 18.0\n\n- `start_time`{: #system_info_start_time } - The\n  [Erlang monotonic time](`erlang:monotonic_time/0`) in `native`\n  [time unit](`t:time_unit/0`) at the time when current Erlang runtime\n  system instance started.\n\n  See also [`erlang:system_info(end_time)`](`m:erlang#system_info_end_time`).\n  \n  Since: OTP 18.0\n\n- `time_correction`{: #system_info_time_correction } - Returns a `t:boolean()`\n  value indicating whether [time correction](time_correction.md#time-correction)\n  is enabled or not.\n  \n  Since: OTP 18.0\n\n- `time_offset`{: #system_info_time_offset } - Returns the state of the time\n  offset:\n\n  - `preliminary` - The time offset is preliminary, and will be changed and\n    finalized later. The preliminary time offset is used during the preliminary\n    phase of the\n    [single time warp mode](time_correction.md#single-time-warp-mode).\n\n  - `final` - The time offset is final. This either because\n    [no time warp mode](time_correction.md#no-time-warp-mode) is used, or\n    because the time offset have been finalized when\n    [single time warp mode](time_correction.md#single-time-warp-mode) is used.\n\n  - `volatile` - The time offset is volatile. That is, it can change at any\n    time. This is because\n    [multi-time warp mode](time_correction.md#multi-time-warp-mode) is used.\n  \n  Since: OTP 18.0\n\n- `time_warp_mode`{: #system_info_time_warp_mode } - Returns a value\n  identifying the [time warp mode](time_correction.md#time-warp-modes) that is\n  used:\n\n  - `no_time_warp` - The\n    [no time warp mode](time_correction.md#no-time-warp-mode) is used.\n\n  - `single_time_warp` - The\n    [single time warp mode](time_correction.md#single-time-warp-mode) is used.\n\n  - `multi_time_warp` - The\n    [multi-time warp mode](time_correction.md#multi-time-warp-mode) is used.\n  \n  Since: OTP 18.0\n\n- `tolerant_timeofday`{: #system_info_tolerant_timeofday } - Returns whether\n  a pre ERTS 7.0 backwards compatible compensation for sudden changes of system\n  time is `enabled` or `disabled`. Such compensation is `enabled` when the\n  [time offset](`m:erlang#system_info_time_offset`) is `final`, and\n  [time correction](`m:erlang#system_info_time_correction`) is enabled.\n  \n  Since: OTP 17.1","ref":"erlang.html#system_info/1-system-time"},{"type":"function","title":"Scheduler Information - erlang.system_info/1","doc":"Returns information about schedulers, scheduling and threads in the current system as specified by `Item`:\n\n- `dirty_cpu_schedulers`{: #system_info_dirty_cpu_schedulers } - Returns the\n  number of dirty CPU scheduler threads used by the emulator. Dirty CPU\n  schedulers execute CPU-bound native functions, such as NIFs, linked-in\n  driver code, and BIFs that cannot be managed cleanly by the normal emulator\n  schedulers.\n\n  The number of dirty CPU scheduler threads is determined at emulator boot time\n  and cannot be changed after that. However, the number of dirty CPU scheduler\n  threads online can be changed at any time. The number of dirty CPU schedulers\n  can be set at startup by passing command-line flag [`+SDcpu`](erl_cmd.md#+SDcpu)\n  or [`+SDPcpu`](erl_cmd.md#+SDPcpu) in `erl(1)`.\n\n  See also\n  [`erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)`](`m:erlang#system_flag_dirty_cpu_schedulers_online`),\n  [`erlang:system_info(dirty_cpu_schedulers_online)`](`m:erlang#system_info_dirty_cpu_schedulers_online`),\n  [`erlang:system_info(dirty_io_schedulers)`](`m:erlang#system_info_dirty_io_schedulers`),\n  [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`),\n  [`erlang:system_info(schedulers_online)`](`m:erlang#system_info_schedulers_online`),\n  and\n  [`erlang:system_flag(schedulers_online, SchedulersOnline)`](`m:erlang#system_flag_schedulers_online`).\n  \n  Since: OTP 17.0\n\n- `dirty_cpu_schedulers_online`{: #system_info_dirty_cpu_schedulers_online\n  } - Returns the number of dirty CPU schedulers online. The return value\n  satisfies `1 <= DirtyCPUSchedulersOnline <= N`, where `N` is the smallest of\n  the return values of `erlang:system_info(dirty_cpu_schedulers)` and\n  `erlang:system_info(schedulers_online)`.\n\n  The number of dirty CPU schedulers online can be set at startup by passing\n  command-line flag [`+SDcpu`](erl_cmd.md#+SDcpu) in `erl(1)`.\n\n  For more information, see\n  [`erlang:system_info(dirty_cpu_schedulers)`](`m:erlang#system_info_dirty_cpu_schedulers`),\n  [`erlang:system_info(dirty_io_schedulers)`](`m:erlang#system_info_dirty_io_schedulers`),\n  [`erlang:system_info(schedulers_online)`](`m:erlang#system_info_schedulers_online`),\n  and\n  [`erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)`](`m:erlang#system_flag_dirty_cpu_schedulers_online`).\n  \n  Since: OTP 17.0\n\n- `dirty_io_schedulers`{: #system_info_dirty_io_schedulers } - Returns the\n  number of dirty I/O schedulers as an integer. Dirty I/O schedulers execute\n  I/O-bound native functions, such as NIFs and linked-in driver code, which\n  cannot be managed cleanly by the normal emulator schedulers.\n\n  This value can be set at startup by passing command-line argument\n  [`+SDio`](erl_cmd.md#+SDio) in `erl(1)`.\n\n  For more information, see\n  [`erlang:system_info(dirty_cpu_schedulers)`](`m:erlang#system_info_dirty_cpu_schedulers`),\n  [`erlang:system_info(dirty_cpu_schedulers_online)`](`m:erlang#system_info_dirty_cpu_schedulers_online`),\n  and\n  [`erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)`](`m:erlang#system_flag_dirty_cpu_schedulers_online`).\n  \n  Since: OTP 17.0\n\n- `multi_scheduling`{: #system_info_multi_scheduling } - Returns one of the\n  following:\n\n  - `disabled` - The emulator has been started with only one scheduler\n    thread.\n\n  - `blocked` - The emulator has more than one scheduler thread, but all\n    scheduler threads except one are blocked. That is, only one scheduler\n    thread schedules Erlang processes and executes Erlang code.\n\n  - `blocked_normal` - The emulator has more than one scheduler thread, but\n    all normal scheduler threads except one are blocked. Notice that dirty\n    schedulers are not blocked, and can schedule Erlang processes and execute\n    native code.\n\n  - `enabled` - The emulator has more than one scheduler thread, and no\n    scheduler threads are blocked. That is, all available scheduler threads\n    schedule Erlang processes and execute Erlang code.\n\n  See also\n  [`erlang:system_flag(multi_scheduling, BlockState)`](`m:erlang#system_flag_multi_scheduling`),\n  [`erlang:system_info(multi_scheduling_blockers)`](`m:erlang#system_info_multi_scheduling_blockers`),\n  [`erlang:system_info(normal_multi_scheduling_blockers)`](`m:erlang#system_info_normal_multi_scheduling_blockers`),\n  and [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`).\n\n- `multi_scheduling_blockers`{: #system_info_multi_scheduling_blockers } -\n  Returns a list of `Pid`s when multi-scheduling is blocked, otherwise the\n  empty list is returned. The `Pid`s in the list represent all the processes\n  currently blocking multi-scheduling. A `Pid` occurs only once in the list,\n  even if the corresponding process has blocked multiple times.\n\n  See also\n  [`erlang:system_flag(multi_scheduling, BlockState)`](`m:erlang#system_flag_multi_scheduling`),\n  [`erlang:system_info(multi_scheduling)`](`m:erlang#system_info_multi_scheduling`),\n  [`erlang:system_info(normal_multi_scheduling_blockers)`](`m:erlang#system_info_normal_multi_scheduling_blockers`),\n  and [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`).\n\n- `normal_multi_scheduling_blockers`{:\n  #system_info_normal_multi_scheduling_blockers } - Returns a list of `Pid`s\n  when normal multi-scheduling is blocked (that is, all normal schedulers but\n  one is blocked), otherwise the empty list is returned. The `Pid`s in the\n  list represent all the processes currently blocking normal multi-scheduling.\n  A `Pid` occurs only once in the list, even if the corresponding process has\n  blocked multiple times.\n\n  See also\n  [`erlang:system_flag(multi_scheduling, BlockState)`](`m:erlang#system_flag_multi_scheduling`),\n  [`erlang:system_info(multi_scheduling)`](`m:erlang#system_info_multi_scheduling`),\n  [`erlang:system_info(multi_scheduling_blockers)`](`m:erlang#system_info_multi_scheduling_blockers`),\n  and [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`).\n  \n  Since: OTP 19.0\n\n- `scheduler_bind_type`{: #system_info_scheduler_bind_type } - Returns\n  `t:scheduler_bind_type()`, information about how the user has requested\n  schedulers to be bound or not bound.\n\n  Notice that although a user has requested schedulers to be bound, they can\n  silently have failed to bind. To inspect the scheduler bindings, call\n  [`erlang:system_info(scheduler_bindings)`](`m:erlang#system_info_scheduler_bindings`).\n\n  For more information, see command-line argument [`+sbt`](erl_cmd.md#+sbt) in\n  `erl(1)` and\n  [`erlang:system_info(scheduler_bindings)`](`m:erlang#system_info_scheduler_bindings`).\n\n- `scheduler_bindings`{: #system_info_scheduler_bindings } - Returns\n  information about the currently used scheduler bindings.\n\n  A tuple of a size equal to\n  [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`) is\n  returned. The tuple elements are integers or the atom `unbound`. Logical\n  processor identifiers are represented as integers. The `N`th element of the\n  tuple equals the current binding for the scheduler with the scheduler\n  identifier equal to `N`. For example, if the schedulers are bound,\n  `element(erlang:system_info(scheduler_id), erlang:system_info(scheduler_bindings))`\n  returns the identifier of the logical processor that the calling process is\n  executing on.\n\n  Notice that only schedulers online can be bound to logical processors.\n\n  For more information, see command-line argument [`+sbt`](erl_cmd.md#+sbt) in\n  `erl(1)` and\n  [`erlang:system_info(schedulers_online)`](`m:erlang#system_info_schedulers_online`).\n\n- `scheduler_id`{: #system_info_scheduler_id } - Returns the scheduler ID\n  (`SchedulerId`) of the scheduler thread that the calling process is\n  executing on. `SchedulerId` is a positive integer, where\n  `1 <= SchedulerId <= erlang:system_info(schedulers)`.\n\n  See also\n  [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`).\n\n- `schedulers`{: #system_info_schedulers } - Returns the number of scheduler\n  threads used by the emulator. Scheduler threads online schedules Erlang\n  processes and Erlang ports, and execute Erlang code and Erlang linked-in\n  driver code.\n\n  The number of scheduler threads is determined at emulator boot time and cannot\n  be changed later. However, the number of schedulers online can be changed at\n  any time.\n\n  See also\n  [`erlang:system_flag(schedulers_online, SchedulersOnline)`](`m:erlang#system_flag_schedulers_online`),\n  [`erlang:system_info(schedulers_online)`](`m:erlang#system_info_schedulers_online`),\n  [`erlang:system_info(scheduler_id)`](`m:erlang#system_info_scheduler_id`),\n  [`erlang:system_flag(multi_scheduling, BlockState)`](`m:erlang#system_flag_multi_scheduling`),\n  [`erlang:system_info(multi_scheduling)`](`m:erlang#system_info_multi_scheduling`),\n  [`erlang:system_info(normal_multi_scheduling_blockers)`](`m:erlang#system_info_normal_multi_scheduling_blockers`)\n  and\n  [`erlang:system_info(multi_scheduling_blockers)`](`m:erlang#system_info_multi_scheduling_blockers`).\n\n- `schedulers_online`{: #system_info_schedulers_online } - Returns the\n  number of schedulers online. The scheduler identifiers of schedulers online\n  satisfy the relationship\n  `1 <= SchedulerId <= erlang:system_info(schedulers_online)`.\n\n  For more information, see\n  [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`) and\n  [`erlang:system_flag(schedulers_online, SchedulersOnline)`](`m:erlang#system_flag_schedulers_online`).\n\n- `smp_support`{: #system_info_smp_support } - Returns `true`.\n\n- `threads`{: #system_info_threads } - Returns `true`.\n\n- `thread_pool_size`{: #system_info_thread_pool_size } - Returns the number of async threads in the\n  async thread pool used for asynchronous driver calls\n  ([ `erl_driver:driver_async()`](erl_driver.md#driver_async)). The value is\n  given as an integer.","ref":"erlang.html#system_info/1-scheduler-information"},{"type":"function","title":"Distribution Information - erlang.system_info/1","doc":"Returns information about Erlang Distribution in the current system as specified by `Item`:\n\n- `async_dist`{: #system_info_async_dist } - Returns the value of the command line argument\n  [+pad  ](erl_cmd.md#+pad) which the runtime system use. This value\n  determines the default [`async_dist`](`m:erlang#process_flag_async_dist`)\n  value for newly spawned processes.\n  \n  Since: OTP 25.3\n\n- `creation`{: #system_info_creation } - Returns the \"creation\" value of the\n  local node as an integer. The creation is changed when a node is restarted.\n  The creation of a node is stored in process identifiers, port identifiers, and\n  references. This makes it possible to distinguish between identifiers from\n  different incarnations of a node. Creation values are currently 32-bit\n  positive integers, but this may change in future releases. If the node is not\n  alive, `0` is returned.\n\n- `delayed_node_table_gc`{: #system_info_delayed_node_table_gc } - Returns\n  the amount of time in seconds garbage collection of an entry in a node table\n  is delayed. This limit can be set on startup by passing command-line flag\n  [`+zdntgc`](erl_cmd.md#+zdntgc) to `erl(1)`. For more information, see the\n  documentation of the command-line flag.\n  \n  Since: OTP 18.0\n\n- `dist`{: #system_info_dist } - Returns a binary containing a string of\n  distribution information formatted as in Erlang crash dumps. For more\n  information, see section\n  [How to interpret the Erlang crash dumps](crash_dump.md) in the User's Guide.\n\n- `dist_buf_busy_limit`{: #system_info_dist_buf_busy_limit } - Returns the\n  value of the distribution buffer busy limit in bytes. This limit can be set\n  at startup by passing command-line flag [`+zdbbl`](erl_cmd.md#+zdbbl) to\n  `erl(1)`.\n  \n  Since: OTP R14B01\n\n- `dist_ctrl`{: #system_info_dist_ctrl } - Returns a list of tuples\n  `{Node :: node(), ControllingEntity :: port() | pid()}`, one entry for each\n  connected remote node. `Node` is the node name and `ControllingEntity` is the\n  port or process identifier responsible for the communication to that node.\n  More specifically, `ControllingEntity` for nodes connected through TCP/IP (the\n  normal case) is the socket used in communication with the specific node.","ref":"erlang.html#system_info/1-distribution-information"},{"type":"function","title":"System Information - erlang.system_info/1","doc":"Returns various information about the current system (emulator) as specified by `Item`:\n\n- `c_compiler_used`{: #system_info_c_compiler_used } - Returns a two-tuple\n  describing the C compiler used when compiling the runtime system. The first\n  element is an atom describing the name of the compiler, or `undefined` if\n  unknown. The second element is a term describing the version of the compiler,\n  or `undefined` if unknown.\n\n- `check_io`{: #system_info_check_io } - Returns a list containing\n  miscellaneous information about the emulators internal I/O checking. Notice\n  that the content of the returned list can vary between platforms and over\n  time. It is only guaranteed that a list is returned.\n\n- `debug_compiled`{: #system_info_debug_compiled } - Returns `true` if the\n  emulator has been debug-compiled, otherwise `false`.\n\n- `driver_version`{: #system_info_driver_version } - Returns a string\n  containing the Erlang driver version used by the runtime system. It has the\n  form [\" . \"](erl_driver.md#version_management).\n\n- `dynamic_trace`{: #system_info_dynamic_trace } - Returns an atom\n  describing the dynamic trace framework compiled into the virtual machine. It\n  can be `dtrace`, `systemtap`, or `none`. For a commercial or standard build,\n  it is always `none`. The other return values indicate a custom configuration\n  (for example, `./configure --with-dynamic-trace=dtrace`). For more\n  information about dynamic tracing, see [`dyntrace(3)`](`m:dyntrace`) manual\n  page and the `README.dtrace`/`README.systemtap` files in the Erlang source\n  code top directory.\n  \n  Since: OTP R15B01\n\n- `dynamic_trace_probes`{: #system_info_dynamic_trace_probes } - Returns a\n  `t:boolean()` indicating if dynamic trace probes (`dtrace` or `systemtap`) are\n  built into the emulator. This can only be `true` if the virtual machine was\n  built for dynamic tracing (that is, `system_info(dynamic_trace)` returns\n  `dtrace` or `systemtap`).\n  \n  Since: OTP R15B01\n\n- `emu_flavor`{: #system_info_emu_flavor } - Returns an atom describing the\n  flavor of the runtime system. This will be either `emu` or `jit`. Possible\n  return values can be added or removed at any time without prior notice.\n  \n  Since: OTP 24.0\n\n- `emu_type`{: #system_info_emu_type } - Returns an atom describing the\n  build type of the runtime system. This is normally the atom `opt` for\n  optimized. Other possible return values are `debug`, `gcov`, `valgrind`,\n  `gprof`, and `lcnt`. Possible return values can be added or removed at any\n  time without prior notice.\n  \n  Since: OTP 24.0\n\n- `halt_flush_timeout`{: #system_info_halt_flush_timeout } - Returns the\n  default *halt flush timeout* set by the `erl`\n  [`+zhft  `](erl_cmd.md#+zhft) command line flag.\n\n  Since: OTP 27.0\n\n- `info`{: #system_info_info } - Returns a binary containing a string of\n  miscellaneous system information formatted as in Erlang crash dumps. For more\n  information, see section\n  [How to interpret the Erlang crash dumps](crash_dump.md) in the User's Guide.\n\n- `kernel_poll`{: #system_info_kernel_poll } - Returns `true` if the\n  emulator uses some kind of kernel-poll implementation, otherwise `false`.\n\n- `loaded`{: #system_info_loaded } - Returns a binary containing a string of\n  loaded module information formatted as in Erlang crash dumps. For more\n  information, see section\n  [How to interpret the Erlang crash dumps](crash_dump.md) in the User's Guide.\n\n- `machine`{: #system_info_machine } - Returns a string containing the\n  Erlang machine name.\n\n- `modified_timing_level`{: #system_info_modified_timing_level } - Returns\n  the modified timing-level (an `t:integer()`) if modified timing is enabled,\n  otherwise `undefined`. For more information about modified timing, see\n  command-line flag [`+T`](erl_cmd.md#+T_level) in `erl(1)`\n\n- `nif_version`{: #system_info_nif_version } - Returns a string containing\n  the version of the Erlang NIF interface used by the runtime system. It is on\n  the form \" . \".\n  \n  Since: OTP 17.4\n\n- `otp_release`{: #system_info_otp_release } -\n  Returns a string containing the OTP release number of the OTP release that the\n  currently executing ERTS application is part of.\n\n  As from Erlang/OTP 17, the OTP release number corresponds to the major OTP\n  version number. No `erlang:system_info()` argument gives the exact OTP\n  version. This is because the exact OTP version in the general case is\n  difficult to determine. For more information, see the description of versions\n  in [System principles](`e:system:versions.md`) in System Documentation.\n\n- `outstanding_system_requests_limit`{:\n  #system_info_outstanding_system_requests_limit } - Returns the limit on the\n  amount of outstanding requests made by a system process orchestrating system\n  wide changes. See\n  [`erlang:system_flag(outstanding_system_requests_limit, Limit)`](`m:erlang#system_flag_outstanding_system_requests_limit`)\n  for more information.\n  \n  Since: OTP 24.2\n\n- `port_parallelism`{: #system_info_port_parallelism } - Returns the default\n  port parallelism scheduling hint used. For more information, see\n  command-line argument [`+spp`](erl_cmd.md#+spp) in `erl(1)`.\n  \n  Since: OTP R16B\n\n- `system_architecture`{: #system_info_system_architecture } - Returns a\n  string containing the processor and OS architecture the emulator is built\n  for.\n\n- `system_logger`{: #system_info_system_logger } - Returns the current\n  `system_logger` as set by [`erlang:system_flag(system_logger,\n  *)`](`erlang:system_flag/2`).\n  \n  Since: OTP 21.3\n\n- `system_version`{: #system_info_system_version } - Returns a string\n  containing version number and some important properties, such as the number of\n  schedulers.\n\n- `trace_control_word`{: #system_info_trace_control_word } - Returns the\n  value of the node trace control word. For more information, see function\n  `get_tcw` in section [Match Specifications in Erlang](match_spec.md#get_tcw)\n  in the User's Guide.\n\n- `version`{: #system_info_version } - Returns a string containing the\n  version number of the emulator.\n\n- `wordsize`{: #system_info_wordsize } - Same as `{wordsize, internal}`.\n\n- `{wordsize, internal}` - Returns the size of Erlang term words in bytes as\n  an integer, that is, 4 is returned on a 32-bit architecture, and 8 is\n  returned on a 64-bit architecture.\n\n- `{wordsize, external}` - Returns the true word size of the emulator, that\n  is, the size of a pointer. The value is given in bytes as an integer. On a\n  pure 32-bit architecture, 4 is returned. On a 64-bit architecture, 8 is\n  returned.","ref":"erlang.html#system_info/1-system-information"},{"type":"function","title":"erlang.system_monitor/0","doc":"Returns the current system monitoring settings set by\n[`erlang:system_monitor/2`](`system_monitor/2`) as `{MonitorPid, Options}`, or\n`undefined` if no settings exist.\n\nThe order of the options can be different from the one that was set.","ref":"erlang.html#system_monitor/0"},{"type":"function","title":"erlang.system_monitor/1","doc":"When called with argument `undefined`, all system performance monitoring\nsettings are cleared.\n\nCalling the function with `{MonitorPid, Options}` as argument is the same as\ncalling [`erlang:system_monitor(MonitorPid, Options)`](`system_monitor/2`).\n\nReturns the previous system monitor settings just like\n[`erlang:system_monitor/0`](`system_monitor/0`).","ref":"erlang.html#system_monitor/1"},{"type":"function","title":"erlang.system_monitor/2","doc":"Sets the system event monitoring options. `MonitorPid` is a local process\nidentifier (pid) receiving system monitor messages.\n\n  > #### Change {: .info }\n  >\n  > This function is superseded by `trace:system/3` that operate on\n  > dynamic trace sessions.\n\nThe second argument is a list of monitoring options to enable:\n\n- **`{long_gc, Time}`**\n- **`{long_message_queue, {Disable, Enable}}`**\n- **`{long_schedule, Time}`**\n- **`{large_heap, Size}`**\n- **`busy_port`**\n- **`busy_dist_port`**\n\nFor more detailed descriptions about the monitoring options, see\n`trace:system/3`.\n\nUnlink `trace:system/3`, the arguments to\n[`system_monitor/2`](`system_monitor/2`) specifies how all system monitoring\nshould be set, not how it should be changed. This means only one process\nat a time (`MonitorPid`) can be the receiver of messages from system monitoring set\nwith this function. Also, the way to clear a specific monitor option is to not\ninclude it in the list `Options`. All system monitoring will, however, be\ncleared if the process identified by `MonitorPid` terminates.\n\nThere are no special option values (like zero) to clear an option. Some of the\noptions have a unspecified minimum value. Lower values will be adjusted to the\nminimum value. For example, it is currently not possible to monitor all garbage\ncollections with `{long_gc, 0}`.\n\nReturns the previous system monitor settings just like\n[`erlang:system_monitor/0`](`system_monitor/0`).\n\n> #### Note {: .info }\n>\n> If a monitoring process gets so large that it itself starts to cause system\n> monitor messages when garbage collecting, the messages enlarge the process\n> message queue and probably make the problem worse.\n>\n> Keep the monitoring process neat and do not set the system monitor limits too\n> tight.\n\nFailures:\n\n- **`badarg`** - If `MonitorPid` does not exist.\n\n- **`badarg`** - If `MonitorPid` is not a local process.","ref":"erlang.html#system_monitor/2"},{"type":"type","title":"erlang.system_monitor_option/0","doc":"","ref":"erlang.html#t:system_monitor_option/0"},{"type":"function","title":"erlang.system_profile/0","doc":"Returns the current system profiling settings set by\n[`erlang:system_profile/2`](`system_profile/2`) as `{ProfilerPid, Options}`, or\n`undefined` if there are no settings. The order of the options can be different\nfrom the one that was set.","ref":"erlang.html#system_profile/0"},{"type":"function","title":"erlang.system_profile/2","doc":"Sets system profiler options. `ProfilerPid` is a local process identifier (pid)\nor port receiving profiling messages. The receiver is excluded from all\nprofiling. The second argument is a list of profiling options:\n\n- **`exclusive`** - If a synchronous call to a port from a process is done, the\n  calling process is considered not runnable during the call runtime to the\n  port. The calling process is notified as `inactive`, and later `active` when\n  the port callback returns.\n\n- **`monotonic_timestamp`** - Time stamps in profile messages use\n  [Erlang monotonic time](time_correction.md#erlang-monotonic-time). The time\n  stamp (Ts) has the same format and value as produced by\n  `erlang:monotonic_time(nanosecond)`.\n\n- **`runnable_procs`** - If a process is put into or removed from the run queue,\n  a message, `{profile, Pid, State, Mfa, Ts}`, is sent to `ProfilerPid`. Running\n  processes that are reinserted into the run queue after having been pre-empted\n  do not trigger this message.\n\n- **`runnable_ports`** - If a port is put into or removed from the run queue, a\n  message, `{profile, Port, State, 0, Ts}`, is sent to `ProfilerPid`.\n\n- **`scheduler`** - If a scheduler is put to sleep or awoken, a message,\n  `{profile, scheduler, Id, State, NoScheds, Ts}`, is sent to `ProfilerPid`.\n\n- **`strict_monotonic_timestamp`** - Time stamps in profile messages consist of\n  [Erlang monotonic time](time_correction.md#erlang-monotonic-time) and a\n  monotonically increasing integer. The time stamp (Ts) has the same format and\n  value as produced by\n  `{erlang:monotonic_time(nanosecond), erlang:unique_integer([monotonic])}`.\n\n- **`timestamp`** - Time stamps in profile messages include a time stamp (Ts)\n  that has the same form as returned by `erlang:now()`. This is also the default\n  if no time stamp flag is specified. If `cpu_timestamp` has been enabled\n  through `trace:process/4`, this also effects the time stamp\n  produced in profiling messages when flag `timestamp` is enabled.\n\n> #### Note {: .info }\n>\n> `erlang:system_profile` behavior can change in a future release.","ref":"erlang.html#system_profile/2"},{"type":"type","title":"erlang.system_profile_option/0","doc":"","ref":"erlang.html#t:system_profile_option/0"},{"type":"function","title":"erlang.system_time/0","doc":"Returns current [Erlang system time](time_correction.md#erlang-system-time) in\n`native` [time unit](`t:time_unit/0`).\n\nCalling `erlang:system_time()` is equivalent to\n[`erlang:monotonic_time()`](`monotonic_time/0`)`+`[`erlang:time_offset()`](`time_offset/0`).\n\n> #### Note {: .info }\n>\n> This time is _not_ a monotonically increasing time in the general case. For\n> more information, see the documentation of\n> [time warp modes](time_correction.md#time-warp-modes) in the User's Guide.","ref":"erlang.html#system_time/0"},{"type":"function","title":"erlang.system_time/1","doc":"Returns current [Erlang system time](time_correction.md#erlang-system-time)\nconverted into the `Unit` passed as argument.\n\nCalling `erlang:system_time(Unit)` is equivalent to\n[`erlang:convert_time_unit`](`convert_time_unit/3`)`(`[`erlang:system_time()`](`system_time/0`)`, native, Unit)`.\n\n> #### Note {: .info }\n>\n> This time is _not_ a monotonically increasing time in the general case. For\n> more information, see the documentation of\n> [time warp modes](time_correction.md#time-warp-modes) in the User's Guide.","ref":"erlang.html#system_time/1"},{"type":"type","title":"erlang.term/0","doc":"All possible Erlang terms. Synonym for `t:any/0`.","ref":"erlang.html#t:term/0"},{"type":"function","title":"erlang.term_to_binary/1","doc":"Returns a binary data object that is the result of encoding `Term` according to\nthe [Erlang external term format](erl_ext_dist.md).\n\nThis can be used for various purposes, such as efficiently writing a\nterm to a file or sending an Erlang term through a communication\nchannel not supported by distributed Erlang.\n\nSee also `binary_to_term/1`.\n\n> #### Note {: .info }\n>\n> There is no guarantee that this function will always return the same encoded\n> representation for the same term.","ref":"erlang.html#term_to_binary/1"},{"type":"function","title":"Examples - erlang.term_to_binary/1","doc":"```erlang\n1> Bin = term_to_binary(hello).\n<<131,119,5,104,101,108,108,111>>\n2> hello = binary_to_term(Bin).\nhello\n```","ref":"erlang.html#term_to_binary/1-examples"},{"type":"function","title":"erlang.term_to_binary/2","doc":"Returns a binary data object that is the result of encoding `Term` according to\nthe Erlang external term format.\n\nSupported options:\n\n- **`compressed`** - Compress the external term format. The compressed format is\n  automatically recognized by [`binary_to_term/1`](`binary_to_term/1`) as from\n  Erlang/OTP R7B.\n\n- **`{compressed, Level}`** - Compress the external term format to a given\n  level. The compression level is specified by `Level` which is an integer in\n  the range 0 to 9, where:\n\n  - **`0`** - No compression is applied (equivalent to omitting the `compressed`\n    option).\n\n  - **`1`** - Fastest compression but may not compress as well as the higher\n    levels.\n\n  - **`6`** - Default level when the `compressed` option is provided.\n\n  - **`9`** - Highest compression level, taking the longest time while\n    attempting to produce the smallest result. However, depending on\n    the input term, level 9 compression may not always produce a smaller\n    result than level 1 compression.\n\n- **`{minor_version, Version}`**(Since R11B-4)  \n  The option can be used to control some encoding details. Valid values for\n  `Version` are:\n\n  - **`0`** - Floats are encoded using a textual representation.\n\n    Atoms that can be represented by a latin1 string are encoded using latin1\n    while only atoms that cannot be represented by latin1 are encoded using\n    utf8.\n\n  - **`1`** - Floats are encoded in a more space-efficient and exact way (namely\n    in the 64-bit IEEE format, rather than converted to a textual\n    representation). As from Erlang/OTP R11B-4,\n    [`binary_to_term/1`](`binary_to_term/1`) can decode this representation.\n\n    Atoms that can be represented by a latin1 string are encoded using latin1\n    while only atoms that cannot be represented by latin1 are encoded using\n    utf8.\n\n  - **`2`** - This is as of Erlang/OTP 26.0 the _default_. Atoms are\n    unconditionally encoded using utf8. Erlang/OTP systems as of R16B can decode\n    this representation.\n\n- **`deterministic`**(Since OTP 24.1)  \n  This option can be used to ensure that, within the same major release of\n  Erlang/OTP, the same encoded representation is returned for the same term.\n  There is still no guarantee that the encoded representation remains the same\n  between major releases of Erlang/OTP.\n\n  This option cannot be combined with the `local` option.\n\n- **`local`[](){: #term_to_binary_local } **(Since OTP 26.0)  \n  This option encodes `Term` in an alternative local version of the\n  external term format. When decoded by the same runtime system\n  instance, it produces a term identical to original term, even if the\n  node name and/or [creation](#system_info_creation) of the runtime\n  system instance have changed between encoding and decoding.\n\n  When encoding without the `local` option, local identifiers such as\n  [pids](`t:pid/0`), [ports](`t:port/0`), and\n  [references](`t:reference/0`) will not remain the same if node name\n  and/or creation of the runtime system instance changed\n  between encoding and decoding. This is because such identifiers refer to\n  a specific node by node name and creation.\n\n  The node name and creation change when the distribution is started\n  or stopped. The distribution starts when the runtime system is\n  started with the [`-name`](erl_cmd.md#name) or\n  [`-sname`](erl_cmd.md#sname) command-line arguments. Note that the\n  actual start of the distribution occurs after other code in the\n  startup phase has already begun executing. The distribution can also\n  be started by calling `net_kernel:start/2` and stopped by calling\n  [`net_kernel:stop/1`](`net_kernel:stop/0`), provided it was not\n  started via the command line.\n\n  When decoding a term encoded with the `local` option using, for\n  example, `binary_to_term/1`, the runtime system attempts to verify\n  that the term was encoded by the same runtime system instance. In\n  most cases, decoding will fail if it was encoded by a different\n  instance. However, this verification is not foolproof. You _should_\n  ensure that terms encoded with the local option are _only_ decoded by\n  the same Erlang runtime system instance that encoded them.\n\n  Since only the runtime system that encoded a term using the `local`\n  option can decode it, the local encoding is typically pieced\n  together with something else to produce a reply to where the local\n  encoding originates. If a term encoded with the local option has its\n  leading version number stripped, it can be embedded as part of a\n  larger term (for example as an element in a tuple) when encoding in\n  the external term format using, for example,\n  [EI](`e:erl_interface:ei.md`).  In this case, you would strip the\n  version number using `ei_decode_version()` and append the remaining\n  local encoding using, for example, `ei_x_append_buf()`.\n\n  A common use case for the `local` option is when making a request\n  from a process to a port driver [driver](erl_driver.md) while\n  leveraging the [selective receive\n  optimization](`e:system:eff_guide_processes.md#receiving-messages`)\n  for handling the reply.\n\n  In this scenario:\n\n  1. A reference is created.\n\n  2. The reference is serialized using the external term format with\n  the `local` option.\n\n  3. This serialized reference is passed to the driver in the request.\n\n  4. The process then waits for a reply message in a selective\n  receive, matching on the reference.\n\n  The driver should send the reply using either\n  [`erl_drv_output_term()`](erl_driver.md#erl_drv_output_term) or\n  [`erl_drv_send_term()`](erl_driver.md#erl_drv_send_term) using the\n  term type [`ERL_DRV_EXT2TERM`](erl_driver.md#ERL_DRV_EXT2TERM)\n  for the reference previously received in the request.\n\n  Note that you should not strip the leading version number from the\n  local encoding when using the term type `ERL_DRV_EXT2TERM`. If the\n  reference is not encoded with the `local` option, and distribution is\n  started or stopped while the request is ongoing, the requesting\n  process will hang indefinitely because the reference in the reply\n  message will never match.\n\n  This option cannot be combined with the `deterministic` option.\n\n  For more details, see [`LOCAL_EXT`](erl_ext_dist.md#local_ext).\n\n  See also `binary_to_term/1`.","ref":"erlang.html#term_to_binary/2"},{"type":"function","title":"Examples - erlang.term_to_binary/2","doc":"```erlang\n1> List = lists:duplicate(20, $=).\n\"====================\"\n2> term_to_binary(List, []).\n<<131,107,0,20,61,61,61,61,61,61,61,61,61,61,61,61,61,61,\n  61,61,61,61,61,61>>\n3> term_to_binary(List, [compressed]).\n<<131,80,0,0,0,23,120,156,203,102,16,177,197,2,0,61,98,5,\n  68>>\n```","ref":"erlang.html#term_to_binary/2-examples"},{"type":"function","title":"erlang.term_to_iovec/1","doc":"Returns the encoding of `Term` according to the Erlang external term format as\n`t:ext_iovec/0`.\n\nThis function produce the same encoding as `term_to_binary/1`, but with another\nreturn type. The call\n[`iolist_to_binary(term_to_iovec(Term))`](`iolist_to_binary/1`) will produce\nexactly the same result as the call\n[`term_to_binary(Term)`](`term_to_binary/1`).\n\n`term_to_iovec/1` is a pure optimization of the functionality provided\nby `term_to_binary/1`. For example, it can reference off-heap binaries\ndirectly instead of copying their contents into the result.\n\nSee also `term_to_binary/1`.","ref":"erlang.html#term_to_iovec/1"},{"type":"function","title":"Examples - erlang.term_to_iovec/1","doc":"```erlang\n1> term_to_iovec({binary:copy(~\"a\", 65), binary:copy(~\"b\", 65)}).\n[<<131,104,2,109,0,0,0,65>>,\n <<\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\">>,\n <<109,0,0,0,65>>,\n <<\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\">>]\n```","ref":"erlang.html#term_to_iovec/1-examples"},{"type":"function","title":"erlang.term_to_iovec/2","doc":"Returns the encoding of `Term` according to the Erlang external term format as\n`t:ext_iovec/0`.\n\nThis function produce the same encoding as `term_to_binary/2`, but with another\nreturn type. The call\n[`iolist_to_binary(term_to_iovec(Term, Opts))`](`iolist_to_binary/1`) will\nproduce exactly the same result as\n[`term_to_binary(Term, Opts)`](`term_to_binary/2`).\n\nThis function supports all options supported by `term_to_binary/2`.\n\n`term_to_iovec/2` is a pure optimization of the functionality provided\nby `term_to_binary/2`. For example, it can reference off-heap binaries\ndirectly instead of copying their contents into the result.\n\nSee also `term_to_binary/2`.","ref":"erlang.html#term_to_iovec/2"},{"type":"function","title":"Examples - erlang.term_to_iovec/2","doc":"```erlang\n1> term_to_iovec({binary:copy(~\"a\", 65), binary:copy(~\"b\", 65)}, [deterministic]).\n[<<131,104,2,109,0,0,0,65>>,\n <<\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\">>,\n <<109,0,0,0,65>>,\n <<\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\">>]\n```","ref":"erlang.html#term_to_iovec/2-examples"},{"type":"function","title":"erlang.throw/1","doc":"Raises an exception of class `throw`. Intended to be used to do non-local\nreturns from functions.\n\nIf evaluated within a [catch expression](`e:system:expressions.md#catch-and-throw`), the\ncatch expression returns value `Any`.\n\nFor example:\n\n```erlang\n> catch throw({hello, there}).\n        {hello,there}\n```\n\nIf evaluated within a `try`\\-block of a\n[try expression](`e:system:expressions.md#try`), the value `Any` can be caught\nwithin the catch block.\n\nFor example:\n\n```erlang\ntry\n    throw({my_exception, \"Something happened\"})\ncatch\n    throw:{my_exception, Desc} ->\n        io:format(standard_error, \"Error: ~s~n\", [Desc])\nend\n```\n\nFailure: `nocatch` if not caught by an exception handler.\n\nSee the guide about [errors and error handling](`e:system:errors.md`) for\nadditional information.","ref":"erlang.html#throw/1"},{"type":"function","title":"erlang.time/0","doc":"Returns the current time as `{Hour, Minute, Second}`.\n\nThe time zone and Daylight Saving Time correction depend on the underlying OS.\nThe return value is based on the\n[OS System Time](time_correction.md#os-system-time).\n\nFor example:\n\n```erlang\n> time().\n{9,42,44}\n```","ref":"erlang.html#time/0"},{"type":"function","title":"erlang.time_offset/0","doc":"Returns the current time offset between\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time) and\n[Erlang system time](time_correction.md#erlang-system-time) in `native`\n[time unit](`t:time_unit/0`). Current time offset added to an Erlang\nmonotonic time gives corresponding Erlang system time.\n\nThe time offset may or may not change during operation depending on the\n[time warp mode](time_correction.md#time-warp-modes) used.\n\n> #### Note {: .info }\n>\n> A change in time offset can be observed at slightly different points in time\n> by different processes.\n>\n> If the runtime system is in\n> [multi-time warp mode](time_correction.md#multi-time-warp-mode), the time\n> offset is changed when the runtime system detects that the\n> [OS system time](time_correction.md#os-system-time) has changed. The runtime\n> system will, however, not detect this immediately when it occurs. A task\n> checking the time offset is scheduled to execute at least once a minute; so,\n> under normal operation this is to be detected within a minute, but during\n> heavy load it can take longer time.","ref":"erlang.html#time_offset/0"},{"type":"function","title":"erlang.time_offset/1","doc":"Returns the current time offset between\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time) and\n[Erlang system time](time_correction.md#erlang-system-time) converted into the\n`Unit` passed as argument.\n\nSame as calling\n[`erlang:convert_time_unit`](`convert_time_unit/3`)`(`[ `erlang:time_offset()`](`time_offset/0`)`, native, Unit)`\nhowever optimized for commonly used `Unit`s.","ref":"erlang.html#time_offset/1"},{"type":"type","title":"erlang.time_unit/0","doc":"The time unit used by erlang time APIs.\n\nSupported time unit representations:\n\n- **`PartsPerSecond :: integer() >= 1`** - Time unit expressed in parts per\n  second. That is, the time unit equals `1/PartsPerSecond` second.\n\n- **`second`** - Symbolic representation of the time unit represented by the\n  integer `1`.\n\n- **`millisecond`** - Symbolic representation of the time unit represented by\n  the integer `1000`.\n\n- **`microsecond`** - Symbolic representation of the time unit represented by\n  the integer `1000_000`.\n\n- **`nanosecond`** - Symbolic representation of the time unit represented by the\n  integer `1000_000_000`.\n\n- **`native`** - Symbolic representation of the native time unit used by the\n  Erlang runtime system.\n\n  The `native` time unit is determined at runtime system start, and remains the\n  same until the runtime system terminates. If a runtime system is stopped and\n  then started again (even on the same machine), the `native` time unit of the\n  new runtime system instance can differ from the `native` time unit of the old\n  runtime system instance.\n\n  One can get an approximation of the `native` time unit by calling\n  [`erlang:convert_time_unit(1, second, native)`](`convert_time_unit/3`). The\n  result equals the number of whole `native` time units per second. If the\n  number of `native` time units per second does not add up to a whole number,\n  the result is rounded downwards.\n\n  > #### Note {: .info }\n  >\n  > The value of the `native` time unit gives you more or less no information\n  > about the quality of time values. It sets a limit for the\n  > [resolution](time_correction.md#time-resolution) and for the\n  > [precision](time_correction.md#time-precision) of time values, but it gives\n  > no information about the [accuracy](time_correction.md#time-accuracy) of\n  > time values. The resolution of the `native` time unit and the resolution of\n  > time values can differ significantly.\n\n- **`perf_counter`** - Symbolic representation of the performance counter time\n  unit used by the Erlang runtime system.\n\n  The `perf_counter` time unit behaves much in the same way as the `native` time\n  unit. That is, it can differ between runtime restarts. To get values of this\n  type, call `os:perf_counter/0`.\n\n- **`t:deprecated_time_unit/0`** -\n  Deprecated symbolic representations kept for backwards-compatibility.\n\nThe `t:time_unit/0` type can be extended. To convert time values between time\nunits, use [`erlang:convert_time_unit/3`](`convert_time_unit/3`).","ref":"erlang.html#t:time_unit/0"},{"type":"type","title":"erlang.timeout/0","doc":"A timeout value that can be passed to a\n[receive expression](`e:system:expressions.md#receive`).","ref":"erlang.html#t:timeout/0"},{"type":"type","title":"erlang.timestamp/0","doc":"See [`erlang:timestamp/0`](`timestamp/0`).","ref":"erlang.html#t:timestamp/0"},{"type":"function","title":"erlang.timestamp/0","doc":"Returns current [Erlang system time](time_correction.md#erlang-system-time) on\nthe format `{MegaSecs, Secs, MicroSecs}`.\n\nThis format is the same as `os:timestamp/0` and the deprecated [`erlang:now/0`](`now/0`) use.\nThe reason for the existence of `erlang:timestamp()` is purely to simplify use for existing\ncode that assumes this time stamp format. Current Erlang system time can more\nefficiently be retrieved in the time unit of your choice using\n[`erlang:system_time/1`](`system_time/1`).\n\nThe `erlang:timestamp()` BIF is equivalent to:\n\n```c\ntimestamp() ->\n    ErlangSystemTime = erlang:system_time(microsecond),\n    MegaSecs = ErlangSystemTime div 1000_000_000_000,\n    Secs = ErlangSystemTime div 1000_000 - MegaSecs*1000_000,\n    MicroSecs = ErlangSystemTime rem 1000_000,\n    {MegaSecs, Secs, MicroSecs}.\n```\n\nIt, however, uses a native implementation that does not build garbage on the\nheap and with slightly better performance.\n\n> #### Note {: .info }\n>\n> This time is _not_ a monotonically increasing time in the general case. For\n> more information, see the documentation of\n> [time warp modes](time_correction.md#time-warp-modes) in the User's Guide.","ref":"erlang.html#timestamp/0"},{"type":"function","title":"erlang.tl/1","doc":"Returns the tail of `List`, which is the list without its first element.\n\nIt works with improper lists.","ref":"erlang.html#tl/1"},{"type":"function","title":"Examples - erlang.tl/1","doc":"```erlang\n1> tl([geesties, guilies, beasties]).\n[guilies, beasties]\n2> tl([geesties]).\n[]\n3> tl([geesties, guilies, beasties | improper_end]).\n[guilies, beasties | improper_end]\n4> tl([geesties | improper_end]).\nimproper_end\n5> tl([]).\n** exception error: bad argument\n     in function  tl/1\n        called as tl([])\n        *** argument 1: not a nonempty list\n```\n\nFailure: `badarg` if `List` is an empty list `[]`.","ref":"erlang.html#tl/1-examples"},{"type":"function","title":"erlang.trace/3","doc":"Turn on or off trace flags on processes or ports for the static legacy trace session.\n\n  > #### Change {: .info }\n  >\n  > This function is superseded by `trace:process/4` and `trace:port/4` that\n  > operate on dynamic trace sessions.\n\nArgument `FlagList` can contain two additional options:\n\n- **`{tracer, Tracer}`** - Specifies where to send the trace messages. `Tracer`\n  must be the process identifier of a local process or the port identifier of a\n  local port.\n\n- **`{tracer, TracerModule, TracerState}`** - Specifies that a tracer module is\n  to be called instead of sending a trace message. The tracer module can then\n  ignore or change the trace message. For more details on how to write a tracer\n  module, see `m:erl_tracer`.\n\nIf no `tracer` is specified, the calling process receives all the trace\nmessages. The legacy trace session has no specified tracer.\n\nFor further documentation see `trace:process/4` and `trace:port/4`.","ref":"erlang.html#trace/3"},{"type":"function","title":"erlang.trace_delivered/1","doc":"Calling this function makes sure all trace messages have been delivered.\n\nThe delivery of trace messages (generated by [`erlang:trace/3`](`trace/3`),\n`m:seq_trace`, or [`erlang:system_profile/2`](`system_profile/2`)) is dislocated\non the time-line compared to other events in the system. If you know that\n`Tracee` has passed some specific point in its execution, and you want to know\nwhen at least all trace messages corresponding to events up to this point have\nreached the tracer, use `erlang:trace_delivered(Tracee)`.\n\nWhen it is guaranteed that all trace messages are delivered to the tracer up to\nthe point that `Tracee` reached at the time of the call to\n`erlang:trace_delivered(Tracee)`, then a `{trace_delivered, Tracee, Ref}`\nmessage is sent to the caller of `erlang:trace_delivered(Tracee)` .\n\nNotice that message `trace_delivered` does _not_ imply that trace messages have\nbeen delivered. Instead it implies that all trace messages that _are to be\ndelivered_ have been delivered. It is not an error if `Tracee` is not, and has\nnot been traced by someone, but if this is the case, _no_ trace messages have\nbeen delivered when the `trace_delivered` message arrives.\n\nNotice that `Tracee` must refer to a process currently or previously existing on\nthe same node as the caller of `erlang:trace_delivered(Tracee)` resides on. The\nspecial `Tracee` atom `all` denotes all processes that currently are traced in\nthe node.\n\nWhen used together with a [Tracer Module](`m:erl_tracer`), any message sent in\nthe trace callback is guaranteed to have reached its recipient before the\n`trace_delivered` message is sent.\n\nExample: Process `A` is `Tracee`, port `B` is tracer, and process `C` is the\nport owner of `B`. `C` wants to close `B` when `A` exits. To ensure that the\ntrace is not truncated, `C` can call `erlang:trace_delivered(A)` when `A` exits,\nand wait for message `{trace_delivered, A, Ref}` before closing `B`.\n\nFailure: `badarg` if `Tracee` does not refer to a process (dead or alive) on the\nsame node as the caller of `erlang:trace_delivered(Tracee)` resides on.","ref":"erlang.html#trace_delivered/1"},{"type":"type","title":"erlang.trace_flag/0","doc":"","ref":"erlang.html#t:trace_flag/0"},{"type":"function","title":"erlang.trace_info/2","doc":"Returns trace information about a port, process, function, or event for the\nstatic legacy trace session.\n\n  > #### Change {: .info }\n  >\n  > This function is superseded by `trace:info/3` that operates on dynamic trace\n  > sessions.","ref":"erlang.html#trace_info/2"},{"type":"type","title":"erlang.trace_info_flag/0","doc":"","ref":"erlang.html#t:trace_info_flag/0"},{"type":"type","title":"erlang.trace_info_item_result/0","doc":"","ref":"erlang.html#t:trace_info_item_result/0"},{"type":"type","title":"erlang.trace_info_return/0","doc":"","ref":"erlang.html#t:trace_info_return/0"},{"type":"type","title":"erlang.trace_match_spec/0","doc":"","ref":"erlang.html#t:trace_match_spec/0"},{"type":"function","title":"erlang.trace_pattern/2","doc":"Equivalent to [`erlang:trace_pattern(Event, MatchSpec, [])`](`trace_pattern/3`),\nretained for backward compatibility.","ref":"erlang.html#trace_pattern/2"},{"type":"function","title":"erlang.trace_pattern/3","doc":"Set trace pattern for call, send and receive tracing on the static legacy trace\nsession.\n\n  > #### Change {: .info }\n  >\n  > This function is superseded by `trace:function/4`, `trace:send/3` and\n  > `trace:recv/3` that operate on dynamic trace sessions.\n\nArgument `FlagList` can contain two additional options for call tracing:\n\n- **`{meta, Pid} | {meta, TracerModule, TracerState}`** - Turns on or off\n  meta-tracing for all types of function calls. Trace messages are sent to the\n  tracer whenever any of the specified functions are called. If no tracer is\n  specified, `self/0` is used as a default tracer process.\n\nFor further documentation see `trace:function/4` , `trace:send/3` and\n`trace:recv/3`.","ref":"erlang.html#trace_pattern/3"},{"type":"type","title":"erlang.trace_pattern_flag/0","doc":"","ref":"erlang.html#t:trace_pattern_flag/0"},{"type":"type","title":"erlang.trace_pattern_mfa/0","doc":"","ref":"erlang.html#t:trace_pattern_mfa/0"},{"type":"function","title":"erlang.trunc/1","doc":"Truncates the decimals of `Number`.\n\nSee also `round/1`, `floor/1`, and `ceil/1`.","ref":"erlang.html#trunc/1"},{"type":"function","title":"Examples - erlang.trunc/1","doc":"```erlang\n1> trunc(5.7).\n5\n2> trunc(-5.7).\n-5\n3> trunc(5).\n5\n4> trunc(36028797018963969.0).\n36028797018963968\n```\n\nIn the last example, [`trunc(36028797018963969.0)`](`trunc/1`)\nevaluates to `36028797018963968`. This happens because the number\n`36028797018963969.0` cannot be represented exactly as a\nfloating-point value. Instead, it is represented as\n`36028797018963968.0`, which is the closest representable\nfloating-point value. See [Representation of Floating Point\nNumbers](`e:system:data_types.md#float_representation_problem`) for\nadditional information.","ref":"erlang.html#trunc/1-examples"},{"type":"type","title":"erlang.tuple/0","doc":"An Erlang [tuple](`e:system:data_types.md#tuple`).","ref":"erlang.html#t:tuple/0"},{"type":"function","title":"erlang.tuple_size/1","doc":"Returns the number of elements in `Tuple`.","ref":"erlang.html#tuple_size/1"},{"type":"function","title":"Examples - erlang.tuple_size/1","doc":"```erlang\n1> tuple_size({a, b, c}).\n3\n```","ref":"erlang.html#tuple_size/1-examples"},{"type":"function","title":"erlang.tuple_to_list/1","doc":"Returns a list corresponding to `Tuple`.","ref":"erlang.html#tuple_to_list/1"},{"type":"function","title":"Examples - erlang.tuple_to_list/1","doc":"```erlang\n1> tuple_to_list({share, {'Ericsson_B', 163}}).\n[share,{'Ericsson_B',163}]\n```","ref":"erlang.html#tuple_to_list/1-examples"},{"type":"function","title":"erlang.unalias/1","doc":"Deactivate the alias `Alias` previously created by the calling process.\n\nAn alias can, for example, be created via `alias/0` or `monitor/3`.\n[`unalias/1`](`unalias/1`) will always deactivate the alias regardless of\noptions used when creating the alias.\n\nReturns true if `Alias` was a currently active alias for current processes;\notherwise, false.\n\nFor more information on process aliases see the\n[_Process Aliases_](`e:system:ref_man_processes.md#process-aliases`) section of\nthe _Erlang Reference Manual_.","ref":"erlang.html#unalias/1"},{"type":"function","title":"erlang.unique_integer/0","doc":"Generates and returns an\n[integer unique on current runtime system instance](`e:system:system_limits.md#unique_integers`).\n\nEquivalent to calling [`erlang:unique_integer([])`](`unique_integer/1`).","ref":"erlang.html#unique_integer/0"},{"type":"function","title":"Examples - erlang.unique_integer/0","doc":"```erlang\n> erlang:unique_integer().\n-576460752303422335\n```","ref":"erlang.html#unique_integer/0-examples"},{"type":"function","title":"erlang.unique_integer/1","doc":"Generates and returns an\n[integer unique on current runtime system instance](`e:system:system_limits.md#unique_integers`).\n\nThe integer is unique in the sense that this BIF, using the same set of\nmodifiers, does not return the same integer more than once on the current\nruntime system instance. Each integer value can of course be constructed by\nother means.\n\nBy default, when `[]` is passed as `ModifierList`, both negative and positive\nintegers can be returned. This to use the range of integers that do not need\nheap memory allocation as much as possible. By default the returned integers are\nalso only guaranteed to be unique, that is, any returned integer can be smaller\nor larger than previously returned integers.\n\n`Modifier`s:\n\n- **positive** - Returns only positive integers.\n\n  Notice that by passing the `positive` modifier you will get heap allocated\n  integers (bignums) quicker.\n\n- **monotonic** - Returns\n  [strictly monotonically increasing](time_correction.md#strictly-monotonically-increasing)\n  integers corresponding to creation time. That is, the integer returned is\n  always larger than previously returned integers on the current runtime system\n  instance.\n\n  These values can be used to determine order between events on the runtime\n  system instance. That is, if both `X = erlang:unique_integer([monotonic])` and\n  `Y = erlang:unique_integer([monotonic])` are executed by different processes\n  (or the same process) on the same runtime system instance and `X   #### Warning {: .warning }\n  >\n  > Strictly monotonically increasing values are inherently quite expensive to\n  > generate and scales poorly. This is because the values need to be\n  > synchronized between CPU cores. That is, do not pass the `monotonic`\n  > modifier unless you really need strictly monotonically increasing values.\n\nAll valid `Modifier`s can be combined. Repeated (valid) `Modifier`s in the\n`ModifierList` are ignored.\n\n> #### Note {: .info }\n>\n> The set of integers returned by `erlang:unique_integer/1` using different sets\n> of `Modifier`s _will overlap_. For example, by calling\n> [`unique_integer([monotonic])`](`unique_integer/1`), and\n> [`unique_integer([positive, monotonic])`](`unique_integer/1`) repeatedly, you\n> will eventually see some integers that are returned by both calls.\n\nFailures:\n\n- **`badarg`** - if `ModifierList` is not a proper list.\n\n- **`badarg`** - if `Modifier` is not a valid modifier.","ref":"erlang.html#unique_integer/1"},{"type":"function","title":"Examples - erlang.unique_integer/1","doc":"```erlang\n> erlang:unique_integer([positive]).\n1186\n```","ref":"erlang.html#unique_integer/1-examples"},{"type":"function","title":"erlang.universaltime/0","doc":"Returns the current date and time according to Universal Time Coordinated (UTC)\nin the form `{{Year, Month, Day}, {Hour, Minute, Second}}` if supported by the\nunderlying OS. Otherwise `erlang:universaltime()` is equivalent to\n`erlang:localtime()`. The return value is based on the\n[OS System Time](time_correction.md#os-system-time).\n\nFor example:\n\n```erlang\n> erlang:universaltime().\n{{1996,11,6},{14,18,43}}\n```","ref":"erlang.html#universaltime/0"},{"type":"function","title":"erlang.universaltime_to_localtime/1","doc":"Converts Universal Time Coordinated (UTC) date and time to local date and time\nin the form `{{Year, Month, Day}, {Hour, Minute, Second}}` if supported by the\nunderlying OS. Otherwise no conversion is done, and `Universaltime` is returned.\n\nFor example:\n\n```erlang\n> erlang:universaltime_to_localtime({{1996,11,6},{14,18,43}}).\n{{1996,11,7},{15,18,43}}\n```\n\nFailure: `badarg` if `Universaltime` denotes an invalid date and time.","ref":"erlang.html#universaltime_to_localtime/1"},{"type":"function","title":"erlang.unlink/1","doc":"Removes a link between the calling process and another process or a port\nidentified by `Id`.\n\nWe will from here on call the identified process or port unlinkee.\n\nA link can be set up using the `link/1` BIF. For more information on links and\nexit signals due to links, see the _Processes_ chapter in the _Erlang Reference\nManual_:\n\n- [Links](`e:system:ref_man_processes.md#links`)\n- [Sending Exit Signals](`e:system:ref_man_processes.md#sending_exit_signals`)\n- [Receiving Exit Signals](`e:system:ref_man_processes.md#receiving_exit_signals`)\n\nOnce [`unlink(Id)`](`unlink/1`) has returned, it is guaranteed that the link\nbetween the caller and the unlinkee has no effect on the caller in the future\n(unless the link is setup again). Note that if the caller is\n[trapping exits](#process_flag_trap_exit), an\n`{'EXIT', Id, ExitReason}` message due to the link may have been placed in the\nmessage queue of the caller before the [`unlink(Id)`](`unlink/1`) call\ncompleted. Also note that the `{'EXIT', Id, ExitReason}` message may be the\nresult of the link, but may also be the result of the unlikee sending the caller\nan exit signal by calling the `exit/2` BIF. Therefore, it may or may not be\nappropriate to clean up the message queue after a call to\n[`unlink(Id)`](`unlink/1`) as follows, when trapping exits:\n\n```erlang\nunlink(Id),\nreceive\n    {'EXIT', Id, _} ->\n        true\nafter 0 ->\n        true\nend\n```\n\nThe link removal is performed asynchronously. If such a link does not exist,\nnothing is done. A detailed description of the\n[link protocol](erl_dist_protocol.md#link_protocol) can be found in the\n_Distribution Protocol_ chapter of the _ERTS User's Guide_.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.\n\nFailure: `badarg` if `Id` does not identify a process or a node local port.","ref":"erlang.html#unlink/1"},{"type":"function","title":"erlang.unregister/1","doc":"Removes the [`registered name`](`register/2`) `RegName` associated with a\nprocess identifier or a port identifier from the\n[`name registry`](`e:system:ref_man_processes.md#runtime-service`).\n\nFor example:\n\n```erlang\n> unregister(db).\ntrue\n```\n\nKeep in mind that you can still receive signals associated with the registered\nname after it has been unregistered as the sender may have looked up the name\nbefore sending to it.\n\nUsers are advised not to unregister system processes.\n\nFailure: `badarg` if `RegName` is not a registered name.","ref":"erlang.html#unregister/1"},{"type":"function","title":"erlang.whereis/1","doc":"Returns the process identifier or port identifier with the\n[`registered name`](`register/2`) `RegName` from the\n[`name registry`](`e:system:ref_man_processes.md#runtime-service`). Returns\n`undefined` if the name is not registered.\n\nFor example:\n\n```erlang\n> whereis(db).\n<0.43.0>\n```","ref":"erlang.html#whereis/1"},{"type":"function","title":"erlang.yield/0","doc":"Tries to give other processes with the same or higher priority (if any) a chance\nto execute before returning. There is no guarantee that any other process runs\nbetween the invocation and return of `erlang:yield/0`.\n\nSee the documentation for\n[`receive-after` expressions](`e:system:expressions.md#receive`) for how to make\nthe current process sleep for a specific number of milliseconds.\n\n> #### Warning {: .warning }\n>\n> There is seldom or never any need to use this BIF. Using this BIF without a\n> thorough grasp of how the scheduler works can cause performance degradation.\n> The current implementation of this function puts the current process last in\n> the current scheduler's queue for processes of the same priority as the\n> current process.","ref":"erlang.html#yield/0"},{"type":"module","title":"init","doc":"Coordination of system startup.\n\nThis module is preloaded and contains the code for the `init` system process\nthat coordinates the startup of the system. The first function evaluated at\nstartup is [`boot(BootArgs)`](`boot/1`), where `BootArgs` is a list of\ncommand-line arguments supplied to the Erlang runtime system from the local\noperating system; see [`erl(1)`](erl_cmd.md).\n\n`init` reads the boot script, which contains instructions on how to initiate the\nsystem. For more information about boot scripts, see\n[`script(4)`](`e:sasl:script.md`).\n\n`init` also contains functions to restart, reboot, and stop the system.\n\n[](){: #flags }","ref":"init.html"},{"type":"module","title":"Command-Line Flags - init","doc":"> #### Warning {: .warning }\n>\n> The support for loading of code from archive files is experimental. The only\n> purpose of releasing it before it is ready is to obtain early feedback. The\n> file format, semantics, interfaces, and so on, can be changed in a future\n> release.\n\nThe `init` module interprets the following command-line flags:\n\n- **`--`** - Everything following `--` up to the next flag is considered plain\n  arguments and can be retrieved using `get_plain_arguments/0`.\n\n- **`-code_path_choice Choice`** - Can be set to `strict` or `relaxed`. It\n  controls how each directory in the code path is to be interpreted:\n\n  - Strictly as it appears in the `boot script`, or\n  - `init` is to be more relaxed and try to find a suitable directory if it can\n    choose from a regular `ebin` directory and an `ebin` directory in an archive\n    file.\n\n  It defaults to `strict` from OTP 27 and this option is scheduled for removal\n  in OTP 28.\n\n- **`-epmd_module Module`** - This flag is deprecated and has been replaced by\n  the `kernel` application parameter [`epmd_module`](`e:kernel:kernel_app.md#epmd_module`).\n\n- **`-eval Expr`** - Scans, parses, and evaluates an arbitrary expression `Expr`\n  during system initialization. If any of these steps fail (syntax error, parse\n  error, or exception during evaluation), Erlang stops with an error message. In\n  the following example Erlang is used as a hexadecimal calculator:\n\n  ```text\n  % erl -noshell -eval 'R = 16#1F+16#A0, io:format(\"~.16B~n\", [R])' \\\\\n  -s erlang halt\n  BF\n  ```\n\n  If multiple `-eval` expressions are specified, they are evaluated sequentially\n  in the order specified. `-eval` expressions are evaluated sequentially with\n  `-s` and `-run` function calls (this also in the order specified). As with\n  `-s` and `-run`, an evaluation that does not terminate blocks the system\n  initialization process.\n\n- **`-extra`** - Everything following `-extra` is considered plain arguments and\n  can be retrieved using `get_plain_arguments/0`.\n\n  Example:\n\n  ```erlang\n  % erl -extra +A 1 --\n  ...\n  1> init:get_plain_arguments().\n  [\"+A\",\"1\",\"--\"]\n  ```\n\n  The `-extra` flag can be passed on the command line, through `ERL_*FLAGS` or\n  `-args_file`. It only effects the remaining command-line flags in the entity\n  in which it is passed. If multiple `-extra` flags are passed they are\n  concatenated using the same order rules as `ERL_*FLAGS` or `-args_file` in\n  which they are given.\n\n  Example:\n\n  ```text\n  % ERL_AFLAGS=\"-extra a\" ERL_ZFLAGS=\"-extra d\" erl -extra b -extra c\n  ...\n  1> init:get_plain_arguments().\n  [\"a\",\"b\",\"-extra\",\"c\",\"d\"]\n  ```\n\n- **`-S Mod [Func [Arg1, Arg2, ...]]`** - Evaluates the specified function call\n  during system initialization. `Func` defaults to `start`. If no arguments are\n  provided, the function is assumed to be of arity 0. Otherwise it is assumed to\n  be of arity 1, taking the list `[Arg1,Arg2,...]` as argument. All arguments\n  are passed as strings. If an exception is raised, Erlang stops with an error\n  message.\n\n  Example:\n\n  ```text\n  % erl -S httpd serve --port 8080 /var/www/html\n  ```\n\n  This starts the Erlang runtime system and evaluates the function\n  `httpd:serve([\"--port\", \"8080\", \"/var/www/html\"])`. All arguments up to the\n  end of the command line will be passed to the called function.\n\n  The function is executed sequentially in an initialization process, which then\n  terminates normally and passes control to the user. This means that a `-S`\n  call that does not return blocks further processing; to avoid this, use some\n  variant of `spawn` in such cases.\n\n  The `-S` flag is only allowed on the command line. If passed through\n  `ERL_*FLAGS` or `-args_file` it will be parsed as a normal command line flag.\n\n- **`-run Mod [Func [Arg1, Arg2, ...]]`** - Evaluates the specified function\n  call during system initialization. `Func` defaults to `start`. If no arguments\n  are provided, the function is assumed to be of arity 0. Otherwise it is\n  assumed to be of arity 1, taking the list `[Arg1,Arg2,...]` as argument. All\n  arguments are passed as strings. If an exception is raised, Erlang stops with\n  an error message.\n\n  Example:\n\n  ```text\n  % erl -run foo -run foo bar -run foo bar baz 1 2\n  ```\n\n  This starts the Erlang runtime system and evaluates the following functions:\n\n  ```text\n  foo:start()\n  foo:bar()\n  foo:bar([\"baz\", \"1\", \"2\"]).\n  ```\n\n  The functions are executed sequentially in an initialization process, which\n  then terminates normally and passes control to the user. This means that a\n  `-run` call that does not return blocks further processing; to avoid this, use\n  some variant of `spawn` in such cases.\n\n  > #### Note {: .info }\n  >\n  > This flag will not forward arguments beginning with a hyphen (-) to the\n  > specified function, as these will be interpreted as flags to the runtime. If\n  > the function uses flags in this form, it is advised to use `-S` instead.\n\n- **`-s Mod [Func [Arg1, Arg2, ...]]`** - Evaluates the specified function call\n  during system initialization. `Func` defaults to `start`. If no arguments are\n  provided, the function is assumed to be of arity 0. Otherwise it is assumed to\n  be of arity 1, taking the list `[Arg1,Arg2,...]` as argument. All arguments\n  are passed as atoms. If an exception is raised, Erlang stops with an error\n  message.\n\n  Example:\n\n  ```text\n  % erl -s foo -s foo bar -s foo bar baz 1 2\n  ```\n\n  This starts the Erlang runtime system and evaluates the following functions:\n\n  ```text\n  foo:start()\n  foo:bar()\n  foo:bar([baz, '1', '2']).\n  ```\n\n  The functions are executed sequentially in an initialization process, which\n  then terminates normally and passes control to the user. This means that a\n  `-s` call that does not return blocks further processing; to avoid this, use\n  some variant of `spawn` in such cases.\n\n  Because of the limited length of atoms, it is recommended to use `-run`\n  instead.\n\n  > #### Note {: .info }\n  >\n  > This flag will not forward arguments beginning with a hyphen (-) to the\n  > specified function, as these will be interpreted as flags to the runtime. If\n  > the function uses flags in this form, it is advised to use `-S` instead,\n  > with the additional caveat that arguments are passed as strings instead of\n  > atoms.","ref":"init.html#module-command-line-flags"},{"type":"module","title":"Example - init","doc":"```erlang\n% erl -- a b -children thomas claire -ages 7 3 -- x y\n...\n\n1> init:get_plain_arguments().\n[\"a\",\"b\",\"x\",\"y\"]\n2> init:get_argument(children).\n{ok,[[\"thomas\",\"claire\"]]}\n3> init:get_argument(ages).\n{ok, [[\"7\",\"3\"]]}\n4> init:get_argument(silly).\nerror\n```","ref":"init.html#module-example"},{"type":"module","title":"See Also - init","doc":"`m:erl_prim_loader`, `m:heart`","ref":"init.html#module-see-also"},{"type":"function","title":"init.boot/1","doc":"Starts the Erlang runtime system.\n\nThis function is called when the emulator is started and coordinates system startup.\n\n`BootArgs` are all command-line arguments except the emulator flags, that is,\nflags and plain arguments; see [`erl(1)`](erl_cmd.md).\n\n`init` interprets some of the flags, see section\n[Command-Line Flags](`m:init#flags`) below. The remaining flags (\"user flags\")\nand plain arguments are passed to the `init` loop and can be retrieved by\ncalling `get_arguments/0` and `get_plain_arguments/0`, respectively.","ref":"init.html#boot/1"},{"type":"function","title":"init.get_argument/1","doc":"Returns all values associated with the command-line user flag `Flag`.\n\nIf `Flag` is provided several times, each `Values` is returned in preserved order.\nExample:\n\n```erlang\n% erl -a b c -a d\n...\n1> init:get_argument(a).\n{ok,[[\"b\",\"c\"],[\"d\"]]}\n```\n\nThe following flags are defined automatically and can be retrieved using this\nfunction:\n\n- **`root`** - The installation directory of Erlang/OTP, `$ROOT`:\n\n  ```text\n  2> init:get_argument(root).\n  {ok,[[\"/usr/local/otp/releases/otp_beam_solaris8_r10b_patched\"]]}\n  ```\n\n- **`progname`** - The name of the program which started Erlang:\n\n  ```erlang\n  3> init:get_argument(progname).\n  {ok,[[\"erl\"]]}\n  ```\n\n- **`home`{: #home }** - The home directory (on Unix, the value of $HOME):\n\n  ```erlang\n  4> init:get_argument(home).\n  {ok,[[\"/home/harry\"]]}\n  ```\n\nReturns `error` if no value is associated with `Flag`.","ref":"init.html#get_argument/1"},{"type":"function","title":"init.get_arguments/0","doc":"Returns all command-line flags and the system-defined flags, see\n`get_argument/1`.","ref":"init.html#get_arguments/0"},{"type":"function","title":"init.get_plain_arguments/0","doc":"Returns any plain command-line arguments as a list of strings (possibly empty).","ref":"init.html#get_plain_arguments/0"},{"type":"function","title":"init.get_status/0","doc":"The current status of the `init` process can be inspected.\n\nDuring system startup (initialization), `InternalStatus` is `starting`, and\n`ProvidedStatus` indicates how far the boot script has been interpreted. Each\n`{progress, Info}` term interpreted in the boot script affects `ProvidedStatus`,\nthat is, `ProvidedStatus` gets the value of `Info`.","ref":"init.html#get_status/0"},{"type":"type","title":"init.internal_status/0","doc":"Current status of init.","ref":"init.html#t:internal_status/0"},{"type":"type","title":"init.mode/0","doc":"Code loading mode.","ref":"init.html#t:mode/0"},{"type":"function","title":"init.reboot/0","doc":"Reboot the Erlang node.\n\nAll applications are taken down smoothly, all code is unloaded, and all ports\nare closed before the system terminates.\n\nIf command-line flag `-heart` was specified, the `heart` program tries to reboot\n the system. For more information, see `m:heart`.\n\nTo limit the shutdown time, the time `init` is allowed to spend taking down\napplications, command-line flag `-shutdown_time` is to be used.","ref":"init.html#reboot/0"},{"type":"function","title":"init.restart/0","doc":"The same as [`restart([])`](`restart/1`).","ref":"init.html#restart/0"},{"type":"function","title":"init.restart/1","doc":"Restart all Erlang applications.\n\nThe system is restarted _inside_ the running Erlang node, which means that the\nemulator is not restarted. All applications are taken down smoothly, all code is\nunloaded, and all ports are closed before the system is booted again in the same\nway as initially started.\n\nThe same `BootArgs` are used when restarting the system unless the `mode` option\nis given, allowing the code loading mode to be set to either `embedded` or\n`interactive`. All other `BootArgs` remain the same.\n\nTo limit the shutdown time, the time `init` is allowed to spend taking down\napplications, command-line flag `-shutdown_time` is to be used.","ref":"init.html#restart/1"},{"type":"function","title":"init.script_id/0","doc":"Gets the identity of the boot script used to boot the system.\n\n`Id` can be any Erlang term. In the delivered boot scripts, `Id` is `{Name, Vsn}`.\n`Name` and `Vsn` are strings.","ref":"init.html#script_id/0"},{"type":"function","title":"init.stop/0","doc":"The same as [`stop(0)`](`stop/1`).","ref":"init.html#stop/0"},{"type":"function","title":"init.stop/1","doc":"Stop the Erlang node.\n\nAll applications are taken down smoothly, all code is unloaded, and all ports\nare closed before the system terminates by calling [`halt(Status)`](`halt/1`).\nIf command-line flag `-heart` was specified, the `heart` program is terminated\nbefore the Erlang node terminates. For more information, see `m:heart`.\n\nTo limit the shutdown time, the time `init` is allowed to spend taking down\napplications, command-line flag `-shutdown_time` is to be used.","ref":"init.html#stop/1"},{"type":"module","title":"persistent_term","doc":"Persistent terms.\n\nThis module is similar to `m:ets` in that it provides a storage for Erlang terms\nthat can be accessed in constant time, but with the difference that\n`persistent_term` has been highly optimized for reading terms at the expense of\nwriting and updating terms. When a persistent term is updated or deleted, a\nglobal garbage collection pass is run to scan all processes for the deleted\nterm, and to copy it into each process that still uses it. Therefore,\n`persistent_term` is suitable for storing Erlang terms that are frequently\naccessed but never or infrequently updated.\n\n> #### Warning {: .warning }\n>\n> Persistent terms is an advanced feature and is not a general replacement for\n> ETS tables. Before using persistent terms, make sure to fully understand the\n> consequence to system performance when updating or deleting persistent terms.\n\nTerm lookup (using `get/1`) is done in constant time and without taking any\nlocks, and the term is **not** copied to the heap (as is the case with terms\nstored in ETS tables).\n\nStoring or updating a term (using `put/2`) is proportional to the number of\nalready created persistent terms because the hash table holding the keys will be\ncopied. In addition, the term itself will be copied.\n\nWhen a (complex) term is deleted (using `erase/1`) or replaced by another (using\n`put/2`), a global garbage collection is initiated. It works like this:\n\n- All processes in the system will be scheduled to run a scan of their heaps for\n  the term that has been deleted. While such scan is relatively light-weight, if\n  there are many processes, the system can become less responsive until all\n  processes have scanned their heaps.\n- If the deleted term (or any part of it) is still used by a process, that\n  process will do a major (fullsweep) garbage collection and copy the term into\n  the process. However, at most two processes at a time will be scheduled to do\n  that kind of garbage collection.\n\nDeletion of atoms and other terms that fit in one machine word is specially\noptimized to avoid doing a global GC. It is still not recommended to update\npersistent terms with such values too frequently because the hash table holding\nthe keys is copied every time a persistent term is updated.\n\nSome examples are suitable uses for persistent terms are:\n\n- Storing of configuration data that must be easily accessible by all processes.\n- Storing of references for NIF resources.\n- Storing of references for efficient counters.\n- Storing an atom to indicate a logging level or whether debugging is turned on.","ref":"persistent_term.html"},{"type":"module","title":"Storing Huge Persistent Terms - persistent_term","doc":"The current implementation of persistent terms uses the literal\n[allocator](erts_alloc.md) also used for literals (constant terms) in BEAM code.\nBy default, 1 GB of virtual address space is reserved for literals in BEAM code\nand persistent terms. The amount of virtual address space reserved for literals\ncan be changed by using the [`+MIscs option`](erts_alloc.md#MIscs) when starting\nthe emulator.\n\nHere is an example how the reserved virtual address space for literals can be\nraised to 2 GB (2048 MB):\n\n```text\n    erl +MIscs 2048\n```","ref":"persistent_term.html#module-storing-huge-persistent-terms"},{"type":"module","title":"Best Practices for Using Persistent Terms - persistent_term","doc":"It is recommended to use keys like `?MODULE` or `{?MODULE,SubKey}` to avoid name\ncollisions.\n\nPrefer creating a few large persistent terms to creating many small persistent\nterms. The execution time for storing a persistent term is proportional to the\nnumber of already existing terms.\n\nUpdating a persistent term with the same value as it already has is specially\noptimized to do nothing quickly; thus, there is no need compare the old and new\nvalues and avoid calling `put/2` if the values are equal.\n\nWhen atoms or other terms that fit in one machine word are deleted, no global GC\nis needed. Therefore, persistent terms that have atoms as their values can be\nupdated more frequently, but note that updating such persistent terms is still\nmuch more expensive than reading them.\n\nUpdating or deleting a persistent term will trigger a global GC if the term does\nnot fit in one machine word. Processes will be scheduled as usual, but all\nprocesses will be made runnable at once, which will make the system less\nresponsive until all processes have run and scanned their heaps for the deleted\nterms. One way to minimize the effects on responsiveness could be to minimize\nthe number of processes on the node before updating or deleting a persistent\nterm. It would also be wise to avoid updating terms when the system is at peak\nload.\n\nAvoid storing a retrieved persistent term in a process if that persistent term\ncould be deleted or updated in the future. If a process holds a reference to a\npersistent term when the term is deleted, the process will be garbage collected\nand the term copied to the process.\n\nAvoid updating or deleting more than one persistent term at a time. Each deleted\nterm will trigger its own global GC. That means that deleting N terms will make\nthe system less responsive N times longer than deleting a single persistent\nterm. Therefore, terms that are to be updated at the same time should be\ncollected into a larger term, for example, a map or a tuple.","ref":"persistent_term.html#module-best-practices-for-using-persistent-terms"},{"type":"module","title":"Example - persistent_term","doc":"The following example shows how lock contention for ETS tables can be minimized\nby having one ETS table for each scheduler. The table identifiers for the ETS\ntables are stored as a single persistent term:\n\n```erlang\n    %% There is one ETS table for each scheduler.\n    Sid = erlang:system_info(scheduler_id),\n    Tid = element(Sid, persistent_term:get(?MODULE)),\n    ets:update_counter(Tid, Key, 1).\n```","ref":"persistent_term.html#module-example"},{"type":"function","title":"persistent_term.erase/1","doc":"Erase the name for the persistent term with key `Key`.\n\nThe return value will be `true` if there was a persistent term with the key `Key`,\nand `false` if there was no persistent term associated with the key.\n\nIf there existed a previous persistent term associated with key `Key`, a global\nGC has been initiated when [`erase/1`](`erase/1`) returns. See\n[Description](`m:persistent_term`).","ref":"persistent_term.html#erase/1"},{"type":"function","title":"persistent_term.get/0","doc":"Retrieve the keys and values for all persistent terms.\n\nThe keys will be copied to the heap for the process calling `get/0`,\nbut the values will not.","ref":"persistent_term.html#get/0"},{"type":"function","title":"persistent_term.get/1","doc":"Retrieve the value for the persistent term associated with the key `Key`.\n\nThe lookup will be made in constant time and the value will not be copied to the\nheap of the calling process.\n\nThis function fails with a `badarg` exception if no term has been stored with\nthe key `Key`.\n\nIf the calling process holds on to the value of the persistent term and the\npersistent term is deleted in the future, the term will be copied to the\nprocess.","ref":"persistent_term.html#get/1"},{"type":"function","title":"persistent_term.get/2","doc":"Retrieve the value for the persistent term associated with the key `Key`.\n\nThe lookup will be made in constant time and the value will not be copied to the\nheap of the calling process.\n\nThis function returns `Default` if no term has been stored with the key `Key`.\n\nIf the calling process holds on to the value of the persistent term and the\npersistent term is deleted in the future, the term will be copied to the\nprocess.","ref":"persistent_term.html#get/2"},{"type":"function","title":"persistent_term.info/0","doc":"Return information about persistent terms in a map.\n\nThe map has the following keys:\n\n- **`count`** - The number of persistent terms.\n\n- **`memory`** - The total amount of memory (measured in bytes) used by all\n  persistent terms.","ref":"persistent_term.html#info/0"},{"type":"type","title":"persistent_term.key/0","doc":"Any Erlang term.","ref":"persistent_term.html#t:key/0"},{"type":"function","title":"persistent_term.put/2","doc":"Store the value `Value` as a persistent term and associate it with the key\n`Key`.\n\nIf the value `Value` is equal to the value previously stored for the key,\n[`put/2`](`put/2`) will do nothing and return quickly.\n\nIf there existed a previous persistent term associated with key `Key`, a global\nGC has been initiated when [`put/2`](`put/2`) returns. See\n[Description](`m:persistent_term`).","ref":"persistent_term.html#put/2"},{"type":"type","title":"persistent_term.value/0","doc":"Any Erlang term.","ref":"persistent_term.html#t:value/0"},{"type":"module","title":"zlib","doc":"zlib compression interface.\n\nThis module provides an API for the zlib library\n([www.zlib.net](http://www.zlib.net)). It is used to compress and decompress\ndata. The data format is described by\n[RFC 1950](https://www.ietf.org/rfc/rfc1950.txt),\n[RFC 1951](https://www.ietf.org/rfc/rfc1951.txt), and\n[RFC 1952](https://www.ietf.org/rfc/rfc1952.txt).\n\nA typical (compress) usage is as follows:\n\n```erlang\nZ = zlib:open(),\nok = zlib:deflateInit(Z,default),\n\nCompress = fun F(end_of_data) ->\n                 zlib:deflate(Z, [], finish);\n               F(Data) ->\n                 [zlib:deflate(Z, Data)|F(Read())]\n           end,\nCompressed = Compress(Read()),\nok = zlib:deflateEnd(Z),\nzlib:close(Z),\nlist_to_binary(Compressed)\n```\n\nIn all functions errors, `{'EXIT',{Reason,Backtrace}}`, can be thrown, where\n`Reason` describes the error.\n\nTypical `Reason`s:\n\n- **`badarg`** - Bad argument.\n\n- **`not_initialized`** - The stream hasn't been initialized, eg. if\n  `inflateInit/1` wasn't called prior to a call to `inflate/2`.\n\n- **`not_on_controlling_process`** - The stream was used by a process that\n  doesn't control it. Use `set_controlling_process/2` if you need to transfer a\n  stream to a different process.\n\n- **`data_error`** - The data contains errors.\n\n- **`stream_error`** - Inconsistent stream state.\n\n- **`{need_dictionary,Adler32}`** - See `inflate/2`.","ref":"zlib.html"},{"type":"function","title":"zlib.close/1","doc":"Closes the stream referenced by `Z`.","ref":"zlib.html#close/1"},{"type":"function","title":"zlib.compress/1","doc":"Compresses data with zlib headers and checksum.","ref":"zlib.html#compress/1"},{"type":"function","title":"zlib.deflate/2","doc":"Same as [`deflate(Z, Data, none)`](`deflate/3`).","ref":"zlib.html#deflate/2"},{"type":"function","title":"zlib.deflate/3","doc":"Compresses as much data as possible, and stops when the input buffer becomes\nempty.\n\nIt can introduce some output latency (reading input without producing any\noutput) except when forced to flush.\n\nIf `Flush` is set to `sync`, all pending output is flushed to the output buffer\nand the output is aligned on a byte boundary, so that the decompressor can get\nall input data available so far. Flushing can degrade compression for some\ncompression algorithms; thus, use it only when necessary.\n\nIf `Flush` is set to `full`, all output is flushed as with `sync`, and the\ncompression state is reset so that decompression can restart from this point if\nprevious compressed data has been damaged or if random access is desired. Using\n`full` too often can seriously degrade the compression.\n\nIf `Flush` is set to `finish`, pending input is processed, pending output is\nflushed, and [`deflate/3`](`deflate/3`) returns. Afterwards the only possible\noperations on the stream are `deflateReset/1` or `deflateEnd/1`.\n\n`Flush` can be set to `finish` immediately after\n[`deflateInit`](`deflateInit/1`) if all compression is to be done in one step.\n\nExample:\n\n```erlang\nzlib:deflateInit(Z),\nB1 = zlib:deflate(Z,Data),\nB2 = zlib:deflate(Z,<< >>,finish),\nzlib:deflateEnd(Z),\nlist_to_binary([B1,B2])\n```","ref":"zlib.html#deflate/3"},{"type":"function","title":"zlib.deflateEnd/1","doc":"Ends the deflate session and cleans all data used.\n\nNotice that this function throws a `data_error` exception if the last call to\n`deflate/3` was not called with `Flush` set to `finish`.","ref":"zlib.html#deflateEnd/1"},{"type":"function","title":"zlib.deflateInit/1","doc":"Same as `zlib:deflateInit(Z, default)`.","ref":"zlib.html#deflateInit/1"},{"type":"function","title":"zlib.deflateInit/2","doc":"Initializes a zlib stream for compression.\n\n`Level` decides the compression level to be used:\n\n- `default` gives default compromise between speed and compression\n- `none` (0) gives no compression\n- `best_speed` (1) gives best speed\n- `best_compression` (9) gives best compression","ref":"zlib.html#deflateInit/2"},{"type":"function","title":"zlib.deflateInit/6","doc":"Initiates a zlib stream for compression.\n\n- **`Level`** - Compression level to use:\n\n  - `default` gives default compromise between speed and compression\n  - `none` (0) gives no compression\n  - `best_speed` (1) gives best speed\n  - `best_compression` (9) gives best compression\n\n- **`Method`** - Compression method to use, currently the only supported method\n  is `deflated`.\n\n- **`WindowBits`** - The base two logarithm of the window size (the size of the\n  history buffer). It is to be in the range 8 through 15. Larger values result\n  in better compression at the expense of memory usage. Defaults to 15 if\n  `deflateInit/2` is used. A negative `WindowBits` value suppresses the zlib\n  header (and checksum) from the stream. Notice that the zlib source mentions\n  this only as a undocumented feature.\n\n  > #### Warning {: .warning }\n  >\n  > Due to a known bug in the underlying zlib library, `WindowBits` values 8 and\n  > -8 do not work as expected. In zlib versions before 1.2.9 values 8 and -8\n  > are automatically changed to 9 and -9. _From zlib version 1.2.9 value -8 is\n  > rejected_ causing `zlib:deflateInit/6` to fail (8 is still changed to 9). It\n  > also seem possible that future versions of zlib may fix this bug and start\n  > accepting 8 and -8 as is.\n  >\n  > Conclusion: Avoid values 8 and -8 unless you know your zlib version supports\n  > them.\n\n- **`MemLevel`** - Specifies how much memory is to be allocated for the internal\n  compression state: `MemLevel`=1 uses minimum memory but is slow and reduces\n  compression ratio; `MemLevel`=9 uses maximum memory for optimal speed.\n  Defaults to 8.\n\n- **`Strategy`** - Tunes the compression algorithm. Use the following values:\n\n  - `default` for normal data\n  - `filtered` for data produced by a filter (or predictor)\n  - `huffman_only` to force Huffman encoding only (no string match)\n  - `rle` to limit match distances to one (run-length encoding)\n\n  Filtered data consists mostly of small values with a somewhat random\n  distribution. In this case, the compression algorithm is tuned to compress\n  them better. The effect of `filtered` is to force more Huffman coding and less\n  string matching; it is somewhat intermediate between `default` and\n  `huffman_only`. `rle` is designed to be almost as fast as `huffman_only`, but\n  gives better compression for PNG image data.\n\n  `Strategy` affects only the compression ratio, but not the correctness of the\n  compressed output even if it is not set appropriately.","ref":"zlib.html#deflateInit/6"},{"type":"function","title":"zlib.deflateParams/3","doc":"Dynamically updates the compression level and compression strategy.\n\nThe interpretation of `Level` and `Strategy` is as in `deflateInit/6`. This can be\nused to switch between compression and straight copy of the input data, or to\nswitch to a different kind of input data requiring a different strategy. If the\ncompression level is changed, the input available so far is compressed with the\nold level (and can be flushed); the new level takes effect only at the next call\nof `deflate/3`.\n\nBefore the call of `deflateParams`, the stream state must be set as for a call\nof [`deflate/3`](`deflate/3`), as the currently available input may have to be\ncompressed and flushed.","ref":"zlib.html#deflateParams/3"},{"type":"function","title":"zlib.deflateReset/1","doc":"Equivalent to `deflateEnd/1` followed by [`deflateInit/1,2,6`](`deflateInit/1`),\nbut does not free and reallocate all the internal compression state.\n\nThe stream keeps the same compression level and any other attributes.","ref":"zlib.html#deflateReset/1"},{"type":"function","title":"zlib.deflateSetDictionary/2","doc":"Initializes the compression dictionary from the specified byte sequence without\nproducing any compressed output.\n\nThis function must be called immediately after\n[`deflateInit/1,2,6`](`deflateInit/1`) or `deflateReset/1`, before any call of\n`deflate/3`.\n\nThe compressor and decompressor must use the same dictionary (see\n`inflateSetDictionary/2`).\n\nThe Adler checksum of the dictionary is returned.","ref":"zlib.html#deflateSetDictionary/2"},{"type":"function","title":"zlib.gunzip/1","doc":"Uncompresses data with gz headers and checksum.","ref":"zlib.html#gunzip/1"},{"type":"function","title":"zlib.gzip/1","doc":"Compresses data with gz headers and checksum.","ref":"zlib.html#gzip/1"},{"type":"function","title":"zlib.inflate/2","doc":"Equivalent to [`inflate(Z, Data, [])`](`inflate/3`)","ref":"zlib.html#inflate/2"},{"type":"function","title":"zlib.inflate/3","doc":"Decompresses as much data as possible. It can introduce some output latency\n(reading input without producing any output).\n\nCurrently the only available option is `{exception_on_need_dict,boolean()}`\nwhich controls whether the function should throw an exception when a preset\ndictionary is required for decompression. When set to false, a `need_dictionary`\ntuple will be returned instead. See `inflateSetDictionary/2` for details.\n\n> #### Warning {: .warning }\n>\n> This option defaults to `true` for backwards compatibility but we intend to\n> remove the exception behavior in a future release. New code that needs to\n> handle dictionaries manually should always specify\n> `{exception_on_need_dict,false}`.","ref":"zlib.html#inflate/3"},{"type":"function","title":"zlib.inflateEnd/1","doc":"Ends the inflate session and cleans all data used.\n\nNotice that this function throws a `data_error` exception if no end of stream\nwas found (meaning that not all data has been uncompressed).","ref":"zlib.html#inflateEnd/1"},{"type":"function","title":"zlib.inflateGetDictionary/1","doc":"Returns the decompression dictionary currently in use by the stream.\n\nThis function must be called between [`inflateInit/1,2`](`inflateInit/1`) and\n[`inflateEnd`](`inflateEnd/1`).\n\nOnly supported if ERTS was compiled with zlib >= 1.2.8.","ref":"zlib.html#inflateGetDictionary/1"},{"type":"function","title":"zlib.inflateInit/1","doc":"Initializes a zlib stream for decompression.","ref":"zlib.html#inflateInit/1"},{"type":"function","title":"zlib.inflateInit/2","doc":"Initializes a decompression session on zlib stream.\n\n`WindowBits` is the base two logarithm of the maximum window size (the size of\nthe history buffer). It is to be in the range 8 through 15. Default to 15 if\n`inflateInit/1` is used.\n\nIf a compressed stream with a larger window size is specified as input,\n`inflate/2` throws the `data_error` exception.\n\nA negative `WindowBits` value makes zlib ignore the zlib header (and checksum)\nfrom the stream. Notice that the zlib source mentions this only as a\nundocumented feature.","ref":"zlib.html#inflateInit/2"},{"type":"function","title":"zlib.inflateReset/1","doc":"Equivalent to `inflateEnd/1` followed by `inflateInit/1`, but does not free and\nreallocate all the internal decompression state. The stream will keep attributes\nthat could have been set by `inflateInit/1,2`.","ref":"zlib.html#inflateReset/1"},{"type":"function","title":"zlib.inflateSetDictionary/2","doc":"Initializes the decompression dictionary from the specified uncompressed byte\nsequence.\n\nThis function must be called as a response to an inflate operation\n(eg. `safeInflate/2`) returning `{need_dictionary,Adler,Output}` or in the case\nof deprecated functions, throwing an\n`{'EXIT',{{need_dictionary,Adler},_StackTrace}}` exception.\n\nThe dictionary chosen by the compressor can be determined from the Adler value\nreturned or thrown by the call to the inflate function. The compressor and\ndecompressor must use the same dictionary (See `deflateSetDictionary/2`).\n\nAfter setting the dictionary the inflate operation should be retried without new\ninput.\n\nExample:\n\n```erlang\ndeprecated_unpack(Z, Compressed, Dict) ->\n     case catch zlib:inflate(Z, Compressed) of\n          {'EXIT',{{need_dictionary,_DictID},_}} ->\n                 ok = zlib:inflateSetDictionary(Z, Dict),\n                 Uncompressed = zlib:inflate(Z, []);\n          Uncompressed ->\n                 Uncompressed\n     end.\n\nnew_unpack(Z, Compressed, Dict) ->\n    case zlib:inflate(Z, Compressed, [{exception_on_need_dict, false}]) of\n        {need_dictionary, _DictId, Output} ->\n            ok = zlib:inflateSetDictionary(Z, Dict),\n            [Output | zlib:inflate(Z, [])];\n        Uncompressed ->\n            Uncompressed\n    end.\n```","ref":"zlib.html#inflateSetDictionary/2"},{"type":"function","title":"zlib.open/0","doc":"Opens a zlib stream.","ref":"zlib.html#open/0"},{"type":"function","title":"zlib.safeInflate/2","doc":"Like `inflate/2`, but returns once it has expanded beyond a small\nimplementation-defined threshold. It's useful when decompressing untrusted input\nwhich could have been maliciously crafted to expand until the system runs out of\nmemory.\n\nThis function returns `{continue | finished, Output}`, where Output is the data\nthat was decompressed in this call. New input can be queued up on each call if\ndesired, and the function will return `{finished, Output}` once all queued data\nhas been decompressed.\n\nThis function can introduce some output latency (reading input without producing\nany output).\n\nIf a preset dictionary is required for further decompression, this function\nreturns a `need_dictionary` tuple. See `inflateSetDictionary/2`) for details.\n\nExample:\n\n```erlang\nwalk(Compressed, Handler) ->\n    Z = zlib:open(),\n    zlib:inflateInit(Z),\n    loop(Z, Handler, zlib:safeInflate(Z, Compressed)),\n    zlib:inflateEnd(Z),\n    zlib:close(Z).\n\nloop(Z, Handler, {continue, Output}) ->\n    Handler(Output),\n    loop(Z, Handler, zlib:safeInflate(Z, []));\nloop(Z, Handler, {finished, Output}) ->\n    Handler(Output).\n```","ref":"zlib.html#safeInflate/2"},{"type":"function","title":"zlib.set_controlling_process/2","doc":"Changes the controlling process of `Z` to `Pid`, which must be a local process.","ref":"zlib.html#set_controlling_process/2"},{"type":"function","title":"zlib.uncompress/1","doc":"Uncompresses data with zlib headers and checksum.","ref":"zlib.html#uncompress/1"},{"type":"function","title":"zlib.unzip/1","doc":"Uncompresses data without zlib headers and checksum.","ref":"zlib.html#unzip/1"},{"type":"type","title":"zlib.zflush/0","doc":"","ref":"zlib.html#t:zflush/0"},{"type":"function","title":"zlib.zip/1","doc":"Compresses data without zlib headers and checksum.","ref":"zlib.html#zip/1"},{"type":"type","title":"zlib.zlevel/0","doc":"","ref":"zlib.html#t:zlevel/0"},{"type":"type","title":"zlib.zmemlevel/0","doc":"","ref":"zlib.html#t:zmemlevel/0"},{"type":"type","title":"zlib.zmethod/0","doc":"","ref":"zlib.html#t:zmethod/0"},{"type":"type","title":"zlib.zstrategy/0","doc":"","ref":"zlib.html#t:zstrategy/0"},{"type":"type","title":"zlib.zstream/0","doc":"A zlib stream, see `open/0`.","ref":"zlib.html#t:zstream/0"},{"type":"type","title":"zlib.zwindowbits/0","doc":"Normally in the range `-15..-8 | 8..15`.","ref":"zlib.html#t:zwindowbits/0"},{"type":"extras","title":"ERTS Release Notes","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# ERTS Release Notes\n\nThis document describes the changes made to the ERTS application.","ref":"notes.html"},{"type":"extras","title":"Erts 16.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-16-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix Erlang to not crash when `t:io:standard_error/0` is a terminal but `t:io:standard_io/0` is not. This bug has existed since Erlang/OTP 28.0 and only effects Windows.\n\n  Own Id: OTP-19650 Aux Id: [GH-9872], [PR-9878]\n\n- In a debug build, the BIFs for the native debugger could cause a lock order violation diagnostic from the lock checker.\n\n  Own Id: OTP-19665 Aux Id: [PR-9926]\n\n- When building ERTS make sure correct `pcre2.h` file is included even if CFLAGS contains extra include paths.\n\n  Own Id: OTP-19675 Aux Id: [PR-9892]\n\n[GH-9872]: https://github.com/erlang/otp/issues/9872\n[PR-9878]: https://github.com/erlang/otp/pull/9878\n[PR-9926]: https://github.com/erlang/otp/pull/9926\n[PR-9892]: https://github.com/erlang/otp/pull/9892","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Erts 16.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-16-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- ETS tables with more than 2 billion keys are now supported.\n\n  Own Id: OTP-19144 Aux Id: [PR-8589]\n\n- The zlib library included in Erlang/OTP has been updated to version 1.3.1.\n\n  Own Id: OTP-19259 Aux Id: [PR-8862]\n\n- [`to_erl`](`e:system:embedded.md#to_erl`) no longer clears the screen when attaching to a [`run_erl`](run_erl_cmd.md) session.\n\n  Own Id: OTP-19263 Aux Id: [PR-8943]\n\n- The size of an atom in the Erlang source code was limited to 255 bytes in previous releases, meaning that an atom containing only emojis could contain only 63 emojis.\n  \n  While atoms are still only allowed to contain 255 characters, the number of bytes is no longer limited.\n  \n  External tools that parse the `AtU8` chunk of a BEAM file directly need to be updated. Tools that use [`beam_lib:chunks(Beam, [atoms])`](`beam_lib:chunks/2`) to read the atom table will continue to work.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-19285 Aux Id: [PR-8913]\n\n- Fixed a bug where [`erlc`](erlc_cmd.md) would crash if its path contained spaces.\n\n  Own Id: OTP-19295 Aux Id: [PR-8937]\n\n- The [`-noshell`](erl_cmd.md#noshell) mode has been updated to read data lazily from standard input. Before this fix any data would be read greedily which meant that Erlang could consume data not meant for it. It also meant that in order for `shell:start_interactive/0` to work on Windows an API that did not support reading of Unicode characters had to be used.\n\n  Own Id: OTP-19313 Aux Id: [PR-8962], [GH-8113]\n\n- The literals chunk in BEAM is no longer compressed, resulting in slightly smaller BEAM files when a BEAM file is stripped using `beam_lib:strip_files/1`.\n  \n  This is a potential incompatibility for tools that read and interpret the contents of the literal chunk. One way to update such tools to work with the new format is to retrieve the chunk using [`beam_lib:chunks(Beam, [literals])`](`beam_lib:chunks/2`).\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-19323 Aux Id: [GH-8967], [PR-8988]\n\n- Fixed `erlang:localtime_to_universaltime/2` with `IsDST` set to `true` and a timezone without daylight saving (for example `UTC`) to assume that the provided localtime does not have DST. This has always been the behaviour, but glibc versions after 2.37 changed it so that the behavior in Erlang also changed.\n\n  Own Id: OTP-19453 Aux Id: [PR-9207]\n\n- Support for the `TZ` environment variable has been added on Windows. Before this change only the time zone configured in the OS was ever used.\n\n  Own Id: OTP-19454 Aux Id: [PR-9207]\n\n- Suppressed various warnings when building the emulator with recent versions of GCC\n\n  Own Id: OTP-19488 Aux Id: [GH-9413], [PR-9417]\n\n- Fixed a bug in re:run and re:compile where the pattern parameter would be read incorrectly if it was a sub-binary.\n\n  Own Id: OTP-19507 Aux Id: [PR-9478], [GH-9438]\n\n- Fixed a broken makefile rule that made it so that  `O2` and `-O2` could not be part of the directory path when building Erlang/OTP. Bug has been present since R11B released 2006.\n\n  Own Id: OTP-19518 Aux Id: [PR-9488], [GH-9487]\n\n- Fixed the index types of modules `atomics` and `counters` from `integer()` to `pos_integer()`, which is more correct.\n\n  Own Id: OTP-19532 Aux Id: [PR-9538]\n\n- Fix [`erl`](erl_cmd.md) flags `+Q`, `+P` and `+t` to not allow values greater than 4294975487. Before this fix, the runtime would either truncate the value or crash depending on which value was given.\n\n  Own Id: OTP-19594 Aux Id: [PR-9671], [GH-9668]\n\n- The socket option names for built-in socket options in the module `socket` has been cleaned up.\n  \n  Now, for known socket options, it is only the canonical protocol names that are allowed such as `ip` for the socket option `{ip,recvtos}`.  Previously, due to being a protocol alias; `{'IP',recvtos}` was also allowed, as was the incorrect `{hopopt,recvtos}` because the protocol `hopopt` on Linux has the same protocol number as `ip`.\n  \n  So, to reduce confusion, all enumerated protocol names with the same number, are not allowed for the known protocol options, only the canonical name.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-19615 Aux Id: [PR-9718]\n\n- On windows, socket:sendv could incorrectly return {ok, integer()} on Windows.\n\n  Own Id: OTP-19617 Aux Id: OTP-19482\n\n[PR-8589]: https://github.com/erlang/otp/pull/8589\n[PR-8862]: https://github.com/erlang/otp/pull/8862\n[PR-8943]: https://github.com/erlang/otp/pull/8943\n[PR-8913]: https://github.com/erlang/otp/pull/8913\n[PR-8937]: https://github.com/erlang/otp/pull/8937\n[PR-8962]: https://github.com/erlang/otp/pull/8962\n[GH-8113]: https://github.com/erlang/otp/issues/8113\n[GH-8967]: https://github.com/erlang/otp/issues/8967\n[PR-8988]: https://github.com/erlang/otp/pull/8988\n[PR-9207]: https://github.com/erlang/otp/pull/9207\n[PR-9207]: https://github.com/erlang/otp/pull/9207\n[GH-9413]: https://github.com/erlang/otp/issues/9413\n[PR-9417]: https://github.com/erlang/otp/pull/9417\n[PR-9478]: https://github.com/erlang/otp/pull/9478\n[GH-9438]: https://github.com/erlang/otp/issues/9438\n[PR-9488]: https://github.com/erlang/otp/pull/9488\n[GH-9487]: https://github.com/erlang/otp/issues/9487\n[PR-9538]: https://github.com/erlang/otp/pull/9538\n[PR-9671]: https://github.com/erlang/otp/pull/9671\n[GH-9668]: https://github.com/erlang/otp/issues/9668\n[PR-9718]: https://github.com/erlang/otp/pull/9718","ref":"notes.html#fixed-bugs-and-malfunctions-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Functionality making it possible for processes to enable reception of [priority messages](`e:system:ref_man_processes.md#priority-messages`) has been introduced in accordance with [EEP 76](https://www.erlang.org/eeps/eep-0076).\n\n  Own Id: OTP-19198 Aux Id: [PR-9269], [PR-9519], [PR-9590]\n\n- The `trace:system/3` function has been added. It has a similar interface as `erlang:system_monitor/2` but it also supports trace sessions.\n\n  Own Id: OTP-19271 Aux Id: [PR-8660]\n\n- Added support for `SIGWINCH`, `SIGCONT`, and `SIGINFO` signals to `os:set_signal/2` where available.\n\n  Own Id: OTP-19278 Aux Id: [PR-8887], [PR-8938]\n\n- The [`erl -noshell`](erl_cmd.md#noshell) mode has been updated to have two sub modes called `raw` and `cooked`, where `cooked` is the old default behaviour and `raw` can be used to bypass the line-editing support of the native terminal. Using `raw` mode it is possible to read keystrokes as they happen without the user having to press Enter. Also, the `raw` mode does not echo the typed characters to stdout. An example of how to create a tic-tac-toe game using this mechanism is included in [the documentation](`e:stdlib:terminal_interface.md`).\n\n  Own Id: OTP-19314 Aux Id: [PR-8962], [GH-8037]\n\n- [EEP-69: Nominal Types](https://www.erlang.org/eeps/eep-0069) has been implemented. As a side effect, nominal types can encode opaque types. We changed all opaque-handling logic and improved opaque warnings in Dialyzer.\n  \n  All existing Erlang type systems are structural: two types are seen as equivalent if their structures are the same. Type comparisons are based on the structures of the types, not on how the user explicitly defines them. For example, in the following example, `meter()` and `foot()` are equivalent. The two types can be used interchangeably. Neither of them differ from the basic type `integer()`.\n  \n  ````\n  -type meter() :: integer().\n  -type foot() :: integer().\n  ````\n  \n  Nominal typing is an alternative type system, where two types are equivalent if and only if they are declared with the same type name. The EEP proposes one new syntax -nominal for declaring nominal types. Under nominal typing, `meter()` and `foot()` are no longer compatible. Whenever a function expects type `meter()`, passing in type `foot()` would result in a Dialyzer error.\n  \n  ````\n  -nominal meter() :: integer().\n  -nominal foot() :: integer().\n  ````\n  \n  More nominal type-checking rules can be found in the EEP. It is worth noting that most work for adding nominal types and type-checking is in `erl_types.erl`. The rest are changes that removed the previous opaque type-checking, and added an improved version of it using nominal type-checking with reworked warnings.\n  \n  Backwards compatibility for opaque type-checking is not preserved by this PR. Previous opaque warnings can appear with slightly different wordings. A new kind of opaque warning `opaque_union` is added, together with a Dialyzer option `no_opaque_union` to turn this kind of warnings off.\n\n  Own Id: OTP-19364 Aux Id: [PR-9079]\n\n- Two BIFs have been added to the `m:erlang` module. \n  \n  `erlang:processes_iterator/0` returns a process iterator that can be used to\n  iterate through the process table.\n  \n  `erlang:process_next/1` takes in a process iterator and returns a 2-tuple, consisting of a process identifier and a new process iterator. When the process iterator runs out of processes in the process table, `none` will be returned.\n  \n  Using these BIFs to scan the processes scales better than using `erlang:processes/0`, at the cost of giving less consistency guarantees. Process identifiers returned from consecutive calls of `erlang:process_next/1` may not be a consistent snapshot of all elements existing in the table during any of the calls. A process identifier is only guaranteed to be returned from a call to `erlang:processes_next/1` if it was alive before the call to `erlang:processes_iterator/0` and was still alive when `erlang:processes_next/1` returned `none`.\n\n  Own Id: OTP-19369 Aux Id: [PR-9129]\n\n- Improved open debug for gen_tcp_socket (connect and listen) and gen_udp_socket (open).\n\n  Own Id: OTP-19386\n\n- Module `m:re` has been updated to use PCRE2, which is mostly backward compatible with PCRE.\n  \n  The most noticeable incompatibilities are\n  * The default character encoding is pure ASCII and not Latin1. Unicode support\n    is still available with options `unicode` and `ucp`.\n  * Options `bsr_anycrlf`, `bsr_unicode` and `{newline,_}` are only set when a\n    regex is compiled and cannot be changed at matching for precompiled regex.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-19431 Aux Id: [PR-9299], [PR-9610]\n\n- When booting the runtime system on a 32-bit computer with a single core, the boot code will try to minimize the peak memory use by disabling parallel loading of BEAM files.\n\n  Own Id: OTP-19450 Aux Id: [PR-9342]\n\n- A `socket` option `{otp,select_read}` has been added that enables keeping a socket in the VM select/poll set between calls to recv functions.\n  \n  This increases throughput by reducing the number of calls to said functions.\n\n  Own Id: OTP-19451 Aux Id: [PR-9344]\n\n- `erlc` will now write compiler warnings and errors to standard error, instead of standard output, in common with other language compilers.\n\n  Own Id: OTP-19460 Aux Id: [GH-9255], [PR-9363]\n\n- Fixed the Windows build to always include `.pdb` files for all DLLs and executables to help with debugging.\n\n  Own Id: OTP-19465 Aux Id: [PR-9229]\n\n- Improve the naming of the (internal) esock mutex(es). It is now possible to configure (as in autoconf) the use of simple names for the esock mutex(es).\n\n  Own Id: OTP-19472 Aux Id: [PR-9388]\n\n- An optimization for appending 0 bits to a binary was removed in patch releases for OTP versions 25, 26, and 27. This optimization has been reintroduced in Erlang/OTP 28.\n\n  Own Id: OTP-19473 Aux Id: [PR-9396], [PR-8697]\n\n- Fixed licenses in files and added ORT curations to the following apps: otp, eldap, erl_interface, eunit, parsetools, stdlib, syntax_tools, and ERTS.\n\n  Own Id: OTP-19478 Aux Id: [PR-9376], [PR-9402], [PR-9819]\n\n- When using [`enif_select_read`](erl_nif.md#enif_select_read) (or [`enif_select`](erl_nif.md#enif_select) with `ERL_NIF_SELECT_READ`) on systems with kernel polling enabled (that is most Unix systems), file descriptors that are always re-enabled as soon as they trigger are now part of a specialized pollset just as [`driver_select`](erl_driver.md#driver_select). This reduces the CPU usage in such scenarios as the erts does not have to re-insert the FD everytime it it triggered. As a result of this optimization `m:socket` based reading uses a lot less CPU and achieves a higher throughput.\n\n  Own Id: OTP-19479 Aux Id: [PR-9275]\n\n- Added support for compiling Erlang/OTP for Windows on ARM64.\n\n  Own Id: OTP-19480 Aux Id: [PR-8734]\n\n- The Windows installer no longer creates the `erl.ini` file, making installations redistributable.\n\n  Own Id: OTP-19481 Aux Id: [PR-9330]\n\n- Added erlang:hibernate/0, which hibernates a process without discarding the stack.\n\n  Own Id: OTP-19503 Aux Id: [PR-9406]\n\n- The asmjit library (used by BeamJIT) has been updated to version 029075b84bf0161a761beb63e6eda519a29020db.\n\n  Own Id: OTP-19509 Aux Id: [PR-9495]\n\n- When compiling C/C++ code on Unix systems, the compiler hardening flags suggested by the [Open Source Security Foundation](https://github.com/ossf/wg-best-practices-os-developers/blob/main/docs/Compiler-Hardening-Guides/Compiler-Options-Hardening-Guide-for-C-and-C%2B%2B.md) are now enabled by default. To disable them, pass `--disable-security-hardening-flags` to `configure`.\n\n  Own Id: OTP-19519 Aux Id: [PR-9441]\n\n- If a process being suspended using [`erlang:suspend_process()`](`erlang:suspend_process/2`)\n  currently is waiting in a `receive ... after` expression, the timer for the timeout will now also be\n  suspended until the process is resumed.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-19536 Aux Id: [PR-8670]\n\n- A test module for TLS distribution over `socket` has been implemented.\n\n  Own Id: OTP-19539 Aux Id: [PR-9511]\n\n- Upgrade pcre2 to 10.45\n\n  Own Id: OTP-19541 Aux Id: [PR-9582]\n\n- The `+R` emulator options has been removed. It has had any effect since Erlang/OTP R9.\n\n  Own Id: OTP-19551 Aux Id: [PR-9608]\n\n- The license and copyright header has changed format to include an `SPDX-License-Identifier`. At the same time, most files have been updated to follow a uniform standard for license headers.\n\n  Own Id: OTP-19575 Aux Id: [PR-9670]\n\n- Increase the default inet-driver buffer size(s). Also introduce kernel parameters for UDP and SCTP to change the sizes when creating (those) sockets.\n\n  Own Id: OTP-19576\n\n- Add [`+JPperfdirectory  `](erl_cmd.md#%2BJPperfdirectory) for specifying which directory Erlang should place perf symbol information files.\n\n  Own Id: OTP-19589 Aux Id: [PR-9639], [GH-9500]\n\n- Allow multiple static nifs to be part of the same archive. See the [NIF documentation](erl_nif.md#initialization) for details.\n\n  Own Id: OTP-19590 Aux Id: [PR-9625]\n\n- Various improvements reducing lock contention on run queues due to task stealing.\n\n  Own Id: OTP-19591 Aux Id: [PR-9594]\n\n- The new implementation has the same behavior as the previous one. The newer compilers already have native support for FP16, so this implementation is only relevant for older compilers. For this reason, the new implementation has not been tested for speed.\n\n  Own Id: OTP-19603 Aux Id: [PR-9735]\n\n- An  **experimental** API for a native debugger has been added. The main components are the following:\n  \n  * A new compiler option `beam_debug_info` for the Erlang compiler. When given, most optimizations are disabled and debug information suitable for the native debugger are added to generated BEAM files.\n  \n  * A new `+D` emulator flag. When given, the VM becomes \"debuggable\", which means that when modules that been compiled with the `beam_debug_info` option are loaded, the code is instrumented so that one can enable and disable breakpoints on executable lines.\n  \n  * An experimental `erl_debugger` module with a new debugging API. Essentially, it allows a single, local, process to be registered as the \"debugger\" process for the node. This process is the one that will receive messages notifying that a process hit a breakpoint. This way, the front-end implementation of a debugger (such as [edb from WhatApp](https://github.com/WhatsApp/edb)) can be decoupled from OTP.\n  \n  * The `erl_debugger` module also exposes new BIFs to inspect `X` and `Y` registers of a suspended process. Together with new code-information BIFs, this let's a debugger show the values of variables in scope for a suspended process.\n\n  Own Id: OTP-19609 Aux Id: [PR-8670], [PR-9334], [PR-9604]\n\n- Update internal `ryu` implementation to use latest version. The new version is a little bit faster in some scenarios. `ryu` is used by `float_to_list/1` and similar functions to convert floats to strings.\n\n  Own Id: OTP-19613 Aux Id: [PR-9733]\n\n- Update of MD5 implementation from OpenSSL version 3.1.4 to 3.5.\n\n  Own Id: OTP-19614 Aux Id: [PR-9775]\n\n- Small optimization in binary_to_term by not allocating an unnecessary large native stack frame.\n\n  Own Id: OTP-19618 Aux Id: [PR-9759], [PR-9809]\n\n[PR-9269]: https://github.com/erlang/otp/pull/9269\n[PR-9519]: https://github.com/erlang/otp/pull/9519\n[PR-9590]: https://github.com/erlang/otp/pull/9590\n[PR-8660]: https://github.com/erlang/otp/pull/8660\n[PR-8887]: https://github.com/erlang/otp/pull/8887\n[PR-8938]: https://github.com/erlang/otp/pull/8938\n[PR-8962]: https://github.com/erlang/otp/pull/8962\n[GH-8037]: https://github.com/erlang/otp/issues/8037\n[PR-9079]: https://github.com/erlang/otp/pull/9079\n[PR-9129]: https://github.com/erlang/otp/pull/9129\n[PR-9299]: https://github.com/erlang/otp/pull/9299\n[PR-9610]: https://github.com/erlang/otp/pull/9610\n[PR-9342]: https://github.com/erlang/otp/pull/9342\n[PR-9344]: https://github.com/erlang/otp/pull/9344\n[GH-9255]: https://github.com/erlang/otp/issues/9255\n[PR-9363]: https://github.com/erlang/otp/pull/9363\n[PR-9229]: https://github.com/erlang/otp/pull/9229\n[PR-9388]: https://github.com/erlang/otp/pull/9388\n[PR-9396]: https://github.com/erlang/otp/pull/9396\n[PR-8697]: https://github.com/erlang/otp/pull/8697\n[PR-9376]: https://github.com/erlang/otp/pull/9376\n[PR-9402]: https://github.com/erlang/otp/pull/9402\n[PR-9819]: https://github.com/erlang/otp/pull/9819\n[PR-9275]: https://github.com/erlang/otp/pull/9275\n[PR-8734]: https://github.com/erlang/otp/pull/8734\n[PR-9330]: https://github.com/erlang/otp/pull/9330\n[PR-9406]: https://github.com/erlang/otp/pull/9406\n[PR-9495]: https://github.com/erlang/otp/pull/9495\n[PR-9441]: https://github.com/erlang/otp/pull/9441\n[PR-8670]: https://github.com/erlang/otp/pull/8670\n[PR-9511]: https://github.com/erlang/otp/pull/9511\n[PR-9582]: https://github.com/erlang/otp/pull/9582\n[PR-9608]: https://github.com/erlang/otp/pull/9608\n[PR-9670]: https://github.com/erlang/otp/pull/9670\n[PR-9639]: https://github.com/erlang/otp/pull/9639\n[GH-9500]: https://github.com/erlang/otp/issues/9500\n[PR-9625]: https://github.com/erlang/otp/pull/9625\n[PR-9594]: https://github.com/erlang/otp/pull/9594\n[PR-9735]: https://github.com/erlang/otp/pull/9735\n[PR-8670]: https://github.com/erlang/otp/pull/8670\n[PR-9334]: https://github.com/erlang/otp/pull/9334\n[PR-9604]: https://github.com/erlang/otp/pull/9604\n[PR-9733]: https://github.com/erlang/otp/pull/9733\n[PR-9775]: https://github.com/erlang/otp/pull/9775\n[PR-9759]: https://github.com/erlang/otp/pull/9759\n[PR-9809]: https://github.com/erlang/otp/pull/9809","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"Erts 15.2.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed an emulator crash when setting an error_handler module that was not yet loaded.\n\n  Own Id: OTP-19577 Aux Id: ERIERL-1220, [PR-9696]\n\n- Fixed a rare bug that could cause an emulator crash after unloading a module or erasing a persistent_term.\n\n  Own Id: OTP-19599 Aux Id: [PR-9724]\n\n[PR-9696]: https://github.com/erlang/otp/pull/9696\n[PR-9724]: https://github.com/erlang/otp/pull/9724","ref":"notes.html#fixed-bugs-and-malfunctions-2"},{"type":"extras","title":"Erts 15.2.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in `call_memory` tracing that could cause wildly incorrect reported memory values. Bug exists since OTP 27.1.\n  \n  Also fixed return type spec of `trace:info/3`.\n\n  Own Id: OTP-19581 Aux Id: ERIERL-1219, [PR-9706]\n\n[PR-9706]: https://github.com/erlang/otp/pull/9706","ref":"notes.html#fixed-bugs-and-malfunctions-3"},{"type":"extras","title":"Erts 15.2.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- On Windows, using socket:sendv, a large IOV (size > MAX), the tail was not sent.\n\n  Own Id: OTP-19482\n\n- Uplift pcre 8.44 to pcre 8.45\n\n  Own Id: OTP-19565","ref":"notes.html#fixed-bugs-and-malfunctions-4"},{"type":"extras","title":"Erts 15.2.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Behavior for socket:recv/3 has been improved. The behavior has also been clarified in the documentation.\n\n  Own Id: OTP-19469 Aux Id: [#9172]\n\n- Trace messages due to `receive` tracing could potentially be delayed a very long time if the traced process waited in a `receive` expression without clauses matching on messages (timed wait), or just did not enter a `receive` expression for a very long time.\n\n  Own Id: OTP-19527 Aux Id: [PR-9577]\n\n- Improve the naming of the (internal) esock mutex(es). It is now possible to configure (as in autoconf) the use of simple names for the esock mutex(es).\n\n  Own Id: OTP-19548 Aux Id: OTP-19472\n\n[#9172]: https://github.com/erlang/otp/issues/9172\n[PR-9577]: https://github.com/erlang/otp/pull/9577","ref":"notes.html#fixed-bugs-and-malfunctions-5"},{"type":"extras","title":"Erts 15.2.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed failed runtime assert in debug VM when built with statically linked NIFs.\n\n  Own Id: OTP-19443 Aux Id: [GH-9306], [PR-9307]\n\n- Fixed a bug where reading a binary from `m:persistent_term` could cause a segmentation fault on Windows. This bug was introduced in Erlang/OTP 27.0.\n\n  Own Id: OTP-19458 Aux Id: [PR-9349], [GH-9222]\n\n- Fixed a crash in `erlexec` (an executable used by `erl` during startup) when a `PATH` longer than 10240 was set.\n\n  Own Id: OTP-19471 Aux Id: [PR-9331]\n\n- Fixed bug in `erlang:halt`. Two processes calling `erlang:halt` at the same time could lead to one of them crashing with `badarg` as if it called `erlang:halt(undefined,undefined)`.\n\n  Own Id: OTP-19490 Aux Id: [PR-8640], [GH-8634]\n\n- Fixed BEAM crash when a custom thread sends a large map (>128 keys) externally encoded with, for example, `erl_drv_send_term()`.\n\n  Own Id: OTP-19495 Aux Id: [GH-8208], [PR-8209]\n\n[GH-9306]: https://github.com/erlang/otp/issues/9306\n[PR-9307]: https://github.com/erlang/otp/pull/9307\n[PR-9349]: https://github.com/erlang/otp/pull/9349\n[GH-9222]: https://github.com/erlang/otp/issues/9222\n[PR-9331]: https://github.com/erlang/otp/pull/9331\n[PR-8640]: https://github.com/erlang/otp/pull/8640\n[GH-8634]: https://github.com/erlang/otp/issues/8634\n[GH-8208]: https://github.com/erlang/otp/issues/8208\n[PR-8209]: https://github.com/erlang/otp/pull/8209","ref":"notes.html#fixed-bugs-and-malfunctions-6"},{"type":"extras","title":"Erts 15.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Disabled an unsafe runtime optimization in binary construction that caused silent memory corruption.\n\n  Own Id: OTP-19462 Aux Id: ERIERL-1177, [PR-9372]\n\n[PR-9372]: https://github.com/erlang/otp/pull/9372","ref":"notes.html#fixed-bugs-and-malfunctions-7"},{"type":"extras","title":"Erts 15.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed configure tests for GCC 14\n\n  Own Id: OTP-19407 Aux Id: [GH-9211], [PR-9234]\n\n- Fix bug where log printouts would go missing when `application_controller` is stopping while log messages are being sent.\n  \n  This bug was introduced by OTP-19078 in Erlang/OTP 26.2.5.\n\n  Own Id: OTP-19418 Aux Id: [GH-9163], [PR-9274]\n\n[GH-9211]: https://github.com/erlang/otp/issues/9211\n[PR-9234]: https://github.com/erlang/otp/pull/9234\n[GH-9163]: https://github.com/erlang/otp/issues/9163\n[PR-9274]: https://github.com/erlang/otp/pull/9274","ref":"notes.html#fixed-bugs-and-malfunctions-8"},{"type":"extras","title":"Erts 15.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `gen_sctp:peeloff/2` has been fixed to inherit socket options to the peeled off socket more like `gen_tcp:accept/1`, for example the options `tos` or `tclass`.\n  \n  When setting SCTP options that are unsupported on the platform, some should be silently ignored, but a bug caused the option parsing to derail so the options after could bail out and cause an error instead.  This has been fixed.\n\n  Own Id: OTP-19225 Aux Id: [PR-8789]\n\n- Fixed a bug where Erlang would corrupt the terminal settings if stdin was a TTY but stdout was not.\n\n  Own Id: OTP-19232 Aux Id: [PR-8794], [GH-8487]\n\n- Fixed a bug in the non-JIT VM when loading a NIF over a function that is already traced by more than one session. This caused a VM crash. This bug has existed since OTP-27.0, where multiple trace sessions were introduced.\n\n  Own Id: OTP-19248 Aux Id: [PR-8856]\n\n- Fixed a bug where the loading of modules with extremely large binary construction instructions crashed the emulator on AArch64.\n\n  Own Id: OTP-19261 Aux Id: [GH-8815], [PR-8816]\n\n- [`inet:getifaddrs/0,1`](`inet:getifaddrs/1`) is improved when using\n  inet_backend = socket.\n\n  Own Id: OTP-19264\n\n- `win32reg:value/2` will no longer crash the emulator when the value is an unterminated REG_SZ of size 0.\n\n  Own Id: OTP-19283 Aux Id: [GH-8903], [PR-8912]\n\n- `Makefile` dependency generation on Windows in WSL 2 has been corrected.\n\n  Own Id: OTP-19300 Aux Id: [PR-8955]\n\n- Fix lock order violation if a NIF monitor `down` callback calls `enif_whereis_pid`. Would cause debug emulator to crash but could potentially lead to deadlocks in optimized emulator.\n\n  Own Id: OTP-19330 Aux Id: [GH-8983], [PR-9008]\n\n- Fixed compilation faults when compiling using `--enable-vm-probes`.\n\n  Own Id: OTP-19333\n\n- Fixed `erl_nif.h` on Windows to compile when gcc or clang is used.\n\n  Own Id: OTP-19341 Aux Id: [PR-9016]\n\n- Fixed a minor issue in the JIT debug information that confused tools like GDB and perf.\n\n  Own Id: OTP-19362 Aux Id: [PR-9003]\n\n[PR-8789]: https://github.com/erlang/otp/pull/8789\n[PR-8794]: https://github.com/erlang/otp/pull/8794\n[GH-8487]: https://github.com/erlang/otp/issues/8487\n[PR-8856]: https://github.com/erlang/otp/pull/8856\n[GH-8815]: https://github.com/erlang/otp/issues/8815\n[PR-8816]: https://github.com/erlang/otp/pull/8816\n[GH-8903]: https://github.com/erlang/otp/issues/8903\n[PR-8912]: https://github.com/erlang/otp/pull/8912\n[PR-8955]: https://github.com/erlang/otp/pull/8955\n[GH-8983]: https://github.com/erlang/otp/issues/8983\n[PR-9008]: https://github.com/erlang/otp/pull/9008\n[PR-9016]: https://github.com/erlang/otp/pull/9016\n[PR-9003]: https://github.com/erlang/otp/pull/9003","ref":"notes.html#fixed-bugs-and-malfunctions-9"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Improved documentation of [timers](time_correction.md#timers).\n\n  Own Id: OTP-19360 Aux Id: ERIERL-1149, [PR-9062]\n\n- The label for a process can now be retrieved also using `process_info(Pid, label)` in addition to `proc_lib:get_label/1`.\n  \n  This new option is useful when one wants to retrieve more than one process info item. For example:\n  \n  ```\n  process_info(Pid, [label,registered_name])\n  ```\n\n  Own Id: OTP-19373 Aux Id: [PR-9108]\n\n[PR-9062]: https://github.com/erlang/otp/pull/9062\n[PR-9108]: https://github.com/erlang/otp/pull/9108","ref":"notes.html#improvements-and-new-features-1"},{"type":"extras","title":"Erts 15.1.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-1-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- gen_udp:send on domain local can leak inet_reply messages.\n\n  Own Id: OTP-19332 Aux Id: [#8989]\n\n- net:getifaddrs does not properly report the running flag on windows.\n\n  Own Id: OTP-19366 Aux Id: OTP-19061, ERIERL-1134\n\n[#8989]: https://github.com/erlang/otp/issues/8989","ref":"notes.html#fixed-bugs-and-malfunctions-10"},{"type":"extras","title":"Erts 15.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug has been fixed where receiving an SCTP message with `gen_sctp` could waste the first fragments of a message and only deliver the last fragment.\n  \n  This happened with low probability when the OS signaled that the socket was ready for reading in combination with an internal time-out retry.\n  \n  A bug has been fixed with a lingering time-out from after an SCTP connect that could stop the flow of incoming messages on an active `gen_tcp` socket.\n\n  Own Id: OTP-19235 Aux Id: ERIERL-1133, [PR-8837]\n\n- An boolean option `non_block_send` for SCTP, has ben added to be able to achieve the old behaviour to avoid blocking send operations by passing the OS network stack error message (`{error,eagain}` through.\n\n  Own Id: OTP-19258 Aux Id: OTP-19061, ERIERL-1134\n\n- The call `gen_tcp:send/2` could hang indefinitely despite having set the `send_timeout` option for the following unfortunate combination of circumstances:\n  \n  * The socket has to be in passive mode.\n  * All output buffers had to be filled util the `high_watermark` was hit, causing the `gen_tcp:send/2` operation to block.\n  * While the send operation was blocked, a `gen_tcp:recv/2,3` call had to be done from a different process.  It had to block, waiting for data for a while before completing the operation, and the received packet had to fill at least 75% of the receive buffer.\n  \n  Under these circumstances he information that a send operation was waiting got lost, so the send operation that blocked in the first placed would never return.  The data it had would be sent, though, and send operations from other processes, still work.\n  \n  This bug has been fixed.\n\n  Own Id: OTP-19267 Aux Id: [GH-6455], OTP-18520, ERIERL-1138, [PR-8892]\n\n- In rare circumstances, in code that matches multiple tuples, the JIT could generate code that would raise a `badmatch` exception even if the given tuples were correct.\n\n  Own Id: OTP-19268 Aux Id: [GH-8875], [PR-8895]\n\n- Fixed beam crash that could happen if resetting `call_time` or `call_memory` trace counters of a function while it is called. Bug exists since OTP R16.\n\n  Own Id: OTP-19269 Aux Id: [GH-8835], [PR-8897]\n\n[PR-8837]: https://github.com/erlang/otp/pull/8837\n[GH-6455]: https://github.com/erlang/otp/issues/6455\n[PR-8892]: https://github.com/erlang/otp/pull/8892\n[GH-8875]: https://github.com/erlang/otp/issues/8875\n[PR-8895]: https://github.com/erlang/otp/pull/8895\n[GH-8835]: https://github.com/erlang/otp/issues/8835\n[PR-8897]: https://github.com/erlang/otp/pull/8897","ref":"notes.html#fixed-bugs-and-malfunctions-11"},{"type":"extras","title":"Erts 15.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- On Windows, successive failed socket calls caused socket to become \"uninitialized\".\n\n  Own Id: OTP-19251 Aux Id: [#8853]\n\n- The socket framework fails to start on a IPv6-only Windows machine.\n\n  Own Id: OTP-19254 Aux Id: [#8848]\n\n[#8853]: https://github.com/erlang/otp/issues/8853\n[#8848]: https://github.com/erlang/otp/issues/8848","ref":"notes.html#fixed-bugs-and-malfunctions-12"},{"type":"extras","title":"Erts 15.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The `erl -man example` has been corrected to not consider values set in `ERL_ZFLAGS` and stop parsing arguments when a `--` is encountered.\n\n  Own Id: OTP-19098 Aux Id: [PR-8478], [GH-8477]\n\n- Compiler warnings for  Windows I/O back-end have been silenced.\n\n  Own Id: OTP-19113\n\n- Bugs related to `return_to` trace have been fixed. It did not work for more than once trace session and it did sometimes not trigger for exceptions.\n\n  Own Id: OTP-19122\n\n- Potential deadlocks while writing a crash dump have been eliminated.\n\n  Own Id: OTP-19133 Aux Id: [PR-8521], [GH-8498]\n\n- When loading a damaged or too old BEAM file, the runtime system could crash.\n\n  Own Id: OTP-19153 Aux Id: [PR-8623]\n\n- A scheduler thread could get stuck when deleting a memory allocator carrier when adjacent carriers were deleted and/or inserted simultaneously by other schedulers. This in turn could cause the other schedulers to get stuck as well.\n\n  Own Id: OTP-19154 Aux Id: [GH-8613], [PR-8627]\n\n- Statistics for number of carriers in a shared pool after calling `instrument:allocations` or `instrument:carriers` are now correct. Also, a potential bug in carrier block scanning was eliminated.\n\n  Own Id: OTP-19166 Aux Id: [PR-8636]\n\n- A race in the kTLS flavour of SSL distribution has been fixed so that `inet_drv.c` doesn't read ahead too much data, which could cause the kTLS encryption to be activated too late when some encrypted data had already been read into the `inet_drv.c` buffer as unencrypted.\n\n  Own Id: OTP-19175 Aux Id: [GH-8561], [PR-8690]\n\n- Fixed an emulator crash relating to compressed ETS tables.\n\n  Own Id: OTP-19176 Aux Id: [PR-8683]\n\n- A function (encode_sockaddr) was called with superfluous argument, on Windows, in the net nif.\n\n  Own Id: OTP-19181\n\n- Fixed a crash that could happen on reallocation failure.\n\n  Own Id: OTP-19192\n\n- Man pages are now available for `erl`, `erlc`, `dialyzer`, and all other programs that are included in Erlang/OTP.\n\n  Own Id: OTP-19201 Aux Id: [PR-8740]\n\n- A previous correction in the Erlang/OTP 27.0.1 emergency patch had the unfortunate side effect of sometimes causing an unnecessary fullsweep (major) garbage collection instead of a  generation (minor) garbage collection. This has been corrected.\n\n  Own Id: OTP-19209 Aux Id: [PR-8751], [PR-8539]\n\n- Fixed trace matchspec functions `trace` and `enable_trace` to use the session tracer when enabling trace flags on untraced processes.\n\n  Own Id: OTP-19211 Aux Id: [GH-8657]\n\n- Fixed a typo in the type spec for `t:erlang:garbage_collection_defaults/0`.\n\n  Own Id: OTP-19215 Aux Id: [PR-8757]\n\n- Corrected socket:ioctl for genaddr (SIOCGENADDR).\n\n  Own Id: OTP-19216\n\n- The support for Transparent Huge Pages has been disabled on non-amd64 Linux systems.\n\n  Own Id: OTP-19219 Aux Id: [PR-8702]\n\n- Fixed a race condition on Windows when upgrading from `-noshell` to a shell that would cause Erlang to crash with the error:\n  \n  ```\n  {'GetOverlappedResult',\n    'The I/O operation has been aborted because of either a thread exit or an application request.'}.\n  ```\n\n  Own Id: OTP-19220 Aux Id: [PR-8774], [GH-7621]\n\n[PR-8478]: https://github.com/erlang/otp/pull/8478\n[GH-8477]: https://github.com/erlang/otp/issues/8477\n[PR-8521]: https://github.com/erlang/otp/pull/8521\n[GH-8498]: https://github.com/erlang/otp/issues/8498\n[PR-8623]: https://github.com/erlang/otp/pull/8623\n[GH-8613]: https://github.com/erlang/otp/issues/8613\n[PR-8627]: https://github.com/erlang/otp/pull/8627\n[PR-8636]: https://github.com/erlang/otp/pull/8636\n[GH-8561]: https://github.com/erlang/otp/issues/8561\n[PR-8690]: https://github.com/erlang/otp/pull/8690\n[PR-8683]: https://github.com/erlang/otp/pull/8683\n[PR-8740]: https://github.com/erlang/otp/pull/8740\n[PR-8751]: https://github.com/erlang/otp/pull/8751\n[PR-8539]: https://github.com/erlang/otp/pull/8539\n[GH-8657]: https://github.com/erlang/otp/issues/8657\n[PR-8757]: https://github.com/erlang/otp/pull/8757\n[PR-8702]: https://github.com/erlang/otp/pull/8702\n[PR-8774]: https://github.com/erlang/otp/pull/8774\n[GH-7621]: https://github.com/erlang/otp/issues/7621","ref":"notes.html#fixed-bugs-and-malfunctions-13"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Added functions `getservbyname` and `getservbyport` to the `net` module.\n\n  Own Id: OTP-19101 Aux Id: OTP-18835\n\n- Introduced enet | esock variants of `m:inet` functions, either when called with sockets,\n  with explicit inet_backend config or with the e inet_backend kernel config option.\n\n  Own Id: OTP-19132 Aux Id: OTP-19101\n\n- Optimize process and port creation when such tracing is not enabled by any trace session.\n\n  Own Id: OTP-19167 Aux Id: [PR-8655]\n\n- Compiler warnings for some removed functions have been corrected to point out the correct replacement functions.\n\n  Own Id: OTP-19186 Aux Id: [PR-8709]\n\n- A boolean option `read_ahead` has been implemented for `gen_tcp`, default `true`, to facilitate not reading past (caching data) the end of a packet.  In particular, for kTLS, caching data could read in data that was supposed to be decrypted by the platform's network stack, before crypto parameters could be activated.\n\n  Own Id: OTP-19199 Aux Id: OTP-19175, [GH-8561], [GH-8690], [GH-8785]\n\n- The `m:zip` module has been updated with support for:\n  \n  * zip64 archives - Archives larger than 4GB or with more than 2^32 entries.\n  * extended timestamps - Higher resolution and in UTC.\n  * UID/GID - Save and extract the original UID/GID.\n  * Fixes so that permission mode attributes are correctly read and set for files in archives.\n  * `zip:list_dir/2` now also returns directories, not only files. (You can disable this behaviour by using the option `skip_directories`).\n  \n  Various bugs in the original implementation have also been fixed, such as:\n  \n  * Correctly encode and decode the DOS timestamps for entries within an archive (that is the non-extended timestamp).\n  * Fix DOS timestamps to be set to localtime instead of UTC (use extended timestamps for UTC timestamps).\n  * Use the unix file attributes read from disk when creating archives instead of setting everything to 644.\n\n  Own Id: OTP-19214 Aux Id: [PR-8765]\n\n[PR-8655]: https://github.com/erlang/otp/pull/8655\n[PR-8709]: https://github.com/erlang/otp/pull/8709\n[GH-8561]: https://github.com/erlang/otp/issues/8561\n[GH-8690]: https://github.com/erlang/otp/issues/8690\n[GH-8785]: https://github.com/erlang/otp/issues/8785\n[PR-8765]: https://github.com/erlang/otp/pull/8765","ref":"notes.html#improvements-and-new-features-2"},{"type":"extras","title":"Erts 15.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- In rare circumstances the JIT could do an unsafe in-place update of a tuple.\n\n  Own Id: OTP-19108 Aux Id: [PR-8539]\n\n- When a port command crashed in the inet driver during `gen_tcp:send/2`, a monitor `'DOWN'` message could be left lingering in the caller's mailbox. This has now been fixed.\n\n  Own Id: OTP-19121 Aux Id: [GH-8484]\n\n- `'DOWN'` messages originating from a monitored port, contained the atom `process` instead of the atom `port` as the third element when the exit reason was not an immediate term.\n\n  Own Id: OTP-19123 Aux Id: [GH-8484], [PR-8546]\n\n- Fix so that the options to enable Transparent Huge Page alignment of the Erlang VM executable are only applied to the Erlang VM and not other native programs such as `erlc` and `dialyzer`. This bug was introduced in Erlang/OTP 27.0.\n\n  Own Id: OTP-19137 Aux Id: [GH-8574]\n\n- When [*no time warp mode*](time_correction.md#no-time-warp-mode) was enabled, a smaller Erlang monotonic time could be read than a previously read time, i.e., breaking the monotonic property. The runtime system will abort when detecting an issue like this since OTP 24.3.4.17 and OTP 25.0.\n  \n  Up until OTP 25 *no time warp mode* is the default. As of OTP 26 [*multi time warp mode*](time_correction.md#multi-time-warp-mode) is the default.\n\n  Own Id: OTP-19147 Aux Id: ERIERL-1043, ERIERL-1106, [PR-8619]\n\n- When calling `trace:function(Session, _, true, [meta])` the meta tracer was incorrectly set to be the calling process. Now it's set to the session tracer as expected.\n\n  Own Id: OTP-19151 Aux Id: [PR-8616], [GH-8614]\n\n[PR-8539]: https://github.com/erlang/otp/pull/8539\n[GH-8484]: https://github.com/erlang/otp/issues/8484\n[GH-8484]: https://github.com/erlang/otp/issues/8484\n[PR-8546]: https://github.com/erlang/otp/pull/8546\n[GH-8574]: https://github.com/erlang/otp/issues/8574\n[PR-8619]: https://github.com/erlang/otp/pull/8619\n[PR-8616]: https://github.com/erlang/otp/pull/8616\n[GH-8614]: https://github.com/erlang/otp/issues/8614","ref":"notes.html#fixed-bugs-and-malfunctions-14"},{"type":"extras","title":"Erts 15.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-15-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Bugs in how `erl -extra` interacts with passing flags via ERL_*FLAGS or `-args_file` have been fixed.\n\n  Own Id: OTP-18766 Aux Id: [PR-7639]\n\n- Fixed a bug that prevented the emulator from building on recent versions of Yocto Linux.\n\n  Own Id: OTP-18918 Aux Id: [PR-7952]\n\n- Fixed spectre mitigation configure test to work with GCC patches to always add `-fcf-protection=full`.\n\n  Own Id: OTP-18928 Aux Id: [PR-8006]\n\n- A  call to `socket:[recv|recvfrom|recvmsg]/*` with Timeout = 0 on Windows could cause a (case clause) crash if data is immediately available.\n\n  Own Id: OTP-19063 Aux Id: OTP-18835\n\n- Fix bug on Windows where `exit_status` would not be sent when a port exits after the stdin/stdout handles have been closed.\n\n  Own Id: OTP-19077 Aux Id: [PR-8324]\n\n[PR-7639]: https://github.com/erlang/otp/pull/7639\n[PR-7952]: https://github.com/erlang/otp/pull/7952\n[PR-8006]: https://github.com/erlang/otp/pull/8006\n[PR-8324]: https://github.com/erlang/otp/pull/8324","ref":"notes.html#fixed-bugs-and-malfunctions-15"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Refactored how the JIT handles POSIX signals and how they affect thread stacks, allowing us to use the native stack register for Erlang stacks on more platforms.\n  \n  Notably, containers built on 64-bit x86 Alpine Linux images will now perform much better in sequential code. As an example, running `dialyzer` over the OTP code base finishes about 15% quicker.\n\n  Own Id: OTP-18568 Aux Id: [PR-7174]\n\n- The `m:instrument` module can now track allocations on a per-process or per-port basis.\n\n  Own Id: OTP-18577 Aux Id: [PR-7236]\n\n- The `pid` field returned from [`erlang:fun_info/1,2`](`erlang:fun_info/2`) is now always the pid for the `init` process of the local node, not the pid for the actual process that created the fun.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-18594 Aux Id: [PR-7274]\n\n- By default, escripts will now be compiled instead of interpreted. That means that the `compiler` application must be installed.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-18639 Aux Id: [PR-7348]\n\n- A binary returned from the `m:socket` receive functions is no longer created as a sub binary of an often large receive buffer binary (socket option `{otp,rcvbuf}`).  This avoids space waste, trusting the allocators to implement reallocation efficiently.\n\n  Own Id: OTP-18642 Aux Id: [GH-6152], [PR-7465]\n\n- The default process limit has been raised to `1048576` processes.\n\n  Own Id: OTP-18699 Aux Id: [PR-7388]\n\n- The `erlang:system_monitor/2` functionality is now able to monitor long message queues in the system.\n\n  Own Id: OTP-18709 Aux Id: [PR-7651]\n\n- The `erl` command now supports the `-S` flag, which is similar to the `-run` flag, except that it will pass all arguments up to end of the command line to the called function. (The `-run` flag will not pass arguments beginning with a hyphen.) Another difference is that `-S` will always call a function with one argument, passing an empty list if no arguments were given.\n\n  Own Id: OTP-18744 Aux Id: [PR-7470]\n\n- When implementing an alternative carrier for the Erlang distribution, a separate input handler process may now be registered, using `erlang:dist_ctrl_input_handler/2`, also in the case when the distribution controller is a port.\n\n  Own Id: OTP-18774 Aux Id: [PR-7110]\n\n- The call stack trace has now been added to the error reported by `erlang:process_flag/2` when `max_heap_size` limit has been exceeded.\n\n  Own Id: OTP-18779 Aux Id: [PR-7592]\n\n- `-callback` attributes have been added to `m:erl_tracer`.\n\n  Own Id: OTP-18794 Aux Id: [PR-7703]\n\n- For `inet_backend = socket`, setting the `active` socket option alone, to `once`, `true` or `N` has been optimized, as well as the corresponding data delivery.\n\n  Own Id: OTP-18835\n\n- New functions `socket:sendv/*` for sending I/O vectors have been added.\n\n  Own Id: OTP-18845\n\n- Socket options that take string now also accept binaries.\n\n  Own Id: OTP-18849 Aux Id: [PR-6510]\n\n- Native coverage support has been implemented in the JIT. It will  automatically be used by the `m:cover` tool to reduce the execution overhead when running cover-compiled code.\n  \n  There are also new APIs to support native coverage without using the `cover` tool.\n  \n  To instrument code for native coverage it must be compiled with the [`line_coverage`](`m:compile#line_coverage`) option.\n  \n  To enable native coverage in the runtime system, start it like so:\n  \n  ```text\n  $ erl +JPcover true\n  ```\n  \n  There are also the following new functions for supporting native coverage:\n  \n  * `code:coverage_support/0`\n  * `code:get_coverage/2`\n  * `code:reset_coverage/1`\n  * `code:get_coverage_mode/0`\n  * `code:get_coverage_mode/1`\n  * `code:set_coverage_mode/1`\n\n  Own Id: OTP-18856 Aux Id: [PR-7856]\n\n- Changed the default value of the command line flag `-code_path_choice` to `strict`. \n  \n  Note that for application systems using archives, it is necessary to add the `code_path_choice relaxed` to the command line that invokes `erl`.\n\n  Own Id: OTP-18894 Aux Id: [PR-7243]\n\n- Added module loading to `erl -init_debug` printouts.\n\n  Own Id: OTP-18929 Aux Id: [PR-8004]\n\n- When the runtime system halts, it performs various flush operations before terminating. By default there is no limit on how much time the flush operations are allowed to take. A new *halt flush timeout* functionality has been introduced which can be used for limiting the amount of time that the flushing operations are allowed to take. For more information see the documentation of the [`flush_timeout`](`m:erlang#halt_flush_timeout`) option of the [`erlang:halt/2`](`erlang:halt/2`) BIF and the documentation of the `erl` [`+zhft  `](erl_cmd.md#+zhft) command line flag.\n\n  Own Id: OTP-18938 Aux Id: [PR-8035], [GH-7438]\n\n- Optimized code loading by moving certain operations from the code server to the caller.\n\n  Own Id: OTP-18941 Aux Id: [PR-7981]\n\n- Updated asmjit to version a465fe71ab3d0e224b2b4bd0fac69ae68ab9239d\n\n  Own Id: OTP-18942\n\n- The deprecated functions in `m:zlib` have been removed. That includes `inflateChunk/{1,2}`, `getBufSize/1`, `setBufSize/2`, the CRC32 functions, and the Adler checksum functions.\n\n  Own Id: OTP-18950\n\n- The documentation has been migrated to use Markdown and ExDoc.\n\n  Own Id: OTP-18955 Aux Id: [PR-8026]\n\n- Safe destructive update of tuples has been implemented in the compiler and runtime system. This allows the VM to update tuples in-place when it is safe to do so, thus improving performance by doing less copying but also by producing less garbage.\n  \n  Example:\n  \n  ```erlang\n  -record(rec, {a,b,c}).\n  \n  update(#rec{a=needs_update,b=N}=R0) ->\n      R = R0#rec{a=up_to_date},\n      if\n          N < 0 ->\n              R#rec{c=negative};\n          N == 0 ->\n              R#rec{c=zero};\n          N > 0 ->\n              R#rec{c=positive}\n      end.\n  ```\n  \n  The record updates in each of the three clauses of the `if` can safely be done in-place, because variable `R` is not used again.\n\n  Own Id: OTP-18972 Aux Id: [PR-8090]\n\n- The obsolete and undocumented support for opening a port to an external\n  resource by passing an atom (or a string) as first argument to\n  [`open_port()`](`erlang:open_port/2`), implemented by the vanilla driver,\n  has been removed. This feature has been scheduled for removal in OTP 27\n  since the release of OTP 26.\n\n  Own Id: OTP-18976 Aux Id: [PR-7125]\n\n- An optional NIF callback `ERL_NIF_OPT_ON_UNLOAD_THREAD` to be called by all scheduler threads when a NIF library is unloaded. Used for releasing thread specific data. Can be set with function `enif_set_option`.\n\n  Own Id: OTP-18977 Aux Id: [PR-7809]\n\n- There is a new module `m:trace` in Kernel providing the same trace functionality as `erlang:trace/3` and `erlang:trace_pattern/3`, but with the addition of **dynamic isolated trace sessions**.\n\n  Own Id: OTP-18980\n\n- Added the `+MMlp on|off` emulator option to let the `mseg` allocator use \"large pages\" (sometimes known as \"huge pages\" or \"super pages\"). This currently only affects super-carrier allocations, but may be extended in the future.\n\n  Own Id: OTP-18984 Aux Id: [PR-7977]\n\n- `inet_backend = socket` has been optimized and reworked to be more compatible with the original `inet_backend = inet`.\n\n  Own Id: OTP-19004 Aux Id: OTP-18835\n\n- The `socket` documentation has been reworked, and due to\n  that a few details were fixed:\n  * `socket:is_supported/1` now returns `true` for example for `protocols`\n    that is a \"category\", not an item.\n  * `socket:cancel_monitor/1` no longer badargs for a monitor that was set by\n    another process, instead it returns `false` as for other unknown\n    `reference()`s.\n\n  Own Id: OTP-19054\n\n[PR-7174]: https://github.com/erlang/otp/pull/7174\n[PR-7236]: https://github.com/erlang/otp/pull/7236\n[PR-7274]: https://github.com/erlang/otp/pull/7274\n[PR-7348]: https://github.com/erlang/otp/pull/7348\n[GH-6152]: https://github.com/erlang/otp/issues/6152\n[PR-7465]: https://github.com/erlang/otp/pull/7465\n[PR-7388]: https://github.com/erlang/otp/pull/7388\n[PR-7651]: https://github.com/erlang/otp/pull/7651\n[PR-7470]: https://github.com/erlang/otp/pull/7470\n[PR-7110]: https://github.com/erlang/otp/pull/7110\n[PR-7592]: https://github.com/erlang/otp/pull/7592\n[PR-7703]: https://github.com/erlang/otp/pull/7703\n[PR-6510]: https://github.com/erlang/otp/pull/6510\n[PR-7856]: https://github.com/erlang/otp/pull/7856\n[PR-7243]: https://github.com/erlang/otp/pull/7243\n[PR-8004]: https://github.com/erlang/otp/pull/8004\n[PR-8035]: https://github.com/erlang/otp/pull/8035\n[GH-7438]: https://github.com/erlang/otp/issues/7438\n[PR-7981]: https://github.com/erlang/otp/pull/7981\n[PR-8026]: https://github.com/erlang/otp/pull/8026\n[PR-8090]: https://github.com/erlang/otp/pull/8090\n[PR-7125]: https://github.com/erlang/otp/pull/7125\n[PR-7809]: https://github.com/erlang/otp/pull/7809\n[PR-7977]: https://github.com/erlang/otp/pull/7977","ref":"notes.html#improvements-and-new-features-3"},{"type":"extras","title":"Erts 14.2.5.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed an emulator crash when setting an error_handler module that was not yet loaded.\n\n  Own Id: OTP-19577 Aux Id: ERIERL-1220, PR-9696\n* Fixed a rare bug that could cause an emulator crash after unloading a module or erasing a persistent_term.\n\n  Own Id: OTP-19599 Aux Id: PR-9724","ref":"notes.html#fixed-bugs-and-malfunctions-16"},{"type":"extras","title":"Erts 14.2.5.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Behavior for socket:recv/3 has been improved. The behavior has also been clarified in the documentation.\n\n  Own Id: OTP-19469 Aux Id: #9172\n* Fix `prim_inet:send/3` (and in extension `gen_tcp:send/2,3`) to use the selective recive optimization when waiting for a send acknowledgement.\n\n  Own Id: OTP-19493 Aux Id: PR-9443\n* Trace messages due to `receive` tracing could potentially be delayed a very long time if the traced process waited in a `receive` expression without clauses matching on messages (timed wait), or just did not enter a `receive` expression for a very long time.\n\n  Own Id: OTP-19527 Aux Id: PR-9577\n* Improve the naming of the (internal) esock mutex(es). It is now possible to configure (as in autoconf) the use of simple names for the esock mutex(es).\n\n  Own Id: OTP-19548 Aux Id: OTP-19472","ref":"notes.html#fixed-bugs-and-malfunctions-17"},{"type":"extras","title":"Erts 14.2.5.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed BEAM crash when a custom thread sends a large map (>128 keys) externally encoded with for example `erl_drv_send_term()`.\n\n  Own Id: OTP-19495 Aux Id: GH-8208, PR-8209","ref":"notes.html#fixed-bugs-and-malfunctions-18"},{"type":"extras","title":"Erts 14.2.5.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Disabled an unsafe runtime optimization in binary construction that caused silent memory corruption.\n\n  Own Id: OTP-19462 Aux Id: ERIERL-1177, PR-9372","ref":"notes.html#fixed-bugs-and-malfunctions-19"},{"type":"extras","title":"Erts 14.2.5.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed configure tests for GCC 14\n\n  Own Id: OTP-19407 Aux Id: GH-9211, PR-9234","ref":"notes.html#fixed-bugs-and-malfunctions-20"},{"type":"extras","title":"Erts 14.2.5.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fix lock order violation if a NIF monitor `down` callback calls `enif_whereis_pid`. Would cause debug emulator to crash but could potentially lead to deadlocks in optimized emulator.\n\n  Own Id: OTP-19330 Aux Id: GH-8983, PR-9008\n* gen_udp:send on domain local can leak inet_reply messages.\n\n  Own Id: OTP-19332 Aux Id: #8989\n* net:getifaddrs does not properly report the running flag on windows.\n\n  Own Id: OTP-19366 Aux Id: OTP-19061, ERIERL-1134","ref":"notes.html#fixed-bugs-and-malfunctions-21"},{"type":"extras","title":"Erts 14.2.5.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* A bug has been fixed where receiving an SCTP message with \\`gen_sctp\\` could waste the first fragments of a message and only deliver the last fragment.\n\n  This happened with low probability when the OS signaled that the socket was ready for reading in combination with an internal time-out retry.\n\n  A bug has been fixed with a lingering time-out from after an SCTP connect that could stop the flow of incoming messages on an active \\`gen_tcp\\` socket.\n\n  Own Id: OTP-19235 Aux Id: ERIERL-1133, PR-8837\n* On Windows, successive failed socket calls caused socket to become \"uninitialized\".\n\n  Own Id: OTP-19251 Aux Id: GH-8853\n* The socket framework fails to start on a IPv6-only Windows machine.\n\n  Own Id: OTP-19254 Aux Id: GH-8848\n* An boolean option \\`non_block_send\\` for SCTP, has ben added to be able to achieve the old behaviour to avoid blocking send operations by passing the OS network stack error message (\\`\\{error,eagain\\}\\` through.\n\n  Own Id: OTP-19258 Aux Id: OTP-19061, ERIERL-1134\n* The call \\`gen_tcp:send/2\\` could hang indefinitely despite having set the \\`send_timeout\\` option for the following unfortunate combination of circumstances:\n\n  \\* The socket has to be in passive mode. * All output buffers had to be filled util the \\`high_watermark\\` was hit, causing the \\`gen_tcp:send/2\\` operation to block. * While the send operation was blocked, a \\`gen_tcp:recv/2,3\\` call had to be done from a different process. It had to block, waiting for data for a while before completing the operation, and the received packet had to fill at least 75% of the receive buffer.\n\n  Under these circumstances he information that a send operation was waiting got lost, so the send operation that blocked in the first placed would never return. The data it had would be sent, though, and send operations from other processes, still work.\n\n  This bug has been fixed.\n\n  Own Id: OTP-19267 Aux Id: GH-6455, OTP-18520, ERIERL-1138, PR-8892\n* Fixed beam crash that could happen if resetting `call_time` or `call_memory` trace counters of a function while it is called. Bug exists since OTP R16.\n\n  Own Id: OTP-19269 Aux Id: GH-8835, PR-8897","ref":"notes.html#fixed-bugs-and-malfunctions-22"},{"type":"extras","title":"Erts 14.2.5.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* A race in the kTLS flavour of SSL distribution has been fixed so inet_drv.c doesn't read ahead too much data which could cause the kTLS encryption to be activated too late when some encrypted data had already been read into the inet_drv.c buffer as unencrypted.\n\n  Own Id: OTP-19175 Aux Id: GH-8561, PR-8690","ref":"notes.html#fixed-bugs-and-malfunctions-23"},{"type":"extras","title":"Erts 14.2.5.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* When [*no time warp mode*](time_correction.md#no-time-warp-mode) was enabled, a smaller Erlang monotonic time could be read than a previously read time, i.e., breaking the monotonic property. The runtime system will abort when detecting an issue like this since OTP 24.3.4.17 and OTP 25.0.\n\n  Up until OTP 25 *no time warp mode* is the default. As of OTP 26 [*multi time warp mode*](time_correction.md#multi-time-warp-mode) is the default.\n\n  Own Id: OTP-19147 Aux Id: ERIERL-1043, ERIERL-1106, PR-8619\n* A scheduler thread could get stuck when deleting a memory allocator carrier when adjacent carriers were deleted and/or inserted simultaneously by other schedulers. This in turn could cause the other schedulers to get stuck as well.\n\n  Own Id: OTP-19154 Aux Id: GH-8613, PR-8627","ref":"notes.html#fixed-bugs-and-malfunctions-24"},{"type":"extras","title":"Erts 14.2.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* A call to socket:\\[recv|recvfrom|recvmsg]/* with Timeout = 0 on Windows could cause a (case clause) crash if data is immediately available.\n\n  Own Id: OTP-19063 Aux Id: OTP-18835\n* When a port command crashed in the inet driver during `gen_tcp:send/2`, a monitor `'DOWN'` message could be left lingering in the caller's mailbox. This has now been fixed.\n\n  Own Id: OTP-19121 Aux Id: GH-8484\n* `'DOWN'` messages originating from a monitored port, contained the atom `process` instead of the atom `port` as the third element when the exit reason was not an immediate term.\n\n  Own Id: OTP-19123 Aux Id: GH-8484, PR-8546","ref":"notes.html#fixed-bugs-and-malfunctions-25"},{"type":"extras","title":"Erts 14.2.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* [`gen_sctp:send/3,4`](`gen_sctp:send/4`) now waits for the send to complete instead of returning an OS result such as `{error, ewouldblock}`.\n\n  Own Id: OTP-19061\n* ETS functions did not properly handle keys containing maps, sometimes matching too many or too few objects.\n\n  Own Id: OTP-19070 Aux Id: GH-8385\n* Fix CPU quota determination for cgroups.\n\n  The bug was introduced through OTP-18999.\n\n  Own Id: OTP-19071 Aux Id: OTP-18999 PR-8380","ref":"notes.html#fixed-bugs-and-malfunctions-26"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"* Added a warning to open_port/2 regarding the BadBatBut attack affecting Windows.\n\n  Own Id: OTP-19069","ref":"notes.html#improvements-and-new-features-4"},{"type":"extras","title":"Erts 14.2.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed CPU quota determination for cgroup version 2\n\n  Own Id: OTP-18999 Aux Id: GH-7928\n* Fix faulty reduction counting in exiting process which could cause it to do unnecessary yielding.\n\n  Own Id: OTP-19014\n* Fix bug in `re:run/3` where if an invalid UTF-8 subject was given, re:run could get stuck in an infinite loop. Bug was introduced in Erlang/OTP 22.1.\n\n  Own Id: OTP-19015 Aux Id: ERIERL-682\n* On AArch64 (ARM64), Erlang code using bit syntax construction compiled using Erlang/OTP 24 could crash the runtime system when run in Erlang/OTP 26.2.3.\n\n  Own Id: OTP-19021 Aux Id: GH-8238, PR-8248\n* Calling `erlang:trace/3` with first argument one of `ports`, `processes`, `existing_ports`, `existing_processes`, `existing` or `all`, could cause emulator crash if a dirty scheduler was executing a simultaneous trace action.\n\n  Own Id: OTP-19034\n* Fixed an integer overflow when the monotonic time unit reported by the operating system was greater than 10 and lower than 100 microseconds.\n\n  Own Id: OTP-19036 Aux Id: GH-8186\n* Fix option reuseaddr for FreeBSD 14\n\n  Own Id: OTP-19041\n* When a traced process executing on a dirty scheduler received an exit signal, the dirty scheduler could use the wrong thread specific data which could lead to a crash.\n\n  Own Id: OTP-19043 Aux Id: PR-8342\n* Fixed a more or less harmless bug that caused time correction of Erlang monotonic time to become slightly off on Windows platforms when `QueryPerformanceCounter()` was used as OS monotonic time source.\n\n  `erlang:system_info(os_monotonic_time_source)` now also returns information about *used resolution* which not always corresponds to the resolution of the OS monotonic time source.\n\n  Own Id: OTP-19048 Aux Id: PR-8343\n* When using IPv6, classic gen_udp failed to add (group) membership (drop was used instead).\n\n  Own Id: OTP-19049 Aux Id: #8176\n* Fix bug on Windows where \"Unknown event: 2\" would be printed to the console.\n\n  Own Id: OTP-19060","ref":"notes.html#fixed-bugs-and-malfunctions-27"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"* Checks for monotonicity of monotonic time have been improved so that Erlang and OS monotonic time are checked separately.\n\n  A new `configure` argument `--enable-ensure-os-monotonic-time` has also been added. It enables functionality ensuring the monotonicity of monotonic timestamps delivered by the OS. When a non-monotonic timestamp is detected, it will be replaced by the last delivered monotonic timestamp before being used by Erlang's time functionality. Note that you do *not* want to enable this unless the OS monotonic time source on the system fails to produce monotonic timestamps. This since ensuring the monotonicity of OS monotonic timestamps will hurt scalability and performance of the system.\n\n  Own Id: OTP-19044 Aux Id: ERIERL-1043, PR-8342\n* For severe errors, when the \\`socket\\` module terminates the Erlang VM, now an erl_crash.dump is produced, to facilitate post mortem debugging.\n\n  Own Id: OTP-19058","ref":"notes.html#improvements-and-new-features-5"},{"type":"extras","title":"Erts 14.2.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed compile warning in erl_nif.c for gcc-13.\n\n  Own Id: OTP-18906 Aux Id: PR-7930\n* Fix C++ compile error for macros `enif_select_read` and friends.\n\n  Own Id: OTP-18907 Aux Id: PR-7932\n* Fixed a name clash on Solaris that prevented the JIT from being built.\n\n  Own Id: OTP-18940 Aux Id: GH-8024\n* Fix termcap detection on solaris.\n\n  Own Id: OTP-18952 Aux Id: PR-8025\n* Fix heap corruption bug that could cause runaway memory consumption due to circular offheap list at process exit. Other symptoms may also be possible. Bug exists since OTP 25.0.\n\n  Own Id: OTP-18971 Aux Id: GH-8044\n* Do not clear tracing in old module instance if load fails with 'not_purged'.\n\n  Own Id: OTP-18979\n* When exceeding the \\`max_heap_size\\` limit in a garbage collection initiated by some bit syntax operations, the process would not always terminate immediately.\n\n  Own Id: OTP-18982\n* The code server could be hanging if a module with `on_load` function was loaded at the same time as another module was purged using `erlang:purge_module` directly.\n\n  Own Id: OTP-19006\n* A process optimized for parallel signal delivery could under some circumstances lose wakeup information. That is, the processes was not woken up to take care of the signal, so the signal would not be taken care of until the process was woken by another signal. Only processes configured with [`message_queue_data`](`m:erlang#process_flag_message_queue_data`) set to `off_heap` utilize this optimization.\n\n  Own Id: OTP-19008 Aux Id: GH-8119, PR-8201\n* Fix segfault when generating crashdump containing a fun places in persistent_term storage.\n\n  Own Id: OTP-19009 Aux Id: PR-8181\n* By default the JIT is disabled on Intel Macs, because of annoying poups on macOS Sonoma. It is now possible to explicitly enable the JIT on Intel Macs. Here is how: `./configure --enable-jit`\n\n  Own Id: OTP-19011","ref":"notes.html#fixed-bugs-and-malfunctions-28"},{"type":"extras","title":"Erts 14.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* 32-bit runtime systems on most Unix like platforms could crash if a BIF timer was set with a huge timeout of more than 68 years into the future. In order for the crash to occur, the huge timer (at a later time than when it was set) had to become the nearest active timer set on the specific scheduler on which it was set. This could not happen on a system with only one scheduler since there would always be shorter timers in the system.\n\n  Setting a timer larger than 49 days on Windows could under rare circumstances cause the timeout to be delayed.\n\n  Own Id: OTP-18911 Aux Id: ERIERL-1023, PR-7983\n* Fix bug where the system installed openssl/md5.h would be confused with the vendored md5.h.\n\n  Own Id: OTP-18931 Aux Id: GH-7987 PR-7989\n* The JIT has now been disabled on x86 Macs to prevent annoying the \"verifying shm-xyz\" popups introduced in MacOS Sonoma.\n\n  ARM Macs are unaffected.\n\n  Own Id: OTP-18949\n* Garbage collection of a process on a dirty scheduler could collide with signal handling for that process causing a crash of the runtime system. This bug was introduced in OTP 25.3.2.8 and OTP 26.2.\n\n  Own Id: OTP-18957 Aux Id: GH-8051, PR-8088, OTP-18841","ref":"notes.html#fixed-bugs-and-malfunctions-29"},{"type":"extras","title":"Erts 14.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Removed unnecessary PCRE source tar-ball.\n\n  Own Id: OTP-18902","ref":"notes.html#fixed-bugs-and-malfunctions-30"},{"type":"extras","title":"Erts 14.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix erl.exe to to restore the console to its original state when exiting. This\n  bug was introduced in OTP 26.0 and only happens when erl.exe is run in\n  cmd.exe.\n\n  Own Id: OTP-18751 Aux Id: GH-7621 GH-7548\n\n- Fix faulty debug assert when page size is larger than 16kb, like on PowerPC.\n  Did crash debug VM directly at start.\n\n  Own Id: OTP-18802\n\n- `zlib` will no longer randomly return garbage (negative) Adler32 checksums.\n\n  Own Id: OTP-18811 Aux Id: ERIERL-994\n\n- Replaced unintentional Erlang Public License 1.1 headers in some files with\n  the intended Apache License 2.0 header.\n\n  Own Id: OTP-18815 Aux Id: PR-7780\n\n- A process with `message_queue_data` configured as `off_heap` could end up in\n  an inconsistent state when being `receive` traced, inspected using\n  [`process_info/2`](`process_info/2`) with the `message_queue_len` item, or\n  inspected using the break menu (CTRL-C). When it ended up in this inconsistent\n  state, it was not enqueued into a run queue even though it was set in a\n  runnable state.This also effected signals being sent to the process after it\n  had gotten into this inconsistent state, in such a way that it was from this\n  point not possible to communicate with it.\n\n  Own Id: OTP-18838 Aux Id: PR-7822, GH-7801\n\n- A race occurring when a process was selected for dirty execution\n  simultaneously as it was scheduled for handling a signal could cause the\n  process to end up in an inconsistent state. When it ended up in this\n  inconsistent state, it was not enqueued into a run queue even though it was\n  set in a runnable state. This also effected signals being sent to the process\n  after it had gotten into this inconsistent state, in such a way that it was\n  from this point not possible to communicate with it.\n\n  Own Id: OTP-18839 Aux Id: PR-7822, GH-7801\n\n- When a process had to to wait in the run queue for a long time before being\n  selected for dirty execution, it could not receive signals. This caused\n  inspection of such a process, for example using\n  [`process_info/2`](`process_info/2`), to take a long time.\n\n  This issue was introduced in OTP 25.3.2.6 and 26.1 when fixing an issue where\n  a constant flow of signals prevented a process from being able to execute\n  dirty.\n\n  Own Id: OTP-18841 Aux Id: PR-7822, GH-7801, OTP-18737\n\n- Fixed a bug in the JIT that miscompiled large `select_val` instructions.\n\n  Own Id: OTP-18842\n\n- Fix bug on Windows where large writes to `standard_io` could cause duplicate\n  data to be written.\n\n  Own Id: OTP-18871 Aux Id: GH-7838\n\n- The `struct ip_mreqn` field `imr_ifindex` had got an incorrect byte order\n  conversion that has been corrected.\n\n  Own Id: OTP-18880 Aux Id: GH-7736, PR-7761\n\n- On OTP 24 and OTP 25, incoming distributed messages larger than 64 KiB sent\n  using an alias leaked memory if the alias had been removed prior to entering\n  the node. This issue was not present on OTP 26.\n\n  Incoming distributed messages larger than 64 KiB sent using an alias which had\n  been removed on the receiving node could crash the node. This crash was quite\n  unlikely on OTP 24 and OTP 25, but very likely on OTP 26.\n\n  `'DOWN'` signals with exit reason larger than 64 KiB directed towards a\n  process on a node with a not matching creation leaked memory on the receiving\n  node. Such signals should however be very rare.\n\n  Own Id: OTP-18885 Aux Id: GH-7834, GH-7890, PR-7915","ref":"notes.html#fixed-bugs-and-malfunctions-31"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add Windows support for DGRAM socket connect.\n\n  Own Id: OTP-18762\n\n- [`process_info/2`](`erlang:process_info/2`) now supports lookup of values for\n  specific keys in the process dictionary. For example,\n  `{{dictionary, Key}, Value} = process_info(Pid, {dictionary, Key})`.\n\n  Own Id: OTP-18765 Aux Id: PR-7707\n\n- Removed unnecessary regexp library used when generating yielding BIFs.\n\n  Own Id: OTP-18830 Aux Id: PR-7823\n\n- Fix tty restore when `+Bc` is used.\n\n  Own Id: OTP-18872 Aux Id: GH-7832\n\n- Replaced old md5 implementation with an implementation from OpenSSL.\n\n  Own Id: OTP-18877\n\n- Removed unused `makewhatis` script.\n\n  Own Id: OTP-18899","ref":"notes.html#improvements-and-new-features-6"},{"type":"extras","title":"Erts 14.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If the external term format encoding of an argument list part of a distributed\n  spawn operation was faulty, the newly spawned remote process could misbehave.\n  The misbehavior included hanging or interpret an incoming message as an\n  argument list to use. This was very unlikely to happen unless using an\n  alternate implementation of the distribution protocol which made a faulty\n  encoding of the argument list. The child process will now detect this error\n  and terminate before executing the user specified code.\n\n  Own Id: OTP-18790 Aux Id: PR-7742\n\n- Fix bugs where if the body of a matchspec would return a map with a variable\n  ('$1', '$\\_' etc) as one of the keys or values and the variable was not an\n  immidiate, the term would not be copied to the receiving processes heap. This\n  would later corrupt the term in the table as the GC could place move markers\n  in it, which in turn would cause the VM to crash.\n\n  Bug has been present for since OTP 17.0.\n\n  Own Id: OTP-18797 Aux Id: PR-7712 GH-7683","ref":"notes.html#fixed-bugs-and-malfunctions-32"},{"type":"extras","title":"Erts 14.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- maps:put with existing key and identical value was not optimized as a no-op\n  correctly if having the same 32-bit hash as another key in the map. In\n  practice very rare and harmless.\n\n  Own Id: OTP-18592\n\n- Fixed an issue with truncated crash slogans on failed emulator start.\n\n  Own Id: OTP-18623 Aux Id: GH-7344\n\n- Fixed a bug where the emulator was unable to determine the current `cgroup`\n  CPU quota.\n\n  Own Id: OTP-18645 Aux Id: GH-7401\n\n- A process optimized for parallel signal delivery could under some\n  circumstances lose wakeup information. That is, the processes was not woken up\n  to take care of the signal, so the signal would not be taken care of until the\n  process was woken by another signal. Only processes configured with\n  [`message_queue_data`](`m:erlang#process_flag_message_queue_data`) set to\n  `off_heap` utilize this optimization.\n\n  Own Id: OTP-18647 Aux Id: PR-7595\n\n- Function socket:close/1 could cause a VM crash on Windows.\n\n  Own Id: OTP-18669 Aux Id: OTP-18029\n\n- Fixed a bug in the ARM JIT where it could accidentally add garbage trailing\n  bits when creating bitstrings whose size wasn't an even multiple of 8 bits.\n\n  Own Id: OTP-18672 Aux Id: GH-7469\n\n- Fix `erlang:system_info/1` documentation to show correct types.\n\n  Own Id: OTP-18674 Aux Id: PR-7472\n\n- Expanded the documentation about how to use the `standard_io`,\n  `standard_error` and `user` I/O devices.\n\n  Added the types [`io:standard_io/0`](`t:io:standard_io/0`),\n  `io:standard:error/0` and [`io:user/0`](`t:io:user/0`).\n\n  Own Id: OTP-18676 Aux Id: PR-7473 GH-7459\n\n- Fix compilation with GNU termcap.\n\n  Own Id: OTP-18702 Aux Id: GH-7381\n\n- Delivery time of message signals to a process not executing any `receive`\n  expressions could become very long, potentially infinite. For example, a\n  process checking for messages using\n  [`process_info(self(), message_queue_len)`](`process_info/2`) or\n  [`process_info(self(), messages)`](`process_info/2`) and avoiding to execute a\n  `receive` expression matching on messages could be very slow in detecting new\n  messages. Note that you are still discouraged from using `process_info()` this\n  way. A process that wants to check if there are messages available to handle\n  should execute a `receive` expression matching on messages.\n\n  Own Id: OTP-18706 Aux Id: GH-7413, PR-7595, ERIERL-979\n\n- On AArch64 (ARM64), when calculating both the quotient and remainder with a\n  divisor begin a power two, the remainder could be incorrectly calculated.\n\n  Own Id: OTP-18724 Aux Id: GH-7566, PR-7567\n\n- Fix bug causing \"magic\" references in a `compressed` ETS table to not keep the\n  referred object alive. The symptom would be the referred object being garbage\n  collected prematurely and the reference appearing stale, not referring to\n  anything. Examples of such magically referred objects are `atomics` and NIF\n  resources.\n\n  Own Id: OTP-18732 Aux Id: GH-7444, PR-7458\n\n- Matching out short bitstrings with a fixed size not divisible by 8 could could\n  lead to the runtime system terminating with an \"Overrun heap and stack\" error.\n\n  Own Id: OTP-18733 Aux Id: GH-7292\n\n- A constant flow of incoming non-message signals could prevent a process\n  needing to execute dirty from doing so.\n\n  Own Id: OTP-18737 Aux Id: PR-7595\n\n- A BEAM file usually contains a chunk with the tag \"Type\" containing type\n  information that can be used by the JIT. The `beam_lib:strip/1` takes care to\n  preserve that chunk, but a build/release tool that does customized stripping\n  could accidentally remove the chunk. Loading a BEAM file without the \"Type\"\n  chunk could cause incorrect behavior of the loaded code.\n\n  Own Id: OTP-18745 Aux Id: GH-7492, PR-7616\n\n- `gen_udp:recv/*` for Unix Domain Socket in binary mode and passive mode has\n  been fixed to not crash.\n\n  Own Id: OTP-18747 Aux Id: GH-7605\n\n- The cleanup operation of not yet delivered signals to a terminated process\n  yielded excessively.\n\n  Own Id: OTP-18752 Aux Id: PR-7633\n\n- Fixed minor hashing issue with the `local` option of\n  `term_to_binary()`/`term_to_iovec()`.\n\n  Own Id: OTP-18753 Aux Id: PR-7634","ref":"notes.html#fixed-bugs-and-malfunctions-33"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Update gen_tcp_socket and gen_udp_socket to handle 'completion' (socket on\n  Windows).\n\n  Own Id: OTP-18586 Aux Id: OTP-18029\n\n- Add support for Unix Domain Sockets (only for STREAM sockets) on Windows for\n  'socket'.\n\n  Own Id: OTP-18611 Aux Id: OTP-18029, #5024\n\n- In Erlang/OTP 27, by default escripts will be compiled before being executed.\n  That means that the `compiler` application must be installed. It is possible\n  to force the escript to be interpreted by adding the directive\n  `-mode(interpret).` to the escript file.\n\n  In Erlang/OTP 28, support for interpreting an escript will be removed.\n\n  Own Id: OTP-18638\n\n- Add basic support for socket ioctl on Windows.\n\n  Own Id: OTP-18660\n\n- Removed erts/etc/darwin/Info.plist, as it is no longer necessary after macos\n  10.12\n\n  Own Id: OTP-18661 Aux Id: PR-6112\n\n- Add support for (Windows) socket option exclusiveaddruse.\n\n  Own Id: OTP-18686\n\n- \\[socket] Add support for the 'nopush' option.\n\n  Own Id: OTP-18687\n\n- Add support for socket option 'BSP STATE'.\n\n  Own Id: OTP-18693\n\n- Add tcp socket options 'keepcnt', 'keepidle' and 'keepintvl'.\n\n  Own Id: OTP-18698\n\n- Add support for misc (Windows) socket options ('max_msg_size' and 'maxdg').\n\n  Own Id: OTP-18710","ref":"notes.html#improvements-and-new-features-7"},{"type":"extras","title":"Erts 14.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix using the IME (Input Method Editor) to enter text in cmd.exe and\n  powershell.exe on Windows.\n\n  Own Id: OTP-18630 Aux Id: PR-7275 GH-7029\n\n- Multiple socket:accept calls issue. When making multiple accept calls, only\n  the last call is active.\n\n  Own Id: OTP-18635 Aux Id: #7328\n\n- Fix the shell to ignore terminal delay when the terminal capabilities report\n  that they should be used.\n\n  Own Id: OTP-18636 Aux Id: PR-7352 GH-7308\n\n- Fix \"oldshell\" to echo characters while typing on Windows.\n\n  Own Id: OTP-18637 Aux Id: PR-7359 GH-7324\n\n- On Windows, a call to the function socket:close, when there are waiting active\n  calls to read, write or accept functions, could hang.\n\n  Own Id: OTP-18646\n\n- Fix issues when reading or configuring `standard_io` on Windows when erl.exe\n  is started using `-noshell` flag.\n\n  Own Id: OTP-18649 Aux Id: GH-7261 PR-7400\n\n- The following functions are now much faster when given a long list or binary:\n\n  - erlang:list_to_integer/1\n  - erlang:binary_to_integer/1\n  - erlang:binary_to_integer/2\n  - erlang:list_to_integer/2\n  - string:to_integer/1\n\n  Own Id: OTP-18659 Aux Id: PR-7426\n\n- On AArch64 (ARM64), equality and non-equality tests with literal bitstrings\n  could succeed when they should fail and vice versa.\n\n  Own Id: OTP-18663 Aux Id: GH-7433, PR-7437","ref":"notes.html#fixed-bugs-and-malfunctions-34"},{"type":"extras","title":"Erts 14.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Build of the socket nif failed on Solaris 11.\n\n  Own Id: OTP-18585 Aux Id: OTP-18029\n\n- Fixed two reduction-counting bugs relating to binaries.\n\n  Own Id: OTP-18587\n\n- Constructing a binary segment not aligned with a byte boundary, with a size\n  not fitting in 31 bits, and with a value not fitting in a 64-bit word could\n  crash the runtime system.\n\n  Own Id: OTP-18597\n\n- When a binary construction failed because of bad size for a segment, the error\n  information was not always correct.\n\n  Own Id: OTP-18602 Aux Id: GH-7282\n\n- Fixed a crash when calling a fun that was defined in a module that had been\n  upgraded.\n\n  Own Id: OTP-18621 Aux Id: GH-7288","ref":"notes.html#fixed-bugs-and-malfunctions-35"},{"type":"extras","title":"Erts 14.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-14-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If a local fun was called while reloading the _exact same_ module that defined\n  said fun, there was a small window in which the call would land in code that\n  was yet to be fully loaded.\n\n  Own Id: OTP-18016\n\n- Fix the TLS distribution to work when starting Erlang in embedded mode and a\n  connection is done before kernel is fully started.\n\n  Own Id: OTP-18248 Aux Id: PR-6227 GH-6085\n\n- erl `-remsh` has been improved to provide better error reasons and work when\n  using a shell without terminal support (that is an \"oldshell\").\n\n  Own Id: OTP-18271 Aux Id: PR-6279\n\n- Fix so that `-fno-omit-frame-pointer` is applied to all of the Erlang VM when\n  using the JIT so that tools, such as perf, can crawl the process stacks.\n\n  Own Id: OTP-18274 Aux Id: PR-6048\n\n- Compilation server now support unicode paths in compilation server for\n  filesystems that are encoded with unicode.\n\n  Own Id: OTP-18277 Aux Id: PR-6306\n\n- Reintroduced the optimization that turned anonymous functions without free\n  variables into literals (OTP-15195). This optimization was lost during\n  refactoring in OTP 24.\n\n  Alongside this fix, we plan to remove the \"fun creator pid\" feature in OTP 27.\n  See\n  [Upcoming Potential Incompatibilities](`e:general_info:upcoming_incompatibilities.md#fun_creator_pid`)\n  for more details.\n\n  Own Id: OTP-18498\n\n- Fixed a crash during tracing on certain platforms that cannot use the machine\n  stack for Erlang code (mainly OpenBSD and Linux with musl).\n\n  Own Id: OTP-18561","ref":"notes.html#fixed-bugs-and-malfunctions-36"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The [`enif_set_option()`](erl_nif.md#enif_set_option) function has been\n  introduced into the NIF API. It can be used in order to set the\n  [`ERL_NIF_OPT_DELAY_HALT`](erl_nif.md#delay_halt) and/or\n  [`ERL_NIF_OPT_ON_HALT`](erl_nif.md#on_halt) options with which one can\n  synchronize halt of the runtime system with flushing enabled and execution of\n  NIFs.\n  [Halt of the runtime system _without_ flushing enabled](`erlang:halt/2`), now\n  terminates the runtime system without execution of `atexit`/`on_exit` handlers\n  that may have been installed into the runtime system which might be considered\n  a potential incompatibility.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17771 Aux Id: GH-5325, PR-6370\n\n- The TTY/terminal subsystem has been rewritten by moving more code to Erlang\n  from the old linked-in driver and implementing all the I/O primitives needed\n  in a NIF instead.\n\n  On Unix platforms the user should not notice a lot of difference, besides\n  better handling of unicode characters and fixing of some long standing bugs.\n\n  Windows users will notice that erl.exe has the same functionality as a normal\n  Unix shell and that werl.exe has been removed and replaced with a symlink to\n  erl.exe. This makes the Windows Erlang terminal experience identical to that\n  of Unix.\n\n  The re-write brings with it a number of bug fixes and feature additions:\n\n  - The TTY is now reset when Erlang exits, fixing zsh to not break when\n    terminating an Erlang session.\n  - `standard_error` now uses the same unicode mode as `standard_io`.\n  - Hitting backspace when searching the shell history with an empty search\n    string no longer breaks the shell.\n  - Tab expansion now works on remote nodes started using the JCL interface.\n  - It is now possible to configure the shell slogan and the session slogans\n    (that is the texts that appear when you start an Erlang shell). See the\n    kernel documentation for more details.\n  - Added shell:start_interactive for starting the interactive shell from a\n    non-interactive Erlang session (for example an escript).\n  - On Windows, when starting in detached mode the standard handler are now set\n    to `nul` devices instead of being unset.\n  - Standard I/O now always defaults to `unicode` mode if supported. Previously\n    the default was `latin1` if the runtime system had been started with\n    `-oldshell` or `-noshell` (for example in an `escript`). To send raw bytes\n    over standard out, one now explicitly has to specify\n    `io:setopts(standard_io, [{encoding, latin1}]).`\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17932 Aux Id: PR-6144 GH-3150 GH-3390 GH-4343 GH-4225\n\n- Add support for socket on Windows.\n\n  - Pre release status.\n  - Error codes not finalized.\n  - No explicit support for Windows specific options (socket options, flags for\n    read and write).\n  - New async api for Windows (completion). See the `Asynchronous calls` chapter\n    in the (Socket Usage) Users Guide.\n  - To ensure platform independence, gen_tcp and gen_udp is _intended_ to be\n    used (not yet updated).\n\n  Own Id: OTP-18029\n\n- Updated configure cache for Windows. This makes configure run faster on\n  Windows as many more checks are cached.\n\n  Own Id: OTP-18053 Aux Id: PR-6101\n\n- Optimized record updates.\n\n  Own Id: OTP-18126 Aux Id: PR-6033\n\n- Optimized internal hash routines.\n\n  Own Id: OTP-18131\n\n- As announced when OTP 25 was released,\n  [multi time warp mode](time_correction.md#multi-time-warp-mode) is now enabled\n  by default. This assumes that all code executing on the system is\n  [time warp safe](time_correction.md#time-warp-safe-code).\n\n  If you have old code in the system that is not time warp safe, you now\n  explicitly need to start the system in\n  [no time warp mode](time_correction.md#no-time-warp-mode) (or\n  [singe time warp mode](time_correction.md#single-time-warp-mode) if it is\n  partially time warp safe) in order to avoid problems. When starting the system\n  in no time warp mode, the system behaves as it did prior to the introduction\n  of the extended time functionality introduced in OTP 18.\n\n  If you have code that is not time warp safe, you are strongly encouraged to\n  change this so that you can use multi time warp mode. Compared to no time warp\n  mode, multi time warp mode improves scalability and performance as well as\n  accuracy and precision of time measurements.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18135 Aux Id: GH-4965, PR-6046\n\n- There are several new optimization for binary syntax in the JIT:\n\n  - Creation and matching of binaries with segments of fixed sizes have been\n    optimized.\n  - Creation and matching of UTF-8 segments have been optimized.\n  - Appending to binaries has been optimized.\n\n  Own Id: OTP-18137 Aux Id: PR-6259, PR-6404, PR-6576, PR-6804\n\n- As announced since the release of OTP 24, support for:\n\n  - version 4 node container types in the external term format are now\n    mandatory. That is, references supporting up to 5 32-bit integer\n    identifiers, and process and port identifiers with support for 64-bit data\n    storage. The distribution flag\n    [`DFLAG_V4_NC`](erl_dist_protocol.md#DFLAG_V4_NC) is therefor now also\n    mandatory. OTP has since OTP 24 supported this. Also note that the external\n    format produced by `term_to_binary()` and `term_to_iovec()` will\n    unconditionally produce pids, ports, and references supporting this larger\n    format.\n  - the [new link protocol](erl_dist_protocol.md#new_link_protocol) introduced\n    in OTP 23.3 is now mandatory. The distribution flag\n    [`DFLAG_UNLINK_ID`](erl_dist_protocol.md#DFLAG_UNLINK_ID) is therefor now\n    also mandatory.\n\n  Due to the above, OTP 26 nodes will refuse to connect to OTP nodes from\n  releases prior to OTP 24.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18140 Aux Id: PR-6072\n\n- Optimization of\n  [_process aliases_](`e:system:ref_man_processes.md#process-aliases`) made\n  possible now that support for\n  [version 4 node container types](erl_dist_protocol.md#DFLAG_V4_NC) in the\n  external term format is mandatory.\n\n  Own Id: OTP-18141 Aux Id: OTP-18140, PR-6073\n\n- The compiler and JIT now generate better code for creation of small maps where\n  all keys are literals known at compile time.\n\n  Own Id: OTP-18185 Aux Id: GH-6139\n\n- When `erl -eval` fails to execute a command, an error description is printed\n  to standard_error.\n\n  Own Id: OTP-18227 Aux Id: PR-6254\n\n- Support for UTF-8 atoms and strings in the NIF interface including new\n  functions `enif_make_new_atom`, `enif_make_new_atom_len` and\n  `enif_get_string_length`.\n\n  Own Id: OTP-18334 Aux Id: PR-6434\n\n- The following `inet:setopts/2` options have been introduced:\n\n  - **[`reuseport`](`m:inet#option-reuseport`)** - Reuse of local port. Load\n    balancing may or may not be provided depending on underlying OS.\n\n  - **[`reuseport_lb`](`m:inet#option-reuseport_lb`)** - Reuse of local port.\n    Load balancing provided.\n\n  - **[`exclusiveaddruse`](`m:inet#option-exclusiveaddruse`)** - Exclusive\n    address/port usage on Windows. This socket option is Windows specific and\n    will silently be ignored on other systems.\n\n  The behavior of setting [`reuseaddr`](`m:inet#option-reuseaddr`) on Windows\n  have changed in a _backwards incompatible_ way. The underlying `SO_REUSEADDR`\n  socket option is now only set if both the `reusaddr` and the `reuseport`\n  `inet` options have been set. This since the underlying `SO_REUSEADDR` socket\n  option on Windows behaves similar to how BSD behaves if both the underlying\n  socket options `SO_REUSEADDR` and `SO_REUSEPORT` have been set. See the\n  documentation of the `reuseaddr` option for more information.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18344 Aux Id: PR-6522, PR-6944, OTP-18324, PR-6481, GH-6461\n\n- `erlang:display/1` will now print large maps in a more readable way (similar\n  to how small maps are printed).\n\n  Own Id: OTP-18360 Aux Id: PR-6497\n\n- The BIFs [`min/2`](`min/2`) and [`max/2`](`max/2`) are now allowed to be used\n  in guards and match specs.\n\n  Own Id: OTP-18367 Aux Id: GH-6544\n\n- Fail `enif_init_resource_type` and friends by returning NULL if not called\n  during load/upgrade. Old behavior was undefined.\n\n  Own Id: OTP-18369\n\n- New option `include_shared_binaries` for the `max_heap_size` process limit. If\n  set to `true`, large binaries (> 64 bytes), which may be referred by several\n  processes, are included in the memory sum compared against the `max_heap_size`\n  limit.\n\n  Own Id: OTP-18410 Aux Id: GH-5889, PR-6345\n\n- Map comprehensions as suggested in EEP 58 has now been implemented.\n\n  Own Id: OTP-18413 Aux Id: EEP-58, PR-6727\n\n- Some map operations have been optimized by changing the internal sort order of\n  atom keys. This changes the (undocumented) order of how atom keys in small\n  maps are printed and returned by `maps:to_list/1` and `maps:next/1`. The new\n  order is unpredictable and may change between different invocations of the\n  Erlang VM.\n\n  For applications where order is important, there is a new function\n  `maps:iterator/2` for creating iterators that return the map elements in a\n  deterministic order. There are also new modifiers `k` and `K` for the format\n  string for [`io:format()`](`t:io:format/0`) to support printing map elements\n  ordered.\n\n  Own Id: OTP-18414 Aux Id: PR-6151\n\n- Reduced memory usage of `file:read_file_info/1,2`\n\n  Own Id: OTP-18424 Aux Id: PR-6716\n\n- Add new function `current_stacktrace` for trace match specifications used by\n  `erlang:trace_pattern/3`.\n\n  This new option puts the current stacktrace of the caller into the trace\n  message sent to the trace receiver.\n\n  Own Id: OTP-18425 Aux Id: PR-6628, GH-5333\n\n- The amount of significant bits in node local process identifiers and port\n  identifiers has been extended from 28 bits to 60 bits on 64-bit runtime\n  systems. This makes these identifiers large enough to in practice never having\n  to be reused during the life time of a node.\n\n  Own Id: OTP-18435 Aux Id: PR-6827\n\n- New trace feature `call_memory`. Similar to `call_time` tracing, but instead\n  of measure accumulated time in traced functions it measures accumulated heap\n  space consumed by traced functions. It can be used to compare how much\n  different functions are contributing to garbage collection being triggered.\n\n  Own Id: OTP-18440 Aux Id: PR-6351\n\n- It is no longer necessary to enable a feature in the runtime system in order\n  to load modules that are using it. It is sufficient to enable the feature in\n  the compiler when compiling it.\n\n  That means that to use feature `maybe_expr` in Erlang/OTP 26, it is sufficient\n  to enable it during compilation.\n\n  In Erlang/OTP 27, feature `maybe_expr` will be enabled by default, but it will\n  be possible to disable it.\n\n  Own Id: OTP-18445\n\n- Handling of `on_load` modules during boot has been improved by adding an extra\n  step in the boot order for embedded mode that runs all `on_load` handlers,\n  instead of relying on explicit invocation of them, later, when the kernel\n  supervision tree starts.\n\n  This is mostly a code improvement and OTP internal simplification to avoid\n  future bugs and to simplify code maintenance.\n\n  Own Id: OTP-18447\n\n- Introduced the [`local`](`m:erlang#term_to_binary_local`) option of\n  [`term_to_binary/2`](`erlang:term_to_binary/2`) and\n  [`term_to_iovec/2`](`erlang:term_to_iovec/2`).\n\n  Own Id: OTP-18477 Aux Id: PR-7006\n\n- Document the commonly used practice to create and store static atoms at NIF\n  load time in callbacks `load` or `upgrade`.\n\n  Own Id: OTP-18483 Aux Id: PR-6888\n\n- Optimize `ets:lookup_element` for uncompressed tables by using a more\n  efficient method to copy the term from ETS to the heap of the calling process.\n\n  Own Id: OTP-18493 Aux Id: PR-6272\n\n- The default encoding of atoms by `term_to_binary` and `term_to_iovec` have\n  changed from Latin1 to UTF-8. The old encoding can still be obtained with\n  options `{minor_version, 1}`.\n\n  Apart from encoding code points between 128 and 255 with two bytes (UTF-8)\n  instead of one, most atoms will occupy one less byte as the length field use\n  only one byte instead of two if possible.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18505 Aux Id: PR-6991\n\n- The version of zlib included in the Erlang/OTP source code is now 1.2.13.\n\n  Own Id: OTP-18517\n\n- `gen_tcp:send/*`, `gen_udp:send/*` and `gen_sctp:send/*` have been optimized\n  to use the infamous receive reference optimization, so now sending should not\n  have bad performance when the calling process has a large message queue.\n\n  Own Id: OTP-18520 Aux Id: GH-6455\n\n- Added the new built-in type `t:dynamic/0` introduced in EEP-61, improving\n  support for gradual type checkers.\n\n  Own Id: OTP-18522\n\n- Optimize `maps:merge/2` memory consumption for small maps (<33 keys) by\n  reusing key tuples or entire maps if the result map has the same number of\n  keys as any of the argument maps.\n\n  Own Id: OTP-18523 Aux Id: PR-7004\n\n- Optimize `maps:merge/2` memory consumption further for small maps by mutating\n  2nd map to use literal key tuple of 1st map if both have the same keys.\n\n  Own Id: OTP-18524 Aux Id: PR-7004, OTP-18523\n\n- [`ceil/1`](`ceil/1`), [`floor/1`](`floor/1`),\n  [`is_bitstring/1`](`is_bitstring/1`), [`is_boolean/1`](`is_boolean/1`),\n  [`is_function/2`](`is_function/2`), and [`tuple_size/1`](`tuple_size/1`) can\n  now be used in match specifications.\n\n  Own Id: OTP-18526 Aux Id: GH-7045\n\n- Allow IPv6 addresses as host in `http` packets decoded by\n  `erlang:decode_packet/3` and `gen_tcp` packet option. The IPv6 address should\n  be enclosed within `[]` according to RFC2732.\n\n  Own Id: OTP-18540 Aux Id: PR-6900\n\n- Removed the experimental `erts_alloc_config` module. It no longer produced\n  good configurations and cannot be fixed in a reasonably backwards compatible\n  manner. It has since OTP 25 been deprecated and scheduled for removal in\n  OTP 26.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18549 Aux Id: PR-7105\n\n- ERTS internal thread names have been changed. All threads created by ERTS now\n  have a prefix `erts_` followed by a type name potentially followed by an\n  integer index. For example, normal schedulers are now named `erts_sched_ `,\n  dirty CPU schedulers `erts_dcpus_ `, and dirty IO schedulers\n  `erts_dios_ `. NIF and driver thread names are truncated at 15 characters\n  regardless of whether the underlying platform support more characters or not.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18552 Aux Id: PR-6973\n\n- Further robustify implementation of large maps (> 32 keys). Keys that happen\n  to have same internal 32-bit hash values are now put in collision nodes which\n  are traversed with linear search. This removes the demand for the internal\n  hash function when salted to eventually produce different hashes for all\n  possible pairs of unequal terms.\n\n  Own Id: OTP-18569\n\n- In Erlang/OTP 27, `0.0` will no longer be considered to be exactly equal to\n  `-0.0`. See\n  [Upcoming Potential Incompatibilities](`e:general_info:upcoming_incompatibilities.md#float_matching`).\n\n  Own Id: OTP-18574","ref":"notes.html#improvements-and-new-features-8"},{"type":"extras","title":"Erts 13.2.2.16 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-16"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed an emulator crash when setting an error_handler module that was not yet loaded.\n\n  Own Id: OTP-19577 Aux Id: ERIERL-1220, PR-9696\n* Fixed a rare bug that could cause an emulator crash after unloading a module or erasing a persistent_term.\n\n  Own Id: OTP-19599 Aux Id: PR-9724","ref":"notes.html#fixed-bugs-and-malfunctions-37"},{"type":"extras","title":"Erts 13.2.2.15 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Trace messages due to `receive` tracing could potentially be delayed a very long time if the traced process waited in a `receive` expression without clauses matching on messages (timed wait), or just did not enter a `receive` expression for a very long time.\n\n  Own Id: OTP-19527 Aux Id: PR-9577","ref":"notes.html#fixed-bugs-and-malfunctions-38"},{"type":"extras","title":"Erts 13.2.2.14 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed BEAM crash when a custom thread sends a large map (>128 keys) externally encoded with for example `erl_drv_send_term()`.\n\n  Own Id: OTP-19495 Aux Id: GH-8208, PR-8209","ref":"notes.html#fixed-bugs-and-malfunctions-39"},{"type":"extras","title":"Erts 13.2.2.13 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Disabled an unsafe runtime optimization in binary construction that caused silent memory corruption.\n\n  Own Id: OTP-19462 Aux Id: ERIERL-1177, PR-9372","ref":"notes.html#fixed-bugs-and-malfunctions-40"},{"type":"extras","title":"Erts 13.2.2.12 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fix lock order violation if a NIF monitor `down` callback calls `enif_whereis_pid`. Would cause debug emulator to crash but could potentially lead to deadlocks in optimized emulator.\n\n  Own Id: OTP-19330 Aux Id: GH-8983, PR-9008","ref":"notes.html#fixed-bugs-and-malfunctions-41"},{"type":"extras","title":"Erts 13.2.2.11 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed beam crash that could happen if resetting `call_time` or `call_memory` trace counters of a function while it is called. Bug exists since OTP R16.\n\n  Own Id: OTP-19269 Aux Id: GH-8835, PR-8897","ref":"notes.html#fixed-bugs-and-malfunctions-42"},{"type":"extras","title":"Erts 13.2.2.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* `'DOWN'` messages originating from a monitored port, contained the atom `process` instead of the atom `port` as the third element when the exit reason was not an immediate term.\n\n  Own Id: OTP-19123 Aux Id: GH-8484, PR-8546\n* When [*no time warp mode*](time_correction.md#no-time-warp-mode) was enabled, a smaller Erlang monotonic time could be read than a previously read time, i.e., breaking the monotonic property. The runtime system will abort when detecting an issue like this since OTP 24.3.4.17 and OTP 25.0.\n\n  Up until OTP 25 *no time warp mode* is the default. As of OTP 26 [*multi time warp mode*](time_correction.md#multi-time-warp-mode) is the default.\n\n  Own Id: OTP-19147 Aux Id: ERIERL-1043, ERIERL-1106, PR-8619\n* A scheduler thread could get stuck when deleting a memory allocator carrier when adjacent carriers were deleted and/or inserted simultaneously by other schedulers. This in turn could cause the other schedulers to get stuck as well.\n\n  Own Id: OTP-19154 Aux Id: GH-8613, PR-8627","ref":"notes.html#fixed-bugs-and-malfunctions-43"},{"type":"extras","title":"Erts 13.2.2.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* ETS functions did not properly handle keys containing maps, sometimes matching too many or too few objects.\n\n  Own Id: OTP-19070 Aux Id: GH-8385\n* Fix CPU quota determination for cgroups.\n\n  The bug was introduced through OTP-18999.\n\n  Own Id: OTP-19071 Aux Id: OTP-18999 PR-8380","ref":"notes.html#fixed-bugs-and-malfunctions-44"},{"type":"extras","title":"Erts 13.2.2.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fixed CPU quota determination for cgroup version 2\n\n  Own Id: OTP-18999 Aux Id: GH-7928\n* Fix faulty reduction counting in exiting process which could cause it to do unnecessary yielding.\n\n  Own Id: OTP-19014\n* Calling `erlang:trace/3` with first argument one of `ports`, `processes`, `existing_ports`, `existing_processes`, `existing` or `all`, could cause emulator crash if a dirty scheduler was executing a simultaneous trace action.\n\n  Own Id: OTP-19034\n* Fixed an integer overflow when the monotonic time unit reported by the operating system was greater than 10 and lower than 100 microseconds.\n\n  Own Id: OTP-19036 Aux Id: GH-8186\n* When a traced process executing on a dirty scheduler received an exit signal, the dirty scheduler could use the wrong thread specific data which could lead to a crash.\n\n  Own Id: OTP-19043 Aux Id: PR-8342\n* Fixed a more or less harmless bug that caused time correction of Erlang monotonic time to become slightly off on Windows platforms when `QueryPerformanceCounter()` was used as OS monotonic time source.\n\n  `erlang:system_info(os_monotonic_time_source)` now also returns information about *used resolution* which not always corresponds to the resolution of the OS monotonic time source.\n\n  Own Id: OTP-19048 Aux Id: PR-8343","ref":"notes.html#fixed-bugs-and-malfunctions-45"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"* Checks for monotonicity of monotonic time have been improved so that Erlang and OS monotonic time are checked separately.\n\n  A new `configure` argument `--enable-ensure-os-monotonic-time` has also been added. It enables functionality ensuring the monotonicity of monotonic timestamps delivered by the OS. When a non-monotonic timestamp is detected, it will be replaced by the last delivered monotonic timestamp before being used by Erlang's time functionality. Note that you do *not* want to enable this unless the OS monotonic time source on the system fails to produce monotonic timestamps. This since ensuring the monotonicity of OS monotonic timestamps will hurt scalability and performance of the system.\n\n  Own Id: OTP-19044 Aux Id: ERIERL-1043, PR-8342\n* For severe errors, when the \\`socket\\` module terminates the Erlang VM, now an erl_crash.dump is produced, to facilitate post mortem debugging.\n\n  Own Id: OTP-19058","ref":"notes.html#improvements-and-new-features-9"},{"type":"extras","title":"Erts 13.2.2.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* Fix heap corruption bug that could cause runaway memory consumption due to circular offheap list at process exit. Other symptoms may also be possible. Bug exists since OTP 25.0.\n\n  Own Id: OTP-18971 Aux Id: GH-8044\n* The code server could be hanging if a module with `on_load` function was loaded at the same time as another module was purged using `erlang:purge_module` directly.\n\n  Own Id: OTP-19006\n* A process optimized for parallel signal delivery could under some circumstances lose wakeup information. That is, the processes was not woken up to take care of the signal, so the signal would not be taken care of until the process was woken by another signal. Only processes configured with [`message_queue_data`](`m:erlang#process_flag_message_queue_data`) set to `off_heap` utilize this optimization.\n\n  Own Id: OTP-19008 Aux Id: GH-8119, PR-8201\n* Fix bug in `re:run/3` where if an invalid UTF-8 subject was given, re:run could get stuck in an infinite loop. Bug was introduced in Erlang/OTP 22.1.\n\n  Own Id: OTP-19015 Aux Id: ERIERL-682","ref":"notes.html#fixed-bugs-and-malfunctions-46"},{"type":"extras","title":"Erts 13.2.2.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* 32-bit runtime systems on most Unix like platforms could crash if a BIF timer was set with a huge timeout of more than 68 years into the future. In order for the crash to occur, the huge timer (at a later time than when it was set) had to become the nearest active timer set on the specific scheduler on which it was set. This could not happen on a system with only one scheduler since there would always be shorter timers in the system.\n\n  Setting a timer larger than 49 days on Windows could under rare circumstances cause the timeout to be delayed.\n\n  Own Id: OTP-18911 Aux Id: ERIERL-1023, PR-7983\n* Garbage collection of a process on a dirty scheduler could collide with signal handling for that process causing a crash of the runtime system. This bug was introduced in OTP 25.3.2.8 and OTP 26.2.\n\n  Own Id: OTP-18957 Aux Id: GH-8051, PR-8088, OTP-18841","ref":"notes.html#fixed-bugs-and-malfunctions-47"},{"type":"extras","title":"Erts 13.2.2.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix faulty debug assert when page size is larger than 16kb, like on PowerPC.\n  Did crash debug VM directly at start.\n\n  Own Id: OTP-18802\n\n- A process with `message_queue_data` configured as `off_heap` could end up in\n  an inconsistent state when being `receive` traced, inspected using\n  [`process_info/2`](`process_info/2`) with the `message_queue_len` item, or\n  inspected using the break menu (CTRL-C). When it ended up in this inconsistent\n  state, it was not enqueued into a run queue even though it was set in a\n  runnable state.This also effected signals being sent to the process after it\n  had gotten into this inconsistent state, in such a way that it was from this\n  point not possible to communicate with it.\n\n  Own Id: OTP-18838 Aux Id: PR-7822, GH-7801\n\n- A race occurring when a process was selected for dirty execution\n  simultaneously as it was scheduled for handling a signal could cause the\n  process to end up in an inconsistent state. When it ended up in this\n  inconsistent state, it was not enqueued into a run queue even though it was\n  set in a runnable state. This also effected signals being sent to the process\n  after it had gotten into this inconsistent state, in such a way that it was\n  from this point not possible to communicate with it.\n\n  Own Id: OTP-18839 Aux Id: PR-7822, GH-7801\n\n- When a process had to to wait in the run queue for a long time before being\n  selected for dirty execution, it could not receive signals. This caused\n  inspection of such a process, for example using\n  [`process_info/2`](`process_info/2`), to take a long time.\n\n  This issue was introduced in OTP 25.3.2.6 and 26.1 when fixing an issue where\n  a constant flow of signals prevented a process from being able to execute\n  dirty.\n\n  Own Id: OTP-18841 Aux Id: PR-7822, GH-7801, OTP-18737\n\n- Fixed a bug in the JIT that miscompiled large `select_val` instructions.\n\n  Own Id: OTP-18842\n\n- On OTP 24 and OTP 25, incoming distributed messages larger than 64 KiB sent\n  using an alias leaked memory if the alias had been removed prior to entering\n  the node. This issue was not present on OTP 26.\n\n  Incoming distributed messages larger than 64 KiB sent using an alias which had\n  been removed on the receiving node could crash the node. This crash was quite\n  unlikely on OTP 24 and OTP 25, but very likely on OTP 26.\n\n  `'DOWN'` signals with exit reason larger than 64 KiB directed towards a\n  process on a node with a not matching creation leaked memory on the receiving\n  node. Such signals should however be very rare.\n\n  Own Id: OTP-18885 Aux Id: GH-7834, GH-7890, PR-7915\n\n- Removed unnecessary PCRE source tar-ball.\n\n  Own Id: OTP-18902","ref":"notes.html#fixed-bugs-and-malfunctions-48"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Removed unnecessary regexp library used when generating yielding BIFs.\n\n  Own Id: OTP-18830 Aux Id: PR-7823\n\n- Replaced old md5 implementation with an implementation from OpenSSL.\n\n  Own Id: OTP-18877\n\n- Removed unused `makewhatis` script.\n\n  Own Id: OTP-18899","ref":"notes.html#improvements-and-new-features-10"},{"type":"extras","title":"Erts 13.2.2.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If the external term format encoding of an argument list part of a distributed\n  spawn operation was faulty, the newly spawned remote process could misbehave.\n  The misbehavior included hanging or interpret an incoming message as an\n  argument list to use. This was very unlikely to happen unless using an\n  alternate implementation of the distribution protocol which made a faulty\n  encoding of the argument list. The child process will now detect this error\n  and terminate before executing the user specified code.\n\n  Own Id: OTP-18790 Aux Id: PR-7742\n\n- On Apple Silicon Macs running macOS Sonoma, the runtime system with the JIT\n  enabled would crash. Therefore, the `configure` script will by default now\n  disable the JIT on Macs with Apple Silicon. When building for earlier versions\n  of macOS, the JIT can be explicitly enabled by passing `--enable-jit` to the\n  `configure` script.\n\n  Own Id: OTP-18792 Aux Id: GH-7687\n\n- Fix bugs where if the body of a matchspec would return a map with a variable\n  ('$1', '$\\_' etc) as one of the keys or values and the variable was not an\n  immidiate, the term would not be copied to the receiving processes heap. This\n  would later corrupt the term in the table as the GC could place move markers\n  in it, which in turn would cause the VM to crash.\n\n  Bug has been present for since OTP 17.0.\n\n  Own Id: OTP-18797 Aux Id: PR-7712 GH-7683","ref":"notes.html#fixed-bugs-and-malfunctions-49"},{"type":"extras","title":"Erts 13.2.2.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process optimized for parallel signal delivery could under some\n  circumstances lose wakeup information. That is, the processes was not woken up\n  to take care of the signal, so the signal would not be taken care of until the\n  process was woken by another signal. Only processes configured with\n  [`message_queue_data`](`m:erlang#process_flag_message_queue_data`) set to\n  `off_heap` utilize this optimization.\n\n  Own Id: OTP-18647 Aux Id: PR-7595\n\n- Delivery time of message signals to a process not executing any `receive`\n  expressions could become very long, potentially infinite. For example, a\n  process checking for messages using\n  [`process_info(self(), message_queue_len)`](`process_info/2`) or\n  [`process_info(self(), messages)`](`process_info/2`) and avoiding to execute a\n  `receive` expression matching on messages could be very slow in detecting new\n  messages. Note that you are still discouraged from using `process_info()` this\n  way. A process that wants to check if there are messages available to handle\n  should execute a `receive` expression matching on messages.\n\n  Own Id: OTP-18706 Aux Id: GH-7413, PR-7595, ERIERL-979\n\n- Fix bug causing \"magic\" references in a `compressed` ETS table to not keep the\n  referred object alive. The symptom would be the referred object being garbage\n  collected prematurely and the reference appearing stale, not referring to\n  anything. Examples of such magically referred objects are `atomics` and NIF\n  resources.\n\n  Own Id: OTP-18732 Aux Id: GH-7444, PR-7458\n\n- A constant flow of incoming non-message signals could prevent a process\n  needing to execute dirty from doing so.\n\n  Own Id: OTP-18737 Aux Id: PR-7595\n\n- The cleanup operation of not yet delivered signals to a terminated process\n  yielded excessively.\n\n  Own Id: OTP-18752 Aux Id: PR-7633","ref":"notes.html#fixed-bugs-and-malfunctions-50"},{"type":"extras","title":"Erts 13.2.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Multiple socket:accept calls issue. When making multiple accept calls, only\n  the last call is active.\n\n  Own Id: OTP-18635 Aux Id: #7328\n\n- The following functions are now much faster when given a long list or binary:\n\n  - erlang:list_to_integer/1\n  - erlang:binary_to_integer/1\n  - erlang:binary_to_integer/2\n  - erlang:list_to_integer/2\n  - string:to_integer/1\n\n  Own Id: OTP-18659 Aux Id: PR-7426","ref":"notes.html#fixed-bugs-and-malfunctions-51"},{"type":"extras","title":"Erts 13.2.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a crash during tracing on certain platforms that cannot use the machine\n  stack for Erlang code (mainly OpenBSD and Linux with musl).\n\n  Own Id: OTP-18561\n\n- Constructing a binary segment not aligned with a byte boundary, with a size\n  not fitting in 31 bits, and with a value not fitting in a 64-bit word could\n  crash the runtime system.\n\n  Own Id: OTP-18597","ref":"notes.html#fixed-bugs-and-malfunctions-52"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Further robustify implementation of large maps (> 32 keys). Keys that happen\n  to have same internal 32-bit hash values are now put in collision nodes which\n  are traversed with linear search. This removes the demand for the internal\n  hash function when salted to eventually produce different hashes for all\n  possible pairs of unequal terms.\n\n  Own Id: OTP-18569","ref":"notes.html#improvements-and-new-features-11"},{"type":"extras","title":"Erts 13.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If a runtime system which was starting the distribution already had existing\n  pids, ports, or references referring to a node with the same nodename/creation\n  pair that the runtime system was about to use, these already existing pids,\n  ports, or references would not work as expected in various situations after\n  the node had gone alive. This could only occur if the runtime system was\n  communicated such pids, ports, or references prior to the distribution was\n  started. That is, it was extremely unlikely to happen unless the distribution\n  was started dynamically and was even then very unlikely to happen. The runtime\n  system now checks for already existing pids, ports, and references with the\n  same nodename/creation pair that it is about to use. If such are found another\n  creation will be chosen in order to avoid these issues.\n\n  Own Id: OTP-18570 Aux Id: PR-7190","ref":"notes.html#fixed-bugs-and-malfunctions-53"},{"type":"extras","title":"Erts 13.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in the loader that prevented certain modules compiled with\n  `no_ssa_opt` from being loaded.\n\n  Own Id: OTP-18519 Aux Id: GH-7024\n\n- Implementations of the [`call()`](driver_entry.md#call) driver callback that\n  returned a faulty encoded result could cause a memory leak and could cause\n  invalid data on the heap of the processes calling `erlang:port_call/3`.\n\n  Own Id: OTP-18525 Aux Id: PR-7049\n\n- Fixed a memory corruption issue when upgrading code. The bug was introduced in\n  `OTP 25.3`\n\n  Own Id: OTP-18553\n\n- Fixed configure tests for a few ARM-specific instructions, which prevented the\n  emulator from being built on some platforms.\n\n  Own Id: OTP-18554\n\n- Aliases created in combination with a monitor using the\n  `{alias, explicit_unalias}` option stopped working from remote nodes when a\n  `'DOWN'` signal had been received due to the monitor or if the monitor was\n  removed using the `erlang:demonitor()` BIF.\n\n  This bug was introduced in OTP 24.3.4.10 and OTP 25.3.\n\n  Own Id: OTP-18557 Aux Id: PR-7131, OTP-18496\n\n- In rare circumstances, bit syntax matching of an invalid code point for a\n  `utf32` would crash the runtime system.\n\n  Own Id: OTP-18560\n\n- Building the runtime system failed when native atomic support was missing.\n  Note that execution on such systems have only been rudimentary tested.\n\n  Own Id: OTP-18563 Aux Id: GH-7114, PR-7159","ref":"notes.html#fixed-bugs-and-malfunctions-54"},{"type":"extras","title":"Erts 13.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug on Windows where `file:read_file_info/1` would fail for files with\n  corrupt metadata.\n\n  Own Id: OTP-18348 Aux Id: GH-6356\n\n- Fix [`process_info(_, binary)`](`process_info/2`) to again include \"writable\n  binaries\" which were lost in OTP-25.0. Writable binaries are an optimization\n  used when binaries are appended upon in a loop.\n\n  Own Id: OTP-18373 Aux Id: PR-6574, GH-6573\n\n- Fix rare race when receiving fragmented messages on a terminating connection.\n  Could potentially cause memory leaks as well as double free crashes. Bug\n  exists since OTP 22.0.\n\n  Own Id: OTP-18382 Aux Id: PR-6585\n\n- Fixed bug that could maybe cause problems when a file descriptor number is\n  closed by a linked in driver and then opened (reused) and passed to\n  `enif_select` by a NIF. No actual symptoms seen, only failed internal\n  assertions in debug build.\n\n  Own Id: OTP-18391\n\n- The runtime system could crash when tracing a process executing on a dirty\n  scheduler.\n\n  Own Id: OTP-18398 Aux Id: PR-6495, GH-6448, GH-5984\n\n- In the binary syntax, attempting to match out integers with size exceeding 2\n  GiB could crash the runtime system.\n\n  Own Id: OTP-18406 Aux Id: GH-6701\n\n- Fixed edge case in floating-point negation where `A = 0.0, B = -A` did not\n  produce `B = -0.0` on x86_64 JIT.\n\n  Own Id: OTP-18411 Aux Id: GH-6717\n\n- Fixed an issue in the JIT that could crash the emulator on some platforms.\n\n  Own Id: OTP-18418\n\n- Added meta data to the windows installer.\n\n  Own Id: OTP-18429 Aux Id: PR-6587 GH-4232 GH-6537\n\n- Fixed ETS insertion order into `bag` and `duplicate_bag` of tuples with\n  identical keys when passed in a list to `ets:insert/2`. The insert order has\n  been head-to-tail but was accidentally changed in OTP 23.0. For `bag` it was\n  reverted (tail-to-head), while for `duplicate_bag` it was sometimes reverted\n  depending on the length of the list and number of \"reductions\" left for the\n  calling process.\n\n  This fix changes the insert order of `ets:insert/2` back to always be\n  head-to-tail of the list argument.\n\n  Own Id: OTP-18434 Aux Id: PR-6752\n\n- With the JIT for AArch64 (AMD64), calling `bxor` in with non-integer arguments\n  in a guard would crash the runtime system.\n\n  Own Id: OTP-18454 Aux Id: PR-6839\n\n- Fix bug regarding process flag `max_heap_size`. Could cause strange behavior\n  when a process was killed due to exceeding the limit.\n\n  Own Id: OTP-18457 Aux Id: PR-6816\n\n- Fixed binary comprehensions to be similar to other creation of binary data\n  with respect to its contribution of triggering garbage collection.\n\n  Own Id: OTP-18458\n\n- In rare circumstances, when a process exceeded its allowed heap size set by\n  option `max_heap_size`, it would not be killed as it should be, but instead\n  enter a kind of zombie state it would never get out of.\n\n  Own Id: OTP-18463 Aux Id: PR-6858\n\n- Instead of crashing, the [`list_to_integer/1`](`list_to_integer/1`) and\n  [`list_to_integer/2`](`list_to_integer/2`) BIFs now raise the `system_limit`\n  exception for overlong lists that can't be converted to integers. Similarly,\n  the `string:to_integer/1` BIF now returns `{error,system_limit}` for overlong\n  lists.\n\n  Own Id: OTP-18475 Aux Id: PR-6897\n\n- Active process aliases of a process at its termination leaked memory.\n\n  Own Id: OTP-18496 Aux Id: GH-6947, PR-6953","ref":"notes.html#fixed-bugs-and-malfunctions-55"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Support for fully asynchronous distributed signaling where send operations\n  _never_ block. This functionality is by default disabled and can be enabled\n  per process. For more information see the documentation of\n  [`process_flag(async_dist, Bool)`](`m:erlang#process_flag_async_dist`).\n\n  Own Id: OTP-18374 Aux Id: PR-6632\n\n- Added the `+JPperf no_fp` option to explicitly disable Erlang frame pointers\n  otherwise added when using the `+JPperf map` option.\n\n  Own Id: OTP-18426","ref":"notes.html#improvements-and-new-features-12"},{"type":"extras","title":"Erts 13.1.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-1-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Comparisons between small numbers and pids or ports would in some edge cases\n  say that the number was greater than the pid or port, violating the term\n  order.\n\n  Own Id: OTP-18415\n\n- [`process_info(Pid, status)`](`process_info/2`) when `Pid /= self()` could\n  return an erroneous result.\n\n  Own Id: OTP-18421 Aux Id: PR-6806","ref":"notes.html#fixed-bugs-and-malfunctions-56"},{"type":"extras","title":"Erts 13.1.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-1-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in selective receive optimization that could crash 32-bit\n  emulators.\n\n  Own Id: OTP-18383 Aux Id: ERIERL-905\n\n- A race condition which was very rarely triggered could cause the signal queue\n  of a process to become inconsistent causing the runtime system to crash.\n\n  Own Id: OTP-18388 Aux Id: OTP-17462, PR-6662","ref":"notes.html#fixed-bugs-and-malfunctions-57"},{"type":"extras","title":"Erts 13.1.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-1-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix perf/gdb JIT symbols to not contain `CodeInfoPrologue` for the JIT\n  internal module erts_beamasm.\n\n  Own Id: OTP-18256 Aux Id: PR-6316\n\n- Fixed minor memory leaks.\n\n  Own Id: OTP-18281 Aux Id: PR-4840\n\n- Fix bugs in `ets:insert` and `ets:insert_new` when called with a list of\n  tuples to insert while a concurrent process either deletes or renames the\n  table. The table deletion could be done with `ets:delete/1` or be caused by\n  termination of the table owning process.\n\n  Symptoms are either VM crash or strange incorrect behavior from the insert\n  operation. The risk of triggering the bugs increases with the length of the\n  list of tuple to insert. Bugs exist since OTP 23.0.\n\n  Own Id: OTP-18284 Aux Id: PR-6305\n\n- Boost execution of scheduled thread progress jobs. This to prevent memory\n  exhaustion in extremely rapid allocation/deallocation scenarios, such as\n  repeated ETS table creations/deletions.\n\n  Own Id: OTP-18294 Aux Id: PR-6390\n\n- Fix segv crash during crash dumping an ETS table doing\n  `ets:delete_all_objects`.\n\n  Own Id: OTP-18295\n\n- Spec for function net:if_names/0 incorrect\n\n  Own Id: OTP-18296 Aux Id: OTP-16464\n\n- Fix bug in `binary_to_term` decoding a binary term 2Gbyte or larger.\n\n  Own Id: OTP-18306 Aux Id: GH-6393, PR-6401\n\n- Documentation of `erlang:module_loaded/1` has been adjusted:\n\n  - It did not previously say that the BIF only returns `true` for modules\n    loaded as _current code_.\n  - The warning claiming that the BIF should only be used by the code server has\n    been removed.\n\n  Own Id: OTP-18313 Aux Id: PR-6456\n\n- Fix [`list_to_atom/1`](`list_to_atom/1`) for negative code points. Could\n  either return with a positive code point or fail with an incorrect exception.\n\n  Own Id: OTP-18321\n\n- Fix rare bug causing VM crash when sending to a pid of a spawning process\n  returned from `erlang:processes/0`.\n\n  Only seen when provoked by system process literal_area_collector, triggered by\n  a module purge operation, on a VM started with +Meamin (no customized\n  allocators).\n\n  Own Id: OTP-18322 Aux Id: PR-6479\n\n- gen_udp:open/2 with option(s) add_membership or drop_membership would drop\n  earlier options.\n\n  Own Id: OTP-18323 Aux Id: #6476\n\n- The `inet:setopts/2` `{reuseaddr, true}` option will now be ignored on Windows\n  unless the socket is an UDP socket. For more information see the documentation\n  of the `reuseaddr` option part of the documentation of `inet:setopts/2`.\n\n  Prior to OTP 25 the `{reuseaddr, true}` option was ignored for all sockets on\n  Windows, but as of OTP 25.0 this was changed so that it was not ignored for\n  any sockets.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18324 Aux Id: GH-6461, PR-6481\n\n- Fix bug in `binary_to_term` decoding a list of length 1G or longer.\n\n  Own Id: OTP-18328 Aux Id: GH-6439, PR-6440\n\n- Fix bug in `binary_to_term` (and distributed receive) when decoding a large\n  map (>32 keys) with unsorted small maps (<= 32) as keys of the large map.\n\n  This was only a problem if the term was encoded by `erl_interface`,\n  `jinterface` or otherwise, as the VM itself always encodes small maps with\n  sorted keys.\n\n  The \"binary_to_term\" would appear as successful but the created large map was\n  internally inconsistent. The smaller key-maps could not be found with maps:get\n  and friends. Other operations such as map compare and merge could probably\n  also give incorrect results.\n\n  Own Id: OTP-18343 Aux Id: GH-6496\n\n- Fix Windows bug in `open_port({spawn, Command}, ..)` when `Command` is found\n  via the OS search PATH and that directory path contains white spaces. The port\n  program would start but the command line arguments to it could be incorrect.\n\n  Own Id: OTP-18345 Aux Id: GH-6387, PR-6396","ref":"notes.html#fixed-bugs-and-malfunctions-58"},{"type":"extras","title":"Erts 13.1.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-1-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in selective receive optimization that could crash 32-bit\n  emulators.\n\n  Own Id: OTP-18383 Aux Id: ERIERL-905\n\n- A race condition which was very rarely triggered could cause the signal queue\n  of a process to become inconsistent causing the runtime system to crash.\n\n  Own Id: OTP-18388 Aux Id: OTP-17462, PR-6662","ref":"notes.html#fixed-bugs-and-malfunctions-59"},{"type":"extras","title":"Erts 13.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Add abandon carrier free utilization limit (`+Muacful`) option to erts_alloc.\n  This option allows the user to mark unused segments in a memory carrier as\n  re-useable by the OS if needed.\n\n  This functionality was a non-configurable default before Erlang/OTP 25, but\n  removed due to performance issues.\n\n  Own Id: OTP-18290 Aux Id: ERIERL-866 PR-6378","ref":"notes.html#fixed-bugs-and-malfunctions-60"},{"type":"extras","title":"Erts 13.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Listen sockets created with the socket module, leaked (erlang-) monitors.\n\n  Own Id: OTP-18240 Aux Id: #6285\n\n- [Notifications about available distribution data](`erlang:dist_ctrl_get_data_notification/1`)\n  sent to distribution controller processes could be lost. Distribution\n  controller processes can be used when implementing an alternative distribution\n  carrier. The default distribution over tcp was not effected and the bug was\n  also not present on x86/x86_64 platforms.\n\n  Own Id: OTP-18258 Aux Id: GH-6309, PR-6324","ref":"notes.html#fixed-bugs-and-malfunctions-61"},{"type":"extras","title":"Erts 13.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed inconsistency bugs in `m:global` due to `nodeup`/`nodedown` messages not\n  being delivered before/after traffic over connections. Also fixed various\n  other inconsistency bugs and deadlocks in both `m:global_group` and `global`.\n\n  As building blocks for these fixes, a new BIF `erlang:nodes/2` has been\n  introduced and `net_kernel:monitor_nodes/2` has been extended.\n\n  The [`-hidden`](erl_cmd.md#hidden) and\n  [`-connect_all`](erl_cmd.md#connect_all) command line arguments did not work\n  if multiple instances were present on the command line which has been fixed.\n  The new kernel parameter [`connect_all`](`e:kernel:kernel_app.md#connect_all`)\n  has also been introduced in order to replace the `-connect_all` command line\n  argument.\n\n  Own Id: OTP-17934 Aux Id: PR-6007\n\n- Fixed IPv6 multicast_if and membership socket options.\n\n  Own Id: OTP-18091 Aux Id: #5789\n\n- Accept funs (NEW_FUN_EXT) with incorrectly encoded size field. This is a\n  workaround for a bug (OTP-18104) existing in OTP 23 and 24 that could cause\n  incorrect size fields in certain cases. The emulator does not use the decoded\n  size field, but `erl_interface` still does and is not helped by this\n  workaround.\n\n  Own Id: OTP-18093 Aux Id: OTP-18104, PR-5987\n\n- Fixed issue with inet:getifaddrs hanging on pure IPv6 Windows\n\n  Own Id: OTP-18102 Aux Id: #5904\n\n- Fix faulty distribution encoding of terms with either\n\n  - a fun with bit-string or export-fun in its environment when encoded toward a\n    not yet established (pending) connection\n  - or a fun with a binary/bitstring, in its environment, referring to an\n    off-heap binary (larger than 64 bytes).\n\n  The symptom could be failed decoding on the receiving side leading to aborted\n  connection. Fix OTP-18093 is a workaround for theses bugs that makes the VM\n  accepts such faulty encoded funs.\n\n  The first encoding bug toward pending connection exists only in OTP 23 and 24,\n  but the second one exists also on OTP 25.\n\n  Own Id: OTP-18104 Aux Id: OTP-18093\n\n- Fixed emulator crash that could happen during crashdump generation of ETS\n  tables with options `ordered_set` and `{write_concurrency,true}`.\n\n  Own Id: OTP-18144 Aux Id: GH-5981\n\n- Retrieval of monotonic and system clock resolution on MacOS could cause a\n  crash and/or erroneous results.\n\n  Own Id: OTP-18160 Aux Id: PR-6103\n\n- Fix bug where the max allowed size of `erl +hmax` was lower than what was\n  allowed by `process_flag`.\n\n  Own Id: OTP-18161 Aux Id: PR-6081\n\n- On computers with ARM64 (AArch64) processors, the JIT could generate incorrect\n  code when more than 4095 bits were skipped at the tail end of a binary match.\n\n  Own Id: OTP-18201\n\n- In rare circumstances, an [`is_binary/1`](`is_binary/1`) guard test could\n  succeed when given a large integer.\n\n  Own Id: OTP-18216 Aux Id: GH-6239, PR-6240\n\n- Fix bug causing `ets:info` (and sometimes `ets:whereis`) to return 'undefined'\n  for an existing table if a concurrent process were doing `ets:insert` with a\n  long list on the same table.\n\n  Own Id: OTP-18218 Aux Id: ERIERL-855\n\n- Fix writing and reading of more than 2 GB in a single read/write operation on\n  macOS. Before this fix attempting to read/write more than 2GB would result in\n  `{error,einval}`.\n\n  Own Id: OTP-18222 Aux Id: PR-6248 GH-6242\n\n- Fix bug sometimes causing emulator crash at node shutdown when there are\n  pending connections. Only seen when running duel distribution protocols,\n  inet_drv and inet_tls_dist.\n\n  Own Id: OTP-18243 Aux Id: GH-6247, PR-6258","ref":"notes.html#fixed-bugs-and-malfunctions-62"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Yield when adjusting large process message queues due to\n\n  - copying terms from a literal area prior to removing the literal area.\n  - changing the `message_queue_data` state from `on_heap` to `off_heap`.\n\n  The message queue adjustment work will now be interleaved with all other types\n  of work that processes have to do, even other message queue adjustment work.\n\n  Own Id: OTP-17340 Aux Id: PR-6133\n\n- Add rudimentary debug feature (option) for the inet-driver based sockets, such\n  as gen_tcp and gen_udp.\n\n  Own Id: OTP-18032\n\n- Introduced the `hidden` and `dist_listen` options to `net_kernel:start/2`.\n\n  Also documented the [`-dist_listen`](erl_cmd.md#dist_listen) command line\n  argument which was erroneously documented as a `kernel` parameter and not as a\n  command line argument.\n\n  Own Id: OTP-18107 Aux Id: PR-6009\n\n- New documentation chapter \"Debugging NIFs and Port Drivers\" under\n  Interoperability Tutorial.\n\n  Own Id: OTP-18109\n\n- Add new API function erl_features:configurable/0\n\n  Own Id: OTP-18199 Aux Id: PR-5790","ref":"notes.html#improvements-and-new-features-13"},{"type":"extras","title":"Erts 13.0.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-0-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The [`monitor/3`](`erlang:monitor/3`) BIF did not apply options to the created\n  monitor if the target process or port did not exist. That is, the\n  corresponding down message would get a `` `DOWN` `` tag even if a custom tag\n  had been set, and the returned reference was not an alias even if the `alias`\n  option had been passed.\n\n  Own Id: OTP-18190 Aux Id: GH-6185, PR-6209\n\n- The `erlang:monotonic_time/1`, `erlang:system_time/1`, `erlang:time_offset/1`,\n  and `os:system_time/1` BIFs erroneously failed when passed the argument\n  `native`.\n\n  Own Id: OTP-18197 Aux Id: GH-6165, PR-6213","ref":"notes.html#fixed-bugs-and-malfunctions-63"},{"type":"extras","title":"Erts 13.0.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-0-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Distributed exit signals could be lost under the following conditions:\n\n  - An exit signal from a parent process to a child process was lost if:\n\n    - the parent process terminated before the spawn request that created the\n      child had completed,\n    - the spawn request set up a link between parent and child\n    - the spawn request was distributed, and\n    - the exit reason was larger than one machine word.\n\n  - Loss of a connection over which a not yet completed spawn request was\n    ongoing could cause loss of exit signals. Such loss of exit signals was very\n    rare. Besides the above described connection loss also the following\n    conditions had to be satisfied:\n\n    - The spawn request that was interrupted by the connection loss also had to\n      set up a link between the parent process and the child process.\n    - The parent process that issued the spawn request also had to be\n      terminating while the spawn request was interrupted by the connection\n      loss.\n    - The same parent process also had to have made other spawn requests to\n      other nodes than to the node to which the connection was lost.\n    - These spawn requests to the other nodes also had to set up links.\n    - These spawn requests to the other nodes also had to be not yet completed\n      at the time of the connection loss. That is, the spawn reply from the\n      child process had not yet reached the parent process.\n\n    If all the conditions above were met, exit signals to the children spawned\n    due to the above described spawn requests to other nodes _could_ be lost.\n\n    The above bug also caused a significant memory leak when it was triggered\n    since the destruction of the parent process never completed.\n\n  Own Id: OTP-18164 Aux Id: PR-6114\n\n- A race could cause [`process_info(Pid, message_queue_len)`](`process_info/2`)\n  on other processes to return invalid results.\n\n  Own Id: OTP-18169 Aux Id: PR-6134\n\n- Fixed reduction counting for handling process system tasks.\n\n  Own Id: OTP-18170 Aux Id: PR-6135\n\n- Priority elevation of terminating processes did not work which could cause\n  execution of such processes to be delayed.\n\n  Own Id: OTP-18175 Aux Id: PR-6142\n\n- An unlink operation made by a process that terminated before the unlink\n  operation completed, i.e., before it had received an unlink-ack signal from\n  the linked process, caused an exit signal to erroneously be sent from the\n  terminating process to the process being unlinked. This exit signal would most\n  often be ignored by the receiver, but if the receiver of the exit signal\n  concurrently set up a new link, it could receive the exit signal with the\n  actual exit reason of the terminating process instead of a `noproc` exit\n  reason. It is however very hard to detect that this has happened and has no\n  obvious negative consequences, so it should be considered harmless.\n\n  A distributed unlink-ack signal received by a terminating process was also not\n  properly removed which could cause a minor memory leak.\n\n  Own Id: OTP-18177 Aux Id: PR-6150","ref":"notes.html#fixed-bugs-and-malfunctions-64"},{"type":"extras","title":"Erts 13.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- On computers with the ARM64 (AArch64) architecture (such as Apple Silicon\n  Macs) a `rem` expression followed by a `div` expression with the same operands\n  could evaluate to the wrong result if the result of the `rem` expression was\n  unused.\n\n  Own Id: OTP-18143","ref":"notes.html#fixed-bugs-and-malfunctions-65"},{"type":"extras","title":"Erts 13.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A `spawn_reply` signal from a remote node could be delayed and be delivered\n  after other signals from the newly spawned process.\n\n  When this bug triggered, the connection to the node where the process was\n  spawned sometimes could be taken down due to the bug. The following error\n  message would then be logged if this happened:\n  `Missing 'spawn_reply' signal from the node   detected by   on the node  . The node   probably suffers from the bug with ticket id OTP-17737.`\n\n  This bug only affected processes which had enabled\n  [`off_heap` `message_queue_data`](`m:erlang#process_flag_message_queue_data`)\n  and parallel reception of signals had been automatically enabled.\n\n  This bug was introduced in OTP 25.0, ERTS version 13.0.\n\n  Own Id: OTP-18105 Aux Id: OTP-16982, PR-6003\n\n- Fixed type spec of `erlang:system_info(dist_ctrl)`.\n\n  Own Id: OTP-18106 Aux Id: PR-5992\n\n- The zlib built in to the runtime system has been updated to version 1.2.12.\n  (Note that on most platforms, the platform's own zlib is used.)\n\n  Own Id: OTP-18123 Aux Id: GH-5994\n\n- The `erlang:is_alive()` BIF could return `true` before configured distribution\n  service was available. This bug was introduced in OTP 25.0 ERTS version 13.0.\n\n  The `erlang:monitor_node()` and `erlang:monitor()` BIFs could erroneously fail\n  even though configured distribution service was available. This occurred if\n  these BIFs were called after the distribution had been started using dynamic\n  node name assignment but before the name had been assigned.\n\n  Own Id: OTP-18124 Aux Id: OTP-17558, PR-6032","ref":"notes.html#fixed-bugs-and-malfunctions-66"},{"type":"extras","title":"Erts 13.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-13-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The socket option 'reuseaddr' is _no longer_ ignored on Windows.\n\n  Own Id: OTP-17447 Aux Id: GH-4819\n\n- The growth rate of writable binaries has been adjusted to only increase by 20%\n  after 16MB in size. Before this change the size would always double.\n\n  This change may degrade write performance of large binaries.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17569 Aux Id: PR-4793\n\n- Fix reduction counting bug in `re:run` that caused the function to yield too\n  frequently when doing `global` matches.\n\n  Own Id: OTP-17661 Aux Id: PR-5165\n\n- Fix spelling mistakes in epmd error messages.\n\n  Own Id: OTP-17758 Aux Id: PR-5391\n\n- Fix bug where the \"newshell\" would trigger a newline at the column width of\n  the terminal, even if the next character to be printed was a newline. This\n  would cause the terminal to render two newlines instead of one.\n\n  Own Id: OTP-17779 Aux Id: GH-5403 PR-5599\n\n- Fix the memory value returned from `ets:info(Tid,memory)` when the\n  `read_concurrency` option is used.\n\n  Before this fix the memory used by the scheduler specific lock cache lines was\n  not counted towards the total. This caused the returned memory usage to be\n  very incorrect on systems with many schedulers for tables with man locks.\n\n  Own Id: OTP-17832 Aux Id: PR-5494\n\n- Fix the undocumented `--profile_boot` option to work again.\n\n  Own Id: OTP-17836 Aux Id: PR-5546\n\n- \\[socket] Encode of sockaddr has been improved.\n\n  Own Id: OTP-18020\n\n- Fix `erl_child_setup` (the program used by `open_port({spawn,...})` and\n  `os:cmd/1`) to better handle partial reads from the Erlang VM.\n\n  Own Id: OTP-18047 Aux Id: PR-5861\n\n- The runtime system would crash when attempting to create more than 33554431\n  atoms.\n\n  Own Id: OTP-18068 Aux Id: GH-5903","ref":"notes.html#fixed-bugs-and-malfunctions-67"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Users can now configure ETS tables with the `{write_concurrency, auto}`\n  option. This option forces tables to automatically change the number of locks\n  that are used at run-time depending on how much concurrency is detected. The\n  `{decentralized_counters, true}` option is enabled by default when\n  `{write_concurrency, auto}` is active.\n\n  Benchmark results comparing this option with the other ETS optimization\n  options are available here:\n\n  https://erlang.org/bench/ets_bench_result_lock_config.html\n\n  Own Id: OTP-15991 Aux Id: PR-5208\n\n- The net module now works on Windows.\n\n  Own Id: OTP-16464\n\n- To enable more optimizations, BEAM files compiled with OTP 21 and earlier\n  cannot be loaded in OTP 25.\n\n  Own Id: OTP-16702\n\n- Optimize minor garbage collection for processes with large number of binaries,\n  funs and/or external pids/ports/refs. This is a continuation of the\n  optimization (OTP-17602) released in OTP-24.1.\n\n  Own Id: OTP-16852 Aux Id: ERL-1347, PR-5195\n\n- The signal queue of a process with message_queue_data=off_heap\\* has been\n  optimized to allow parallel reception of signals from multiple processes.\n\n  This is possible to do as Erlang only guarantees that signals (i.e., message\n  signals and non-message signals) sent from a single process to another process\n  are ordered in send order. However, there are no ordering guarantees for\n  signals sent from different processes to a particular process. Therefore,\n  several processes can send signals in parallel to a specific process without\n  synchronizing with each other. However, such signal sending was previously\n  always serialized as the senders had to acquire the lock for the outer signal\n  queue of the receiving process. This parallel signal sending optimization\n  yields much better scalability for signal sending than what was previously\n  possible, see https://erlang.org/bench/sigq_bench_result.html for benchmark\n  results.\n\n  \\* Information about how to enable the message_queue_data=off_heap setting can\n  be found in the documentation of the function erlang:process_flag/2.\n\n  Own Id: OTP-16982 Aux Id: PR-5020\n\n- The JIT now works for 64-bit ARM processors.\n\n  Own Id: OTP-17119 Aux Id: PR-4869\n\n- Added support for the compile attribute `-nifs()` to empower compiler and\n  loader with information about which functions may be overridden as NIFs by\n  `erlang:load_nif/2`. It is recommended to use this attribute in all modules\n  that load NIF libraries.\n\n  Own Id: OTP-17151 Aux Id: ERIERL-590, PR-5479\n\n- A test case has been added to the otp_SUITE that test that the dependency\n  versions for OTP's applications are correct. The test case uses xref to check\n  if the used functions are available in the specified dependency versions. The\n  test case depends on the Erlang/OTP team's testing infrastructure and will be\n  skipped if its dependencies are not met.\n\n  Own Id: OTP-17224\n\n- An Erlang installation directory is now relocatable on the file system given\n  that the paths in the installation's `RELEASES` file are paths that are\n  relative to the installations root directory. The\n  `` `release_handler:create_RELEASES/4 `` function can generate a `RELEASES`\n  file with relative paths if its `RootDir` parameter is set to the empty\n  string.\n\n  Own Id: OTP-17304\n\n- The following distribution flags are now mandatory: `DFLAG_BIT_BINARIES`,\n  `DFLAG_EXPORT_PTR_TAG`, `DFLAG_MAP_TAGS`, `DFLAG_NEW_FLOATS`, and\n  `DFLAG_FUN_TAGS`. This mainly concerns libraries or application that implement\n  the distribution protocol themselves.\n\n  Own Id: OTP-17318 Aux Id: PR-4972\n\n- Input for `configure` scripts adapted to `autoconf` 2\\.71.\n\n  Own Id: OTP-17414 Aux Id: PR-4967\n\n- When binary construction using the binary syntax fails, the error message\n  printed in the shell and by `erl_error:format_exception/3,4` will contain more\n  detailed information about what went wrong.\n\n  Own Id: OTP-17504 Aux Id: GH-4971, PR-5281, PR-5752\n\n- The configuration files [`.erlang`](erl_cmd.md),\n  [`.erlang.cookie`](`e:system:distributed.md`) and\n  [`.erlang.crypt`](`m:beam_lib#module-erlang-crypt`) can now be located in the XDG\n  Config Home directory.\n\n  See the documentation for each file and `filename:basedir/2` for more details.\n\n  Own Id: OTP-17554 Aux Id: GH-5016 PR-5408 OTP-17821\n\n- Make [`byte_size/1`](`byte_size/1`) and `binary_part/2/3` callable from match\n  specs (in ETS and tracing).\n\n  Own Id: OTP-17555 Aux Id: PR-5027\n\n- Dynamic node name improvements: `erlang:is_alive/0` changed to return true for\n  pending dynamic node name and new function `net_kernel:get_state/0`.\n\n  Own Id: OTP-17558 Aux Id: OTP-17538, PR-5111, GH-5402\n\n- A new option called `short` has been added to the functions\n  `erlang:float_to_list` and `erlang:float_to_binary`. This option creates the\n  shortest correctly rounded string representation of the given float that can\n  be converted back to the same float again.\n\n  Own Id: OTP-17562 Aux Id: GH-4492\n\n- The tagged tuple tests and fun-calls have been optimized and are now a little\n  bit cheaper than previously.\n\n  These optimizations become possible after making sure that all boxed terms\n  have at least one word allocated after the arity word. This has been\n  accomplished by letting all empty tuples refer to the same empty tuple literal\n  which also reduces memory usage for empty tuples.\n\n  Own Id: OTP-17608\n\n- The signal queue benchmark in parallel_messages_SUITE and the ETS benchmark in\n  ets_SUITE have benchmark result visualization HTML pages with \"fill-screen\"\n  buttons to make the graphs bigger. This button did not work as intended\n  before. When pressing the button for a graph, the last graph got replaced with\n  a bigger version and not the one over the button. This is now fixed.\n\n  Own Id: OTP-17630\n\n- The test case num_bif_SUITE:t_float_to_string previously failed sometimes as\n  it assumed a certain rounding of floats printed with sprintf but the rounding\n  type is platform specific.\n\n  Own Id: OTP-17636\n\n- Optimize interpreter to create heap binaries of small match contexts if\n  possible.\n\n  This optimization was already done in the JIT.\n\n  Own Id: OTP-17660 Aux Id: PR-5164\n\n- Optimize integer multiplication for x86 JIT\n\n  Own Id: OTP-17667 Aux Id: PR-5237\n\n- Removed use of node creation value zero as a wildcard. Also prevent zero from\n  being used as creation by `erl_interface` and `jinterface` nodes.\n\n  Own Id: OTP-17682 Aux Id: PR-5347\n\n- Distributed spawn operations now require\n  [distributed `spawn_request()`](erl_dist_protocol.md#DFLAG_SPAWN) support.\n  Distributed `spawn_request()` was introduced in OTP 23. That is, distributed\n  spawn operations against Erlang nodes of releases prior to OTP 23 will fail.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17683 Aux Id: PR-5306\n\n- The Erlang compiler now includes type information in BEAM files, and the JIT\n  can now use that type information to do optimizations such as eliminating or\n  simplifying type tests.\n\n  Own Id: OTP-17684 Aux Id: PR-5316, PR-5664\n\n- Improved the JIT's support for external tools like `perf` and `gdb`, allowing\n  them to show line numbers and even the original Erlang source code when that\n  can be found.\n\n  To aid them in finding the source code, the `absolute_path` compiler option\n  has been added to embed the absolute file path of a module.\n\n  Own Id: OTP-17685\n\n- Add \\[32-bit] to the Erlang shell title row for 32-bit VMs.\n\n  Own Id: OTP-17717 Aux Id: PR-5290\n\n- Instructions for how to build the runtime system for iOS/iPadOS can now be\n  found in `HOWTO/INSTALL.md`.\n\n  Own Id: OTP-17728 Aux Id: PR-5284\n\n- Add support for static Elixir NIF modules with non-alphanumeric characters by\n  using new macro `STATIC_ERLANG_NIF_LIBNAME`.\n\n  Own Id: OTP-17729 Aux Id: PR-5477\n\n- Add new function `caller_line` to for trace match specifications used by\n  erlang:trace_pattern/3.\n\n  This new option puts the line number of the caller into the trace message sent\n  to the trace receiver.\n\n  Own Id: OTP-17753 Aux Id: PR-5305 GH-5297\n\n- A new `erl` command line argument `+ssrct` has been introduced which will\n  cause the runtime system to skip reading CPU topology information. This reduce\n  start up time especially when the CPU topology is large. Reading of CPU\n  topology information is now also skipped if a user defined CPU topology is set\n  using the `+sct` command line argument.\n\n  Own Id: OTP-17762 Aux Id: GH-5204, PR-5219\n\n- The default time warp mode will change in Erlang/OTP 26. Added a warning about\n  this upcoming potential incompatibility to the documentation.\n\n  Own Id: OTP-17772 Aux Id: GH-4965 PR-5644\n\n- The emulator will no longer mark unused memory as discardable (e.g. through\n  `madvise(2)`), as it caused more problems than it solved.\n\n  Own Id: OTP-17824\n\n- When a record matching or record update fails, a\n  `{badrecord,ExpectedRecordTag}` exception used to be raised. In this release,\n  the exception has been changed to `{badrecord,ActualValue}`, where\n  `ActualValue` is the actual that was found instead of the expected record.\n\n  Own Id: OTP-17841 Aux Id: PR-5694\n\n- Removed the previously undocumented and unsupported `emem` tool.\n\n  Own Id: OTP-17892 Aux Id: PR-5591\n\n- Remove version number from the default install path on Windows.\n\n  Own Id: OTP-17899 Aux Id: PR-5524\n\n- On Windows apply the limit flag JOB_OBJECT_LIMIT_BREAKAWAY_OK in the Erlang\n  service to be able to start a OS child process with a different session\n  number.\n\n  Own Id: OTP-17927 Aux Id: PR-5283\n\n- New erl command line option `+IOs`. It can be used to disable scheduler thread\n  poll optimization, which has been seen to cause degraded event latency in some\n  use cases.\n\n  Own Id: OTP-17945 Aux Id: GH-4759, PR-5809\n\n- An API for multihomed SCTP connect has been added in the guise of\n  `gen_sctp:connectx_init/*`\n\n  Own Id: OTP-17951 Aux Id: PR-5656\n\n- \\[socket] Add encoding of the field hatype of the type sockaddr_ll (family\n  'packet').\n\n  Own Id: OTP-17968 Aux Id: OTP-16464\n\n- A cross compilation issue has been fixed about finding libdlpi during the\n  configure phase.\n\n  Own Id: OTP-17985 Aux Id: GH-5728\n\n- [`process_info/2`](`erlang:process_info/2`) now also accepts `parent` as\n  argument. When passed, the process identifier of the parent process will be\n  returned.\n\n  Own Id: OTP-17999 Aux Id: PR-5768\n\n- Add function attributes to `erl_nif` and `erl_driver` APis to improve compiler\n  detection of interface misuse.\n\n  Own Id: OTP-18006 Aux Id: PR-5932\n\n- The exported type `t:erlang:send_destination/0` has been introduced.\n\n  Own Id: OTP-18033 Aux Id: PR-2926, GH-5376\n\n- Building of the C/C++ make dependencies on Windows has been optimized to be a\n  lot faster.\n\n  Own Id: OTP-18036 Aux Id: PR-5846\n\n- `file:sync/1` will now use the `F_BARRIERFSYNC` flag when available on Mac OS.\n\n  Own Id: OTP-18038","ref":"notes.html#improvements-and-new-features-14"},{"type":"extras","title":"Erts 12.3.2.17 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-17"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* The code server could be hanging if a module with `on_load` function was loaded at the same time as another module was purged using `erlang:purge_module` directly.\n\n  Own Id: OTP-19006\n* Fix bug in `re:run/3` where if an invalid UTF-8 subject was given, re:run could get stuck in an infinite loop. Bug was introduced in Erlang/OTP 22.1.\n\n  Own Id: OTP-19015 Aux Id: ERIERL-682\n* Calling `erlang:trace/3` with first argument one of `ports`, `processes`, `existing_ports`, `existing_processes`, `existing` or `all`, could cause emulator crash if a dirty scheduler was executing a simultaneous trace action.\n\n  Own Id: OTP-19034\n* Fixed an integer overflow when the monotonic time unit reported by the operating system was greater than 10 and lower than 100 microseconds.\n\n  Own Id: OTP-19036 Aux Id: GH-8186\n* When a traced process executing on a dirty scheduler received an exit signal, the dirty scheduler could use the wrong thread specific data which could lead to a crash.\n\n  Own Id: OTP-19043 Aux Id: PR-8342\n* Fixed a more or less harmless bug that caused time correction of Erlang monotonic time to become slightly off on Windows platforms when `QueryPerformanceCounter()` was used as OS monotonic time source.\n\n  `erlang:system_info(os_monotonic_time_source)` now also returns information about *used resolution* which not always corresponds to the resolution of the OS monotonic time source.\n\n  Own Id: OTP-19048 Aux Id: PR-8343","ref":"notes.html#fixed-bugs-and-malfunctions-68"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"* Checks for monotonicity of monotonic time have been improved so that Erlang and OS monotonic time are checked separately.\n\n  A new `configure` argument `--enable-ensure-os-monotonic-time` has also been added. It enables functionality ensuring the monotonicity of monotonic timestamps delivered by the OS. When a non-monotonic timestamp is detected, it will be replaced by the last delivered monotonic timestamp before being used by Erlang's time functionality. Note that you do *not* want to enable this unless the OS monotonic time source on the system fails to produce monotonic timestamps. This since ensuring the monotonicity of OS monotonic timestamps will hurt scalability and performance of the system.\n\n  Own Id: OTP-19044 Aux Id: ERIERL-1043, PR-8342","ref":"notes.html#improvements-and-new-features-15"},{"type":"extras","title":"Erts 12.3.2.16 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-16"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* 32-bit runtime systems on most Unix like platforms could crash if a BIF timer was set with a huge timeout of more than 68 years into the future. In order for the crash to occur, the huge timer (at a later time than when it was set) had to become the nearest active timer set on the specific scheduler on which it was set. This could not happen on a system with only one scheduler since there would always be shorter timers in the system.\n\n  Setting a timer larger than 49 days on Windows could under rare circumstances cause the timeout to be delayed.\n\n  Own Id: OTP-18911 Aux Id: ERIERL-1023, PR-7983","ref":"notes.html#fixed-bugs-and-malfunctions-69"},{"type":"extras","title":"Erts 12.3.2.15 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix faulty debug assert when page size is larger than 16kb, like on PowerPC.\n  Did crash debug VM directly at start.\n\n  Own Id: OTP-18802\n\n- On OTP 24 and OTP 25, incoming distributed messages larger than 64 KiB sent\n  using an alias leaked memory if the alias had been removed prior to entering\n  the node. This issue was not present on OTP 26.\n\n  Incoming distributed messages larger than 64 KiB sent using an alias which had\n  been removed on the receiving node could crash the node. This crash was quite\n  unlikely on OTP 24 and OTP 25, but very likely on OTP 26.\n\n  `'DOWN'` signals with exit reason larger than 64 KiB directed towards a\n  process on a node with a not matching creation leaked memory on the receiving\n  node. Such signals should however be very rare.\n\n  Own Id: OTP-18885 Aux Id: GH-7834, GH-7890, PR-7915\n\n- Removed unnecessary PCRE source tar-ball.\n\n  Own Id: OTP-18902","ref":"notes.html#fixed-bugs-and-malfunctions-70"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Removed unnecessary regexp library used when generating yielding BIFs.\n\n  Own Id: OTP-18830 Aux Id: PR-7823\n\n- Replaced old md5 implementation with an implementation from OpenSSL.\n\n  Own Id: OTP-18877\n\n- Removed unused `makewhatis` script.\n\n  Own Id: OTP-18899","ref":"notes.html#improvements-and-new-features-16"},{"type":"extras","title":"Erts 12.3.2.14 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug causing \"magic\" references in a `compressed` ETS table to not keep the\n  referred object alive. The symptom would be the referred object being garbage\n  collected prematurely and the reference appearing stale, not referring to\n  anything. Examples of such magically referred objects are `atomics` and NIF\n  resources.\n\n  Own Id: OTP-18732 Aux Id: GH-7444, PR-7458\n\n- The cleanup operation of not yet delivered signals to a terminated process\n  yielded excessively.\n\n  Own Id: OTP-18752 Aux Id: PR-7633\n\n- If the external term format encoding of an argument list part of a distributed\n  spawn operation was faulty, the newly spawned remote process could misbehave.\n  The misbehavior included hanging or interpret an incoming message as an\n  argument list to use. This was very unlikely to happen unless using an\n  alternate implementation of the distribution protocol which made a faulty\n  encoding of the argument list. The child process will now detect this error\n  and terminate before executing the user specified code.\n\n  Own Id: OTP-18790 Aux Id: PR-7742\n\n- Fix bugs where if the body of a matchspec would return a map with a variable\n  ('$1', '$\\_' etc) as one of the keys or values and the variable was not an\n  immidiate, the term would not be copied to the receiving processes heap. This\n  would later corrupt the term in the table as the GC could place move markers\n  in it, which in turn would cause the VM to crash.\n\n  Bug has been present for since OTP 17.0.\n\n  Own Id: OTP-18797 Aux Id: PR-7712 GH-7683","ref":"notes.html#fixed-bugs-and-malfunctions-71"},{"type":"extras","title":"Erts 12.3.2.13 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The following functions are now much faster when given a long list or binary:\n\n  - erlang:list_to_integer/1\n  - erlang:binary_to_integer/1\n  - erlang:binary_to_integer/2\n  - erlang:list_to_integer/2\n  - string:to_integer/1\n\n  Own Id: OTP-18659 Aux Id: PR-7426","ref":"notes.html#fixed-bugs-and-malfunctions-72"},{"type":"extras","title":"Erts 12.3.2.12 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- In rare circumstances, bit syntax matching of an invalid code point for a\n  `utf32` would crash the runtime system.\n\n  Own Id: OTP-18560\n\n- If a runtime system which was starting the distribution already had existing\n  pids, ports, or references referring to a node with the same nodename/creation\n  pair that the runtime system was about to use, these already existing pids,\n  ports, or references would not work as expected in various situations after\n  the node had gone alive. This could only occur if the runtime system was\n  communicated such pids, ports, or references prior to the distribution was\n  started. That is, it was extremely unlikely to happen unless the distribution\n  was started dynamically and was even then very unlikely to happen. The runtime\n  system now checks for already existing pids, ports, and references with the\n  same nodename/creation pair that it is about to use. If such are found another\n  creation will be chosen in order to avoid these issues.\n\n  Own Id: OTP-18570 Aux Id: PR-7190\n\n- Constructing a binary segment not aligned with a byte boundary, with a size\n  not fitting in 31 bits, and with a value not fitting in a 64-bit word could\n  crash the runtime system.\n\n  Own Id: OTP-18597","ref":"notes.html#fixed-bugs-and-malfunctions-73"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Further robustify implementation of large maps (> 32 keys). Keys that happen\n  to have same internal 32-bit hash values are now put in collision nodes which\n  are traversed with linear search. This removes the demand for the internal\n  hash function when salted to eventually produce different hashes for all\n  possible pairs of unequal terms.\n\n  Own Id: OTP-18569","ref":"notes.html#improvements-and-new-features-17"},{"type":"extras","title":"Erts 12.3.2.11 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug sometimes causing emulator crash at node shutdown when there are\n  pending connections. Only seen when running duel distribution protocols,\n  inet_drv and inet_tls_dist.\n\n  Own Id: OTP-18243 Aux Id: GH-6247, PR-6258\n\n- Fix bug in `binary_to_term` (and distributed receive) when decoding a large\n  map (>32 keys) with unsorted small maps (<= 32) as keys of the large map.\n\n  This was only a problem if the term was encoded by `erl_interface`,\n  `jinterface` or otherwise, as the VM itself always encodes small maps with\n  sorted keys.\n\n  The \"binary_to_term\" would appear as successful but the created large map was\n  internally inconsistent. The smaller key-maps could not be found with maps:get\n  and friends. Other operations such as map compare and merge could probably\n  also give incorrect results.\n\n  Own Id: OTP-18343 Aux Id: GH-6496\n\n- Implementations of the [`call()`](driver_entry.md#call) driver callback that\n  returned a faulty encoded result could cause a memory leak and could cause\n  invalid data on the heap of the processes calling `erlang:port_call/3`.\n\n  Own Id: OTP-18525 Aux Id: PR-7049\n\n- Aliases created in combination with a monitor using the\n  `{alias, explicit_unalias}` option stopped working from remote nodes when a\n  `'DOWN'` signal had been received due to the monitor or if the monitor was\n  removed using the `erlang:demonitor()` BIF.\n\n  This bug was introduced in OTP 24.3.4.10 and OTP 25.3.\n\n  Own Id: OTP-18557 Aux Id: PR-7131, OTP-18496","ref":"notes.html#fixed-bugs-and-malfunctions-74"},{"type":"extras","title":"Erts 12.3.2.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Active process aliases of a process at its termination leaked memory.\n\n  Own Id: OTP-18496 Aux Id: GH-6947, PR-6953","ref":"notes.html#fixed-bugs-and-malfunctions-75"},{"type":"extras","title":"Erts 12.3.2.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [`process_info(Pid, status)`](`process_info/2`) when `Pid /= self()` could\n  return an erroneous result.\n\n  Own Id: OTP-18421 Aux Id: PR-6806\n\n- In rare circumstances, when a process exceeded its allowed heap size set by\n  option `max_heap_size`, it would not be killed as it should be, but instead\n  enter a kind of zombie state it would never get out of.\n\n  Own Id: OTP-18463 Aux Id: PR-6858","ref":"notes.html#fixed-bugs-and-malfunctions-76"},{"type":"extras","title":"Erts 12.3.2.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in selective receive optimization that could crash 32-bit\n  emulators.\n\n  Own Id: OTP-18383 Aux Id: ERIERL-905\n\n- A race condition which was very rarely triggered could cause the signal queue\n  of a process to become inconsistent causing the runtime system to crash.\n\n  Own Id: OTP-18388 Aux Id: OTP-17462, PR-6662","ref":"notes.html#fixed-bugs-and-malfunctions-77"},{"type":"extras","title":"Erts 12.3.2.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Spec for function net:if_names/0 incorrect\n\n  Own Id: OTP-18296 Aux Id: OTP-16464\n\n- Fix bug in `binary_to_term` decoding a binary term 2Gbyte or larger.\n\n  Own Id: OTP-18306 Aux Id: GH-6393, PR-6401\n\n- Fix [`list_to_atom/1`](`list_to_atom/1`) for negative code points. Could\n  either return with a positive code point or fail with an incorrect exception.\n\n  Own Id: OTP-18321\n\n- Fix bug in `binary_to_term` decoding a list of length 1G or longer.\n\n  Own Id: OTP-18328 Aux Id: GH-6439, PR-6440","ref":"notes.html#fixed-bugs-and-malfunctions-78"},{"type":"extras","title":"Erts 12.3.2.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [Notifications about available distribution data](`erlang:dist_ctrl_get_data_notification/1`)\n  sent to distribution controller processes could be lost. Distribution\n  controller processes can be used when implementing an alternative distribution\n  carrier. The default distribution over tcp was not effected and the bug was\n  also not present on x86/x86_64 platforms.\n\n  Own Id: OTP-18258 Aux Id: GH-6309, PR-6324","ref":"notes.html#fixed-bugs-and-malfunctions-79"},{"type":"extras","title":"Erts 12.3.2.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix writing and reading of more than 2 GB in a single read/write operation on\n  macOS. Before this fix attempting to read/write more than 2GB would result in\n  `{error,einval}`.\n\n  Own Id: OTP-18222 Aux Id: PR-6248 GH-6242","ref":"notes.html#fixed-bugs-and-malfunctions-80"},{"type":"extras","title":"Erts 12.3.2.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug causing `ets:info` (and sometimes `ets:whereis`) to return 'undefined'\n  for an existing table if a concurrent process were doing `ets:insert` with a\n  long list on the same table.\n\n  Own Id: OTP-18218 Aux Id: ERIERL-855","ref":"notes.html#fixed-bugs-and-malfunctions-81"},{"type":"extras","title":"Erts 12.3.2.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix faulty distribution encoding of terms with either\n\n  - a fun with bit-string or export-fun in its environment when encoded toward a\n    not yet established (pending) connection\n  - or a fun with a binary/bitstring, in its environment, referring to an\n    off-heap binary (larger than 64 bytes).\n\n  The symptom could be failed decoding on the receiving side leading to aborted\n  connection. Fix OTP-18093 is a workaround for theses bugs that makes the VM\n  accepts such faulty encoded funs.\n\n  The first encoding bug toward pending connection exists only in OTP 23 and 24,\n  but the second one exists also on OTP 25.\n\n  Own Id: OTP-18104 Aux Id: OTP-18093\n\n- Distributed exit signals could be lost under the following conditions:\n\n  - An exit signal from a parent process to a child process was lost if:\n\n    - the parent process terminated before the spawn request that created the\n      child had completed,\n    - the spawn request set up a link between parent and child\n    - the spawn request was distributed, and\n    - the exit reason was larger than one machine word.\n\n  - Loss of a connection over which a not yet completed spawn request was\n    ongoing could cause loss of exit signals. Such loss of exit signals was very\n    rare. Besides the above described connection loss also the following\n    conditions had to be satisfied:\n\n    - The spawn request that was interrupted by the connection loss also had to\n      set up a link between the parent process and the child process.\n    - The parent process that issued the spawn request also had to be\n      terminating while the spawn request was interrupted by the connection\n      loss.\n    - The same parent process also had to have made other spawn requests to\n      other nodes than to the node to which the connection was lost.\n    - These spawn requests to the other nodes also had to set up links.\n    - These spawn requests to the other nodes also had to be not yet completed\n      at the time of the connection loss. That is, the spawn reply from the\n      child process had not yet reached the parent process.\n\n    If all the conditions above were met, exit signals to the children spawned\n    due to the above described spawn requests to other nodes _could_ be lost.\n\n    The above bug also caused a significant memory leak when it was triggered\n    since the destruction of the parent process never completed.\n\n  Own Id: OTP-18164 Aux Id: PR-6114\n\n- A race could cause [`process_info(Pid, message_queue_len)`](`process_info/2`)\n  on other processes to return invalid results.\n\n  Own Id: OTP-18169 Aux Id: PR-6134\n\n- Fixed reduction counting for handling process system tasks.\n\n  Own Id: OTP-18170 Aux Id: PR-6135\n\n- Priority elevation of terminating processes did not work which could cause\n  execution of such processes to be delayed.\n\n  Own Id: OTP-18175 Aux Id: PR-6142\n\n- An unlink operation made by a process that terminated before the unlink\n  operation completed, i.e., before it had received an unlink-ack signal from\n  the linked process, caused an exit signal to erroneously be sent from the\n  terminating process to the process being unlinked. This exit signal would most\n  often be ignored by the receiver, but if the receiver of the exit signal\n  concurrently set up a new link, it could receive the exit signal with the\n  actual exit reason of the terminating process instead of a `noproc` exit\n  reason. It is however very hard to detect that this has happened and has no\n  obvious negative consequences, so it should be considered harmless.\n\n  A distributed unlink-ack signal received by a terminating process was also not\n  properly removed which could cause a minor memory leak.\n\n  Own Id: OTP-18177 Aux Id: PR-6150\n\n- The [`monitor/3`](`erlang:monitor/3`) BIF did not apply options to the created\n  monitor if the target process or port did not exist. That is, the\n  corresponding down message would get a `` `DOWN` `` tag even if a custom tag\n  had been set, and the returned reference was not an alias even if the `alias`\n  option had been passed.\n\n  Own Id: OTP-18190 Aux Id: GH-6185, PR-6209\n\n- The `erlang:monotonic_time/1`, `erlang:system_time/1`, `erlang:time_offset/1`,\n  and `os:system_time/1` BIFs erroneously failed when passed the argument\n  `native`.\n\n  Own Id: OTP-18197 Aux Id: GH-6165, PR-6213","ref":"notes.html#fixed-bugs-and-malfunctions-82"},{"type":"extras","title":"Erts 12.3.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed emulator crash that could happen during crashdump generation of ETS\n  tables with options `ordered_set` and `{write_concurrency,true}`.\n\n  Own Id: OTP-18144 Aux Id: GH-5981","ref":"notes.html#fixed-bugs-and-malfunctions-83"},{"type":"extras","title":"Erts 12.3.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Accept funs (NEW_FUN_EXT) with incorrectly encoded size field. This is a\n  workaround for a bug (OTP-18104) existing in OTP 23 and 24 that could cause\n  incorrect size fields in certain cases. The emulator does not use the decoded\n  size field, but `erl_interface` still does and is not helped by this\n  workaround.\n\n  Own Id: OTP-18093 Aux Id: OTP-18104, PR-5987\n\n- The zlib built in to the runtime system has been updated to version 1.2.12.\n  (Note that on most platforms, the platform's own zlib is used.)\n\n  Own Id: OTP-18123 Aux Id: GH-5994","ref":"notes.html#fixed-bugs-and-malfunctions-84"},{"type":"extras","title":"Erts 12.3.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Let EPMD tolerate failure when binding to IPv4/IPv6 loopback intefaces in\n  addition to user-supplied addresses via `ERL_EPMD_ADDRESS` or the `-address`\n  option. This can happen, for example, if the host system has ipv6 disabled via\n  the disable_ipv6 sysctl.\n\n  Own Id: OTP-17970 Aux Id: PR-5762\n\n- Fixed a rare bug in [`binary_to_term/1`](`binary_to_term/1`),\n  `enif_make_map_from_arrays`, `erl_drv_send_term`, and Erlang distribution that\n  could crash the emulator.\n\n  Own Id: OTP-18027\n\n- Fixed a rare race in `persistent_term:get/1,2` that could cause it to return\n  the value of another key.\n\n  Own Id: OTP-18065 Aux Id: GH-5908\n\n- Fix bug where the process message queue was left in an inconsistent state when\n  changing from on_heap to off_heap message queue data causing the GC to\n  segfault.\n\n  Own Id: OTP-18075 Aux Id: PR-5927\n\n- Fix functions that convert universal to localtime (such as erlang:localtime/0\n  and erlang:universaltime_to_localtime/1) to fetch the correct localtime if it\n  is changed after the start of the VM.\n\n  Own Id: OTP-18076 Aux Id: ERIERL-802 PR-5905\n\n- Fix memory leak when a process doing a distributed fragmented send is sent an\n  exit signal. Before this fix the receiving node would be left with an\n  incomplete message that would remain until the nodes were disconnected. The\n  bug has existed since Erlang/OTP 21.\n\n  Own Id: OTP-18077 Aux Id: GH-5876 PR-5892\n\n- Corrected the behaviour of the shutdown function when using with the\n  inet_backend = socket. It was not sufficiently compatible with the \"old\"\n  gen_tcp.\n\n  Own Id: OTP-18080 Aux Id: GH-5930","ref":"notes.html#fixed-bugs-and-malfunctions-85"},{"type":"extras","title":"Erts 12.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `erlang:open_port({spawn, _},_)` has been fixed on Windows to handle\n  whitespace characters in the path correctly.\n\n  This could, for example, cause execution of the resolver helper program\n  `inet_gethost` to fail and instead possibly execute a different program.\n\n  Own Id: OTP-17978 Aux Id: OTP-17958\n\n- Fix race condition when creating crash dump that could cause multiple threads\n  to race when writing the initial information in a crash dump.\n\n  The race condition was introduced in erts-12.2 (Erlang/OTP 24.2).\n\n  Own Id: OTP-17993 Aux Id: PR-5806\n\n- Fix Erlang monotonic time on MacOS. Previously used OS monotonic time\n  primitive on MacOS is buggy and will not be used anymore. It has been replaced\n  with usage of another OS monotonic time primitive that does not appear to be\n  buggy.\n\n  Own Id: OTP-17998 Aux Id: PR-5825, GH-5554","ref":"notes.html#fixed-bugs-and-malfunctions-86"},{"type":"extras","title":"Erts 12.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in the x86 JIT that might cause floating point instructions to\n  wrongly throw an exception.\n\n  Own Id: OTP-17822\n\n- Preserve correct `nodedown_reason` if supervised distribution controller\n  processes exit with `{shutdown, Reason}`.\n\n  Own Id: OTP-17838 Aux Id: PR-5748\n\n- Handling of `send_timeout` for `gen_tcp` has been corrected so that the\n  timeout is honored also when sending 0 bytes.\n\n  Own Id: OTP-17840\n\n- By default `global` does _not_ take any actions to restore a fully connected\n  network when connections are lost due to network issues. This is problematic\n  for all applications expecting a fully connected network to be provided, such\n  as for example `mnesia`, but also for `global` itself. A network of\n  overlapping partitions might cause the internal state of `global` to become\n  inconsistent. Such an inconsistency can remain even after such partitions have\n  been brought together to form a fully connected network again. The effect on\n  other applications that expects that a fully connected network is maintained\n  may vary, but they might misbehave in very subtle hard to detect ways during\n  such a partitioning.\n\n  In order to prevent such issues, we have introduced a _prevent overlapping\n  partitions_ fix which can be enabled using the\n  [`prevent_overlapping_partitions`](`e:kernel:kernel_app.md#prevent_overlapping_partitions`)\n  `kernel(6)` parameter. When this fix has been enabled, `global` will actively\n  disconnect from nodes that reports that they have lost connections to other\n  nodes. This will cause fully connected partitions to form instead of leaving\n  the network in a state with overlapping partitions. Note that this fix _has_\n  to be enabled on _all_ nodes in the network in order to work properly. Since\n  this quite substantially changes the behavior, this fix is currently disabled\n  by default. Since you might get hard to detect issues without this fix you\n  are, however, _strongly_ advised to enable this fix in order to avoid issues\n  such as the ones described above. As of OTP 25 this fix will become enabled by\n  default.\n\n  Own Id: OTP-17843 Aux Id: ERIERL-732, PR-5611\n\n- Corrected the type specification of `erlang:seq_trace/2`.\n\n  Own Id: OTP-17900 Aux Id: GH-5667\n\n- Fix memory leak when tracing on running on a process that only handle system\n  tasks or non-message signals (for example process_info requests).\n\n  Own Id: OTP-17904 Aux Id: ERIERL-757","ref":"notes.html#fixed-bugs-and-malfunctions-87"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add support for using socket:sockaddr_in() and socket:sockaddr_in6() when\n  using gen_sctp, gen_tcp and gen_udp. This will make it possible to use Link\n  Local IPv6 addresses.\n\n  Own Id: OTP-17455 Aux Id: GH-4852\n\n- Show `on_load` failure reasons in embedded mode.\n\n  Own Id: OTP-17718 Aux Id: PR-5199\n\n- Compile date saved in the Erlang VM executable has been removed.\n\n  Own Id: OTP-17891 Aux Id: PR-5589\n\n- Improve documentation for the dynamic node name feature.\n\n  Own Id: OTP-17918","ref":"notes.html#improvements-and-new-features-18"},{"type":"extras","title":"Erts 12.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a memory leak in `file:read_file_info/2` and `file:read_file/1` on\n  Windows.\n\n  Own Id: OTP-17827 Aux Id: GH-5527\n\n- Fix GC emulator crash when `spawn_request` was used when message tracing was\n  enabled.\n\n  Own Id: OTP-17871 Aux Id: PR-5612","ref":"notes.html#fixed-bugs-and-malfunctions-88"},{"type":"extras","title":"Erts 12.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- When matching and constructing `utf16` segments in the binary syntax, the\n  `native` flag would be ignored. That is, the endian would always be big endian\n  even on a little-endian computer (almost all modern computers).\n\n  Own Id: OTP-17713\n\n- Fix the help printout of `+JPperf`.\n\n  Own Id: OTP-17749 Aux Id: PR-5378 GH-5361\n\n- Fix bug that could cause Erlang to deadlock during creation of an Erlang crash\n  dump.\n\n  Own Id: OTP-17751 Aux Id: PR-5315\n\n- Fixed C++ build errors on some aarch64 platforms.\n\n  Own Id: OTP-17763 Aux Id: GH-5351\n\n- For macOS, the `Info.plist` file embedded in the runtime system now only\n  contains the absolute minimum amount of information needed for the web view in\n  `wx` to work towards `localhost`. The other fields have been removed, allowing\n  an application packaged in a bundle to specify the application name and other\n  parameter in its own `Info.plist` file.\n\n  Own Id: OTP-17785 Aux Id: PR-5393\n\n- Fix bug in internal stacks (WSTACK and ESTACK) used by\n  [`term_to_binary/2`](`term_to_binary/2`) to encode terms. The bug could cause\n  a segfault if a very very large map was to be encoded with the `deterministic`\n  option given.\n\n  Own Id: OTP-17804 Aux Id: PR-5372\n\n- Improve the error printout when [`open_port/2`](`open_port/2`) fails because\n  of invalid arguments.\n\n  Own Id: OTP-17805 Aux Id: PR-5406\n\n- Fix bug in crash dumps where the stackframe of a process would be printed\n  using an incorrect format.\n\n  Crash dump viewer has also been fixed to be able read the broken stack format.\n\n  The bug has existed since Erlang/OTP 23.0.\n\n  Own Id: OTP-17814 Aux Id: PR-5462","ref":"notes.html#fixed-bugs-and-malfunctions-89"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- An option for enabling dirty scheduler specific allocator instances has been\n  introduced. By default such allocator instances are disabled. For more\n  information see the documentation of the [`+Mdai`](erts_alloc.md#Mdai) `erl`\n  command line argument.\n\n  Own Id: OTP-17363 Aux Id: GH-4728, PR-5187\n\n- Minor optimization of receive markers in message queues.\n\n  Own Id: OTP-17673 Aux Id: OTP-16226\n\n- All predefined types have been added to the `erlang` module together with\n  documentation.\n\n  Any reference to a predefined type now links to that documentation so that the\n  user can view it.\n\n  Own Id: OTP-17689 Aux Id: PR-5292\n\n- Suppress a code checker warning caused by debug builds of YCF. YCF tries to\n  get a conservative estimate of the bottom of the stack by reading and\n  returning a call stack allocated variable.\n\n  Own Id: OTP-17719\n\n- Add file and product properties to erl.exe and werl.exe.\n\n  Own Id: OTP-17724 Aux Id: ERL-1224\n\n- Micro optimization in bitstring append operations.\n\n  Own Id: OTP-17760 Aux Id: ERIERL-725, PR-5414\n\n- Responsiveness of processes executing on `normal` or `low` priority could\n  suffer due to code purging or literal area removal on systems with a huge\n  amount of processes. This since during these operations all processes on the\n  system were scheduled for execution at once.\n\n  This problem has been fixed by introducing a limit on outstanding purge and\n  copy literal requests in the system. By default this limit is set to twice the\n  amount of schedulers on the system. This will ensure that schedulers will have\n  enough work scheduled to perform these operations as quickly as possible at\n  the same time as other work will be interleaved to a much higher degree.\n  Performance of these operations will however be somewhat degraded due to the\n  overhead of enforcing this limit compared to when using a very large limit.\n\n  This limit can be set by passing the `+zosrl` command line argument to `erl`,\n  or by calling\n  `erlang:system_flag(outstanding_system_requests_limit, NewLimit)`.\n\n  Own Id: OTP-17796 Aux Id: ERIERL-729, PR-5473","ref":"notes.html#improvements-and-new-features-19"},{"type":"extras","title":"Erts 12.1.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-1-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The runtime system could call `select()` with a too large timeout value when\n  executing on MacOS. This could in turn cause the runtime system to crash.\n\n  Own Id: OTP-17735 Aux Id: GH-5339\n\n- The fix for Linux's behaviour when reconnecting an UDP socket in PR-5120\n  released in OTP-24.1.2 has been refined to only dissolve the socket's\n  connection before a connect if the socket is already connected, that is: only\n  for a reconnect.\n\n  This allows code to open a socket with an ephemeral port, get the port number\n  and connect; without the port number changing (on Linux). This turned out to\n  have at least one valid use case (besides test cases).\n\n  Should one reconnect the socket then the port number may change, on Linux; it\n  is a known quirk, which can be worked around by binding to a specific port\n  number when opening the socket. If you can do without an ephemeral port, that\n  is...\n\n  Own Id: OTP-17736 Aux Id: GH-5279, PR-5120, OTP-17559\n\n- Certain distributed signals that for various reasons must to be forced into\n  the distribution buffer even when it is full would instead be lost if the\n  distribution buffer was full when sent. The effected signals:\n\n  - `EXIT` signals with exit reasons of one word size.\n  - `DOWN` signals with exit reasons of one word size.\n  - `demonitor` signals from a terminating process.\n  - `unlink_ack` signals on OTP 23 and 24.\n  - `spawn_reply` signals on OTP 23 and 24.\n\n  Own Id: OTP-17737 Aux Id: GH-5346, GH-4989","ref":"notes.html#fixed-bugs-and-malfunctions-90"},{"type":"extras","title":"Erts 12.1.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-1-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug where a gen_tcp write error that happened during a delayed_send would\n  cause a use after free segfault.\n\n  Own Id: OTP-17731 Aux Id: PR-5285\n\n- Fix x86 JIT bug where a `rem` instruction could cause a segfault if given\n  values that would cause an badarith exception.\n\n  Own Id: OTP-17732 Aux Id: PR-5331 ERIERL-664","ref":"notes.html#fixed-bugs-and-malfunctions-91"},{"type":"extras","title":"Erts 12.1.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-1-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Reduction counter was not updated before and after doing `apply` operations on\n  the runtime system with the jit enabled. This caused reduction counting to get\n  out of sync if a garbage collection was made as part of the `apply` operation.\n\n  Own Id: OTP-17675\n\n- This fixes a bug in `erts_factory_undo` that caused the heap to not be reset\n  correctly. The `erts_factory_undo` function is, for example, called when a\n  [`binary_to_term/1`](`binary_to_term/1`) call fails to reset the heap to its\n  state before the [`binary_to_term/1`](`binary_to_term/1`) call. This can cause\n  the heap to contain invalid terms which potentially can cause issues (e.g.,\n  crashes) when the whole heap is scanned.\n\n  Own Id: OTP-17677\n\n- When attempting to construct a binary with an segment having an illegal type\n  for the size (e.g. an atom), there could be an unnecessary memory allocation\n  (and subsequent deallocation) before the operation failed. Amended to fail\n  before allocating any memory for the binary.\n\n  Own Id: OTP-17686\n\n- Fix bug in `persistent_term` when a key-value pair contains a magic reference\n  that is referred more than once. Magic references are NIF resources or\n  returned from BIFs like `ets:new`, `atomics:new`. The bug could cause the\n  memory of the referred resource to be prematurely deallocated.\n\n  The bug also apply to magic references in message passing on a runtime built\n  with configure option `--enable-sharing-preserving`.\n\n  Bug exist for 64-bit since OTP-24.0 and for 32-bit since OTP-20.0.\n\n  Own Id: OTP-17700 Aux Id: GH-5271, PR-5273\n\n- Fixed a crash when inspecting the stack trace of an exception raised at a very\n  high line number.\n\n  This bug was introduced in OTP 24.\n\n  Own Id: OTP-17712\n\n- The following two bugs that caused `erlang:demonitor()` to behave erroneously\n  have been fixed. The bugs were only triggered if the monitor that was removed\n  by `demonitor()` had previously been created simultaneously as a monitor and\n  as an alias.\n\n  - A demonitor operation on a monitor created using the\n    `{alias, reply_demonitor}` option erroneously behaved as if the\n    `{alias, explicit_unalias}` option had been used.\n  - A demonitor operation did not prevent a corresponding `'DOWN'` message from\n    being delivered if the monitor reference was kept as an active alias after\n    the operation. This could only occur if the monitored process simultaneously\n    terminated before the demonitor signal reached it, and the exit reason was\n    not an immediate term. That is, a term larger than one machine word.\n\n  Own Id: OTP-17722 Aux Id: GH-5310, PR-5313","ref":"notes.html#fixed-bugs-and-malfunctions-92"},{"type":"extras","title":"Erts 12.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-1-2"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The python scripts that existed in\n  erts/lib_src/yielding_c_fun/lib/tiny_regex_c/scripts had a license that was\n  incompatible with Erlang/OTP's license. This ticket removes these scripts that\n  were not used by us.\n\n  Own Id: OTP-17658","ref":"notes.html#improvements-and-new-features-20"},{"type":"extras","title":"Erts 12.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A race between an exiting port and handling of simultaneously received signals\n  to that port could cause a runtime system crash. The effected signals are\n  `link`, `monitor` and `demonitor`. On OTP 22 a similar race could also cause a\n  memory leak when receiving an `unlink` signal.\n\n  Own Id: OTP-17642 Aux Id: PR-5248\n\n- [A user defined tag on a monitor message](`erlang:monitor/3`) could cause the\n  runtime system to crash when the monitor message had been received.\n\n  Own Id: OTP-17646 Aux Id: GH-5221, PR-5232\n\n- A call to [`erlang:demonitor(Ref)`](`erlang:demonitor/1`) where the reference\n  `Ref` referred to an active alias, but not an active monitor, caused the\n  runtime system to crash.\n\n  Own Id: OTP-17647 Aux Id: GH-5225, PR-5230\n\n- The message queue of a process entered an inconsistent state after a `receive`\n  expression with an invalid timeout value was executed. If the exception raised\n  due to the invalid timeout value was caught, the following `receive`\n  expression executed by the process could fail to match messages already\n  present in the message queue.\n\n  On OTP 24 this could also cause the whole runtime system to crash.\n\n  Own Id: OTP-17651 Aux Id: GH-5235, PR-5244\n\n- Sending a `Port ! {PortOwner, close}` signal from a process other than the\n  port owner could erroneously trigger a `badsig` exit signal being sent to the\n  port owner process even though the correct `PortOwner` had been passed in the\n  signal.\n\n  Own Id: OTP-17665 Aux Id: PR-5248","ref":"notes.html#fixed-bugs-and-malfunctions-93"},{"type":"extras","title":"Erts 12.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Atoms with Unicode code points greater than 255 (for example Greek or Cyrillic\n  characters) would not be displayed correctly by `crashdump_viewer`.\n\n  Own Id: OTP-17377\n\n- Fix rare minor memory leak related to jit code loading.\n\n  Own Id: OTP-17445 Aux Id: PR-4843\n\n- The extended error information has been corrected and improved for the\n  following BIFs: [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`),\n  [`list_to_existing_atom/1`](`list_to_existing_atom/1`),\n  `erlang:send_after/{3,4}`, and `erlang:start_timer/{3,4}`.\n\n  Own Id: OTP-17449 Aux Id: GH-4900\n\n- Fix bug provoked when building with gcc 10 and link time optimization (-flto),\n  causing Erlang compiler to crash. Bug exists since OTP-24.0.\n\n  Own Id: OTP-17477 Aux Id: GH-4846, PR-4894\n\n- Corrected bugs where builds were not reducible even when the `deterministic`\n  option was given. In particular, modules with map literals with more than 32\n  elements could cause this problem.\n\n  As part of this fix, the `term_to_binary` BIF now accepts the option\n  `deterministic`.\n\n  Own Id: OTP-17495 Aux Id: PR-5153\n\n- After an exception has been caught in a process, the stack trace would be kept\n  in the process longer than necessary.\n\n  Own Id: OTP-17512\n\n- Fix rare race bug in memory management of distribution entries. Have been seen\n  to cause VM crash when massive number of repeated concurrent failing\n  connection attempts.\n\n  Own Id: OTP-17513 Aux Id: GH-4964, PR-5015\n\n- The configure test for `--disable-esock-socket-registry` has been corrected so\n  disabling now works.\n\n  Own Id: OTP-17539\n\n- `init:stop()` no longer unloads loaded code before terminating the runtime\n  system. On systems with slow CPUs (such as Raspberry PI Zero), that can\n  significantly speed up termination of the runtime system.\n\n  Own Id: OTP-17542 Aux Id: GH-5031, PR-5032\n\n- Fixed match specifications that use maps in either the guard or the body to\n  work properly.\n\n  With this fix both keys and values in maps can be expressions.\n\n  Various other crashes and bugs when using maps in match specifications have\n  also been fixed.\n\n  Own Id: OTP-17567 Aux Id: PR-4915 PR-5115\n\n- Parsing of the result value in the native DNS resolver has been made more\n  defensive against incorrect results.\n\n  Own Id: OTP-17578 Aux Id: ERIERL-683\n\n- When [`binary_to_term/2`](`binary_to_term/2`) failed, the extended error\n  information would always blame the second argument even if the actual error\n  was in the first argument.\n\n  Own Id: OTP-17591 Aux Id: GH-5171\n\n- On 32-bit computers, `binary_to_term/1,2` is now more resilient against\n  corrupted binaries containing maps in the external format.\n\n  Own Id: OTP-17604\n\n- A call to [`process_info(Pid, status)`](`process_info/2`) could erroneously\n  report the status `running` when it should have reported `waiting`. This\n  occurred when the calling process was executing on a higher priority than the\n  process being inspected. This bug has been present since OTP 21.0 (erts\n  version 10.0).\n\n  Own Id: OTP-17628","ref":"notes.html#fixed-bugs-and-malfunctions-94"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Optimize memory usage of erts internal processes used during code\n  loading/purging by hibernating them after a long time of inactivity.\n\n  Own Id: OTP-17426 Aux Id: PR-4785\n\n- Add the type `t:erlang:stacktrace/0`.\n\n  Own Id: OTP-17453 Aux Id: PR-4764\n\n- The arity argument of [`error/2,3`](`erlang:error/2`) can now be `none` to\n  indicate that the calling functions arity should be used.\n\n  Own Id: OTP-17456 Aux Id: PR-4764\n\n- Optimize match spec compiler for immediate (single word) constant terms.\n\n  Own Id: OTP-17469\n\n- Functions `erlang:set_cookie(Cookie)` and `erlang:get_cookie(Node)` have been\n  added for completeness and to facilitate configuring distributed nodes with\n  different cookies.\n\n  The documentation regarding distribution cookies has been improved to be less\n  vague.\n\n  Own Id: OTP-17538 Aux Id: GH-5063, PR-5111\n\n- A workaround has been implemented for Linux's quirky behaviour to not adjust\n  the source IP address when connecting a connected (reconnecing) UDP socket.\n\n  The workaround is to, on Linux, always dissolve any connection before\n  connecting an UDP socket.\n\n  Own Id: OTP-17559 Aux Id: GH-5092, PR-5120\n\n- The internal documentation for how to use Yielding C Fun (YCF) has been\n  updated to contain text about best practices for using YCF for ERTS.\n\n  Own Id: OTP-17596\n\n- Optimize garbage collection for processes with large number of binaries, funs\n  and/or external pids/ports/refs.\n\n  Own Id: OTP-17602 Aux Id: PR-5149","ref":"notes.html#improvements-and-new-features-21"},{"type":"extras","title":"Erts 12.0.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-0-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A call to the `process_info()` BIF could end up hanging for ever due to a bug\n  introduced when the new selective receive optimization was introduced in OTP\n  24.0. Note that this bug only effects `process_info()`.\n\n  Own Id: OTP-17548 Aux Id: PR-5078, OTP-10391\n\n- Fix buffer overrun problem in the tty driver. The problem happens on some\n  platforms when using the CTRL+R functionality of newshell with very long\n  strings in the history.\n\n  Own Id: OTP-17560 Aux Id: GH-5116\n\n- Fix race-condition that could cause a crash when tracing scheduling or garbage\n  collections on a process that was running on a dirty scheduler.\n\n  Own Id: OTP-17568 Aux Id: PR-4940\n\n- Fix rare bug where re:run would crash/return invalid results when given a\n  subbinary as subject.\n\n  This bug has existed since Erlang/OTP 20.0.\n\n  Own Id: OTP-17585 Aux Id: GH-5150\n\n- `binary_to_term/1,2` is now more resilient against corrupted binaries\n  containing maps in the external format.\n\n  Own Id: OTP-17594","ref":"notes.html#fixed-bugs-and-malfunctions-95"},{"type":"extras","title":"Erts 12.0.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-0-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A call to `erlang:cancel_timer(_, [{info, false}])` could cause the calling\n  process to block forever in the call. Note that only the synchronous version\n  of the call (that is, the `async` option is `false`) in combination with the\n  `info` option set to `false` was effected by this bug.\n\n  Own Id: OTP-17472 Aux Id: PR-4932\n\n- Microstate accounting (msacc) and `os:perf_counter()` unintentionally used\n  system time instead of monotonic time for time measurements on a lot of\n  systems. These systems were all non x86/x86_64 systems or x86/x86_64 systems\n  without a reliable and constant rdtsc instruction.\n\n  The lock counting (lcnt) built runtime system also unintentionally used system\n  time instead of monotonic time for time measurements on all systems.\n\n  Own Id: OTP-17493\n\n- Simultaneous calls to `erlang:system_flag(schedulers_online, _)` could cause\n  callers to end up in a suspended state forever.\n\n  Own Id: OTP-17500 Aux Id: GH-4809","ref":"notes.html#fixed-bugs-and-malfunctions-96"},{"type":"extras","title":"Erts 12.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Not yet handled alias-message signals in the signal queue at the time when a\n  garbage collection was performed could cause a memory corruption which in turn\n  could result in a crash of the runtime system. This bug was introduced in OTP\n  24.0.\n\n  Own Id: OTP-17431 Aux Id: GH-4858, PR-4870, OTP-16718\n\n- Fixed bug when using external pids/ports in keys of big maps (> 32). Could\n  cause runtime crash. Bug exists since OTP 24.0.\n\n  Own Id: OTP-17436 Aux Id: PR-4875\n\n- After a node restart with `init:restart/0,1`, the module `socket` was not\n  usable because supporting tables had been cleared and not re-initialized. This\n  has now been fixed.\n\n  Handling of the \".\" domain as a search domain was incorrect and caused a crash\n  in the DNS resolver `inet_res`, which has now been fixed.\n\n  Own Id: OTP-17439 Aux Id: GH-4827, PR-4888, GH-4838\n\n- A call to `port_command()` could cause a scheduler to end up in an eternal\n  loop if the port was busy and the calling process had incoming signals at the\n  time of the call. This bug was introduced in OTP 23.3.2 (ERTS version 11.2.1),\n  OTP 22.3.4.18 (ERTS version 10.7.2.10), and OTP 21.3.8.23 (ERTS version\n  10.3.5.18).\n\n  Own Id: OTP-17448 Aux Id: GH-4898, PR-4903, OTP-17291\n\n- Bug fixes and code cleanup for the new `socket` implementation, such as:\n\n  Assertions on the result of demonitoring has been added in the NIF code, where\n  appropriate.\n\n  Internal state handling for socket close in the NIF code has been reviewed.\n\n  Looping over `close()` for `EINTR` in the NIF code has been removed, since it\n  is strongly discouraged on Linux and Posix is not clear about if it is\n  allowed.\n\n  The `inet_backend` temporary socket option for legacy `gen_tcp` sockets has\n  been documented.\n\n  The return value from `net:getaddrinfo/2` has been corrected: the `protocol`\n  field is now an `t:atom/0`, instead of, incorrectly,\n  [`list(atom())`](`t:list/1`). The documentation has also been corrected about\n  this return type.\n\n  Deferred close of a `socket:sendfile/*` file was broken and has been\n  corrected.\n\n  Some debug code, not enabled by default, in the socket NIF has been corrected\n  to not accidentally core dump for debug printouts of more or less innocent\n  events.\n\n  Own Id: OTP-17452\n\n- Dirty execution of a process in combination with an unlink signal from a port\n  to the process could cause the signal queue of the process to enter into an\n  inconsistent state. The result of the inconsistency typically caused a crash\n  of the runtime system. This bug was introduced in OTP 23.3 (ERTS version\n  11.2).\n\n  Own Id: OTP-17462 Aux Id: GH-4885, PR-4914, OTP-17127","ref":"notes.html#fixed-bugs-and-malfunctions-97"},{"type":"extras","title":"Erts 12.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Commit of generated `configure` script.\n\n  Own Id: OTP-17420 Aux Id: OTP-17398, GH-4821","ref":"notes.html#fixed-bugs-and-malfunctions-98"},{"type":"extras","title":"Erts 12.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-12-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `file:open/2` now throws an badarg error when opened with both the `ram` and\n  `raw` options.\n\n  Own Id: OTP-16822 Aux Id: PR-2723\n\n- The estone benchmark has been updated to better reflect changes in the\n  compiler and run-time system.\n\n  Own Id: OTP-16879\n\n- Fix profile guided optimization of run-time system when using GCC 7 or later.\n\n  Own Id: OTP-16880\n\n- Fix double close of fd when creating crash dump.\n\n  Own Id: OTP-16884\n\n- Improve `erl` error message when unable to open included `args_file`.\n\n  Own Id: OTP-17014\n\n- Remove warning text about the `--` operation from documentation\n\n  The `--` operation was optimized in Erlang/OTP 22 so that its worst case\n  complexity is O(N*log(N)), where N is the total size of the input lists.\n  Therefore, the warning in the documentation saying that the time complexity is\n  proportional to length(A)*length(B) is incorrect and is no longer needed.\n  Notice that Erlang/OTP 21 will no longer be supported when Erlang/OTP 24 gets\n  released.\n\n  Own Id: OTP-17020\n\n- A floating point zero (0.0) can be both positive (+0.0) and negative (-0.0).\n  Multiple bugs in the compiler, runtime system, and STDLIB have been fixed to\n  ensure that the minus sign on 0.0 is not lost.\n\n  Own Id: OTP-17077 Aux Id: ERL-1431, PR-2903, PR-2905, PR-2906\n\n- Fix compiler warnings produced by the clang compiler.\n\n  Own Id: OTP-17105 Aux Id: PR-2872\n\n- Windows process `erl.exe` killed if its service process `erlsrv.exe`\n  terminates.\n\n  Own Id: OTP-17131 Aux Id: PR-3031, GH-4360\n\n- The `configure` scripts in `crypto` and `erts` now fail if a requested feature\n  cannot be enabled.\n\n  Large parts of the `configure` script of `crypto` have been rewritten with\n  various improvements and bug fixes. It is now better at finding usable OpenSSL\n  libraries, but will in the following cases fail to detect OpenSSL libraries\n  where it previously sometimes detected the libraries by chance:\n\n  - OpenSSL installations with `include` directory and `lib` directory parts\n    installed in different base directories. In order to detect such\n    installations after this change, the user must explicitly specify the\n    locations using the\n    [`--with-ssl= `](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring`)\n    and the\n    [`--with-ssl-incl= `](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring`)\n    `configure` command line arguments.\n  - When building with old `gcc` compilers or other compilers on Debian\n    derivatives with multiarch directories under the `lib` directory. In order\n    to detect such installations after this change, the user must explicitly\n    specify the multiarch directory name using the\n    [`--with-ssl-lib-subdir=lib/ `](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring`)\n    `configure` command line argument.\n\n  Own Id: OTP-17254 Aux Id: ERIERL-618, GH-4230\n\n- The `erl` command line arguments `+Bi`, `+Bd`, and `+B` erroneously caused\n  reception of the `USR1` signal to terminate the runtime system without\n  creating a crash dump. Reception of the `USR1` signal now always cause\n  termination _with_ creation of a crash dump, regardless of command line\n  arguments passed. This bug has existed at least since OTP R5B.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17275 Aux Id: PR-4553\n\n- Add check to make sure that when passing an option to `erl` that requires an\n  argument, but none is given, we report an error. This fixes a bug introduced\n  in OTP-22.1 via OTP-15926.\n\n  Own Id: OTP-17314 Aux Id: OTP-15926, GH-4624, PR-\n\n- The \"Last calls\" section in crash dumps have been updated to print newlines\n  after each non-function `save_calls` state (send, receive, timeout).\n\n  Own Id: OTP-17329 Aux Id: PR-4730\n\n- Sockets created with socket:accept not counted (socket:info/0).\n\n  Own Id: OTP-17372","ref":"notes.html#fixed-bugs-and-malfunctions-99"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The experimental `socket` module can now use any protocol (by name) the OS\n  supports. Suggested in PR-2641, implemented in PR-2670.\n\n  Own Id: OTP-14601 Aux Id: PR-2641, PR-2670, OTP-16749\n\n- New functions `enif_dynamic_resource_call` enables NIFs to call native code in\n  another NIF module. The call is done via a resource callback function\n  `dyncall` supplied by the user with the new `enif_init_resource_type`.\n\n  Own Id: OTP-14753\n\n- Runtime support for new improved selective receive optimization.\n\n  Own Id: OTP-16226 Aux Id: OTP-10391\n\n- The deprecated function `erlang:get_stacktrace/0` has been removed. Use the\n  new syntax in try/catch to retrieve the stack backtrace.\n\n  Own Id: OTP-16653\n\n- Support for handling abstract code created before OTP R15 has been dropped.\n\n  Own Id: OTP-16678 Aux Id: PR-2627\n\n- Extended error information for failing BIF calls as proposed in\n  [EEP 54](https://github.com/erlang/eep/blob/master/eeps/eep-0054.md) has been\n  implemented.\n\n  When a BIF call from the Erlang shell fails, more information about which\n  argument or arguments that were in error will be printed. The same extended\n  error information will by `proc_lib`, `common_test`, and `qlc` when BIF calls\n  fail.\n\n  For applications that wish to provide the same extended error information,\n  there are new functions `erl_error:format_exception/3` and\n  `erl_error:format_exception/4`.\n\n  There is a new [`error/3`](`error/3`) BIF that allows applications or\n  libraries to provide extended error information in the same way for their own\n  exceptions.\n\n  Own Id: OTP-16686\n\n- The `m:erlang` module documentation has been updated to improve clarity and\n  description of edge cases.\n\n  Own Id: OTP-16687 Aux Id: PR-2996 PR-2762\n\n- An example implementation of Erlang distribution over UDS using distribution\n  processes has been introduced.\n\n  Thanks to Jérôme de Bretagne\n\n  Own Id: OTP-16703 Aux Id: PR-2620\n\n- Improve code generation when creating funs by adding a new beam instruction\n  make_fun3 that does not do GC and allows for better register allocation.\n\n  Own Id: OTP-16712\n\n- The [_process alias_](`e:system:ref_man_processes.md#process-aliases`) feature\n  as outlined by\n  [EEP 53](https://github.com/erlang/eep/blob/master/eeps/eep-0053.md) has been\n  introduced. It is introduced in order to provide a lightweight mechanism that\n  can prevent late replies after timeout or connection loss. For more\n  information, see EEP 53 and the documentation of the new\n  [`alias/1`](`erlang:alias/1`) BIF and the new options to the\n  [`monitor/3`](`erlang:monitor/3`) BIF.\n\n  The `call` operation in the framework used by `gen_server`, `gen_statem`, and\n  `gen_event` has been updated to utilize alias in order to prevent late\n  responses. The `gen_statem` behavior still use a proxy process in the\n  distributed case, since it has always prevented late replies and aliases won't\n  work against pre OTP 24 nodes. The proxy process can be removed in OTP 26.\n\n  The alias feature also made it possible to introduce new functions similar to\n  the [`erpc:receive_response()`](`erpc:receive_response/2`) function in the gen\n  behaviors, so the new functions\n  [`gen_server:receive_response()`](`gen_server:receive_response/2`),\n  [`gen_statem:receive_response()`](`gen_statem:receive_response/2`),\n  [`gen_event:receive_response()`](`gen_event:receive_response/2`) have also\n  been introduced.\n\n  Own Id: OTP-16718 Aux Id: PR-2735\n\n- Accept 64-bit process identifiers from external nodes. This is the first step\n  in an upgrade path toward using 64-bit pids in a future OTP release.\n\n  Own Id: OTP-16720 Aux Id: PR-2680\n\n- The experimental new socket API has been further developed. Some backwards\n  incompatible changes with respect to OTP 23 have been made.\n\n  The control message format has been changed so a decoded value is now in the\n  'value' field instead of in the 'data' field. The 'data' field now always\n  contains binary data.\n\n  Some type names have been changed regarding message headers and control\n  message headers.\n\n  `socket:bind/2` now returns plain `ok` instead of `{ok, Port}` which was only\n  relevant for the `inet` and `inet6` address families and often not\n  interesting. To find out which port was chosen use `socket:sockname/1`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16749 Aux Id: OTP-14601\n\n- Remove old unused `+MYm` and `ERL_MALLOC_LIB` options.\n\n  Own Id: OTP-16788\n\n- Increase timer resolution on windows.\n\n  Own Id: OTP-16814 Aux Id: PR-2704\n\n- The code loader has been rewritten in order to be able to load JIT:ed code. As\n  a consequence of this, it is no longer possible to load HiPE code.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16878\n\n- Add support in the Erlang/OTP build system to generate a compilation database\n  that can be used by third-party tools (such as irony in Emacs) to compile the\n  erts C and C++ source code. Create the database using `make compdb`.\n\n  Own Id: OTP-16881\n\n- The BeamAsm JIT-compiler has been added to Erlang/OTP. The JIT-compiler is\n  enabled by default on most x86 64-bit platforms that have a C++ compiler that\n  can compile C++17. To verify that a JIT enabled emulator is running you can\n  use [`erlang:system_info(emu_flavor)`](`m:erlang#system_info_emu_flavor`).\n\n  For more information see the\n  [internal documentation of BeamAsm in erts](BeamAsm.md).\n\n  Own Id: OTP-16885 Aux Id: PR-2745\n\n- By default all ERTS internal memory allocators based on `alloc_util` will now\n  use their own separate carrier pool for migration of carriers instead of using\n  a node global carrier pool. This was the default behavior between OTP 17 and\n  OTP 21, but changed to use a node global carrier pool as of OTP 22.0. Usage of\n  the node global carrier pool proved troublesome since it had a tendency to\n  spread long lived blocks into allocators with normally short lived blocks\n  causing increased memory fragmentation. The node global carrier pool behavior\n  as well as other behaviors can be configured using the\n  [`+M cp`](erts_alloc.md#M_cp) command line argument.\n\n  Own Id: OTP-16898 Aux Id: OTP-16856\n\n- New functions have been added to the `maps` module: `merge_with/3`,\n  `intersect/2`, `intersect_with/3`, `filtermap/2`, `from_keys/2`, and\n  `maps:foreach/2`.\n\n  `maps:merge_with/3` is the same as `merge/2` but takes an extra fun that is\n  used to combine items with the same key.\n\n  `maps:intersect/2` computes the intersection of two maps.\n\n  `maps:intersect_with/3` is the same as `intersect/2` but takes an extra fun\n  that is used to combine intersecting items.\n\n  `maps:filtermap/2` allows filtering and mapping of a map in a single pass.\n\n  `maps:from_keys/2` constructs a map from a list of keys and a single value and\n  can be used to optimize sets operations such as from_list/1, filter/2,\n  intersection/2, and subtract/2.\n\n  `maps:foreach/2` allows iteration over a map without returning any value.\n\n  Own Id: OTP-16936 Aux Id: ERL-1367\n\n- Change `escript`s to output any errors or warnings to standard error instead\n  of standard out.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16945\n\n- A new erl parameter for specifying a file descriptor with configuration data\n  has been added. This makes it possible to pass the parameter \"-configfd FD\"\n  when executing the erl command. When this option is given, the system will try\n  to read and parse configuration parameters from the file descriptor.\n\n  Own Id: OTP-16952\n\n- The experimental HiPE application has been removed, together with all related\n  functionality in other applications.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16963\n\n- The pretty printer for floating point number have been changed to make it\n  easier to see if the integer part of the number has been rounded. After the\n  change the digit that may have been rounded always appears last or just before\n  the exponent character (e or E). This is accomplished by always printing the\n  number using scientific notation if it is so large that the integer part could\n  be rounded.\n\n  Own Id: OTP-16980 Aux Id: ERL-1308\n\n- The `erlang:monitor_node/2` BIF will now fail with a `notalive` exception if\n  distribution has not been started on the current node; it used to fail with a\n  `badarg` exception.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16987\n\n- Accept references up to a size of 160-bits from remote nodes. This is the\n  first step in an upgrade path toward using references up to 160-bits in a\n  future OTP release.\n\n  Own Id: OTP-17005 Aux Id: OTP-16718\n\n- Accept 64-bit port identifiers from external nodes. This is the first step in\n  an upgrade path toward using 64-bit port identifiers in a future OTP release.\n\n  Own Id: OTP-17007\n\n- One can now pass the ERL_ROOTDIR environment variable to the erl and start\n  scrips. This makes it easier to use Erlang for Android apps. On Android, apps\n  don't control where they will be installed.\n\n  Own Id: OTP-17028\n\n- All long running functions in the maps API are now yielding. In previous\n  releases the functions `maps:from_list/1`, `maps:keys/1` and `maps:values/1`\n  did not yield. This could cause unfair scheduling of processes.\n\n  Own Id: OTP-17057\n\n- `socket:sendfile/2,3,4,5` has been implemented, for platforms that support the\n  underlying socket library call.\n\n  Own Id: OTP-17154 Aux Id: OTP-16749\n\n- The bit matching and construction syntax now supports 16-bit floats (IEEE\n  754-2008).\n\n  Own Id: OTP-17207\n\n- Add [`process_flag(fullsweep_after, N)`](`process_flag/2`) to change\n  `fullsweep_after` value in an already spawned process.\n\n  Own Id: OTP-17285 Aux Id: PR-4651\n\n- The `max_heap_size` error report has been updated to include the message queue\n  size.\n\n  Own Id: OTP-17293 Aux Id: PR-4672\n\n- Introduce new types `t:nonempty_binary/0` and `t:nonempty_bitstring/0`.\n\n  Own Id: OTP-17301 Aux Id: GH-4636\n\n- Optimize updates of large maps with identical keys and values. E.g. in the\n  example below the original `Map` will be reused as the return of the second\n  update.\n\n  `1> Map = LargeMap#{ a => b }.`\n\n  `2> Map#{ a := b }.`\n\n  The same optimization was done for small maps (< 33 keys) in erts-10.4 (OTP\n  22.0).\n\n  Own Id: OTP-17310 Aux Id: PR-4656\n\n- The previously undocumented internal `-no_epmd` option has been made\n  documented and public.\n\n  Own Id: OTP-17341 Aux Id: PR-2945\n\n- Reduce memory carrier super alignment on 64-bit architectures. In practice\n  allows more fine grained control over configuration of memory carrier sizes,\n  from increments of 256kb to 16kb.\n\n  Own Id: OTP-17368","ref":"notes.html#improvements-and-new-features-22"},{"type":"extras","title":"Erts 11.2.2.18 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-18"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix [`list_to_atom/1`](`list_to_atom/1`) for negative code points. Could\n  either return with a positive code point or fail with an incorrect exception.\n\n  Own Id: OTP-18321\n\n- A race condition which was very rarely triggered could cause the signal queue\n  of a process to become inconsistent causing the runtime system to crash.\n\n  Own Id: OTP-18388 Aux Id: OTP-17462, PR-6662\n\n- [`process_info(Pid, status)`](`process_info/2`) when `Pid /= self()` could\n  return an erroneous result.\n\n  Own Id: OTP-18421 Aux Id: PR-6806\n\n- In rare circumstances, when a process exceeded its allowed heap size set by\n  option `max_heap_size`, it would not be killed as it should be, but instead\n  enter a kind of zombie state it would never get out of.\n\n  Own Id: OTP-18463 Aux Id: PR-6858\n\n- Implementations of the [`call()`](driver_entry.md#call) driver callback that\n  returned a faulty encoded result could cause a memory leak and could cause\n  invalid data on the heap of the processes calling `erlang:port_call/3`.\n\n  Own Id: OTP-18525 Aux Id: PR-7049\n\n- If a runtime system which was starting the distribution already had existing\n  pids, ports, or references referring to a node with the same nodename/creation\n  pair that the runtime system was about to use, these already existing pids,\n  ports, or references would not work as expected in various situations after\n  the node had gone alive. This could only occur if the runtime system was\n  communicated such pids, ports, or references prior to the distribution was\n  started. That is, it was extremely unlikely to happen unless the distribution\n  was started dynamically and was even then very unlikely to happen. The runtime\n  system now checks for already existing pids, ports, and references with the\n  same nodename/creation pair that it is about to use. If such are found another\n  creation will be chosen in order to avoid these issues.\n\n  Own Id: OTP-18570 Aux Id: PR-7190","ref":"notes.html#fixed-bugs-and-malfunctions-100"},{"type":"extras","title":"Erts 11.2.2.17 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-17"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [Notifications about available distribution data](`erlang:dist_ctrl_get_data_notification/1`)\n  sent to distribution controller processes could be lost. Distribution\n  controller processes can be used when implementing an alternative distribution\n  carrier. The default distribution over tcp was not effected and the bug was\n  also not present on x86/x86_64 platforms.\n\n  Own Id: OTP-18258 Aux Id: GH-6309, PR-6324","ref":"notes.html#fixed-bugs-and-malfunctions-101"},{"type":"extras","title":"Erts 11.2.2.16 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-16"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Distributed exit signals could be lost under the following conditions:\n\n  - An exit signal from a parent process to a child process was lost if:\n\n    - the parent process terminated before the spawn request that created the\n      child had completed,\n    - the spawn request set up a link between parent and child\n    - the spawn request was distributed, and\n    - the exit reason was larger than one machine word.\n\n  - Loss of a connection over which a not yet completed spawn request was\n    ongoing could cause loss of exit signals. Such loss of exit signals was very\n    rare. Besides the above described connection loss also the following\n    conditions had to be satisfied:\n\n    - The spawn request that was interrupted by the connection loss also had to\n      set up a link between the parent process and the child process.\n    - The parent process that issued the spawn request also had to be\n      terminating while the spawn request was interrupted by the connection\n      loss.\n    - The same parent process also had to have made other spawn requests to\n      other nodes than to the node to which the connection was lost.\n    - These spawn requests to the other nodes also had to set up links.\n    - These spawn requests to the other nodes also had to be not yet completed\n      at the time of the connection loss. That is, the spawn reply from the\n      child process had not yet reached the parent process.\n\n    If all the conditions above were met, exit signals to the children spawned\n    due to the above described spawn requests to other nodes _could_ be lost.\n\n    The above bug also caused a significant memory leak when it was triggered\n    since the destruction of the parent process never completed.\n\n  Own Id: OTP-18164 Aux Id: PR-6114\n\n- A race could cause [`process_info(Pid, message_queue_len)`](`process_info/2`)\n  on other processes to return invalid results.\n\n  Own Id: OTP-18169 Aux Id: PR-6134\n\n- Fixed reduction counting for handling process system tasks.\n\n  Own Id: OTP-18170 Aux Id: PR-6135\n\n- Priority elevation of terminating processes did not work which could cause\n  execution of such processes to be delayed.\n\n  Own Id: OTP-18175 Aux Id: PR-6142\n\n- An unlink operation made by a process that terminated before the unlink\n  operation completed, i.e., before it had received an unlink-ack signal from\n  the linked process, caused an exit signal to erroneously be sent from the\n  terminating process to the process being unlinked. This exit signal would most\n  often be ignored by the receiver, but if the receiver of the exit signal\n  concurrently set up a new link, it could receive the exit signal with the\n  actual exit reason of the terminating process instead of a `noproc` exit\n  reason. It is however very hard to detect that this has happened and has no\n  obvious negative consequences, so it should be considered harmless.\n\n  A distributed unlink-ack signal received by a terminating process was also not\n  properly removed which could cause a minor memory leak.\n\n  Own Id: OTP-18177 Aux Id: PR-6150\n\n- The `erlang:monotonic_time/1`, `erlang:system_time/1`, `erlang:time_offset/1`,\n  and `os:system_time/1` BIFs erroneously failed when passed the argument\n  `native`.\n\n  Own Id: OTP-18197 Aux Id: GH-6165, PR-6213\n\n- Fix writing and reading of more than 2 GB in a single read/write operation on\n  macOS. Before this fix attempting to read/write more than 2GB would result in\n  `{error,einval}`.\n\n  Own Id: OTP-18222 Aux Id: PR-6248 GH-6242","ref":"notes.html#fixed-bugs-and-malfunctions-102"},{"type":"extras","title":"Erts 11.2.2.15 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix faulty distribution encoding of terms with either\n\n  - a fun with bit-string or export-fun in its environment when encoded toward a\n    not yet established (pending) connection\n  - or a fun with a binary/bitstring, in its environment, referring to an\n    off-heap binary (larger than 64 bytes).\n\n  The symptom could be failed decoding on the receiving side leading to aborted\n  connection. Fix OTP-18093 is a workaround for theses bugs that makes the VM\n  accepts such faulty encoded funs.\n\n  The first encoding bug toward pending connection exists only in OTP 23 and 24,\n  but the second one exists also on OTP 25.\n\n  Own Id: OTP-18104 Aux Id: OTP-18093","ref":"notes.html#fixed-bugs-and-malfunctions-103"},{"type":"extras","title":"Erts 11.2.2.14 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Accept funs (NEW_FUN_EXT) with incorrectly encoded size field. This is a\n  workaround for a bug (OTP-18104) existing in OTP 23 and 24 that could cause\n  incorrect size fields in certain cases. The emulator does not use the decoded\n  size field, but `erl_interface` still does and is not helped by this\n  workaround.\n\n  Own Id: OTP-18093 Aux Id: OTP-18104, PR-5987\n\n- The zlib built in to the runtime system has been updated to version 1.2.12.\n  (Note that on most platforms, the platform's own zlib is used.)\n\n  Own Id: OTP-18123 Aux Id: GH-5994\n\n- Fixed emulator crash that could happen during crashdump generation of ETS\n  tables with options `ordered_set` and `{write_concurrency,true}`.\n\n  Own Id: OTP-18144 Aux Id: GH-5981","ref":"notes.html#fixed-bugs-and-malfunctions-104"},{"type":"extras","title":"Erts 11.2.2.13 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Let EPMD tolerate failure when binding to IPv4/IPv6 loopback intefaces in\n  addition to user-supplied addresses via `ERL_EPMD_ADDRESS` or the `-address`\n  option. This can happen, for example, if the host system has ipv6 disabled via\n  the disable_ipv6 sysctl.\n\n  Own Id: OTP-17970 Aux Id: PR-5762\n\n- Fixed a rare bug in [`binary_to_term/1`](`binary_to_term/1`),\n  `enif_make_map_from_arrays`, `erl_drv_send_term`, and Erlang distribution that\n  could crash the emulator.\n\n  Own Id: OTP-18027\n\n- Fixed a rare race in `persistent_term:get/1,2` that could cause it to return\n  the value of another key.\n\n  Own Id: OTP-18065 Aux Id: GH-5908\n\n- Fix bug where the process message queue was left in an inconsistent state when\n  changing from on_heap to off_heap message queue data causing the GC to\n  segfault.\n\n  Own Id: OTP-18075 Aux Id: PR-5927\n\n- Fix functions that convert universal to localtime (such as erlang:localtime/0\n  and erlang:universaltime_to_localtime/1) to fetch the correct localtime if it\n  is changed after the start of the VM.\n\n  Own Id: OTP-18076 Aux Id: ERIERL-802 PR-5905\n\n- Fix memory leak when a process doing a distributed fragmented send is sent an\n  exit signal. Before this fix the receiving node would be left with an\n  incomplete message that would remain until the nodes were disconnected. The\n  bug has existed since Erlang/OTP 21.\n\n  Own Id: OTP-18077 Aux Id: GH-5876 PR-5892","ref":"notes.html#fixed-bugs-and-malfunctions-105"},{"type":"extras","title":"Erts 11.2.2.12 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix Erlang monotonic time on MacOS. Previously used OS monotonic time\n  primitive on MacOS is buggy and will not be used anymore. It has been replaced\n  with usage of another OS monotonic time primitive that does not appear to be\n  buggy.\n\n  Own Id: OTP-17998 Aux Id: PR-5825, GH-5554","ref":"notes.html#fixed-bugs-and-malfunctions-106"},{"type":"extras","title":"Erts 11.2.2.11 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- By default `global` does _not_ take any actions to restore a fully connected\n  network when connections are lost due to network issues. This is problematic\n  for all applications expecting a fully connected network to be provided, such\n  as for example `mnesia`, but also for `global` itself. A network of\n  overlapping partitions might cause the internal state of `global` to become\n  inconsistent. Such an inconsistency can remain even after such partitions have\n  been brought together to form a fully connected network again. The effect on\n  other applications that expects that a fully connected network is maintained\n  may vary, but they might misbehave in very subtle hard to detect ways during\n  such a partitioning.\n\n  In order to prevent such issues, we have introduced a _prevent overlapping\n  partitions_ fix which can be enabled using the\n  [`prevent_overlapping_partitions`](`e:kernel:kernel_app.md#prevent_overlapping_partitions`)\n  `kernel(6)` parameter. When this fix has been enabled, `global` will actively\n  disconnect from nodes that reports that they have lost connections to other\n  nodes. This will cause fully connected partitions to form instead of leaving\n  the network in a state with overlapping partitions. Note that this fix _has_\n  to be enabled on _all_ nodes in the network in order to work properly. Since\n  this quite substantially changes the behavior, this fix is currently disabled\n  by default. Since you might get hard to detect issues without this fix you\n  are, however, _strongly_ advised to enable this fix in order to avoid issues\n  such as the ones described above. As of OTP 25 this fix will become enabled by\n  default.\n\n  Own Id: OTP-17843 Aux Id: ERIERL-732, PR-5611\n\n- Fix memory leak when tracing on running on a process that only handle system\n  tasks or non-message signals (for example process_info requests).\n\n  Own Id: OTP-17904 Aux Id: ERIERL-757","ref":"notes.html#fixed-bugs-and-malfunctions-107"},{"type":"extras","title":"Erts 11.2.2.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix GC emulator crash when `spawn_request` was used when message tracing was\n  enabled.\n\n  Own Id: OTP-17871 Aux Id: PR-5612","ref":"notes.html#fixed-bugs-and-malfunctions-108"},{"type":"extras","title":"Erts 11.2.2.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a memory leak in `file:read_file_info/2` and `file:read_file/1` on\n  Windows.\n\n  Own Id: OTP-17827 Aux Id: GH-5527","ref":"notes.html#fixed-bugs-and-malfunctions-109"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Responsiveness of processes executing on `normal` or `low` priority could\n  suffer due to code purging or literal area removal on systems with a huge\n  amount of processes. This since during these operations all processes on the\n  system were scheduled for execution at once.\n\n  This problem has been fixed by introducing a limit on outstanding purge and\n  copy literal requests in the system. By default this limit is set to twice the\n  amount of schedulers on the system. This will ensure that schedulers will have\n  enough work scheduled to perform these operations as quickly as possible at\n  the same time as other work will be interleaved to a much higher degree.\n  Performance of these operations will however be somewhat degraded due to the\n  overhead of enforcing this limit compared to when using a very large limit.\n\n  This limit can be set by passing the `+zosrl` command line argument to `erl`,\n  or by calling\n  `erlang:system_flag(outstanding_system_requests_limit, NewLimit)`.\n\n  Own Id: OTP-17796 Aux Id: ERIERL-729, PR-5473","ref":"notes.html#improvements-and-new-features-23"},{"type":"extras","title":"Erts 11.2.2.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The runtime system could call `select()` with a too large timeout value when\n  executing on MacOS. This could in turn cause the runtime system to crash.\n\n  Own Id: OTP-17735 Aux Id: GH-5339\n\n- Certain distributed signals that for various reasons must to be forced into\n  the distribution buffer even when it is full would instead be lost if the\n  distribution buffer was full when sent. The effected signals:\n\n  - `EXIT` signals with exit reasons of one word size.\n  - `DOWN` signals with exit reasons of one word size.\n  - `demonitor` signals from a terminating process.\n  - `unlink_ack` signals on OTP 23 and 24.\n  - `spawn_reply` signals on OTP 23 and 24.\n\n  Own Id: OTP-17737 Aux Id: GH-5346, GH-4989","ref":"notes.html#fixed-bugs-and-malfunctions-110"},{"type":"extras","title":"Erts 11.2.2.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A call to [`process_info(Pid, status)`](`process_info/2`) could erroneously\n  report the status `running` when it should have reported `waiting`. This\n  occurred when the calling process was executing on a higher priority than the\n  process being inspected. This bug has been present since OTP 21.0 (erts\n  version 10.0).\n\n  Own Id: OTP-17628\n\n- A race between an exiting port and handling of simultaneously received signals\n  to that port could cause a runtime system crash. The effected signals are\n  `link`, `monitor` and `demonitor`. On OTP 22 a similar race could also cause a\n  memory leak when receiving an `unlink` signal.\n\n  Own Id: OTP-17642 Aux Id: PR-5248\n\n- The message queue of a process entered an inconsistent state after a `receive`\n  expression with an invalid timeout value was executed. If the exception raised\n  due to the invalid timeout value was caught, the following `receive`\n  expression executed by the process could fail to match messages already\n  present in the message queue.\n\n  On OTP 24 this could also cause the whole runtime system to crash.\n\n  Own Id: OTP-17651 Aux Id: GH-5235, PR-5244\n\n- Sending a `Port ! {PortOwner, close}` signal from a process other than the\n  port owner could erroneously trigger a `badsig` exit signal being sent to the\n  port owner process even though the correct `PortOwner` had been passed in the\n  signal.\n\n  Own Id: OTP-17665 Aux Id: PR-5248\n\n- This fixes a bug in `erts_factory_undo` that caused the heap to not be reset\n  correctly. The `erts_factory_undo` function is, for example, called when a\n  [`binary_to_term/1`](`binary_to_term/1`) call fails to reset the heap to its\n  state before the [`binary_to_term/1`](`binary_to_term/1`) call. This can cause\n  the heap to contain invalid terms which potentially can cause issues (e.g.,\n  crashes) when the whole heap is scanned.\n\n  Own Id: OTP-17677\n\n- Fix bug in `persistent_term` when a key-value pair contains a magic reference\n  that is referred more than once. Magic references are NIF resources or\n  returned from BIFs like `ets:new`, `atomics:new`. The bug could cause the\n  memory of the referred resource to be prematurely deallocated.\n\n  The bug also apply to magic references in message passing on a runtime built\n  with configure option `--enable-sharing-preserving`.\n\n  Bug exist for 64-bit since OTP-24.0 and for 32-bit since OTP-20.0.\n\n  Own Id: OTP-17700 Aux Id: GH-5271, PR-5273","ref":"notes.html#fixed-bugs-and-malfunctions-111"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The python scripts that existed in\n  erts/lib_src/yielding_c_fun/lib/tiny_regex_c/scripts had a license that was\n  incompatible with Erlang/OTP's license. This ticket removes these scripts that\n  were not used by us.\n\n  Own Id: OTP-17658","ref":"notes.html#improvements-and-new-features-24"},{"type":"extras","title":"Erts 11.2.2.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Parsing of the result value in the native DNS resolver has been made more\n  defensive against incorrect results.\n\n  Own Id: OTP-17578 Aux Id: ERIERL-683\n\n- On 32-bit computers, `binary_to_term/1,2` is now more resilient against\n  corrupted binaries containing maps in the external format.\n\n  Own Id: OTP-17604","ref":"notes.html#fixed-bugs-and-malfunctions-112"},{"type":"extras","title":"Erts 11.2.2.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix buffer overrun problem in the tty driver. The problem happens on some\n  platforms when using the CTRL+R functionality of newshell with very long\n  strings in the history.\n\n  Own Id: OTP-17560 Aux Id: GH-5116\n\n- Fix race-condition that could cause a crash when tracing scheduling or garbage\n  collections on a process that was running on a dirty scheduler.\n\n  Own Id: OTP-17568 Aux Id: PR-4940\n\n- Fix rare bug where re:run would crash/return invalid results when given a\n  subbinary as subject.\n\n  This bug has existed since Erlang/OTP 20.0.\n\n  Own Id: OTP-17585 Aux Id: GH-5150\n\n- `binary_to_term/1,2` is now more resilient against corrupted binaries\n  containing maps in the external format.\n\n  Own Id: OTP-17594","ref":"notes.html#fixed-bugs-and-malfunctions-113"},{"type":"extras","title":"Erts 11.2.2.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Microstate accounting (msacc) and `os:perf_counter()` unintentionally used\n  system time instead of monotonic time for time measurements on a lot of\n  systems. These systems were all non x86/x86_64 systems or x86/x86_64 systems\n  without a reliable and constant rdtsc instruction.\n\n  The lock counting (lcnt) built runtime system also unintentionally used system\n  time instead of monotonic time for time measurements on all systems.\n\n  Own Id: OTP-17493\n\n- Simultaneous calls to `erlang:system_flag(schedulers_online, _)` could cause\n  callers to end up in a suspended state forever.\n\n  Own Id: OTP-17500 Aux Id: GH-4809\n\n- Fix rare race bug in memory management of distribution entries. Have been seen\n  to cause VM crash when massive number of repeated concurrent failing\n  connection attempts.\n\n  Own Id: OTP-17513 Aux Id: GH-4964, PR-5015","ref":"notes.html#fixed-bugs-and-malfunctions-114"},{"type":"extras","title":"Erts 11.2.2.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A call to `erlang:cancel_timer(_, [{info, false}])` could cause the calling\n  process to block forever in the call. Note that only the synchronous version\n  of the call (that is, the `async` option is `false`) in combination with the\n  `info` option set to `false` was effected by this bug.\n\n  Own Id: OTP-17472 Aux Id: PR-4932","ref":"notes.html#fixed-bugs-and-malfunctions-115"},{"type":"extras","title":"Erts 11.2.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A call to `port_command()` could cause a scheduler to end up in an eternal\n  loop if the port was busy and the calling process had incoming signals at the\n  time of the call. This bug was introduced in OTP 23.3.2 (ERTS version 11.2.1),\n  OTP 22.3.4.18 (ERTS version 10.7.2.10), and OTP 21.3.8.23 (ERTS version\n  10.3.5.18).\n\n  Own Id: OTP-17448 Aux Id: GH-4898, PR-4903, OTP-17291\n\n- Dirty execution of a process in combination with an unlink signal from a port\n  to the process could cause the signal queue of the process to enter into an\n  inconsistent state. The result of the inconsistency typically caused a crash\n  of the runtime system. This bug was introduced in OTP 23.3 (ERTS version\n  11.2).\n\n  Own Id: OTP-17462 Aux Id: GH-4885, PR-4914, OTP-17127","ref":"notes.html#fixed-bugs-and-malfunctions-116"},{"type":"extras","title":"Erts 11.2.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Commit of generated `configure` script.\n\n  Own Id: OTP-17420 Aux Id: OTP-17398, GH-4821","ref":"notes.html#fixed-bugs-and-malfunctions-117"},{"type":"extras","title":"Erts 11.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug in match spec compilator seen to cause a stack overflow crash on debug\n  VM for certain match specs. Could potentially cause problems for standard VM,\n  but has not been verified. Match specs are used by `ets:match/select`\n  functions and `erlang:trace_pattern`.\n\n  Own Id: OTP-17379 Aux Id: PR-4804","ref":"notes.html#fixed-bugs-and-malfunctions-118"},{"type":"extras","title":"Erts 11.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The following signals could pass before other signals from the same sender to\n  the same receiver. That is, these signals could arrive too early.\n\n  - `garbage-collect` request. Sent from one process to another using one of the\n    `garbage_collect/0` BIFs.\n  - `check-process-code` request. Sent from one process to another using one of\n    the `check_process_code()` BIFs.\n  - `is-process-alive` reply. Sent as a response to a process calling the\n    `is_process_alive()` BIF.\n  - `process-info` reply. Sent as a response to a process calling one of the\n    `process_info()` BIFs.\n  - `port-command` reply. Sent as a response to a process calling one of the\n    `port_command()` BIFs.\n  - `port-connect` reply. Sent as a response to a process calling the\n    `port_connect()` BIF.\n  - `port-close` reply. Sent as a response to a process calling the\n    `port_close()` BIF.\n  - `port-control` reply. Sent as a response to a process calling the\n    `port_control()` BIF.\n  - `port-call` reply. Sent as a response to a process calling the `port_call()`\n    BIF.\n  - `port-info` reply. Sent as a response to a process calling one of the\n    `port_info()` BIFs.\n\n  Own Id: OTP-17291\n\n- Fix bug in `persistent_term:get/0` and `info/0` that could cause VM crash in\n  rare cases. Bug exists since OTP 23.0.\n\n  Own Id: OTP-17298\n\n- Fixed a bug in `zlib` where decompression would crash with `data_error` on\n  some valid inputs.\n\n  Own Id: OTP-17299 Aux Id: GH-4710\n\n- A garbage collection of a literal area missed messages that entirely consisted\n  of a term in a literal area. This could in turn lead to a crash of the runtime\n  system.\n\n  Own Id: OTP-17307\n\n- A call to [`process_flag(message_queue_data, off_heap)`](`process_flag/2`)\n  could cause a crash of the runtime system when sequential tracing was enabled.\n\n  Own Id: OTP-17349","ref":"notes.html#fixed-bugs-and-malfunctions-119"},{"type":"extras","title":"Erts 11.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix memory leak of about 6 words when `erlang:process_flag/3` is called with a\n  pid of an already dead process. Bug exists since OTP-21.0.\n\n  Own Id: OTP-17081 Aux Id: PR-2930\n\n- Fixed small memory leak in `erl_drv_send_term` and `erl_drv_output_term` when\n  failing due to the term being invalid.\n\n  Own Id: OTP-17089 Aux Id: PR-2934\n\n- The DTrace/SystemTap `process_heap_grow` probe is now called with valid the\n  heap and stack pointers for the process in question.\n\n  Own Id: OTP-17096 Aux Id: PR-2932\n\n- Fixed a performance issue in memory allocation for Linux kernels that didn't\n  support `MADV_FREE`.\n\n  Own Id: OTP-17124\n\n- A [new link protocol](erl_dist_protocol.md#new_link_protocol) has been\n  introduced which prevents links from ending up in an inconsistent state where\n  one participant considers itself linked while the other doesn't. This bug has\n  always existed in the distributed case, but has since OTP 21 also existed in\n  the node local case since the distributed link protocol then was adopted also\n  for node local links. The bug could, however, only trigger if both\n  participants operated on the link simultaneously.\n\n  Own Id: OTP-17127\n\n- Fix memory leak when receiving sigchld from port program to already dead port.\n\n  Own Id: OTP-17163\n\n- Fix bug where complex seq_trace tokens (that is lists, tuples, maps etc) could\n  becomes corrupted by the GC. The bug was introduced in OTP-21.\n\n  Own Id: OTP-17209 Aux Id: PR-3039\n\n- Fixed WSLPATH environment variable addition to PATH on windows, the last\n  character was lost.\n\n  Own Id: OTP-17229\n\n- Fixed a bug in the timer implementation which could cause timers that were set\n  to more than 37.25 hours in the future to be delayed. This could occur if\n  there were multiple timers scheduled to be triggered very close in time, but\n  still at different times, and the scheduler thread handling the timers was not\n  able to handle them quickly enough. Delayed timers were in this case triggered\n  when another unrelated timer was triggered.\n\n  Own Id: OTP-17253\n\n- Fixed small memory leak in `erlang:trace/3` if option `{tracer,_}` is included\n  and the option list is invalid or the call races with a concurrent trace or\n  code change operation.\n\n  Own Id: OTP-17265 Aux Id: PR-4596\n\n- Fix configure check for `inet_pton` on 32-bit windows. The failure of this\n  check would cause epmd to be built without ipv6 support.\n\n  Own Id: OTP-17283","ref":"notes.html#fixed-bugs-and-malfunctions-120"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Various address sanitizer support.\n\n  Own Id: OTP-16959 Aux Id: PR-2965\n\n- The emulator will now honor `cgroup2` CPU quotas.\n\n  Own Id: OTP-17002\n\n- Improved memory barrier usage on ARMv8 hardware, and specifically on Apple\n  silicon.\n\n  Own Id: OTP-17195 Aux Id: PR-4505, PR-4538\n\n- Improved memory barrier usage on 64-bit POWER hardware.\n\n  Own Id: OTP-17200 Aux Id: PR-4510\n\n- Fix a file descriptor leak when using sendfile and the remote side closes the\n  connection. This bug has been present since OTP-21.0.\n\n  Own Id: OTP-17244\n\n- Refinement of the documentation of the `message_queue_data` process flag.\n\n  Own Id: OTP-17252 Aux Id: PR-4568","ref":"notes.html#improvements-and-new-features-25"},{"type":"extras","title":"Erts 11.1.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug that could cause some work scheduled for execution on scheduler\n  threads to be delayed until other similar work appeared. Beside delaying\n  various cleanup of internal data structures also the following could be\n  delayed:\n\n  - Termination of a distribution controller process\n  - Disabling of the distribution on a node\n  - Gathering of memory allocator information using the `instrument` module\n  - Enabling, disabling, and gathering of `msacc` information\n  - Delivery of `'CHANGE'` messages when time offset is monitored\n  - A call to `erlang:cancel_timer()`\n  - A call to `erlang:read_timer()`\n  - A call to `erlang:statistics(io | garbage_collection | scheduler_wall_time)`\n  - A call to `ets:all()`\n  - A call to `erlang:memory()`\n  - A call to `erlang:system_info({allocator | allocator_sizes, _})`\n  - A call to `erlang:trace_delivered()`\n\n  The bug existed on runtime systems running on all types of hardware except for\n  x86/x86_64.\n\n  Own Id: OTP-17185","ref":"notes.html#fixed-bugs-and-malfunctions-121"},{"type":"extras","title":"Erts 11.1.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-7"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Make windows installer remove write access rights for non admin users when\n  installing to a non default directory. Reduces the risk for DLL sideloading,\n  but the user should always be aware of the access rights for the installation.\n\n  Own Id: OTP-17097","ref":"notes.html#improvements-and-new-features-26"},{"type":"extras","title":"Erts 11.1.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The `suspend_process()` and `resume_process()` BIFs did not check their\n  arguments properly which could cause an emulator crash.\n\n  Own Id: OTP-17080\n\n- The runtime system would get into an infinite loop if the runtime system was\n  started with more than 1023 file descriptors already open.\n\n  Own Id: OTP-17088 Aux Id: ERIERL-580","ref":"notes.html#fixed-bugs-and-malfunctions-122"},{"type":"extras","title":"Erts 11.1.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix emulator crash when sending small bit-strings over Erlang distribution\n  while the connection is being setup.\n\n  The fault was introduced in OTP-23.0\n\n  Own Id: OTP-17083 Aux Id: ERIERL-572","ref":"notes.html#fixed-bugs-and-malfunctions-123"},{"type":"extras","title":"Erts 11.1.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug which could cause VM crash when a NIF is loaded at the same time as\n  the Erlang implementation of the NIF is called. Bug exists since OTP 23.0.\n\n  Own Id: OTP-16859\n\n- Fixed `enif_make_map_*` functions in debug build when given environment from\n  `enif_alloc_env`.\n\n  Own Id: OTP-16863 Aux Id: ERL-1352\n\n- Fixed broken configuration option `--disable-pie`.\n\n  Own Id: OTP-16864\n\n- Fixed rare distribution bug in race between received signal\n  (link/monitor/spawn_request/spawn_reply) and disconnection. Symptom: VM crash.\n  Since: OTP 21.0.\n\n  Own Id: OTP-16869 Aux Id: ERL-1337\n\n- Fixed a performance issue when extremely many items were stored in the process\n  dictionary. (Fixing this bug also eliminates a compiler warning emitted by the\n  latest version of Clang.)\n\n  Own Id: OTP-16888\n\n- Remove `-ftree-copyrename` from flags passed to compiler when building erts.\n  The flag is not used by modern gcc's and is not supported by clang.\n\n  Own Id: OTP-16894\n\n- Modules using complicated nested binary comprehensions could fail to load.\n\n  Own Id: OTP-16899\n\n- Fixed a race in `file:read_file/1` were an incomplete file could be returned\n  if another OS process swapped the file out while reading.\n\n  Own Id: OTP-16948 Aux Id: PR-2792\n\n- The call [`list_to_integer(\"10\", true)`](`list_to_integer/2`) would return `4`\n  instead of raising an exception. Certain other atoms would also be interpreted\n  as a number base.\n\n  Own Id: OTP-17030\n\n- On macOS 11 (Big Sur), erl would not start if the maximum number of file\n  descriptors were unlimited (`ulimit -n unlimited`).\n\n  Own Id: OTP-17055 Aux Id: ERL-1417","ref":"notes.html#fixed-bugs-and-malfunctions-124"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add manifest to all executables and dynamic libraries.\n\n  Own Id: OTP-17067 Aux Id: PR-2907","ref":"notes.html#improvements-and-new-features-27"},{"type":"extras","title":"Erts 11.1.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a crash when exceptions were thrown during call time tracing.\n\n  Own Id: OTP-16994","ref":"notes.html#fixed-bugs-and-malfunctions-125"},{"type":"extras","title":"Erts 11.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bugs causing issues when enabling the ERTS internal allocators on a\n  system built with the undocumented and unsupported `SMALL_MEMORY` feature.\n\n  Own Id: OTP-16939\n\n- The inet driver used to use 16 as maximum elements in an I/O vector passed to\n  `writev()` (and `WSASend()` on Windows). When the data to send contained lots\n  of elements, this caused a performance degradation since repeated calls to\n  `writev()` had to be made to a much larger extent. The inet driver now looks\n  up actual maximum amount of elements that can be used on the system, instead\n  of just assuming 16. On most systems this will result in a maximum amount of\n  I/O vector elements of 1024.\n\n  As of OTP 23.0 the term encoding of signals to send over the distribution are\n  encoded into I/O vectors of buffers instead of into a single buffer. Reference\n  counted binaries are referred to directly from the I/O vector instead of being\n  copied into the single buffer. That is, Erlang signals containing huge amounts\n  of reference counted binaries was effected by this performance degradation.\n\n  Own Id: OTP-16955 Aux Id: ERL-1343, OTP-15618\n\n- In the distributed case, a faulty `reply` option in a call to the\n  `spawn_request()` BIF erroneously caused a `badarg` exception instead of a\n  `badopt` error message reply.\n\n  Own Id: OTP-16991 Aux Id: OTP-15251","ref":"notes.html#fixed-bugs-and-malfunctions-126"},{"type":"extras","title":"Erts 11.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- inet:setopts(\\[\\{active,once\\}]) wakes up IO polling thread unnecessarily,\n  leading to lock contention and visibly higher CPU utilization.\n\n  Own Id: OTP-16847 Aux Id: ERL-1301\n\n- Two bugs in the ERTS internal thread wakeup functionality have been fixed.\n  These bugs mainly hit when all threads in the system tried to go to sleep.\n  When the bugs were triggered, certain operations were delayed until a thread\n  woke up due to some other reason. Most important operations effected were code\n  loading, persistent term updates, and memory deallocation.\n\n  Own Id: OTP-16870\n\n- Fixed bug in `ets:select_replace/2` on `compressed` tables that could produce\n  faulty results or VM crash. Bug exists since OTP 20.\n\n  Own Id: OTP-16874 Aux Id: ERL-1356, PR-2763\n\n- When compiling Erlang/OTP on macOS using Xcode 12, the performance of the BEAM\n  interpreter would be degraded.\n\n  Own Id: OTP-16892","ref":"notes.html#fixed-bugs-and-malfunctions-127"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- As of OTP 22, the allocator specific memory carrier pools were replaced by a\n  node global carrier pool. This unfortunately caused substantial memory\n  fragmentation in some cases due to long lived data being spread into carriers\n  used by allocators mainly handling short lived data.\n\n  A new command line argument `+M cp` has been introduced with which one can\n  enable the old behavior as well as configuring other behaviors for the carrier\n  pools. In order to configure the old behavior, with allocator specific carrier\n  pools for all allocators, pass `+Mucp :` (including the colon character) as a\n  command line argument to `erl` when starting the Erlang system.\n\n  The default configuration for carrier pools will be changed to `+Mucp :` some\n  time in the future, but not in this patch.\n\n  Own Id: OTP-16856","ref":"notes.html#improvements-and-new-features-28"},{"type":"extras","title":"Erts 11.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Update the documentation of the abstract format to use `ANNO` instead of\n  `LINE`.\n\n  Own Id: OTP-16625 Aux Id: PR-2609\n\n- The emulator will no longer revert to the default number of schedulers when\n  running under a CPU quota lower than 1 CPU.\n\n  Own Id: OTP-16710 Aux Id: ERL-1280\n\n- Fixed a problem with crash dumps. When a process that contained reference to\n  literals internally created by the runtime system (such as the tuple returned\n  by `os:type/0`), the literal would not be included in the crash dump and the\n  crashdump viewer would complain about the heap being incomplete.\n\n  Own Id: OTP-16713\n\n- Fix configure detection of PGO for clang.\n\n  Own Id: OTP-16738\n\n- The to_erl program has been fixed to correctly interpret newline as only\n  newline and not newline+return.\n\n  This bug would cause the terminal to behave strangely when using lines longer\n  than the terminal size.\n\n  Own Id: OTP-16741\n\n- A race condition when changing process priority by calling\n  [`process_flag(priority, Prio)`](`process_flag/2`) could cause elevation of\n  priority for a system task to be ignored. This bug hit if the system task was\n  scheduled on the process calling `process_flag()` at the same time as the\n  priority was changed. The bug is quite harmless and should hit very seldom if\n  ever.\n\n  Own Id: OTP-16770\n\n- Adjust `/bin/sh` to `/system/bin/sh` in scripts when installing on Android.\n\n  Own Id: OTP-16833 Aux Id: PR-2729\n\n- In rare circumstances, when loading a BEAM file generated by an alternative\n  code generator (not the Erlang compiler in OTP) or from handwritten or patched\n  BEAM code, the loader could do an unsafe optimization.\n\n  Own Id: OTP-16850 Aux Id: ERL-1344\n\n- A memory and file descriptor leak in socket has been fixed. (When a newly\n  opened socket that had not entered the fd into the VM's poll set (neither\n  received, sent, accepted nor connected) was abandoned without closing (process\n  died), after assigning a different controlling process, then a memory block\n  and the file descriptor could be leaked.)\n\n  Own Id: OTP-16857\n\n- The documentation of [`statistics(run_queue)`](`statistics/1`) erroneously\n  stated that it returns the total length of all normal run queues when it is\n  the total length of all normal and dirty CPU run queues that is returned. The\n  documentation has been updated to reflect the actual behavior.\n\n  Own Id: OTP-16866 Aux Id: ERL-1355","ref":"notes.html#fixed-bugs-and-malfunctions-128"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Changes in order to build on the Haiku operating system.\n\n  Thanks to Calvin Buckley\n\n  Own Id: OTP-16707 Aux Id: PR-2638\n\n- When building the inet driver on Windows, there where many compiler warnings\n  regarding type casting (used when calling the debug macro). This has now been\n  resolved.\n\n  Own Id: OTP-16715\n\n- Make (use of) the socket registry optional (still enabled by default). Its now\n  possible to build OTP with the socket registry turned off, turn it off by\n  setting an environment variable and controlling in runtime (via function calls\n  and arguments when creating sockets).\n\n  Own Id: OTP-16763\n\n- Change default filename encoding on android to UTF-8.\n\n  Own Id: OTP-16821 Aux Id: PR-2733\n\n- Clarification of the format of the atom cache header used by the distribution.\n\n  Own Id: OTP-16848 Aux Id: PR-2737","ref":"notes.html#improvements-and-new-features-29"},{"type":"extras","title":"Erts 11.0.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-0-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The ERTS internal I/O poll implementation could get into an inconsistent state\n  causing input events to be ignored.\n\n  Own Id: OTP-16780 Aux Id: PR-2701","ref":"notes.html#fixed-bugs-and-malfunctions-129"},{"type":"extras","title":"Erts 11.0.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-0-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in `erlang:load_nif/2` that could cause it to throw `badarg`\n  exception if a concurrent code change operation was in progress. Bug existed\n  since OTP 23.0.\n\n  Own Id: OTP-16704 Aux Id: ERL-1273, PR-16704\n\n- Minor fix of debug compiled VM.\n\n  Own Id: OTP-16717\n\n- An unintentional reuse of an already used emulator internal event object could\n  cause a wakeup signal to a thread to be lost. In worst case this could cause\n  the runtime system to hang. This hang was however quite rare.\n\n  Own Id: OTP-16766 Aux Id: ERL-1304\n\n- NIF threads and driver threads on non-Linux systems leaked internal resources\n  when terminating. On Windows these resources were one event per thread. On\n  most other systems one mutex and one condition variable per thread. On these\n  other systems that also lacked `pthread_cond_timedwait()` also a pipe with its\n  file descriptors was leaked.\n\n  Own Id: OTP-16772 Aux Id: ERL-1304","ref":"notes.html#fixed-bugs-and-malfunctions-130"},{"type":"extras","title":"Erts 11.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug when sending an export fun (eg `lists:reverse/1`) on a not yet\n  established connection. It could cause VM crash. Bug exists since OTP 23.0.\n\n  Own Id: OTP-16693 Aux Id: ERL-1254, PR-2640","ref":"notes.html#fixed-bugs-and-malfunctions-131"},{"type":"extras","title":"Erts 11.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The functionality utilized by BIFs for temporary disabling of garbage\n  collection while yielding could cause system task queues to become\n  inconsistent on a process executing such a BIF. Process system tasks are for\n  example utilized when purging code, garbage collecting literal data, and when\n  issuing an ordinary garbage collection from another process.\n\n  The bug does not trigger frequently. Multiple code purges in direct sequence\n  makes it more likely that this bug is triggered. In the cases observed, this\n  has resulted in a hanging code purge operation.\n\n  Own Id: OTP-16639 Aux Id: ERL-1236\n\n- SCTP and UDP recv/2,3 hangs indefinitely if socket is closed while recv is\n  called (socket in passive mode).\n\n  Own Id: OTP-16654 Aux Id: ERL-1242","ref":"notes.html#fixed-bugs-and-malfunctions-132"},{"type":"extras","title":"Erts 11.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-11-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- BIFs now behave like ordinary functions with regard to tracing, allowing\n  `call_count` tracing and fixing a few bugs where return trace messages were\n  lost when BIFs tail-called themselves or other functions (\"trapping\").\n\n  Own Id: OTP-14734 Aux Id: ERL-496\n\n- Fix various compiler warnings on 64-bit Windows.\n\n  Own Id: OTP-15800\n\n- `erlang:fun_info(fun foo/1, name/1)` used to return a function name based on\n  the name of the function that `fun foo/1` was used in. The name returned is\n  now `-fun.foo/1-`.\n\n  Own Id: OTP-15837\n\n- `file:allocate/3` will now update the file size on all platforms.\n\n  Own Id: OTP-16155 Aux Id: PR-2408\n\n- `erlang:decode_packet` with type set to `httph` no longer accepts http headers\n  that have whitespaces in between the header name and the colon. That is:\n\n  `Content-Type : text/html`\n\n  is no longer allowed. This has been changed to conform with RFC 7230 and thus\n  protect against http desync attacks.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16168 Aux Id: ERL-1053\n\n- Fix the quoting rules in `erl -args_file`, `ERL_FLAGS`, `ERL_AFLAGS` and\n  `ERL_ZFLAGS` to work as unix sh quoting.\n\n  This bug fix can make previous configuration options to `erl` passed through\n  `ERL_FLAGS`, `ERL_AFLAGS`, `ERL_ZFLAGS` or `-args_file` not be interpreted in\n  the same way as before the fix.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16244 Aux Id: ERL-1051\n\n- Fix the Erlang distribution to handle the scenario when a node connects that\n  can handle message fragmentation but can not handle the atom cache. This bug\n  only affects users that have implemented a custom distribution carrier. It has\n  been present since OTP-21.\n\n  The `DFLAG_FRAGMENT` distribution flag was added to the set of flags that can\n  be rejected by a distribution implementation.\n\n  Own Id: OTP-16284\n\n- Compiling a match specification with excessive nesting caused the runtime\n  system to crash due to scheduler stack exhaustion. Instead of crashing the\n  runtime system, effected functions will now raise a `system_limit` error\n  exception in this situation.\n\n  Own Id: OTP-16431 Aux Id: ERL-592\n\n- Fixed a bug that prevented Erlang from being started on Windows if it were\n  installed on certain paths.\n\n  Own Id: OTP-16478 Aux Id: ERL-1115\n\n- Fix bug on Windows causing bad performance when standard input is closed,\n  especially if the VM is only assigned one CPU core. Could be provoked for\n  example by starting erl or escript via function `os:cmd/1`. Could be avoided\n  with command line option `-noinput`.\n\n  The bad performance was caused by an io thread spinning indefinitely.\n\n  Own Id: OTP-16521 Aux Id: ERL-716\n\n- Fixed a bug on Unix platforms that would cause `file:read_file_info/1` to\n  return incorrect results if the emulator's effective user or group id differed\n  from its actual ones.\n\n  Own Id: OTP-16571\n\n- socket: Compile problems on Android when PACKET_FASTROUTE and PACKET_USER are\n  both defined and has the same value. Use of PACKET_FASTROUTE has been removed\n  as it may be unused and also only for none user-land.\n\n  Own Id: OTP-16576 Aux Id: ERL-1208\n\n- Fixed bug in erl_crash.dump generation that could cause a SEGV core dump if a\n  recently cancelled timer was found.\n\n  Own Id: OTP-16596 Aux Id: ERL-1105, PR-2606","ref":"notes.html#fixed-bugs-and-malfunctions-133"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Improved concurrency of `erlang:load_nif/2` as it does no longer block other\n  schedulers from executing during initial load of a NIF library.\n\n  Own Id: OTP-10278\n\n- EEP-52 has been implemented.\n\n  In binary matching, the size of the segment to be matched is now allowed to be\n  a guard expression, and similarly in map matching the keys can now be guard\n  expressions. See the Erlang Reference Manual and Programming Examples for more\n  details.\n\n  Language compilers or code generators that generate Core Erlang code may need\n  to be updated to be compatible with the compiler in OTP 23. For more details,\n  see the section Backwards Compatibility in\n  [EEP 52](http://erlang.org/eeps/eep-0052.html).\n\n  Own Id: OTP-14708\n\n- Internally in BEAM, handling of continuation pointers has been simplified.\n  This change is not user-visible, except when examining a process stack in the\n  crashdump viewer. The continuation pointer for a function will now be stored\n  below the y(0) for that function.\n\n  Own Id: OTP-15077\n\n- `seq_trace` tokens are now propagated to spawned processes.\n\n  Own Id: OTP-15232 Aux Id: ERL-700\n\n- Improvements of distributed spawn operations. These include both scalability\n  and performance improvements as well as new functionality.\n\n  New functionality:\n\n  - A distributed [`spawn_monitor()`](`erlang:spawn_monitor/4`) BIF.\n  - Support for `monitor` option in the distributed\n    [`spawn_opt()`](`erlang:spawn_opt/5`) BIF.\n  - New [`spawn_request()`](`erlang:spawn_request/5`) BIFs for asynchronous\n    spawn of processes. `spawn_request()` supports all options that\n    `spawn_opt()` support plus a few more.\n\n  Own Id: OTP-15251\n\n- Make `ets:insert/2` and `ets:insert_new/2` yield scheduler execution on long\n  lists of records to insert.\n\n  Own Id: OTP-15517 Aux Id: ERL-560\n\n- Increased size of node incarnation numbers (aka \"creation\"), from 2 bits to 32\n  bits. This will reduce the risk of pids/ports/refs, from different node\n  incarnation with the same name, being mixed up.\n\n  Own Id: OTP-15603\n\n- The runtime system can now encode Erlang terms to the Erlang external term\n  format as I/O vectors. The main benefit of this is that reference counted\n  binaries can be referred to directly instead of copied into a new binary.\n\n  The default Erlang distribution over TCP will always utilize this. Alternate\n  distribution implementations utilizing a port as distribution controller will\n  utilize this if the driver implements the [`outputv`](driver_entry.md#outputv)\n  callback. Alternate Erlang distribution implementations utilizing a process as\n  distribution controller will utilize this if I/O vectors are utilized by the\n  functionality that processes the data returned from\n  [`erlang:dist_ctrl_get_data()`](`erlang:dist_ctrl_get_data/1`).\n\n  The return type for data returned by\n  [`erlang:dist_ctrl_get_data()`](`erlang:dist_ctrl_get_data/1`) has been\n  changed from `t:iodata/0` to `iovec()`. Note that `iovec()` data is valid\n  `t:iodata/0` so old implementations using `erlang:dist_ctrl_get_data()` do not\n  need to be changed, but may benefit from being changed depending on usage\n  scenario.\n\n  The new BIFs [`term_to_iovec/1`](`erlang:term_to_iovec/1`) and\n  [`term_to_iovec/2`](`erlang:term_to_iovec/2`) have been introduced. These work\n  exactly as `term_to_binary()` with the corresponding arity except the return\n  type.\n\n  Own Id: OTP-15618\n\n- Improved ETS scalability of concurrent calls that change the size of a table,\n  like `ets:insert/2` and `ets:delete/2`.\n\n  This performance feature was implemented for `ordered_set` in OTP 22.0 and\n  does now apply for all ETS table types.\n\n  The improved scalability may come at the cost of longer latency of\n  `ets:info(T,size)` and `ets:info(T,memory)`. A new table option\n  `decentralized_counters` has therefore been added. It is default `true` for\n  `ordered_set` with `write_concurrency` enabled and default `false` for all\n  other table types.\n\n  Own Id: OTP-15744 Aux Id: OTP-15623, PR-2229\n\n- Directories can now be opened by `file:open/2` when passing the `directory`\n  option.\n\n  Own Id: OTP-15835 Aux Id: PR-2212\n\n- Add Hygon Dhyana as known processor to enable support for atomic operations.\n\n  Own Id: OTP-15840\n\n- Make `erlang:phash2` functions consume reductions proportional to the size of\n  the input term and yield scheduler when reductions are depleted.\n\n  Own Id: OTP-15842 Aux Id: PR-2182\n\n- Fix various build issues when compiling Erlang/OTP to the IBM AIX platform.\n\n  Own Id: OTP-15866 Aux Id: PR-2110\n\n- Add configure options `--enable-pie` and `--disable-pie` to control the build\n  of position independent executables.\n\n  Own Id: OTP-15868\n\n- `file:read_file_info/2` can now be used on opened files and directories.\n\n  Own Id: OTP-15956 Aux Id: PR-2231\n\n- Add arity-1 versions of `atom_to_binary`, `binary_to_atom` and\n  `binary_to_existing_atom`, all with `utf8` as default encoding.\n\n  Own Id: OTP-15995 Aux Id: PR-2358\n\n- Optimized the erts internal hash table implementation for faster lookups. The\n  internal hash is used for things like; the process registry, executing\n  erlang:apply/2, executing M:func(test), and more.\n\n  Own Id: OTP-16014 Aux Id: PR-2345\n\n- CPU quotas are now taken into account when deciding the default number of\n  online schedulers, improving performance in container environments where\n  quotas are applied, such as `docker` with the `--cpus` flag.\n\n  Own Id: OTP-16105 Aux Id: ERL-927\n\n- The `-config` option to `erl` now can take multiple config files without\n  repeating the `-config` option. Example:\n\n  erl -config sys local\n\n  Own Id: OTP-16148 Aux Id: PR-2373\n\n- Removed the `scheduler_poll` and `async I/O` dtrace and LTTng trace probes.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16215\n\n- Optimized `persistent_term:put/2` and [`erase/1`](`erase/1`) to consume less\n  CPU in many cases.\n\n  Own Id: OTP-16237 Aux Id: PR-2389\n\n- The possibility to run Erlang distribution without relying on EPMD has been\n  extended. To achieve this a couple of new options to the inet distribution has\n  been added.\n\n  - **\\-dist_listen false** - Setup the distribution channel, but do not listen\n    for incoming connection. This is useful when you want to use the current\n    node to interact with another node on the same machine without it joining\n    the entire cluster.\n\n  - **\\-erl_epmd_port Port** - Configure a default port that the built-in EPMD\n    client should return. This allows the local node to know the port to connect\n    to for any other node in the cluster.\n\n  The `erl_epmd` callback API has also been extended to allow returning `-1` as\n  the creation which means that a random creation will be created by the node.\n\n  In addition a new callback function called `listen_port_please` has been added\n  that allows the callback to return which listen port the distribution should\n  use. This can be used instead of `inet_dist_listen_min/max` if the listen port\n  is to be fetched from an external service.\n\n  Own Id: OTP-16250\n\n- On systems without `closefrom()`, such as Linux, iterating over all possible\n  file descriptors and calling `close()` for each is inefficient. This is\n  markedly so when the maximum number of file descriptors has been tuned to a\n  large number.\n\n  Instead, in erl_child_setup, walk the open descriptors under `/dev/fd` and\n  close only those which are open.\n\n  This optimization affects the CPU usage of starting a new Erlang instance.\n\n  Own Id: OTP-16270\n\n- Optimized `maps:merge/2` for trivial cases of an empty map(s) or same map.\n\n  Own Id: OTP-16283 Aux Id: PR-2441\n\n- The new experimental `socket` module has been moved to the Kernel application.\n\n  Own Id: OTP-16312\n\n- Improved the presentation of allocations and carriers in the `instrument`\n  module.\n\n  Own Id: OTP-16327\n\n- As announced in OTP 22.0, the previously existing limited support for VxWorks\n  has now been removed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16329 Aux Id: OTP-15621\n\n- The return value when using the `httph` and `httph_bin` option to\n  `erlang:decode_packet/3` and `inet:setopts/2` has been changed to also include\n  the original header unmodified. See `erlang:decode_packet/3`. Example:\n\n  ```erlang\n   >\n  \t    erlang:decode_packet(httph_bin,<<\"HELLO:\n  \t    hi\\r\\n\\r\\n\">>,[]).\n  \t    {ok,{http_header,0,<<\"Hello\">>,<<\"HELLO\">>,<<\"hi\">>},<<\"\\r\\n\">>}\n  ```\n\n  Own Id: OTP-16347 Aux Id: PR-2466\n\n- Ensure `net_kernel:monitor_nodes/1` sends `nodedown` messages of a failed\n  connection before `nodeup` messages of a reestablished connection toward the\n  same node.\n\n  Own Id: OTP-16362\n\n- Update of [sequential tracing](`m:seq_trace#whatis`) to also support other\n  information transfers than message passing.\n\n  Own Id: OTP-16370 Aux Id: OTP-15251, OTP-15232\n\n- socket: It is now possible to create a socket from an already existing file\n  descriptor.\n\n  Own Id: OTP-16398 Aux Id: ERL-1154\n\n- socket: The socket:supports/1 function now also report if netns is supported\n  or not.\n\n  Own Id: OTP-16432\n\n- `=:=` has been optimized to return `false` immediately when comparing two maps\n  of different sizes.\n\n  Own Id: OTP-16454\n\n- Changed the behaviour of passing the `erl` command line argument\n  [`+A 0`](erl_cmd.md#async_thread_pool_size) to silently imply `+A 1`. That is,\n  it will no longer be possible to completely disable the async thread pool.\n  Disabling of the async thread pool has since OTP 21 had no benefits; only lots\n  of drawbacks.\n\n  Own Id: OTP-16482\n\n- The deprecated `erlang:get_stacktrace/0` BIF now returns an empty list instead\n  of a stacktrace. To retrieve the stacktrace, use the extended try/catch syntax\n  that was introduced in OTP 21. `erlang:get_stacktrace/0` is scheduled for\n  removal in OTP 24.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16484\n\n- `init:restart/1` has been introduced. `init:restart/1` can be utilized for\n  changing the code loading mode during a restart.\n\n  Own Id: OTP-16492 Aux Id: PR-2461\n\n- Improve configure for the net nif, which should increase portability.\n\n  Own Id: OTP-16530 Aux Id: OTP-16464\n\n- socket: Socket counters and socket global counters are now represented as maps\n  (instead of property lists).\n\n  Own Id: OTP-16535\n\n- Reduced the resource usage of `erlc` in parallel builds (e.g. `make -j128`).\n\n  Own Id: OTP-16543 Aux Id: ERL-1186\n\n- The experimental socket module has gotten restrictions removed so now the\n  'seqpacket' socket type should work for any communication domain (protocol\n  family) where the OS supports it, typically the Unix Domain.\n\n  Own Id: OTP-16550 Aux Id: ERIERL-476\n\n- Updated the internal `pcre` library to `8.44`.\n\n  Own Id: OTP-16557\n\n- There is now cost in terms of reductions when copying binary data using the\n  binary syntax.\n\n  Own Id: OTP-16601 Aux Id: OTP-16577\n\n- The executable `erl_call` is now part of the `erts` distribution in addition\n  to `erl_interface`.\n\n  Own Id: OTP-16602\n\n- Fix a buffer overflow bug that caused EPMD to consume 100% CPU after many\n  nodes had been connected on the same time on NetBSD.\n\n  Own Id: OTP-16615\n\n- `erl -remsh` now uses the dynamic node names feature by default. See the\n  [erl](erl_cmd.md) documentation for details.\n\n  Own Id: OTP-16616\n\n- socket: By default the socket options rcvtimeo and sndtimeo are now disabled.\n  To enable these, OTP now has to be built with the configure option\n  --enable-esock-rcvsndtimeo\n\n  Own Id: OTP-16620\n\n- The environment variable $HOME does no longer have to be set before Erlang can\n  be started.\n\n  Own Id: OTP-16635 Aux Id: ERL-476 PR-2390","ref":"notes.html#improvements-and-new-features-30"},{"type":"extras","title":"Erts 10.7.2.19 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-19"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"* A race could cause [`process_info(Pid, message_queue_len)`](`process_info/2`) on other processes to return invalid results.\n\n  Own Id: OTP-18169 Aux Id: PR-6134\n* Fixed reduction counting for handling process system tasks.\n\n  Own Id: OTP-18170 Aux Id: PR-6135\n* Priority elevation of terminating processes did not work which could cause execution of such processes to be delayed.\n\n  Own Id: OTP-18175 Aux Id: PR-6142\n* The `erlang:monotonic_time/1`, `erlang:system_time/1`, `erlang:time_offset/1`, and `os:system_time/1` BIFs erroneously failed when passed the argument `native`.\n\n  Own Id: OTP-18197 Aux Id: GH-6165, PR-6213\n* Notifications about available distribution data sent to distribution controller processes could be lost. Distribution controller processes can be used when implementing an alternative distribution carrier. The default distribution over tcp was not effected and the bug was also not present on x86/x86_64 platforms.\n\n  Own Id: OTP-18258 Aux Id: GH-6309, PR-6324","ref":"notes.html#fixed-bugs-and-malfunctions-134"},{"type":"extras","title":"Erts 10.7.2.18 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-18"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug where the process message queue was left in an inconsistent state when\n  changing from on_heap to off_heap message queue data causing the GC to\n  segfault.\n\n  Own Id: OTP-18075 Aux Id: PR-5927\n\n- Fix functions that convert universal to localtime (such as erlang:localtime/0\n  and erlang:universaltime_to_localtime/1) to fetch the correct localtime if it\n  is changed after the start of the VM.\n\n  Own Id: OTP-18076 Aux Id: ERIERL-802 PR-5905\n\n- Fix memory leak when a process doing a distributed fragmented send is sent an\n  exit signal. Before this fix the receiving node would be left with an\n  incomplete message that would remain until the nodes were disconnected. The\n  bug has existed since Erlang/OTP 21.\n\n  Own Id: OTP-18077 Aux Id: GH-5876 PR-5892","ref":"notes.html#fixed-bugs-and-malfunctions-135"},{"type":"extras","title":"Erts 10.7.2.17 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-17"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- By default `global` does _not_ take any actions to restore a fully connected\n  network when connections are lost due to network issues. This is problematic\n  for all applications expecting a fully connected network to be provided, such\n  as for example `mnesia`, but also for `global` itself. A network of\n  overlapping partitions might cause the internal state of `global` to become\n  inconsistent. Such an inconsistency can remain even after such partitions have\n  been brought together to form a fully connected network again. The effect on\n  other applications that expects that a fully connected network is maintained\n  may vary, but they might misbehave in very subtle hard to detect ways during\n  such a partitioning.\n\n  In order to prevent such issues, we have introduced a _prevent overlapping\n  partitions_ fix which can be enabled using the\n  `prevent_overlapping_partitions` `kernel(6)` parameter. When this fix has been\n  enabled, `global` will actively disconnect from nodes that reports that they\n  have lost connections to other nodes. This will cause fully connected\n  partitions to form instead of leaving the network in a state with overlapping\n  partitions. Note that this fix _has_ to be enabled on _all_ nodes in the\n  network in order to work properly. Since this quite substantially changes the\n  behavior, this fix is currently disabled by default. Since you might get hard\n  to detect issues without this fix you are, however, _strongly_ advised to\n  enable this fix in order to avoid issues such as the ones described above. As\n  of OTP 25 this fix will become enabled by default.\n\n  Own Id: OTP-17843 Aux Id: ERIERL-732, PR-5611\n\n- Fix memory leak when tracing on running on a process that only handle system\n  tasks or non-message signals (for example process_info requests).\n\n  Own Id: OTP-17904 Aux Id: ERIERL-757\n\n- Fix Erlang monotonic time on MacOS. Previously used OS monotonic time\n  primitive on MacOS is buggy and will not be used anymore. It has been replaced\n  with usage of another OS monotonic time primitive that does not appear to be\n  buggy.\n\n  Own Id: OTP-17998 Aux Id: PR-5825, GH-5554","ref":"notes.html#fixed-bugs-and-malfunctions-136"},{"type":"extras","title":"Erts 10.7.2.16 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-16"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Responsiveness of processes executing on `normal` or `low` priority could\n  suffer due to code purging or literal area removal on systems with a huge\n  amount of processes. This since during these operations all processes on the\n  system were scheduled for execution at once.\n\n  This problem has been fixed by introducing a limit on outstanding purge and\n  copy literal requests in the system. By default this limit is set to twice the\n  amount of schedulers on the system. This will ensure that schedulers will have\n  enough work scheduled to perform these operations as quickly as possible at\n  the same time as other work will be interleaved to a much higher degree.\n  Performance of these operations will however be somewhat degraded due to the\n  overhead of enforcing this limit compared to when using a very large limit.\n\n  This limit can be set by passing the `+zosrl` command line argument to `erl`,\n  or by calling\n  `erlang:system_flag(outstanding_system_requests_limit, NewLimit)`.\n\n  Own Id: OTP-17796 Aux Id: ERIERL-729, PR-5473","ref":"notes.html#improvements-and-new-features-31"},{"type":"extras","title":"Erts 10.7.2.15 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The runtime system could call `select()` with a too large timeout value when\n  executing on MacOS. This could in turn cause the runtime system to crash.\n\n  Own Id: OTP-17735 Aux Id: GH-5339\n\n- Certain distributed signals that for various reasons must to be forced into\n  the distribution buffer even when it is full would instead be lost if the\n  distribution buffer was full when sent. The effected signals:\n\n  - `EXIT` signals with exit reasons of one word size.\n  - `DOWN` signals with exit reasons of one word size.\n  - `demonitor` signals from a terminating process.\n  - `unlink_ack` signals on OTP 23 and 24.\n  - `spawn_reply` signals on OTP 23 and 24.\n\n  Own Id: OTP-17737 Aux Id: GH-5346, GH-4989","ref":"notes.html#fixed-bugs-and-malfunctions-137"},{"type":"extras","title":"Erts 10.7.2.14 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- On 32-bit computers, `binary_to_term/1,2` is now more resilient against\n  corrupted binaries containing maps in the external format.\n\n  Own Id: OTP-17604\n\n- A call to [`process_info(Pid, status)`](`process_info/2`) could erroneously\n  report the status `running` when it should have reported `waiting`. This\n  occurred when the calling process was executing on a higher priority than the\n  process being inspected. This bug has been present since OTP 21.0 (erts\n  version 10.0).\n\n  Own Id: OTP-17628\n\n- A race between an exiting port and handling of simultaneously received signals\n  to that port could cause a runtime system crash. The effected signals are\n  `link`, `monitor` and `demonitor`. On OTP 22 a similar race could also cause a\n  memory leak when receiving an `unlink` signal.\n\n  Own Id: OTP-17642 Aux Id: PR-5248\n\n- The message queue of a process entered an inconsistent state after a `receive`\n  expression with an invalid timeout value was executed. If the exception raised\n  due to the invalid timeout value was caught, the following `receive`\n  expression executed by the process could fail to match messages already\n  present in the message queue.\n\n  On OTP 24 this could also cause the whole runtime system to crash.\n\n  Own Id: OTP-17651 Aux Id: GH-5235, PR-5244\n\n- Sending a `Port ! {PortOwner, close}` signal from a process other than the\n  port owner could erroneously trigger a `badsig` exit signal being sent to the\n  port owner process even though the correct `PortOwner` had been passed in the\n  signal.\n\n  Own Id: OTP-17665 Aux Id: PR-5248\n\n- This fixes a bug in `erts_factory_undo` that caused the heap to not be reset\n  correctly. The `erts_factory_undo` function is, for example, called when a\n  [`binary_to_term/1`](`binary_to_term/1`) call fails to reset the heap to its\n  state before the [`binary_to_term/1`](`binary_to_term/1`) call. This can cause\n  the heap to contain invalid terms which potentially can cause issues (e.g.,\n  crashes) when the whole heap is scanned.\n\n  Own Id: OTP-17677\n\n- Fix bug in `persistent_term` when a key-value pair contains a magic reference\n  that is referred more than once. Magic references are NIF resources or\n  returned from BIFs like `ets:new`, `atomics:new`. The bug could cause the\n  memory of the referred resource to be prematurely deallocated.\n\n  The bug also apply to magic references in message passing on a runtime built\n  with configure option `--enable-sharing-preserving`.\n\n  Bug exist for 64-bit since OTP-24.0 and for 32-bit since OTP-20.0.\n\n  Own Id: OTP-17700 Aux Id: GH-5271, PR-5273","ref":"notes.html#fixed-bugs-and-malfunctions-138"},{"type":"extras","title":"Erts 10.7.2.13 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in `zlib` where decompression would crash with `data_error` on\n  some valid inputs. The bug could also cause extraction from a zip archive\n  using `zip:extract()` to fail.\n\n  Own Id: OTP-17470 Aux Id: ERIERL-657\n\n- A call to `erlang:cancel_timer(_, [{info, false}])` could cause the calling\n  process to block forever in the call. Note that only the synchronous version\n  of the call (that is, the `async` option is `false`) in combination with the\n  `info` option set to `false` was effected by this bug.\n\n  Own Id: OTP-17472 Aux Id: PR-4932\n\n- Microstate accounting (msacc) and `os:perf_counter()` unintentionally used\n  system time instead of monotonic time for time measurements on a lot of\n  systems. These systems were all non x86/x86_64 systems or x86/x86_64 systems\n  without a reliable and constant rdtsc instruction.\n\n  The lock counting (lcnt) built runtime system also unintentionally used system\n  time instead of monotonic time for time measurements on all systems.\n\n  Own Id: OTP-17493\n\n- Simultaneous calls to `erlang:system_flag(schedulers_online, _)` could cause\n  callers to end up in a suspended state forever.\n\n  Own Id: OTP-17500 Aux Id: GH-4809\n\n- Fix rare race bug in memory management of distribution entries. Have been seen\n  to cause VM crash when massive number of repeated concurrent failing\n  connection attempts.\n\n  Own Id: OTP-17513 Aux Id: GH-4964, PR-5015\n\n- Fix buffer overrun problem in the tty driver. The problem happens on some\n  platforms when using the CTRL+R functionality of newshell with very long\n  strings in the history.\n\n  Own Id: OTP-17560 Aux Id: GH-5116\n\n- Fix race-condition that could cause a crash when tracing scheduling or garbage\n  collections on a process that was running on a dirty scheduler.\n\n  Own Id: OTP-17568 Aux Id: PR-4940\n\n- Fix rare bug where re:run would crash/return invalid results when given a\n  subbinary as subject.\n\n  This bug has existed since Erlang/OTP 20.0.\n\n  Own Id: OTP-17585 Aux Id: GH-5150\n\n- `binary_to_term/1,2` is now more resilient against corrupted binaries\n  containing maps in the external format.\n\n  Own Id: OTP-17594","ref":"notes.html#fixed-bugs-and-malfunctions-139"},{"type":"extras","title":"Erts 10.7.2.12 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A call to `port_command()` could cause a scheduler to end up in an eternal\n  loop if the port was busy and the calling process had incoming signals at the\n  time of the call. This bug was introduced in OTP 23.3.2 (ERTS version 11.2.1),\n  OTP 22.3.4.18 (ERTS version 10.7.2.10), and OTP 21.3.8.23 (ERTS version\n  10.3.5.18).\n\n  Own Id: OTP-17448 Aux Id: GH-4898, PR-4903, OTP-17291","ref":"notes.html#fixed-bugs-and-malfunctions-140"},{"type":"extras","title":"Erts 10.7.2.11 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug in match spec compilator seen to cause a stack overflow crash on debug\n  VM for certain match specs. Could potentially cause problems for standard VM,\n  but has not been verified. Match specs are used by `ets:match/select`\n  functions and `erlang:trace_pattern`.\n\n  Own Id: OTP-17379 Aux Id: PR-4804\n\n- Commit of generated `configure` script.\n\n  Own Id: OTP-17420 Aux Id: OTP-17398, GH-4821","ref":"notes.html#fixed-bugs-and-malfunctions-141"},{"type":"extras","title":"Erts 10.7.2.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The following signals could pass before other signals from the same sender to\n  the same receiver. That is, these signals could arrive too early.\n\n  - `garbage-collect` request. Sent from one process to another using one of the\n    `garbage_collect/0` BIFs.\n  - `check-process-code` request. Sent from one process to another using one of\n    the `check_process_code()` BIFs.\n  - `is-process-alive` reply. Sent as a response to a process calling the\n    `is_process_alive()` BIF.\n  - `process-info` reply. Sent as a response to a process calling one of the\n    `process_info()` BIFs.\n  - `port-command` reply. Sent as a response to a process calling one of the\n    `port_command()` BIFs.\n  - `port-connect` reply. Sent as a response to a process calling the\n    `port_connect()` BIF.\n  - `port-close` reply. Sent as a response to a process calling the\n    `port_close()` BIF.\n  - `port-control` reply. Sent as a response to a process calling the\n    `port_control()` BIF.\n  - `port-call` reply. Sent as a response to a process calling the `port_call()`\n    BIF.\n  - `port-info` reply. Sent as a response to a process calling one of the\n    `port_info()` BIFs.\n\n  Own Id: OTP-17291\n\n- A garbage collection of a literal area missed messages that entirely consisted\n  of a term in a literal area. This could in turn lead to a crash of the runtime\n  system.\n\n  Own Id: OTP-17307\n\n- A call to [`process_flag(message_queue_data, off_heap)`](`process_flag/2`)\n  could cause a crash of the runtime system when sequential tracing was enabled.\n\n  Own Id: OTP-17349","ref":"notes.html#fixed-bugs-and-malfunctions-142"},{"type":"extras","title":"Erts 10.7.2.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in the timer implementation which could cause timers that were set\n  to more than 37.25 hours in the future to be delayed. This could occur if\n  there were multiple timers scheduled to be triggered very close in time, but\n  still at different times, and the scheduler thread handling the timers was not\n  able to handle them quickly enough. Delayed timers were in this case triggered\n  when another unrelated timer was triggered.\n\n  Own Id: OTP-17253\n\n- Fix bug in call_time tracing (used by eprof) that could cause VM crash. Bug\n  exists since OTP-22.2 (but not in OTP-23).\n\n  Own Id: OTP-17290 Aux Id: GH-4635","ref":"notes.html#fixed-bugs-and-malfunctions-143"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Fix a file descriptor leak when using sendfile and the remote side closes the\n  connection. This bug has been present since OTP-21.0.\n\n  Own Id: OTP-17244","ref":"notes.html#improvements-and-new-features-32"},{"type":"extras","title":"Erts 10.7.2.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug that could cause some work scheduled for execution on scheduler\n  threads to be delayed until other similar work appeared. Beside delaying\n  various cleanup of internal data structures also the following could be\n  delayed:\n\n  - Termination of a distribution controller process\n  - Disabling of the distribution on a node\n  - Gathering of memory allocator information using the `instrument` module\n  - Enabling, disabling, and gathering of `msacc` information\n  - Delivery of `'CHANGE'` messages when time offset is monitored\n  - A call to `erlang:cancel_timer()`\n  - A call to `erlang:read_timer()`\n  - A call to `erlang:statistics(io | garbage_collection | scheduler_wall_time)`\n  - A call to `ets:all()`\n  - A call to `erlang:memory()`\n  - A call to `erlang:system_info({allocator | allocator_sizes, _})`\n  - A call to `erlang:trace_delivered()`\n\n  The bug existed on runtime systems running on all types of hardware except for\n  x86/x86_64.\n\n  Own Id: OTP-17185","ref":"notes.html#fixed-bugs-and-malfunctions-144"},{"type":"extras","title":"Erts 10.7.2.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The `suspend_process()` and `resume_process()` BIFs did not check their\n  arguments properly which could cause an emulator crash.\n\n  Own Id: OTP-17080\n\n- The runtime system would get into an infinite loop if the runtime system was\n  started with more than 1023 file descriptors already open.\n\n  Own Id: OTP-17088 Aux Id: ERIERL-580","ref":"notes.html#fixed-bugs-and-malfunctions-145"},{"type":"extras","title":"Erts 10.7.2.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed rare distribution bug in race between received signal\n  (link/monitor/spawn_request/spawn_reply) and disconnection. Symptom: VM crash.\n  Since: OTP 21.0.\n\n  Own Id: OTP-16869 Aux Id: ERL-1337","ref":"notes.html#fixed-bugs-and-malfunctions-146"},{"type":"extras","title":"Erts 10.7.2.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bugs causing issues when enabling the ERTS internal allocators on a\n  system built with the undocumented and unsupported `SMALL_MEMORY` feature.\n\n  Own Id: OTP-16939","ref":"notes.html#fixed-bugs-and-malfunctions-147"},{"type":"extras","title":"Erts 10.7.2.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- inet:setopts(\\[\\{active,once\\}]) wakes up IO polling thread unnecessarily,\n  leading to lock contention and visibly higher CPU utilization.\n\n  Own Id: OTP-16847 Aux Id: ERL-1301\n\n- The documentation of [`statistics(run_queue)`](`statistics/1`) erroneously\n  stated that it returns the total length of all normal run queues when it is\n  the total length of all normal and dirty CPU run queues that is returned. The\n  documentation has been updated to reflect the actual behavior.\n\n  Own Id: OTP-16866 Aux Id: ERL-1355\n\n- Two bugs in the ERTS internal thread wakeup functionality have been fixed.\n  These bugs mainly hit when all threads in the system tried to go to sleep.\n  When the bugs were triggered, certain operations were delayed until a thread\n  woke up due to some other reason. Most important operations effected were code\n  loading, persistent term updates, and memory deallocation.\n\n  Own Id: OTP-16870\n\n- Fixed bug in `ets:select_replace/2` on `compressed` tables that could produce\n  faulty results or VM crash. Bug exists since OTP 20.\n\n  Own Id: OTP-16874 Aux Id: ERL-1356, PR-2763","ref":"notes.html#fixed-bugs-and-malfunctions-148"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- As of OTP 22, the allocator specific memory carrier pools were replaced by a\n  node global carrier pool. This unfortunately caused substantial memory\n  fragmentation in some cases due to long lived data being spread into carriers\n  used by allocators mainly handling short lived data.\n\n  A new command line argument `+M cp` has been introduced with which one can\n  enable the old behavior as well as configuring other behaviors for the carrier\n  pools. In order to configure the old behavior, with allocator specific carrier\n  pools for all allocators, pass `+Mucp :` (including the colon character) as a\n  command line argument to `erl` when starting the Erlang system.\n\n  The default configuration for carrier pools will be changed to `+Mucp :` some\n  time in the future, but not in this patch.\n\n  Own Id: OTP-16856","ref":"notes.html#improvements-and-new-features-33"},{"type":"extras","title":"Erts 10.7.2.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The ERTS internal I/O poll implementation could get into an inconsistent state\n  causing input events to be ignored.\n\n  Own Id: OTP-16780 Aux Id: PR-2701","ref":"notes.html#fixed-bugs-and-malfunctions-149"},{"type":"extras","title":"Erts 10.7.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- An unintentional reuse of an already used emulator internal event object could\n  cause a wakeup signal to a thread to be lost. In worst case this could cause\n  the runtime system to hang. This hang was however quite rare.\n\n  Own Id: OTP-16766 Aux Id: ERL-1304\n\n- NIF threads and driver threads on non-Linux systems leaked internal resources\n  when terminating. On Windows these resources were one event per thread. On\n  most other systems one mutex and one condition variable per thread. On these\n  other systems that also lacked `pthread_cond_timedwait()` also a pipe with its\n  file descriptors was leaked.\n\n  Own Id: OTP-16772 Aux Id: ERL-1304","ref":"notes.html#fixed-bugs-and-malfunctions-150"},{"type":"extras","title":"Erts 10.7.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in erl_crash.dump generation that could cause a SEGV core dump if a\n  recently cancelled timer was found.\n\n  Own Id: OTP-16596 Aux Id: ERL-1105, PR-2606\n\n- The functionality utilized by BIFs for temporary disabling of garbage\n  collection while yielding could cause system task queues to become\n  inconsistent on a process executing such a BIF. Process system tasks are for\n  example utilized when purging code, garbage collecting literal data, and when\n  issuing an ordinary garbage collection from another process.\n\n  The bug does not trigger frequently. Multiple code purges in direct sequence\n  makes it more likely that this bug is triggered. In the cases observed, this\n  has resulted in a hanging code purge operation.\n\n  Own Id: OTP-16639 Aux Id: ERL-1236\n\n- SCTP and UDP recv/2,3 hangs indefinitely if socket is closed while recv is\n  called (socket in passive mode).\n\n  Own Id: OTP-16654 Aux Id: ERL-1242","ref":"notes.html#fixed-bugs-and-malfunctions-151"},{"type":"extras","title":"Erts 10.7.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A literal area could prematurely be released before all uses of it had been\n  removed. This occurred either when a terminating process had a complex exit\n  reason referring to a literal that concurrently was removed, or when a\n  terminating process continued executing a dirty NIF accessing a literal (via\n  the heap) that concurrently was removed.\n\n  Own Id: OTP-16640 Aux Id: OTP-16193\n\n- The VM could potentially crash when checking process code of a process that\n  terminated while executing a dirty NIF. The checking of process code is part\n  of a code purge operation.\n\n  Own Id: OTP-16641\n\n- System tasks of `low` priority were not interleaved with `normal` priority\n  system tasks as they should. This could potentially delay garbage collection\n  of another process longer than intended if the garbage collection was\n  requested from a `low` priority process.\n\n  Own Id: OTP-16642","ref":"notes.html#fixed-bugs-and-malfunctions-152"},{"type":"extras","title":"Erts 10.7.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [re:run(Subject, RE, \\[unicode])](`re:run/3`) returned `nomatch` instead of\n  failing with a `badarg` error exception when `Subject` contained illegal utf8\n  and `RE` was passed as a binary. This has been corrected along with\n  corrections of reduction counting in `re:run()` error cases.\n\n  Own Id: OTP-16553\n\n- Fixed a bug that could cause the emulator to crash when purging modules or\n  persistent terms.\n\n  Own Id: OTP-16555 Aux Id: ERL-1188\n\n- Fixed a bug in a receive optimization. This could cause a `receive` not to\n  match even though a matching message was present in the message queue. This\n  bug was introduced in ERTS version 10.6 (OTP 22.2).\n\n  Own Id: OTP-16572 Aux Id: ERL-1199, OTP-16269","ref":"notes.html#fixed-bugs-and-malfunctions-153"},{"type":"extras","title":"Erts 10.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `gen_udp:recv(S, N, 0)` corrupted the internal state for the socket so after\n  receive with `{active, once}` it always returned `{error, timeout}`, and\n  wasted the received UDP packets. This bug has now been fixed.\n\n  Reported and pinpointed by Alexander Petrovsky.\n\n  Own Id: OTP-16059\n\n- The atom esock_atom_user and esock_atom_kernel was never actually created.\n  This has now been corrected.\n\n  Own Id: OTP-16381\n\n- Fixed bug in `socket` module that could potentially lead to scheduler\n  deadlocks.\n\n  Own Id: OTP-16384\n\n- Fix bug causing VM crash if `down` or `stop` callback of a NIF resource is\n  called after the NIF module has been purged. The fix will postpone unloading\n  until all such resource objects have been garbage collected.\n\n  Own Id: OTP-16399\n\n- Fixed bug in `ets:update_counter/4`, when called with an invalid `UpdateOp`\n  and a `Key` that does not exist, causing `ets:info(T,size)` to return\n  incorrect values. Bug exists since OTP-19.0.2.\n\n  Own Id: OTP-16404 Aux Id: ERL-1127\n\n- Fix potential heap corrupting bugs when a process calls a BIF that blocks\n  other normal schedulers and then writes to its own heap without the main\n  process lock. A NIF running on a dirty scheduler trying to interact with such\n  a process could corrupt its heap. The fixed BIFs were related to code loading\n  and tracing.\n\n  Own Id: OTP-16417\n\n- Fixed bug in `erlang:list_to_ref/1` when called with a reference created by a\n  remote note. Function [`list_to_ref/1`](`list_to_ref/1`) is intended for\n  debugging and not to be used in application programs. Bug exist since OTP\n  20.0.\n\n  Own Id: OTP-16438\n\n- The prim_net nif (net/kernel) made use of an undefined atom, notsup. This has\n  now been corrected.\n\n  Own Id: OTP-16440\n\n- Corrected the valid range of the `erl` command line argument\n  [`+SDio  `](erl_cmd.md#%2BSDio) from `0..1024` to\n  `1..1024`. `+SDio 0` was erroneously allowed which just caused the VM to crash\n  on the first dirty I/O job scheduled.\n\n  Own Id: OTP-16481\n\n- Fix a crash when attempting to log faults when loading files during early\n  boot.\n\n  Own Id: OTP-16491","ref":"notes.html#fixed-bugs-and-malfunctions-154"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- For [socket](`m:socket#`), not all send and receive flags are supported on all\n  platforms. In order to (at least) simplify testing, the\n  socket:supports/0,1,2,3 functions has been extended with send_flags and\n  recv_flags items, which indicates what the current platform can manage.\n\n  Own Id: OTP-16153\n\n- Add a \"full featured\" version of getifaddrs in the net module.\n\n  Own Id: OTP-16212 Aux Id: ERL-1070\n\n- The options `busy_limits_port` and `busy_limits_msgq` have been added to the\n  BIF `erlang:open_port/2`. The `busy_limits_port` option can be used for\n  controlling the busy state of a port executing the `spawn_driver` or the\n  `fd_driver`. The `busy_limits_msgq` option can be used for controlling the\n  busy state of the port message queue.\n\n  Own Id: OTP-16306 Aux Id: ERIERL-439\n\n- A socket \"registry\" has been added making it possible to list current open\n  sockets.\n\n  Own Id: OTP-16309\n\n- The counters managed by the socket nif has been extended. Their \"size\" has\n  been increased from 32 bit to 64. Two max package size (for read and write)\n  has been added. And four accept counters has been added.\n\n  Own Id: OTP-16387\n\n- Add gcc option `-fno-common` to detect accidental name clashes of global\n  variables.\n\n  Own Id: OTP-16420 Aux Id: PR-2513\n\n- New dynamic lock checker that verifies locking orders and detects potential\n  deadlock bugs in drivers and NIFs. Enabled together with the old static lock\n  checker (for ERTS internal locks) in emulator started with `-emu_type debug`\n  or built with configuration option `--enable-lock-checking`.\n\n  Own Id: OTP-16427","ref":"notes.html#improvements-and-new-features-34"},{"type":"extras","title":"Erts 10.6.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-6-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process could get into an inconsistent state where it was runnable, but\n  never scheduled for execution. This could occur when a mix of `normal` and\n  `low` priority processes where scheduled on the same type of dirty scheduler\n  simultaneously.\n\n  Own Id: OTP-16446 Aux Id: ERL-1157","ref":"notes.html#fixed-bugs-and-malfunctions-155"},{"type":"extras","title":"Erts 10.6.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-6-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process could end up in a state where it got endlessly rescheduled without\n  making any progress. This occurred when a system task, such as check of\n  process code (part of a code purge), was scheduled on a high priority process\n  trying to execute on a dirty scheduler.\n\n  Own Id: OTP-16436 Aux Id: ERL-1152","ref":"notes.html#fixed-bugs-and-malfunctions-156"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Improved signal handling for processes executing dirty. For example, avoid\n  busy wait in dirty signal handler process when process is doing garbage\n  collection on dirty scheduler.\n\n  Own Id: OTP-16358","ref":"notes.html#improvements-and-new-features-35"},{"type":"extras","title":"Erts 10.6.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-6-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Taking a scheduler offline could cause timers set while executing on that\n  scheduler to be delayed until the scheduler was put online again. This bug was\n  introduced in ERTS version 10.0 (OTP 21.0).\n\n  Own Id: OTP-16371\n\n- The `ets:update_counter/4` core dumped when given an ordered_set with\n  write_concurrency enabled and an invalid position. This bug has been fixed.\n\n  Own Id: OTP-16378 Aux Id: ERL-1125\n\n- A process calling\n  [`erlang:system_flag(multi_scheduling, block)`](`m:erlang#system_flag_multi_scheduling`)\n  could end up blocked waiting for the operation to complete indefinitely.\n\n  Own Id: OTP-16379","ref":"notes.html#fixed-bugs-and-malfunctions-157"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Duplicate entries for \\[socket:]getopt and \\[socket:]setopt in man page.\n\n  Own Id: OTP-16333 Aux Id: ERL-1104","ref":"notes.html#improvements-and-new-features-36"},{"type":"extras","title":"Erts 10.6.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-6-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Corrected an issue with the new socket api which could cause a core dump. A\n  race during socket close could cause a core dump (an invalid nif environment\n  free).\n\n  Own Id: OTP-16314 Aux Id: ERL-1098\n\n- Corrected an issue with the new socket api which could cause a core dump. When\n  multiple accept processes waiting for a connect a connect could cause a core\n  dump.\n\n  Own Id: OTP-16359","ref":"notes.html#fixed-bugs-and-malfunctions-158"},{"type":"extras","title":"Erts 10.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The functions [`unicode:characters_to_list()`](`unicode:characters_to_list/2`)\n  and [`unicode:characters_to_binary()`](`unicode:characters_to_binary/3`)\n  raised a `badarg` exception instead of returning an error tuple when passed\n  very large invalid code points as input.\n\n  Own Id: OTP-16052\n\n- `file:allocate/3` will now work properly on Mac OS.\n\n  Own Id: OTP-16074 Aux Id: ERL-1042, PR-2386\n\n- For [socket](`m:socket#`), invalid encoding of send and receive flags caused\n  badarg and send failure.\n\n  Own Id: OTP-16149\n\n- Fix a bug in `re` on platforms where the native stack grows upwards, for\n  instance on HP PA-RISC.\n\n  Own Id: OTP-16150 Aux Id: ERL-1043\n\n- For [socket](`m:socket#`), unable to properly decode the timestamp control\n  message header on FreeBSD. We incorrectly used the SO_TIMESTAMP flag for the\n  timestamp control message header type. It should have been SCM_TIMESTAMP. This\n  caused the timestamp control message header to not be fully decoded.\n\n  Own Id: OTP-16151 Aux Id: #2400\n\n- For [socket](`m:socket#`), when setting the ip option 'recvtos' to true,\n  thereby indicating that we want to receive the TOS control message header, we\n  don't actually get TOS but RECVTOS on FreeBSD (and maybe others)\\! This was\n  previously not handled.\n\n  Own Id: OTP-16152 Aux Id: OTP-16114\n\n- Fixed a bug where the emulator would print out error messages forever if it\n  crashed during startup.\n\n  Own Id: OTP-16159 Aux Id: ERL-1060\n\n- For [socket](`m:socket#`), wrong type for protocol caused segmentation fault\n  if protocol was provided as \\{raw, integer()\\}.\n\n  Own Id: OTP-16163 Aux Id: ERL-1061\n\n- For [socket](`m:socket#`), when setting the ip option 'recvttl' to true,\n  thereby indicating that we want to receive the TTL control message header, we\n  don't actually get TTL but RECVTTL on Solaris (and maybe others)\\! This was\n  previously not handled.\n\n  Own Id: OTP-16172 Aux Id: OTP-16114\n\n- For [socket](`m:socket#`), IPv6 control message headers was incorrectly\n  decoded with level ip instead of ipv6.\n\n  Own Id: OTP-16173\n\n- Fix configure bug where `clock_getres` would not correctly be detected causing\n  `erlang:system_info(os_system_time_source)` to return an incorrect resolution.\n\n  This bug effects all OSs that use `clock_gettime` to get time (basically all\n  OSs except windows) and has been present since OTP-19.2.\n\n  Own Id: OTP-16191 Aux Id: ERL-1067\n\n- Fix bugs when using `ERLC_USE_SERVER=true` on Windows when building\n  Erlang/OTP.\n\n  Change the cookie used by the compile server to be hard coded instead of using\n  the users cookie.\n\n  Own Id: OTP-16192\n\n- Fix so that `persistent_term` is listed in the erts application file.\n\n  Own Id: OTP-16194\n\n- Fix bug in call_time tracing which could sometimes cause call time\n  measurements being attributed to the wrong function.\n\n  Own Id: OTP-16195 Aux Id: ERL-1027\n\n- The [socket](`m:socket#`) socket option 'peek_off' has been disabled. If\n  peek_off was set and then socket:recv/3 was called with the peek flag, the\n  call could hang.\n\n  Own Id: OTP-16196\n\n- Handle possibly uninitiated (control message header) data.\n\n  Own Id: OTP-16197\n\n- For [net](`m:net#`), a couple of NI macros was deprecated in new versions of\n  glibc, so these are no longer used (IDN_ALLOW_UNASSIGNED and\n  IDN_USE_STD3_ASCII_RULES).\n\n  Own Id: OTP-16203\n\n- The string value from a get operation needed to be truncated.\n\n  Own Id: OTP-16204\n\n- Fix misleading seq_trace message for remote send operation toward named\n  process. Changed receiver to be `{Name,Node}` instead of just `Name`.\n\n  Own Id: OTP-16206 Aux Id: PR-2423\n\n- Fixed a bug causing actual nodedown reason reported by\n  [`net_kernel:monitor_nodes(true, [nodedown_reason])`](`net_kernel:monitor_nodes/2`)\n  to be lost and replaced by the reason `killed`.\n\n  Own Id: OTP-16216\n\n- For [socket](`m:socket#`), the timestamp creation used when printing warning\n  messages and debug printouts did not work. The used buffer was too small.\n\n  Own Id: OTP-16223\n\n- Fix compiler warnings generated by GCC 8\n\n  Own Id: OTP-16235\n\n- Fix `erl -emu_type` to accept the option `opt` which means the normal\n  optimized emulator. This can be used to override the `-emu_type` option from\n  environment variables.\n\n  Own Id: OTP-16297\n\n- Corrected the function spec to reflect the actual code of the function\n  socket:bind.\n\n  Own Id: OTP-16310 Aux Id: ERL-1082\n\n- Fixed a performance issue in ETS lookup when using the `compressed` option and\n  the term contained atoms. Before this fix the decompress algorithm for atoms\n  would unnecessarily take a global lock to validate the atom.\n\n  Own Id: OTP-16316","ref":"notes.html#fixed-bugs-and-malfunctions-159"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- For [socket](`m:socket#`), not all send and receive flags are supported on all\n  platforms. In order to (at least) simplify testing, the\n  socket:supports/0,1,2,3 functions has been extended with send_flags and\n  recv_flags items, which indicates what the current platform can manage.\n\n  Own Id: OTP-16153\n\n- For [socket](`m:socket#`), add support for IPv6 socket options tclass and\n  recvtclass. Both has been added, but the use of them are platform dependent.\n  Call socket:supports(options, ipv6, Opt) to be sure what option to use in\n  order to request a TCLASS control message header.\n\n  Own Id: OTP-16180\n\n- For [socket](`m:socket#`), the TCP socket option cork was not supported even\n  though the supports function reported it as such.\n\n  Own Id: OTP-16205\n\n- The Kernel application's User's Guide now contain a Logger Cookbook with\n  common usage patterns.\n\n  Own Id: OTP-16208\n\n- Add a \"full featured\" version of getifaddrs in the net module.\n\n  Own Id: OTP-16212 Aux Id: ERL-1070\n\n- Fix an inefficiency introduced by the bug fix in OTP-16241 which fixed a\n  problem with the receive optimization. That bug fix introduced an inefficiency\n  when using the receive optimization and a burst of messages arrive at once\n  when the receiving process' mailbox was empty.\n\n  Own Id: OTP-16269 Aux Id: OTP-16241\n\n- For [socket](`m:socket#`), added support for the socket option extended_err.\n  Andreas Schultz.\n\n  Own Id: OTP-16302 Aux Id: #2449\n\n- ETS tables have been optimized to not use any locks when running in a system\n  with only one scheduler enabled. This can provide significant performance\n  gains for applications that use ETS tables heavily.\n\n  Own Id: OTP-16315","ref":"notes.html#improvements-and-new-features-37"},{"type":"extras","title":"Erts 10.5.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-5-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Large amounts of quickly executed dirty work could cause heavy contention on\n  an internal spin lock. The spin lock was replaced by a mutex which behaves\n  much better under these conditions.\n\n  Own Id: OTP-16301 Aux Id: ERL-1079","ref":"notes.html#fixed-bugs-and-malfunctions-160"},{"type":"extras","title":"Erts 10.5.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-5-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A literal area could prematurely be released before all uses of it had been\n  removed. This occurred either when a terminating process had a complex exit\n  reason referring to a literal that concurrently was removed, or when a\n  terminating process continued executing a dirty NIF accessing a literal (via\n  the heap) that concurrently was removed.\n\n  Own Id: OTP-16193\n\n- Fix bug causing VM crash due to memory corruption of distribution entry.\n  Probability of crash increases if Erlang distribution is frequently\n  disconnected and reestablished towards same node names. Bug exists since\n  OTP-21.0.\n\n  Own Id: OTP-16224 Aux Id: ERL-1044\n\n- Fixed bug causing crash of VM built with configuration\n  `--enable--sharing-preserving`. Provoked when a sent message contains both a\n  bit string and the heap binary (< 65 bytes) which the bit string was matched\n  from. Bug exists since OTP-19.0 but has seen to be easier to provoke since\n  OTP-22.1.\n\n  Own Id: OTP-16265 Aux Id: ERL-1064","ref":"notes.html#fixed-bugs-and-malfunctions-161"},{"type":"extras","title":"Erts 10.5.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-5-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The compiler could do an unsafe optimization of receives, which would cause a\n  receive to only scan part of the message queue.\n\n  This bug fix in the compiler fixes a bug in the socket module.\n\n  Own Id: OTP-16219 Aux Id: ERL-1076\n\n- Fix bug where the receive marker used by the runtime to do the receive queue\n  optimization could be incorrectly set. The symptom of this would be that a\n  message that should match in a receive never matches.\n\n  The bug requires the OTP-22 compiler and multiple selective receives to\n  trigger. See OTP-16219 for details about the bug fix in the compiler.\n\n  Own Id: OTP-16241 Aux Id: ERL-1076 OTP-16219","ref":"notes.html#fixed-bugs-and-malfunctions-162"},{"type":"extras","title":"Erts 10.5.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-5-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Erlang/OTP can now be built on macOS Catalina (10.15).\n\n  Own Id: OTP-16177 Aux Id: ERL-1063","ref":"notes.html#fixed-bugs-and-malfunctions-163"},{"type":"extras","title":"Erts 10.5.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-5-2"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Added the environment variable `ERLC_SERVER_ID`, which allows multiple compile\n  servers to run separately under the same user.\n\n  Own Id: OTP-16125 Aux Id: ERIERL-412","ref":"notes.html#improvements-and-new-features-38"},{"type":"extras","title":"Erts 10.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A terminating process sending distributed `'EXIT'` or `'DOWN'` signals while\n  terminating could end up in a state where no progress at all was made. This\n  was triggered by a distribution channel that the terminating process was\n  sending on got busy. This bug has existed since ERTS version 10.4 (OTP 22.0).\n\n  Own Id: OTP-16069\n\n- When communicating with a simultaneously exiting port via the\n  `erlang:port_*()` BIFs one could sometimes get stray `{Ref, What}` messages.\n  Where `Ref` was a reference and `What` usually were the atom `badarg`.\n\n  Own Id: OTP-16107 Aux Id: ERL-1049","ref":"notes.html#fixed-bugs-and-malfunctions-164"},{"type":"extras","title":"Erts 10.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If you set `{linger,{true,0}}` on a `gen_tcp` listen socket, accept a\n  connection on that socket, and then close the accepted socket, now the linger\n  zero setting is transferred to the accepted socket. Before this correction\n  that information was lost and the close behaviour on the accepted socket\n  incorrect.\n\n  Own Id: OTP-15370 Aux Id: ERIERL-353\n\n- Sending ancillary data implemented in OTP-15747 accidentally left behind test\n  code that caused all UDP sends to fail on Windows. This has now been fixed.\n\n  Own Id: OTP-15422 Aux Id: OTP-15747\n\n- In the socket nif, used invalid flags when if-def'ing for supported TCP flags:\n  TCP_MAXSEG and TCP_NODELAY (the support function).\n\n  Own Id: OTP-15827\n\n- Fixed memory leaks in experimental socket module.\n\n  Own Id: OTP-15830\n\n- `re:run()` now yields when validating utf8 in a large subject.\n\n  Own Id: OTP-15836 Aux Id: ERL-876\n\n- Fixed bug in `seq_trace:set_token(label,Term)` which could cause VM crash if\n  `Term` was heap allocated (not an atom, small integer, local pid or port). Bug\n  exists since OTP 21.0 when terms other than small integers were first allowed\n  as labels.\n\n  Own Id: OTP-15849 Aux Id: ERL-700\n\n- Extra `-mode` flags given to `erl` are ignored with a warning.\n\n  Own Id: OTP-15852\n\n- Don't loop indefinitely when `--enable-pgo` is given to configure, but\n  compiler does not support pgo.\n\n  Own Id: OTP-15853 Aux Id: PR-2254\n\n- Fix `seq_trace:print/2` not to raise `badarg` exception if label is not a\n  small integer. Bug exists since OTP 21.0.\n\n  Own Id: OTP-15859 Aux Id: ERL-700\n\n- Fixed hipe_flush_icache_range for non-Linux OS on ARM.\n\n  Own Id: OTP-15874 Aux Id: ERL-958, PR-2266\n\n- The fix in OTP-15871 was too conservative and disabled the offending load-time\n  optimization in some cases where it was safe.\n\n  Own Id: OTP-15881\n\n- Upgraded the ERTS internal PCRE library from version 8.42 to version 8.43. See\n  [http://pcre.org/original/changelog.txt](http://pcre.org/original/changelog.txt)\n  for information about changes made to PCRE. This library implements major\n  parts of the `m:re` regular expressions module.\n\n  Own Id: OTP-15889\n\n- Fix race condition when closing a socket while using `{active,N}` on Windows.\n\n  Own Id: OTP-15901 Aux Id: ERL-960 PR-2272\n\n- Allow more than one `-config` command line option to `erl` on Windows to\n  conform with other OS.\n\n  Own Id: OTP-15918 Aux Id: ERL-912\n\n- Fix so that ERL_FLAGS environment variable does not interfere with command\n  line arguments. Before this fix you could write:\n\n  `ERL_FLAGS=\"10\" erl +S`\n\n  and erlang would start as if `+S` had been given the argument `10`.\n\n  Own Id: OTP-15931\n\n- The bug with ID ERL-717 has been fixed. The functions `io:columns()` and\n  `io:rows()` only worked correctly inside interactive erlang shells before this\n  fix. These functions returned `{error,enotsup}` before this fix even if stdout\n  and stdin were connected to a terminal when they were invoked from an escript\n  or a program started with e.g., `erl -noshell`.\n\n  Own Id: OTP-15959 Aux Id: ERL-717\n\n- Do not use named label in `ethread.c` inline assemble. This allows erts to be\n  compiled using gcc 9.1.0 with LTO enabled.\n\n  Own Id: OTP-15971 Aux Id: PR-2333\n\n- `erlang:fun_to_list/1` will now escape the module and function name when\n  necessary.\n\n  Own Id: OTP-15975 Aux Id: ERL-1009\n\n- [`process_info(P,binary)`](`process_info/2`) would neglect to look through\n  heap fragments, potentially missing a few binaries associated with the\n  process.\n\n  Own Id: OTP-15978 Aux Id: ERIERL-366\n\n- HiPE is now automatically disabled on systems with non-glibc implementation\n  (for instance musl). This is because musl does not provide the API's for\n  guaranteeing that signals are delivered on the correct native stack.\n\n  Own Id: OTP-16037\n\n- Fixed bug triggered if a process is killed during call to\n  `persistent_term:put` or `persistent_term:erase`.\n\n  Own Id: OTP-16041\n\n- Add units to all memory slogans in the crash dump documentation.\n\n  Own Id: OTP-16042\n\n- Fix a bug in `binary_to_term` that would crash the emulator if a term larger\n  than 16GB was to be decoded.\n\n  Own Id: OTP-16058 Aux Id: PR-2382\n\n- Fixed bug related to an exiting process sending EXIT and DOWN signals to\n  remote linked/monitored processes. Bugs exists since OTP 22.0.\n\n  Own Id: OTP-16060","ref":"notes.html#fixed-bugs-and-malfunctions-165"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- `erlc` can now automatically use a compile server to avoid starting an Erlang\n  system for each file to be compiled in a multi-file project. See the\n  documentation for how to enable it.\n\n  Own Id: OTP-15738 Aux Id: PR-2361\n\n- The possibility to send ancillary data, in particular the TOS field, has been\n  added to `gen_udp:send/4,5`.\n\n  Own Id: OTP-15747 Aux Id: ERIERL-294\n\n- The net module has been split into 'net' (kernel) and prim_net (preloaded).\n\n  Own Id: OTP-15765\n\n- Socket counters now works as expected and can also be extracted with the (new)\n  info function.\n\n  Own Id: OTP-15818\n\n- `re:run()` now avoids validating utf8 in the subject more than once in the\n  same call. This validation could previously be performed multiple times when\n  the `global` option was passed.\n\n  Own Id: OTP-15831 Aux Id: ERL-876\n\n- The un-documented function `erlang:dist_get_stat/1` now returns the real value\n  of what the distribution queue contains instead of a boolean.\n\n  Own Id: OTP-15905 Aux Id: PR-2270\n\n- ETS `ordered_set` tables with `write_concurrency` enabled has got a\n  performance issue fixed. There were no limits for the values of internal\n  statistics counters before this fix. This could result in that the data\n  structure sometimes reacted slowly to a change in how many parallel processes\n  were using it.\n\n  Own Id: OTP-15906\n\n- Optimize the reception of large distribution messages.\n\n  Own Id: OTP-15926 Aux Id: PR-2291\n\n- Binary matching and functions like [`split_binary/2`](`split_binary/2`) will\n  now create heap binaries when the results are small enough, reducing the\n  chances of small sub-binaries keeping large binaries alive.\n\n  Own Id: OTP-15977 Aux Id: ERIERL-366\n\n- Fixed rare emulator crash in `instrument:allocations/0-1`.\n\n  Own Id: OTP-15983\n\n- Ports could pass very small binaries as reference counted off heap binaries to\n  processes. This could cause an unnecessary large memory usage and an\n  unnecessary load on the binary allocator. Small binaries are now always passed\n  as heap binaries to processes.\n\n  Own Id: OTP-16001 Aux Id: ERIERL-366\n\n- `unicode:characters_to_binary()` could return very small binaries as reference\n  counted off heap binaries. This could cause an unnecessary large memory usage\n  and an unnecessary load on the binary allocator. Small binaries are now always\n  returned as heap binaries.\n\n  Own Id: OTP-16002 Aux Id: ERIERL-366\n\n- Improved `erl_nif` documentation regarding `on_load` and Erlang stub/fallback\n  functions.\n\n  Own Id: OTP-16028 Aux Id: PR-2362\n\n- New feature `ets:info(_, binary)` to get information about all reference\n  counted binaries kept by a table. This is the same kind of debug information\n  that [`process_info(_, binary)`](`process_info/2`) returns for a process.\n\n  Own Id: OTP-16035 Aux Id: ERIERL-366","ref":"notes.html#improvements-and-new-features-39"},{"type":"extras","title":"Erts 10.4.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-4-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- An invalid value test caused the socket:setopt(Socket, ip, add_membership,\n  ip_mreq()) to fail with badarg. The same for drop_membership.\n\n  Own Id: OTP-15908 Aux Id: ERL-980\n\n- Fixed bug causing VM crash when doing textual dump of a process containing an\n  unhandled monitor down signal. Textual process dumps can be done with\n  `erlang:system_info(procs)`, trace feature `process_dump`, Erlang shell break\n  menu and a crashdump. Bug exist since OTP 21.0.\n\n  Own Id: OTP-15909 Aux Id: ERL-979\n\n- `lists:subtract/2` would produce incorrect results for some inputs on 64-bit\n  platforms.\n\n  Own Id: OTP-15938 Aux Id: ERL-986\n\n- Fixed a bug in the loader that was similar to `OTP-15938`, yielding incorrect\n  code for some inputs on 64-bit platforms.\n\n  Own Id: OTP-15939\n\n- Fixed bug causing scheduler threads in rare cases to block spinnning\n  indefinitely. Bug exists since OTP 21.0.\n\n  Own Id: OTP-15941 Aux Id: PR-2313","ref":"notes.html#fixed-bugs-and-malfunctions-166"},{"type":"extras","title":"Erts 10.4.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-4-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a buffer overflow when\n  [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`) and\n  `list_to_existing_atom/2` was used with the `latin1` encoding.\n\n  Own Id: OTP-15819 Aux Id: ERL-944\n\n- The runtime system disconnected a connection if it received an\n  [`exit/2`](`exit/2`) signal where the recipient was a process on an old\n  incarnation of the current node. That is, the receiving node had the same node\n  name, but another \"creation\" number. The signal will now just be dropped since\n  the receiving process no longer exists.\n\n  Own Id: OTP-15867 Aux Id: ERIERL-373","ref":"notes.html#fixed-bugs-and-malfunctions-167"},{"type":"extras","title":"Erts 10.4.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-4-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed [`process_info(Pid,reductions)`](`process_info/2`) to not categorically\n  increase reduction count of the measured process `Pid`. Repeated reduction\n  measure of an idle process will most often (but not guaranteed) return the\n  same value, like it behaved before OTP 21.3.8.\n\n  Own Id: OTP-15865 Aux Id: ERL-964\n\n- Fixed an incorrect load-time optimization that could cause a crash when\n  extracting deeply nested tuple elements.\n\n  Own Id: OTP-15871 Aux Id: ERIERL-374\n\n- Fix bug causing VM crash when pressing P for \"proc info\" in Erlang shell break\n  menu. Bug exists since OTP 22.0.\n\n  Own Id: OTP-15873 Aux Id: ERL-965","ref":"notes.html#fixed-bugs-and-malfunctions-168"},{"type":"extras","title":"Erts 10.4.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-4-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- In nested use of `try`/`catch`, rethrowing an exception using `erlang:raise/3`\n  with a different class would not always be able to change the class of the\n  exception.\n\n  Own Id: OTP-15834 Aux Id: ERIERL-367","ref":"notes.html#fixed-bugs-and-malfunctions-169"},{"type":"extras","title":"Erts 10.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Do not allocate new bitstring/binary when an empty binary is appended.\n\n  Own Id: OTP-15535 Aux Id: PR-2055\n\n- Document that [`process_info(_, current_function)`](`process_info/2`) can\n  return `{current_function, undefined}` in case of execution of native code.\n\n  Own Id: OTP-15543 Aux Id: PR-2089\n\n- Fixed bug in `ets:select`, `ets:match` and friends which could cause the table\n  to remain fixated (as if `ets:safe_fixtable` had been called) after the call\n  returned. This could happen for `protected` tables if another concurrent\n  running process transferred table ownership to the process during its\n  ets:select/match call. Ownership can be transferred using either\n  `ets:give_away` or the `heir` table option.\n\n  Own Id: OTP-15672\n\n- Fixed a Windows-specific bug in `file:list_dir/1` that caused it to misbehave\n  on network shares.\n\n  Own Id: OTP-15693\n\n- Fixed bug when calling `enif_whereis_*` from NIF resource destructor. Symptoms\n  could be emulator crash or hanging scheduler threads.\n\n  Own Id: OTP-15694 Aux Id: ERL-863\n\n- Fixed a bug in the error case of [`apply/3`](`apply/3`), where the exception\n  would erroneously have an empty argument list in some cases.\n\n  Own Id: OTP-15698\n\n- A bug has been fixed in the `maps` implementation that could cause a crash or\n  memory usage to grow until the machine ran out of memory. This could happen\n  when inserting a new key-value pair with a key `K1` containing a binary `B1`\n  into a map `M` having a key `K2` with a binary `B2` if the following\n  conditions were met:\n\n  - `B1 =/= B2`\n  - `size(B1) >= 4294967296`\n  - `size(B2) >= 4294967296`\n  - `size(M) >= 32`\n  - `(size(B1) rem 4294967296) == (size(B2) rem 4294967296)`\n  - the first `(size(B1) rem 4294967296)` bytes are the same both in `B1` and\n    `B2`\n  - substituting `B1` in `K1` with `B2` would create a term with the same value\n    as `K2`\n\n  The root cause of the problem is that the `maps` implementation only hashed\n  the first `(X rem 4294967296)` bytes of binaries so that different binaries\n  could get the same hash value independently of the hash seed.\n\n  Own Id: OTP-15707\n\n- `term_to_binary()` and distributed sends will now throw a `system_limit`\n  exception instead of producing erroneous results when trying to encode a\n  binary larger than 4 GB.\n\n  Own Id: OTP-15708\n\n- The vxworks configure has been updated to respect the environment CFLAGS.\n\n  Own Id: OTP-15773\n\n- Fix configure to not enable PGO (profile guided optimizations) when linking of\n  the PGO binary fails. For instance this happens when there is no gcov lib\n  installed.\n\n  Own Id: OTP-15788\n\n- Fix bug on OpenBSD where sockets using `active, true` or `active, N` could\n  cause the system to live lock. The bug was introduced in erts-10.2 (OTP-21.2).\n\n  Own Id: OTP-15791","ref":"notes.html#fixed-bugs-and-malfunctions-170"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add support for Erlang Distribution protocol to split the payload of large\n  signals into several fragments. This allows other processes to communicate\n  uninterrupted during the transmission of these signals.\n\n  Own Id: OTP-13397\n\n- A simple socket API is provided through the socket module. This is a low level\n  API that does _not_ replace gen\\_\\[tcp|udp|sctp]. It is intended to\n  _eventually_ replace the inet driver, but not the high level gen-modules\n  (gen_tcp, gen_udp and gen_sctp). It also provides a basic API that facilitates\n  the implementation of other protocols, that is TCP, UDP and SCTP.\n\n  Known issues are; No support for the Windows OS (currently).\n\n  Own Id: OTP-14831\n\n- Added NIF functions\n  [`enif_set_pid_undefined`](erl_nif.md#enif_set_pid_undefined),\n  [`enif_is_pid_undefined`](erl_nif.md#enif_is_pid_undefined) and\n  [`enif_compare_pids`](erl_nif.md#enif_compare_pids).\n\n  Own Id: OTP-15011 Aux Id: PR-2147\n\n- Underutilized memory segments (carriers) can now move between all allocator\n  instances, rather than just between instances of the same type, which greatly\n  reduces memory usage in some scenarios.\n\n  Own Id: OTP-15063\n\n- The emulator will now mark free blocks in pooled carriers with\n  `madvise(2) + MADV_FREE` (or similar), letting the OS reclaim the associated\n  physical memory if necessary.\n\n  Own Id: OTP-15075\n\n- New `ERL_NIF_SELECT_CANCEL` feature added to `enif_select` in order to cancel\n  (or \"deselect\") a read or write event on a previously selected file\n  descriptor.\n\n  Own Id: OTP-15095\n\n- ETS option `write_concurrency` now also affects and improves the scalability\n  of `ordered_set` tables. The implementation is based on a data structure\n  called contention adapting search tree, where the lock granularity adapts to\n  the actual amount of concurrency exploited by the applications in runtime.\n\n  Own Id: OTP-15128\n\n- Build configuration of the `crypto` application has been moved from the `erts`\n  application into the `crypto` application.\n\n  Own Id: OTP-15129\n\n- Anonymous functions that don't capture environment are now created at\n  load-time instead of in run-time.\n\n  Own Id: OTP-15195 Aux Id: PR-1812\n\n- Optimize updates of maps with identical keys and values. E.g. in the example\n  below the original Map will be reused as the return of the update.\n\n  1> Map = #\\{ a => b \\}. #\\{ a => b \\} 2> Map#\\{ a := b \\}.\n\n  Own Id: OTP-15211 Aux Id: PR-1889\n\n- Optimize `binary:match/2` and `binary:matches/2` to use memchr internally.\n\n  Own Id: OTP-15238 Aux Id: PR-1803\n\n- The runtime system used to terminate when a message larger than 2 Gb was\n  passed over the distribution. The send operation will now instead throw a\n  `system_limit` exception.\n\n  Own Id: OTP-15261\n\n- Change the first module called by erts to be named erl_init instead of\n  otp_ring0. systools in sasl have been updated to reflect this change.\n\n  Own Id: OTP-15336 Aux Id: PR-1825\n\n- Minor adjustments made to build system for parallel configure.\n\n  Own Id: OTP-15340 Aux Id: OTP-14625\n\n- Two new NIF interface functions `enif_select_read` and `enif_select_write`.\n  They are similar to existing `enif_select` but allow a custom event message as\n  an argument.\n\n  Own Id: OTP-15349 Aux Id: PR-2084\n\n- The embedded copy of `zlib` has been updated from `1.2.8` to `1.2.11`.\n\n  Note that this copy is only used as a fallback when the target platform\n  doesn't provide any `zlib` development libraries. If your system provides\n  `zlib` then it will be used even if it is older than `1.2.11`.\n\n  Own Id: OTP-15351 Aux Id: ERL-749\n\n- New NIF function `enif_make_monitor_term`.\n\n  Own Id: OTP-15362 Aux Id: PR-2127\n\n- Appending lists (The ++ operator) will now yield properly on large inputs.\n\n  Own Id: OTP-15427\n\n- The [`length/1`](`length/1`) BIF used to calculate the length of the list in\n  one go without yielding, even if the list was very long. In OTP 22,\n  [`length/1`](`length/1`) will yield when called with long lists.\n\n  Own Id: OTP-15439\n\n- Processes sending messages are now punished with a reduction cost based on\n  message size. That is, a process sending a large message will yield earlier\n  than before.\n\n  Own Id: OTP-15513 Aux Id: ERL-773\n\n- The transitory emulator option `+ztma true` (introduced in OTP 21.3) has been\n  removed.\n\n  Own Id: OTP-15581 Aux Id: OTP-15580\n\n- In OTP 22, HiPE (the native code compiler) is not fully functional. The\n  reasons for this are:\n\n  There are new BEAM instructions for binary matching that the HiPE native code\n  compiler does not support.\n\n  The new optimizations in the Erlang compiler create new combination of\n  instructions that HiPE currently does not handle correctly.\n\n  If erlc is invoked with the `+native` option, and if any of the new binary\n  matching instructions are used, the compiler will issue a warning and produce\n  a BEAM file without native code.\n\n  Own Id: OTP-15596\n\n- The termination behaviour of processes has changed to allow processes to yield\n  while sending link exit/monitor down signals.\n\n  The erl crash dump has been expanded to now also include processes that are\n  termeinating but have not yet terminated.\n\n  Own Id: OTP-15610\n\n- The dist messages EXIT, EXIT2 and MONITOR_DOWN have been updated with new\n  versions that send the reason term as part of the payload of the message\n  instead of as part of the control message.\n\n  The old versions are still present and can be used when communicating with\n  nodes that don't support the new versions.\n\n  Own Id: OTP-15611\n\n- When sending messages, exit, exit2 and monitor down distributed signals, the\n  process sending will now yield appropriately.\n\n  This means that a terminating process will yield and possibly be suspended on\n  busy distribution entries while they are terminating. This means that any\n  memory held by such processes will not be released until after all\n  exit/monitor down signals have been sent.\n\n  Own Id: OTP-15612\n\n- All external pids/ports/refs created by erlang:list_to_pid/port/ref debug\n  functions now compare equal to any other pid/port/ref with the same number\n  from that node.\n\n  Before this change they compared differently because the node creation of the\n  pid/port/ref did not compare equal to any real pid/port/ref creation.\n\n  This will mostly effect pids/ports/refs typed in the shell.\n\n  Own Id: OTP-15613\n\n- The `persistent_term` functions [`put/2`](`put/2`) and [`erase/1`](`erase/1`)\n  are now yielding.\n\n  Own Id: OTP-15615\n\n- A new\n  [`erlang:dist_ctrl_set_opt(DHandle, get_size, Value)`](`erlang:dist_ctrl_set_opt/3`)\n  option has been added. This option makes it possible to configure the\n  distribution channel identified by `DHandle` so that\n  [`erlang:dist_ctrl_get_data(DHandle)`](`erlang:dist_ctrl_get_data/1`) also\n  returns the size of the data to pass over the channel.\n\n  Own Id: OTP-15617\n\n- Previously, all ETS tables used centralized counter variables to keep track of\n  the number of items stored and the amount of memory consumed. These counters\n  can cause scalability problems (especially on big NUMA systems). This change\n  adds an implementation of a decentralized counter and modifies the\n  implementation of ETS so that ETS tables of type `ordered_set` with\n  `write_concurrency` enabled use the decentralized counter. Experiments\n  indicate that this change substantially improves the scalability of ETS\n  `ordered_set` tables with `write_concurrency` enabled in scenarios with\n  frequent `ets:insert/2` and `ets:delete/2` calls.\n\n  Own Id: OTP-15623 Aux Id: PR-2190\n\n- The [`iolist_size/1`](`iolist_size/1`) function is now yielding which means\n  that an Erlang/OTP system will be responsive even if the applications running\n  on the system frequently call [`iolist_size/1`](`iolist_size/1`) with large\n  iolists.\n\n  Own Id: OTP-15631\n\n- A simple test suite for the net module has been added.\n\n  Own Id: OTP-15635\n\n- Added the NIF function `enif_term_type`, which helps avoid long sequences of\n  `enif_is_xyz` by returning the type of the given term. This is especially\n  helpful for NIFs that serialize terms, such as JSON encoders, where it can\n  improve both performance and readability.\n\n  Own Id: OTP-15640\n\n- The last call optimization is now applied to BIFs. When calling a BIF in the\n  tail position of a function, the return address and stack frame will now be\n  discarded before calling the BIF. As a consequence of this change, the\n  immediate caller of a tail-called BIF will no longer be available in stack\n  backtraces.\n\n  Own Id: OTP-15674 Aux Id: PR-2177\n\n- Fix GC bug where distributed messages in a processes mailbox would cause extra\n  GCs. This can be very expensive if there many messages in the mailbox.\n\n  Own Id: OTP-15703\n\n- Internal documentation has now been added to the _Erts_ and _Compiler_\n  applications.\n\n  The internal documents for _Erts_ describe miscellaneous interesting\n  implementation details. Those details can change at any time.\n\n  The internal documentation for _Compiler_ documents the API for the Core\n  Erlang modules. While we will not change those APIs without good reason, we\n  don't give the same guarantees about backward compatibility as for the rest of\n  the APIs in OTP.\n\n  Own Id: OTP-15715\n\n- The performance of non-bignum integer arithmetic has been improved.\n\n  Own Id: OTP-15740\n\n- The `-remsh` option to `erl` now automatically adds the local systems hostname\n  to the target node if no nodename is given. e.g.\n\n  `erl -name foo -remsh bar`  \n  `erl -sname foo -remsh bar`\n\n  Own Id: OTP-15794 Aux Id: PR-2219","ref":"notes.html#improvements-and-new-features-40"},{"type":"extras","title":"Erts 10.3.5.19 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-19"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug in match spec compilator seen to cause a stack overflow crash on debug\n  VM for certain match specs. Could potentially cause problems for standard VM,\n  but has not been verified. Match specs are used by `ets:match/select`\n  functions and `erlang:trace_pattern`.\n\n  Own Id: OTP-17379 Aux Id: PR-4804\n\n- A call to `port_command()` could cause a scheduler to end up in an eternal\n  loop if the port was busy and the calling process had incoming signals at the\n  time of the call. This bug was introduced in OTP 23.3.2 (ERTS version 11.2.1),\n  OTP 22.3.4.18 (ERTS version 10.7.2.10), and OTP 21.3.8.23 (ERTS version\n  10.3.5.18).\n\n  Own Id: OTP-17448 Aux Id: GH-4898, PR-4903, OTP-17291","ref":"notes.html#fixed-bugs-and-malfunctions-171"},{"type":"extras","title":"Erts 10.3.5.18 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-18"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The following signals could pass before other signals from the same sender to\n  the same receiver. That is, these signals could arrive too early.\n\n  - `garbage-collect` request. Sent from one process to another using one of the\n    `garbage_collect/0` BIFs.\n  - `check-process-code` request. Sent from one process to another using one of\n    the `check_process_code()` BIFs.\n  - `is-process-alive` reply. Sent as a response to a process calling the\n    `is_process_alive()` BIF.\n  - `process-info` reply. Sent as a response to a process calling one of the\n    `process_info()` BIFs.\n  - `port-command` reply. Sent as a response to a process calling one of the\n    `port_command()` BIFs.\n  - `port-connect` reply. Sent as a response to a process calling the\n    `port_connect()` BIF.\n  - `port-close` reply. Sent as a response to a process calling the\n    `port_close()` BIF.\n  - `port-control` reply. Sent as a response to a process calling the\n    `port_control()` BIF.\n  - `port-call` reply. Sent as a response to a process calling the `port_call()`\n    BIF.\n  - `port-info` reply. Sent as a response to a process calling one of the\n    `port_info()` BIFs.\n\n  Own Id: OTP-17291\n\n- A garbage collection of a literal area missed messages that entirely consisted\n  of a term in a literal area. This could in turn lead to a crash of the runtime\n  system.\n\n  Own Id: OTP-17307\n\n- A call to [`process_flag(message_queue_data, off_heap)`](`process_flag/2`)\n  could cause a crash of the runtime system when sequential tracing was enabled.\n\n  Own Id: OTP-17349","ref":"notes.html#fixed-bugs-and-malfunctions-172"},{"type":"extras","title":"Erts 10.3.5.17 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-17"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in the timer implementation which could cause timers that were set\n  to more than 37.25 hours in the future to be delayed. This could occur if\n  there were multiple timers scheduled to be triggered very close in time, but\n  still at different times, and the scheduler thread handling the timers was not\n  able to handle them quickly enough. Delayed timers were in this case triggered\n  when another unrelated timer was triggered.\n\n  Own Id: OTP-17253","ref":"notes.html#fixed-bugs-and-malfunctions-173"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Fix a file descriptor leak when using sendfile and the remote side closes the\n  connection. This bug has been present since OTP-21.0.\n\n  Own Id: OTP-17244","ref":"notes.html#improvements-and-new-features-41"},{"type":"extras","title":"Erts 10.3.5.16 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-16"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug that could cause some work scheduled for execution on scheduler\n  threads to be delayed until other similar work appeared. Beside delaying\n  various cleanup of internal data structures also the following could be\n  delayed:\n\n  - Termination of a distribution controller process\n  - Disabling of the distribution on a node\n  - Gathering of memory allocator information using the `instrument` module\n  - Enabling, disabling, and gathering of `msacc` information\n  - Delivery of `'CHANGE'` messages when time offset is monitored\n  - A call to `erlang:cancel_timer()`\n  - A call to `erlang:read_timer()`\n  - A call to `erlang:statistics(io | garbage_collection | scheduler_wall_time)`\n  - A call to `ets:all()`\n  - A call to `erlang:memory()`\n  - A call to `erlang:system_info({allocator | allocator_sizes, _})`\n  - A call to `erlang:trace_delivered()`\n\n  The bug existed on runtime systems running on all types of hardware except for\n  x86/x86_64.\n\n  Own Id: OTP-17185","ref":"notes.html#fixed-bugs-and-malfunctions-174"},{"type":"extras","title":"Erts 10.3.5.15 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed rare distribution bug in race between received signal\n  (link/monitor/spawn_request/spawn_reply) and disconnection. Symptom: VM crash.\n  Since: OTP 21.0.\n\n  Own Id: OTP-16869 Aux Id: ERL-1337\n\n- The `suspend_process()` and `resume_process()` BIFs did not check their\n  arguments properly which could cause an emulator crash.\n\n  Own Id: OTP-17080\n\n- The runtime system would get into an infinite loop if the runtime system was\n  started with more than 1023 file descriptors already open.\n\n  Own Id: OTP-17088 Aux Id: ERIERL-580","ref":"notes.html#fixed-bugs-and-malfunctions-175"},{"type":"extras","title":"Erts 10.3.5.14 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The ERTS internal I/O poll implementation could get into an inconsistent state\n  causing input events to be ignored.\n\n  Own Id: OTP-16780 Aux Id: PR-2701\n\n- The documentation of [`statistics(run_queue)`](`statistics/1`) erroneously\n  stated that it returns the total length of all normal run queues when it is\n  the total length of all normal and dirty CPU run queues that is returned. The\n  documentation has been updated to reflect the actual behavior.\n\n  Own Id: OTP-16866 Aux Id: ERL-1355\n\n- Two bugs in the ERTS internal thread wakeup functionality have been fixed.\n  These bugs mainly hit when all threads in the system tried to go to sleep.\n  When the bugs were triggered, certain operations were delayed until a thread\n  woke up due to some other reason. Most important operations effected were code\n  loading, persistent term updates, and memory deallocation.\n\n  Own Id: OTP-16870\n\n- Fixed bug in `ets:select_replace/2` on `compressed` tables that could produce\n  faulty results or VM crash. Bug exists since OTP 20.\n\n  Own Id: OTP-16874 Aux Id: ERL-1356, PR-2763","ref":"notes.html#fixed-bugs-and-malfunctions-176"},{"type":"extras","title":"Erts 10.3.5.13 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- An unintentional reuse of an already used emulator internal event object could\n  cause a wakeup signal to a thread to be lost. In worst case this could cause\n  the runtime system to hang. This hang was however quite rare.\n\n  Own Id: OTP-16766 Aux Id: ERL-1304\n\n- NIF threads and driver threads on non-Linux systems leaked internal resources\n  when terminating. On Windows these resources were one event per thread. On\n  most other systems one mutex and one condition variable per thread. On these\n  other systems that also lacked `pthread_cond_timedwait()` also a pipe with its\n  file descriptors was leaked.\n\n  Own Id: OTP-16772 Aux Id: ERL-1304","ref":"notes.html#fixed-bugs-and-malfunctions-177"},{"type":"extras","title":"Erts 10.3.5.12 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The functionality utilized by BIFs for temporary disabling of garbage\n  collection while yielding could cause system task queues to become\n  inconsistent on a process executing such a BIF. Process system tasks are for\n  example utilized when purging code, garbage collecting literal data, and when\n  issuing an ordinary garbage collection from another process.\n\n  The bug does not trigger frequently. Multiple code purges in direct sequence\n  makes it more likely that this bug is triggered. In the cases observed, this\n  has resulted in a hanging code purge operation.\n\n  Own Id: OTP-16639 Aux Id: ERL-1236\n\n- A literal area could prematurely be released before all uses of it had been\n  removed. This occurred either when a terminating process had a complex exit\n  reason referring to a literal that concurrently was removed, or when a\n  terminating process continued executing a dirty NIF accessing a literal (via\n  the heap) that concurrently was removed.\n\n  Own Id: OTP-16640 Aux Id: OTP-16193\n\n- The VM could potentially crash when checking process code of a process that\n  terminated while executing a dirty NIF. The checking of process code is part\n  of a code purge operation.\n\n  Own Id: OTP-16641\n\n- System tasks of `low` priority were not interleaved with `normal` priority\n  system tasks as they should. This could potentially delay garbage collection\n  of another process longer than intended if the garbage collection was\n  requested from a `low` priority process.\n\n  Own Id: OTP-16642","ref":"notes.html#fixed-bugs-and-malfunctions-178"},{"type":"extras","title":"Erts 10.3.5.11 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [re:run(Subject, RE, \\[unicode])](`re:run/3`) returned `nomatch` instead of\n  failing with a `badarg` error exception when `Subject` contained illegal utf8\n  and `RE` was passed as a binary. This has been corrected along with\n  corrections of reduction counting in `re:run()` error cases.\n\n  Own Id: OTP-16553\n\n- Fixed a bug that could cause the emulator to crash when purging modules or\n  persistent terms.\n\n  Own Id: OTP-16555 Aux Id: ERL-1188","ref":"notes.html#fixed-bugs-and-malfunctions-179"},{"type":"extras","title":"Erts 10.3.5.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in `ets:update_counter/4`, when called with an invalid `UpdateOp`\n  and a `Key` that does not exist, causing `ets:info(T,size)` to return\n  incorrect values. Bug exists since OTP-19.0.2.\n\n  Own Id: OTP-16404 Aux Id: ERL-1127\n\n- A process could get into an inconsistent state where it was runnable, but\n  never scheduled for execution. This could occur when a mix of `normal` and\n  `low` priority processes where scheduled on the same type of dirty scheduler\n  simultaneously.\n\n  Own Id: OTP-16446 Aux Id: ERL-1157\n\n- Corrected the valid range of the `erl` command line argument\n  [`+SDio  `](erl_cmd.md#%2BSDio) from `0..1024` to\n  `1..1024`. `+SDio 0` was erroneously allowed which just caused the VM to crash\n  on the first dirty I/O job scheduled.\n\n  Own Id: OTP-16481","ref":"notes.html#fixed-bugs-and-malfunctions-180"},{"type":"extras","title":"Erts 10.3.5.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process could end up in a state where it got endlessly rescheduled without\n  making any progress. This occurred when a system task, such as check of\n  process code (part of a code purge), was scheduled on a high priority process\n  trying to execute on a dirty scheduler.\n\n  Own Id: OTP-16436 Aux Id: ERL-1152\n\n- Fixed bug in `erlang:list_to_ref/1` when called with a reference created by a\n  remote note. Function [`list_to_ref/1`](`list_to_ref/1`) is intended for\n  debugging and not to be used in application programs. Bug exist since OTP\n  20.0.\n\n  Own Id: OTP-16438","ref":"notes.html#fixed-bugs-and-malfunctions-181"},{"type":"extras","title":"Erts 10.3.5.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Taking a scheduler offline could cause timers set while executing on that\n  scheduler to be delayed until the scheduler was put online again. This bug was\n  introduced in ERTS version 10.0 (OTP 21.0).\n\n  Own Id: OTP-16371\n\n- A process calling\n  [`erlang:system_flag(multi_scheduling, block)`](`m:erlang#system_flag_multi_scheduling`)\n  could end up blocked waiting for the operation to complete indefinitely.\n\n  Own Id: OTP-16379","ref":"notes.html#fixed-bugs-and-malfunctions-182"},{"type":"extras","title":"Erts 10.3.5.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A literal area could prematurely be released before all uses of it had been\n  removed. This occurred either when a terminating process had a complex exit\n  reason referring to a literal that concurrently was removed, or when a\n  terminating process continued executing a dirty NIF accessing a literal (via\n  the heap) that concurrently was removed.\n\n  Own Id: OTP-16193\n\n- Fix bug causing VM crash due to memory corruption of distribution entry.\n  Probability of crash increases if Erlang distribution is frequently\n  disconnected and reestablished towards same node names. Bug exists since\n  OTP-21.0.\n\n  Own Id: OTP-16224 Aux Id: ERL-1044\n\n- Fix bug where the receive marker used by the runtime to do the receive queue\n  optimization could be incorrectly set. The symptom of this would be that a\n  message that should match in a receive never matches.\n\n  The bug requires the OTP-22 compiler and multiple selective receives to\n  trigger. See OTP-16219 for details about the bug fix in the compiler.\n\n  Own Id: OTP-16241 Aux Id: ERL-1076 OTP-16219\n\n- Fixed bug causing crash of VM built with configuration\n  `--enable--sharing-preserving`. Provoked when a sent message contains both a\n  bit string and the heap binary (< 65 bytes) which the bit string was matched\n  from. Bug exists since OTP-19.0 but has seen to be easier to provoke since\n  OTP-22.1.\n\n  Own Id: OTP-16265 Aux Id: ERL-1064","ref":"notes.html#fixed-bugs-and-malfunctions-183"},{"type":"extras","title":"Erts 10.3.5.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix a bug in `binary_to_term` that would crash the emulator if a term larger\n  than 16GB was to be decoded.\n\n  Own Id: OTP-16058 Aux Id: PR-2382\n\n- When communicating with a simultaneously exiting port via the\n  `erlang:port_*()` BIFs one could sometimes get stray `{Ref, What}` messages.\n  Where `Ref` was a reference and `What` usually were the atom `badarg`.\n\n  Own Id: OTP-16107 Aux Id: ERL-1049","ref":"notes.html#fixed-bugs-and-malfunctions-184"},{"type":"extras","title":"Erts 10.3.5.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [`process_info(P,binary)`](`process_info/2`) would neglect to look through\n  heap fragments, potentially missing a few binaries associated with the\n  process.\n\n  Own Id: OTP-15978 Aux Id: ERIERL-366\n\n- Fixed bug triggered if a process is killed during call to\n  `persistent_term:put` or `persistent_term:erase`.\n\n  Own Id: OTP-16041","ref":"notes.html#fixed-bugs-and-malfunctions-185"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Fixed rare emulator crash in `instrument:allocations/0-1`.\n\n  Own Id: OTP-15983","ref":"notes.html#improvements-and-new-features-42"},{"type":"extras","title":"Erts 10.3.5.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug causing VM crash when doing textual dump of a process containing an\n  unhandled monitor down signal. Textual process dumps can be done with\n  `erlang:system_info(procs)`, trace feature `process_dump`, Erlang shell break\n  menu and a crashdump. Bug exist since OTP 21.0.\n\n  Own Id: OTP-15909 Aux Id: ERL-979\n\n- `lists:subtract/2` would produce incorrect results for some inputs on 64-bit\n  platforms.\n\n  Own Id: OTP-15938 Aux Id: ERL-986\n\n- Fixed a bug in the loader that was similar to `OTP-15938`, yielding incorrect\n  code for some inputs on 64-bit platforms.\n\n  Own Id: OTP-15939\n\n- Fixed bug causing scheduler threads in rare cases to block spinnning\n  indefinitely. Bug exists since OTP 21.0.\n\n  Own Id: OTP-15941 Aux Id: PR-2313","ref":"notes.html#fixed-bugs-and-malfunctions-186"},{"type":"extras","title":"Erts 10.3.5.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If you set `{linger,{true,0}}` on a `gen_tcp` listen socket, accept a\n  connection on that socket, and then close the accepted socket, now the linger\n  zero setting is transferred to the accepted socket. Before this correction\n  that information was lost and the close behaviour on the accepted socket\n  incorrect.\n\n  Own Id: OTP-15370 Aux Id: ERIERL-353\n\n- Fixed [`process_info(Pid,reductions)`](`process_info/2`) to not categorically\n  increase reduction count of the measured process `Pid`. Repeated reduction\n  measure of an idle process will most often (but not guaranteed) return the\n  same value, like it behaved before OTP 21.3.8.\n\n  Own Id: OTP-15865 Aux Id: ERL-964\n\n- The runtime system disconnected a connection if it received an\n  [`exit/2`](`exit/2`) signal where the recipient was a process on an old\n  incarnation of the current node. That is, the receiving node had the same node\n  name, but another \"creation\" number. The signal will now just be dropped since\n  the receiving process no longer exists.\n\n  Own Id: OTP-15867 Aux Id: ERIERL-373","ref":"notes.html#fixed-bugs-and-malfunctions-187"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The possibility to send ancillary data, in particular the TOS field, has been\n  added to `gen_udp:send/4,5`.\n\n  Own Id: OTP-15747 Aux Id: ERIERL-294","ref":"notes.html#improvements-and-new-features-43"},{"type":"extras","title":"Erts 10.3.5.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- In nested use of `try`/`catch`, rethrowing an exception using `erlang:raise/3`\n  with a different class would not always be able to change the class of the\n  exception.\n\n  Own Id: OTP-15834 Aux Id: ERIERL-367\n\n- Fixed bug in `seq_trace:set_token(label,Term)` which could cause VM crash if\n  `Term` was heap allocated (not an atom, small integer, local pid or port). Bug\n  exists since OTP 21.0 when terms other than small integers were first allowed\n  as labels.\n\n  Own Id: OTP-15849 Aux Id: ERL-700\n\n- Fix `seq_trace:print/2` not to raise `badarg` exception if label is not a\n  small integer. Bug exists since OTP 21.0.\n\n  Own Id: OTP-15859 Aux Id: ERL-700","ref":"notes.html#fixed-bugs-and-malfunctions-188"},{"type":"extras","title":"Erts 10.3.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a buffer overflow when\n  [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`) and\n  `list_to_existing_atom/2` was used with the `latin1` encoding.\n\n  Own Id: OTP-15819 Aux Id: ERL-944","ref":"notes.html#fixed-bugs-and-malfunctions-189"},{"type":"extras","title":"Erts 10.3.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed more bugs in [`process_info(reductions)`](`process_info/1`) causing it\n  to sometimes behave non-monotonic. That is, a subsequent call toward the same\n  process could return a lower reduction value.\n\n  Own Id: OTP-15793 Aux Id: ERIERL-337, OTP-15709","ref":"notes.html#fixed-bugs-and-malfunctions-190"},{"type":"extras","title":"Erts 10.3.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Add missing documentation of new external tags `NEW_PID`, `NEW_PORT` and\n  `NEWER_REFERENCE` introduced in OTP 19.\n\n  These new tags are planned to be \"activated\" in OTP 23 when distribution\n  capability flag `DFLAG_BIG_CREATION` becomes mandatory. Older nodes (>= 19)\n  are able to decode these new tags and send them back to the new node. Nodes\n  older than OTP 23 will however never encode their own local pids, ports and\n  references using the new tags.\n\n  Own Id: OTP-15766","ref":"notes.html#fixed-bugs-and-malfunctions-191"},{"type":"extras","title":"Erts 10.3.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix `erlang:open_port/2` with the `fd` option to correctly cleanup the pollset\n  when the port is closed. Before this fix there would be error printouts sent\n  to logger when the same fd was reused in a new port.\n\n  Own Id: OTP-15753 Aux Id: ERL-900","ref":"notes.html#fixed-bugs-and-malfunctions-192"},{"type":"extras","title":"Erts 10.3.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in `seq_trace:reset_trace/0` that could crash the emulator.\n\n  Own Id: OTP-15704\n\n- Fixed bug in [`process_info(reductions)`](`process_info/1`) causing it to\n  sometimes return invalid results.\n\n  Own Id: OTP-15709 Aux Id: ERIERL-337","ref":"notes.html#fixed-bugs-and-malfunctions-193"},{"type":"extras","title":"Erts 10.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If a suspend/resume signal pair was sent to a process while it was executing\n  dirty, the receiving process could later end up in a suspended state\n  indefinitely. This bug was introduced in ERTS version 10.0 (OTP 21.0).\n\n  Suspend/resume signals are sent from\n  [`erlang:suspend_process()`](`erlang:suspend_process/1`)/[`erlang:resume_process()`](`erlang:resume_process/1`).\n  The `m:dbg` trace tool utilize this functionality and could thus trigger this\n  bug.\n\n  Own Id: OTP-15688\n\n- Fix a possible deadlock when terminating the ERTS caused by a dirty scheduler\n  not releasing it's run-queue lock when terminating.\n\n  Own Id: OTP-15690 Aux Id: PR-2172","ref":"notes.html#fixed-bugs-and-malfunctions-194"},{"type":"extras","title":"Erts 10.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- When multiplying a number by itself, a word beyond the number on the heap\n  could be read (and ignored). This bug was extremely unlikely to actually cause\n  a real problem.\n\n  Own Id: OTP-15484\n\n- Fix bug where doing `seq_trace:reset_trace()` while another process was doing\n  a garbage collection could cause the run-time system to segfault.\n\n  Own Id: OTP-15490\n\n- Fix reading of ancillary data from packet oriented sockets on old Linux kernel\n  versions. Without this fix, getting the data would cause the port to enter an\n  infinite loop.\n\n  Own Id: OTP-15494\n\n- Fix bug where crash dumping or doing `erlang:system_info(procs)` while another\n  process was doing a garbage collection could cause the run-time system to\n  segfault.\n\n  Own Id: OTP-15527\n\n- Fix `erlang:system_info(kernel_poll)` to return correct value. Before this\n  fix, the call always returned `false`.\n\n  Own Id: OTP-15556\n\n- Fix bug in `enif_make_map_from_arrays` that would produce broken maps when\n  number of keys were 32. Bug exists since OTP 21.0.\n\n  Own Id: OTP-15567\n\n- Fix a bug in `binary:encode_unsigned` that may cause a read of uninitialized\n  memory.\n\n  The bug existed since the function was added (OTP R16B02).\n\n  Own Id: OTP-15583 Aux Id: PR-2118\n\n- Fixed a bug that could cause `heart` to kill an exiting node before it had\n  time to flush all buffered writes. If environment variable\n  `HEART_KILL_SIGNAL=SIGABRT` was set a superfluous core dump could also be\n  generated.\n\n  Own Id: OTP-15599 Aux Id: ERIERL-298\n\n- Fix `enif_consume_timeslice` to be a no-op on dirty scheduler and not crash\n  debug compiled emulator.\n\n  Own Id: OTP-15604\n\n- Fixed macro redefinition warnings.\n\n  Own Id: OTP-15629\n\n- `to_erl` fixed to not garble terminal input beyond 7-bit ASCII.\n\n  Own Id: OTP-15650 Aux Id: ERL-854, PR-2161\n\n- Minor fixes for `make clean`.\n\n  Own Id: OTP-15657\n\n- Fixed a bug in all `ets:select*` and `ets:match*` functions that could in some\n  rare cases lead to very poor performance.\n\n  Own Id: OTP-15660 Aux Id: ERL-869","ref":"notes.html#fixed-bugs-and-malfunctions-195"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add `erlang:system_flag(system_logger, Pid)` and\n  `erlang:system_info(system_logger)`. This system_flag can be used to set the\n  process that will receive the logging messages generated by ERTS.\n\n  Own Id: OTP-15375\n\n- [`integer_to_list/2`](`integer_to_list/2`) and\n  [`integer_to_binary/2`](`integer_to_binary/2`) are now implemented in C,\n  improving their performance.\n\n  Own Id: OTP-15503 Aux Id: PR-2052\n\n- Improved `term_to_binary` to do more fair reduction count and yielding when\n  encoding large byte lists (strings).\n\n  Own Id: OTP-15514 Aux Id: ERL-774\n\n- Made internal port drivers more robust against `erlang:port_control` with\n  invalid arguments and added documentation warnings about such abuse.\n\n  Own Id: OTP-15555 Aux Id: ERIERL-231\n\n- Fix bug on NetBSD where the `exit_status` from a port program would never be\n  sent.\n\n  Own Id: OTP-15558 Aux Id: ERL-725\n\n- There is a new function `persistent:term(Key, Default)` to allow specifying a\n  default when looking up a persistent term.\n\n  Own Id: OTP-15576 Aux Id: ERL-843\n\n- A transitory emulator option '`+ztma true`' has been added to allow running\n  existing BEAM code that relies on \"tuple calls\" (dispatch on parameterized\n  modules) which has been compiled under OTP 20 or earlier. This option will be\n  removed in OTP 22, so such modules should eventually be recompiled with the\n  `+tuple_calls` option.\n\n  Own Id: OTP-15580 Aux Id: PR-2113","ref":"notes.html#improvements-and-new-features-44"},{"type":"extras","title":"Erts 10.2.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixes of install/release phase in build system.\n\n  - The source tree was modified when installing/releasing and/or applying a\n    patch.\n  - Some files were installed with wrong access rights.\n  - If applying a patch (using `otp_patch_apply`) as another user (except root)\n    than the user that built the source, the documentation was not properly\n    updated.\n\n  Own Id: OTP-15551\n\n- Setting the `recbuf` size of an inet socket the `buffer` is also automatically\n  increased. Fix a bug where the auto adjustment of inet buffer size would be\n  triggered even if an explicit inet buffer size had already been set.\n\n  Own Id: OTP-15651 Aux Id: ERIERL-304\n\n- Reading from UDP using active `true` or active `N` mode has been optimized\n  when more packets than specified by `read_packets` are available on the\n  socket.\n\n  Own Id: OTP-15652 Aux Id: ERIERL-304","ref":"notes.html#fixed-bugs-and-malfunctions-196"},{"type":"extras","title":"Erts 10.2.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- When using the `{linger,{true,T}}` option; `gen_tcp:listen/2` used the full\n  linger time before returning for example `eaddrinuse`. This bug has now been\n  corrected.\n\n  Own Id: OTP-14728 Aux Id: ERIERL-303","ref":"notes.html#fixed-bugs-and-malfunctions-197"},{"type":"extras","title":"Erts 10.2.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug where doing a `gen_tcp:send` on a socket with `delay_send` set to true\n  could cause a segfault if the other side closes the connection.\n\n  Bug was introduced in erts-10.2 (OTP-21.2).\n\n  Own Id: OTP-15536 Aux Id: ERL-827\n\n- Fix a race condition when a port program closes that could result in the next\n  started port to hang during startup.\n\n  When this fault happens the following error is normally (but not always)\n  logged:\n\n  `=ERROR REPORT==== 14-Jan-2019::10:45:52.868246 ===`  \n  `Bad input fd in erts_poll()! fd=11, port=#Port<0.505>, driver=spawn, name=/bin/sh -s unix:cmd`\n\n  Bug was introduced in erts-10.0 (OTP-21.0).\n\n  Own Id: OTP-15537\n\n- Fix a bug where polling for external events could be delayed for a very long\n  time if all active schedulers were 100% loaded.\n\n  Bug was introduced in erts-10.2 (OTP-21.2).\n\n  Own Id: OTP-15538 Aux Id: ERIERL-229","ref":"notes.html#fixed-bugs-and-malfunctions-198"},{"type":"extras","title":"Erts 10.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a crash when dangling files were closed after `init:restart/0`.\n\n  Own Id: OTP-15495 Aux Id: ERL-821\n\n- A bug that could cause dirty schedulers to become unresponsive has been fixed.\n\n  Own Id: OTP-15509 Aux Id: PR-2027, PR-2093","ref":"notes.html#fixed-bugs-and-malfunctions-199"},{"type":"extras","title":"Erts 10.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug on big endian architectures when changing file permissions or\n  ownership with `file:change_mode`, `change_owner`, `change_group` or\n  `write_file_info`. Bug exists since OTP-21.0.\n\n  Own Id: OTP-15485\n\n- Fixed bug in `atomics` with option `{signed,false}` when returned values are\n  `(1 bsl 63)` or larger. Could cause heap corruption leading to VM crash or\n  other unpleasant symptoms. Bug exists since OTP-21.2 when module `atomics` was\n  introduced.\n\n  Own Id: OTP-15486 Aux Id: PR-2061\n\n- Fixed bug in operator `band` of two negative operands causing erroneous result\n  if the absolute value of one of the operands have the lowest `N*W` bits as\n  zero and the other absolute value is not larger than `N*W` bits. `N` is an\n  integer of 1 or larger and `W` is 32 or 64 depending on word size.\n\n  Own Id: OTP-15487 Aux Id: ERL-804","ref":"notes.html#fixed-bugs-and-malfunctions-200"},{"type":"extras","title":"Erts 10.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- When a process was waiting for a TCP socket send operation to complete, and\n  another process closed the socket during that send, the sending process could\n  hang. This bug has now been corrected.\n\n  Own Id: OTP-12242 Aux Id: ERL-561\n\n- Document `bit_size` in match specifications and allow it in `ets:fun2ms`.\n\n  Own Id: OTP-15343 Aux Id: PR-1962\n\n- Fixed bug in `ets:select_replace` when called with a fully bound key could\n  cause a following call to `ets:next` or `ets:prev` to crash the emulator or\n  return invalid result.\n\n  Own Id: OTP-15346\n\n- When a module has been purged from memory, any literals belonging to that\n  module will be copied to all processes that hold references to them. The max\n  heap size limit would be ignored in the garbage collection initiated when\n  copying literals to a process. If the max heap size was exceeded, the process\n  would typically be terminated in the following garbage collection. Corrected\n  to terminate the process directly if copying a literal would exceed the max\n  heap size.\n\n  Own Id: OTP-15360\n\n- Fix compilation of run_erl on Solaris 11.4 and later.\n\n  Own Id: OTP-15389\n\n- Fixed a bug where `lists:reverse/1-2` could use far too many reductions. This\n  bug was introduced in `OTP 21.1`.\n\n  Own Id: OTP-15436\n\n- Fixed a bug where a dirty scheduler could stay awake forever if a distribution\n  entry was removed as part of a dirty GC.\n\n  Own Id: OTP-15446 Aux Id: PR-2024\n\n- Fix microstate accounting handing in various places. Most importantly the GC\n  states when the GC is run on a dirty scheduler are now managed correctly.\n\n  Own Id: OTP-15450 Aux Id: ERIERL-229\n\n- Fixed bug in `file:sendfile` when the send operation failed. For sockets in\n  `active` modes it could cause emulator crash or a hanging call. For sockets\n  with `{active,false}` an unexpected `{inet_reply, _, _}` message could be sent\n  to the calling process. The bug exists since OTP-21.0.\n\n  Own Id: OTP-15461 Aux Id: ERL-784\n\n- The erts configure script has been updated to reject any CFLAGS that does not\n  have `-O`. This in order to prevent the common mistake of forgetting to add\n  `-O2` to custom CFLAGS.\n\n  Own Id: OTP-15465\n\n- Fix reduction count in lists:member/2\n\n  Own Id: OTP-15474 Aux Id: ERIERL-229","ref":"notes.html#fixed-bugs-and-malfunctions-201"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- New `counters` and `atomics` modules supplies access to highly efficient\n  operations on mutable fixed word sized variables.\n\n  Own Id: OTP-13468\n\n- There is a new module `persistent_term` that implements a term storage\n  suitable for terms that are frequently used but never or infrequently updated.\n  Lookups are done in constant time without copying the terms.\n\n  Own Id: OTP-14669 Aux Id: PR-1989\n\n- A function `inet:getifaddrs/1` that takes a list with a namespace option has\n  been added, for platforms that support that feature, for example Linux\n  (only?).\n\n  Own Id: OTP-15121 Aux Id: ERIERL-189, PR-1974\n\n- Added the `nopush` option for TCP sockets, which corresponds to `TCP_NOPUSH`\n  on \\*BSD and `TCP_CORK` on Linux.\n\n  This is also used internally in `file:sendfile` to reduce latency on\n  subsequent send operations.\n\n  Own Id: OTP-15357 Aux Id: ERL-698\n\n- List subtraction (The `--` operator) will now yield properly on large inputs.\n\n  Own Id: OTP-15371\n\n- Optimize handling of send_delay for tcp sockes to better work with the new\n  pollthread implementation introduced in OTP-21.\n\n  Own Id: OTP-15471 Aux Id: ERIERL-229\n\n- Optimize driver_set_timer with a zero timeout to short-circuit and not create\n  any timer structure, but instead schedule the timer immediately.\n\n  Own Id: OTP-15472 Aux Id: ERIERL-229\n\n- Add `erl_xcomp_code_model_small` as a cross configure variable in order to let\n  the emulator be build with the assumption that a small code model will be used\n  on the target machine.\n\n  Own Id: OTP-15473 Aux Id: ERIERL-229\n\n- Add a new pollset that is made to handle sockets that use `{active, true}` or\n  `{active, N}`. The new pollset will not be polled by a pollthread, but instead\n  polled by a normal scheduler.\n\n  This change was made because of the overhead associated with constantly having\n  to re-apply the ONESHOT mechanism on fds that all input events were\n  interesting.\n\n  The new pollset is only active on platforms that support concurrent kernel\n  poll updates, i.e. Linux and BSD.\n\n  Own Id: OTP-15475 Aux Id: ERIERL-229\n\n- Fix bug where emulator would segfault if a literal message was sent when\n  sequence tracing was enabled.\n\n  Own Id: OTP-15478 Aux Id: ERL-741","ref":"notes.html#improvements-and-new-features-45"},{"type":"extras","title":"Erts 10.1.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-1-3"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Added an optional `./configure` flag to compile the emulator with spectre\n  mitigation: `--with-spectre-mitigation`\n\n  Note that this requires a recent version of GCC with support for spectre\n  mitigation and the `--mindirect-branch=thunk` flag, such as `8.1`.\n\n  Own Id: OTP-15430 Aux Id: ERIERL-237","ref":"notes.html#improvements-and-new-features-46"},{"type":"extras","title":"Erts 10.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a rare bug where files could be closed on a normal instead of an IO\n  scheduler, resulting in system instability if the operation blocked.\n\n  Own Id: OTP-15421","ref":"notes.html#fixed-bugs-and-malfunctions-202"},{"type":"extras","title":"Erts 10.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug where the socket option 'pktoptions' caused a read of uninitialized\n  memory has been fixed. Would cause malfunction on FreeBSD.\n\n  Own Id: OTP-14297 Aux Id: OTP-15141\n\n- Fixed a memory leak on errors when reading files.\n\n  Own Id: OTP-15318\n\n- File access through UNC paths works again on Windows. This regression was\n  introduced in OTP 21.\n\n  Own Id: OTP-15333 Aux Id: ERL-737","ref":"notes.html#fixed-bugs-and-malfunctions-203"},{"type":"extras","title":"Erts 10.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix the seq_trace token to not be cleared when a process receives messages\n  sent by erts. Some examples of when this could happen is all port BIFs, i.e.\n  `open_port`, `port_command` etc etc.\n\n  Fix so that messages sent by nifs can be traced using normal and `seq_trace`\n  tracing.\n\n  Own Id: OTP-15038 Aux Id: ERL-602\n\n- Fixed specs and documentation for `process_info` item `monitored_by` to\n  include port identifiers and nif resources as possible types.\n\n  Own Id: OTP-15180 Aux Id: ERL-648\n\n- Fix bug in generation of erl_crash.dump, which could cause VM to crash.\n\n  Bug exist since erts-9.2 (OTP-20.2).\n\n  Own Id: OTP-15181\n\n- Fix bug where ctrl-break or ctrl-c would not trigger the break mode properly\n  on Windows. This bug was introduced in erts-10.0 (OTP-21).\n\n  Own Id: OTP-15205\n\n- Fix a performance bug for reception of UDP packages, where a memory buffer\n  would be reallocated when it should not have been.\n\n  Introduce a limit on the maximum automatic increase of the UDP user-space\n  buffer to the theoretical max of the network PATH, i.e. 65535.\n\n  Own Id: OTP-15206\n\n- Fix alignment of erts allocator state internally in erts. With the improper\n  alignment the emulator would refuse to start when compiled with clang on\n  32-bit systems.\n\n  Own Id: OTP-15208 Aux Id: PR-1897 ERL-677\n\n- Fix bug where too many concurrent calls to\n  `erlang:open_port({spawn,\"cmd\"},...)` would result in the emulator terminating\n  with the reason \"Failed to write to erl_child_setup: \". After this fix the\n  `open_port` call will throw an `emfile` exception instead.\n\n  Own Id: OTP-15210\n\n- Upgraded the ERTS internal PCRE library from version 8.41 to version 8.42. See\n  [http://pcre.org/original/changelog.txt](http://pcre.org/original/changelog.txt)\n  for information about changes made to PCRE. This library implements major\n  parts of the `m:re` regular expressions module.\n\n  Own Id: OTP-15217\n\n- Fix `open_port({fd,X,Y}, ...)` to release the file descriptors from the\n  pollset when closing the port. Without this fix the same file descriptor\n  number could not be reused when doing multiple open_port and port_close\n  sequences.\n\n  Own Id: OTP-15236 Aux Id: ERL-692\n\n- Fixed bug in [`float_to_list/2`](`float_to_list/2`) and\n  [`float_to_binary/2`](`float_to_binary/2`) with options\n  `[{decimals,0},compact]` causing totally wrong results. Bug exists since\n  OTP-21.0.\n\n  Own Id: OTP-15276 Aux Id: PR-1920\n\n- Fixed bug in `erlang:memory` causing `ets` to report too much. This small\n  false memory leak (16 bytes each time) can only happen when a specific race\n  condition occurs between scheduler threads on a table with option\n  `write_concurrency`.\n\n  Own Id: OTP-15278\n\n- Minor `configure` test fixes\n\n  Own Id: OTP-15282\n\n- Improved robustness of distribution connection setup. In OTP-21.0 a truly\n  asynchronous connection setup was introduced. This is further improvement on\n  that work to make the emulator more robust and also be able to recover in\n  cases when involved Erlang processes misbehave.\n\n  Own Id: OTP-15297 Aux Id: OTP-15279, OTP-15280","ref":"notes.html#fixed-bugs-and-malfunctions-204"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The socket options `recvtos`, `recvttl`, `recvtclass` and `pktoptions` have\n  been implemented in the socket modules. See the documentation for the\n  `gen_tcp`, `gen_udp` and `inet` modules. Note that support for these in the\n  runtime system is platform dependent. Especially for `pktoptions` which is\n  very Linux specific and obsoleted by the RFCs that defined it.\n\n  Own Id: OTP-15145 Aux Id: ERIERL-187","ref":"notes.html#improvements-and-new-features-47"},{"type":"extras","title":"Erts 10.0.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- As of ERTS version 10.0 (OTP 21.0) the `erl_child_setup` program, which\n  creates port programs, ignores `TERM` signals. This setting was\n  unintentionally inherited by port programs. Handling of `TERM` signals in port\n  programs has now been restored to the default behavior. That is, terminate the\n  process.\n\n  Own Id: OTP-15289 Aux Id: ERIERL-235, OTP-14943, ERL-576\n\n- The fix made for OTP-15279 in erts-10.07 (OTP-21.0.8) was not complete. It\n  could cause a new connection attempt to be incorrectly aborted in certain\n  cases. This fix will amend that flaw.\n\n  Own Id: OTP-15296 Aux Id: OTP-15279, ERIERL-226","ref":"notes.html#fixed-bugs-and-malfunctions-205"},{"type":"extras","title":"Erts 10.0.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process could get stuck in an infinite rescheduling loop between normal and\n  dirty schedulers. This bug was introduced in ERTS version 10.0.\n\n  Thanks to Maxim Fedorov for finding and fixing this issue.\n\n  Own Id: OTP-15275 Aux Id: PR-1943\n\n- Garbage collection of a distribution entry could cause an emulator crash if\n  `net_kernel` had not brought previous connection attempts on it down properly.\n\n  Own Id: OTP-15279 Aux Id: ERIERL-226","ref":"notes.html#fixed-bugs-and-malfunctions-206"},{"type":"extras","title":"Erts 10.0.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A race between termination of a process and resume of the same process via\n  `erlang:resume_process/1` could cause the VM to crash. This bug was introduced\n  in erts version 10.0 (OTP 21.0).\n\n  Own Id: OTP-15237\n\n- When tracing on `running`, `in` trace events could be lost when a process was\n  rescheduled between a dirty and a normal scheduler.\n\n  Own Id: OTP-15269 Aux Id: ERL-713","ref":"notes.html#fixed-bugs-and-malfunctions-207"},{"type":"extras","title":"Erts 10.0.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug which caused an emulator crash when `enif_send()` was called by a\n  NIF that executed on a dirty scheduler. The bug was either triggered when the\n  NIF called `enif_send()` without a message environment, or when the process\n  executing the NIF was `send` traced.\n\n  Own Id: OTP-15223\n\n- Fixed a bug causing some Erlang references to be inconsistently ordered. This\n  could for example cause failure to look up certain elements with references as\n  keys in search data structures. This bug was introduced in R13B02.\n\n  Thanks to Simon Cornish for finding the bug and supplying a fix.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15225","ref":"notes.html#fixed-bugs-and-malfunctions-208"},{"type":"extras","title":"Erts 10.0.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug that prevented the `noshell` option from working correctly on Mac\n  OS X and BSD.\n\n  Own Id: OTP-15169\n\n- Fixed a crash when matching directly against a literal map using a single key\n  that had been saved on the stack.\n\n  Own Id: OTP-15184\n\n- Fix node crash when passing a bad time option to `file:read_file_info/2`.\n\n  Own Id: OTP-15196","ref":"notes.html#fixed-bugs-and-malfunctions-209"},{"type":"extras","title":"Erts 10.0.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a scheduler bug that caused normal schedulers to run dirty code.\n\n  Own Id: OTP-15154\n\n- Fixed a bug in `erlang:trace_info/2` which caused the emulator to crash when a\n  bad argument was passed. The bug was introduced in ERTS version 10.0.\n\n  Own Id: OTP-15183 Aux Id: ERL-670","ref":"notes.html#fixed-bugs-and-malfunctions-210"},{"type":"extras","title":"Erts 10.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a rare bug that could cause processes to be scheduled after they had\n  been freed.\n\n  Own Id: OTP-15067 Aux Id: ERL-573\n\n- Fixed a race condition in the inet driver that could cause receive to hang\n  when the emulator was compiled with gcc 8.\n\n  Own Id: OTP-15158 Aux Id: ERL-654","ref":"notes.html#fixed-bugs-and-malfunctions-211"},{"type":"extras","title":"Erts 10.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The keys used in `os:getenv` and `os:putenv` are case-insensitive again on\n  Windows.\n\n  Own Id: OTP-15147 Aux Id: ERL-644","ref":"notes.html#fixed-bugs-and-malfunctions-212"},{"type":"extras","title":"Erts 10.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-10-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The type specifications for [`file:posix/0`](`t:file:posix/0`) and\n  [`inet:posix/0`](`t:inet:posix/0`) have been updated according to which errors\n  file and socket operations should be able to return.\n\n  Own Id: OTP-14019 Aux Id: ERL-550\n\n- Fix error printout from run_erl and a bug that could cause unintended fds to\n  be leaked into the started program.\n\n  Own Id: OTP-14537 Aux Id: PR1529\n\n- File operations used to accept [filenames](`t:file:name_all/0`) containing\n  null characters (integer value zero). This caused the name to be truncated and\n  in some cases arguments to primitive operations to be mixed up. Filenames\n  containing null characters inside the filename are now _rejected_ and will\n  cause primitive file operations to fail.\n\n  Also environment variable operations used to accept\n  [names](`t:os:env_var_name/0`) and [values](`t:os:env_var_value/0`) of\n  environment variables containing null characters (integer value zero). This\n  caused operations to silently produce erroneous results. Environment variable\n  names and values containing null characters inside the name or value are now\n  _rejected_ and will cause environment variable operations to fail.\n\n  Primitive environment variable operations also used to accept the `$=`\n  character in environment variable names causing various problems. `$=`\n  characters in environment variable names are now also _rejected_.\n\n  Also `os:cmd/1` now reject null characters inside its\n  [command](`t:os:os_command/0`).\n\n  `erlang:open_port/2` will also reject null characters inside the port name\n  from now on.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14543 Aux Id: ERL-370\n\n- Fix bugs related to the bookkeeping of microstate accounting states.\n\n  Own Id: OTP-14652\n\n- `os:putenv` and `os:getenv` no longer access the process environment directly\n  and instead work on a thread-safe emulation. The only observable difference is\n  that it's _not_ kept in sync with libc `getenv(3)` / `putenv(3)`, so those who\n  relied on that behavior in drivers or NIFs will need to add manual\n  synchronization.\n\n  On Windows this means that you can no longer resolve DLL dependencies by\n  modifying the `PATH` just before loading the driver/NIF. To make this less of\n  a problem, the emulator now adds the target DLL's folder to the DLL search\n  path.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14666\n\n- Corrected `erlang:is_builtin(erlang, M, F)` to return `true` for\n  [`apply/2`](`apply/2`) and `yield/0`.\n\n  Own Id: OTP-14713 Aux Id: ERL-500\n\n- Fixed a bug where the PATH environment variable wasn't updated correctly on a\n  release downgrade, effectively keeping the PATH of the new release.\n\n  Own Id: OTP-14719\n\n- A receive optimization that avoids scanning the entire message queue when\n  receiving a message containing a freshly created reference could in rare\n  circumstances (involving recursive calls to the functions that does the\n  receive) cause the receive to hang. This has been corrected.\n\n  Own Id: OTP-14782 Aux Id: ERL-511\n\n- Fix building of Erlang/OTP on platforms which have small data area with short\n  addressing. For example the PowerPC/RTEMS platform.\n\n  Own Id: OTP-14909 Aux Id: PR-1692\n\n- Fixed a crash when `enif_make_binary` is called with a binary produced by\n  `enif_inspect_binary` in a different environment.\n\n  Own Id: OTP-14931\n\n- Fixed a crash when `enif_make_binary` is called more than once with a binary\n  that had previously been added to an `enif_ioq`.\n\n  Own Id: OTP-14932\n\n- The erl_child_setup program now ignores SIGTERM signals.\n\n  Own Id: OTP-14943 Aux Id: ERL-576\n\n- Force 64-bit alignment on pre-allocators on architectures which needs it.\n\n  Own Id: OTP-14977\n\n- Fixed a bug where dirty scheduler picked up non-dirty work.\n\n  Own Id: OTP-14978\n\n- Calls to `gen_tcp:send/2` on closed sockets now returns `{error, closed}`\n  instead of `{error,enotconn}`.\n\n  Own Id: OTP-15001\n\n- `erlang:monotonic_time/1` failed with `badarg` when passing the `perf_counter`\n  time unit as argument.\n\n  Own Id: OTP-15008\n\n- Fix bug where rapid `init:restart()` calls would sometimes crash because a\n  code load request leaked in between the restarts.\n\n  Own Id: OTP-15013\n\n- Improve [`float_to_list(F, [{decimals,D}])`](`float_to_list/2`) to closer\n  conform with `io_lib:format(\"~.*f\", [D,F])`.\n\n  There are however, still cases when `float_to_list` does not produce the exact\n  same result as `io_lib:format`, especially for large values `F` and/or many\n  decimals `D`.\n\n  Own Id: OTP-15015 Aux Id: OTP-14890\n\n- Fixed a deadlock that would occur on certain allocators when a reallocation\n  failed with `+ramv` enabled.\n\n  Own Id: OTP-15024\n\n- Fix bug that made it impossible to use an erl_tracer as the seq_trace trace\n  receiver.\n\n  Own Id: OTP-15029\n\n- Fix bug where a large (> 1 GB) emulator generated error logger message would\n  cause the emulator to crash.\n\n  Own Id: OTP-15032\n\n- The emulator will no longer crash when reading the file information of an\n  ordinary file that has an NTFS reparse point, such as files stored in a\n  OneDrive-mapped folder.\n\n  Own Id: OTP-15062 Aux Id: ERL-615\n\n- Fixed bug in `enif_binary_to_term` which could cause memory corruption for\n  immediate terms (atoms, small integers, pids, ports, empty lists).\n\n  Own Id: OTP-15080\n\n- Fixed bug in `erlang:system_profile/2` that could cause superfluous\n  `{profile,_,active,_,_}` messages for terminating processes.\n\n  Own Id: OTP-15085\n\n- On OSs with per thread CPU time support, change `cpu_timestamp` in\n  `erlang:trace/3` to use it instead of per process CPU time. This makes this\n  option usable on such OSs when running multiple schedulers.\n\n  Own Id: OTP-15090\n\n- Fix segfault in abort_signal_task which could happen if a port terminated\n  while there were outstanding port tasks that were not signals, for example a\n  ready_input/ready_output event.\n\n  Own Id: OTP-15108 Aux Id: ERL-621\n\n- Fixed bug in `ets` that could cause VM crash if process A terminates after\n  fixating a table and process B deletes the table at \"the same time\". The table\n  fixation could be done with `ets:safe_fixtable` or if process A terminates in\n  the middle of a long running `select` or `match` call.\n\n  Own Id: OTP-15109\n\n- Owner and group changes through `file:write_file_info`, `file:change_owner`,\n  and `file:change_group` will no longer report success on permission errors.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15118\n\n- Fix a bug error reporting from escripts on windows where the error message\n  would get garbled.\n\n  Own Id: OTP-15119 Aux Id: PR-1826\n\n- Fix segfault when a process is internally re-scheduled while being traced for\n  in out events. This bug was introduced in erts-8.0 (OTP-19.0).\n\n  Own Id: OTP-15125","ref":"notes.html#fixed-bugs-and-malfunctions-213"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- It is now possible to open device files and FIFOs with `file:open/2`.\n\n  Own Id: OTP-11462\n\n- The `erlang:system_flag(scheduler_wall_time,Bool)` call is now reference\n  counted and will be turned off if the (last) process that started the\n  performance statistics dies. Thus it is no longer possible to start the\n  statistics with\n  `rpc:call(Node, erlang, system_flag, [scheduler_wall_time, true])` since it\n  will be turned off directly afterwards when the rpc process dies.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11694\n\n- A new logging API is added to Erlang/OTP, see the `m:logger` manual page, and\n  section [Logging](`e:kernel:logger_chapter.md`) in the Kernel User's Guide.\n\n  Calls to `error_logger` are automatically redirected to the new API, and\n  legacy error logger event handlers can still be used. It is, however,\n  recommended to use the Logger API directly when writing new code.\n\n  Notice the following potential incompatibilities:\n\n  - Kernel configuration parameters `error_logger` still works, but is overruled\n    if the default handler's output destination is configured with Kernel\n    configuration parameter `logger`.\n\n    In general, parameters for configuring error logger are overwritten by new\n    parameters for configuring Logger.\n\n  - The concept of SASL error logging is deprecated, meaning that by default the\n    SASL application does not affect which log events are logged.\n\n    By default, supervisor reports and crash reports are logged by the default\n    Logger handler started by Kernel, and end up at the same destination\n    (terminal or file) as other standard log event from Erlang/OTP.\n\n    Progress reports are not logged by default, but can be enabled by setting\n    the primary log level to info, for example with the Kernel configuration\n    parameter `logger_level`.\n\n    To obtain backwards compatibility with the SASL error logging functionality\n    from earlier releases, set Kernel configuration parameter\n    `logger_sasl_compatible` to `true`. This prevents the default Logger handler\n    from logging any supervisor-, crash-, or progress reports. Instead, SASL\n    adds a separate Logger handler during application start, which takes care of\n    these log events. The SASL configuration parameters `sasl_error_logger` and\n    `sasl_errlog_type` specify the destination (terminal or file) and severity\n    level to log for these events.\n\n  Since Logger is new in Erlang/OTP 21.0, we do reserve the right to introduce\n  changes to the Logger API and functionality in patches following this release.\n  These changes might or might not be backwards compatible with the initial\n  version.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13295\n\n- `gen_sctp:connect_init/4` or rather connect in `inet_drv.c` for SCTP has been\n  fixed to not check the write file descriptor for writeability after a connect,\n  since for SCTP (SOCK_SEQPACKET) that property does not seem to be any kind of\n  indicator for when a connect has finished. This fixes connects that the OS\n  returned as \"in progress\" that was misinterpreted by `gen_sctp:connect_init`\n  as failed.\n\n  Own Id: OTP-13760 Aux Id: PR-1592\n\n- The file driver has been rewritten as a NIF, decreasing the latency of file\n  operations. Notable incompatibilities are:\n\n  - The `use_threads` option for `file:sendfile/5` no longer has any effect; we\n    either use non-blocking `sendfile(2)` or fall back to `file:read` \\+\n    `gen_tcp:send`.\n  - The file-specific DTrace probes have been removed. The same effect can be\n    achieved with normal tracing together with the `nif__entry`/`nif__return`\n    probes to track scheduling.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14256\n\n- The I/O polling functionality of erts has been re-written to better make use\n  of the OSs polling mechanisms. This change means that erts will now always\n  prefer to use a kernel-polling mechanism if possible. Also all of the I/O\n  polling has been moved to dedicated threads instead of being placed in the\n  scheduler loops.\n\n  As a result of this, the `erl` options `+K` and `+secio` have been removed. It\n  is still possible to disable kernel-poll, but it has to be done at compile\n  time through the configure option `--disable-kernel-poll`.\n\n  The new `erl` options [`+IOt`](erl_cmd.md#%2BIOt) and\n  [`+IOp`](erl_cmd.md#%2BIOp) can be used to change how many IO poll threads and\n  poll sets that erts should use. See their respective documentation for more\n  details.\n\n  Own Id: OTP-14346\n\n- Truly asynchronous auto-connect. Earlier, when `erlang:send` was aimed toward\n  an unconnected node, the function would not return until the connection setup\n  had completed (or failed). Now the function returns directly after the message\n  has been enqueued and the connection setup started.\n\n  The same applies to all distributed operations that may trigger auto-connect,\n  i.e. `'!'`, `send`, `link`, `monitor`, `monitor_node`, [`exit/2`](`exit/2`)\n  and `group_leader`.\n\n  The interface for all these functions are unchanged as they do not return\n  connection failures. The only exception is `erlang:monitor` where a _possible\n  incompatibility_ is introduced: An attempt to monitor a process on a primitive\n  node (such as erl_interface or jinterface), where remote process monitoring is\n  not implemented, will no longer fail with `badarg` exception. Instead a\n  monitor will be created, but it will only supervise the connection to the\n  node.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14370\n\n- Changed the default behaviour of `.erlang` loading: `.erlang` is no longer\n  loaded from the current directory. `c:erlangrc(PathList)` can be used to\n  search and load an `.erlang` file from user specified directories.\n\n  `escript`, `erlc`, `dialyzer` and `typer` no longer load an `.erlang` at all.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14439\n\n- New functionality for implementation of alternative carriers for the Erlang\n  distribution has been introduced. This mainly consists of support for usage of\n  distribution controller processes (previously only ports could be used as\n  distribution controllers). For more information see\n  [ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module](alt_dist.md#distribution-module).\n\n  Own Id: OTP-14459\n\n- Add support for the lcc compiler and in extension the Elbrus 2000 platform.\n\n  Own Id: OTP-14492\n\n- Support for \"tuple calls\" have been removed from the run-time system. Tuple\n  calls was an undocumented and unsupported feature which allowed the module\n  argument for an apply operation to be a tuple: `Var = dict:new(), Var:size()`.\n  This \"feature\" frequently caused confusion, especially when such call failed.\n  The stacktrace would point out functions that don't exist in the source code.\n\n  For legacy code that need to use parameterized modules or tuple calls for some\n  other reason, there is a new compiler option called `tuple_calls`. When this\n  option is given, the compiler will generate extra code that emulates the old\n  behavior for calls where the module is a variable.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14497\n\n- Creation of small maps with literal keys has been optimized to be faster and\n  potentially use less memory. The keys are combined into a literal key tuple\n  which is put into the literal pool. The key tuple can be shared between many\n  instances of maps having the same keys.\n\n  Own Id: OTP-14502\n\n- When an exception is thrown, include the arguments of the call in the\n  stacktrace for BIFs `band`, `bor`, `bsl`, `bsr`, `bxor`, `div`, `rem` and the\n  operators `+`, `-`, `*` and `/`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14508\n\n- The non-smp emulators have been removed. This means that the configure options\n  `--disable-threads` and `--enable-plain-emulator` have been removed and\n  configure will now refuse to build Erlang/OTP on platforms without thread\n  support.\n\n  In order to achieve a similar setup as the non-smp emulator, it is possible to\n  start Erlang/OTP with the `+S 1` option.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14518\n\n- Modules that use floating point constants compiled with R15 or earlier will\n  need to be re-compiled before they can be loaded.\n\n  Own Id: OTP-14575\n\n- Implementation of true asynchronous signaling between processes in order to\n  improve scalability. Signals affected include exit, monitor, demonitor,\n  monitor triggered, link, unlink, and group leader.\n\n  Own Id: OTP-14589\n\n- Added a PGO (profile guided optimization) pass to the build step of erts. This\n  can be disabled by passing --disable-pgo to configure.\n\n  Own Id: OTP-14604\n\n- Improved the performance of `binary:split` and `binary:match`.\n\n  Own Id: OTP-14610 Aux Id: PR-1480\n\n- It is not longer possible to disable dirty schedulers when building erlang.\n\n  Own Id: OTP-14613\n\n- Loaded BEAM code in a 64-bit system requires less memory because of better\n  packing of operands for instructions.\n\n  These memory savings were achieved by major improvements to the `beam_makeops`\n  scripts used when building the run time system and BEAM compiler. There is\n  also new for documentation for `beam_makeops` that describes how new BEAM\n  instructions and loader transformations can be implemented. The documentation\n  is found in here in a source directory or git repository:\n  erts/emulator/internal_doc/beam_makeops.md. An online version can be found\n  here:\n  https://github.com/erlang/otp/blob/master/erts/emulator/internal_doc/beam_makeops.md\n\n  Own Id: OTP-14626\n\n- `file:read_file` has been changed to read the content of files that report a\n  size of 0 even when data can be read from them. An example of such a file is\n  `/proc/cpuinfo` on Linux.\n\n  Own Id: OTP-14637 Aux Id: ERL-327 PR-1524\n\n- It is no longer possible to disable the `temp_alloc` allocator. Disabling it\n  caused serious performance degradations and was never what was wanted.\n\n  Own Id: OTP-14651\n\n- The reduction cost of sending messages is now constant. It will no longer\n  scale according to the length of the receiving process' message queue.\n\n  Own Id: OTP-14667\n\n- Improved loading of modules with `-on_load` directive, to no longer block all\n  schedulers when the load operation is completed.\n\n  Own Id: OTP-14680\n\n- On platforms with real-time signals available, SIGRTMIN+1 is now used as the\n  internal scheduler suspend signal instead of SIGUSR2.\n\n  Own Id: OTP-14682\n\n- When the value returned from a '`catch`' expression is ignored, no stacktrace\n  will be built if an exception is caught. That will save time and produce less\n  garbage. There are also some minor optimizations of '`try`/`catch`' both in\n  the compiler and run-time system.\n\n  Own Id: OTP-14683\n\n- The guarantees and non-guarantees of `erlang:get_stacktrace/0` are now\n  documented.\n\n  Own Id: OTP-14687\n\n- There is a new syntax in '`try/catch`' for retrieving the stacktrace without\n  calling '`erlang:get_stacktrace/0`'. See the reference manual for a\n  description of the new syntax. The '`erlang:get_stacktrace/0`' BIF is now\n  deprecated.\n\n  Own Id: OTP-14692\n\n- New 'used' option for [`binary_to_term/2`](`binary_to_term/2`) that will also\n  return number of bytes actually read from the binary. This enables easy access\n  to any extra data in the binary located directly after the returned term.\n\n  Own Id: OTP-14780\n\n- Added more statistics for `erlang:system_info({allocator,A})` in the\n  `mbcs_pool` section.\n\n  Own Id: OTP-14795 Aux Id: ERL-88\n\n- Added `enif_ioq_peek_head` to retrieve Erlang terms from NIF IO queues without\n  having to resort to copying.\n\n  Own Id: OTP-14797\n\n- There is a new option '`makedep_side_effect`' for the compiler and `-MMD` for\n  '`erlc`' that generates dependencies and continues to compile as normal.\n\n  Own Id: OTP-14830\n\n- Added `ets:whereis/1` for retrieving the table identifier of a named table.\n\n  Own Id: OTP-14884\n\n- `seq_trace` labels may now be any erlang term.\n\n  Own Id: OTP-14899\n\n- Optimized the common case of `monitor` followed by `send` to the same local\n  process. The monitor signal is now delayed in order to be piggybacked with the\n  sent message and thereby only get one lock operation on the message queue of\n  the receiver. A delayed monitor signal is flushed if no `send` has been done\n  at the latest when the process is scheduled out.\n\n  Own Id: OTP-14901\n\n- Make hipe compiled code work on x86_64 (amd64) with OS security feature PIE,\n  where executable code can be loaded into a random location. Old behavior, if\n  hipe was enabled, was to disable PIE build options for the VM.\n\n  Own Id: OTP-14903\n\n- The number of driver async threads will now default to 1 as the standard\n  drivers do not use them anymore. Users that changed this value to tweak the\n  file driver should replace `+A` with `+SDio` since it now uses dirty IO\n  schedulers instead of async threads.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14928\n\n- Optimize `==` and `/=` for binaries with different sizes to be constant in\n  time instead of proportional to the size of their common prefix.\n\n  Own Id: OTP-14934 Aux Id: PR-1708\n\n- Refactorings making some internal process flags available for other usage.\n\n  Own Id: OTP-14948\n\n- Removed need for HiPE to allocate native executable memory in low 2GB address\n  space on x86_64. Command line option `+MXscs` is thereby obsolete and ignored.\n\n  Own Id: OTP-14951\n\n- Added `enif_make_map_from_arrays` for creating a populated map, analogous to\n  `enif_make_list_from_array`.\n\n  Own Id: OTP-14954\n\n- Added configuration switches for busy-wait and wake up thresholds for dirty\n  schedulers, and changing these settings for normal schedulers will no longer\n  affect dirty schedulers.\n\n  Refer to the documentation for details. The new switches are\n  [\\+sbwtdcpu](erl_cmd.md#%2Bsbwtdcpu), [\\+sbwtdio](erl_cmd.md#%2Bsbwtdio),\n  [\\+swtdcpu](erl_cmd.md#%2Bswtdcpu), and [\\+swtdio](erl_cmd.md#%2Bswtdio).\n\n  The default busy wait threshold for dirty scheduler threads has also been\n  lowered to `short`.\n\n  Own Id: OTP-14959\n\n- The list of \"taints\" now also includes dynamic loaded drivers in addition to\n  NIF libraries. Statically linked drivers and NIF libraries that are part of\n  erts are not included. The \"taints\" are returned by `system_info(taints)` and\n  printed in the header of `erl_crash.dump` files.\n\n  Own Id: OTP-14960\n\n- Added `instrument:allocations` and `instrument:carriers` for retrieving\n  information about memory utilization and fragmentation.\n\n  The old `instrument` interface has been removed, as have the related options\n  `+Mim` and `+Mis`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14961\n\n- The process suspend functionality used by the `erlang:suspend_process/2` BIF\n  has been reimplemented using the newly introduced true asynchronous signaling\n  between processes. This mainly to reduce memory usage in the process control\n  block of all processes, but also in order to simplify the implementation.\n\n  > #### Warning {: .warning }\n  >\n  > You can easily create deadlocks if processes suspends each other (directly\n  > or in circles). In ERTS versions prior to ERTS version 10.0, the runtime\n  > system prevented such deadlocks, but this prevention has now been removed\n  > due to performance reasons.\n\n  Other ERTS internal functionality that used the previous process suspend\n  functionality have also been reimplemented to use asynchronous signaling\n  instead.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14964 Aux Id: OTP-14589\n\n- Added the `nifs` option to `?MODULE:module_info/1` for listing a module's\n  installed NIF functions.\n\n  Own Id: OTP-14965\n\n- New implementation of `erlang:process_info/[1,2]`.\n\n  In the general case when inspecting another process, the new implementation\n  sends an asynchronous process-info request signal to the other process and\n  waits for the result instead of locking the other process and reading the\n  result directly. In some special cases where no conflicts occur, signal order\n  won't be violated, and the amount of data requested is guaranteed to be small,\n  the inspected process may be inspected directly.\n\n  Appropriate amount of reductions are now also bumped when inspecting a\n  process.\n\n  Own Id: OTP-14966\n\n- Removed process start time from crash dump in order to save memory in process\n  control block.\n\n  Own Id: OTP-14975 Aux Id: PR-1597\n\n- Optimize `erlang:put/2` when updating existing key with a new immediate value\n  (atom, small integer, pid, port).\n\n  Own Id: OTP-14976\n\n- `erlang:process_info/1` has been changed to no longer include `messages` by\n  default. Instead `erlang:process_info/2` should be used.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14986 Aux Id: PR-1745\n\n- New `erlang:system_info(ets_count)` to get total number of ets tables existing\n  at the local node.\n\n  Own Id: OTP-14987\n\n- New NIF functions: `enif_mutex_name`, `enif_cond_name`, `enif_rwlock_name`,\n  `enif_thread_name`, `enif_vfprintf`, `enif_vsnprintf`.\n\n  Own Id: OTP-14994\n\n- When `erlang:system_flag(backtrace_depth, 0)` has been called, all exceptions\n  will now contain the entry for _one_ function (despite the zero). It used to\n  be that a hand-made stack backtrace passed to `erlang:raise/3` would be\n  truncated to an empty list.\n\n  Own Id: OTP-15026\n\n- Fixed bug for named `ets` tables which could cause unexpected results from\n  matchspec iteration functions (`ets:select*` and `ets:match*`) if the table\n  was deleted and recreated with the same name during the iteration. The\n  iteration could incorrectly continue through the recreated table. The expected\n  correct behavior is now for the iteration call to fail with a `badarg`\n  exception if the table is deleted before the iteration has completed.\n\n  Own Id: OTP-15031\n\n- Two new guards BIFs operating on maps have been added:\n  [`map_get/2`](`map_get/2`) and [`is_map_key/2`](`is_map_key/2`). They do the\n  same as `maps:get/2` and `maps:is_key/2`, respectively, except that they are\n  allowed to be used in guards.\n\n  Own Id: OTP-15037 Aux Id: PR-1784, PR-1802\n\n- Release run-queue lock while cleaning up terminated dirty process.\n\n  Own Id: OTP-15081\n\n- The callback module passed as `-epmd_module` to erl has been expanded to be\n  able to do name and port resolving.\n\n  Documentation has also been added in the `m:erl_epmd` reference manual and\n  ERTS User's Guide\n  [How to Implement an Alternative Node Discovery for Erlang Distribution](alt_disco.md).\n\n  Own Id: OTP-15086 Aux Id: PR-1694","ref":"notes.html#improvements-and-new-features-48"},{"type":"extras","title":"Erts 9.3.3.15 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process could end up in a state where it got endlessly rescheduled without\n  making any progress. This occurred when a system task, such as check of\n  process code (part of a code purge), was scheduled on a high priority process\n  trying to execute on a dirty scheduler.\n\n  Own Id: OTP-16436 Aux Id: ERL-1152\n\n- Fixed bug in `erlang:list_to_ref/1` when called with a reference created by a\n  remote note. Function [`list_to_ref/1`](`list_to_ref/1`) is intended for\n  debugging and not to be used in application programs. Bug exist since OTP\n  20.0.\n\n  Own Id: OTP-16438\n\n- A process could get into an inconsistent state where it was runnable, but\n  never scheduled for execution. This could occur when a mix of `normal` and\n  `low` priority processes where scheduled on the same type of dirty scheduler\n  simultaneously.\n\n  Own Id: OTP-16446 Aux Id: ERL-1157\n\n- Fixed erroneous mapping of exit reason from `kill` to `killed` on reception of\n  some exit signals due to a broken link. This bug has existed since ERTS\n  version 5.5.2 (OTP R11).\n\n  This bug was also unknowingly fixed in ERTS version 10.0 (OTP 21.0) due to a\n  new ERTS internal implementation of signaling between processes.\n\n  Own Id: OTP-16465 Aux Id: ERL-1165, OTP-6160, OTP-14589\n\n- Corrected the valid range of the `erl` command line argument\n  [`+SDio  `](erl_cmd.md#%2BSDio) from `0..1024` to\n  `1..1024`. `+SDio 0` was erroneously allowed which just caused the VM to crash\n  on the first dirty I/O job scheduled.\n\n  Own Id: OTP-16481","ref":"notes.html#fixed-bugs-and-malfunctions-214"},{"type":"extras","title":"Erts 9.3.3.14 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process calling\n  [`erlang:system_flag(multi_scheduling, block)`](`m:erlang#system_flag_multi_scheduling`)\n  could end up blocked waiting for the operation to complete indefinitely.\n\n  Own Id: OTP-16379","ref":"notes.html#fixed-bugs-and-malfunctions-215"},{"type":"extras","title":"Erts 9.3.3.13 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A literal area could prematurely be released before all uses of it had been\n  removed. This occurred either when a terminating process had a complex exit\n  reason referring to a literal that concurrently was removed, or when a\n  terminating process continued executing a dirty NIF accessing a literal (via\n  the heap) that concurrently was removed.\n\n  Own Id: OTP-16193","ref":"notes.html#fixed-bugs-and-malfunctions-216"},{"type":"extras","title":"Erts 9.3.3.12 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The runtime system disconnected a connection if it received an\n  [`exit/2`](`exit/2`) signal where the recipient was a process on an old\n  incarnation of the current node. That is, the receiving node had the same node\n  name, but another \"creation\" number. The signal will now just be dropped since\n  the receiving process no longer exists.\n\n  Own Id: OTP-15867 Aux Id: ERIERL-373\n\n- Fix a bug in `binary_to_term` that would crash the emulator if a term larger\n  than 16GB was to be decoded.\n\n  Own Id: OTP-16058 Aux Id: PR-2382\n\n- When communicating with a simultaneously exiting port via the\n  `erlang:port_*()` BIFs one could sometimes get stray `{Ref, What}` messages.\n  Where `Ref` was a reference and `What` usually were the atom `badarg`.\n\n  Own Id: OTP-16107 Aux Id: ERL-1049","ref":"notes.html#fixed-bugs-and-malfunctions-217"},{"type":"extras","title":"Erts 9.3.3.11 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a buffer overflow when\n  [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`) and\n  `list_to_existing_atom/2` was used with the `latin1` encoding.\n\n  Own Id: OTP-15819 Aux Id: ERL-944","ref":"notes.html#fixed-bugs-and-malfunctions-218"},{"type":"extras","title":"Erts 9.3.3.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixes of install/release phase in build system.\n\n  - The source tree was modified when installing/releasing and/or applying a\n    patch.\n  - Some files were installed with wrong access rights.\n  - If applying a patch (using `otp_patch_apply`) as another user (except root)\n    than the user that built the source, the documentation was not properly\n    updated.\n\n  Own Id: OTP-15551\n\n- Minor fixes for `make clean`.\n\n  Own Id: OTP-15657\n\n- Fixed a bug in all `ets:select*` and `ets:match*` functions that could in some\n  rare cases lead to very poor performance.\n\n  Own Id: OTP-15660 Aux Id: ERL-869\n\n- Fix a possible deadlock when terminating the ERTS caused by a dirty scheduler\n  not releasing it's run-queue lock when terminating.\n\n  Own Id: OTP-15690 Aux Id: PR-2172\n\n- Add missing documentation of new external tags `NEW_PID`, `NEW_PORT` and\n  `NEWER_REFERENCE` introduced in OTP 19.\n\n  These new tags are planned to be \"activated\" in OTP 23 when distribution\n  capability flag `DFLAG_BIG_CREATION` becomes mandatory. Older nodes (>= 19)\n  are able to decode these new tags and send them back to the new node. Nodes\n  older than OTP 23 will however never encode their own local pids, ports and\n  references using the new tags.\n\n  Own Id: OTP-15766","ref":"notes.html#fixed-bugs-and-malfunctions-219"},{"type":"extras","title":"Erts 9.3.3.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-9"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Added an optional `./configure` flag to compile the emulator with spectre\n  mitigation: `--with-spectre-mitigation`\n\n  Note that this requires a recent version of GCC with support for spectre\n  mitigation and the `--mindirect-branch=thunk` flag, such as `8.1`.\n\n  Own Id: OTP-15430 Aux Id: ERIERL-237","ref":"notes.html#improvements-and-new-features-49"},{"type":"extras","title":"Erts 9.3.3.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug that could cause dirty schedulers to become unresponsive has been fixed.\n\n  Own Id: OTP-15509 Aux Id: PR-2027, PR-2093","ref":"notes.html#fixed-bugs-and-malfunctions-220"},{"type":"extras","title":"Erts 9.3.3.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in operator `band` of two negative operands causing erroneous result\n  if the absolute value of one of the operands have the lowest `N*W` bits as\n  zero and the other absolute value is not larger than `N*W` bits. `N` is an\n  integer of 1 or larger and `W` is 32 or 64 depending on word size.\n\n  Own Id: OTP-15487 Aux Id: ERL-804","ref":"notes.html#fixed-bugs-and-malfunctions-221"},{"type":"extras","title":"Erts 9.3.3.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-6"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- List subtraction (The `--` operator) will now yield properly on large inputs.\n\n  Own Id: OTP-15371","ref":"notes.html#improvements-and-new-features-50"},{"type":"extras","title":"Erts 9.3.3.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- ERTS internal trees of monitor structures could get into an inconsistent\n  state. This could cause `'DOWN'` messages not to be delivered when they\n  should, as well as delivery of `'DOWN'` messages that should not be delivered.\n\n  This bug was introduced in ERTS version 9.0 (OTP 20.0) and was fixed in ERTS\n  version 10.0 (OTP 21.0) due to a rewrite of the monitor code. That is, this\n  bug only exist in the OTP 20 release.\n\n  Own Id: OTP-15399 Aux Id: ERL-751, ERIERL-262, OTP-14205","ref":"notes.html#fixed-bugs-and-malfunctions-222"},{"type":"extras","title":"Erts 9.3.3.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in `ets:select_replace` when called with a fully bound key could\n  cause a following call to `ets:next` or `ets:prev` to crash the emulator or\n  return invalid result.\n\n  Own Id: OTP-15346","ref":"notes.html#fixed-bugs-and-malfunctions-223"},{"type":"extras","title":"Erts 9.3.3.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug which caused an emulator crash when `enif_send()` was called by a\n  NIF that executed on a dirty scheduler. The bug was either triggered when the\n  NIF called `enif_send()` without a message environment, or when the process\n  executing the NIF was `send` traced.\n\n  Own Id: OTP-15223\n\n- Fixed a bug causing some Erlang references to be inconsistently ordered. This\n  could for example cause failure to look up certain elements with references as\n  keys in search data structures. This bug was introduced in R13B02.\n\n  Thanks to Simon Cornish for finding the bug and supplying a fix.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15225","ref":"notes.html#fixed-bugs-and-malfunctions-224"},{"type":"extras","title":"Erts 9.3.3.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a race condition in the inet driver that could cause receive to hang\n  when the emulator was compiled with gcc 8.\n\n  Own Id: OTP-15158 Aux Id: ERL-654\n\n- Fix bug in generation of erl_crash.dump, which could cause VM to crash.\n\n  Bug exist since erts-9.2 (OTP-20.2).\n\n  Own Id: OTP-15181","ref":"notes.html#fixed-bugs-and-malfunctions-225"},{"type":"extras","title":"Erts 9.3.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a rare bug that could cause processes to be scheduled after they had\n  been freed.\n\n  Own Id: OTP-15067 Aux Id: ERL-573","ref":"notes.html#fixed-bugs-and-malfunctions-226"},{"type":"extras","title":"Erts 9.3.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in `ets` that could cause VM crash if process A terminates after\n  fixating a table and process B deletes the table at \"the same time\". The table\n  fixation could be done with `ets:safe_fixtable` or if process A terminates in\n  the middle of a long running `select` or `match` call.\n\n  Own Id: OTP-15109","ref":"notes.html#fixed-bugs-and-malfunctions-227"},{"type":"extras","title":"Erts 9.3.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in `enif_binary_to_term` which could cause memory corruption for\n  immediate terms (atoms, small integers, pids, ports, empty lists).\n\n  Own Id: OTP-15080\n\n- Fixed bug in `erlang:system_profile/2` that could cause superfluous\n  `{profile,_,active,_,_}` messages for terminating processes.\n\n  Own Id: OTP-15085","ref":"notes.html#fixed-bugs-and-malfunctions-228"},{"type":"extras","title":"Erts 9.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a crash in `heart:get_cmd/0` when the stored command was too long.\n\n  Own Id: OTP-15034","ref":"notes.html#fixed-bugs-and-malfunctions-229"},{"type":"extras","title":"Erts 9.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a `configure` test for `libz` internals that unintentionally caused\n  various native code in OTP to link against `libz`. Under certain circumstances\n  this caused the build of OTP to fail.\n\n  Own Id: OTP-14840 Aux Id: ERL-529\n\n- File names containing unicode codepoints larger than 255 were not correctly\n  encoded in stack traces.\n\n  Own Id: OTP-14847 Aux Id: ERL-544\n\n- Fix HiPE bug for binary constructs like `< >` which could in rare cases\n  cause faulty results or VM crash.\n\n  This fix affects both the `hipe` compiler and `erts` runtime in an\n  _incompatible_ way. Old hipe compiled files need to be recompiled to load and\n  run properly as native.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14850 Aux Id: PR-1664\n\n- Fix [`term_to_binary/2`](`term_to_binary/2`) spec for `minor_version`.\n\n  Own Id: OTP-14876 Aux Id: ERL-548\n\n- Fix bug in erlang:binary_to_integer/2 where invalid characters were not\n  detected for bases larger then 10. e.g.\n  [`binary_to_integer(<<\":\">>, 16)`](`binary_to_integer/2`) would return 3 and\n  not badarg as it should.\n\n  Own Id: OTP-14879\n\n- Fixed bug in [`float_to_list/2`](`float_to_list/2`) and\n  [`float_to_binary/2`](`float_to_binary/2`) with option `decimals` that caused\n  a faulty rounding up of the last decimal digit for about 6% of floats with a\n  fraction part.\n\n  For example, [`float_to_list(0.145, [{decimals,1}])`](`float_to_list/2`)\n  returned `\"0.2\"` instead of `\"0.1\"`.\n\n  Own Id: OTP-14890\n\n- Fix bug causing slow hipe execution in modules loaded early during boot or\n  loaded by `code:atomic_load` or `code:finish_loading`.\n\n  Own Id: OTP-14891\n\n- Fixed a buffer overflow in an internal string formatting function that could\n  be hit if specifying a long floating-point format specifier to `erts_sprintf`\n  or similar.\n\n  Own Id: OTP-14920\n\n- `erlang:iolist_to_iovec/1` and `enif_inspect_iovec` will no longer fail when\n  provided with binaries that have been matched-out on a non-byte boundary.\n\n  Own Id: OTP-14921\n\n- [`iolist_to_binary/1`](`iolist_to_binary/1`) and `erlang:iolist_to_iovec/1`\n  will now badarg if supplied with a bitstring (without a list).\n\n  Own Id: OTP-14926\n\n- Reject loading modules with names containing directory separators ('/' or '\\\\'\n  on Windows).\n\n  Own Id: OTP-14933 Aux Id: ERL-564, PR-1716\n\n- Fix potential dead-lock when the tracer process dies while a the traced\n  process is running on a dirty scheduler.\n\n  Own Id: OTP-14938","ref":"notes.html#fixed-bugs-and-malfunctions-230"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- More crash dump info such as: process binary virtual heap stats, full info for\n  process causing out-of-mem during GC, more port related info, and dirty\n  scheduler info.\n\n  Own Id: OTP-14820","ref":"notes.html#improvements-and-new-features-51"},{"type":"extras","title":"Erts 9.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-2-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Improve search algorithm of abandoned memory carriers. Instead of limited\n  linear search, each allocator instance maintain a balanced search tree of all\n  its abandoned carriers for faster and more exhaustive search.\n\n  Own Id: OTP-14915 Aux Id: ERIERL-88\n\n- New erts_alloc command line options `+M_acnl` and `+M_acfml` to limit carrier\n  abandonment.\n\n  Own Id: OTP-14916 Aux Id: ERIERL-88\n\n- New family of `erts_alloc` strategies: Age Order First Fit. Similar to\n  \"address order\", but instead the oldest possible carrier is always chosen for\n  allocation.\n\n  Own Id: OTP-14917 Aux Id: ERIERL-88\n\n- Add possibility to change allocator options at runtime with\n  `system_info(erts_alloc, ...)`. Only option `sbct` (single block carrier\n  threshold) is currently supported via this interface.\n\n  Own Id: OTP-14918 Aux Id: ERIERL-88","ref":"notes.html#improvements-and-new-features-52"},{"type":"extras","title":"Erts 9.2.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-2-0-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Extra internal consistency checks wrt communication with erl_child_setup\n  process.\n\n  Own Id: OTP-15488 Aux Id: ERIERL-231","ref":"notes.html#improvements-and-new-features-53"},{"type":"extras","title":"Erts 9.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix a bug in tracing where the \\{caller\\} match spec function would be set to\n  undefined incorrectly when used in conjunction with return_to or return_trace\n  on some functions.\n\n  The functions effected are: erlang:put/2, erlang:erase/1,\n  erlang:process_info/1,2, erlang:nif_load/2, erts_internal:garbage_collection/1\n  and erts_internal:check_process_code/1.\n\n  Because of this bug, the analysis done by fprof could become incorrect when\n  the functions above are the tail-call in a function.\n\n  Own Id: OTP-14677\n\n- Fix emulator deadlock that would happen if `trap_exit` was set to true and a\n  process sends an exit signal to itself using\n  [`exit(self(), Reason)`](`exit/2`) while receive tracing was enabled for that\n  process.\n\n  Own Id: OTP-14678 Aux Id: ERL-495\n\n- Writing of crash dumps is significantly faster.\n\n  Maps are now included in crash dumps.\n\n  Constants terms would only be shown in one process, while other processes\n  referencing the same constant term would show a marker for incomplete heap.\n\n  Own Id: OTP-14685 Aux Id: OTP-14611, OTP-14603, OTP-14595\n\n- The fallback home directory for windows has been changed to be the PROFILE\n  directory instead of the WINDOWS directory. The fallback is used when the\n  environment variables HOMEDRIVE and HOMEPATH have not been set.\n\n  Own Id: OTP-14691\n\n- Fix bug for hipe compiled code using `< >` binary construction that\n  could cause faulty result or even VM crash.\n\n  On architectures other than x86_64, code need to be recompiled to benefit from\n  this fix.\n\n  Own Id: OTP-14740\n\n- Fixed bug in `erlang:garbage_collect/2` and `erlang:check_process_code/3`,\n  when called with option `{async,ReqestId}`. Could cause VM crash or heap\n  corruption if `RequestId` was an immediate term (like a pid, atom or small\n  integer). Bug exists since OTP-17.0.\n\n  Own Id: OTP-14752\n\n- ERL*NIF_MINOR_VERSION wasn't bumped with the addition of `enif_ioq*\\*`.\n\n  Own Id: OTP-14779\n\n- Purging of loaded code that contained \"fake literals\" (for example the magic\n  reference obtained from '`ets:new/2`') would crash the runtime system.\n  Corrected.\n\n  Own Id: OTP-14791\n\n- Setting the size of the atom table to a number near 2147483647 (using the\n  '`+t`' option) would cause the emulator to exit with a failure to allocate a\n  huge amount of memory. This has been corrected. Also the usage message for the\n  '`+t`' option has been corrected to show the correct upper limit 2147483647\n  instead of 0.\n\n  Own Id: OTP-14796\n\n- Fixed a bug that prevented registered process names from being resolved in\n  lcnt results.\n\n  Own Id: OTP-14803\n\n- Formatting bugs were fixed in several HiPE debug BIFs.\n\n  Own Id: OTP-14804","ref":"notes.html#fixed-bugs-and-malfunctions-231"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Binaries and some other data in crash dumps are now encoded in base64 (instead\n  of in hex), which will reduce the size of crash dumps.\n\n  A few bugs in the handling of sub binaries in `crashdump_viewer` have been\n  fixed.\n\n  Own Id: OTP-14686\n\n- Micro optimization for send operations of messages to other nodes. The local\n  ack-message, which is otherwise sent back from TPC/IP port driver to sending\n  client process, is now ignored earlier for distributed send operations.\n\n  Own Id: OTP-14689","ref":"notes.html#improvements-and-new-features-54"},{"type":"extras","title":"Erts 9.1.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-1-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in file closure on Unix; close(2) was retried on EINTR which could\n  cause a different (recently opened) file to be closed as well.\n\n  Own Id: OTP-14775\n\n- A race-condition when tearing down a connection with active node monitors\n  could cause the runtime system to crash.\n\n  This bug was introduced in ERTS version 8.0 (OTP 19.0).\n\n  Own Id: OTP-14781 Aux Id: OTP-13047","ref":"notes.html#fixed-bugs-and-malfunctions-232"},{"type":"extras","title":"Erts 9.1.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-1-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Microstate accounting sometimes produced incorrect results for dirty\n  schedulers.\n\n  Own Id: OTP-14707\n\n- Fixed a regression in `zlib:gunzip/1` that prevented it from working when the\n  decompressed size was a perfect multiple of 16384. This regression was\n  introduced in 20.1.1\n\n  Own Id: OTP-14730 Aux Id: ERL-507\n\n- Fixed a memory corruption bug in `enif_inspect_iovec`; writable binaries\n  stayed writable after entering the iovec.\n\n  Own Id: OTP-14745\n\n- Fixed a crash in `enif_inspect_iovec` on encountering empty binaries.\n\n  Own Id: OTP-14750\n\n- `zlib:deflateParams/3` will no longer return `buf_error` when called after\n  `zlib:deflate/2` with zlib `1.2.11`.\n\n  Own Id: OTP-14751","ref":"notes.html#fixed-bugs-and-malfunctions-233"},{"type":"extras","title":"Erts 9.1.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-1-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Added zlib:set_controlling_process/2 to move a zstream() between processes.\n\n  Own Id: OTP-14672 Aux Id: ERL-494\n\n- Fix so that schedulers are bound correctly when the first available cpu is not\n  the first detected cpu. e.g. when using \"taskset -c X..Y\" when X is not equal\n  to 0.\n\n  Own Id: OTP-14694","ref":"notes.html#fixed-bugs-and-malfunctions-234"},{"type":"extras","title":"Erts 9.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug that could cause a VM crash when a corrupt message is received on\n  distribution channel from other node.\n\n  Own Id: OTP-14661 Aux Id: ERIERL-80","ref":"notes.html#fixed-bugs-and-malfunctions-235"},{"type":"extras","title":"Erts 9.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The new zlib module returned a data_error when inflating concatenated streams,\n  which was incompatible with the old module's behavior of returning the\n  uncompressed data up to the end of the first stream.\n\n  Own Id: OTP-14648\n\n- zlib:gunzip/1 will no longer stop at the end of the first stream when\n  decompressing concatenated gzip files.\n\n  Own Id: OTP-14649","ref":"notes.html#fixed-bugs-and-malfunctions-236"},{"type":"extras","title":"Erts 9.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Changed `erlang:apply/2` to raise a `badarg` exception if the second argument\n  is not a proper list. Previous behavior was a misleading `undef` exception.\n\n  Own Id: OTP-14490 Aux Id: ERL-432\n\n- On macOS, `crypto` would crash if `observer` had been started before `crypto`.\n  On the beta for macOS 10.13 (High Sierra), `crypto` would crash. Both of those\n  bugs have been fixed.\n\n  Own Id: OTP-14499 Aux Id: ERL-251 ERL-439\n\n- Fixed bug in enif_whereis_pid/port that could cause heap corruption in rare\n  cases.\n\n  Own Id: OTP-14523\n\n- Fix so that trace messages generated when in a dirty nif are flushed correctly\n  when the dirty nif is done executing.\n\n  Own Id: OTP-14538\n\n- Fix escape code handling when using ANSI color codes in the shell.\n\n  Own Id: OTP-14549 Aux Id: PR1536\n\n- Upgraded the ERTS internal PCRE library from version 8.40 to version 8.41. See\n  [http://pcre.org/original/changelog.txt](http://pcre.org/original/changelog.txt)\n  for information about changes made to PCRE. This library implements major\n  parts of the `m:re` regular expressions module.\n\n  Own Id: OTP-14574\n\n- Fixed a bug causing [`statistics(runtime)`](`statistics/1`) to produce\n  negative values and a bug in [`statistics(wall_clock)`](`statistics/1`)\n  causing it to produce values one second too long.\n\n  [`statistics(runtime)`](`statistics/1`) now also use `getrusage()` as source\n  when available preventing the returned value from wrapping as frequent as\n  before.\n\n  Own Id: OTP-14597 Aux Id: ERL-465\n\n- Fixed small memory leak that could occur when sending to a terminating port.\n\n  Own Id: OTP-14609\n\n- Fix bug causing VM crash when a module with `-on_load` directive is loaded\n  while `erlang:trace(on_load, ...)` is enabled.\n\n  Own Id: OTP-14612\n\n- A warning that the compiler may optimize away atoms have been added to the\n  documentation of [`list_to_existing_atom/1`](`list_to_existing_atom/1`) and\n  [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`).\n\n  Own Id: OTP-14614 Aux Id: ERL-453","ref":"notes.html#fixed-bugs-and-malfunctions-237"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Lock counting can now be fully toggled at runtime in the lock counting\n  emulator (`-emu_type lcnt`). Everything is enabled by default to match the old\n  behavior, but specific categories can be toggled at will with minimal runtime\n  overhead when disabled. Refer to the documentation on `lcnt:rt_mask/1` for\n  details.\n\n  Own Id: OTP-13170\n\n- The `zlib` module has been refactored and all its operations will now yield\n  appropriately, allowing them to be used freely in concurrent applications.\n\n  The following functions have been deprecated, but will not produce compiler\n  warnings until OTP 21: `zlib:adler32`, `zlib:crc32`, `zlib:inflateChunk`,\n  `zlib:getBufSize`, `zlib:setBufSize`.\n\n  The behavior of throwing an error when a dictionary is required for\n  decompression has also been deprecated. Refer to the documentation on\n  `inflateSetDictionary/2` for details.\n\n  Own Id: OTP-14185\n\n- `lcnt:collect` and `lcnt:clear` will no longer block all other threads in the\n  runtime system.\n\n  Own Id: OTP-14412\n\n- Add `erlang:iolist_to_iovec/1`, which converts an iolist() to an\n  erlang:iovec(), which suitable for use with `enif_inspect_iovec`.\n\n  Own Id: OTP-14520\n\n- When provided with bad arguments, the `zlib` module will now raise named\n  exceptions instead of just `badarg`. For example, `not_initialized` when using\n  `zlib:inflate/2` with an uninitialized stream.\n\n  Own Id: OTP-14527\n\n- `erlang:halt/2` allows any Unicode string as slogan for the crash dump.\n\n  Own Id: OTP-14553\n\n- Add new nif API functions for managing an I/O Queue. The added functions are:\n\n  - [`enif_ioq_create()`](erl_nif.md#enif_ioq_create)\n  - [`enif_ioq_destroy()`](erl_nif.md#enif_ioq_destroy)\n  - [`enif_ioq_enq_binary()`](erl_nif.md#enif_ioq_enq_binary)\n  - [`enif_ioq_enqv()`](erl_nif.md#enif_ioq_enqv)\n  - [`enif_ioq_deq()`](erl_nif.md#enif_ioq_deq)\n  - [`enif_ioq_peek()`](erl_nif.md#enif_ioq_peek)\n  - [`enif_inspect_iovec()`](erl_nif.md#enif_inspect_iovec)\n  - [`enif_free_iovec()`](erl_nif.md#enif_free_iovec)\n\n  Own Id: OTP-14598","ref":"notes.html#improvements-and-new-features-55"},{"type":"extras","title":"Erts 9.0.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-0-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in `binary_to_term` and `binary_to_atom` that could cause VM crash.\n  Typically happens when the last character of an UTF8 string is in the range\n  128 to 255, but truncated to only one byte. Bug exists in `binary_to_term`\n  since ERTS version 5.10.2 (OTP_R16B01) and `binary_to_atom` since ERTS version\n  9.0 (OTP-20.0).\n\n  Own Id: OTP-14590 Aux Id: ERL-474","ref":"notes.html#fixed-bugs-and-malfunctions-238"},{"type":"extras","title":"Erts 9.0.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-0-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A timer internal bit-field used for storing scheduler id was too small. As a\n  result, VM internal timer data structures could become inconsistent when using\n  1024 schedulers on the system. Note that systems with less than 1024\n  schedulers are not effected by this bug.\n\n  This bug was introduced in ERTS version 7.0 (OTP 18.0).\n\n  Own Id: OTP-14548 Aux Id: OTP-11997, ERL-468\n\n- Automatic cleanup of a BIF timer, when the owner process terminated, could\n  race with the timeout of the timer. This could cause the VM internal data\n  structures to become inconsistent which very likely caused a VM crash.\n\n  This bug was introduced in ERTS version 9.0 (OTP 20.0).\n\n  Own Id: OTP-14554 Aux Id: OTP-14356, ERL-468","ref":"notes.html#fixed-bugs-and-malfunctions-239"},{"type":"extras","title":"Erts 9.0.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-0-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Binary append operations did not check for overflow, resulting in nonsensical\n  results when huge binaries were appended.\n\n  Own Id: OTP-14524","ref":"notes.html#fixed-bugs-and-malfunctions-240"},{"type":"extras","title":"Erts 9.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Added missing release notes for OTP-14491 (\"performance bug in\n  pre-allocators\") which was included in erts-9.0.1 (OTP-20.0.1).\n\n  Own Id: OTP-14494\n\n- Fixed a bug that prevented TCP sockets from being closed properly on send\n  timeouts.\n\n  Own Id: OTP-14509\n\n- Fixed bug in operator `bxor` causing erroneuos result when one operand is a\n  big _negative_ integer with the lowest `N*W` bits as zero and the other\n  operand not larger than `N*W` bits. `N` is an integer of 1 or larger and `W`\n  is 32 or 64 depending on word size.\n\n  Own Id: OTP-14514","ref":"notes.html#fixed-bugs-and-malfunctions-241"},{"type":"extras","title":"Erts 9.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in gen_tcp:send where it never returned when repeatedly called on\n  a remotely closed TCP socket.\n\n  Own Id: OTP-13939 Aux Id: ERL-193\n\n- Fixed segfault that could happen during cleanup of aborted\n  erlang:port_command/3 calls. A port_command is aborted if the port is closed\n  at the same time as the port_command was issued. This bug was introduced in\n  erts-8.0.\n\n  Own Id: OTP-14481\n\n- Fixed implementation of [`statistics(wall_clock)`](`statistics/1`) and\n  [`statistics(runtime)`](`statistics/1`) so that values do not unnecessarily\n  wrap due to the emulator. Note that the values returned by\n  [`statistics(runtime)`](`statistics/1`) may still wrap due to limitations in\n  the underlying functionality provided by the operating system.\n\n  Own Id: OTP-14484\n\n- Fix performance bug in pre-allocators that could cause them to permanently\n  fall back on normal more expensive memory allocation. Pre-allocators are used\n  for quick allocation of short lived meta data used by messages and other\n  scheduled tasks. Bug exists since OTP_R15B02. \\[this release note was missing\n  in erts-9.0.1]\n\n  Own Id: OTP-14491","ref":"notes.html#fixed-bugs-and-malfunctions-242"},{"type":"extras","title":"Erts 9.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-9-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix various bugs regarding loading, upgrade and purge of HiPE compiled code:\n\n  - The native code memory for a purged module was never deallocated.\n  - Wrong functions could in some cases be called after a module upgrade.\n  - `erlang:check_process_code` did not check for recursive calls made from\n    native code.\n\n  Own Id: OTP-13968\n\n- Hipe optional LLVM backend does require LLVM version 3.9 or later as older\n  versions forced strong dependencies on erts internals structures.\n\n  Own Id: OTP-14238\n\n- When an exception such as '[`throw(HugeTerm)`](`throw/1`)' was caught,\n  `HugeTerm` term would be kept in the process until the next exception\n  occurred, potentially increasing the heap size for the process. That has been\n  corrected.\n\n  Own Id: OTP-14255 Aux Id: OTP-14400, OTP-14401\n\n- Slogans in crash dumps have been extended to print more complex terms.\n\n  Own Id: OTP-14303\n\n- Fixed bug when using `enif_inspect_binary` in combination with `enif_copy`. In\n  some circumstances the inspected binary could be reallocated by the\n  `enif_copy` call when it shouldn't have been.\n\n  Own Id: OTP-14304\n\n- The address family `local` (AF_UNIX / AF_LOCAL) now does not ensure zero\n  termination of Linux Abstract Addresses so they can use all bytes.\n\n  Own Id: OTP-14305\n\n- Use `-fno-PIE` for Gentoo Hardened and others that don't accept linker flag\n  `-no-pie`.\n\n  Own Id: OTP-14307 Aux Id: PR-1379\n\n- Disable hipe for `ppc64le` architecture (little endian) as it is not, and has\n  never been, supported. It was earlier equated with `ppc64` (big endian) which\n  lead to broken build without `--disable-hipe`.\n\n  Own Id: OTP-14314 Aux Id: ERL-369, PR-1394\n\n- Fix 'epmd -kill' to return a failure exit status code if epmd was not killed\n  because of some error.\n\n  Own Id: OTP-14324\n\n- Fixed the following dirty scheduler related bugs:\n\n  - the `+SDPcpu` command line argument could cause the amount of dirty CPU\n    schedulers to be set to zero\n  - `erlang:system_flag(multi_scheduling, _)` failed when only one normal\n    scheduler was used together with dirty scheduler support\n\n  Own Id: OTP-14335\n\n- Fix erlexec to handle mismatch in sysconf and proc fs when figuring out the\n  cpu topology. This behaviour has been seen when using docker together with\n  `--cpuset-cpus`.\n\n  Own Id: OTP-14352\n\n- Fixed memory segment cache used for multiblock carriers. Huge (> 2GB) memory\n  segments could cause a VM crash. Creation of such huge memory segments used\n  for multiblock carriers is however very uncommon.\n\n  Own Id: OTP-14360 Aux Id: ERL-401, PR-1417\n\n- Fix bug causing `code:is_module_native` to falsely return true when `local`\n  call trace is enabled for the module.\n\n  Own Id: OTP-14390\n\n- Fix emulator crash when receive tracing on a `trace_delivered` message.\n\n  Own Id: OTP-14411\n\n- Fix file:sendfile error handling on SunOS when a connection is closed during\n  transmission.\n\n  Own Id: OTP-14424\n\n- `escript` did not handle paths with spaces correct.\n\n  Own Id: OTP-14433\n\n- Fix erroneous lock check assertion when `wx` is run on MacOS X.\n\n  Own Id: OTP-14437 Aux Id: ERL-360\n\n- Active-mode TCP sockets are now cleaned up properly on send/shutdown errors.\n\n  Own Id: OTP-14441 Aux Id: ERL-430\n\n- Fix compilation of hipe_mkliterals when the LIBS configure variable had to be\n  set.\n\n  Own Id: OTP-14447","ref":"notes.html#fixed-bugs-and-malfunctions-243"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Added `erlang:garbage_collect/2` that takes an option list as the last\n  argument that can be used to control whether a minor or a major garbage\n  collection is to be done. Doing a minor collection only collects terms that\n  have recently died, but is cheaper than a major collection.\n\n  Own Id: OTP-11695\n\n- Optimized test for tuples with an atom as first element.\n\n  Own Id: OTP-12148\n\n- Erlang literals are no longer copied during process to process messaging.\n\n  Own Id: OTP-13529\n\n- Add support in the `erl_nif` API for asynchronous message notifications when\n  sockets or other file descriptors are ready to accept read or write\n  operations. The following functions have been added:\n\n  - enif_select\n  - enif_monitor_process\n  - enif_demonitor_process\n  - enif_compare_monitors\n  - enif_open_resource_type_x\n\n  Own Id: OTP-13684\n\n- There are two new guard BIFs '[`floor/1`](`floor/1`)' and\n  '[`ceil/1`](`ceil/1`)'. They both return integers. In the '`math`' module,\n  there are two new BIFs with the same names that return floating point values.\n\n  Own Id: OTP-13692\n\n- Remove deprecated `erlang:hash/2`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13827\n\n- Replaced usage of deprecated symbolic [`time unit`](`t:erlang:time_unit/0`)\n  representations.\n\n  Own Id: OTP-13831 Aux Id: OTP-13735\n\n- Added support in zlib for extraction of the inflation dictionary.\n\n  Own Id: OTP-13842\n\n- The previously used purge strategy has been removed. The optional purge\n  strategy introduced in ERTS version 8.1 is now the only strategy available.\n\n  The new purge strategy is slightly incompatible with the old strategy.\n  Previously processes holding `fun`s that referred to the module being purged\n  either failed a soft purge, or was killed during a hard purge. The new\n  strategy completely ignores `fun`s. If `fun`s referring to the code being\n  purged exist, and are used after a purge, an exception will be raised upon\n  usage. That is, the behavior will be exactly the same as the case when a `fun`\n  is received by a process after the purge.\n\n  For more information see the documentation of `erlang:check_process_code/3`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13844 Aux Id: OTP-13833\n\n- Dirty schedulers are now enabled by default when the runtime system is built\n  with SMP support.\n\n  Own Id: OTP-13860\n\n- Improved ETS lookup/insert/delete speed for large `set`, `bag` and\n  `duplicate_bag` by a significant reduction of the hash load factor. This speed\n  improvement comes at the expense of less than one word per table entry. Tables\n  with less than 256 entries are not affected at all.\n\n  Own Id: OTP-13903\n\n- The NIF library `reload` feature is not supported anymore. It has been marked\n  as deprecated since OTP R15B. This means that you are only allowed to do one\n  successful call to `erlang:load_nif/2` for each module instance. A second call\n  to `erlang:load_nif/2` will return `{error, {reload, _}}` even if the NIF\n  library implements the `reload` callback.\n\n  Runtime upgrade of a NIF library is still supported by using the Erlang module\n  upgrade mechanics with a current and an old module instance existing at the\n  same time with their corresponding NIF libraries.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13908\n\n- Add `erlang:system_info(atom_count)` and `erlang:system_info(atom_limit)` to\n  provide a way to retrieve the current and maximum number of atoms.\n\n  Own Id: OTP-13976\n\n- The function `fmod/2` has been added to the `math` module.\n\n  Own Id: OTP-14000\n\n- `erlang:load_nif/2` returns new error type `notsup` when called for a HiPE\n  compiled module, which is not supported.\n\n  Own Id: OTP-14002\n\n- Add driver and nif lock instrumentation to lcnt\n\n  Own Id: OTP-14069\n\n- Reduce memory pressure by converting sub-binaries to heap-binaries when\n  possible. This is done during garbage collection.\n\n  Own Id: OTP-14149\n\n- Dirty schedulers are now enabled and supported on Erlang runtime systems with\n  SMP support.\n\n  Besides support for dirty NIFs also support for dirty BIFs and dirty garbage\n  collection have been introduced. All garbage collections that potentially will\n  take a long time to complete are now performed on dirty schedulers if enabled.\n\n  `erlang:statistics/1` with arguments inspecting scheduler and run queue states\n  have been changed due to the dirty scheduler support. Code using this\n  functionality may have to be rewritten taking these incompatibilities into\n  consideration. Examples of such uses are calls to\n  [`erlang:statistics(scheduler_wall_time)`](`m:erlang#statistics_scheduler_wall_time`),\n  [`statistics(total_run_queue_lengths)`](`m:erlang#statistics_total_run_queue_lengths`),\n  [`statistics(total_active_tasks)`](`m:erlang#statistics_total_active_tasks`),\n  etc.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14152\n\n- Atoms may now contain arbitrary Unicode characters.\n\n  Own Id: OTP-14178\n\n- Introduce an event manager in Erlang to handle OS signals. A subset of OS\n  signals may be subscribed to and those are described in the Kernel\n  application.\n\n  Own Id: OTP-14186\n\n- The `escript` program now handles symbolic links to escripts.\n\n  This is useful for standalone systems with `escript`s residing on a bin\n  directory not included in the execution path (as it may cause their `erl`\n  program(s) to override the desired one). Instead the `escript`s can be\n  referred to via symbolic links from a bin directory in the path.\n\n  Own Id: OTP-14201 Aux Id: PR-1293\n\n- All uses of the magic binary kludge has been replaced by uses of erlang\n  references.\n\n  A magic binary was presented as an empty binary, but actually referred other\n  data internally in the Erlang VM. Since they were presented as empty binaries,\n  different magic binaries compared as equal, and also lost their internal data\n  when passed out of an erlang node.\n\n  The new usage of references has not got any of these strange semantic issues,\n  and the usage of these references has been optimized to give the same\n  performance benefits as well as memory usage benefits as magic binaries had.\n\n  A couple of examples of previous uses of magic binaries are match\n  specifications and NIF resources.\n\n  Own Id: OTP-14205\n\n- The non-smp emulators have been deprecated and are scheduled for removal in\n  OTP-21.\n\n  In preparation for this, the threaded non-smp emulator is no longer built by\n  default and has to be enabled using the --enable-plain-emulator to configure.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14272\n\n- Allow HiPE to run on VM built with `--enable-m32-build`.\n\n  Own Id: OTP-14330 Aux Id: PR-1397\n\n- Upgraded the OTP internal PCRE library from version 8.33 to version 8.40. This\n  library is used for implementation of the `m:re` regular expressions module.\n\n  Besides various bug fixes, the new version allows for better stack protection.\n  In order to utilize this feature, the stack size of normal scheduler threads\n  is now by default set to 128 kilo words on all platforms. The stack size of\n  normal scheduler threads can be set upon system start by passing the\n  [`+sss`](erl_cmd.md#sched_thread_stack_size) command line argument to the\n  [`erl`](erl_cmd.md) command.\n\n  See\n  [http://pcre.org/original/changelog.txt](http://pcre.org/original/changelog.txt)\n  for information about changes made to PCRE between the versions 8.33 and 8.40.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14331 Aux Id: ERL-208\n\n- Remove generation of atoms in old latin1 external format in the distribution\n  between erlang nodes, `erl_interface`, and `jinterface`. The new utf8 format\n  for atoms was introduced in OTP R16. An OTP 20 node can therefore not connect\n  to nodes older than R16.\n\n  Atoms that can be encoded using latin1 are still encoded by `term_to_binary()`\n  using latin1 encoding. Note that all atoms will by default be encoded using\n  utf8 in a future Erlang/OTP release. For more information see the\n  documentation of `erlang:term_to_binary/2`.\n\n  Own Id: OTP-14337\n\n- Added function `re:version/0` which returns information about the OTP internal\n  PCRE version used for implementation of the `re` module.\n\n  Own Id: OTP-14347 Aux Id: PR-1412\n\n- Added new debug bif `erlang:list_to_port/1`.\n\n  Own Id: OTP-14348\n\n- Various improvements of timer management internally in the VM. These\n  improvements both reduced memory consumption of timer wheels as well as reduce\n  the amount of work that has to be performed in order to handle timers.\n\n  Own Id: OTP-14356\n\n- Sockets can now be bound to device (SO_BINDTODEVICE) on platforms where it is\n  supported.\n\n  This has been implemented e.g to support VRF-Lite under Linux; see\n  [VRF ](https://www.kernel.org/doc/Documentation/networking/vrf.txt), and\n  GitHub pull request [\\#1326](https://github.com/erlang/otp/pull/1326).\n\n  Own Id: OTP-14357 Aux Id: PR-1326\n\n- Added the following [`erl`](erl_cmd.md) command line arguments with which you\n  can set suggested stack for dirty schedulers:\n\n  - **[`+sssdcpu`](erl_cmd.md#dcpu_sched_thread_stack_size)** - for dirty CPU\n    schedulers\n\n  - **[`+sssdio`](erl_cmd.md#dio_sched_thread_stack_size)** - for dirty IO\n    schedulers\n\n  The default suggested stack size for dirty schedulers is 40 kilo words.\n\n  Own Id: OTP-14380\n\n- Changed erts startup program name, argv 0, to use the environment variable\n  `ESCRIPT_NAME` so that `erlc`, `dialyzer`, `typer`, `ct_run`, or the escript\n  name can be seen with external programs, such as ps and htop (depending on\n  options), on unix.\n\n  Own Id: OTP-14381\n\n- Improvements of `escript` documentation.\n\n  Own Id: OTP-14384 Aux Id: OTP-14201\n\n- Add function `enif_hash` for NIFs to calculate hash values of arbitrary terms.\n\n  Own Id: OTP-14385 Aux Id: PR-1413\n\n- '`./configure --enable-lock-counter`' will enabling building of an additional\n  emulator that has support for lock counting. (The option previously existed,\n  but would turn on lock counting in the default emulator being built.) To start\n  the lock-counting emulator, use '`erl -emu_type lcnt`'.\n\n  On Windows, `erl` recognized the undocumented option `-debug` for starting a\n  debug-compiled emulator. That option has been removed. Use\n  '`erl -emu_type debug`' instead.\n\n  Own Id: OTP-14407\n\n- Warnings have been added to the relevant documentation about not using\n  un-secure distributed nodes in exposed environments.\n\n  Own Id: OTP-14425\n\n- Improvement of the documentation of the environment variable\n  `ERL_CRASH_DUMP_SECONDS` as well as the default behavior when it is not set.\n\n  Own Id: OTP-14434\n\n- Enabled off-heap message queue for some system processes that might receive\n  large amounts of messages.\n\n  Own Id: OTP-14438\n\n- ETS lock indexes have been replaced with the table name in LCNT results.\n\n  Own Id: OTP-14442 Aux Id: ERIERL-22\n\n- Introduced the new functions\n  [`enif_whereis_pid()`](erl_nif.md#enif_whereis_pid) and\n  [`enif_whereis_port()`](erl_nif.md#enif_whereis_port).\n\n  Own Id: OTP-14453 Aux Id: PR-1400","ref":"notes.html#improvements-and-new-features-56"},{"type":"extras","title":"Erts 8.3.5.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed bug in operator `band` of two negative operands causing erroneous result\n  if the absolute value of one of the operands have the lowest `N*W` bits as\n  zero and the other absolute value is not larger than `N*W` bits. `N` is an\n  integer of 1 or larger and `W` is 32 or 64 depending on word size.\n\n  Own Id: OTP-15487 Aux Id: ERL-804","ref":"notes.html#fixed-bugs-and-malfunctions-244"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Added an optional `./configure` flag to compile the emulator with spectre\n  mitigation: `--with-spectre-mitigation`\n\n  Note that this requires a recent version of GCC with support for spectre\n  mitigation and the `--mindirect-branch=thunk` flag, such as `8.1`.\n\n  Own Id: OTP-15430 Aux Id: ERIERL-237","ref":"notes.html#improvements-and-new-features-57"},{"type":"extras","title":"Erts 8.3.5.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed small memory leak that could occur when sending to a terminating port.\n\n  Own Id: OTP-14609 Aux Id: ERIERL-238","ref":"notes.html#fixed-bugs-and-malfunctions-245"},{"type":"extras","title":"Erts 8.3.5.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a race condition in the inet driver that could cause receive to hang\n  when the emulator was compiled with gcc 8.\n\n  Own Id: OTP-15158 Aux Id: ERL-654\n\n- Fixed a bug causing some Erlang references to be inconsistently ordered. This\n  could for example cause failure to look up certain elements with references as\n  keys in search data structures. This bug was introduced in R13B02.\n\n  Thanks to Simon Cornish for finding the bug and supplying a fix.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15225","ref":"notes.html#fixed-bugs-and-malfunctions-246"},{"type":"extras","title":"Erts 8.3.5.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in file closure on Unix; close(2) was retried on EINTR which could\n  cause a different (recently opened) file to be closed as well.\n\n  Own Id: OTP-14775\n\n- A race-condition when tearing down a connection with active node monitors\n  could cause the runtime system to crash.\n\n  This bug was introduced in ERTS version 8.0 (OTP 19.0).\n\n  Own Id: OTP-14781 Aux Id: OTP-13047","ref":"notes.html#fixed-bugs-and-malfunctions-247"},{"type":"extras","title":"Erts 8.3.5.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A timer internal bit-field used for storing scheduler id was too small. As a\n  result, VM internal timer data structures could become inconsistent when using\n  1024 schedulers on the system. Note that systems with less than 1024\n  schedulers are not effected by this bug.\n\n  This bug was introduced in ERTS version 7.0 (OTP 18.0).\n\n  Own Id: OTP-14548 Aux Id: OTP-11997, ERL-468\n\n- Fixed bug in `binary_to_term` and `binary_to_atom` that could cause VM crash.\n  Typically happens when the last character of an UTF8 string is in the range\n  128 to 255, but truncated to only one byte. Bug exists in `binary_to_term`\n  since ERTS version 5.10.2 (OTP_R16B01) and `binary_to_atom` since ERTS version\n  9.0 (OTP-20.0).\n\n  Own Id: OTP-14590 Aux Id: ERL-474\n\n- Fix bug causing VM crash when a module with `-on_load` directive is loaded\n  while `erlang:trace(on_load, ...)` is enabled.\n\n  Own Id: OTP-14612\n\n- Fixed bug that could cause a VM crash when a corrupt message is received on\n  distribution channel from other node.\n\n  Own Id: OTP-14661 Aux Id: ERIERL-80","ref":"notes.html#fixed-bugs-and-malfunctions-248"},{"type":"extras","title":"Erts 8.3.5.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix performance bug in pre-allocators that could cause them to permanently\n  fall back on normal more expensive memory allocation. Pre-allocators are used\n  for quick allocation of short lived meta data used by messages and other\n  scheduled tasks. Bug exists since OTP_R15B02.\n\n  Own Id: OTP-14491\n\n- Fixed a bug that prevented TCP sockets from being closed properly on send\n  timeouts.\n\n  Own Id: OTP-14509\n\n- Fixed bug in operator `bxor` causing erroneuos result when one operand is a\n  big _negative_ integer with the lowest `N*W` bits as zero and the other\n  operand not larger than `N*W` bits. `N` is an integer of 1 or larger and `W`\n  is 32 or 64 depending on word size.\n\n  Own Id: OTP-14514","ref":"notes.html#fixed-bugs-and-malfunctions-249"},{"type":"extras","title":"Erts 8.3.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug in gen_tcp:send where it never returned when repeatedly called on\n  a remotely closed TCP socket.\n\n  Own Id: OTP-13939 Aux Id: ERL-193\n\n- Fixed segfault that could happen during cleanup of aborted\n  erlang:port_command/3 calls. A port_command is aborted if the port is closed\n  at the same time as the port_command was issued. This bug was introduced in\n  erts-8.0.\n\n  Own Id: OTP-14481\n\n- Fixed implementation of [`statistics(wall_clock)`](`statistics/1`) and\n  [`statistics(runtime)`](`statistics/1`) so that values do not unnecessarily\n  wrap due to the emulator. Note that the values returned by\n  [`statistics(runtime)`](`statistics/1`) may still wrap due to limitations in\n  the underlying functionality provided by the operating system.\n\n  Own Id: OTP-14484","ref":"notes.html#fixed-bugs-and-malfunctions-250"},{"type":"extras","title":"Erts 8.3.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Active-mode TCP sockets are now cleaned up properly on send/shutdown errors.\n\n  Own Id: OTP-14441 Aux Id: ERL-430\n\n- A code purge operation could under certain circumstances expand the size of\n  hibernated processes.\n\n  Own Id: OTP-14444 Aux Id: ERIERL-24\n\n- Fix so that the ERL_ZZ_SIGTERM_KILL introduced in erts-8.3.4 works.\n\n  Own Id: OTP-14451","ref":"notes.html#fixed-bugs-and-malfunctions-251"},{"type":"extras","title":"Erts 8.3.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Add option to make SIGTERM trigger the OS default behaviour instead of doing a\n  graceful shutdown. To activate this bahviour the environment variable\n  ERL_ZZ_SIGTERM_KILL should be set to \"true\". This option only works in OTP 19\n  as OTP 20 will have a different way to deal with SIGTERM.\n\n  Own Id: OTP-14418 Aux Id: ERIERL-15","ref":"notes.html#fixed-bugs-and-malfunctions-252"},{"type":"extras","title":"Erts 8.3.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed memory segment cache used for multiblock carriers. Huge (> 2GB) memory\n  segments could cause a VM crash. Creation of such huge memory segments used\n  for multiblock carriers is however very uncommon.\n\n  Own Id: OTP-14360 Aux Id: ERL-401, PR-1417\n\n- Fix release note for OTP-14290 in ERTS version 8.3.1. It was erroneously\n  placed under \"Known Bugs and Problems\".\n\n  Own Id: OTP-14363 Aux Id: OTP-14290","ref":"notes.html#fixed-bugs-and-malfunctions-253"},{"type":"extras","title":"Erts 8.3.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The `+Bi` command line argument of `erl` erroneously caused `SIGTERM` to be\n  ignored by the VM as well as of all its child processes. This bug was\n  introduced in erts version 8.3.\n\n  Own Id: OTP-14358 Aux Id: OTP-14085","ref":"notes.html#fixed-bugs-and-malfunctions-254"},{"type":"extras","title":"Erts 8.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Invoking `init:stop/0` via the SIGTERM signal, in a non-SMP BEAM, could cause\n  BEAM to terminate with fatal error. This has now been fixed and the BEAM will\n  terminate normally when SIGTERM is received.\n\n  Own Id: OTP-14290\n\n- Trying to open a directory with file:read_file/1 on Unix leaked a file\n  descriptor. This bug has now been fixed.\n\n  Own Id: OTP-14308 Aux Id: ERL-383","ref":"notes.html#fixed-bugs-and-malfunctions-255"},{"type":"extras","title":"Erts 8.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a number of bugs that caused faulty stack-traces to be generated. The\n  faulty stack traces were generated either when applying the following\n  functions or tracing the following functions:\n\n  - `erlang:error/1`\n  - `erlang:error/2`\n  - `erlang:exit/1`\n  - `erlang:throw/1`\n\n  Own Id: OTP-14055\n\n- Corrected documentation about memory footprint for maps.\n\n  Own Id: OTP-14118\n\n- Fix [`process_info(Pid, current_stacktrace)`](`process_info/2`) to use stack\n  depth limit set by `system_flag(backtrace_depth)`. The old behavior was a hard\n  coded depth limit of 8.\n\n  Own Id: OTP-14119 Aux Id: PR-1263\n\n- A process calling\n  [`erlang:system_flag(multi_scheduling, block)`](`m:erlang#system_flag_multi_scheduling`)\n  could end up hanging forever in the call.\n\n  Own Id: OTP-14121\n\n- Dirty scheduler bug fixes:\n\n  - Fixed call time tracing of process being scheduled on dirty scheduler.\n  - GC info from dirty schedulers.\n  - Multi scheduling block with dirty schedulers could crash the runtime system.\n  - Process structures could be removed prematurely.\n  - GC on dirty scheduler could crash the runtime system.\n  - Termination of a process executing on a dirty scheduler could cause a\n    runtime system crash.\n\n  Own Id: OTP-14122\n\n- Fixed crash that occurred when writing timer data to a crash dump.\n\n  Own Id: OTP-14133\n\n- A literal area could be removed while still referred from processes.\n\n  Own Id: OTP-14134\n\n- Fixed a bug in the garbage collector that could crash the runtime system.\n\n  Own Id: OTP-14135\n\n- Fixed a bug in call-time trace for NIFs which caused tracing to erroneously be\n  started multiple times for one call.\n\n  Own Id: OTP-14136\n\n- Remove a debug printout and an unnecessary garbage collection when handling\n  exceptions in hipe compiled code.\n\n  Own Id: OTP-14153\n\n- Fix bug in tracing of garbage collection that could cause VM crash. Bug exists\n  since OTP 19.0.\n\n  Own Id: OTP-14154\n\n- Fix bug in `binary_to_term` for binaries created by `term_to_binary `with\n  option `compressed`. The bug can cause `badarg` exception for a valid binary\n  when Erlang VM is linked against a `zlib` library of version 1.2.9 or newer.\n  Bug exists since OTP 17.0.\n\n  Own Id: OTP-14159 Aux Id: ERL-340\n\n- Fix suspension of schedulers when generating a crashdump.\n\n  Own Id: OTP-14164\n\n- NIF resources was not handled in a thread-safe manner in the runtime system\n  without SMP support.\n\n  As a consequence of this fix, the following driver functions are now\n  thread-safe also in the runtime system without SMP support:\n\n  - `driver_free_binary()`\n  - `driver_realloc_binary()`\n  - `driver_binary_get_refc()`\n  - `driver_binary_inc_refc()`\n  - `driver_binary_dec_refc()`\n\n  Own Id: OTP-14202\n\n- Fix `erlang:round/1` for large floating point numbers with an odd absolute\n  value between `(1 bsl 52)` and `(1 bsl 53)`. The result was falsely calculated\n  as the next higher even number even though all integer values up to\n  `(1 bsl 53)` can be represented as floats with full precision.\n\n  Own Id: OTP-14227\n\n- Add size of literals to module code size in crash dump and `(l)oaded` command\n  in break menu like it used to be before OTP-19.0.\n\n  Own Id: OTP-14228\n\n- Fix potential bug in `enif_send` when called without a process context and\n  with argument `msg_env` as `NULL`.\n\n  Own Id: OTP-14229\n\n- Fix bug where passing an appendable binary to `erlang:port_control()` could\n  crash the emulator.\n\n  Own Id: OTP-14231\n\n- Receive expressions with timeout in the Erlang shell could cause a VM crash.\n\n  Own Id: OTP-14241 Aux Id: ERL-365","ref":"notes.html#fixed-bugs-and-malfunctions-256"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- A received SIGTERM signal to beam will generate a `'stop'` message to the\n  `init` process and terminate the Erlang VM nicely. This is equivalent to\n  calling `init:stop/0`.\n\n  Own Id: OTP-14085\n\n- Workaround for buggy Android implementation of `PTHREAD_STACK_MIN` causing\n  build of runtime system to crash on undeclared `PAGE_SIZE`.\n\n  Own Id: OTP-14165 Aux Id: ERL-319\n\n- Add configure option --without-thread-names that removes the naming of\n  individual emulator threads.\n\n  Own Id: OTP-14234\n\n- Add warning in documentation of `zlib:deflateInit/6` about option\n  `WindowsBits` values 8 and -8.\n\n  Own Id: OTP-14254 Aux Id: ERL-362","ref":"notes.html#improvements-and-new-features-58"},{"type":"extras","title":"Erts 8.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug in `binary_to_term` for binaries created by `term_to_binary `with\n  option `compressed`. The bug can cause `badarg` exception for a valid binary\n  when Erlang VM is linked against a `zlib` library of version 1.2.9 or newer.\n  Bug exists since OTP 17.0.\n\n  Own Id: OTP-14159 Aux Id: ERL-340\n\n- The driver efile_drv when opening a file now use fstat() on the open file\n  instead of stat() before opening, if fstat() exists. This avoids a race when\n  the file happens to change between stat() and open().\n\n  Own Id: OTP-14184 Aux Id: seq-13266","ref":"notes.html#fixed-bugs-and-malfunctions-257"},{"type":"extras","title":"Erts 8.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix a quite rare bug causing VM crash during code loading and the use of\n  export funs (fun M:F/A) of not yet loaded modules. Requires a very specific\n  timing of concurrent scheduler threads. Has been seen on ARM but can probably\n  also occurred on other architectures. Bug has existed since OTP R16.\n\n  Own Id: OTP-14144 Aux Id: seq13242","ref":"notes.html#fixed-bugs-and-malfunctions-258"},{"type":"extras","title":"Erts 8.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed `configure` failures on MacOSX. Most important `clock_gettime()` was\n  detected when building for MacOSX - El Capitan using XCode 8 despite it is not\n  available until MacOSX - Sierra.\n\n  Own Id: OTP-13904 Aux Id: ERL-256\n\n- `code:add_pathsa/1` and command line option `-pa` both revert the given list\n  of directories when adding it at the beginning of the code path. This is now\n  documented.\n\n  Own Id: OTP-13920 Aux Id: ERL-267\n\n- Fix a compilation error of erts in OpenBSD related to the usage of the\n  \\_\\_errno variable.\n\n  Own Id: OTP-13927\n\n- Fixed so that when enabling tracing on a process that had an invalid tracer\n  associated with it, the new tracer overwrites the old tracer. Before this fix,\n  calling erlang:trace/3 would behave as if the tracer was still alive and not\n  apply the new trace.\n\n  This fault was introduced in ERTS 8.0.\n\n  Own Id: OTP-13928\n\n- Fix parsing of `-profile_boot 'true' | 'false'`\n\n  Own Id: OTP-13955 Aux Id: ERL-280\n\n- A slight improvement of `erlang:get_stacktrace/0` for exceptions raised in\n  hipe compiled code. Beam compiled functions in such stack trace was earlier\n  replaced by some unrelated function. They are now instead omitted. This is an\n  attempt to reduce the confusion in the absence of a complete and correct stack\n  trace for mixed beam and hipe functions.\n\n  Own Id: OTP-13992\n\n- Correct type declaration of match specification head.\n\n  Own Id: OTP-13996\n\n- HiPE code loading failed for x86_64 if gcc was configured with\n  `--enable-default-pie`. Fixed by disabling PIE, if needed for HiPE, when\n  building the VM.\n\n  Own Id: OTP-14031 Aux Id: ERL-294, PR-1239\n\n- Faulty arguments could be presented on exception from a NIF that had\n  rescheduled itself using `enif_schedule_nif()`.\n\n  Own Id: OTP-14048\n\n- The runtime system could crash if a garbage collection on a process was\n  performed immediately after a NIF had been rescheduled using\n  `enif_schedule_nif()`.\n\n  Own Id: OTP-14049\n\n- A reference to purged code could be left undetected by the purge operation if\n  a process just had rescheduled a NIF call using `enif_schedule_nif()` when the\n  process was checked. This could cause a runtime system crash.\n\n  Own Id: OTP-14050\n\n- Fixed a number of dirty scheduler related bugs:\n\n  - Process priority was not handled correct when scheduling on a dirty\n    scheduler.\n  - The runtime system could crash when an exit signal with a compound exit\n    reason was sent to a process executing on a dirty scheduler.\n  - The runtime system crashed when call tracing a process executing on a dirty\n    scheduler.\n  - A code purge operation could end up hanging forever when a process executed\n    on a dirty scheduler\n\n  Own Id: OTP-14051","ref":"notes.html#fixed-bugs-and-malfunctions-259"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Fix minor soft purge race bug that could incorrectly trigger code_server to\n  load new code for the module if the soft purge failed and no current version\n  of the module existed.\n\n  Own Id: OTP-13925\n\n- To ease troubleshooting, `erlang:load_nif/2` now includes the return value\n  from a failed call to load/reload/upgrade in the text part of the error tuple.\n  The `crypto` NIF makes use of this feature by returning the source line\n  where/if the initialization fails.\n\n  Own Id: OTP-13951\n\n- New environment variable `ERL_CRASH_DUMP_BYTES` can be used to limit the size\n  of crash dumps. If the limit is reached, crash dump generation is aborted and\n  the generated file will be truncated.\n\n  Own Id: OTP-14046","ref":"notes.html#improvements-and-new-features-59"},{"type":"extras","title":"Erts 8.1.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-1-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A code purge operation could under certain circumstances expand the size of\n  hibernated processes.\n\n  Own Id: OTP-14444 Aux Id: ERIERL-24","ref":"notes.html#fixed-bugs-and-malfunctions-260"},{"type":"extras","title":"Erts 8.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The emulator got a dynamic library dependency towards libsctp, which on Linux\n  was not intended since the emulator there loads and resolves the needed sctp\n  functions in runtime. This has been fixed and a configure switch\n  --enable-sctp=lib has been added for those who want such a library dependency.\n\n  Own Id: OTP-13956 Aux Id: ERL-262, ERL-133\n\n- Fix SIGUSR1 crashdump generation\n\n  Do not generate a core when a crashdump is asked for.\n\n  Own Id: OTP-13997\n\n- The new functions in `code` that allows loading of many modules at once had a\n  performance problem. While executing a helper function in the\n  `erl_prim_loader` process, garbage messages were produced. The garbages\n  messages were ignored and ultimately discarded, but there would be a negative\n  impact on performance and memory usage. The number of garbage message depended\n  on both the number of modules to be loaded and the length of the code path.\n\n  The functions affected of this problem were: `atomic_load/1`,\n  `ensure_modules_loaded/1`, and `prepare_loading/1`.\n\n  Own Id: OTP-14009","ref":"notes.html#fixed-bugs-and-malfunctions-261"},{"type":"extras","title":"Erts 8.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug for calls from hipe code to BIFs that disable GC while yielding. Has\n  been causing Dialyzer crashes on ARM (and presumably all other non-intel\n  platforms).\n\n  Own Id: OTP-13724 Aux Id: PR-1116\n\n- Fix a bug where changing the current working directory of the VM would not\n  change the current working directory of programs spawned using\n  `erlang:open_port({spawn,\"\"}, ...)`.\n\n  Own Id: OTP-13733 Aux Id: ERL-175\n\n- Fix a bug where disabling tracing from a process that had return_to tracing\n  enabled and was tracing on `erlang:trace/3` would cause a segmentation fault.\n\n  Own Id: OTP-13734\n\n- Update all erts documentation to use simpler English, use consistent\n  terminology and be easier to navigate.\n\n  Own Id: OTP-13740\n\n- Add dirty schedulers to the microstate accounting statistics.\n\n  Own Id: OTP-13744\n\n- Fixed dirty scheduler build support on 32-bit windows.\n\n  Own Id: OTP-13759\n\n- inet:getstat(Socket) on an SCTP socket returned 0 for send stats. This bug has\n  now been corrected. Reported by systra as issue ERL-102 on bugs.erlang.org.\n\n  Own Id: OTP-13773 Aux Id: ERL-102\n\n- AF_UNSPEC and unknown address families were misread by UDP receive in\n  prim_inet resulting in an exception. This bug has now been corrected.\n\n  Own Id: OTP-13775\n\n- Sweep HiPE stack for literals during code purge.\n\n  Own Id: OTP-13777 Aux Id: PR-1122\n\n- Fix bug in run_erl for OpenBSD that could cause it on rare occations to exit\n  without starting the program (erl) at all.\n\n  Own Id: OTP-13795\n\n- Update build scripts to not make assumptions about where env, cp and perl are\n  located.\n\n  Own Id: OTP-13800\n\n- Fixed a bug where init:stop could deadlock if a process with infinite shutdown\n  timeout (e.g. a supervisor) attempted to load code while terminating.\n\n  Own Id: OTP-13802\n\n- Fixed a segmentation fault on sparc CPUs when free'ing a tracer module's\n  state.\n\n  Own Id: OTP-13803\n\n- `fun`s was not properly handled during purge of a module. This could cause a\n  crash of the VM after a purge of a module.\n\n  Own Id: OTP-13809\n\n- Fixed a memory leak when the process monitoring a port crashed.\n\n  Own Id: OTP-13818\n\n- Fixed multiple dirty scheduler related tracing bugs.\n\n  Own Id: OTP-13822\n\n- Fix error handling in beam code runtime loader for a number of cases when\n  index and size fields got corrupted (negative) values.\n\n  Own Id: OTP-13848 Aux Id: ERL-216\n\n- Minor fix of dirty scheduler implementation.\n\n  Own Id: OTP-13852\n\n- Calls to `erl_drv_send_term()` or `erl_drv_output_term()` from a non-scheduler\n  thread while the corresponding port was invalid caused the emulator to enter\n  an inconsistent state which eventually caused an emulator crash.\n\n  Own Id: OTP-13866\n\n- Fix a rare race condition in `erlang:open_port({spawn, \"\"}, ...)` that would\n  result in the erl_child_setup program aborting and cause the emulator to exit.\n\n  Own Id: OTP-13868\n\n- Driver and NIF operations accessing processes or ports could cause an emulator\n  crash when used from non-scheduler threads. Those operations are:\n\n  - `erl_drv_send_term()`\n  - `driver_send_term()`\n  - `erl_drv_output_term()`\n  - `driver_output_term()`\n  - `enif_send()`\n  - `enif_port_command()`\n\n  Own Id: OTP-13869\n\n- Fix start scripts generation dependency in Makefile\n\n  Own Id: OTP-13871 Aux Id: ERL-241\n\n- The VM could crash if `erlang:get_stacktrace()` was called after a rescheduled\n  NIF had thrown an exception.\n\n  Own Id: OTP-13877\n\n- Calling `code:delete/1` before a loading a module with an on_load function,\n  the old code would be overwritten, causing a memory or a crash if NIFs were\n  involved. (Thanks to vans163 for reporting this bug.)\n\n  Own Id: OTP-13893 Aux Id: ERL-240","ref":"notes.html#fixed-bugs-and-malfunctions-262"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Improved accuracy of timeouts on MacOS X. This by setting premature timeouts\n  followed by a short actual timeout during scheduler wait.\n\n  Own Id: OTP-13698\n\n- Added the following symbolic time unit representations to the\n  `t:erlang:time_unit/0` type:\n\n  - `second`\n  - `millisecond`\n  - `microsecond`\n  - `nanosecond`\n\n  The following symbolic time unit representations are now _deprecated_, but\n  still part of the [`erlang:time_unit()`](`t:erlang:time_unit/0`) type:\n\n  - `seconds`\n  - `milli_seconds`\n  - `micro_seconds`\n  - `nano_seconds`\n\n  Own Id: OTP-13735\n\n- Fix maps hashing entropy of maps with maps keys.\n\n  Own Id: OTP-13763 Aux Id: ERL-199\n\n- Improved dirty scheduler support. A purge of a module can now be performed\n  without having to wait for completion of all ongoing dirty NIF calls.\n\n  Note that when enabling support for dirty schedulers, a new purge strategy\n  will as of ERTS version 8.1 be enabled. This new strategy is not fully\n  backwards compatible with the strategy used by default. For more information\n  see the documentation of `erlang:check_process_code/3`.\n\n  Own Id: OTP-13808 Aux Id: OTP-13833\n\n- A new purge strategy has been introduced. The new strategy will by default be\n  disabled during the OTP 19 release, but will be the only strategy available as\n  of the OTP 20 release.\n\n  The new strategy is slightly incompatible with the strategy being used by\n  default in OTP 19. Using the default strategy, processes holding `fun`s that\n  refer to the module being purged either fail a soft purge, or will be killed\n  during a hard purge. The new strategy completely ignores `fun`s. If `fun`s\n  referring to the code being purged exist, and are used after a purge, an\n  exception will be raised upon usage. That is, the behavior will be exactly the\n  same as the case when a `fun` is received by a process after the purge.\n\n  The new strategy can optionally be enabled when building OTP during OTP 19,\n  and will automatically be enabled if the runtime system is built with support\n  for dirty schedulers.\n\n  For more information see the documentation of `erlang:check_process_code/3`.\n\n  Own Id: OTP-13833\n\n- Fixed unnecessary overestimation of heap size need during garbage collection.\n\n  Own Id: OTP-13851","ref":"notes.html#improvements-and-new-features-60"},{"type":"extras","title":"Erts 8.0.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-0-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a VM crash that occurred in a garbage collection of a process when it\n  had received binaries. This bug was introduced in ERTS version 8.0 (OTP 19.0).\n\n  Own Id: OTP-13890","ref":"notes.html#fixed-bugs-and-malfunctions-263"},{"type":"extras","title":"Erts 8.0.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-0-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a VM crash that occurred in garbage collection of a process when it had\n  received maps over the distribution. This bug was introduced in ERTS version\n  8.0 (OTP 19.0).\n\n  Own Id: OTP-13889","ref":"notes.html#fixed-bugs-and-malfunctions-264"},{"type":"extras","title":"Erts 8.0.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-0-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a race that could cause a lost wakeup of a process that timed out in a\n  `receive ... after`. This bug was introduced in ERTS version 7.0.\n\n  Own Id: OTP-13798 Aux Id: OTP-11997\n\n- Fixed segfault after writing an erl crash dump.\n\n  Own Id: OTP-13799","ref":"notes.html#fixed-bugs-and-malfunctions-265"},{"type":"extras","title":"Erts 8.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix scheduler deadlock bug in `ets:update_counter/4` when key is not found and\n  inserting the default object causes the table to grow.\n\n  Own Id: OTP-13731 Aux Id: ERL-188\n\n- Fix VM abort \"Overrun stack and heap\" in garbage collection triggered by a\n  `bsl` operation and some very specific heap conditions.\n\n  Own Id: OTP-13732 Aux Id: seq13142","ref":"notes.html#fixed-bugs-and-malfunctions-266"},{"type":"extras","title":"Erts 8.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A memory allocation bug in [`group_leader/2`](`group_leader/2`) could cause an\n  emulator crash when garbage collecting a process that had been assigned a\n  remote group leader. This bug was introduced in ERTS version 8.0.\n\n  Own Id: OTP-13716","ref":"notes.html#fixed-bugs-and-malfunctions-267"},{"type":"extras","title":"Erts 8.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-8-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The handling of `on_load` functions has been improved. The major improvement\n  is that if a code upgrade fails because the `on_load` function fails, the\n  previous version of the module will now be retained.\n\n  Own Id: OTP-12593\n\n- `is_builtin(erlang, apply, 3)` will now return `true`.\n\n  Own Id: OTP-13034\n\n- Fix `enif_get_list_length` to return false if list is improper or have length\n  larger than `UINT_MAX` (did return true and an incorrect length value).\n\n  Own Id: OTP-13288 Aux Id: PR913\n\n- Cleanup hipe signal handling code for x86 and make it more portable.\n\n  Own Id: OTP-13341 Aux Id: PR951\n\n- Make file:datasync use fsync instead of fdatasync on Mac OSX.\n\n  Own Id: OTP-13411\n\n- Make sure to create a crash dump when running out of memory. This was\n  accidentally removed in the erts-7.3 release.\n\n  Own Id: OTP-13419\n\n- A bug has been fixed where if erlang was started +B on a unix platform it\n  would be killed by a SIGUSR2 signal when creating a crash dump.\n\n  Own Id: OTP-13425\n\n- Fix race between [`process_flag(trap_exit,true)`](`process_flag/2`) and a\n  received exit signal.\n\n  A process could terminate due to exit signal even though\n  [`process_flag(trap_exit,true)`](`process_flag/2`) had returned. A very\n  specific timing between call to [`process_flag/2`](`process_flag/2`) and exit\n  signal from another scheduler was required for this to happen.\n\n  Own Id: OTP-13452\n\n- Don't search for non-existing Map keys twice\n\n  For `maps:get/2,3` and `maps:find/2`, searching for an immediate key, e.g. an\n  atom, in a small map, the search was performed twice if the key did not exist.\n\n  Own Id: OTP-13459\n\n- When an abnormally large distribution message is about to be sent, the VM has\n  been changed to create a crash dump instead of a core dump.\n\n  Own Id: OTP-13474\n\n- Fix `erlang:process_info/2` type specification\n\n  Own Id: OTP-13485 Aux Id: ERL-123\n\n- Fix bug in [`open_port/2`](`open_port/2`) with option `{args, List}`. A vm\n  crash could be caused by an improper `List`.\n\n  Own Id: OTP-13489 Aux Id: ERL-127\n\n- Fixed a race-condition bug where the emulator could crash when\n  `erlang:system_profile/1,2` was enabled and a process had to be re-scheduled\n  during termination.\n\n  Own Id: OTP-13494 Aux Id: ERL-126\n\n- Fixed bugs where the reduction counter was not handled correct.\n\n  Own Id: OTP-13512\n\n- Fixed typo in description of the `EPMD_DUMP_REQ` response.\n\n  Own Id: OTP-13517\n\n- Fixed a bug where a process flagged as sensitive would sometimes record its\n  save_calls when it shouldn't.\n\n  Own Id: OTP-13540\n\n- Update configure scripts to not use hard-coded path for /bin/pwd and /bin/rm.\n\n  Own Id: OTP-13562\n\n- When passing a larger binary than the outputv callback of a linked-in driver\n  can handle in one io vector slot, the binary is now split into multiple slots\n  in the io vector. This change only effects system where the max size of an io\n  vector slot is smaller then the word size of the system (e.g. Windows).\n\n  This change means that it is now possible on Windows to send binaries that are\n  larger than 4GB to port_command, which is what is used for file:write,\n  gen_tcp:send etc.\n\n  Own Id: OTP-13628\n\n- Workaround of Maps output in crashdumps. Currently the atom 'undefined' is\n  generated instead of Map data if a Map type is encountered during crash.\n\n  Own Id: OTP-13657","ref":"notes.html#fixed-bugs-and-malfunctions-268"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The tracing support has been extended to allow a\n  [tracer module](`m:erl_tracer`) to be the trace event handler instead of a\n  process or port. The [tracer module](`m:erl_tracer`) makes it possible for\n  trace tools to filter or manipulate trace event data without the trace event\n  first having to be copied from the traced process or port.\n\n  With the introduction of this feature, `erlang:trace(all|existing, _, _)` now\n  also returns the tracer process as part of the number of processes on which\n  tracing is enabled. The is incompatible with the previous releases.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10267\n\n- Introduce LTTng tracing of Erlang Runtime System\n\n  For LTTng to be enabled OTP needs to be built with configure option\n  `--with-dynamic-trace=lttng`.\n\n  This feature introduces tracepoints for schedulers, drivers, memory carriers,\n  memory and async thread pool.\n\n  For a list of all tracepoints, see\n  [Runtime Tools User's Guide](`e:runtime_tools:lttng.md`) .\n\n  Own Id: OTP-10282\n\n- Make it possible to monitor/demonitor ports using the `erlang:monitor/2` API.\n  The process and port information functions have also been updated to include\n  information about monitors from processes to ports.\n\n  Own Id: OTP-11384\n\n- Add microstate accounting\n\n  Microstate accounting is a way to track which state the different threads\n  within ERTS are in. The main usage area is to pin point performance\n  bottlenecks by checking which states the threads are in and then from there\n  figuring out why and where to optimize.\n\n  Since checking whether microstate accounting is on or off is relatively\n  expensive only a few of the states are enabled by default and more states can\n  be enabled through configure.\n\n  There is a convenience module called msacc that has been added to\n  runtime_tools that can assist in gathering and interpreting the data from\n  Microstate accounting.\n\n  For more information see\n  [erlang:statistics(microstate*accounting, *)](`m:erlang#statistics_microstate_accounting`)\n  and the `m:msacc` module in runtime_tools.\n\n  Own Id: OTP-12345\n\n- The port of Erlang/OTP to the real-time operating system OSE has been removed.\n\n  Own Id: OTP-12573\n\n- Sharing preserved copy for messages and exit signals\n\n  Enable sharing preserved copy with configure option\n  `--enable-sharing-preserving`. This will preserve sharing, within the process,\n  when communication with other processes in the Erlang node. There is a\n  trade-off, the copy is more costly but this cost can be reclaimed if there is\n  a lot of sharing in the message. In addition literals will not be copied in a\n  send except during a purge phase of the module where the literals are located.\n  This feature is considered experimental in 19.0.\n\n  Own Id: OTP-12590 Aux Id: OTP-10251\n\n- Halfword BEAM has been removed.\n\n  Own Id: OTP-12883\n\n- Added `os:perf_counter/1`.\n\n  The perf_counter is a very very cheap and high resolution timer that can be\n  used to timestamp system events. It does not have monoticity guarantees, but\n  should on most OS's expose a monotonous time.\n\n  Own Id: OTP-12908\n\n- Support for a fragmented young heap generation. That is, the young heap\n  generation can consist of multiple non continuous memory areas. The main\n  reason for this change is to avoid extra copying of messages that could not be\n  allocated directly on the receivers heap.\n\n  Own Id: OTP-13047\n\n- Erlang linked-in driver can now force the call to open_port to block until a\n  call to erl_drv_init_ack is made inside the driver. This is useful when you\n  want to do some asynchronous initialization, for example getting configuration\n  from a pipe, and you want the initial open_port call to fail if the\n  configuration is incomplete or wrong. See the erl_driver documentation for\n  more details on the API.\n\n  Own Id: OTP-13086\n\n- Erlang linked-in drivers can now set their own pids as seen in\n  `erlang:port_info/1` by using the `erl_drv_set_pid` function. For more details\n  see the erl_driver documentation.\n\n  Own Id: OTP-13087\n\n- The functionality behind `erlang:open_port/2` when called with spawn or\n  spawn_executable has been redone so that the forking of the new program is\n  done in a separate process called erl_child_setup. This allows for a much more\n  robust implementation that uses less memory and does not block the entire\n  emulator if the program to be started is on an un-accessible NFS. Benchmarks\n  have shown this approach to be about 3-5 times as fast as the old approach\n  where the fork/vfork was done by erts. This is a pure stability and\n  performance fix, however some error messages may have changed, which is why it\n  is marked as a backwards incompatible change.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13088\n\n- Improved yielding strategy in the implementation of the following native\n  functions:\n\n  - `erlang:binary_to_list/1`\n  - `erlang:binary_to_list/3`\n  - `erlang:bitstring_to_list/1`\n  - `erlang:list_to_binary/1`\n  - `erlang:iolist_to_binary/1`\n  - `erlang:list_to_bitstring/1`\n  - `binary:list_to_bin/1`\n\n  This in order to improve performance of these functions.\n\n  Own Id: OTP-13096\n\n- All garbage collections of processes now bump reductions. Also the amount of\n  reductions bumped when garbage collecting has been adjusted. It now better\n  corresponds to the amount of work performed. This in order to improve the real\n  time characteristics of the system.\n\n  Own Id: OTP-13097\n\n- New functions that can load multiple modules at once have been added to the\n  '`code`' module. The functions are `code:atomic_load/1`,\n  `code:prepare_loading/1`, `code:finish_loading/1`, and\n  `code:ensure_modules_loaded/1`.\n\n  Own Id: OTP-13111\n\n- The `-boot_var` option for `erl` now only supports a single key and single\n  value (as documented). The option used to allow multiple key/value pairs, but\n  that behavior was undocumented.\n\n  The function `erl_prim_loader:start/3` has been removed. Its documentation has\n  also been removed.\n\n  The undocumented and unsupported function `erl_prim_loader:get_files/2` has\n  been removed.\n\n  Own Id: OTP-13112\n\n- Low level BIF `erlang:purge_module/1` is made more robust against incorrect\n  use. Lingering processes that still refer the old code are now killed before\n  the module is purged to prevent fatal VM behavior.\n\n  Own Id: OTP-13122\n\n- Improved dirty scheduler implementation. For more information see the\n  [NIF documentation](erl_nif.md#dirty_nifs).\n\n  > #### Note {: .info }\n  >\n  > - The dirty scheduler support is still _experimental_.\n  > - The support for determining whether dirty NIF support exist or not at\n  >   compile time using the C preprocessor macro\n  >   `ERL_NIF_DIRTY_SCHEDULER_SUPPORT` has been removed.\n  > - The `enif_is_on_dirty_scheduler()` function has been removed. Use\n  >   [`enif_thread_type()`](erl_nif.md#enif_thread_type) instead.\n\n  Own Id: OTP-13123\n\n- Various optimizations done to process dictionary access.\n\n  Own Id: OTP-13167\n\n- Added max_heap_size process flag. max_heap_size allows the user to limit the\n  maximum heap used by a process. See\n  [erlang:process_flag](`erlang:process_flag/2`) for more details.\n\n  Own Id: OTP-13174\n\n- Allow dynamic drivers and NIF libraries to be built with gcc option\n  `-fvisibility=hidden` for faster loading and more optimized code.\n\n  Own Id: OTP-13227\n\n- Add `erlang:process_info(Pid, garbage_collection_info)` which returns extended\n  garbage_collection information. For more details see the documentation.\n\n  Own Id: OTP-13265\n\n- The functions `erlang:list_to_integer/1` and `string:to_integer/1` have been\n  optimized for large inputs.\n\n  Own Id: OTP-13293\n\n- Improved memory allocation strategy for hipe native code on x86_64 (amd64)\n  architectures by reserving enough low virtual address space needed for the\n  HiPE/AMD64 small code model. The default virtual address area for hipe code is\n  set to 512Mb, but can be changed with emulator flag `+MXscs`.\n\n  Own Id: OTP-13359\n\n- Introduction of configurable management of data referred to by the message\n  queue of a process. Each process can be configured individually.\n\n  It is now possible to configure the message queue of a process, so that all\n  data referred by it will be kept outside of the heap, and by this prevent this\n  data from being part of garbage collections.\n\n  For more information see the documentation of\n  [`process_flag(message_queue_data, MQD)`](`m:erlang#process_flag_message_queue_data`).\n\n  Own Id: OTP-13366 Aux Id: OTP-13047\n\n- Processes now yield when scanning large message queues and not finding a\n  matching message. This in order to improve real time characteristics.\n\n  Own Id: OTP-13401\n\n- Optimized an erts internal function that is used to traverse erlang terms. The\n  internal function was mainly used by term_to_binary and comparison of terms.\n  Benchmarks have shown up to a 10% performance increase in those functions\n  after the optimization.\n\n  Own Id: OTP-13440\n\n- Add the following NIF API functions:\n\n  - [`enif_cpu_time`](erl_nif.md#enif_cpu_time)\n  - [`enif_now_time`](erl_nif.md#enif_now_time)\n  - [`enif_make_unique_integer`](erl_nif.md#enif_make_unique_integer)\n  - [`enif_is_process_alive`](erl_nif.md#enif_is_process_alive)\n  - [`enif_is_port_alive`](erl_nif.md#enif_is_port_alive)\n  - [`enif_term_to_binary`](erl_nif.md#enif_term_to_binary)\n  - [`enif_binary_to_term`](erl_nif.md#enif_binary_to_term)\n  - [`enif_port_command`](erl_nif.md#enif_port_command)\n\n  For details of what each function does, see the erl_nif documentation.\n\n  Own Id: OTP-13442\n\n- Optimize `'++'` operator and `lists:append/2` by using a single pass to build\n  a new list while checking for properness.\n\n  Own Id: OTP-13487\n\n- Handle terms (pids,ports and refs) from nodes with a 'creation' value larger\n  than 3. This is a preparation of the distribution protocol to allow OTP 19\n  nodes to correctly communicate with future nodes (20 or higher). The\n  'creation' value differentiates different incarnations of the same node\n  (name).\n\n  Own Id: OTP-13488\n\n- Don't send unasked for systemd notifications in epmd\n\n  Own Id: OTP-13493 Aux Id: PR-999\n\n- The enif_send API has been extended to allow NULL to be used as the message\n  environment. When used this way, a message environment is implicitly created\n  and the given term is copied into that environment before sending. This can be\n  an optimization if many small messages are being sent by the nif.\n\n  Own Id: OTP-13495\n\n- The tracing support has been extended to allow tracing on ports. Ports can be\n  traced on using the 'ports', 'send' and 'receive' trace flags.\n\n  The first argument of `erlang:trace/3` has been extended so that `'all'`,\n  `'existing'` and `'new'` now include both processes and ports. New `Tracee`\n  variants, `'all_processes'`, `'all_ports'`, `'existing_processes'` etc have\n  been added to specify only processes or ports.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13496\n\n- When the `'procs'` trace flag is enabled, a `'spawned'` trace event is now\n  also generated by a newly created process. The previous event `'spawn'`\n  remains, but as it is generated by the process that did the spawn, it is not\n  guaranteed that it is ordered with other trace events from the newly spawned\n  process. So when tracking the lifetime of a process this new event should be\n  used as the creation event.\n\n  This new trace event is marked as an incompatibility because tools that expect\n  certain trace events when enabling 'procs' will have to updated.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13497\n\n- Add the `erlang:match_spec_test/3` function. The functions allows the testing\n  of match specifications for both tracing and ets tables. It can be used to\n  test that a match specification does the expected filtering on specific data.\n  It also returns more verbose error reasons for incorrectly constructed match\n  specifications.\n\n  Own Id: OTP-13501\n\n- The erts internal tracing support has been changed to have much less overhead\n  and be more scalable.\n\n  This rewrite does not break any backwards incompatibilities, but it does\n  change the ordering of some trace messages when compared to previous releases.\n  It should be noted that this only applies to trace messages sent to processes\n  or ports, it does not apply to the new tracer module. However in future\n  releases they may also be effected by this.\n\n  Trace messages are only guaranteed to be ordered from one traced process or\n  port. In previous releases this was not visible as a `'send'` trace message\n  would always arrive before the corresponding `'receive'` trace message that is\n  no longer always the case. This also means that timestamped trace messages may\n  seem to arrive out of order as the timestamp is taken when the event is\n  triggered and not when it is put in the queue of the tracer.\n\n  Own Id: OTP-13503\n\n- Add possibility to filter `send` and `receive` trace with match\n  specifications.\n\n  Own Id: OTP-13507\n\n- Add `maps:update_with/3,4` and `maps:take/2`\n\n  Own Id: OTP-13522 Aux Id: PR-1025\n\n- Introduce LTTng tracing via Erlang tracing.\n\n  For LTTng to be enabled OTP needs to be built with configure option\n  `--with-dynamic-trace=lttng`.\n\n  The dynamic trace module `dyntrace` is now capable to be used as a LTTng sink\n  for Erlang tracing. For a list of all tracepoints, see\n  [Runtime Tools User's Guide](`e:runtime_tools:lttng.md`) .\n\n  This feature also introduces an incompatible change in trace tags. The trace\n  tags `gc_start` and `gc_end` has been split into `gc_minor_start`,\n  `gc_minor_end` and `gc_major_start`, `gc_major_end`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13532\n\n- Print heap pointers for garbing processes during crashdump\n\n  Own Id: OTP-13541 Aux Id: PR-1026\n\n- Changed and improved low level memory statistics returned by\n  `erlang:system_info/1`. The info for `erts_mmap` has been moved from\n  `mseg_alloc` to its own section returned by `{allocator, erts_mmap}`.\n\n  Own Id: OTP-13560\n\n- Add enif_snprintf to the NIF API\n\n  The function `enif_snprintf` is similar to `snprintf` call but can handle\n  formatting of Erlang terms via `%T` format specifier.\n\n  Own Id: OTP-13580\n\n- The warning in the documentation for `erlang:raise/3` has been removed. It is\n  now officially perfectly fine to use raise/3 in production code.\n\n  Own Id: OTP-13599\n\n- Fix bugs caused by the VM sometimes truncating object sizes or offsets to 32\n  bits on 64-bit hosts. These bugs were mainly found when working with large\n  unicode strings and nifs environments.\n\n  Own Id: OTP-13606\n\n- Add `-start_epmd` command line option, this lets you disable automatic\n  starting of epmd when starting a distributed node.\n\n  Add `-epmd_module` command line option, this lets you specify a module to\n  register and look-up node names in. The default module is `erl_epmd`.\n\n  Own Id: OTP-13627\n\n- `erlang:halt` now truncates strings longer than 200 characters instead of\n  failing with `badarg`.\n\n  Own Id: OTP-13630\n\n- Fix possible race in poller wake up on windows\n\n  Own Id: OTP-13634","ref":"notes.html#improvements-and-new-features-61"},{"type":"extras","title":"Erts 7.3.1.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3-1-6"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- List subtraction (The `--` operator) will now yield properly on large inputs.\n\n  Own Id: OTP-15371","ref":"notes.html#improvements-and-new-features-62"},{"type":"extras","title":"Erts 7.3.1.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3-1-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed small memory leak that could occur when sending to a terminating port.\n\n  Own Id: OTP-14609 Aux Id: ERIERL-238","ref":"notes.html#fixed-bugs-and-malfunctions-269"},{"type":"extras","title":"Erts 7.3.1.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3-1-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix performance bug in pre-allocators that could cause them to permanently\n  fall back on normal more expensive memory allocation. Pre-allocators are used\n  for quick allocation of short lived meta data used by messages and other\n  scheduled tasks. Bug exists since OTP_R15B02.\n\n  Own Id: OTP-14491\n\n- Fixed bug in operator `bxor` causing erroneuos result when one operand is a\n  big _negative_ integer with the lowest `N*W` bits as zero and the other\n  operand not larger than `N*W` bits. `N` is an integer of 1 or larger and `W`\n  is 32 or 64 depending on word size.\n\n  Own Id: OTP-14514\n\n- A timer internal bit-field used for storing scheduler id was too small. As a\n  result, VM internal timer data structures could become inconsistent when using\n  1024 schedulers on the system. Note that systems with less than 1024\n  schedulers are not effected by this bug.\n\n  This bug was introduced in ERTS version 7.0 (OTP 18.0).\n\n  Own Id: OTP-14548 Aux Id: OTP-11997, ERL-468\n\n- Fixed bug in `binary_to_term` and `binary_to_atom` that could cause VM crash.\n  Typically happens when the last character of an UTF8 string is in the range\n  128 to 255, but truncated to only one byte. Bug exists in `binary_to_term`\n  since ERTS version 5.10.2 (OTP_R16B01) and `binary_to_atom` since ERTS version\n  9.0 (OTP-20.0).\n\n  Own Id: OTP-14590 Aux Id: ERL-474","ref":"notes.html#fixed-bugs-and-malfunctions-270"},{"type":"extras","title":"Erts 7.3.1.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3-1-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug has been fixed where if erlang was started +B on a unix platform it\n  would be killed by a SIGUSR2 signal when creating a crash dump.\n\n  Own Id: OTP-13425 Aux Id: ERL-94\n\n- Calls to `erl_drv_send_term()` or `erl_drv_output_term()` from a non-scheduler\n  thread while the corresponding port was invalid caused the emulator to enter\n  an inconsistent state which eventually caused an emulator crash.\n\n  Own Id: OTP-13866\n\n- Driver and NIF operations accessing processes or ports could cause an emulator\n  crash when used from non-scheduler threads. Those operations are:\n\n  - `erl_drv_send_term()`\n  - `driver_send_term()`\n  - `erl_drv_output_term()`\n  - `driver_output_term()`\n  - `enif_send()`\n  - `enif_port_command()`\n\n  Own Id: OTP-13869\n\n- Fix bug in `binary_to_term` for binaries created by `term_to_binary `with\n  option `compressed`. The bug can cause `badarg` exception for a valid binary\n  when Erlang VM is linked against a `zlib` library of version 1.2.9 or newer.\n  Bug exists since OTP 17.0.\n\n  Own Id: OTP-14159 Aux Id: ERL-340","ref":"notes.html#fixed-bugs-and-malfunctions-271"},{"type":"extras","title":"Erts 7.3.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a race that could cause a lost wakeup of a process that timed out in a\n  `receive ... after`. This bug was introduced in ERTS version 7.0.\n\n  Own Id: OTP-13798 Aux Id: OTP-11997\n\n- Fixed segfault after writing an erl crash dump.\n\n  Own Id: OTP-13799","ref":"notes.html#fixed-bugs-and-malfunctions-272"},{"type":"extras","title":"Erts 7.3.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix scheduler deadlock bug in `ets:update_counter/4` when key is not found and\n  inserting the default object causes the table to grow.\n\n  Own Id: OTP-13731 Aux Id: ERL-188","ref":"notes.html#fixed-bugs-and-malfunctions-273"},{"type":"extras","title":"Erts 7.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [`process_info(Pid, last_calls)`](`process_info/2`) did not work for\n  `Pid /= self()`.\n\n  Own Id: OTP-13418\n\n- Make sure to create a crash dump when running out of memory. This was\n  accidentally removed in the erts-7.3 release.\n\n  Own Id: OTP-13419\n\n- Schedulers could be woken by a premature timeout on Linux. This premature\n  wakeup was however harmless.\n\n  Own Id: OTP-13420\n\n- A process communicating with a port via one of the `erlang:port_*` BIFs could\n  potentially end up in an inconsistent state if the port terminated during the\n  communication. When this occurred the process could later block in a `receive`\n  even though it had messages matching in its message queue.\n\n  This bug was introduced in erts version 5.10 (OTP R16A).\n\n  Own Id: OTP-13424 Aux Id: OTP-10336\n\n- The reference count of a process structure could under rare circumstances be\n  erroneously managed. When this happened invalid memory accesses occurred.\n\n  Own Id: OTP-13446\n\n- Fix race between [`process_flag(trap_exit,true)`](`process_flag/2`) and a\n  received exit signal.\n\n  A process could terminate due to exit signal even though\n  [`process_flag(trap_exit,true)`](`process_flag/2`) had returned. A very\n  specific timing between call to [`process_flag/2`](`process_flag/2`) and exit\n  signal from another scheduler was required for this to happen.\n\n  Own Id: OTP-13452","ref":"notes.html#fixed-bugs-and-malfunctions-274"},{"type":"extras","title":"Erts 7.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The '-path' flag to 'erl' has been documented. This flag replaces the path\n  specified in the boot script. It has always existed, but was earlier only\n  documented in SASL (script).\n\n  Own Id: OTP-13060\n\n- The `call_time` tracing functionality internally used a time based on OS\n  system time in order to measure call time which could cause erroneous results\n  if OS system time was changed during tracing.\n\n  This functionality now use Erlang monotonic time in order to measure time.\n  Besides fixing the erroneous results due to OS system time being used, the\n  results are often also better since Erlang monotonic time often has better\n  accuracy and precision.\n\n  Own Id: OTP-13216\n\n- Fix behaviour of -delay_write command line switch of epmd, which is used for\n  debugging - in some cases epmd was sleeping twice the requested amount of\n  time.\n\n  Own Id: OTP-13220\n\n- Fix race between timeout and exit signal that could cause a process to ignore\n  the exit signal and continue execution. Bug exist since OTP 18.0.\n\n  Own Id: OTP-13245\n\n- Fix bug in `erlang:halt/1,2` for large exit status values, causing either\n  `badarg` (on 32-bit) or exit with a crash dump and/or core dump (on 64-bit).\n  Make `erlang:halt/1,2` tolerate any non negative integer as exit status and\n  truncate high order bits if the OS does not support it.\n\n  Own Id: OTP-13251 Aux Id: ERL-49\n\n- `gen_tcp:accept/2` was not\n  [time warp safe](time_correction.md#time-warp-safe-code). This since it used\n  the same time as returned by `erlang:now/0` when calculating timeout. This has\n  now been fixed.\n\n  Own Id: OTP-13254 Aux Id: OTP-11997, OTP-13222\n\n- Fix faulty error handling when writing to a compressed file.\n\n  Own Id: OTP-13270\n\n- Fix sendfile usage for large files on FreeBSD\n\n  Own Id: OTP-13271\n\n- Fix bug that could cause\n  [`process_info(P,current_location)`](`process_info/2`) to crash emulator for\n  hipe compiled modules.\n\n  Own Id: OTP-13282 Aux Id: ERL-79\n\n- Out of memory errors have been changed to cause an exit instead of abort.\n\n  Own Id: OTP-13292\n\n- When calling `garbage_collect/[1,2]` or `check_process_code/[2,3]` from a\n  process with a higher priority than the priority of the process operated on,\n  the run queues could end up in an inconsistent state. This bug has now been\n  fixed.\n\n  Own Id: OTP-13298 Aux Id: OTP-11388\n\n- A workaround for an issue with older gcc versions (less than 5) and inline\n  assembly on 32-bit x86 caused an emulator crash when it had been compiled with\n  a newer gcc version. An improved `configure` test, run when building OTP, now\n  detects whether the workaround should be used or not.\n\n  Own Id: OTP-13326 Aux Id: ERL-80","ref":"notes.html#fixed-bugs-and-malfunctions-275"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Introduced new statistics functionality in order to more efficiently retrieve\n  information about run able and active processes and ports. For more\n  information see:\n\n  - [`statistics(total_run_queue_lengths)`](`m:erlang#statistics_total_run_queue_lengths`)\n  - [`statistics(run_queue_lengths)`](`m:erlang#statistics_run_queue_lengths`)\n  - [`statistics(total_active_tasks)`](`m:erlang#statistics_total_active_tasks`)\n  - [`statistics(active_tasks)`](`m:erlang#statistics_active_tasks`)\n\n  Own Id: OTP-13201\n\n- Time warp safety improvements.\n\n  Introduced the options `monotonic_timestamp`, and `strict_monotonic_timestamp`\n  to the trace, sequential trace, and system profile functionality. This since\n  the already existing `timestamp` option is not time warp safe.\n\n  Introduced the option `safe_fixed_monotonic_time` to `ets:info/2` and\n  `dets:info/2`. This since the already existing `safe_fixed` option is not time\n  warp safe.\n\n  Own Id: OTP-13222 Aux Id: OTP-11997\n\n- Fix a register race where down nodes goes undetected in epmd\n\n  Own Id: OTP-13301\n\n- Improved the gcc inline assembly implementing double word atomic compare and\n  exchange on x86/x86_64 so that it also can be used when compiling with clang.\n\n  Own Id: OTP-13336\n\n- An optimization preventing a long wait for a scheduler thread looking up\n  information about a process executing on another scheduler thread had\n  unintentionally been lost in erts-5.10 (OTP R16A). This optimization has now\n  been reintroduced.\n\n  Own Id: OTP-13365 Aux Id: OTP-9892","ref":"notes.html#improvements-and-new-features-63"},{"type":"extras","title":"Erts 7.2.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-2-1-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Introduced new statistics functionality in order to more efficiently retrieve\n  information about run able and active processes and ports. For more\n  information see:\n\n  - [`statistics(total_run_queue_lengths)`](`m:erlang#statistics_total_run_queue_lengths`)\n  - [`statistics(run_queue_lengths)`](`m:erlang#statistics_run_queue_lengths`)\n  - [`statistics(total_active_tasks)`](`m:erlang#statistics_total_active_tasks`)\n  - [`statistics(active_tasks)`](`m:erlang#statistics_active_tasks`)\n\n  Own Id: OTP-13201","ref":"notes.html#improvements-and-new-features-64"},{"type":"extras","title":"Erts 7.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Revert \"Fix erroneous splitting of emulator path\"\n\n  Own Id: OTP-13202\n\n- Fix HiPE enabled emulator for FreeBSD.\n\n  Own Id: OTP-13204 Aux Id: pr926","ref":"notes.html#fixed-bugs-and-malfunctions-276"},{"type":"extras","title":"Erts 7.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Small documentation fixes\n\n  Own Id: OTP-13017\n\n- Fix memory corruption bug caused by disabling distribution and then re-enable\n  distribution with a node name that has previously been used by a remote node.\n\n  Own Id: OTP-13076 Aux Id: seq12959\n\n- Renamed variables with name bool as Visual Studio 2015 now treats this is a\n  keyword.\n\n  Own Id: OTP-13079\n\n- `erl_prim_loader` has not supported custom loaders for several releases. In\n  the documentation for `erl_prim_loader`, all references to custom loaders have\n  now been removed.\n\n  Own Id: OTP-13102\n\n- Fixed compilation of erts together with libc versions that do not define\n  \\_\\_uint32_t.\n\n  Own Id: OTP-13105\n\n- erl -make now returns non-zero exit codes on failure\n\n  Own Id: OTP-13107\n\n- Fix crash on init:restart in embedded mode caused by on_load handler process\n  not being relaunched leading to load failure for modules such as crypto and\n  asn1rt_nif that need it to be present for correct NIF loading.\n\n  Own Id: OTP-13115\n\n- Fix maps decode in erlang:binary_to_term/1\n\n  Decoding a term with a large (HAMT) map in an small (FLAT) map could cause a\n  critical error if the external format was not produced by beam.\n\n  Own Id: OTP-13125\n\n- Fix very rare bug in GC when big maps with a lot of hash collisions from a\n  remote node are waiting in inner message queue.\n\n  Own Id: OTP-13146\n\n- Fixed a bug that could cause a crash dump to become almost empty.\n\n  Own Id: OTP-13150","ref":"notes.html#fixed-bugs-and-malfunctions-277"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Updated the xmllint target to just check the xml files with real documentation\n  content.  \n  Corrected some errors and added some missing target in the DTD's.\n\n  Own Id: OTP-13026\n\n- Add function enif_getenv to read OS environment variables in a portable way\n  from NIFs.\n\n  Own Id: OTP-13147","ref":"notes.html#improvements-and-new-features-65"},{"type":"extras","title":"Erts 7.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug in ETS that could cause stray objects marked for deletion to\n  occasionally be missed by the cleanup done by `safe_fixtable(_,false)`.\n\n  Own Id: OTP-12870\n\n- Fixed VM crash that could occur if a trace port was linked to a process, and\n  the trace port terminated abnormally while handling a trace message. This bug\n  has always existed in the runtime system with SMP support.\n\n  Own Id: OTP-12901\n\n- Instead of aborting, the vm now creates a crash dump when a system process is\n  terminated.\n\n  Own Id: OTP-12934\n\n- Fixed a rare emulator dead lock that occurred when\n  erlang:process_flag(priority,...) was called by a process that was also\n  scheduled for an internal system activity.\n\n  Own Id: OTP-12943\n\n- The runtime system on various posix platforms (except for Linux and Solaris)\n  could crash when large amounts of file-descriptors were in use.\n\n  Own Id: OTP-12954\n\n- A beam file compiled by hipe for an incompatible runtime system was sometimes\n  not rejected by the loader, which could lead to vm crash. This fix will also\n  allow the same hipe compiler to be used by both normal and debug-built vm.\n\n  Own Id: OTP-12962\n\n- Fix bug in `maps:merge/2` when called by hipe compiled code that could cause\n  vm crash. Bug exists since erts-7.0 (OTP 18.0).\n\n  Own Id: OTP-12965\n\n- When tracing with `process_dump` option, the VM could abort if there was an\n  ongoing binary match somewhere in the call stack of the traced process.\n\n  Own Id: OTP-12968\n\n- Fixed possible output deadlock in tty driver when hitting \"CTRL-C\" in a\n  non-smp emulator shell on unix.\n\n  Own Id: OTP-12987 Aux Id: Seq12947\n\n- Fix `binary_to_integer` to throw badarg for \"+\" and \"-\" similar to\n  `list_to_integer`.\n\n  Own Id: OTP-12988\n\n- Suppress warning of unused argument when using macro enif_make_pid.\n\n  Own Id: OTP-12989","ref":"notes.html#fixed-bugs-and-malfunctions-278"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Changed default clock source used for OS system time on MacOS X to\n  `gettimeofday()` in order to improve performance. The system can be configured\n  during build to use the previously used higher resolution clock source by\n  passing the switch\n  [`--with-clock-resolution=high`](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring`)\n  when configuring the build.\n\n  Own Id: OTP-12945 Aux Id: OTP-12892\n\n- Added the `configure` option\n  [`--disable-saved-compile-time`](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring`)\n  which disables saving of compile date and time in the emulator binary.\n\n  Own Id: OTP-12971","ref":"notes.html#improvements-and-new-features-66"},{"type":"extras","title":"Erts 7.0.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-0-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a binary memory leak when printing to shell using the tty driver (i.e.\n  not -oldshell).\n\n  Own Id: OTP-12941\n\n- Fix a bug where the standard error port sometimes crashes with eagain as the\n  reason.\n\n  Own Id: OTP-12942\n\n- When tracing with `process_dump` option, the VM could abort if there was an\n  ongoing binary match somewhere in the call stack of the traced process./\n\n  Own Id: OTP-12968","ref":"notes.html#fixed-bugs-and-malfunctions-279"},{"type":"extras","title":"Erts 7.0.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process could end up in an inconsistent half exited state in the runtime\n  system without SMP support. This could occur if the processes was traced by a\n  port that it also was linked to, and the port terminated abnormally while\n  handling a trace message for the process.\n\n  This bug has always existed in the runtime system without SMP support, but\n  never in the runtime system with SMP support.\n\n  Own Id: OTP-12889 Aux Id: seq12885\n\n- Removed unnecessary copying of data when retrieving corrected Erlang monotonic\n  time.\n\n  Own Id: OTP-12894\n\n- Changed default OS monotonic clock source chosen at build time. This in order\n  to improve performance. The behavior will now on most systems be that (both OS\n  and Erlang) monotonic time stops when the system is suspended.\n\n  If you prefer that monotonic time elapse during suspend of the machine, you\n  can pass the command line argument\n  `--enable-prefer-elapsed-monotonic-time-during-suspend` to `configure` when\n  building Erlang/OTP. The configuration stage will try to find such a clock\n  source, but might not be able to find it. Note that there might be a\n  performance penalty associated with such a clock source.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12895\n\n- `erlang:system_info(end_time)` returned a faulty value on 32-bit\n  architectures.\n\n  Own Id: OTP-12896","ref":"notes.html#fixed-bugs-and-malfunctions-280"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The `configure` command line argument\n  `--enable-gettimeofday-as-os-system-time` has been added which force usage of\n  `gettimeofday()` for OS system time. This will improve performance of\n  `os:system_time()` and `os:timestamp()` on MacOS X, at the expense of worse\n  accuracy, resolution and precision of Erlang monotonic time, Erlang system\n  time, and OS system time.\n\n  Own Id: OTP-12892","ref":"notes.html#improvements-and-new-features-67"},{"type":"extras","title":"Erts 7.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix a rare hanging of the VM seen to happen just after emulator start. Bug\n  exists since R14.\n\n  Own Id: OTP-12859 Aux Id: seq12882","ref":"notes.html#fixed-bugs-and-malfunctions-281"},{"type":"extras","title":"Erts 7.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-7-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix issuing with spaces and quoting in the arguments when using\n  erlang:open_port spawn_executable on windows. The behavior now mimics how unix\n  works. This change implies a backwards incompatibility for how\n  spawn_executable works on windows.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11905\n\n- Fix global call trace when hipe compiled code call beam compiled functions.\n  Tracing of beam functions should now always work regardless who the caller is.\n\n  Own Id: OTP-11939\n\n- Correct cache alignment for ETS `write_concurrency` locks to improve\n  performance by reduced false sharing. May increase memory footprint for tables\n  with `write_concurrency`.\n\n  Own Id: OTP-11974\n\n- All possibly blocking operations in the fd/spawn and terminal driver have been\n  converted to non-blocking operations. Before this fix it was possible for the\n  VM to be blocked for a long time if the entity consuming stdout/stderr did not\n  consume it fast enough.\n\n  Own Id: OTP-12239\n\n- Add missing overhead for offheap binaries created from external format. This\n  fix can improve the garbage collection of large binaries originating from\n  `binary_to_term` or messages from remote nodes.\n\n  Own Id: OTP-12554\n\n- Ensure hashing of zero is consistent\n\n  Erlang treats positive and negative zero as equal:\n\n  `true = 0.0 =:= 0.0/-1`\n\n  However, Erlangs hash functions: hash, phash and phash2 did not reflect this\n  behaviour. The hash values produced by the different hash functions would not\n  be identical for positive and negative zero.\n\n  This change ensures that hash value of positive zero is always produced\n  regardless of the signedness of the zero float, i.e.,\n\n  `true = erlang:phash2(0.0) =:= erlang:phash2(0.0/-1)`\n\n  Own Id: OTP-12641\n\n- Ensure NIF term creation disallows illegal floating point values and too long\n  atoms. Such values will cause a NIF to throw badarg exception when it returns.\n\n  Own Id: OTP-12655\n\n- Fixed building of Map results from match_specs\n\n  A faulty \"box-value\" entered into the heap which could cause a segmentation\n  fault in the garbage collector if it was written on a heap fragment.\n\n  Own Id: OTP-12656\n\n- Fix hipe bug when matching a \"writable\" binary. The bug has been seen to\n  sometimes cause a failed binary matching of a correct utf8 character, but\n  other symptoms are also possible.\n\n  Own Id: OTP-12667\n\n- Keep dirty schedulers from waking other schedulers.\n\n  Own Id: OTP-12685\n\n- Disable floating point exceptions if the VM is compiled by clang/llvm. This is\n  a known long-standing problem in clang/llvm.\n\n  Own Id: OTP-12717\n\n- Fix bug in `file:sendfile` for FreeBSD causing not the entire file to be sent.\n\n  Own Id: OTP-12720\n\n- Fix the broken Android support in erl_child_setup.c\n\n  Own Id: OTP-12751\n\n- Faulty statistics reported by the `fix_alloc` allocator.\n\n  Own Id: OTP-12766\n\n- Fix two erts_snprintf() calls to correct sizes.\n\n  \\- run_erl.c (ose): Use the size of the signal type, not its pointer. -\n  erl_node_tables.c: Use the size of the \\_BUFFER in erts_snprintf() to make\n  sure we can use the full space.\n\n  Own Id: OTP-12771\n\n- Delayed memory allocations could be delayed an unnecessarily long time.\n\n  Own Id: OTP-12812\n\n- Make sure that timeouts on a pool of acceptors are released in the correct\n  order.\n\n  Own Id: OTP-12817\n\n- Fix segmentation fault in module_info for deleted modules\n\n  Own Id: OTP-12820\n\n- Fix garbage collection of literals in code purge\n\n  During code purging and check_process_code, the checking of the binary\n  reference embedded in the match binary state was omitted for the tracing\n  tests. This would cause the binary match state to reference deallocated\n  memory.\n\n  Own Id: OTP-12821\n\n- A bug has been corrected for gen_tcp:close so when \\{linger,\\{true,0\\}\\} is in\n  effect it does not wait for data in the driver queue to transfer out before\n  closing the port. Bug fix by Rory Byrne.\n\n  Own Id: OTP-12840\n\n- The documentation of the driver callback [`start()`](driver_entry.md#start)\n  erroneously stated that a return value of `ERL_DRV_ERROR_ERRNO` caused the\n  error value to be passed via `erl_errno` when it should have been `errno`.\n\n  Own Id: OTP-12855","ref":"notes.html#fixed-bugs-and-malfunctions-282"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add `md5` and `module` entries to `?MODULE:module_info/0/1` and remove\n  obsolete entry 'import'.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11940\n\n- Debug function `erlang:display/1` shows content of binaries and bitstrings,\n  not only the length.\n\n  Own Id: OTP-11941\n\n- The time functionality of Erlang has been extended. This both includes a\n  [new API](time_correction.md#new-time-api) for time, as well as\n  [time warp modes](time_correction.md#time-warp-modes) which alters the\n  behavior of the system when system time changes. _You are strongly encouraged\n  to use the new API_ instead of the old API based on `erlang:now/0`.\n  `erlang:now/0` has been deprecated since it is and forever will be a\n  scalability bottleneck. For more information see the\n  [Time and Time Correction](time_correction.md) chapter of the ERTS User's\n  Guide.\n\n  Besides the API changes and time warp modes a lot of scalability and\n  performance improvements regarding time management has been made internally in\n  the runtime system. Examples of such improvements are scheduler specific timer\n  wheels, scheduler specific BIF timer management, parallel retrieval of\n  monotonic time and system time on systems with primitives that are not buggy.\n\n  Own Id: OTP-11997\n\n- `erlang:function_exported(M, F, A)` will now return `true` if `M:F/A` refers\n  to a BIF.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12099\n\n- New BIF: `erlang:get_keys/0`, lists all keys associated with the process\n  dictionary. Note: `erlang:get_keys/0` is auto-imported.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12151 Aux Id: seq12521\n\n- Make distributed send of large messages yield to improve real-time\n  characteristics.\n\n  Own Id: OTP-12232\n\n- Use high accuracy poll timeouts\n\n  Where available, use poll/select API's that can handle time resolutions less\n  than 1ms. In the cases where such API's are not available the timeout is\n  rounded up to the nearest ms.\n\n  Own Id: OTP-12236\n\n- The internal group to user_drv protocol has been changed to be synchronous in\n  order to guarantee that output sent to a process implementing the user_drv\n  protocol is printed before replying. This protocol is used by the\n  standard_output device and the ssh application when acting as a client.\n\n  This change changes the previous unlimited buffer when printing to standard_io\n  and other devices that end up in user_drv to 1KB.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12240\n\n- The previously introduced \"eager check I/O\" feature is now enabled by default.\n\n  Eager check I/O can be disabled using the `erl` command line argument:\n  `+secio false`\n\n  Characteristics impact compared to previous default:\n\n  - Lower latency and smoother management of externally triggered I/O\n    operations.\n  - A slightly reduced priority of externally triggered I/O operations.\n\n  Own Id: OTP-12254 Aux Id: OTP-12117\n\n- Properly support maps in match_specs\n\n  Own Id: OTP-12270\n\n- The notice that a crashdump has been written has been moved to be printed\n  before the crashdump is generated instead of afterwords. The wording of the\n  notice has also been changed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12292\n\n- New function `ets:take/2`. Works the same as `ets:delete/2` but also returns\n  the deleted object(s).\n\n  Own Id: OTP-12309\n\n- Tracing with cpu_timestamp option has been enabled on Linux.\n\n  Own Id: OTP-12366\n\n- ets:info/1,2 now contains information about whether write_concurrency or\n  read_concurrency is enabled.\n\n  Own Id: OTP-12376\n\n- Improved usage of `gcc`'s builtins for atomic memory access. These are used\n  when no other implementation of atomic memory operations is available. For\n  example, when compiling for ARM when `libatomic_ops` is not available.\n\n  The largest improvement will be seen when compiling with a `gcc` with support\n  for the `__atomic_*` builtins (using a `gcc` of at least version 4.7), but\n  also when only the legacy `__sync_*` builtins are available (using a `gcc` of\n  at least version 4.1) an improvement can be seen.\n\n  For more information see the\n  \"[Atomic Memory Operations and the VM](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring_atomic-memory-operations-and-the-vm`)\"\n  section of `$ERL_TOP/HOWTO/INSTALL.md`.\n\n  Own Id: OTP-12383\n\n- Introduce `math:log2/1` function to math module.\n\n  Own Id: OTP-12411\n\n- The documentation of the Abstract Format (in the ERTS User's Guide) has been\n  updated with types and specification. (Thanks to Anthony Ramine.)\n\n  The explicit representation of parentheses used in types of the abstract\n  format has been removed. Instead the new functions\n  `erl_parse:type_inop_prec()` and `erl_parse:type_preop_prec()` can be used for\n  inserting parentheses where needed.\n\n  Own Id: OTP-12492\n\n- Remove perfctr support\n\n  Development of perfctr in the linux kernel ceased in 2010. The perfctr support\n  code in the Erlang VM is thus effectively dead code and therefore removed.\n\n  Own Id: OTP-12508\n\n- `zlib:inflateChunk/2` has been added. It works like `zlib:inflate/2`, but\n  decompresses no more data than will fit in the buffer configured by\n  `zlib:setBufSize/2`.\n\n  Own Id: OTP-12548\n\n- Use linear search for small select_val arrays\n\n  Own Id: OTP-12555\n\n- New BIF ets:update_counter/4 with a default object as argument, which will be\n  inserted in the table if the key was not found.\n\n  Own Id: OTP-12563\n\n- Export missing types from zlib module\n\n  Own Id: OTP-12584\n\n- Use persistent hashmaps for large Maps\n\n  Maps will use a persistent hashmap implementation when the number of pairs in\n  a Map becomes sufficiently large. The change will occur when a Map reaches 33\n  pairs in size but this limit might change in the future.\n\n  The most significant impact for the user by this change is speed, and to a\n  lesser degree memory consumption and introspection of Maps. Memory consumption\n  size is probalistic but lesser than `gb_trees` or `dict` for instance. Any\n  other impacts will be transparent for the user except for the following\n  changes.\n\n  Semantics of Maps have changed in two incompatible ways compared to the\n  experimental implementation in OTP 17:\n\n  - Hashing of maps is done different by `erlang:phash2/1,2`, `erlang:phash/1`\n    and `erlang:hash/2`.\n  - Comparing two maps with ==, /=, =<, <, >= and >, is done different if the\n    keys contain floating point numbers.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12585\n\n- Scalability improvement for `erlang:make_ref/0`, and other functionality that\n  create references. Each scheduler now manage its own set of references. By\n  this no communication at all is needed when creating references.\n\n  Previous implementation generated a strictly monotonically increasing sequence\n  of references corresponding to creation time on the runtime system instance.\n  This is _not_ the case with current implementation. You can only expect\n  reference to be unique. The Erlang/OTP documentation has never mentioned\n  anything else but the uniqueness property, so this change _is_ fully\n  compatible. The only reason we've marked this as a potential incompatibility\n  is since an early draft for an Erlang specification mentions strict\n  monotonicity as a property.\n\n  If you need to create data with a strict monotonicity property use\n  [erlang:unique_integer(\\[monotonic])](`erlang:unique_integer/1`). Do _not_ use\n  the deprecated [erlang:now()](`erlang:now/0`).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12610\n\n- Enable different abort signal from heart\n\n  By using environment variable HEART_KILL_SIGNAL, heart can now use a different\n  signal to kill the old running Erlang.\n\n  By default the signal is SIGKILL but SIGABRT may also be used by setting\n  environment variable: HEART_KILL_SIGNAL=SIGABRT\n\n  Own Id: OTP-12613 Aux Id: seq12826\n\n- Update autconf to latest version 2015-03-04\n\n  Own Id: OTP-12646\n\n- Optimization of timers internally in the VM. This include process timers\n  (`receive ... after`), port timers (`driver_set_timer()`) as well as BIF\n  timers (`erlang:send_after()`/`erlang:start_timer()`).\n\n  Each scheduler thread now has its own lock-free timer service instead of one\n  locked central service. This dramatically improves performance of timer\n  management on systems with a large amount of schedulers and timers.\n\n  The timer service internal data structure has also been optimized to be able\n  to handle more timers than before. That is, each timer service is by its self\n  able to handle more timers without dramatic performance loss than the old\n  centralized timer service.\n\n  The API of BIF timers has also been extended. Timeout values are for example\n  no longer limited to 32-bit integers. For more information see the\n  documentation of `erlang:start_timer/4`, `erlang:send_after/4`,\n  `erlang:cancel_timer/2`, and `erlang:read_timer/2`.\n\n  Characteristics impact: Calls to the synchronous versions of\n  `erlang:cancel_timer()`, and `erlang:read_timer()` may take substantially\n  longer time to complete than before. This occur when the timer that is\n  accessed is managed by a remote scheduler. You typically want to use the new\n  asynchronous option in order to avoid blocking the calling process.\n\n  Own Id: OTP-12650 Aux Id: OTP-11997\n\n- Specialize instructions from common assembler patterns\n\n  Specialize common instructions of `rem`, `band`, `minus` and `plus` in the\n  beam loader. This will reduce the number of fetches and thus lessen the\n  instruction dispatch pressure during runtime and speed up those operations in\n  some common cases.\n\n  Specialize move patterns from x-registers to the stack with a new\n  `move_window` instruction. This change will reduce instruction dispatch\n  pressure.\n\n  Own Id: OTP-12690\n\n- Fix cross compilation for Android.\n\n  Own Id: OTP-12693\n\n- Fix incorrect use of autoconf macro AC_EGREP_CPP, which could cause faulty\n  configuration if run from a path containing the string 'yes'.\n\n  Own Id: OTP-12706\n\n- Minimal Java version is now 1.6\n\n  Own Id: OTP-12715\n\n- Send format and args on process exit to error_logger\n\n  Previously, the emulator would generate a whole string with values and call\n  the error_logger passing `\"~s~n\"`. This changes it to a format string\n  containing `~p` with the respective values as arguments.\n\n  Own Id: OTP-12735\n\n- Map error logger warnings to warning messages by default.\n\n  Own Id: OTP-12755\n\n- Configure architecture ppc64le architecture as a ppc64\n\n  Own Id: OTP-12761\n\n- Add function `enif_raise_exception` to allow a NIF to raise an error exception\n  with any type of reason.\n\n  Own Id: OTP-12770\n\n- Optimized node table statistics retrieval.\n\n  Own Id: OTP-12777\n\n- Map beam error logger warnings to warning messages by default. Previously\n  these messages were mapped to the error channel by default.\n\n  Own Id: OTP-12781\n\n- gen_tcp:shutdown/2 is now asynchronous\n\n  This solves the following problems with the old implementation:\n\n  It doesn't block when the TCP peer is idle or slow. This is the expected\n  behaviour when shutdown() is called: the caller needs to be able to continue\n  reading from the socket, not be prevented from doing so.\n\n  It doesn't truncate the output. The current version of gen_tcp:shutdown/2 will\n  truncate any outbound data in the driver queue after about 10 seconds if the\n  TCP peer is idle of slow. Worse yet, it doesn't even inform anyone that the\n  data has been truncated: 'ok' is returned to the caller; and a FIN rather than\n  an RST is sent to the TCP peer.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12797\n\n- Introduced delayed node table GC. This in order to avoid oscillation of\n  entries in and out of the tables. The oscillation caused unnecessary lock\n  contention on the table locks. The delay length can be set by passing the\n  [`+zdntgc`](erl_cmd.md#%2Bzdntgc) command line argument.\n\n  Characteristics impact: The tables can grow to very large sizes with unused\n  entries if the node is get huge amounts of short lived connections from other\n  nodes. This problem can be alleviated by shortening the length of the delay\n  using the `+zdntgc` command line argument.\n\n  Own Id: OTP-12802\n\n- Improved implementation of [`erlang:statistics`](`erlang:statistics/1`)`(io)`\n  in order to reduce contention between schedulers.\n\n  Characteristics impact: The actual call to `erlang:statistics(io)` takes\n  longer time to complete, but the overall impact on the system is improved.\n\n  Own Id: OTP-12842\n\n- There are many cases where user code needs to be able to distinguish between a\n  socket that was closed normally and one that was aborted. Setting the option\n  \\{show_econnreset, true\\} enables the user to receive ECONNRESET errors on\n  both active and passive sockets.\n\n  Own Id: OTP-12843\n\n- Do not preallocate too large event pool\n\n  A default pool size of 4000 is too excessive for the common case. This\n  corresponds directly to the number of threads in the system. Change\n  ERTS_TS_EV_ALLOC_DEFAULT_POOL_SIZE to 2048. Change ERTS_TS_EV_ALLOC_POOL_SIZE\n  to 32.\n\n  Own Id: OTP-12849","ref":"notes.html#improvements-and-new-features-68"},{"type":"extras","title":"Erts 6.4.1.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-4-1-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process communicating with a port via one of the `erlang:port_*` BIFs could\n  potentially end up in an inconsistent state if the port terminated during the\n  communication. When this occurred the process could later block in a `receive`\n  even though it had messages matching in its message queue.\n\n  This bug was introduced in erts version 5.10 (OTP R16A).\n\n  Own Id: OTP-13424 Aux Id: OTP-10336\n\n- Calls to `erl_drv_send_term()` or `erl_drv_output_term()` from a non-scheduler\n  thread while the corresponding port was invalid caused the emulator to enter\n  an inconsistent state which eventually caused an emulator crash.\n\n  Own Id: OTP-13866\n\n- Driver and NIF operations accessing processes or ports could cause an emulator\n  crash when used from non-scheduler threads. Those operations are:\n\n  - `erl_drv_send_term()`\n  - `driver_send_term()`\n  - `erl_drv_output_term()`\n  - `driver_output_term()`\n  - `enif_send()`\n  - `enif_port_command()`\n\n  Own Id: OTP-13869\n\n- Fix bug in `binary_to_term` for binaries created by `term_to_binary `with\n  option `compressed`. The bug can cause `badarg` exception for a valid binary\n  when Erlang VM is linked against a `zlib` library of version 1.2.9 or newer.\n  Bug exists since OTP 17.0.\n\n  Own Id: OTP-14159 Aux Id: ERL-340\n\n- Fixed bug in operator `bxor` causing erroneuos result when one operand is a\n  big _negative_ integer with the lowest `N*W` bits as zero and the other\n  operand not larger than `N*W` bits. `N` is an integer of 1 or larger and `W`\n  is 32 or 64 depending on word size.\n\n  Own Id: OTP-14514\n\n- Fixed bug in `binary_to_term` and `binary_to_atom` that could cause VM crash.\n  Typically happens when the last character of an UTF8 string is in the range\n  128 to 255, but truncated to only one byte. Bug exists in `binary_to_term`\n  since ERTS version 5.10.2 (OTP_R16B01) and `binary_to_atom` since ERTS version\n  9.0 (OTP-20.0).\n\n  Own Id: OTP-14590 Aux Id: ERL-474","ref":"notes.html#fixed-bugs-and-malfunctions-283"},{"type":"extras","title":"Erts 6.4.1.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-4-1-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- When calling `garbage_collect/[1,2]` or `check_process_code/[2,3]` from a\n  process with a higher priority than the priority of the process operated on,\n  the run queues could end up in an inconsistent state. This bug has now been\n  fixed.\n\n  Own Id: OTP-13298 Aux Id: OTP-11388","ref":"notes.html#fixed-bugs-and-malfunctions-284"},{"type":"extras","title":"Erts 6.4.1.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-4-1-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug that could cause a crash dump to become almost empty.\n\n  Own Id: OTP-13150","ref":"notes.html#fixed-bugs-and-malfunctions-285"},{"type":"extras","title":"Erts 6.4.1.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-4-1-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The 'raw' socket option could not be used multiple times in one call to any\n  e.g gen_tcp function because only one of the occurrences were used. This bug\n  has been fixed, and also a small bug concerning propagating error codes from\n  within inet:setopts/2.\n\n  Own Id: OTP-11482 Aux Id: seq12872","ref":"notes.html#fixed-bugs-and-malfunctions-286"},{"type":"extras","title":"Erts 6.4.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-4-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The VTS mode in Common Test has been modified to use a private version of the\n  Webtool application (ct_webtool).\n\n  Own Id: OTP-12704 Aux Id: OTP-10922","ref":"notes.html#fixed-bugs-and-malfunctions-287"},{"type":"extras","title":"Erts 6.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix missing quotation in the `LM_FIND_EMU_CC` `autoconf` macro which could\n  cause build failures.\n\n  Own Id: OTP-12388\n\n- Fix erroneous printout of monitors in crashdump file.\n\n  Own Id: OTP-12537\n\n- The runtime system without SMP support could crash in the BIF\n  [`port_control/3`](`port_control/3`) if the port that was being accessed died\n  during the call to the BIF.\n\n  Own Id: OTP-12544 Aux Id: Seq12777\n\n- Avoid corrupt oversized integer to be created from binary matching. Instead\n  throw system_limit exception which is the correct behavior. A peculiar symptom\n  of this bug was that bitwise operations (band, bor, bxor) on such oversized\n  integers could return the empty list []. Credit: Mikael Pettersson, Nico\n  Kruber\n\n  Own Id: OTP-12556\n\n- A race condition when calling `port_info/1` could cause a memory fault has\n  been fixed.\n\n  Own Id: OTP-12587\n\n- Fix comparison of exact terms. An overflow that could cause faulty comparisons\n  has been fixed. Comparison of exact terms is exclusively used within Maps.\n\n  Own Id: OTP-12623\n\n- Fix bug in [`list_to_integer/1`](`list_to_integer/1`) for very long lists that\n  could cause VM crash.\n\n  Own Id: OTP-12624","ref":"notes.html#fixed-bugs-and-malfunctions-288"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Introduced a runtime system internal 64-bit API for atomic memory operations.\n\n  Own Id: OTP-12351\n\n- Add command line argument option for the initial size of process dictionaries.\n\n  Use '+hpds  ' to set initial process dictionary size for spawned\n  processes.\n\n  Own Id: OTP-12535 Aux Id: seq12809\n\n- Fix documentation on $char for Unicode\n\n  Own Id: OTP-12545","ref":"notes.html#improvements-and-new-features-69"},{"type":"extras","title":"Erts 6.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix getifaddrs realloc pointer error\n\n  When a buffer was exhausted and subsequently reallocated, we could get an\n  unsafe pointer pointing to faulty memory.\n\n  For this to occur we would need to have a large number of interfaces and a\n  reallocation of memory to a lower addresses.\n\n  The symptom would be garbage returned from erlang:port_control(Port, 25, [])\n  (prim_inet:getifaddrs(Port) resulting in a badarg) or a segmentation fault.\n\n  Own Id: OTP-12445\n\n- Don't close all file descriptors twice in child_setup\n\n  The commit c2b4eab25c907f453a394d382c04cd04e6c06b49 introduced an error in\n  which child_setup erroneously tried to close all file descriptors twice.\n\n  Use closefrom() if available when closing all file descriptors.\n\n  The function closefrom() was only used in the vfork() case before but is now\n  also used in the fork() case if available.\n\n  Own Id: OTP-12446\n\n- During a crashdump all file descriptors are closed to ensure the closing of\n  the epmd port and to reserve a file descriptor for the crashdump file.\n\n  If a driver (third party library) cannot handle closing of sockets this could\n  result in a segmentation fault in which case a crashdump would not be\n  produced. This is now fixed by only closing inets sockets via an emergency\n  close callback to the driver and thus closing the epmd socket.\n\n  Own Id: OTP-12447","ref":"notes.html#fixed-bugs-and-malfunctions-289"},{"type":"extras","title":"Erts 6.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix HiPE debug lock checking on OS X 64bit\n\n  Position-independent code is mandatory on OS X. We use r11 as an intermediate\n  register to fill BIF_P->hipe.bif_callee. This fixes the following error when\n  doing \\`make debug FLAVOR=smp\\`:\n\n  clang -cc1as: fatal error: error in backend: 32-bit absolute addressing is not\n  supported in 64-bit mode\n\n  Own Id: OTP-12188\n\n- Fix race bug that could cause VM crash in `erlang:port_get_data/1` if the port\n  was closed by a concurrent process. Also fix fatal bug if `port_set_data/2` is\n  called with a non-immediate data term. Both bugs exist since R16B01.\n\n  Own Id: OTP-12208\n\n- Correct make variable SSL_DED_LD_RUNTIME_LIBRARY_PATH when erl_xcomp_sysroot\n  ends with a slash.\n\n  Own Id: OTP-12216 Aux Id: seq12700\n\n- Fix two cases of unreachable code caused by false use of assignment operators.\n\n  Own Id: OTP-12222\n\n- Fix bug when hipe compiled code makes tail call to a BIF that disables GC\n  while trapping (sush as binary_to_list, list_to_binary, binary_to_term,\n  term_to_binary).\n\n  Own Id: OTP-12231\n\n- Fix bug when a migrated empty memory carrier is reused just before it should\n  be destroyed by the thread that created it.\n\n  Own Id: OTP-12249\n\n- Prevents compile-time errors in NIFs, when the compiler is instructed to treat\n  missing field initializers as errors, by adding an initializer for the new\n  options field which was added to ErlNifEntry for 17.3.\n\n  Own Id: OTP-12266\n\n- Fixed CPU topology detection on FreeBSD systems where Erlang/OTP is compiled\n  by new C compilers (including, but possibly not limited to, gcc 4.9 and\n  clang).\n\n  Own Id: OTP-12267\n\n- Use C99 function isfinite() instead of finite() when available on non GCC\n  compilers.\n\n  Own Id: OTP-12268\n\n- Fix bug on windows where an incorrect number of links could be returned when\n  doing file:read_file_info on a directory.\n\n  Own Id: OTP-12269\n\n- Fix rare bug when purging module on VM started with +Meamin.\n\n  Own Id: OTP-12273\n\n- Repair run_erl terminal window size adjustment sent from to_erl. This was\n  broken in OTP 17.0 which could lead to strange cursor behaviour in the to_erl\n  shell.\n\n  Own Id: OTP-12275 Aux Id: seq12739\n\n- Fixed bug on windows causing gen_tcp/udp to return an error when given an fd\n  to work with.\n\n  Own Id: OTP-12289\n\n- Fix various internal erts issues where negating a signed integer in C would\n  trigger undefined behavior. This fixes issues when dividing with bignums and\n  list_to_integer.\n\n  Own Id: OTP-12290\n\n- When flushing output to stdout on windows, the emulator could sometimes hang\n  indefinitely waiting for the flush to complete. This has been fixed.\n\n  Own Id: OTP-12291\n\n- Fix so that non-smp emulators with dirty scheduler support shows the correct\n  number of dirty schedulers when calling erlang:system_info(system_version).\n\n  Own Id: OTP-12295\n\n- Add `nif_version` to `erlang:system_info/1` in order to get the NIF API\n  version of the runtime system in a way similar to `driver_version`.\n\n  Own Id: OTP-12298\n\n- Fix bug that could cause the return value from dirty NIF with zero arity to be\n  treated as garbage, leading to VM crash.\n\n  Own Id: OTP-12300\n\n- Improve allocation carrier migration search logic. This will reduce the risk\n  of failed migrations that could lead to excess memory consumption. It will\n  also improve smp performance due to reduced memory contention on the migration\n  pool.\n\n  Own Id: OTP-12323","ref":"notes.html#fixed-bugs-and-malfunctions-290"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Introduced support for eager check I/O.\n\n  By default eager check I/O will be disabled, but this will most likely be\n  changed in OTP 18. When eager check I/O is enabled, schedulers will more\n  frequently check for I/O work. Outstanding I/O operations will however not be\n  prioritized to the same extent as when eager check I/O is disabled.\n\n  Eager check I/O can be enabled using the `erl` command line argument:\n  `+secio true`\n\n  Characteristics impact when enabled:\n\n  - Lower latency and smoother management of externally triggered I/O\n    operations.\n  - A slightly reduced priority of externally triggered I/O operations.\n\n  Own Id: OTP-12117\n\n- Fix erts .app-file\n\n  Own Id: OTP-12189\n\n- Add configure option --with-ssl-incl=PATH to support OpenSSL installations\n  with headers and libraries at different places.\n\n  Own Id: OTP-12215 Aux Id: seq12700\n\n- Optimization of atomic memory operations with release barrier semantics on\n  32-bit PowerPC when using the implementation included in OTP.\n\n  Own Id: OTP-12250\n\n- Minor adjustment of scheduler activation code making sure that an activation\n  of a scheduler is not prevented by its run-queue being non-empty. (Thanks to\n  Songlu Cai)\n\n  Own Id: OTP-12287\n\n- Improved support for atomic memory operations provided by the\n  [libatomic_ops](https://github.com/ivmai/libatomic_ops/) library. Most\n  importantly support for use of native double word atomics when implemented by\n  `libatomic_ops` (for example, implemented for ARM).\n\n  The\n  [`$ERL_TOP/HOWTO/INSTALL.md`](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp_configuring_atomic-memory-operations-and-the-vm`)\n  document now also more clearly describes when you want to build together with\n  a `libatomic_ops` installation.\n\n  Own Id: OTP-12302\n\n- Add configure option --with-ssl-rpath to control which runtime library path to\n  use for dynamic linkage toward OpenSSL.\n\n  Own Id: OTP-12316 Aux Id: seq12753\n\n- Added systemd notify support to epmd\n\n  Own Id: OTP-12321","ref":"notes.html#improvements-and-new-features-70"},{"type":"extras","title":"Erts 6.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix bug when an migrated empty memory carrier is reused just before it should\n  be destroyed by the thread that created it.\n\n  Own Id: OTP-12249\n\n- Repair run_erl terminal window size adjustment sent from to_erl. This was\n  broken in OTP 17.0 which could lead to strange cursor behaviour in the to_erl\n  shell.\n\n  Own Id: OTP-12275 Aux Id: seq12739","ref":"notes.html#fixed-bugs-and-malfunctions-291"},{"type":"extras","title":"Erts 6.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- General documentation updates.\n\n  Own Id: OTP-12052\n\n- A bug in the VM code implementing sending of signals to ports could cause the\n  receiving port queue to remain in a busy state forever. When this state had\n  been reached, processes sending command signals to the port either got\n  suspended forever, or, if the `nosuspend` feature was used, always failed to\n  send to the port. This bug was introduced in ERTS version 5.10.\n\n  In order for this bug to be triggered on a port, one had to at least once\n  utilize the `nosuspend` functionality when passing a signal to the port. This\n  by either calling\n\n  - [`port_command(Port, Data, [nosuspend | Options])`](`erlang:port_command/3`),\n  - [`erlang:send(Port, {PortOwner, {command, Data}}, [nosuspend | Options])`](`erlang:send/3`),\n  - [`erlang:send_nosuspend(Port, {PortOwner, {command, Data}})`](`erlang:send_nosuspend/2`),\n    or\n  - [`erlang:send_nosuspend(Port, {PortOwner, {command, Data}}, Options)`](`erlang:send_nosuspend/3`).\n\n  Thanks Vasily Demidenok for reporting the issue, and Sergey Kudryashov for\n  providing a testcase.\n\n  Own Id: OTP-12082 Aux Id: OTP-10336\n\n- Fix size overflow bug at memory allocation. A memory allocation call, with an\n  insane size close to the entire address space, could return successfully as if\n  it had allocated just a few bytes. (Thanks to Don A. Bailey for reporting)\n\n  Own Id: OTP-12091\n\n- Fix various issues where negating a signed integer would trigger undefined\n  behaviour. This fixes issues in the enif_make_int64 interface and some edge\n  cases inside the erlang runtime system.\n\n  Own Id: OTP-12097\n\n- The documentation erroneously listed the [`+swct`](erl_cmd.md#%2Bswct) command\n  line argument under `+sws`.\n\n  Own Id: OTP-12102 Aux Id: OTP-10994\n\n- Profiling messages could be delivered out of order when profiling on\n  `runnable_procs` and/or `runnable_ports` using `erlang:system_profile/2`. This\n  bug was introduced in ERTS version 5.10.\n\n  Own Id: OTP-12105 Aux Id: OTP-10336\n\n- Various logging fixes, including: Add run queue index to the process dump in\n  crash dumps.  \n  Add thread index to enomem slogan when crashing.  \n  Remove error logger message for sending messages to old instances of the same\n  node.\n\n  Own Id: OTP-12115\n\n- Fix compiler warnings reported by LLVM\n\n  Own Id: OTP-12138\n\n- Correct conversion of `MIN_SMALL` by\n  [`list_to_integer/1`](`list_to_integer/1`) and\n  [`binary_to_integer/1`](`binary_to_integer/1`). The bug produced an\n  unnormalized bignum which can cause strange behavior such as comparing\n  different to a correct `MIN_SMALL` integer. The value `MIN_SMALL` is\n  `-(1 bsl 27) = -134217728` on a 32-bit VM and\n  `-(1 bsl 59) = -576460752303423488` on a 64-bit VM. (Thanks to Jesper Louis\n  Andersen, Mikael Pettersson and Anthony Ramine for report, patch and\n  optimization suggestion)\n\n  Own Id: OTP-12140\n\n- Fix bug in `term_to_binary` that reallocates binary with inconsistent size\n  information. Bug has never been confirmed to be the cause of any faulty\n  behavior.\n\n  Own Id: OTP-12141\n\n- Real_path method used while prim loading archive files was not taking into\n  account the fact that windows directory symlinks can be across different\n  drives.\n\n  Own Id: OTP-12155","ref":"notes.html#fixed-bugs-and-malfunctions-292"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add log2 histogram to lcnt for lock wait time\n\n  Own Id: OTP-12059\n\n- Introduced [`enif_schedule_nif()`](erl_nif.md#enif_schedule_nif) to the NIF\n  API.\n\n  The `enif_schedule_nif()` function allows a long-running NIF to be broken into\n  separate NIF invocations without the help of a wrapper function written in\n  Erlang. The NIF first executes part of the long-running task, then calls\n  `enif_schedule_nif()` to schedule a NIF for later execution to continue the\n  task. Any number of NIFs can be scheduled in this manner, one after another.\n  Since the emulator regains control between invocations, this helps avoid\n  problems caused by native code tying up scheduler threads for too long.\n\n  The `enif_schedule_nif()` function also replaces the\n  `enif_schedule_dirty_nif()` in the experimental dirty NIF API. Note that the\n  only incompatible changes made are in the experimental dirty NIF API.\n\n  See the [NIF documentation](erl_nif.md) for more information.\n\n  Thanks to Steve Vinoski.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12128","ref":"notes.html#improvements-and-new-features-71"},{"type":"extras","title":"Erts 6.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- OTP-11850 fixed filelib:wildcard/1 to work with broken symlinks. This\n  correction, however, introduced problems since symlinks were no longer\n  followed for functions like filelib:ensure_dir/1, filelib:is_dir/1,\n  filelib:file_size/1, etc. This is now corrected.\n\n  Own Id: OTP-12054 Aux Id: seq12660","ref":"notes.html#fixed-bugs-and-malfunctions-293"},{"type":"extras","title":"Erts 6.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed ETHR_FORCE_INLINE which caused the build to break on some platforms\n  without adequate thread support (VxWorks).\n\n  Own Id: OTP-12010","ref":"notes.html#fixed-bugs-and-malfunctions-294"},{"type":"extras","title":"Erts 6.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The documentation for [`spawn_opt/5`](`spawn_opt/5`) now has a note mentioning\n  that the `monitor` option is not supported.\n\n  Own Id: OTP-11849\n\n- Fix broken system monitoring of `large_heap` for non-smp VM. No message for\n  `large_heap` was ever sent on non-smp VM. Bug exist since R16B.\n\n  Own Id: OTP-11852\n\n- The emulator without SMP support crashed when passing a message to a process\n  without enough heap space for the message. This bug was introduced in\n  `erts-6.0`.\n\n  Own Id: OTP-11887 Aux Id: OTP-11388\n\n- Fix race between ETS table deletion and unfixation that could cause VM crash.\n  The race could happen between a terminating process that does not own the\n  table but has a fixation on it and another process that deletes the table\n  (maybe the owner terminating) at the same time. Bug existed since R15B02.\n\n  Own Id: OTP-11892\n\n- The string following the `-eval` option when invoking `erl` would not be\n  properly translated from UTF-8 to a list of Unicode characters (as would the\n  arguments for `-run`).\n\n  That bug would cause the build of Erlang/OTP to fail when building in a\n  directory whose pathname contained non-US ASCII characters encoded in UTF-8.\n  (Thanks to Eric Pailleau for reporting this bug.)\n\n  Own Id: OTP-11916\n\n- Fix erts_debug:size/1 to handle Map sizes\n\n  Own Id: OTP-11923\n\n- Removed `erlang:bitstr_to_list/1` and `erlang:list_to_bitstr/1`. They were\n  added by mistake, and have always raised an `undefined` exception when called.\n\n  Own Id: OTP-11942\n\n- Fixed compilation using mingw-w64 on Windows.\n\n  Thanks to Jani Hakala.\n\n  Own Id: OTP-11945\n\n- The git sha is no longer printed in the shell start header when erlang is\n  built from a tagged git release.\n\n  Own Id: OTP-11961\n\n- Fixed a bug where `send` trace events were erroneously dropped when the send\n  was done to a registered process. This bug was introduced in R16B.\n\n  Own Id: OTP-11968","ref":"notes.html#fixed-bugs-and-malfunctions-295"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The following native functions now bump an appropriate amount of reductions\n  and yield when out of reductions:\n\n  - `erlang:binary_to_list/1`\n  - `erlang:binary_to_list/3`\n  - `erlang:bitstring_to_list/1`\n  - `erlang:list_to_binary/1`\n  - `erlang:iolist_to_binary/1`\n  - `erlang:list_to_bitstring/1`\n  - `binary:list_to_bin/1`\n\n  Characteristics impact:\n\n  - **Performance** - The functions converting from lists got a performance loss\n    for very small lists, and a performance gain for very large lists.\n\n  - **Priority** - Previously a process executing one of these functions\n    effectively got an unfair priority boost. This priority boost depended on\n    the input size. The larger the input was, the larger the priority boost got.\n    This unfair priority boost is now lost.\n\n  Own Id: OTP-11888\n\n- The systemd features of epmd have been removed from epmd by default. To enable\n  them you have to build erlang with the configure option --enable-systemd.\n\n  Own Id: OTP-11921\n\n- Removed Erlang wrapper code used when calling\n  [`binary_to_term/1`](`binary_to_term/1`), and\n  [`binary_to_term/2`](`binary_to_term/2`). This improves the performance of\n  these BIFs especially when they are called with small binaries as input.\n\n  Own Id: OTP-11931\n\n- Add erlang:system_info(tolerant_timeofday), an API to check whether\n  compensation for sudden changes of system time is enabled or not.\n\n  Own Id: OTP-11970","ref":"notes.html#improvements-and-new-features-72"},{"type":"extras","title":"Erts 6.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix broken system monitoring of `large_heap` for non-smp VM. No message for\n  `large_heap` was ever sent on non-smp VM. Bug exist since R16B.\n\n  Own Id: OTP-11852\n\n- Fixed type spec of `erlang:system_info/1`.\n\n  Own Id: OTP-11859 Aux Id: OTP-11615","ref":"notes.html#fixed-bugs-and-malfunctions-296"},{"type":"extras","title":"Erts 6.0 - ERTS Release Notes","doc":"","ref":"notes.html#erts-6-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The option dupnames did not work as intended in re. When looking for names\n  with \\{capture, \\[Name, ...]\\}, re:run returned a random instance of the match\n  for that name, instead of the leftmost matching instance, which was what the\n  documentation stated. This is now corrected to adhere to the documentation.\n  The option \\{capture,all_names\\} along with a re:inspect/2 function is also\n  added to further help in using named subpatterns.\n\n  Own Id: OTP-11205\n\n- Allow loading of NIF library with unicode path name\n\n  Own Id: OTP-11408\n\n- Allow loading of driver with unicode path name\n\n  Own Id: OTP-11549\n\n- Fixed a bug where starting Erlang without having an open stdin on fd 0 would\n  sometimes deadlock the emulator when terminating.\n\n  Own Id: OTP-11558\n\n- The option '-names' in epmd now works on Windows (Thanks to Johannes Weißl)\n\n  Own Id: OTP-11565\n\n- Correction of the examples in escript documentation. (Thanks to Pierre\n  Fenoll).\n\n  Own Id: OTP-11577\n\n- Fix bs_get_integer instruction\n\n  The instruction bs_get_integer could unnecessarily trigger a garbage\n  collection in failure cases which is unwanted or outright dangerous.\n\n  Ex:\n\n  < > = <<\"some binary\">>\n\n  Previously, if Sz induced X to a bignum it would reserved memory size this on\n  the heap via a garbage collection before checking if the size could actually\n  match.\n\n  It will now check the binary size before triggering a collection.\n\n  Own Id: OTP-11581\n\n- Remove heap space overestimation in `binary_to_term` (and remote message\n  reception) for integers in the intervals \\[-2147483648,-1] and\n  \\[256,2147483647] on 64-bit emulators.\n\n  Own Id: OTP-11585\n\n- Add support for detecting the separate tinfo library from ncurses (Thanks to\n  Dirkjan Ochtman)\n\n  Own Id: OTP-11590\n\n- Deprecation warning for system_flag(cpu_topology) has been extended for\n  removal in OTP 18 (Thanks to Steve Vinoski for the update)\n\n  Own Id: OTP-11602\n\n- Documentation improvement regarding some awkward wording around the +spp flag.\n  (Thanks to Brian L. Troutwine )\n\n  Own Id: OTP-11607\n\n- Fixed bug where sendfile would return the wrong error code for a remotely\n  closed socket if the socket was in passive mode. (Thanks to Vincent Siliakus\n  for reporting the bug.)\n\n  Own Id: OTP-11614\n\n- Increase garbage collection tenure rate\n\n  The garbage collector tries to maintain the previous heap block size during a\n  minor gc, i.e. 'need' is not utilized in determining the size of the new heap,\n  instead it relies on tenure and garbage to be sufficiently large.\n\n  In instances during intense growing with exclusively live data on the heap\n  coupled with delayed tenure, fullsweeps would be triggered directly after a\n  minor gc to make room for 'need' since the new heap would be full.\n\n  To remedy this, the tenure of terms on the minor heap will always happen (if\n  it is below the high watermark) instead of every other minor gc.\n\n  Characteristics Impact: Reduced CPU-time spent in garbage collection but may\n  infer delays in collecting garbage from the heap. Tweak 'fullsweep_after'\n  options to increase gc pressure if needed.\n\n  Own Id: OTP-11617\n\n- Fix bug when comparing integers with floats larger than 2^992. The bug could\n  potentially cause memory corruption on 32-bit emulators.\n\n  Own Id: OTP-11618\n\n- Cross-compilation fixes for TileraMDE-3.0.1.125620\n\n  Own Id: OTP-11635\n\n- sendfile no longer uses async threads by default\n\n  This has been done because a slow client attack is possible if the async\n  thread pool is used. The scenario is:\n\n  Client does a request for a file and then slowly receives the file one byte at\n  a time. This will eventually fill the async thread pool with blocking sendfile\n  operations and thus starving the vm of all file operations.\n\n  If you still want to use the async threads pool for sendfile an option to\n  enable it has been introduced.\n\n  Thanks to Christopher Faulet for identifying this vulnerability.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11639\n\n- Do proper rollback of calls to `enif_open_resource_type` when load/upgrade\n  callbacks of NIF library return failure.\n\n  Own Id: OTP-11722\n\n- Changed the default configuration when configuring with `$ERL_TOP/configure`\n  to be the same as when configuring with `$ERL_TOP/otp_build configure`.\n\n  Previously floating point exceptions got enabled by default on Linux when HiPE\n  was enabled when configuring with `$ERL_TOP/configure`, but not when\n  configuring with `$ERL_TOP/otp_build configure`. The default is now in both\n  cases not to use floating point exceptions since there still exist unresolved\n  issues with floating point exceptions on Linux.\n\n  For more information see [`$ERL_TOP/HOWTO/INSTALL.md`](`e:system:install.md`).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11723\n\n- A comment in erl_db_tree.c no longer differ from the code. (Thanks to Cobus\n  Carstens)\n\n  Own Id: OTP-11793\n\n- Fix epmd debug functionality for VxWorks (Thanks to Jay True)\n\n  Own Id: OTP-11808\n\n- Use closefrom/2 when available in child_setup (Thanks to Rick Reed and Anthony\n  Ramine)\n\n  Own Id: OTP-11809\n\n- Fix dtrace/systemtap bug where the probe arguments would be concatenated due\n  to faulty length calculation.\n\n  Thanks to Michal Ptaszek and Scott Lystig Fritchie\n\n  Own Id: OTP-11816\n\n- It is now better documented that the `+fn*` flags to `erl` also affect how\n  command line parameters and environment variables are read. (Thanks to Vlad\n  Dumitrescu)\n\n  Own Id: OTP-11818","ref":"notes.html#fixed-bugs-and-malfunctions-297"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Options to set match_limit and match_limit_recursion are added to re:run. The\n  option report_errors is also added to get more information when re:run fails\n  due to limits or compilation errors.\n\n  Own Id: OTP-10285\n\n- Dialyzer's `unmatched_return` warnings have been corrected.\n\n  Own Id: OTP-10908\n\n- A common case is to wrap an argument to\n  [`list_to_binary/1`](`list_to_binary/1`) in a list to ensure conversion can\n  happen even though the argument may already be a binary. Take special care of\n  this case and do not copy binary.\n\n  Impact: May cause incompatibility since a single binary is no longer copied.\n  Use `binary:copy/1,2` instead.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11082\n\n- Make erlang:open_port/2 spawn and spawn_executable handle unicode.\n\n  Own Id: OTP-11105\n\n- Handle unicode (widestring) in erl, erlc, heart, etc on windows.\n\n  Own Id: OTP-11135\n\n- The version of the PCRE library Used by Erlang's re module is raised to 8.33\n  from 7.6. This means, among other things, better Unicode and Unicode Character\n  Properties support. New options connected to PCRE 8.33 are also added to the\n  re module (ucd, notempty_atstart, no_start_optimize). PCRE has extended the\n  regular expression syntax between 7.6 and 8.33, why this imposes a potential\n  incompatibility. Only very complicated regular expressions may be affected,\n  but if you know you are using obscure features, please test run your regular\n  expressions and verify that their behavior has not changed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11204\n\n- Filenames containing UTF-8 encoded characters can now be handled by erlc.\n\n  If you have set the `ERLC_EMULATOR` environment variable, note that `erlc` in\n  OTP 17 will only work with `erl` in OTP 17 since the protocol between the\n  `erlc` program and the `erl_compile` module has changed.\n\n  Own Id: OTP-11248\n\n- By giving --enable-static-\\{nifs,drivers\\} to configure it is now possible to\n  statically linking of nifs and drivers to the main Erlang VM binary. At the\n  moment only the asn1 and crypto nifs of the Erlang/OTP nifs and drivers have\n  been prepared to be statically linked. For more details see the Installation\n  Guide in the System documentation.\n\n  Own Id: OTP-11258\n\n- Erlang/OTP has been ported to the realtime operating system OSE. The port\n  supports both smp and non-smp emulator. For details around the port and how to\n  started see the User's Guide in the _ose_ application.\n\n  Note that not all parts of Erlang/OTP has been ported.\n\n  Notable things that work are: non-smp and smp emulators, OSE signal\n  interaction, crypto, asn1, run_erl/to_erl, tcp, epmd, distribution and most if\n  not all non-os specific functionality of Erlang.\n\n  Notable things that does not work are: udp/sctp, os_mon, erl_interface,\n  binding of schedulers.\n\n  Own Id: OTP-11334\n\n- Add the \\{active,N\\} socket option for TCP, UDP, and SCTP, where N is an\n  integer in the range -32768..32767, to allow a caller to specify the number of\n  data messages to be delivered to the controlling process. Once the socket's\n  delivered message count either reaches 0 or is explicitly set to 0 with\n  inet:setopts/2 or by including \\{active,0\\} as an option when the socket is\n  created, the socket transitions to passive (\\{active, false\\}) mode and the\n  socket's controlling process receives a message to inform it of the\n  transition. TCP sockets receive \\{tcp_passive,Socket\\}, UDP sockets receive\n  \\{udp_passive,Socket\\} and SCTP sockets receive \\{sctp_passive,Socket\\}.\n\n  The socket's delivered message counter defaults to 0, but it can be set using\n  \\{active,N\\} via any gen_tcp, gen_udp, or gen_sctp function that takes socket\n  options as arguments, or via inet:setopts/2. New N values are added to the\n  socket's current counter value, and negative numbers can be used to reduce the\n  counter value. Specifying a number that would cause the socket's counter value\n  to go above 32767 causes an einval error. If a negative number is specified\n  such that the counter value would become negative, the socket's counter value\n  is set to 0 and the socket transitions to passive mode. If the counter value\n  is already 0 and inet:setopts(Socket, \\[\\{active,0\\}]) is specified, the\n  counter value remains at 0 but the appropriate passive mode transition message\n  is generated for the socket.\n\n  Thanks to Steve Vinoski\n\n  Own Id: OTP-11368\n\n- A new optional scheduler utilization balancing mechanism has been introduced.\n  For more information see the [`+sub`](erl_cmd.md#%2Bsub) command line\n  argument.\n\n  Characteristics impact: None, when not enabled. When enabled, changed timing\n  in the system, normally a small overhead due to measuring of utilization and\n  calculating balancing information. On some systems, such as old Windows\n  systems, the overhead can be quite substantial. This time measurement overhead\n  highly depend on the underlying primitives provided by the OS.\n\n  Own Id: OTP-11385\n\n- A call to either the [`garbage_collect/1`](`garbage_collect/1`) BIF or the\n  [`check_process_code/2`](`check_process_code/2`) BIF may trigger garbage\n  collection of another processes than the process calling the BIF. The previous\n  implementations performed these kinds of garbage collections without\n  considering the internal state of the process being garbage collected. In\n  order to be able to more easily and more efficiently implement yielding native\n  code, these types of garbage collections have been rewritten. A garbage\n  collection like this is now triggered by an asynchronous request signal, the\n  actual garbage collection is performed by the process being garbage collected\n  itself, and finalized by a reply signal to the process issuing the request.\n  Using this approach processes can disable garbage collection and yield without\n  having to set up the heap in a state that can be garbage collected.\n\n  The [`garbage_collect/2`](`erlang:garbage_collect/2`), and\n  [`check_process_code/3`](`erlang:check_process_code/3`) BIFs have been\n  introduced. Both taking an option list as last argument. Using these, one can\n  issue asynchronous requests.\n\n  `code:purge/1` and `code:soft_purge/1` have been rewritten to utilize\n  asynchronous `check_process_code` requests in order to parallelize work.\n\n  Characteristics impact: A call to the\n  [`garbage_collect/1`](`garbage_collect/1`) BIF or the\n  [`check_process_code/2`](`check_process_code/2`) BIF will normally take longer\n  time to complete while the system as a whole won't be as much negatively\n  effected by the operation as before. A call to `code:purge/1` and\n  `code:soft_purge/1` may complete faster or slower depending on the state of\n  the system while the system as a whole won't be as much negatively effected by\n  the operation as before.\n\n  Own Id: OTP-11388 Aux Id: OTP-11535, OTP-11648\n\n- Cleanup 'Buckets' and 'Time left' fields in crashdump to ease parsing.\n\n  Own Id: OTP-11419\n\n- Add sync option to file:open/2.\n\n  The sync option adds the POSIX O_SYNC flag to the open system call on\n  platforms that support the flag or its equivalent, e.g.,\n  FILE_FLAG_WRITE_THROUGH on Windows. For platforms that don't support it,\n  file:open/2 returns \\{error, enotsup\\} if the sync option is passed in. Thank\n  to Steve Vinoski and Joseph Blomstedt\n\n  Own Id: OTP-11498\n\n- erlang:binary_to_term will now cost an appropriate amount of reductions and\n  will interrupt (yield) for reschedule if the term is big. This avoids too long\n  schedules when binary_to_term is used. (Thanks to Svante Karlsson for the\n  original patch)\n\n  Impact: Programs running binary_to_term on large binaries will run more\n  smoothly, but rescheduling will impact the single process performance of the\n  BIF. Single threaded benchmarks might show degraded performance of the BIF,\n  while general system behaviour will be improved.\n\n  Own Id: OTP-11535 Aux Id: OTP-11388\n\n- Added high resolution icon for windows. (Thanks to Daniel Goertz for the\n  inspiration.)\n\n  Own Id: OTP-11560\n\n- Migration of memory carriers has been enabled by default on all ERTS internal\n  memory allocators based on the [`alloc_util`](erts_alloc.md#alloc_util)\n  framework except for `temp_alloc`. That is,\n  [`+M acul de`](erts_alloc.md#M_acul) is default for these allocators. Note\n  that this also implies changed allocation strategies for all of these\n  allocators. They will all now use the \"address order first fit carrier best\n  fit\" strategy.\n\n  By passing `+Muacul 0` on the command line, all configuration changes made by\n  this change will be reverted.\n\n  Characteristics impact: Improved memory characteristics with a smaller memory\n  footprint at the expense of a quite small performance cost.\n\n  Own Id: OTP-11604 Aux Id: OTP-10279\n\n- A clarification has been added to the documentation of `-on_load()` in the\n  Reference Manual that it is only recommended for loading NIF libraries.\n\n  Own Id: OTP-11611\n\n- `+fnaw` is now default when starting the emulator; it used to be `+fnl`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11612\n\n- EEP43: New data type - Maps\n\n  With Maps you may for instance:\n\n  - \\_\\_\\_\\_ - `M0 = #{ a => 1, b => 2}, % create associations`\n\n  - \\_\\_\\_\\_ - `M1 = M0#{ a := 10 }, % update values`\n\n  - \\_\\_\\_\\_ - `M2 = M1#{ \"hi\" => \"hello\"}, % add new associations`\n\n  - \\_\\_\\_\\_ - `#{ \"hi\" := V1, a := V2, b := V3} = M2. % match keys with values`\n\n  For information on how to use Maps please see Map Expressions in the\n  [Reference Manual](`e:system:expressions.md#map-expressions`).\n\n  The current implementation is without the following features:\n\n  - \\_\\_\\_\\_ - No variable keys\n\n  - \\_\\_\\_\\_ - No single value access\n\n  - \\_\\_\\_\\_ - No map comprehensions\n\n  Note that Maps is _experimental_ during OTP 17.0.\n\n  Own Id: OTP-11616\n\n- The previously deprecated driver API function `driver_async_cancel()` has been\n  removed. Due to this, the driver API version has been bumped to 3.0.\n\n  Thanks to Steve Vinoski.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11628\n\n- Experimental \"dirty scheduler\" functionality has been introduced. In order to\n  try the functionality out, you need to pass the command line argument\n  `--enable-dirty-schedulers` to `configure` when building the system.\n\n  Dirty schedulers can currently only be used by NIFs on a system with SMP\n  support. More information can be found in the\n  [`erl_nif(3)`](erl_nif.md#dirty_nifs) documentation, the\n  [`erl(1)`](erl_cmd.md) documentation, and in the git commit comment of commit\n  'c1c03ae4ee50e58b7669ea88ec4d29c6b2b67c7b'.\n\n  Note that the functionality is _experimental_, and _not supported_. This\n  functionality _will_ be subject to backward incompatible changes. You should\n  _not_ enable the dirty scheduler functionality on production systems. It is\n  only provided for testing.\n\n  Thanks to Steve Vinoski.\n\n  Own Id: OTP-11629\n\n- Improve reduction cost and yielding of `term_to_binary`. The reduction cost is\n  increased and garbage collection is disabled during yield.\n\n  Impact: Improves system responsiveness when `term_to_binary` is called with\n  large terms without significant degradation of single threaded performance.\n\n  Own Id: OTP-11648 Aux Id: OTP-11388\n\n- By default, the system's version of zlib will be used, provided its version is\n  1.2.4 or higher; otherwise the built-in zlib will be used. The built-in\n  version of zlib has been bumped to 1.2.8. (Use the `--enable-builtin-zlib`\n  option to `configure` to force the use of the built-in zlib.)\n\n  Own Id: OTP-11669\n\n- The default float encoding in binary_to_term and external_size has been\n  changed to use minor_mode 1 instead of 0.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11738\n\n- Introduced the `configure` option `--with-assumed-cache-line-size=SIZE`. For\n  more information see [`$ERL_TOP/HOWTO/INSTALL.md`](`e:system:install.md`).\n\n  Own Id: OTP-11742\n\n- Halfword emulator is marked as deprecated. It still works as before but is\n  planned to be removed in a future major release.\n\n  Own Id: OTP-11777\n\n- The external format for Maps has changed in a way that is not compatible with\n  the format used in OTP 17.0-rc1 and OTP 17.0-rc2.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11782\n\n- Fixed faulty make dependency that would make some make versions fail while\n  building gen_git_version.mk.\n\n  Own Id: OTP-11784\n\n- Introduced functionality for allowing old drivers and NIF libraries to be\n  loaded during a transition period. For more information see\n  [the version management section in the `erl_driver(3)` documentation](erl_driver.md#version_management)\n  and\n  [the version management section in the `erl_nif(3)` documentation](erl_nif.md#version_management).\n\n  Own Id: OTP-11799\n\n- Support file paths longer than 259 characters on Windows. Long absolute paths\n  are automatically converted to UNC format with a `\\\\?\\` prefix which is the\n  only way to represent long paths. The 259 character limit still applies for\n  individual file names, relative paths and the current working directory.\n\n  Own Id: OTP-11813\n\n- Document that escript:create/2 also accepts a 3-elements tuple containing\n  files and zip:create/3 options to build a zip file.\n\n  Thanks to Pierre Fenoll\n\n  Own Id: OTP-11827\n\n- Add systemd socket activation for epmd.\n\n  Thanks to Matwey V. Kornilov\n\n  Own Id: OTP-11829","ref":"notes.html#improvements-and-new-features-73"},{"type":"extras","title":"Erts 5.10.4.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-4-1"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- When using gen_tcp:connect and the `fd` option with `port` and/or `ip`, the\n  `port` and `ip` options were ignored. This has been fixed so that if `port`\n  and/or `ip` is specified together with `fd` a bind is requested for that `fd`.\n  If `port` and/or `ip` is not specified bind will not be called.\n\n  Own Id: OTP-12061","ref":"notes.html#known-bugs-and-problems"},{"type":"extras","title":"Erts 5.10.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- When normalizing paths, erl_prim_loader would always convert backslash to\n  forward slash. This is correct on Windows, but not on other operating systems.\n  erl_prim_loader now checks which OS is running before performing this\n  conversion.\n\n  Own Id: OTP-11170\n\n- Fixed syslog defines and defined LOG_ERR for systems without syslog.h. Thanks\n  to Matt Lewandowsky.\n\n  Own Id: OTP-11349\n\n- Check all pattern arguments passed to binary:matches/2. Thanks to Mike Sassak.\n\n  Own Id: OTP-11350\n\n- Fix two small silent rules omissions. Thanks to Anthony Ramine.\n\n  Own Id: OTP-11351\n\n- Teach configure to detect if posix_memalign cannot align to more than the\n  system page size.\n\n  For cross-compiled systems a new environment variable called\n  erl_xcomp_posix_memalign has been introduced to indicate whether\n  posix_memalign should be used.\n\n  Own Id: OTP-11371\n\n- Fix bsr bug occurring when shifting a huge number a huge number of bits to the\n  right. Thanks to Lars Hesel Christensen.\n\n  Own Id: OTP-11381\n\n- Fix memory leak for distributed monitors\n\n  Own Id: OTP-11410\n\n- Fix various typos in erts, kernel and ssh. Thanks to Martin Hässler.\n\n  Own Id: OTP-11414\n\n- Crashdumps initiated by out-of-memory on process spawn could cause the beam to\n  segfault during crashdump writing due to invalid pointers.\n\n  The pointers are invalid since the process creation never finished. This fix\n  removes these processes from the printouts. Reported by Richard Carlsson.\n\n  Own Id: OTP-11420\n\n- Crash dumps from 64-bit Erlang machines would have all memory addresses\n  truncated to 32 bits, which could cause trouble inspecting processes message\n  queues and stacks in the crashdump viewer.\n\n  Own Id: OTP-11450\n\n- Threads other than schedulers threads could make thread unsafe accesses when\n  support for migration of memory carriers had been enabled, i.e., when the\n  [`+M acul`](erts_alloc.md#M_acul) command line flag had been passed to\n  [`erl`](erl_cmd.md). This could cause corruption of the VMs internal state.\n\n  This bug was introduced in erts-5.10.2 when the support for migration of\n  memory carriers was introduced.\n\n  Own Id: OTP-11456 Aux Id: OTP-10279\n\n- Fix bug in `binary_to_term` for invalid bitstrings and very large binaries\n  (>2Gb).\n\n  Own Id: OTP-11479\n\n- Under rare circumstances a process calling `inet:close/1`, `gen_tcp:close/1`,\n  `gen_udp:close/1`, or `gen_sctp:close/1` could hang in the call indefinitely.\n\n  Own Id: OTP-11491\n\n- Fix bug that could cause a 32-bit emulator to always crash at start (since\n  R16B01) depending on the alignment of static data in the beam executable.\n\n  Own Id: OTP-11496\n\n- Fix benign bugs regarding bitstring compare. Only a nuisance for debug and\n  valgrind VM.\n\n  Own Id: OTP-11501\n\n- Silence warnings (Thanks to Anthony Ramine)\n\n  Own Id: OTP-11517\n\n- The default wordsize of the emulator (beam) is now determined by compiler\n  default on Mac OSX (Darwin). This was previously forced to 32bits by the\n  configure script unless otherwise specified.\n\n  Own Id: OTP-11521","ref":"notes.html#fixed-bugs-and-malfunctions-298"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- A new memory allocation feature called \"super carrier\" has been introduced.\n  The super carrier feature can be used in different ways. It can for example be\n  used for pre-allocation of all memory that the runtime system should be able\n  to use.\n\n  By default the super carrier is disabled. It is enabled by passing the\n  [`+MMscs  `](erts_alloc.md#MMscs) command line argument. For more\n  information see the documentation of the [`+MMsco`](erts_alloc.md#MMsco),\n  [`+MMscrfsd`](erts_alloc.md#MMscrfsd), [`+MMscrpm`](erts_alloc.md#MMscrpm),\n  [`+MMscs`](erts_alloc.md#MMscs), [`+MMusac`](erts_alloc.md#Musac), and,\n  [`+Mlpm`](erts_alloc.md#Mlpm) command line arguments in the\n  [`erts_alloc(3)`](erts_alloc.md) documentation.\n\n  Since it is disabled by default there should be no impact on system\n  characteristics if not used.\n\n  This change has been marked as a potential incompatibility since the returned\n  list when calling\n  [`erlang:system_info({allocator, mseg_alloc})`](`m:erlang#system_info_allocator_tuple`)\n  now also include an `{erts_mmap, _}` tuple as one element in the list.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11149\n\n- Added erlang:system_info(ets_limit) to provide a way to retrieve the runtime's\n  maximum number of ETS tables. Thanks to Steve Vinoski\n\n  Own Id: OTP-11362\n\n- Add new BIF os:unsetenv/1 which deletes an environment variable. Thanks to\n  Martin Hässler.\n\n  Own Id: OTP-11446\n\n- Introduced a new guarantee regarding exit signals from ports:\n\n  If the process calling one of the synchronous port BIFs listed below is linked\n  to the port identified by the first argument, and the port exits before\n  sending the result of the port operation, the exit signal issued due to this\n  link will be received by the processes before the BIF returns, or fail with an\n  exception due to the port not being open.\n\n  The synchronous port BIFs are:\n\n  - [`port_close/1`](`erlang:port_close/1`)\n  - [`port_command/2`](`erlang:port_command/2`)\n  - [`port_command/3`](`erlang:port_command/3`)\n  - [`port_connect/2`](`erlang:port_connect/2`)\n  - [`port_control/3`](`erlang:port_control/3`)\n  - `erlang:port_call/3`\n  - `erlang:port_info/1`\n  - `erlang:port_info/2`\n\n  Note that some ports under certain circumstances unlink themselves from the\n  calling process before exiting, i.e. even though the process linked itself to\n  the port there might be no link triggering an exit signal.\n\n  Characteristics impact: The return or exception from the synchronous port BIF\n  will be delayed if the port simultaneously exit due to some issue unrelated to\n  the outstanding synchronous port BIF call. In all other cases characteristics\n  are unchanged.\n\n  Own Id: OTP-11489","ref":"notes.html#improvements-and-new-features-74"},{"type":"extras","title":"Erts 5.10.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-3-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Memory allocators will be able to create `sys_alloc` carriers as fallback, if\n  `mseg_alloc` cannot create more carriers, on systems with `posix_memalign()`\n  support. This is similar to how it worked in pre-R16 releases.\n\n  Windows systems will create carriers using `_aligned_malloc()` and can by this\n  use the new optimized allocator header scheme introduced in R16 on other\n  platforms.\n\n  Own Id: OTP-11318","ref":"notes.html#improvements-and-new-features-75"},{"type":"extras","title":"Erts 5.10.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The documentation of predefined types and built-in types has been corrected.\n\n  Own Id: OTP-11090\n\n- Fix changing terminal parameters in to_erl\n\n  Change the behaviour of to_erl to use TCSADRAIN instead of TCSANOW when\n  changing terminal parameters. This makes the serial driver wait for the output\n  queues to be empty before applying the terminal parameter change. Thanks to\n  Stefan Zegenhagen.\n\n  Own Id: OTP-11206\n\n- The default value of \\{flush, boolean()\\} in erlang:halt/2 is documented to be\n  'true' if the status is an integer. The implementation behaviour was reversed.\n  The Implementation is now corrected to adhere to the documentation. Thanks to\n  Jose Valim for reporting the error.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11218\n\n- Fix serious race bug in R16B01 that could cause PID mix-ups when a lot of\n  processes were spawned and terminated in a very rapid pace on an SMP emulator\n  with at least two scheduler threads.\n\n  Own Id: OTP-11225\n\n- Validating a trace pattern with the option silent no longer incorrectly\n  enables/disables the silent option of the calling process.\n\n  Own Id: OTP-11232\n\n- Fixed a bug where GCC 4.8 and later use a more aggressive loop optimization\n  algorithm that broke some previously working code in the efile driver. Thanks\n  to Tomas Abrahamsson for reporting this issue.\n\n  Own Id: OTP-11246\n\n- Fixed bug when printing memory allocator acul option in crash dump.\n\n  Own Id: OTP-11264\n\n- Opening a new compressed file on Windows could in rare (random) cases result\n  in \\{error,eisdir\\} or other error codes although it should have succeeded.\n  This is now corrected.\n\n  Own Id: OTP-11265\n\n- Fixed a race condition when closing a trace port that would cause the emulator\n  to crash.\n\n  Own Id: OTP-11290","ref":"notes.html#fixed-bugs-and-malfunctions-299"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- There is a new somewhat experimental socket option 'netns' that can set the\n  network namespace for a socket on Linux:es where it is supported. See the\n  documentation.\n\n  Own Id: OTP-11157\n\n- New allocator strategy `aoffcbf` (address order first fit carrier best fit).\n  Supports carrier migration but with better CPU performance than `aoffcaobf`.\n\n  Own Id: OTP-11174\n\n- Introduced functionality for inspection of system and build configuration.\n\n  Own Id: OTP-11196\n\n- Fix matching of floating point middle-endian machines. Thanks to Johannes\n  Weissl.\n\n  Own Id: OTP-11201\n\n- Fix compile error on ARM and GCC versions greater than 4.1.0. Thanks to\n  Johannes Weissl.\n\n  Own Id: OTP-11214\n\n- run_erl: Redirect standard streams to /dev/null. Thanks to Johannes Weissl.\n\n  Own Id: OTP-11215\n\n- Misc. corrections in documentation for erl_driver. Thanks to Giacomo Olgeni.\n\n  Own Id: OTP-11227\n\n- Fix documentation regarding binary_part.\n\n  Own Id: OTP-11239\n\n- Make edlin understand a few important control keys. Thanks to Stefan\n  Zegenhagen.\n\n  Own Id: OTP-11251\n\n- Export type zlib:zstream/0. Thanks to Loic Hoguin.\n\n  Own Id: OTP-11278\n\n- Add erl option to set schedulers by percentages.\n\n  For applications where measurements show enhanced performance from the use of\n  a non-default number of emulator scheduler threads, having to accurately set\n  the right number of scheduler threads across multiple hosts each with\n  different numbers of logical processors is difficult because the erl +S option\n  requires absolute numbers of scheduler threads and scheduler threads online to\n  be specified.\n\n  To address this issue, add a +SP option to erl, similar to the existing +S\n  option but allowing the number of scheduler threads and scheduler threads\n  online to be set as percentages of logical processors configured and logical\n  processors available, respectively. For example, \"+SP 50:25\" sets the number\n  of scheduler threads to 50% of the logical processors configured, and the\n  number of scheduler threads online to 25% of the logical processors available.\n  The +SP option also interacts with any settings specified with the +S option,\n  such that the combination of options \"+S 4:4 +SP 50:50\" (in either order)\n  results in 2 scheduler threads and 2 scheduler threads online.\n\n  Thanks to Steve Vinoski\n\n  Own Id: OTP-11282\n\n- Extend erl_driver interface with lock names\n\n  Lock and thread names are already a feature in the driver interface. This\n  extension will let developers read these names which eases debugging.\n\n  Own Id: OTP-11303\n\n- Fix incorrect values returned by integer_to_binary/2. Thanks to Juan Jose\n  Comellas.\n\n  Own Id: OTP-11311\n\n- Fix system_flag scheduling_statistics - disable . Thanks to Steve Vinoski.\n\n  Own Id: OTP-11317\n\n- The documentation of predefined types has been corrected Thanks to Kostis\n  Sagonas.\n\n  Own Id: OTP-11321","ref":"notes.html#improvements-and-new-features-76"},{"type":"extras","title":"Erts 5.10.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug in prim_inet has been corrected. If the port owner was killed at a bad\n  time while closing the socket port the port could become orphaned hence\n  causing port and socket leaking. Reported by Fred Herbert, Dmitry Belyaev and\n  others.\n\n  Own Id: OTP-10497 Aux Id: OTP-10562\n\n- Compilation fixes for NetBSD. Thanks to YAMAMOTO Takashi.\n\n  Own Id: OTP-10941\n\n- Fixed a race condition when using delayed_write when writing to a file which\n  would cause the same data to be written multiple times.\n\n  Own Id: OTP-10984\n\n- Fix small memory leak from tracing with option `meta`.\n\n  Own Id: OTP-10997\n\n- Correct typo in erlsrv usage. Thanks to Bryan Hunter\n\n  Own Id: OTP-11002\n\n- ct_run: delete unused function. Thanks to Tuncer Ayaz.\n\n  Own Id: OTP-11003\n\n- Corrections to run_erl/to_erl handshake behaviour.\n\n  Own Id: OTP-11012\n\n- Fix typo in type: erlang:process_info_item(). Thanks to Andrew Tunnell-Jones.\n\n  Own Id: OTP-11024\n\n- Fix src/dest overlap issue in ttsl driver. Thanks to Steve Vinoski.\n\n  Own Id: OTP-11064\n\n- When sending to a port using `erlang:send(Port, Msg, [nosuspend])`, the send\n  operation was performed synchronously. This bug has now been fixed.\n\n  Own Id: OTP-11076 Aux Id: OTP-10336\n\n- When converting a faulty binary to a list with unicode:characters_to_list, the\n  error return value could contain a faulty \"rest\", i.e. the io_list of\n  characters that could not be converted was wrong. This happened only if input\n  was a sub binary and conversion was from utf8. This is now corrected.\n\n  Own Id: OTP-11080\n\n- Runtime system could crash when reporting stale `driver_select()`.\n\n  Own Id: OTP-11084\n\n- Fix lock order violation for memory instrumentation (+Mim, +Mis, +Mit).\n\n  Own Id: OTP-11085\n\n- Fixed some compilation warnings on miscellaneous platforms. Thanks to Anthony\n  Ramine.\n\n  Own Id: OTP-11086\n\n- Fixed issue when flushing i/o during shutdown on windows where the Erlang VM\n  would sometime hang due to a race condition.\n\n  Own Id: OTP-11096\n\n- Fixed issue where repeated calls to erlang:nodes() could cause unnecessary\n  contention in the dist_table lock.\n\n  Own Id: OTP-11097\n\n- Properly guard WIDE_TAG use with HAVE_WCWIDTH in ttsl_drv. Thanks to Anthony\n  Ramine\n\n  Own Id: OTP-11106\n\n- Fix some Makefile rules that didn't support silent rules. Thanks to Anthony\n  Ramine.\n\n  Own Id: OTP-11111\n\n- Fix receive support in erl_eval with a BEAM module. Thanks to Anthony Ramine.\n\n  Own Id: OTP-11137\n\n- erlang:now() could suddenly jump ~24 days into the future on Windows. This is\n  now corrected. Thanks to Garret Smith for reporting and testing fixes.\n\n  Own Id: OTP-11146\n\n- erlang:term_to_binary will now cost an appropriate amount of reductions and\n  will interrupt (yield) for reschedule if the term is big. This avoids too long\n  schedules when term_to_binary is used.\n\n  Impact: Programs running term_to_binary on large terms will run more smothly,\n  but rescheduling will impact the single process performance of the BIF. Single\n  threaded benchmarks will show degraded performance of the BIF when called with\n  very large terms, while general system behaviour will be improved. The\n  overhead for allowing restart and reduction counting also degrades local\n  performance of the BIF with between 5% and 10% even for small terms.\n\n  Own Id: OTP-11163","ref":"notes.html#fixed-bugs-and-malfunctions-300"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Replaced the lock protecting gathering of garbage collection statistics with a\n  lock-free solution.\n\n  Own Id: OTP-10271 Aux Id: kunagi-108 \\[04c5410f-9cc4-4696-8639-36bf98686c7a-7]\n\n- Support for migration of memory carriers between memory allocator instances\n  has been introduced.\n\n  By default this feature is not enabled and do not effect the characteristics\n  of the system. When enabled it has the following impact on the characteristics\n  of the system:\n\n  - Reduced memory footprint when the memory load is unevenly distributed\n    between scheduler specific allocator instances.\n  - Depending on the default allocation strategy used on a specific allocator\n    there might or might not be a slight performance loss.\n  - When enabled on the `fix_alloc` allocator, a different strategy for\n    management of fix blocks will be used.\n  - The information returned from\n    [`erlang:system_info({allocator, A})`](`m:erlang#system_info_allocator_tuple`),\n    and\n    [`erlang:system_info({allocator_sizes, A})`](`m:erlang#system_info_allocator_sizes`)\n    will be slightly different when this feature has been enabled. An\n    `mbcs_pool` tuple will be present giving information about abandoned\n    carriers, and in the `fix_alloc` case no `fix_types` tuple will be present.\n\n  For more information, see the documentation of the\n  [`+M acul`](erts_alloc.md#M_acul) command line argument.\n\n  Own Id: OTP-10279\n\n- Change specs for spawn_opt to use the process_level() type declaration instead\n  of re-defining it in various places. Thanks to Kostis Sagonas.\n\n  Own Id: OTP-11008\n\n- Postscript files no longer needed for the generation of PDF files have been\n  removed.\n\n  Own Id: OTP-11016\n\n- Erlang source files with non-ASCII characters are now encoded in UTF-8\n  (instead of latin1).\n\n  Own Id: OTP-11041 Aux Id: OTP-10907\n\n- Optimization of simultaneous `inet_db` operations on the same socket by using\n  a lock free implementation.\n\n  Impact on the characteristics of the system: Improved performance.\n\n  Own Id: OTP-11074\n\n- The `high_msgq_watermark` and `low_msgq_watermark` `inet` socket options\n  introduced in OTP-R16A could only be set on TCP sockets. These options are now\n  generic and can be set on all types of sockets.\n\n  Own Id: OTP-11075 Aux Id: OTP-10336\n\n- A new better algorithm for management of the process, and port tables has been\n  introduced.\n\n  Impact on the characteristics of the system:\n\n  - The new algorithm ensures that both insert and delete operations can be made\n    in O(1) time complexity. Previously used algorithm either caused insert or\n    delete to be O(N).\n  - The new algorithm will also ensure that reuse of identifiers will be less\n    frequent than when the old algorithm was used.\n  - Previously used algorithm ensured that the latest created identifier\n    compared as the largest when comparing two identifiers of the same type that\n    had been created on the same node as long as no identifiers had been reused.\n    Since identifiers can be reused quite fast, one has never been able to rely\n    on this property. Due to the introduction of this new algorithm this\n    property will not hold even if no identifiers has been reused yet. This\n    could be considered as an incompatibility.\n\n  Due to the above mensioned potential incompatibility, it will still be\n  possible to enable the old algorithm for some time. The command line argument\n  [`+P legacy`](erl_cmd.md#%2BP) will enable the old algorithm on the process\n  table, and [`+Q legacy`](erl_cmd.md#%2BQ) will do the same for the port table.\n  These command line arguments are however deprecated as of their introduction\n  and have been scheduled for removal in OTP-R18.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11077\n\n- Support wide characters in the shell through wcwidth(). Thanks to Anthony\n  Ramine. Reported by Loïc Hoguin.\n\n  Own Id: OTP-11088\n\n- Added total used memory for each process in erlang crash dumps.\n\n  Own Id: OTP-11098\n\n- Added support for hipe on Raspberry Pi (armv6l). Thanks to Klaus Alfert.\n\n  Own Id: OTP-11125\n\n- Remove 'query' from the list of reserved words in docs. Thanks to Matthias\n  Endler and Loïc Hoguin.\n\n  Own Id: OTP-11158\n\n- Lift static limitation (FD_SETSIZE) for file descriptors on Mac OS X. (Thanks\n  to Anthony Ramine)\n\n  Own Id: OTP-11159","ref":"notes.html#improvements-and-new-features-77"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- Miscellaneous native code in OTP misbehave either due to lengthy execution, or\n  due to not bumping reductions properly. Problems typically occur when passing\n  huge sets of data to a misbehaving BIF. Fixing this has high priority and is\n  being worked on, but there will remain issues like this for some time.\n\n  In order to alleviate problems with scheduling which might occur when\n  executing misbehaving native code, the command line argument\n  [\\+sfwi](erl_cmd.md#%2Bsfwi) has been introduced.\n\n  By default this feature is disabled and you are advised not to enable it if\n  you do not encounter problems with misbehaving native code.\n\n  When enabled it has the following impact on the characteristics of the system:\n\n  - Work will always be distributed between schedulers even when executing\n    misbehaving native code.\n  - It may cause an increased amount of processes and/or ports bouncing between\n    schedulers which in turn will cause a performance loss.\n  - It may cause reduced performance due to reduced or lost work compaction when\n    all schedulers do not execute under full load.\n  - An increased contention on run queue locks.\n\n  Own Id: OTP-11164","ref":"notes.html#known-bugs-and-problems-1"},{"type":"extras","title":"Erts 5.10.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug in the implementation of offline schedulers has been fixed. The bug was\n  introduced in OTP-R16A/ERTS-5.10, and caused work-stealing between schedulers\n  to fail. This in turn, caused work to accumulate in some run-queues. The bug\n  was only triggered when there were offline schedulers in the system, i.e.,\n  when the amount of online schedulers was less than the total amount of\n  schedulers. The effect of the bug got more severe the larger amount of offline\n  schedulers the system had.\n\n  Own Id: OTP-11022 Aux Id: OTP-9892","ref":"notes.html#fixed-bugs-and-malfunctions-301"},{"type":"extras","title":"Erts 5.10.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The BIF [`is_process_alive/1`](`erlang:is_process_alive/1`) could prematurely\n  return `false` while the process being inspected was terminating. This bug was\n  introduced in ERTS-5.10.\n\n  Own Id: OTP-10926\n\n- Fix a problem in `erlang:delete_element/2` where the call could corrupt one\n  word of stack if the heap and stack met during call.\n\n  Own Id: OTP-10932\n\n- The [`+sws `](erl_cmd.md#%2Bsws) and [`+swt `](erl_cmd.md#%2Bswt)\n  system flags failed if no white space were passed between the parameter and\n  value parts of the flags. Upon failure, the runtime system refused to start.\n\n  Own Id: OTP-11000","ref":"notes.html#fixed-bugs-and-malfunctions-302"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Scheduler threads will now by default be less eager requesting wakeup due to\n  certain cleanup operations. This can also be controlled using the\n  [`+swct`](erl_cmd.md#%2Bswct) command line argument of [`erl(1)`](erl_cmd.md).\n\n  Own Id: OTP-10994","ref":"notes.html#improvements-and-new-features-78"},{"type":"extras","title":"Erts 5.10.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Threads created internally in the runtime system by vanilla, fd, and spawn\n  drivers on Windows systems could make thread unsafe calls to\n  `driver_select()`.\n\n  Own Id: OTP-10802\n\n- Threads created internally in the runtime system by the vanilla, fd, and spawn\n  drivers on Windows systems could make unsafe memory accesses to driver data\n  after port had terminated.\n\n  Own Id: OTP-10803\n\n- The runtime system could crash when flushing data to standard out or standard\n  error on Windows.\n\n  Own Id: OTP-10807\n\n- Bugs due to the port optimizations introduced in erts-5.10/OTP-R16A have been\n  fixed:\n\n  - Memory leak when terminating ports\n  - Memory leak when reaching the system limit of maximum amount of concurrently\n    existing ports\n  - Crashes due to missing, or late test of bad port handle\n  - The newly introduced driver API function `erl_drv_busy_msgq_limits()` could\n    not be used by dynamically linked in drivers on Windows\n\n  Own Id: OTP-10809 Aux Id: OTP-10336\n\n- Fix `{packet,httph}` header capitalization for unrecognized header fields\n  longer than 20 characters such as `Sec-Websocket-Version`. The limit is simply\n  raised from 20 to 50 characters with the hope that valid headers longer than\n  50 are not used.\n\n  Own Id: OTP-10824\n\n- Fix rounding issues in float_to_list/1,2. Thanks to Serge Aleynikov\n\n  Own Id: OTP-10837\n\n- Fix memory leak in file driver introduced in R16A.\n\n  Own Id: OTP-10841\n\n- A bug in an ERTS internal queue implementation could cause the loss of a wake\n  up signal to a consumer thread. This has now been fixed.\n\n  The effect of this bug, when triggered, was often only a small or even no\n  delay of certain operations. This since, threads often are woken due to other\n  unrelated reasons. However, if the consumer thread was not woken due to other\n  reasons when the bug was triggered, these operations could be left hanging,\n  potentially for ever. Such effects seems to have been very rare, but we have\n  on at least one occasion gotten a report about such an issue.\n\n  Operations potentially effected by this bug:\n\n  - **Inspection of memory allocation status** - The Erlang process calling\n    `erlang:memory/[0,1]`, or\n    `erlang:system_info({allocator|allocator_sizes, _})` could potentially hang\n    waiting for responses from involved threads.\n\n  - **Async thread pool jobs** - An async thread pool job request and/or reply\n    could potentially be left hanging. In OTP this only effected file\n    operations, but user implemented drivers using the async thread pool were\n    also effected. In the file operation case, this would typically translate\n    into an Erlang process potentially hanging on the file operation.\n\n  - **Shutting down the runtime system** - Due to the issue with the async\n    thread pool mentioned above, flushing of I/O while terminating the runtime\n    system could also potentially hang.\n\n  - **ETS memory deallocation** - Scheduled jobs handling deallocation of the\n    main structure of an ETS table could potentially hang. This more or less\n    only translates into minor memory leaks.\n\n  - **Shutting down distribution** - The distribution shutdown phase used when\n    manually shutting down the distribution, i.e., when calling\n    `net_kernel:stop()`, could potentially hang.\n\n  Own Id: OTP-10854\n\n- OS X Snow Leopard now only uses write, as writev does not work properly on\n  very large files.\n\n  Own Id: OTP-10858\n\n- Fixed a bug where line oriented file I/O using read_ahead was very slow for\n  files with very large difference in line length.\n\n  Own Id: OTP-10859\n\n- In erts-5.10 (R16A) faulty hashvalues were produced for non-ASCII atoms\n  (characters in byte-range 128..255). This has now been fixed and hashvalues\n  conforms to previous OTP releases.\n\n  Own Id: OTP-10860\n\n- Fixes of memory accesses that might be thread unsafe when the runtime system\n  has been linked against third-party libraries for atomic memory operations\n  during the build. Most builds are uneffected by this bug. If triggered, the\n  runtime system will most likely crash more or less immediately.\n\n  Own Id: OTP-10875 Aux Id: OTP-10854\n\n- Fixed a bug where it was longer possible to give the +sws proposal flag to\n  non-smp emulators.\n\n  Own Id: OTP-10881 Aux Id: seq12258\n\n- Faulty type to bytes read for ReadFile on Windows. This could cause windows\n  systems to misbehave. The correct type is now used.\n\n  Own Id: OTP-10890\n\n- Change default max ports for Windows to 8192. Having a too large value caused\n  Windows to not be able to recover properly. If you want to use another value,\n  pass `+Q Value` to erl or werl.\n\n  Own Id: OTP-10892\n\n- Fix rare crash on halfword vm during code loading.\n\n  Own Id: OTP-10896","ref":"notes.html#fixed-bugs-and-malfunctions-303"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Tuple funs (deprecated in R15B) are no longer supported.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10170\n\n- Added four new bifs, `erlang:binary_to_integer/1,2`,\n  `erlang:integer_to_binary/1`, `erlang:binary_to_float/1` and\n  `erlang:float_to_binary/1,2`. These bifs work similarly to how their list\n  counterparts work, except they operate on binaries. In most cases converting\n  from and to binaries is faster than converting from and to lists.\n\n  These bifs are auto-imported into erlang source files and can therefore be\n  used without the `erlang` prefix.\n\n  Own Id: OTP-10300 Aux Id: kunagi-74 \\[74]\n\n- The experimental support for packages has been removed.\n\n  Own Id: OTP-10348 Aux Id: kunagi-316 \\[227]\n\n- The driver API function\n  [`erl_drv_consume_timeslice()`](erl_driver.md#erl_drv_consume_timeslice), and\n  the NIF API function\n  [`enif_consume_timeslice()`](erl_nif.md#enif_consume_timeslice) have been\n  introduced.\n\n  These functions are provided in order to better support co-operative\n  scheduling, improve system responsiveness, and to make it easier to prevent\n  misbehaviors of the VM due to a process or port monopolizing a scheduler\n  thread. They can be used when dividing lengthy work into a number of repeated\n  calls without the need to use threads.\n\n  Own Id: OTP-10810\n\n- The list_to_integer/2 bif has been optimized when used with bases other\n  than 10.\n\n  Own Id: OTP-10834 Aux Id: kunagi-74 \\[74]\n\n- The git commit sha of the HEAD commit is now added to the Erlang shell when\n  compiling a non-released Erlang version.\n\n  Own Id: OTP-10838\n\n- Change caching policy for memory segment allocator. For instance, prefer sbc\n  segments over mbc segments, caching policy is time-arrow aware, evicting older\n  cached segments to store newer segments.\n\n  The default number of cacheable segment has been increased from five to ten\n  segments. This can be modified, same as before, with the command line option\n  `+MMmcs 5`\n\n  Impact: Increased speed for processing on larger objects, e.g. binaries.\n  Slight increase of mapped and resident memory. Tune your system with memory\n  options to `erl` for best performance.\n\n  Own Id: OTP-10840\n\n- Updated config.sub and config.guess to latest version from gnu.org\n\n  Own Id: OTP-10848\n\n- Add an xcomp file for Blue Gene/Q. Thanks to Kostis Sagonas.\n\n  Own Id: OTP-10849\n\n- Cleanup of documentation of the type language. Thanks to Kostis Sagonas.\n\n  Own Id: OTP-10850\n\n- Change the return value of hipe_bifs:remove_refs_from/1. Thanks to Kostis\n  Sagonas.\n\n  Own Id: OTP-10851\n\n- As of ERTS-5.10/OTP-R16A node names passed in the EPMD protocol are required\n  to be encoded in UTF-8. Since EPMD previously accepted latin1 encoded node\n  names this is an incompatibility. However, since Erlang nodes always have\n  required characters in node names to be 7-bit ASCII characters (and still do\n  require this), this incompatibility should not effect anyone using EPMD as an\n  Erlang Port Mapper Daemon.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10872 Aux Id: OTP-10753\n\n- The +pc flag to erl can be used to set the range of characters considered\n  printable. This affects how the shell and io:format(\"~tp\",...) functionality\n  does heuristic string detection. More can be read in STDLIB users guide.\n\n  Own Id: OTP-10884\n\n- Fix a number of type cast errors related to formatted printing on Win64 that\n  can potentially cause problem when the Erlang VM exceeds 4 GB of ram. (Thanks\n  to Blaine Whittle for the original patch)\n\n  Own Id: OTP-10887\n\n- The effect of the deprecated environment variable ERL_MAX_PORTS had been\n  removed prematurely. It has now been re-added. Note that this is still\n  scheduled to be released in R17B.\n\n  Own Id: OTP-10895","ref":"notes.html#improvements-and-new-features-79"},{"type":"extras","title":"Erts 5.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Set new peeled off SCTP socket to nonblocking socket (Thanks to Jonas\n  Falkevik)\n\n  Own Id: OTP-10491\n\n- Fix various typos (thanks to Tuncer Ayaz)\n\n  Own Id: OTP-10611\n\n- Fix fd leak when using async thread pool\n\n  When using the async thread pool, if an erlang process asks to open a file and\n  it gets shutdown/killed while the file:open/2 call hasn't returned, it's\n  possible to leak a file descriptor against the target file. This has now been\n  fixed. (Thanks to Filipe David Manana)\n\n  Own Id: OTP-10677\n\n- Use sys/types.h instead of string.h to pull ssize_t definition to\n  erl_driver.h. This fixes build issue on NetBSD. (Thanks to Yamamoto Takashi).\n\n  Own Id: OTP-10699\n\n- Arguments given with the -run or -s flags to erl are now translated according\n  to the file name encoding mode of the runtime system.\n\n  Own Id: OTP-10702\n\n- The octet counters in the gen_tcp/inet interface could behave in unexpected\n  ways on 64bit platforms. The behaviour is now as expected.\n\n  Own Id: OTP-10746\n\n- Certain linux kernels, most notably in redhat and CentOS distribution, had a\n  bug in writev which generated an infinite loop in the tcp code of the VM. The\n  bug is now worked around.\n\n  Own Id: OTP-10747\n\n- A process that got killed (got an exit signal) while operating on a\n  compresseed file, could cause a segmentation fault in the VM. This is now\n  corrected. Thanks to Filipe David Manana for identifying the problem and\n  submitting a solution.\n\n  Own Id: OTP-10748\n\n- Windows previously used three digit exponent in formatting which caused\n  difference between platforms, as can be seen by float_to_list/1. This has now\n  been fixed.\n\n  Own Id: OTP-10751","ref":"notes.html#fixed-bugs-and-malfunctions-304"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- A boolean socket option 'ipv6_v6only' for IPv6 sockets has been added. The\n  default value of the option is OS dependent, so applications aiming to be\n  portable should consider using `{ipv6_v6only,true}` when creating an `inet6`\n  listening/destination socket, and if necessary also create an `inet` socket on\n  the same port for IPv4 traffic. See the documentation.\n\n  Own Id: OTP-8928 Aux Id: kunagi-193 \\[104]\n\n- It is now allowed to define stubs for BIFs, to allow type specs to be written\n  for BIFs. For example, if there is BIF called `lists:member/2`, a dummy\n  definition of `lists:member/2` is now allowed.\n\n  Own Id: OTP-9861\n\n- Process optimizations. The most notable:\n\n  - New internal process table implementation allowing for both parallel reads\n    as well as writes. Especially read operations have become really cheap. This\n    reduce contention in various situations. For example when, spawning\n    processes, terminating processes, sending messages, etc.\n  - Optimizations of run queue management reducing contention.\n  - Optimizations of process internal state changes reducing contention.\n\n  These changes imply changes of the characteristics the system. Most notable:\n  changed timing in the system.\n\n  Own Id: OTP-9892 Aux Id: OTP-10167\n\n- Non-blocking code loading. Earlier when an Erlang module was loaded, all other\n  execution in the VM were halted while the load operation was carried out in\n  single threaded mode. Now modules are loaded without blocking the VM.\n  Processes may continue executing undisturbed in parallel during the entire\n  load operation. The load operation is completed by making the loaded code\n  visible to all processes in a consistent way with one single atomic\n  instruction. Non-blocking code loading will improve realtime characteristics\n  when modules are loaded/upgraded on a running SMP system.\n\n  Own Id: OTP-9974\n\n- In the SMP emulator, turning on and off tracing will no longer take down the\n  system to single-scheduling.\n\n  Own Id: OTP-10122\n\n- Remove VxWorks support\n\n  Own Id: OTP-10146\n\n- Added a general framework for executing benchmarks of Erlang/OTP. Benchmarks\n  for the Erlang VM and mnesia have been incorporated in the framework.\n\n  For details about how to add more benchmarks see $ERL_TOP/HOWTO/BENCHMARKS.md\n  in the source distribution.\n\n  Own Id: OTP-10156\n\n- Optimized deletion of ETS-tables which significantly improves performance when\n  large amounts of temporary tables are used.\n\n  This change imply changes of the characteristics the system. Most notable:\n  changed timing in the system.\n\n  Own Id: OTP-10167 Aux Id: OTP-9892\n\n- Tuple funs (deprecated in R15B) are no longer supported.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10170\n\n- New internal header scheme for allocators\n\n  Impact: Reduces size on object allocated in multiblock carriers by one word\n\n  Own Id: OTP-10273 Aux Id: kunagi-20 \\[20]\n\n- Major port improvements. The most notable:\n\n  - New internal port table implementation allowing for both parallel reads as\n    well as writes. Especially read operations have become really cheap.This\n    reduce contention in various situations. For example when, creating ports,\n    terminating ports, etc.\n  - Dynamic allocation of port structures. This allow for a much larger maximum\n    amount of ports allowed as a default. The previous default of 1024 has been\n    raised to 65536. Maximum amount of ports can be set using the\n    [\\+Q](erl_cmd.md#%2BQ) command line flag of [erl(1)](erl_cmd.md). The\n    previously used environment variable `ERL_MAX_PORTS` has been deprecated and\n    scheduled for removal in OTP-R17.\n  - Major rewrite of scheduling of port tasks. Major benefits of the rewrite are\n    reduced contention on run queue locks, and reduced amount of memory\n    allocation operations needed. The rewrite was also necessary in order to\n    make it possible to schedule signals from processes to ports.\n  - Improved internal thread progress functionality for easy management of\n    unmanaged threads. This improvement was necessary for the rewrite of the\n    port task scheduling.\n  - Rewrite of all process to port signal implementations in order to make it\n    possible to schedule those operations. All port operations can now be\n    scheduled which allows for reduced lock contention on the port lock as well\n    as truly asynchronous communication with ports.\n  - Optimized lookup of port handles from drivers.\n  - Optimized driver lookup when creating ports.\n  - Preemptible `erlang:ports/0` BIF.\n  - Improving responsiveness by bumping reductions for a process calling a\n    driver callback directly.\n\n  These changes imply changes of the characteristics of the system. The most\n  notable:\n\n  - **Order of signal delivery** - The previous implementation of the VM has\n    delivered signals from processes to ports in a synchronous stricter fashion\n    than required by the language. As of ERTS version 5.10, signals are truly\n    asynchronously delivered. The order of signal delivery still adheres to the\n    requirements of the language, but only to the requirements. That is, some\n    signal sequences that previously always were delivered in one specific order\n    may now from time to time be delivered in different orders. This may cause\n    Erlang programs that have made _false assumptions_ about signal delivery\n    order to fail even though they previously succeeded. For more information\n    about signal ordering guarantees, see the chapter on\n    [communication](communication.md) in the ERTS user's guide. The `+n` command\n    line flag of [erl(1)](erl_cmd.md) can be helpful when trying to find\n    signaling order bugs in Erlang code that have been exposed by these changes.\n\n  - **Latency of signals sent from processes to ports** - Signals from processes\n    to ports where previously always delivered immediately. This kept latency\n    for such communication to a minimum, but it could cause lock contention\n    which was very expensive for the system as a whole. In order to keep this\n    latency low also in the future, most signals from processes to ports are by\n    default still delivered immediately as long as no conflicts occur. Such\n    conflicts include not being able to acquire the port lock, but also include\n    other conflicts. When a conflict occur, the signal will be scheduled for\n    delivery at a later time. A scheduled signal delivery may cause a higher\n    latency for this specific communication, but improves the overall\n    performance of the system since it reduce lock contention between\n    schedulers. The default behavior of only scheduling delivery of these\n    signals on conflict can be changed by passing the [\\+spp](erl_cmd.md#%2Bspp)\n    command line flag to [erl(1)](erl_cmd.md). The behavior can also be changed\n    on port basis using the [parallelism](`m:erlang#open_port_parallelism`)\n    option of the [open_port/2](`erlang:open_port/2`) BIF.\n\n  - **Execution time of the `erlang:ports/0` BIF** - Since `erlang:ports/0` now\n    can be preempted, the responsiveness of the system as a whole has been\n    improved. A call to `erlang:ports/0` may, however, take a much longer time\n    to complete than before. How much longer time heavily depends on the system\n    load.\n\n  - **Reduction cost of calling driver callbacks** - Calling a driver callback\n    is quite costly. This was previously not reflected in reduction cost at all.\n    Since the reduction cost now has increased, a process performing lots of\n    direct driver calls will be scheduled out more frequently than before.\n\n  _Potential incompatibilities_:\n\n  - `driver_send_term()` has been deprecated and has been scheduled for removal\n    in OTP-R17. Replace usage of `driver_send_term()` with usage of\n    [erl_drv_send_term()](erl_driver.md#erl_drv_send_term).\n  - `driver_output_term()` has been deprecated and has been scheduled for\n    removal in OTP-R17. Replace usage of `driver_output_term()` with usage of\n    [erl_drv_output_term()](erl_driver.md#erl_drv_output_term).\n  - The new function\n    [erl_drv_busy_msgq_limits()](erl_driver.md#erl_drv_busy_msgq_limits) has\n    been added in order to able to control management of port queues.\n\n  The [driver API version](erl_driver.md#version_management) has been bumped to\n  2.1 from 2.0 due to the above changes in the driver API.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10336 Aux Id: OTP-9892\n\n- The experimental support for packages has been removed.\n\n  Own Id: OTP-10348 Aux Id: kunagi-316 \\[227]\n\n- Wrong parameters when setting seq_trace-tokens from within a trace-pattern\n  could crash the VM. This is now corrected.\n\n  Own Id: OTP-10522\n\n- Erlang specification 4.7.3 defines max tuple size to 65535 elements It is now\n  enforced to no more than 16777215 elements (arity 24 bits)\n\n  Previous edge cases (28 bits) were not validated and could cause undefined\n  behaviour.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10633\n\n- Add insert_element/3 and delete_element/2\n\n  Own Id: OTP-10643\n\n- The previous default of a maximum of 32768 simultaneous processes has been\n  raised to 262144. This value can be changed using the [\\+P](erl_cmd.md#%2BP)\n  command line flag of [erl(1)](erl_cmd.md). Note that the value passed now is\n  considered as a hint, and that actual value chosen in most cases will be a\n  power of two.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10647 Aux Id: OTP-9892, OTP-10336\n\n- The previously (in R15) proposed scheduler wakeup strategy is now used by\n  default. This strategy is not as quick to forget about previous overload as\n  the previous strategy.\n\n  This change imply changes of the characteristics the system. Most notable:\n  When a small overload comes and then disappears repeatedly, the system will\n  for a bit longer time be willing to wake up schedulers than before. Timing in\n  the system will due to this also change.\n\n  The previous strategy can still be enabled by passing the\n  [\\+sws legacy](erl_cmd.md#%2Bsws) command line flag to `erl`.\n\n  Own Id: OTP-10661 Aux Id: OTP-10033\n\n- The [\\+stbt](erl_cmd.md#%2Bstbt) command line argument of `erl` was added.\n  This argument can be used for trying to set scheduler bind type. Upon failure\n  unbound schedulers will be used.\n\n  Own Id: OTP-10668\n\n- Support ANSI in console\n\n  Unix platforms will no longer filter control sequences to the ttsl driver thus\n  enabling ANSI and colors in console. (Thanks to Pedram Nimreezi)\n\n  Own Id: OTP-10678\n\n- Add file:allocate/3 operation\n\n  This operation allows pre-allocation of space for files. It succeeds only on\n  systems that support such operation. (Thanks to Filipe David Manana)\n\n  Own Id: OTP-10680\n\n- Treat `-Wreturn-type` warnings as error when using GCC (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-10683\n\n- Implement ./otp_build configure --enable-silent-rules\n\n  With silent rules, the output of make is less verbose and compilation warnings\n  are easier to spot. Silent rules are disabled by default and can be disabled\n  or enabled at will by make V=0 and make V=1. (Thanks to Anthony Ramine)\n\n  Own Id: OTP-10726\n\n- Use share flags for all file operations on Windows. Thanks to Filipe David\n  Borba Manana.\n\n  Own Id: OTP-10727\n\n- Make/fakefop adjustments. Thanks to Tuncer Ayaz and Sebastian Rasmussen.\n\n  Own Id: OTP-10733\n\n- The runtime system will now by default use 10 async threads if thread support\n  has been enabled when building the runtime system.\n\n  This will prevent long blocking file-operations from blocking scheduler\n  threads for long periods of time, which can be harmful. Apart from\n  file-operations, it also effects other operations scheduled on the async\n  thread pool by user implemented drivers.\n\n  The amount of async threads can be controlled by using the\n  [`+A`](erl_cmd.md#async_thread_pool_size) command line argument of\n  [erl](erl_cmd.md). When running some offline tools you _might_ want to disable\n  async threads, but you are advised _not_ to in the general case. Instead, you\n  might want to increase the amount of async threads used.\n\n  This change imply changes of the characteristics the system compared to the\n  previous default. The responsiveness of the system as a whole will be\n  improved. Operations scheduled on the async thread pool will get an increased\n  latency. The throughput of these operations may increase, or decrease\n  depending on the type of the operations and how they get scheduled. In the\n  case of file operations, the throughput very much depends on how the Erlang\n  application access files. Multiple concurrent accesses to different files have\n  the potential of an increased throughput.\n\n  Own Id: OTP-10736\n\n- The default reader group limit has been increased to 64 from 8. This limit can\n  be set using the `+rg` command line argument of [erl](erl_cmd.md).\n\n  This change of default value will reduce lock contention on ETS tables using\n  the `read_concurrency` option at the expense of memory consumption when the\n  amount of schedulers and logical processors are between 8 and 64. For more\n  information, see documentation of the `+rg` command line argument of\n  [erl](erl_cmd.md).\n\n  Own Id: OTP-10737\n\n- New BIF float_to_list/2 which solves a problem of float_to_list/1 that doesn't\n  allow specifying the number of digits after the decimal point when formatting\n  floats (Thanks to Serge Aleynikov).\n\n  Own Id: OTP-10752\n\n- Limited support for unicode atoms in the external format and in the internal\n  representation of the vm. This is a preparative feature in order to support\n  communication with future releases of Erlang/OTP that may create unicode\n  atoms.\n\n  Own Id: OTP-10753\n\n- Increased potential concurrency in ETS for `write_concurrency` option. The\n  number of internal table locks has increased from 16 to 64. This makes it four\n  times less likely that two concurrent processes writing to the same table\n  would collide and thereby serialized. The cost is an increased constant memory\n  footprint for tables using write_concurrency. The memory consumption per\n  inserted record is not affected. The increased footprint can be particularly\n  large if `write_concurrency` is combined with `read_concurrency`.\n\n  Own Id: OTP-10787","ref":"notes.html#improvements-and-new-features-80"},{"type":"extras","title":"Erts 5.9.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9-3-1"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- Create an erl_crash.dump if no heart exists and no ERL_CRASH_DUMP_SECONDS is\n  set (behaviour changed).\n\n  Don't create an erl_crash.dump if heart do exists and no\n  ERL_CRASH_DUMP_SECONDS is set (behaviour not changed).\n\n  This changes the behaviour back to the R15B02 default considering if a beam\n  was running with no heart.\n\n  Own Id: OTP-10602","ref":"notes.html#known-bugs-and-problems-2"},{"type":"extras","title":"Erts 5.9.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix linking in OpenBSD. (Thanks to Matthew Dempsky)\n\n  Own Id: OTP-10395\n\n- Fix bug causing fallback atomics to be used even though healthy gcc atomics or\n  libatomic_ops was detected.\n\n  Own Id: OTP-10418\n\n- Ensure 'erl_crash.dump' when asked for it. This will change erl_crash.dump\n  behaviour.\n\n  \\* Not setting ERL_CRASH_DUMP_SECONDS will now terminate beam immediately on a\n  crash without writing a crash dump file.\n\n  \\* Setting ERL_CRASH_DUMP_SECONDS to 0 will also terminate beam immediately on\n  a crash without writing a crash dump file, i.e. same as not setting\n  ERL_CRASH_DUMP_SECONDS environment variable.\n\n  \\* Setting ERL_CRASH_DUMP_SECONDS to a negative value will let the beam wait\n  indefinitely on the crash dump file being written.\n\n  \\* Setting ERL_CRASH_DUMP_SECONDS to a positive value will let the beam wait\n  that many seconds on the crash dump file being written.\n\n  A positive value will set an alarm/timeout for restart both in beam and in\n  heart if heart is running.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10422 Aux Id: kunagi-250 \\[161]\n\n- Fix bug where MSVRT100.dll was not included in the windows installer.\n\n  Own Id: OTP-10481\n\n- In the expression `< >`, if `Bin` was a bitstring with a size\n  not a multiple of 8, either no exception was generated or an incorrect\n  exception was generated. (Thanks to Adam Rutkowski for reporting this bug.)\n\n  Own Id: OTP-10524\n\n- The runtime system could crash while scheduling a port task. The port task was\n  scheduled either due to an external I/O event being triggered, a driver\n  timeout being triggered, or data being sent over a distribution channel.\n\n  Own Id: OTP-10556\n\n- `erlang:memory(ets)` erroneously included the size of each ETS-table main\n  structure twice.\n\n  Own Id: OTP-10558\n\n- Fix compile error in generated file hipe_amd64_bifs.S for Solaris.\n\n  Own Id: OTP-10577\n\n- A faulty spec for process_info/2 could cause false dialyzer warnings. The spec\n  is corrected.\n\n  Own Id: OTP-10584\n\n- In very rare cases, the VM could crash if a garbage collector was called while\n  executing an appending bit syntax instruction. The symptom was a core when\n  reallocating memory in the function erts_bs_append. The garbage collector bug\n  is now corrected.\n\n  Own Id: OTP-10590","ref":"notes.html#fixed-bugs-and-malfunctions-305"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Improve support for building and testing in embedded ppc environments.\n\n  Own Id: OTP-10265 Aux Id: kunagi-159 \\[daf97f67-5724-4812-a5b6-7e86990133d2-1]\n\n- Due to a race condition on Windows, sometimes when printing to standard output\n  and then immediately terminating erlang all data would not be printed. The\n  emulator now waits for all data to be printed before exiting.\n\n  Own Id: OTP-10325 Aux Id: kunagi-166 \\[dd72d0e2-3e76-4a51-8b56-7564e24eecae]\n\n- The frequency with which sleeping schedulers are woken due to outstanding\n  memory deallocation jobs has been reduced.\n\n  Own Id: OTP-10476 Aux Id: OTP-10162\n\n- Clearer warnings about the dangers of misuse of\n  [native functions](erl_nif.md#WARNING) and [drivers](erl_driver.md#WARNING)\n  have been added to the documentation.\n\n  Own Id: OTP-10557","ref":"notes.html#improvements-and-new-features-81"},{"type":"extras","title":"Erts 5.9.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix erl_prim_loader errors in handling of primary archive. The following\n  errors have been corrected:\n\n  - If primary archive was named \"xxx\", then a file in the same directory named\n    \"xxxyyy\" would be interpreted as a file named \"yyy\" inside the archive.\n  - erl_prim_loader did not correctly create and normalize absolute paths for\n    primary archive and files inside it, so unless given with exact same path\n    files inside the archive would not be found. E.g. if escript was started as\n    /full/path/to/xxx then \"./xxx/file\" would not be found since erl_prim_loader\n    would try to match /full/path/to/xxx with /full/path/to/./xxx. Same problem\n    with ../.\n  - Depending on how the primary archive was built, erl_prim_loader:list_dir/1\n    would sometimes return an empty string inside the file list. This was a\n    virtual element representing the top directory of the archive. This has been\n    removed.\n\n  Thanks to Tuncer Ayaz and Shunichi Shinohara for reporting and co-authoring\n  corrections.\n\n  Own Id: OTP-10071\n\n- Fix: Add port-I/O statistics for active once and true and not only active\n  false.\n\n  Own Id: OTP-10073\n\n- The 64-bit windows installer did not look in the right directories for 64-bit\n  version of Microsoft Visual C++ 2010 Redistibutable Package and hence took the\n  wrong decision about having to install the redistributable package if the\n  32-bit version was installed but not the 64-bit and vice versa. This bug has\n  now been fixed Furthermore the sub-installer for the redistributable package\n  is now run in silent mode if the erlang installer is.\n\n  Own Id: OTP-10096\n\n- epmd would fail to start automatically when starting a distributed erlang node\n  installed in a location with a whitespace in the path.\n\n  Own Id: OTP-10106\n\n- A more or less harmless bug that sometimes caused memory deallocations to be\n  delayed longer than intended has been fixed.\n\n  Own Id: OTP-10116\n\n- Fix bug causing emulator crash when running HiPE on ARM. Bug has existed since\n  R15B.\n\n  Own Id: OTP-10137\n\n- A bug regarding spaces in C function prototypes has been fixed. (Thanks to\n  Richard O'Keefe.)\n\n  Own Id: OTP-10138\n\n- Corrected dtrace pid length in message related probes. (Thanks to Zheng Siyao)\n\n  Own Id: OTP-10142\n\n- Correct formatting in exit error messages\n\n  Ensure displayed sizes are not negative. (Thanks to Michael Santos)\n\n  Own Id: OTP-10148\n\n- fix escript/primary archive reloading\n\n  If the mtime of an escript/primary archive file changes after being added to\n  the code path, correctly reload the archive and update the cache. (Thanks to\n  Tuncer Ayaz)\n\n  Own Id: OTP-10151\n\n- Doc fix: link from erlang:now/0 to os:timestamp/0\n\n  Sometimes os:timestamp/0 is more appropriate than erlang:now/0. The\n  documentation for the former has a link to the latter; this patch adds a link\n  in the other direction to make os:timestamp/0 more visible. Thanks to Magnus\n  Henoch\n\n  Own Id: OTP-10180\n\n- The caret in the werl window (on Windows) could appear at the wrong place\n  after regaining focus. This is now corrected.\n\n  Own Id: OTP-10181\n\n- Fix bug that in some cases could cause corrupted binaries in ETS tables with\n  `compressed` option.\n\n  Own Id: OTP-10182\n\n- Fix use of \"clever\" mktime\n\n  Commit 1eef765 introduced regression (conditional \\_always\\_ evaluates to\n  true) in which erlang:localtime_to_universaltime/2 stopped working on systems\n  configured with timezone without DST (i.e. UTC) on \\*BSD platforms: 1>\n  erlang:localtime_to_universaltime(\\{\\{2012,1,1\\},\\{0,0,0\\}\\}, true). \\*\\*\n  exception error: bad argument Thanks to Piotr Sikora\n\n  Own Id: OTP-10187\n\n- Relocate bodies of DTrace probes to the statically-linked VM.\n\n  Due to various operating systems (in both the DTrace and SystemTap worlds) not\n  fully supporting DTrace probes (or SystemTap-compatibility mode probes) in\n  shared libraries, we relocate those probes to the statically-linked virtual\n  machine. This could be seen as pollution of the pristine VM by a (yet)\n  experimental feature. However:\n\n  1\\. This code can be eliminated completely by the C preprocessor. 2. Leaving\n  the probes in the dyntrace NIF shared library simply does not work correctly\n  on too many platforms. _Many_ thanks to Macneil Shonle at Basho for assisting\n  when my RSI-injured fingers gave out. (note: Solaris 10 and FreeBSD\n  9.0-RELEASE can take a long time to compile)\n\n  Own Id: OTP-10189\n\n- Fix bug in `ets:test_ms/2` that could cause emulator crash when using `'$_'`\n  in match spec.\n\n  Own Id: OTP-10190\n\n- Supplying a filename longer than the operating system MAX_PATH to\n  file:read_link/1 would cause a crash (Segemntation fault/Critical Error) on\n  all platforms. This is now corrected.\n\n  Own Id: OTP-10200\n\n- If Perl was configured to interpret files as being encoded in UTF-8, the build\n  would crash in `make_preload`. (Thanks to Aaron Harnly for noticing this\n  issue.)\n\n  Own Id: OTP-10201\n\n- Fix the erlc -MP flag\n\n  Because of a copy-and-paste error in erlc.c, the -MP flag had the same effect\n  as -MG. As a workaround, you had to pass +makedep_phony to enable the MP\n  option. This patch makes -MP work as intended.\n\n  Own Id: OTP-10211\n\n- Allow mixed IPv4 and IPv6 addresses to sctp_bindx\n\n  Also allow mixed address families to bind, since the first address on a\n  multihomed sctp socket must be bound with bind, while the rest are to be bound\n  using sctp_bindx. At least Linux supports adding address of mixing families.\n  Make inet_set_faddress function available also when HAVE_SCTP is not defined,\n  since we use it to find an address for bind to be able to mix ipv4 and ipv6\n  addresses. Thanks to Tomas Abrahamsson\n\n  Own Id: OTP-10217\n\n- Fix support for leap seconds-aware timezones\n\n  erlang:universaltime_to_localtime is leap seconds-aware (since 2008), however\n  erlang:localtime_to_universaltime is not, which gives surprising results on\n  systems configured with leap seconds-aware timezones: 1>\n  erlang:universaltime_to_localtime(\\{\\{2012,1,1\\},\\{0,0,0\\}\\}).\n  \\{\\{2012,1,1\\},\\{0,0,0\\}\\} 2>\n  erlang:localtime_to_universaltime(\\{\\{2012,1,1\\},\\{0,0,0\\}\\}).\n  \\{\\{2012,1,1\\},\\{0,0,24\\}\\} and completely breaks\n  calendar:local_time_to_universal_time_dst: 3>\n  calendar:local_time_to_universal_time_dst(\\{\\{2011,1,1\\},\\{0,0,0\\}\\}). []\n  Thanks to Piotr Sikora\n\n  Own Id: OTP-10227\n\n- erlsrv: gracefully stop emulator on Windows shutdown\n\n  Windows will send the SERVICE_CONTROL_SHUTDOWN event to the service control\n  handler when shutting down the system. Instead of ignoring the event, erlsrv\n  will now invoke the stop action. Likewise, the Erlang emulator (and it's po\n  drivers) must not quit upon reception of the CTRL_SHUTDOWN_EVENT event in th\n  console control handler. Thanks to Jan Kloetzke\n\n  Own Id: OTP-10228\n\n- Fix dtrace bug in file rename operation.\n\n  Own Id: OTP-10234\n\n- Fix bug in memory management of driver port data locks (PDL). In some cases\n  PDLs could be deallocated before `ready_async` or `async_free` callback was\n  called.\n\n  Own Id: OTP-10249","ref":"notes.html#fixed-bugs-and-malfunctions-306"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add port and suspend options to lock-counter profiling. (Thanks to Rick Reed)\n\n  Own Id: OTP-10051\n\n- Latency when using the active_once option in gen_tcp communication is reduced.\n\n  Own Id: OTP-10055 Aux Id: sto139\n\n- Remove bit8 option support from inet\n\n  Own Id: OTP-10056\n\n- The OS Pid of a port program is now available by calling\n  erlang:port_info(Port,os_pid), Thanks to Matthias Lang for the original patch.\n\n  Own Id: OTP-10057\n\n- Fix openpty usage in run_erl.\n\n  Reopening a slave file descriptor which was closed earlier could lead to a\n  misbehaving connection. This has now been remedied.\n\n  Own Id: OTP-10076\n\n- Remove all code, documentation, options and diagnostic functions which were\n  related to the experimental hybrid heap implementation.\n\n  Own Id: OTP-10105\n\n- Optimizations of memory deallocations.\n\n  Own Id: OTP-10162 Aux Id: OTP-7775\n\n- Optimization of process locking.\n\n  Own Id: OTP-10163\n\n- Added a xcomp example file for powerpc-dso-linux-gnu\n\n  Own Id: OTP-10198\n\n- Detect when middle endian doubles are used by a platform and account for it\n  when decoding floats. (Thanks to Mike Sperber)\n\n  Own Id: OTP-10209","ref":"notes.html#improvements-and-new-features-82"},{"type":"extras","title":"Erts 5.9.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- On Linux systems using heart (erl -heart) and a HEAR_BEAT_TIMEOUT less than\n  default, heart could fire even though Erlang was running fine after approx 298\n  to 497 days (depending on kernel config). This was due to the behaviour of the\n  times(2) system call. Usage of times(2) is now replaced with clock_gettime(2)\n  and the CLOCK_MONOTONIC clock, resulting in a more stable solution. The Erlang\n  VM itself has used clock_gettime(2) on linux since before R12B, so this only\n  affects the heart program.\n\n  Own Id: OTP-10111 Aux Id: seq12075","ref":"notes.html#fixed-bugs-and-malfunctions-307"},{"type":"extras","title":"Erts 5.9.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If threads support for the runtime system had been disabled at compile time\n  (`--disable-threads` had been passed to `configure`), and the `+A` command\n  line argument of `erl` was passed when starting the runtime system,\n  [driver_system_info()](erl_driver.md#driver_system_info) erroneously claimed\n  that the runtime system had async threads even though it had not.\n\n  Due to this bug the file driver did not split tasks into smaller chunks, but\n  instead completed the whole task at once, i.e., the scheduler got occupied\n  with I/O for a longer time than intended.\n\n  Own Id: OTP-10059","ref":"notes.html#fixed-bugs-and-malfunctions-308"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- A proposal for a new scheduler wakeup strategy has been implemented. For more\n  information see the documentation of the [\\+sws](erl_cmd.md#%2Bsws) command\n  line argument of `erl`.\n\n  Own Id: OTP-10033 Aux Id: Seq12025\n\n- A switch for configuration of busy wait length for scheduler threads has been\n  added. For more information see the documentation of the\n  [\\+sbwt](erl_cmd.md#%2Bsbwt) command line argument of `erl`.\n\n  Own Id: OTP-10044 Aux Id: Seq11976\n\n- The extra memory barriers introduced by bug-fix OTP-9281 were unnecessarily\n  used also on tables without the `write_concurrency` option enabled. This could\n  unnecessarily degrade performance of ETS tables without `write_concurrency` on\n  some hardware (e.g. PowerPC) while not effecting performance at all on other\n  hardware (e.g. x86/x86_64).\n\n  OTP-9281 (R14B03): ETS tables using the `write_concurrency` option could\n  potentially get into an internally inconsistent state.\n\n  Own Id: OTP-10048 Aux Id: OTP-9281","ref":"notes.html#improvements-and-new-features-83"},{"type":"extras","title":"Erts 5.9.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `erlang:system_profile` erroneous profiled the profiler process when observing\n  runnable processes. This has been corrected.\n\n  Own Id: OTP-9849\n\n- Calling trace_info/2 asking for information about a function that had native\n  could crash the run-time system.\n\n  Own Id: OTP-9886\n\n- reduce smp locking time range in erts_garbage_collect (thanks to Jovi Zhang)\n\n  Own Id: OTP-9912\n\n- Fix typo in supervisor behaviour doc (Thanks to Ricardo Catalinas Jiménez)\n\n  Own Id: OTP-9924\n\n- Correct spelling of registered (Thanks to Richard Carlsson)\n\n  Own Id: OTP-9925\n\n- erts: Remove unused variable (Thanks to Jovi Zhang)\n\n  Own Id: OTP-9926\n\n- Fix bug in ETS with `compressed` option and insertion of term containing large\n  integers (>2G) on 64-bit machines. Seen to cause emulator crash. (Thanks to\n  Diego Llarrull for excellent bug report)\n\n  Own Id: OTP-9932\n\n- Handle Linux OS where /sys/devices/system/node is only readable by root.\n  Fallback to /sys/devices/system/cpu for topology info.\n\n  Own Id: OTP-9978\n\n- When an escript ends now all printout to standard output and standard error\n  gets out on the terminal. This bug has been corrected by changing the\n  behaviour of erlang:halt/0,1, which should fix the same problem for other\n  escript-like applications, i.e that data stored in the output port driver\n  buffers got lost when printing on a TTY and exiting through erlang:halt/0,1.\n\n  The BIF:s erlang:halt/0,1 has gotten improved semantics and there is a new BIF\n  erlang:halt/2 to accomplish something like the old semantics. See the\n  documentation.\n\n  Now erlang:halt/0 and erlang:halt/1 with an integer argument will close all\n  ports and allow all pending async threads operations to finish before exiting\n  the emulator. Previously erlang:halt/0 and erlang:halt(0) would just wait for\n  pending async threads operations but not close ports. And erlang:halt/1 with a\n  non-zero integer argument would not even wait for pending async threads\n  operations.\n\n  To roughly the old behaviour, to not wait for ports and async threads\n  operations when you exit the emulator, you use erlang:halt/2 with an integer\n  first argument and an option list containing \\{flush,false\\} as the second\n  argument. Note that now is flushing not dependent of the exit code, and you\n  cannot only flush async threads operations which we deemed as a strange\n  behaviour anyway.\n\n  Also, erlang:halt/1,2 has gotten a new feature: If the first argument is the\n  atom 'abort' the emulator is aborted producing a core dump, if the operating\n  system so allows.\n\n  Own Id: OTP-9985\n\n- Added check to inet driver to avoid building on operating systems that do not\n  yet have IPv6 compatible socket API. (Thanks to Peer Stritzinger)\n\n  Own Id: OTP-9996\n\n- Fix bug when the number of CPUs actually found is lower than the configured\n  value. (Thanks to Benjamin Herrenschmidt)\n\n  Own Id: OTP-10004\n\n- The runtime system without SMP support and without thread support erroneously\n  busy waited when no work was present. This bug first appeared in `erts-5.9`.\n\n  Own Id: OTP-10019\n\n- Various typographical errors corrected in documentation for common_test,\n  driver, erl_driver and windows installation instructions. (Thanks to Tuncer\n  Ayaz)\n\n  Own Id: OTP-10037\n\n- Fix memory leak caused by race on exiting process\n\n  Own Id: OTP-10041","ref":"notes.html#fixed-bugs-and-malfunctions-309"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Add `erlang:statistics(scheduler_wall_time)` to ensure correct determination\n  of scheduler utilization. Measuring scheduler utilization is strongly\n  preferred over CPU utilization, since CPU utilization gives very poor\n  indications of actual scheduler/vm usage.\n\n  Own Id: OTP-9858\n\n- ERTS internal API improvements. In some cases the amount of atomic read\n  operations needed have been reduced due to this.\n\n  Own Id: OTP-9922\n\n- The DTrace source patch from Scott Lystig Fritchie is integrated in the source\n  tree. Using an emulator with dtrace probe is still not supported for\n  production use, but may be a valuable debugging tool. Configure with\n  --with-dynamic-trace=dtrace (or --with-dynamic-trace=systemtap) to create a\n  build with dtrace probes enabled. See runtime_tools for documentation and\n  examples.\n\n  Own Id: OTP-10017","ref":"notes.html#improvements-and-new-features-84"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- enif_make_copy may invalidate enif_inspect_binary.\n\n  Own Id: OTP-9828","ref":"notes.html#known-bugs-and-problems-3"},{"type":"extras","title":"Erts 5.9.0.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A feature test for the `lwsync` instruction performed on PowerPC hardware at\n  runtime system startup got into an eternal loop if the instruction was not\n  supported. This bug was introduced in erts-5.9/OTP-R15B.\n\n  Own Id: OTP-9843\n\n- I/O events could potentially be delayed for ever when enabling kernel-poll on\n  a non-SMP runtime system executing on Solaris. When also combined with\n  async-threads the runtime system hung before completing the boot phase. This\n  bug was introduced in erts-5.9/OTP-R15B.\n\n  Own Id: OTP-9844","ref":"notes.html#fixed-bugs-and-malfunctions-310"},{"type":"extras","title":"Erts 5.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Honor option `packet_size` for http packet parsing by both TCP socket and\n  `erlang:decode_packet`. This gives the ability to accept HTTP headers larger\n  than the default setting, but also avoid DoS attacks by accepting lines only\n  up to whatever length you wish to allow. For consistency, packet type `line`\n  also honor option `packet_size`. (Thanks to Steve Vinoski)\n\n  Own Id: OTP-9389\n\n- A few contracts in the `lists` module have been corrected.\n\n  Own Id: OTP-9616\n\n- The Unicode noncharacter code points 16#FFFE and 16#FFFE were not allowed to\n  be encoded or decoded using the `unicode` module or bit syntax. That was\n  inconsistent with the other noncharacters 16#FDD0 to 16#FDEF that could be\n  encoded/decoded. To resolve the inconsistency, 16#FFFE and 16#FFFE can now be\n  encoded and decoded. (Thanks to Alisdair Sullivan.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9624\n\n- Make epp search directory of current file first when including another file\n  This completes a partial fix in R11 that only worked for include_lib().\n  (Thanks to Richard Carlsson)\n\n  Own Id: OTP-9645\n\n- Fixed memory leak in `enif_inspect_io_list_as_binary` when applied on a\n  process independent environment.\n\n  Own Id: OTP-9668\n\n- The number of beam catches allowed in code are no longer statically defined\n  and will grow according to its need.\n\n  Own Id: OTP-9692\n\n- Add missing parenthesis in heart doc.\n\n  Add missing spaces in the Reference Manual distributed section.\n\n  In the HTML version of the doc those spaces are necessary to separate those\n  words.\n\n  Own Id: OTP-9693\n\n- Fixes module erlang doc style: option description (Thanks to Ricardo Catalinas\n  Jiménez)\n\n  Own Id: OTP-9697\n\n- Specifying a scope to binary:match/3 when using multiple searchstrings\n  resulted in faulty return values. This is now corrected.\n\n  Own Id: OTP-9701\n\n- The runtime system crashed if more than one thread tried to exit the runtime\n  system at the same time.\n\n  Own Id: OTP-9705\n\n- Fix documentation for erlang:process_flag/2\n\n  For the subsection about process_flag(save_calls, N) there's an unrelated\n  paragraph about process priorities which was copied from the preceding\n  subsection regarding process_flag(priority, Level). (Thanks to Filipe David\n  Manana)\n\n  Own Id: OTP-9714\n\n- Calls to `erlang:system_flag(schedulers_online, N)` and/or\n  `erlang:system_flag(multi_scheduling, block|unblock)` could cause internal\n  data used by this functionality to get into an inconsistent state. When this\n  happened various problems occurred. This bug was quite hard to trigger, so\n  hopefully no-one has been effected by it.\n\n  A spinlock used by the run-queue management sometimes got heavily contended.\n  This code has now been rewritten, and the spinlock has been removed.\n\n  Own Id: OTP-9727\n\n- Use libdlpi to get physical address (Thanks to Trond Norbye)\n\n  Own Id: OTP-9818","ref":"notes.html#fixed-bugs-and-malfunctions-311"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- An option list argument can now be passed to\n  `file:read_file_info/2, file:read_link_info/2` and `file:write_file_info/3`\n  and set time type information in the call. Valid options are\n  `{time, local}, {time, universal}` and `{time, posix}`. In the case of `posix`\n  time no conversions are made which makes the operation a bit faster.\n\n  Own Id: OTP-7687\n\n- A number of memory allocation optimizations have been implemented. Most\n  optimizations reduce contention caused by synchronization between threads\n  during allocation and deallocation of memory. Most notably:\n\n  - Synchronization of memory management in scheduler specific allocator\n    instances has been rewritten to use lock-free synchronization.\n  - Synchronization of memory management in scheduler specific pre-allocators\n    has been rewritten to use lock-free synchronization.\n  - The 'mseg_alloc' memory segment allocator now use scheduler specific\n    instances instead of one instance. Apart from reducing contention this also\n    ensures that memory allocators always create memory segments on the local\n    NUMA node on a NUMA system.\n\n  Own Id: OTP-7775\n\n- The ethread atomic memory operations API used by the runtime system has been\n  extended and improved.\n\n  The ethread library now also performs runtime tests for presence of hardware\n  features, such as for example SSE2 instructions, instead of requiring this to\n  be determined at compile time.\n\n  All uses of the old deprecated atomic API in the runtime system have been\n  replaced with the use of the new atomic API. In a lot of places this change\n  imply a relaxation of memory barriers used.\n\n  Own Id: OTP-9014\n\n- gen_sctp:open/0-2 may now return \\{error,eprotonosupport\\} if SCTP is not\n  supported\n\n  gen_sctp:peeloff/1 has been implemented and creates a one-to-one socket which\n  also are supported now\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9239\n\n- Sendfile has been added to the file module's API. sendfile/2 is used to read\n  data from a file and send it to a tcp socket using a zero copying mechanism if\n  available on that OS.\n\n  Thanks to Tuncer Ayaz and Steve Vinovski for original implementation\n\n  Own Id: OTP-9240\n\n- enif_get_reverse_list function added to nif API. This function should be used\n  to reverse small lists which are deep within other structures making it\n  impractical to do the reverse in Erlang.\n\n  Own Id: OTP-9392\n\n- The deprecated concat_binary/1 BIF has been removed. Use `list_to_binary` or\n  [`iolist_to_binary/1`](`iolist_to_binary/1`) instead.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9421\n\n- Erlang/OTP can now be built using parallel make if you limit the number of\n  jobs, for instance using '`make -j6`' or '`make -j10`'. '`make -j`' does not\n  work at the moment because of some missing dependencies.\n\n  Own Id: OTP-9451\n\n- Line number and filename information are now included in exception backtraces\n  as a fourth element in the MFA tuple. The information will be pretty-printed\n  by the shell and used by `common_test` to provide better indication of where a\n  test case.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9468\n\n- All binary constants used to be handled as heap binaries (i.e. the entire\n  binary would be copied when sent to another process). Binary constants larger\n  than 64 bytes are now refc binaries (i.e. the actual data in the binary will\n  not be copied when sent to another process).\n\n  Own Id: OTP-9486\n\n- If a float and an integer is compared, the integer is only converted to a\n  float if the float datatype can contain it. Otherwise the float is converted\n  to an integer.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9497\n\n- Add NIF function enif_is_number\n\n  This function allows for easily determining if a term represents or not a\n  number (integer, float, small or big).(Thanks to Filipe David Manana)\n\n  Own Id: OTP-9629\n\n- The ERTS internal system block functionality has been replaced by new\n  functionality for blocking the system. The old system block functionality had\n  contention issues and complexity issues. The new functionality piggy-backs on\n  thread progress tracking functionality needed by newly introduced lock-free\n  synchronization in the runtime system. When the functionality for blocking the\n  system isn't used, there is more or less no overhead at all. This since the\n  functionality for tracking thread progress is there and needed anyway.\n\n  Own Id: OTP-9631\n\n- An ERTS internal, generic, many to one, lock-free queue for communication\n  between threads has been introduced. The many to one scenario is very common\n  in ERTS, so it can be used in a lot of places in the future. Currently it is\n  used by scheduling of certain jobs, and the async thread pool, but more uses\n  are planned for the future.\n\n  Drivers using the driver_async functionality are not automatically locked to\n  the system anymore, and can be unloaded as any dynamically linked in driver.\n\n  Scheduling of ready async jobs is now also interleaved in between other jobs.\n  Previously all ready async jobs were performed at once.\n\n  Own Id: OTP-9632\n\n- Tuple funs (a two-element tuple with a module name and a function) are now\n  officially deprecated and will be removed in R16. Use '`fun M:F/A`' instead.\n  To make you aware that your system uses tuple funs, the very first time a\n  tuple fun is applied, a warning will be sent to the error logger.\n\n  Own Id: OTP-9649\n\n- Changed the internal BIF calling convention. Will make simpler faster code and\n  allow BIFs with an arbitrary arity.\n\n  Own Id: OTP-9662\n\n- Windows native critical sections are now used internally in the runtime system\n  on Windows as mutex implementation. This since they perform better under\n  extreme contention than our own implementation.\n\n  Own Id: OTP-9671\n\n- Convert some erl_nif macros into inline functions. Allow for better compile\n  time type checking. (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9675\n\n- The `+scl` command line flag has been added. It can be used for disabling\n  compaction of scheduler load. For more information see the [erl](erl_cmd.md)\n  documentation.\n\n  Own Id: OTP-9695\n\n- The build system has been updated so that Erlang/OTP can be built on Mac OS X\n  Lion systems without a GCC compiler. The INSTALL guide has been updated with\n  instructions on how to install a GCC compiler and build Erlang/OTP with it, in\n  order to get a run-time system with better performance.\n\n  Own Id: OTP-9712\n\n- When loading a module, the system use to run on a single scheduler during the\n  entire loading process. This has been changed to only take down the system\n  just before inserting the loaded code into the system tables, resulting in a\n  much shorter disruption if a module is loaded in a busy system. (Suggested by\n  Bob Ippolito.)\n\n  Own Id: OTP-9720\n\n- Possible to run HiPE without floating point exceptions (FPE). Useful on\n  platforms that lack reliable FPE. Slower float operations compared to HiPE\n  with FPE.\n\n  Own Id: OTP-9724\n\n- As of ERTS version 5.9 (OTP-R15B) the runtime system will by default _not_\n  bind schedulers to logical processors.\n\n  If the Erlang runtime system is the only operating system process that binds\n  threads to logical processors, this improves the performance of the runtime\n  system. However, if other operating system processes (as for example another\n  Erlang runtime system) also bind threads to logical processors, there might be\n  a performance penalty instead. In some cases this performance penalty might be\n  severe. Due to this, we change the default so that the user must make an\n  active decision in order to bind schedulers.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9726\n\n- The use of `erlang:system_flag(scheduler_bind_type, _)` and\n  `erlang:system_flag(cpu_topology, _)` have been deprecated and scheduled for\n  removal in erts-5.10/OTP-R16. For more information see the documentation of\n  `erlang:system_flag/2`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9749\n\n- An ancient workaround for a Windows bug was removed from the open_port code,\n  open_port(\\{spawn,...\\}...) is now faster. Thanks to Daniel Goertzen.\n\n  Own Id: OTP-9766\n\n- The use of deprecated 32bit time_t on 32bit Windows is removed.\n\n  Own Id: OTP-9767\n\n- The NIF `reload` mechanism is deprecated. Do not use it as an upgrade method\n  for live production systems. It might be removed in future releases. It can\n  still serve as a development feature but a warning message will be logged each\n  time it is used.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9771\n\n- The driver interface has been changed to enable 64-bit aware drivers. Most\n  importantly the return types for ErlDrvEntry callbacks 'call' and 'control'\n  has ben enlarged which require drivers to be changed or they will cause\n  emulator crashes. See\n  [Rewrites for 64-bit driver interface ](erl_driver.md#rewrites-for-64-bit-driver-interface)in\n  the driver manual.\n\n  Due to this driver [version management](erl_driver.md#version_management) is\n  now mandatory. A driver that is not written with version management or a\n  driver that was compiled with the wrong major version will be not be loaded by\n  the emulator.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9795\n\n- Eliminate use of deprecated regexp module\n\n  Own Id: OTP-9810","ref":"notes.html#improvements-and-new-features-85"},{"type":"extras","title":"Erts 5.8.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Several bugs concerning constant binary constructions such as <<0:4294967295>>\n  have been corrected. Depending on the actual size of the binary and the type\n  of run-time system (32-bit, halfword, 64-bit), such expression could either\n  crash the run-time system or make the loader refuse loading of the module.\n\n  Own Id: OTP-9284\n\n- The Erlsrv utility failed to stop the erlang machine if no StopAction was\n  defined when the service was stopped. This is now corrected.\n\n  Own Id: OTP-9344\n\n- Due to a bug in glibc the runtime system could abort while trying to destroy a\n  mutex. A fix for this was introduced in R14B02. This fix did, however, not\n  solve the problem. The runtime system will now issue a warning instead of\n  aborting.\n\n  Own Id: OTP-9373 Aux Id: OTP-9009\n\n- Replace atom in DRV macro in prim_file with string\n\n  An experimental version of Dialyzer discovered that the atom that replaced the\n  DRV macro in prim_file ends up in calls to erlang:open_port(\\{spawn, Driver\\},\n  Portopts) as the Driver argument. The documentation states that this call\n  requires a string there.\n\n  This change is also consistent with the one introduced in commit\n  0f03b1e9d2bef3bc830c31a369261af4c5234727 by Kostis Sagonas.\n\n  Own Id: OTP-9377\n\n- Fix typos in the epmd documentation (Thanks to Holger Weiß )\n\n  Own Id: OTP-9387\n\n- Fix faulty integer terms created by NIF API from 64-bit integers on halfword\n  emulator. (Thanks to Paolo Negri and Paul Davis)\n\n  Own Id: OTP-9394\n\n- Fix `epmd` crash on vxworks caused by faulty argument to select() system call.\n\n  Own Id: OTP-9427 Aux Id: seq11855\n\n- The ets:test_ms function could in rare cases truncate the error messages. This\n  is now corrected.\n\n  Own Id: OTP-9435\n\n- Fix bug related to hibernate and HiPE (clear F_HIBERNATE_SCHED flag)\n\n  F_HIBERNATE_SCHED flag that was introduced in b7ecdcd1ae9e11b8f75e must be\n  cleared in hipe_mode_switch as well. Otherwise, processes running HiPE code\n  that hibernate, wake up and then trap into a BIF will not be\n  rescheduled.(Thanks to Paul Guyot)\n\n  Own Id: OTP-9452\n\n- Fix bug in FreeBSD topology detection code (Thanks to Paul Guyot)\n\n  Own Id: OTP-9453\n\n- Fix use of logical operator && with constant operand instead of bitwise &\n  (Thanks to Cristian Greco)\n\n  Own Id: OTP-9454\n\n- inet: error if fd does not match socket domain\n\n  If an IPv4 fd is opened as an IPv6 socket, unexpected behaviour can occur. For\n  example, if an IPv4 UDP socket is opened and passed into Erlang as an IPv6\n  socket, the first 3 bytes (corresponding to 1 byte representing the protocol\n  family, 2 bytes set to the port) are stripped from the payload. The cause of\n  the UDP payload truncation happens in inet_drv.c:packet_inet_input when a call\n  to inet_get_address fails silently because the family is set to PF_INET6 but\n  the buffer len is the size of an IPv4 struct sockaddr_in.\n\n  (Thanks to Andrew Tunnell-Jones for finding the bug and the test case\\!)\n\n  Own Id: OTP-9455\n\n- erts: use a union to avoid strict aliasing issues\n\n  Use a union for pointer type conversion to avoid compiler warnings about\n  strict-aliasing violations with gcc-4.1. gcc >= 4.2 does not emit the warning.\n  erts: adapt matrix_nif to R14 erl_nif API changes (Thanks To Tuncer Ayaz)\n\n  Own Id: OTP-9487\n\n- fix 64-bit issues in the garbage collection (Thanks to Richard Carlsson)\n\n  Own Id: OTP-9488\n\n- epmd: fix compiler warnings\n\n  Suppress compiler warnings about ignored return values. (Thanks to Michael\n  Santos )\n\n  Own Id: OTP-9500\n\n- Fix non-existing function (erlang:disconnect/1) in distributed reference\n  manual (Thanks to Fabian Król)\n\n  Own Id: OTP-9504\n\n- Document fdatasync -lrt requirement (SunOS <= 5.10) (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9512\n\n- Let epmd ignore empty ERL_EPMD_ADDRESS\n\n  If the environment variable ERL_EPMD_ADDRESS is set to the empty string, empd\n  now behaves like it does by default when ERL_EPMD_ADDRESS is unset. That is,\n  in this case, epmd now listens on all available interfaces instead of using\n  only the loopback interface, which happened because epmd added the loopback\n  address to the (in this case empty) list of addresses specified via\n  ERL_EPMD_ADDRESS.\n\n  Also, epmd now ignores ERL_EPMD_ADDRESS if it contains only separator\n  characters (comma and space).\n\n  The same applies to epmd's -address option.(Thanks to Holger Weiß)\n\n  Own Id: OTP-9525\n\n- Remove dead code in erl_compile (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9527\n\n- Add erlang:external_size/2 BIF\n\n  This BIF's second parameter is a list of options. Currently the only allowed\n  option is \\{minor_version, Version\\} where version is either 0 (default) or 1.\n  (Thanks to Filipe David Manana )\n\n  Own Id: OTP-9528\n\n- Fix enif_compare on 64bits machines\n\n  In 64bits machines the Sint type has a size of 8 bytes, while on 32bits\n  machines it has a 4 bytes size. enif_compare was ignoring this and therefore\n  returning incorrect values when the result of the CMP function (which returns\n  a Sint value) doesn't fit in 4 bytes. (Thanks to Filipe David Manana)\n\n  Own Id: OTP-9533\n\n- Implement or fix -Werror option\n\n  If -Werror is enabled and there are warnings no output file is written. Also\n  make sure that error/warning reporting is consistent. (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9536\n\n- In some rare cases we did not have a run queue when scheduling misc ops. This\n  is now fixed.\n\n  Own Id: OTP-9537\n\n- Remove misc. compiler warnings\n\n  Own Id: OTP-9542\n\n- Two bugs in gen_sctp has been corrected: getopts/setopts hence also send could\n  only be called from socket owner, and options 'linger', 'rcvbuf' and 'sndbuf'\n  was read from wrong protocol layer hence read wrong values by getopts.\n\n  Own Id: OTP-9544\n\n- Erlang/OTP can now be built on MacOS X Lion.\n\n  Own Id: OTP-9547\n\n- XML files have been corrected.\n\n  Own Id: OTP-9550 Aux Id: OTP-9541\n\n- Fix potential errors inspired by running cppcheck(1) (Thanks to Christian von\n  Roques)\n\n  Own Id: OTP-9557\n\n- When auxiliary work was enqueued on a scheduler, the wakeup of the scheduler\n  in order to handle this work could be lost. Wakeups in order to handle\n  ordinary work were not effected by this bug. The bug only effected runtime\n  systems with SMP support as follows:\n\n  - Deallocation of some ETS data structures could be delayed.\n  - On Linux systems not using the NPTL thread library (typically ancient\n    systems with kernel versions prior to 2.6) and Windows systems, the\n    `{Port, {exit_status, Status}}` message from a terminating port program\n    could be delayed. That is, it only effected port programs which had been\n    started by passing `exit_status` as an option to\n    [`open_port/2`](`open_port/2`).\n\n  Own Id: OTP-9567\n\n- Handle rare race in the crypto key server functionality\n\n  Own Id: OTP-9586","ref":"notes.html#fixed-bugs-and-malfunctions-312"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Types and specifications have been added.\n\n  Own Id: OTP-9356\n\n- New allocator strategy \"address order first fit\". May ease the emptying of\n  memory carriers and thereby real release of memory back to the OS.\n\n  Own Id: OTP-9424\n\n- The new `erlang:check_old_code/1` BIF checks whether a module has old code.\n\n  Own Id: OTP-9495\n\n- Update documentation and specifications of some of the zlib functions.\n\n  Own Id: OTP-9506\n\n- Detect the available CPUs on IRIX\n\n  Add support for querying the number of configured and online processors on SGI\n  systems running IRIX.(Thanks to Holger Weiß)\n\n  Own Id: OTP-9531","ref":"notes.html#improvements-and-new-features-86"},{"type":"extras","title":"Erts 5.8.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix binary and iolist overflow problems. Typically problems arose in length\n  calculation where the result would exceed (1 bsl 32 - 1).\n\n  Own Id: OTP-9118\n\n- Using the old erlang shell (i.e. erl instead on werl) on windows and doing\n  several init:restart's would eventually hang the VM. That is no longer the\n  case.\n\n  Own Id: OTP-9139\n\n- Removed recursive C code when printing Erlang terms to buffers, avoiding stack\n  overflows that could cause VM to crash.\n\n  Own Id: OTP-9140\n\n- The send_timeout option in gen_tcp did not work properly in active mode or\n  with \\{active,once\\} options. This is now corrected.\n\n  Own Id: OTP-9145\n\n- Fixed various typos across the documentation (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9154\n\n- Remove duplicate stack entries which could occur after calling certain BIFs.\n\n  Own Id: OTP-9163\n\n- A race when starting two nodes simultaneously using run_erl has been removed.\n\n  Own Id: OTP-9164\n\n- Add documentation on .erlang processing back again (Thanks to Gabor Liptak)\n\n  Own Id: OTP-9189\n\n- Remove gratuitous paren in driver_entry(Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9192\n\n- Fix some wrong pointer dereferences (Thanks to Cristian Greco)\n\n  Own Id: OTP-9194\n\n- erts: Remove unused variables (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9205\n\n- The documentation for `init:get_args/0` has been removed. `init:get_args/0`\n  itself was deprecated in R9C and removed in R12B. (Thanks to Eric Pailleau.)\n\n  Own Id: OTP-9209\n\n- Allow user to specify the IP address epmd binds to\n\n  The IP address(es) epmd binds to can now be specified by the user, either via\n  epmd's new \"-address\" option or (if that's not used) by setting the\n  environment variable ERL_EPMD_ADDRESS. Multiple addresses may be specified\n  using a comma-separated list. If the loopback address is not in this list, it\n  will be added implicitly, so that the daemon can be queried by an interactive\n  epmd process.(Thanks to Holger Weiß)\n\n  Own Id: OTP-9213\n\n- epmd: include host address in local access check\n\n  In FreeBSD jails, the source and destination address of connections to\n  localhost are changed to be the IP address of the jail. Consider connections\n  from the host's IP address to itself (e.g., the source and destination address\n  match) to be local for the access control checks. (Thanks to Michal Santos and\n  Tom at diogunix.com)\n\n  Own Id: OTP-9214\n\n- Fix list returned by net_kernel:epmd_module\n\n  Function epmd_module of net_kernel returns a list instead of an atom, when the\n  epmd_module-flag is used. (Thanks to Markus Knofe)\n\n  Own Id: OTP-9215\n\n- Fix epmd's dbg_perror() output\n\n  The dbg_perror() function now hands the current errno value over to\n  dbg_gen_printf(). This fixes the problem that errno had been reset to zero by\n  the time it was used (to print the corresponding error message) in the\n  dbg_gen_printf() function. (Thanks to Holger Weiß)\n\n  Own Id: OTP-9223\n\n- heart: remove garbage appended to heart command\n\n  heart:get_cmd/0 is documented to return an empty string if the command is\n  cleared. get_cmd/0 returns 2 extra bytes: 1 byte for the trailing null, 1 byte\n  from the op (the op is an unsigned char and 2 bytes are allocated for it in\n  the returned buffer). (Thanks to Michael Santos)\n\n  Own Id: OTP-9224\n\n- file: fix hang reading compressed files\n\n  The gzio driver goes into an infinite loop when reading past the end of a\n  compressed file. Reported-By: Alex Morarash (Thanks to Michael Santos)\n\n  Own Id: OTP-9245\n\n- Eliminate alias warnings from gcc 4.5.2\n\n  Own Id: OTP-9250\n\n- Unsigned integer may overflow in error message (Thanks to Michael Santos)\n\n  Own Id: OTP-9251\n\n- Driver names should be strings, not atoms\n\n  Own Id: OTP-9253\n\n- driver_entry: Remove gratuitous paren and fix typo (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9254\n\n- Fix format specifiers in erl_exit messages\n\n  Fix an error message by using an unsigned integer specifier as seen in a tweet\n  by @metabrew: #erlang VM crashed with \"no next heap size found: -2090496108,\n  offset 0\", suddenly allocated all available RAM\n\n  Also correct mis-typed string formats in bif.c.(Thanks to Michael Santos)\n\n  Own Id: OTP-9262\n\n- net_drv: remove unused tcp request id inet_drv: remove gratuitous assignment\n  (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9263\n\n- Teach run_erl RUN_ERL_DISABLE_FLOWCNTRL for disabling flow control\n\n  Flow control can cause unwanted behaviour of the beam process, if accidentally\n  hit Ctrl-S (instead of Ctrl-D to detach) the entire beam may be blocked.\n\n  Fix this problem by making it possible to turn off flow control by setting the\n  environment variable RUN_ERL_DISABLE_FLOWCNTRL. (Thanks to Jonas Faklkevik)\n\n  Own Id: OTP-9270\n\n- The following bugs due to missing memory barriers have been fixed:\n\n  - ETS tables using the `write_concurrency` option could potentially get into\n    an internally inconsistent state.\n  - ETS tables using the `ordered_set` option could potentially get into an\n    internally inconsistent state.\n  - A number of memory barriers have been added when building with the\n    `libatomic_ops` API (i.e. when passing `--with-libatomic_ops=PATH` to\n    `configure`) and the tilera atomics API (i.e. when building for the tilera\n    chip). Note that these bugs were due to erroneous usage of the APIs, and not\n    in the implementations of the APIs. When using these APIs the following bugs\n    where present:\n\n    - The BIF `erlang:ports/0` could return an erroneous result.\n    - A thread blocking other threads during code loading, or setup of tracing\n      could potentially read invalid data.\n    - Fixation of ETS tables could potentially get into an internally\n      inconsistent state.\n\n  Own Id: OTP-9281\n\n- Fix halfword bug for ETS ordered_set when doing `select/match` with partly\n  bound key.\n\n  Own Id: OTP-9292\n\n- Fix bug in `code:is_module_native` that caused crash for deleted modules.\n\n  Own Id: OTP-9298\n\n- Calling `driver_async_cancel()` could cause a scheduler thread to enter an\n  eternal loop doing no useful work. (Thanks to Anders Ramsell)\n\n  Own Id: OTP-9302","ref":"notes.html#fixed-bugs-and-malfunctions-313"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- New `enif_is_exception function` to allow NIFs to determine whether an\n  `ERL_NIF_TERM` represents an exception. (Thanks to Steve Vinoski)\n\n  Own Id: OTP-9150\n\n- A process being garbage collected by another process could be scheduled on\n  another scheduler. This prevented this scheduler from doing any useful work\n  until the garbage collection was done. This either occurred due to a explicit\n  call to the [`garbage_collect/1`](`garbage_collect/1`) BIF, or due to a\n  garbage collection part of code loading. A process being garbage collected\n  like this will now not be scheduled until the garbage collection has\n  completed.\n\n  Own Id: OTP-9211\n\n- Remove unnecessary validation copy in prim_file:drv_command/3 (Thanks to Tony\n  Rogvall)\n\n  Own Id: OTP-9276\n\n- Symbolic link handling on windows have been slightly updated to map error\n  conditions more consequently and correctly read directory links created\n  outside of the Erlang environment.\n\n  Own Id: OTP-9279\n\n- Due to standard library DLL mismatches between versions of OpenSSL and\n  Erlang/OTP, OpenSSL is now linked statically to the crypto driver on Windows.\n  This fixes problems starting crypto when running Erlang as a service on all\n  Windows versions.\n\n  Own Id: OTP-9280\n\n- Halfword emulator memory handling improvements:\n\n  - Much more of internal memory structures have been made able to use \"high\"\n    memory and are no longer restricted to the 4Gb limit that still applies for\n    all process heap data.\n  - Fixed faulty values from `erlang:memory()` caused by 32-bit counter\n    overflow.\n  - New counter `low` in `erlang:memory()` that sums up all memory restricted by\n    4Gb limit.\n\n  Own Id: OTP-9291 Aux Id: seq11841\n\n- The value set in the undocumented and unsupported ERL_version_FLAGS (e.g.\n  ERL_R14B03_FLAGS) environment variable can now be overridden by the command\n  line (similar to ERL_AFLAGS).\n\n  Own Id: OTP-9297","ref":"notes.html#improvements-and-new-features-87"},{"type":"extras","title":"Erts 5.8.3.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-3-2"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- Fix halfword emulator bug in `ets:select_delete` for `ordered_set` that caused\n  emulator to crash.\n\n  Own Id: OTP-9258 Aux Id: seq11836","ref":"notes.html#known-bugs-and-problems-4"},{"type":"extras","title":"Erts 5.8.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Ets table type ordered_set could order large integer keys wrongly on pure\n  64bit platforms. This is now corrected.\n\n  Own Id: OTP-9181\n\n- The status of a process was unnecessarily set to waiting before a process was\n  enqueued in a run queue. This bug was harmless up until OTP-R14B01. In\n  OTP-R14B02 `erlang:hibernate/3` was fixed (OTP-9125). After the introduction\n  of OTP-9125, the previously harmless process status bug sometimes caused\n  erroneous badarg exceptions from `process_info()`.\n\n  OTP-9125 also introduced a thread unsafe access to the status field of a\n  process which now also have been fixed.\n\n  \\*** INCOMPATIBILITY with noxs \\***\n\n  Own Id: OTP-9197","ref":"notes.html#fixed-bugs-and-malfunctions-314"},{"type":"extras","title":"Erts 5.8.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The scroll wheel now scrolls the werl window on Windows.\n\n  Own Id: OTP-8985\n\n- Some malformed distribution messages could cause VM to crash, this is now\n  corrected.\n\n  Own Id: OTP-8993\n\n- The OS function getifaddrs() can return NULL in some address fields for e.g\n  PPP and tunnel devices which caused the emulator to segfault. This bug has now\n  been corrected.\n\n  Own Id: OTP-8996\n\n- The expression < > would always produce an empty binary, even if `A` was\n  not an integer. Corrected to cause a `badarg` exception if the type of `A` is\n  invalid. (Thanks to Zvi.)\n\n  Own Id: OTP-8997\n\n- A bug that potentially could cause an emulator crash when deleting an\n  ETS-table has been fixed. A resource leak when hitting the maximum amount of\n  ETS-tables allowed has also been fixed.\n\n  Own Id: OTP-8999\n\n- A bug in the [`exit/2`](`exit/2`) BIF could potentially cause an emulator\n  crash.\n\n  Own Id: OTP-9005\n\n- Due to a bug in glibc the runtime system could abort while trying to destroy a\n  mutex. The runtime system will now issue a warning instead of aborting.\n\n  Own Id: OTP-9009\n\n- A bug in epmd could create strange behaviour when listen() calls failed. This\n  is now corrected thanks to Steve Vinoski.\n\n  Own Id: OTP-9024\n\n- When setting file_info the win32_driver will now correctly set access and\n  modified time. Previously these entities were swapped.\n\n  Own Id: OTP-9046\n\n- Setting scheduler bind type to `unbound` failed if binding of schedulers\n  wasn't supported, or if CPU topology wasn't present. This even though the\n  documentation stated that it is possible to set the bind type to `unbound`.\n\n  Own Id: OTP-9056 Aux Id: Seq11779\n\n- Two problems were fixed in crash dump: The time left for timers are now shown\n  as unsigned integers and the contents of ordered_set ETS tables is no longer\n  included.\n\n  Own Id: OTP-9057\n\n- The VM could fail to set IP_TOS and SO_PRIORITY in certain situations, either\n  because sockets were supplied as open file descriptors, or because SO_PRIORITY\n  by default was set higher than the user can explicitly set it to. Those\n  situations are now handled.\n\n  Own Id: OTP-9069\n\n- Wx on MacOS X generated complains on stderr about certain cocoa functions not\n  being called from the \"Main thread\". This is now corrected.\n\n  Own Id: OTP-9081\n\n- Fix a couple typos in driver_entry(3) (thanks to Tuncer Ayaz).\n\n  Own Id: OTP-9085\n\n- Mention that \"-detached\" implies \"-noinput\"\n\n  Clarify that specifying \"-noinput\" is unnecessary if the \"-detached\" flag is\n  given. (thanks to Holger Weiß)\n\n  Own Id: OTP-9086\n\n- A potential problem (found by code inspection) when calling a fun whose code\n  was not loaded has been fixed.\n\n  Own Id: OTP-9095\n\n- The emulator could get into a state where it didn't check for I/O.\n\n  Own Id: OTP-9105 Aux Id: Seq11798\n\n- Attempting to create binaries exceeding 2Gb (using for example\n  [`term_to_binary/1`](`term_to_binary/1`)) would crash the emulator with an\n  attempt to allocate huge amounts of memory. (Thanks to Jon Meredith.)\n\n  Own Id: OTP-9117\n\n- Fix erlang:hibernate/3 on HiPE enabled emulator (Thanks to Paul Guyot)\n\n  Own Id: OTP-9125","ref":"notes.html#fixed-bugs-and-malfunctions-315"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- From this release, the previously experimental halfword emulator is now\n  official. It can be enabled by giving the `--enable-halfword-emulator` option\n  to the `configure` script.\n\n  The halfword emulator is a 64-bit application, but uses halfwords (32-bit\n  words) for all data in Erlang processes, therefore using less memory and being\n  faster than the standard 64-bit emulator. The total size of all BEAM code and\n  all process data for all processes is limited to 4Gb, but ETS tables and\n  off-heap binaries are only limited by the amount of available memory.\n\n  Own Id: OTP-8941\n\n- 32-bit atomic memory operations have been introduced internally in the run\n  time system, and are now used where appropriate. There were previously only\n  atomic memory operations of word size available. The 32-bit atomic memory\n  operations slightly reduce memory consumption, and slightly improve\n  performance on 64-bit runtime systems.\n\n  Own Id: OTP-8974\n\n- Performance enhancements for looking up timer-entries and removing timers from\n  the wheel.\n\n  Own Id: OTP-8990\n\n- Write accesses to ETS tables have been optimized by reducing the amount of\n  atomic memory operations needed during a write access.\n\n  Own Id: OTP-9000\n\n- Strange C coding in the VM made the -D_FORTIFY_SOURCE option to gcc-4.5 react\n  badly. The code is now cleaned up so that it's accepted by gcc-4.5.\n\n  Own Id: OTP-9025\n\n- The memory footprint for loaded code has been somewhat reduced (especially in\n  the 64-bit BEAM machine).\n\n  Own Id: OTP-9030\n\n- The maximum number of allowed arguments for an Erlang function has been\n  lowered from 256 to 255, so that the number of arguments can now fit in a\n  byte.\n\n  Own Id: OTP-9049\n\n- Dependency generation for Makefiles has been added to the compiler and erlc.\n  See the manual pages for `compile` and `erlc`. (Thanks to Jean-Sebastien\n  Pedron.)\n\n  Own Id: OTP-9065","ref":"notes.html#improvements-and-new-features-88"},{"type":"extras","title":"Erts 5.8.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix format_man_pages so it handles all man sections and remove warnings/errors\n  in various man pages.\n\n  Own Id: OTP-8600\n\n- The `configure` command line argument\n  [\\--enable-ethread-pre-pentium4-compatibility](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp`)\n  had no effect. This option is now also automatically enabled if required on\n  the build machine.\n\n  Own Id: OTP-8847\n\n- Windows 2003 and Windows XP pre SP3 would sometimes not start the Erlang R14B\n  VM at all due to a bug in the cpu topology detection. The bug affects Windows\n  only, no other platform is even remotely affected. The bug is now corrected.\n\n  Own Id: OTP-8876\n\n- The HiPE run-time in the 64-bit emulator could do a 64-bit write to a 32-bit\n  struct field. It happened to be harmless on Intel/AMD processors. Corrected.\n  (Thanks to Mikael Pettersson.)\n\n  Own Id: OTP-8877\n\n- A bug in [erl_drv_tsd_get()](erl_driver.md#erl_drv_tsd_get) and\n  [enif_tsd_get()](erl_nif.md#enif_tsd_get) could cause an emulator crash. These\n  functions are currently not used in OTP. That is, the crash only occur on\n  systems with user implemented NIF libraries, or drivers that use one of these\n  functions.\n\n  Own Id: OTP-8889\n\n- Calling `erlang:system_info({cpu_topology, CpuTopologyType})` with another\n  `CpuTopologyType` element than one of the documented atoms `defined`,\n  `detected`, or `used` caused an emulator crash. (Thanks to Paul Guyot)\n\n  Own Id: OTP-8914\n\n- The ERTS internal rwlock implementation could get into an inconsistent state.\n  This bug was very seldom triggered, but could be during heavy contention. The\n  bug was introduced in R14B (erts-5.8.1).\n\n  The bug was most likely to be triggered when using the `read_concurrency`\n  option on an ETS table that was frequently accessed from multiple processes\n  doing lots of writes and reads. That is, in a situation where you typically\n  don't want to use the `read_concurrency` option in the first place.\n\n  Own Id: OTP-8925 Aux Id: OTP-8544\n\n- Tracing to port could cause an emulator crash when unloading the trace driver.\n\n  Own Id: OTP-8932\n\n- Removed use of CancelIoEx on Windows that had been shown to cause problems\n  with some drivers.\n\n  Own Id: OTP-8937\n\n- The fallback implementation used when no native atomic implementation was\n  found did not compile. (Thanks to Patrick Baggett, and Tuncer Ayaz)\n\n  Own Id: OTP-8944\n\n- Some integer values used during load balancing could under rare circumstances\n  wrap causing a load unbalance between schedulers.\n\n  Own Id: OTP-8950\n\n- The windows VM now correctly handles appending to large files (> 4GB).\n\n  Own Id: OTP-8958\n\n- Name resolving of IPv6 addresses has been implemented for Windows versions\n  that support it. The use of ancient resolver flags (AI_V4MAPPED |\n  AI_ADDRCONFIG) to the getaddrinfo() function has been removed since e.g\n  FreeBSD regard mapped IPv4 addresses to be a security problem and the\n  semantics of the address configured flag is uncertain.\n\n  Own Id: OTP-8969","ref":"notes.html#fixed-bugs-and-malfunctions-316"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The help texts produced by the `configure` scripts in the top directory and in\n  the erts directory have been aligned and cleaned up.\n\n  Own Id: OTP-8859\n\n- When the runtime system had fewer schedulers than logical processors, the\n  system could get an unnecessarily large amount reader groups.\n\n  Own Id: OTP-8861\n\n- `run_rel` has been updated to support Solaris's /dev/ptmx device and to load\n  the necessary STREAMS modules so that `to_erl` can provide terminal echo of\n  keyboard input. (Thanks to Ryan Tilder.)\n\n  Own Id: OTP-8878\n\n- The Erlang VM now supports Unicode filenames. The feature is turned on by\n  default on systems where Unicode filenames are mandatory (Windows and MacOSX),\n  but can be enabled on other systems with the '+fnu' emulator option. Enabling\n  the Unicode filename feature on systems where it is not default is however\n  considered experimental and not to be used for production. Together with the\n  Unicode file name support, the concept of \"raw filenames\" is introduced, which\n  means filenames provided without implicit unicode encoding translation. Raw\n  filenames are provided as binaries, not lists. For further information, see\n  stdlib users guide and the chapter about using Unicode in Erlang. Also see the\n  file module manual page.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8887\n\n- Buffer overflows have been prevented in `erlc`, `dialyzer`, `typer`,\n  `run_test`, `heart`, `escript`, and `erlexec`.\n\n  (Thanks to Michael Santos.)\n\n  Own Id: OTP-8892\n\n- The runtime system is now less eager to suspend processes sending messages\n  over the distribution. The default value of the distribution buffer busy limit\n  has also been increased from 128 KB to 1 MB. This in order to improve\n  throughput.\n\n  Own Id: OTP-8901\n\n- The distribution buffer busy limit can now be configured at system startup.\n  For more information see the documentation of the `erl`\n  [\\+zdbbl](erl_cmd.md#%2Bzdbbl) command line flag. (Thanks to Scott Lystig\n  Fritchie)\n\n  Own Id: OTP-8912\n\n- The inet driver internal buffer stack implementation has been rewritten in\n  order to reduce lock contention.\n\n  Own Id: OTP-8916\n\n- New ETS option `compressed`, to enable a more compact storage format at the\n  expence of heavier table operations. For test and evaluation, `erl +ec` can be\n  used to force compression on all ETS tables.\n\n  Own Id: OTP-8922 Aux Id: seq11658\n\n- There is now a new function inet:getifaddrs/0 modeled after C library function\n  getifaddrs() on BSD and LInux that reports existing interfaces and their\n  addresses on the host. This replaces the undocumented and unsupported\n  inet:getiflist/0 and inet:ifget/2.\n\n  Own Id: OTP-8926\n\n- Support for detection of CPU topology and binding of schedulers on FreeBSD 8\n  have been added. (Thanks to Paul Guyot)\n\n  Own Id: OTP-8939\n\n- Several bugs related to hibernate/3 and HiPE have been corrected. (Thanks to\n  Paul Guyot.)\n\n  Own Id: OTP-8952\n\n- Support for soft and hard links on Windows versions and filesystems that\n  support them is added.\n\n  Own Id: OTP-8955\n\n- The win32 virtual machine is now linked large address aware. his allows the\n  Erlang VM to use up to 3 gigs of address space on Windows instead of the\n  default of 2 gigs.\n\n  Own Id: OTP-8956","ref":"notes.html#improvements-and-new-features-89"},{"type":"extras","title":"Erts 5.8.1.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix that the documentation top index generator can handle an Ericsson internal\n  application group.\n\n  Own Id: OTP-8875\n\n- In embedded mode, on_load handlers that called `code:priv_dir/1` or other\n  functions in `code` would hang the system. Since the `crypto` application now\n  contains an on_loader handler that calls `code:priv_dir/1`, including the\n  `crypto` application in the boot file would prevent the system from starting.\n\n  Also extended the `-init_debug` option to print information about on_load\n  handlers being run to facilitate debugging.\n\n  Own Id: OTP-8902 Aux Id: seq11703","ref":"notes.html#fixed-bugs-and-malfunctions-317"},{"type":"extras","title":"Erts 5.8.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Windows 2003 and Windows XP pre SP3 would sometimes not start the Erlang R14B\n  VM at all due to a bug in the cpu topology detection. The bug affects Windows\n  only, no other platform is even remotely affected. The bug is now corrected.\n\n  Own Id: OTP-8876","ref":"notes.html#fixed-bugs-and-malfunctions-318"},{"type":"extras","title":"Erts 5.8.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Very small floating point numbers generated errors when converting from list\n  to float in some versions of the VM, this is now corrected so that i.e.\n  list_to_float(\"1.0e-324\"). returns 0.0 in all versions of Erlang.\n\n  Own Id: OTP-7178\n\n- Windows Vista and Windows 7 file system virtualization, which makes \"old\n  style\" windows programs execute in a file system sandbox, was previously\n  unintentionally turned on for the Erlang VM. This is now corrected so that\n  i.e. writes to C:\\\\Program Files\\\\. without administrator privileges will\n  fail.\n\n  Own Id: OTP-7405\n\n- Fix faulty 64-bit integer term output from drivers. Large 64-bits integers did\n  not generate correct bignums and could even cause emulator crash. Only affects\n  drivers using ERL_DRV_INT64 or ERL_DRV_UINT64, introduced in R13B03.\n\n  Own Id: OTP-8716\n\n- Fixed: inet:setopts(S, \\[\\{linger,\\{true,2\\}\\}]) returned \\{error,einval\\} for\n  SCTP sockets. The inet_drv had a bug when checking the option size.\n\n  Own Id: OTP-8726 Aux Id: seq11617\n\n- Fix libm linking with --as-needed flag\n\n  When building with \"--as-needed\" linker flags on Linux the build will fail.\n  This has now been fixed.\n\n  (Thanks to Christian Faulhammer)\n\n  Own Id: OTP-8728\n\n- gen_udp:connect/3 was broken for SCTP enabled builds. It did not detect remote\n  end errors as it should.\n\n  Own Id: OTP-8729\n\n- Reduce the risk of integer wrapping in bin vheap size counting.\n\n  The vheap size series will now use the golden ratio instead of doubling and\n  fibonacci sequences.\n\n  Own Id: OTP-8730\n\n- ETS ordered_set containing `[]` as key could cause strange thing to happen,\n  like an infinite hanging `ets:select`.\n\n  Own Id: OTP-8732\n\n- reference() has been substituted for ref() in the documentation.\n\n  Own Id: OTP-8733\n\n- When a native compiled module called a not loaded non-native compiled module\n  that had an on_load function, the export entries were trashed after code\n  loading so on the next call from the native compiled module to the non-native\n  compiled the emulator crashed. This bug has now been fixed.\n\n  Own Id: OTP-8736\n\n- HiPE-enabled Erlang VMs running on BSD systems sometimes generated messages\n  like \"Yikes\\! erts_alloc() returned misaligned address 0x8016a512c\". Fixed.\n  (Thanks to Mikael Pettersson.)\n\n  Own Id: OTP-8769\n\n- A race condition in `erts_poll()` could cause delay of poll for I/O.\n\n  Own Id: OTP-8773\n\n- Removed some potential vulnerabilities from the Erlang Port Mapper Daemon\n  (epmd) and straightened up access control. Also removed hazardous interfaces\n  allowing anyone on a machine to forcefully unregister other nodes. This means\n  that the ei_unregister/erl_unregister interfaces in erl_interface is rendered\n  not only error prone and mystifying as before, but totally ineffective. The\n  old behaviour of unchecked node unregistering can be restored if needed, see\n  epmd documentation for details.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8780\n\n- Building in a source tree without prebuilt platform independent build results\n  failed on the SSL examples when:\n\n  - cross building. This has been solved by not building the SSL examples during\n    a cross build.\n  - building on Windows.\n\n  Own Id: OTP-8791\n\n- inet:getsockopt for SCTP sctp_default_send_param had a bug to not initialize\n  required feilds causing random answers. It is now corrected.\n\n  Own Id: OTP-8795 Aux Id: seq11655\n\n- The hipe_bifs:get_hrvtime/0 BIF now always returns a real value even if the\n  \"perfctr\" Linux kernel extension is not available. It used to return a dummy\n  value. (Thanks to Mikael Pettersson.)\n\n  Own Id: OTP-8798\n\n- Calling a native-code compiled module with an `on_load` function could cause a\n  crash. (Thanks to Mikael Pettersson.)\n\n  Own Id: OTP-8799\n\n- The emulator could crash while writing a crash dump if native-compiled modules\n  had been loaded. (Thanks to Paul Guyot.)\n\n  Own Id: OTP-8801\n\n- The garbage collector could crash if invoked from native-compiled code after a\n  call to a BIF. (Thanks to Paul Guyot.)\n\n  Own Id: OTP-8821\n\n- A rare memory leak in binary:matches is removed\n\n  Own Id: OTP-8823\n\n- For a socket in the HTTP packet mode, the return value from `gen_tcp:recv/2,3`\n  if there is an error in the header will be `{ok,{http_error,String}}` instead\n  of `{error,{http_error,String}}` to be consistent with `ssl:recv/2,3`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8831","ref":"notes.html#fixed-bugs-and-malfunctions-319"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- ets:select_reverse/\\{1,2,3\\} are now documented.\n\n  Own Id: OTP-7863\n\n- External format of integers changed to make full use of all 32 bits of\n  INTEGER_EXT. This is a compatible change as old code can read full 32-bit\n  integers but only produce 28-bit integers as INTEGER_EXT.\n\n  Own Id: OTP-8540 Aux Id: seq11534\n\n- Large parts of the `ethread` library have been rewritten. The `ethread`\n  library is an Erlang runtime system internal, portable thread library used by\n  the runtime system itself.\n\n  Most notable improvement is a reader optimized rwlock implementation which\n  dramatically improve the performance of read-lock/read-unlock operations on\n  multi processor systems by avoiding ping-ponging of the rwlock cache lines.\n  The reader optimized rwlock implementation is used by miscellaneous rwlocks in\n  the runtime system that are known to be read-locked frequently, and can be\n  enabled on ETS tables by passing the\n  [\\{read_concurrency, true\\}](`m:ets#new_2_read_concurrency`) option upon table\n  creation. See the documentation of `ets:new/2` for more information. The\n  reader optimized rwlock implementation can be fine tuned when starting the\n  runtime system. For more information, see the documentation of the\n  [\\+rg](erl_cmd.md#%2Brg) command line argument of `erl`.\n\n  There is also a new implementation of rwlocks that is not optimized for\n  readers. Both implementations interleaves readers and writers during\n  contention as opposed to, e.g., the NPTL (Linux) pthread rwlock implementation\n  which use either a reader or writer preferred strategy. The reader/writer\n  preferred strategy is problematic since it starves threads doing the\n  non-preferred operation.\n\n  The new rwlock implementations in general performs better in ERTS than common\n  pthread implementations. However, in some extremely heavily contended cases\n  this is not the case. Such heavy contention can more or less only appear on\n  ETS tables. This when multiple processes do very large amounts of write locked\n  operations simultaneously on the same table. Such use of ETS is bad regardless\n  of rwlock implementation, will never scale, and is something we strongly\n  advise against.\n\n  The new rwlock implementations depend on atomic operations. If no native\n  atomic implementation is found, a fallback solution will be used. Using the\n  fallback implies a performance degradation. That is, it is more important now\n  than before to build OTP with a native atomic implementation.\n\n  The `ethread` library contains native atomic implementations for, x86 (32 and\n  64 bit), powerpc (32 bit), sparc V9 (32 and 64 bit), and tilera (32 bit). On\n  other hardware gcc's builtin support for atomic memory access will be used if\n  such exists. If no such support is found, `configure` will warn about no\n  atomic implementation available.\n\n  The `ethread` library can now also use the `libatomic_ops` library for atomic\n  memory accesses. This makes it possible for the Erlang runtime system to\n  utilize optimized native atomic operations on more platforms than before. If\n  `configure` warns about no atomic implementation available, try using the\n  `libatomic_ops` library. Use the\n  [\\--with-libatomic_ops=PATH](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp`)\n  `configure` command line argument when specifying where the `libatomic_ops`\n  installation is located. The `libatomic_ops` library can be downloaded from:\n  [http://www.hpl.hp.com/research/linux/atomic_ops/](http://www.hpl.hp.com/research/linux/atomic_ops/)\n\n  The changed API of the `ethread` library has also caused modifications in the\n  Erlang runtime system. Preparations for the to come \"delayed deallocation\"\n  feature has also been done since it depends on the `ethread` library.\n\n  _Note_: When building for x86, the `ethread` library will now use instructions\n  that first appeared on the pentium 4 processor. If you want the runtime system\n  to be compatible with older processors (back to 486) you need to pass the\n  [\\--enable-ethread-pre-pentium4-compatibility](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp`)\n  `configure` command line argument when configuring the system.\n\n  Own Id: OTP-8544\n\n- erlang:localtime_to_universaltime(\\{\\{2008, 8, 1\\}, \\{0, 0, 0\\}\\},true) when\n  TZ=UTC now behaves consistently on all Unix platforms.\n\n  The problem fixed was originally reported by Paul Guyot on erlang-bugs mailing\n  list:\n\n  http://www.erlang.org/pipermail/erlang-bugs/2008-November/001077.html\n\n  Own Id: OTP-8580\n\n- Optimization reducing memory consumption by two words per ETS object.\n\n  Own Id: OTP-8737\n\n- Fixes for unsupported halfword-emulator\n\n  Own Id: OTP-8745\n\n- NIF 64-bit integer support; `enif_get_int64`, `enif_get_uint64`,\n  `enif_make_int64`, `enif_make_uint64`.\n\n  Own Id: OTP-8746\n\n- Alignment of trailing data in messages has been adjusted. This in order to be\n  able to pass data of any type as trailing data in the future.\n\n  Own Id: OTP-8754\n\n- The obsolete/driver.h header file has been removed. It has been obsolete and\n  deprecated since R8B. Drivers that still include obsolete/driver.h must be\n  updated to include erl_driver.h.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8758\n\n- Added erlang:system_info(build_type) which makes it easier to chose drivers,\n  NIF libraries, etc based on build type of the runtime system.\n\n  The NIF library for crypto can now be built for valgrind and/or debug as\n  separate NIF libraries that will be automatically loaded if the runtime system\n  has been built with a matching build type.\n\n  Own Id: OTP-8760\n\n- Further lessened the memory requirements of ETS objects.\n\n  Own Id: OTP-8762\n\n- The broken elib_malloc alternate memory allocator has been removed.\n  `erlang:system_info(elib_malloc)` will always return `false`, and in R15,\n  `erlang:system_info(elib_malloc)` will fail with a `badarg` exception.\n\n  Own Id: OTP-8764\n\n- Calling `erlang:system_info/1` with the new argument `update_cpu_info` will\n  make the runtime system reread and update the internally stored CPU\n  information. For more information see the documentation of\n  [erlang:system_info(update_cpu_info)](`m:erlang#system_info_update_cpu_info`).\n\n  The CPU topology is now automatically detected on Windows systems with less\n  than 33 logical processors. The runtime system will now, also on Windows, by\n  default bind schedulers to logical processors using the `default_bind` bind\n  type if the amount of schedulers is at least equal to the amount of logical\n  processors configured, binding of schedulers is supported, and a CPU topology\n  is available at startup.\n\n  Own Id: OTP-8765\n\n- The SMP ERTS internal child waiter thread used on Linux system with NPTL was\n  unintentionally disabled during cross compilation rewrites (OTP-8323 in\n  R13B03). It has now been re-enabled. Enabling it again gives a slight\n  performance improvement.\n\n  Own Id: OTP-8774\n\n- `epmd` used to generate a message to the syslog when it started up, which\n  could be annoying. This has been changed to only generate the message if the\n  debug switch is given. (Thanks to Michael Santos.)\n\n  Own Id: OTP-8775\n\n- The scheduler wakeup threshold is now possible to adjust at system boot. For\n  more information see the [\\+swt](erl_cmd.md#%2Bswt) command line argument of\n  `erl`.\n\n  Own Id: OTP-8811\n\n- The undocumented function inet:ifget/2 has been improved to return interface\n  hardware address (MAC) on platforms supporting getaddrinfo() (such as BSD\n  unixes). Note it still does not work on all platforms for example not Windows\n  nor Solaris, so the function is still undocumented.\n\n  Buffer overflow and field init bugs for inet:ifget/2 and inet:getservbyname/2\n  has also been fixed.\n\n  Thanks to Michael Santos.\n\n  Own Id: OTP-8816\n\n- Optimizations for MIPS when using gcc atomics. (Thanks to Steve Vinoski)\n\n  Own Id: OTP-8834\n\n- Lock optimization in timer functionality.\n\n  Own Id: OTP-8835","ref":"notes.html#improvements-and-new-features-90"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- Fix epmd and build environment to build on VxWorks\n\n  Own Id: OTP-8838","ref":"notes.html#known-bugs-and-problems-5"},{"type":"extras","title":"Erts 5.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Driver threads, such as async threads, using\n  [port data locks](erl_driver.md#ErlDrvPDL) peeked at the port status field\n  without proper locking when looking up the driver queue.\n\n  Own Id: OTP-8475\n\n- The use of `mmap()` was unnecessarily disabled when cross compiling.\n\n  The `configure` arguments `--with-ssl`, and `--with-odbc` refused to accept\n  libraries outside of `$erl_xcomp_sysroot` when cross compiling for no good\n  reason.\n\n  The `configure` argument `--with-odbc` didn't handle the value `yes` correct.\n\n  The `configure` arguments `--with-odbc`, and `--without-odbc` have also been\n  added to the configure help.\n\n  (Thanks to Steve Vinoski for reporting these issues)\n\n  Own Id: OTP-8484\n\n- A call to the BIF [`unregister(RegName)`](`unregister/1`) when a port had the\n  name `RegName` registered in the runtime system without SMP support caused a\n  runtime system crash. (Thanks to Per Hedeland for the bugfix and test case.)\n\n  Own Id: OTP-8487\n\n- The runtime system crashed if fewer logical processors were found than\n  reported by `sysconf( SC_NPROCESSORS_CONF)`.\n\n  Own Id: OTP-8549\n\n- Fix memory management bug causing crash of non-SMP emulator with async threads\n  enabled. The bug did first appear in R13B03.\n\n  Own Id: OTP-8591 Aux Id: seq11554\n\n- Port locks could be prematurely destroyed.\n\n  Own Id: OTP-8612\n\n- The `empd` program could loop and consume 100% CPU time if an unexpected error\n  occurred in `listen()` or `accept()`. Now `epmd` will terminate if a\n  non-recoverable error occurs. (Thanks to Michael Santos.)\n\n  Own Id: OTP-8618\n\n- When kernel poll has been enabled, a livelock could in rare circumstances\n  occur. Problem reported by Chetan Ahuja, fix by Mikael Pettersson.\n\n  Own Id: OTP-8632\n\n- Windows: Closing port of program that stalled without reading all data could\n  deadlock scheduler thread.\n\n  Own Id: OTP-8641\n\n- On some combination of Montavista Linux on Cavium Octeon processors, some\n  socket-related system calls returned other numbers than -1 for errors. This\n  caused a core dump in inet_drv.c. Now the code works around this problem.\n\n  Own Id: OTP-8654\n\n- Missing memory barriers in `erts_poll()` could cause the runtime system to\n  hang indefinitely.\n\n  Own Id: OTP-8658\n\n- `ethr_rwmutex_tryrlock()` acquired and refused to acquire a lock with inverted\n  logic. The lock was however never acquired in a thread unsafe manner. (Thanks\n  to JR Zhang for noting this issue)\n\n  Own Id: OTP-8662\n\n- Extreme combinations of register/unregister in a highly parallel SMP\n  application could crash the VM. The error is corrected.\n\n  Own Id: OTP-8663\n\n- On Windows, files are now opened with FILE_SHARE_DELETE to get closer to Unix\n  semantics.\n\n  Own Id: OTP-8667\n\n- `erlang:system_info(multi_scheduling)` sometimes erroneously returned\n  `enabled` when it should have returned `blocked`.\n\n  Own Id: OTP-8675\n\n- Fix bug causing `erlang:decode_packet` and `enif_make_string` to generate\n  faulty strings with negative character values for ascii values larger\n  than 127. (Thanks to Paul Guyot)\n\n  Own Id: OTP-8685\n\n- [`open_port/2`](`open_port/2`) with the `spawn` and `spawn_executable` options\n  can include an `{env,Env}` option. In some cases unsetting variables would not\n  work on Unix (typically if more variables were unset than were actually\n  present in the environment).\n\n  Own Id: OTP-8701\n\n- A user defined CPU topology set via a call to\n  [erlang:system_flag(cpu_topology, CPUTopology)](`m:erlang#system_flag_cpu_topology`)\n  was not properly verified, and could in worst case cause an emulator crash.\n  The emulator crash could only occur when a user defined CPU topology already\n  existed and was redefined.\n\n  Own Id: OTP-8710","ref":"notes.html#fixed-bugs-and-malfunctions-320"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The grammar for match specifications in ERTS users guide only described the\n  tracing dialect of match specifications. An informal grammar for the ETS\n  dialect is added.\n\n  Own Id: OTP-8086 Aux Id: seq11333\n\n- The module binary from EEP31 (and EEP9) is implemented.\n\n  Own Id: OTP-8217\n\n- New NIF API function `enif_make_new_binary`\n\n  Own Id: OTP-8474\n\n- The guard BIF [`is_boolean/1`](`is_boolean/1`) (introduced in R10B) has now\n  been included in the lists of BIFs allowed in guards in the Reference Manual.\n\n  Own Id: OTP-8477\n\n- Added function `zip:foldl/3` to iterate over zip archives.\n\n  Added functions to create and extract escripts. See `escript:create/2` and\n  `escript:extract/2`.\n\n  The undocumented function `escript:foldl/3` has been removed. The same\n  functionality can be achieved with the more flexible functions\n  `escript:extract/2` and `zip:foldl/3`.\n\n  Record fields has been annotated with type info. Source files as been adapted\n  to fit within 80 chars and trailing whitespace has been removed.\n\n  Own Id: OTP-8521\n\n- A regular expression with many levels of parenthesis could cause a buffer\n  overflow. That has been corrected. (Thanks to Michael Santos.)\n\n  Own Id: OTP-8539\n\n- `erlang:decode_packet(httph_bin,..)` could return corrupt header strings or\n  even crash the VM. This has been fixed. It only happened on 32-bit VM if the\n  header name was unknown and between 16 and 20 characters long. Sockets with\n  simular `packet` option did not suffer from this bug.\n\n  Own Id: OTP-8548\n\n- New NIF features:\n\n  - Send messages from a NIF, or from thread created by NIF, to any local\n    process (`enif_send`)\n  - Store terms between NIF calls (`enif_alloc_env`, `enif_make_copy`)\n  - Create binary terms with user defined memory management\n    (`enif_make_resource_binary`)\n\n  And some incompatible changes made to the API. For more information see the\n  warning text in [erl_nif(3)](erl_nif.md).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8555\n\n- If the '`fop`' program (needed for building PDF files) cannot not be found, it\n  is now possible to build the HTML and man pages anyway (there will also be\n  dummy PDF files with no real content created). (Thanks to Tuncer Ayaz.)\n\n  Own Id: OTP-8559\n\n- When defining macros the closing right parenthesis before the dot is now\n  mandatory.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8562\n\n- Local and imported functions now override the auto-imported BIFs when the\n  names clash. The pre R14 behaviour was that auto-imported BIFs would override\n  local functions. To avoid that old programs change behaviour, the following\n  will generate an error:\n\n  - Doing a call without explicit module name to a local function having a name\n    clashing with the name of an auto-imported BIF that was present (and\n    auto-imported) before OTP R14A\n  - Explicitly importing a function having a name clashing with the name of an\n    autoimported BIF that was present (and autoimported) before OTP R14A\n  - Using any form of the old compiler directive `nowarn_bif_clash`\n\n  If the BIF was added or auto-imported in OTP R14A or later, overriding it with\n  an import or a local function will only result in a warning,\n\n  To resolve clashes, you can either use the explicit module name `erlang` to\n  call the BIF, or you can remove the auto-import of that specific BIF by using\n  the new compiler directive `-compile({no_auto_import,[F/A]}).`, which makes\n  all calls to the local or imported function without explicit module name pass\n  without warnings or errors.\n\n  The change makes it possible to add auto-imported BIFs without breaking or\n  silently changing old code in the future. However some current code\n  ingeniously utilizing the old behaviour or the `nowarn_bif_clash` compiler\n  directive, might need changing to be accepted by the compiler.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8579\n\n- A bug in re that could cause certain regular expression matches never to\n  terminate is corrected. (Thanks to Michael Santos and Gordon Guthrie.)\n\n  Own Id: OTP-8589\n\n- The erlang:open_port spawn and spawn_executable directives can include an\n  `{env,Env}` directive to set up environment variables for the spawned process.\n  A bug prevented applications from using `{env,Env}` to set an environment\n  variable whose value ended with a '`=`' (equal sign) character; the trailing\n  equal sign was mistaken as an indication that an environment variable was to\n  be cleared from the environment of the spawned process. (Thanks to Steve\n  Vinoski.)\n\n  Own Id: OTP-8614\n\n- `receive` statements that can only read out a newly created reference are now\n  specially optimized so that it will execute in constant time regardless of the\n  number of messages in the receive queue for the process. That optimization\n  will benefit calls to `gen_server:call()`. (See `gen:do_call/4` for an example\n  of a receive statement that will be optimized.)\n\n  Own Id: OTP-8623\n\n- The functions file:advise/4 and file:datasync/1 have been added. (Thanks to\n  Filipe David Manana.)\n\n  Own Id: OTP-8637\n\n- New NIF API functions: `enif_make_atom_len`, `enif_make_existing_atom_len`,\n  `enif_make_string_len`, `enif_get_atom_length`, `enif_get_list_length`,\n  `enif_is_list`, `enif_is_tuple` (by Tuncer Ayaz)\n\n  Own Id: OTP-8640\n\n- Support for using gcc's built-in functions for atomic memory access has been\n  added. This functionality will be used if available and no other native atomic\n  implementation in ERTS is available.\n\n  Own Id: OTP-8659\n\n- The number of spinlocks used when implementing atomic fall-backs when no\n  native atomic implementation is available has been increased from 16 to 1024.\n\n  Own Id: OTP-8660\n\n- Writer preferred pthread read/write locks has been enabled on Linux.\n\n  Own Id: OTP-8661\n\n- The runtime system will by default bind schedulers to logical processors using\n  the `default_bind` bind type if the amount of schedulers are at least equal to\n  the amount of logical processors configured, binding of schedulers is\n  supported, and a CPU topology is available at startup.\n\n  _NOTE:_ If the Erlang runtime system is the only operating system process that\n  binds threads to logical processors, this improves the performance of the\n  runtime system. However, if other operating system processes (as for example\n  another Erlang runtime system) also bind threads to logical processors, there\n  might be a performance penalty instead. If this is the case you, are are\n  advised to unbind the schedulers using the [\\+sbtu](erl_cmd.md#%2Bsbt) command\n  line argument, or by invoking\n  [erlang:system_flag(scheduler_bind_type, unbound)](`m:erlang#system_flag_scheduler_bind_type`).\n\n  Own Id: OTP-8666\n\n- The recently added BIFs erlang:min/2, erlang:max/2 and erlang:port_command/3\n  are now auto-imported (as they were originally intended to be). Due to the\n  recent compiler change (OTP-8579), the only impact on old code defining it's\n  own min/2, max/2 or port_command/3 functions will be a warning, the local\n  functions will still be used. The warning can be removed by using\n  -compile(\\{no_auto_import,\\[min/2,max/2,port_command/3]\\}). in the source\n  file.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8669 Aux Id: OTP-8579\n\n- There is a new option 'exclusive' to file:open/2 that uses the OS O_EXCL flag\n  where supported to open the file in exclusive mode.\n\n  Own Id: OTP-8670\n\n- Now, binary_to_term/2 is auto-imported. This will cause a compile warning if\n  and only if a module has got a local function with that name.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8671\n\n- Alignment of scheduler data and run queues were adjusted.\n\n  Own Id: OTP-8673\n\n- Call time breakpoint tracing\n\n  - Introduce a `call_time` option to `erlang:trace_pattern/3`.This option\n    enables call time breakpoint tracing on code that is executed by processes\n    with call tracing enabled. Call time tracing stores the number of calls and\n    the time spent of each function with this trace pattern enabled. The\n    information can be retrieved with `erlang:trace_info/2`\n  - Add a scheduler array for BpData. To solve the issue of multiple schedulers\n    constantly updating the head pointer to the bp data wheel, each scheduler\n    now has its own entrypoint to the wheel. This head pointer can be updated\n    without a locking being taken.\n\n  Teach call count tracing to use atomics\n\n  - Call count previously used a global lock for accessing and writing its\n    counter in the breakpoint. This is now changed to atomics instead.\n  - The change will let call count tracing and cprof to scale better when\n    increasing the number of schedulers.\n\n  Own Id: OTP-8677\n\n- `eprof` has been reimplemented with support in the Erlang virtual machine and\n  is now both faster (i.e. slows down the code being measured less) and scales\n  much better. In measurements we saw speed-ups compared to the old eprof\n  ranging from 6 times (for sequential code that only uses one scheduler/core)\n  up to 84 times (for parallel code that uses 8 cores).\n\n  Note: The API for the `eprof` has been cleaned up and extended. See the\n  documentation.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8706","ref":"notes.html#improvements-and-new-features-91"},{"type":"extras","title":"Erts 5.7.5.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7-5-2"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- Two bugs in gen_sctp has been corrected: getopts/setopts hence also send could\n  only be called from socket owner, and options 'linger', 'rcvbuf' and 'sndbuf'\n  was read from wrong protocol layer hence read wrong values by getopts.\n\n  Own Id: OTP-9544","ref":"notes.html#known-bugs-and-problems-6"},{"type":"extras","title":"Erts 5.7.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Driver threads, such as async threads, using\n  [port data locks](erl_driver.md#ErlDrvPDL) peeked at the port status field\n  without proper locking when looking up the driver queue.\n\n  Own Id: OTP-8475\n\n- A call to the BIF [`unregister(RegName)`](`unregister/1`) when a port had the\n  name `RegName` registered in the runtime system without SMP support caused a\n  runtime system crash. (Thanks to Per Hedeland for the bugfix and test case.)\n\n  Own Id: OTP-8487\n\n- Fix memory management bug causing crash of non-SMP emulator with async threads\n  enabled. The bug did first appear in R13B03.\n\n  Own Id: OTP-8591 Aux Id: seq11554","ref":"notes.html#fixed-bugs-and-malfunctions-321"},{"type":"extras","title":"Erts 5.7.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fix `binary_to_term` crash on compressed term with corrupt size field.\n\n  Own Id: OTP-8336\n\n- Processes and/or ports could get stuck on a blocked scheduler when\n  `erlang:system_flag(multi_scheduling, block)` was used.\n\n  Processes and/or ports could get stuck on an offline scheduler when schedulers\n  online were reduced using\n  `erlang:system_flag(schedulers_online, SchedulersOnline)`.\n\n  Own Id: OTP-8342\n\n- Building on Windows will now work if the paths to `mc.exe` and `rc.exe`\n  contain spaces. The README.win32 file has been updated with some information\n  about building using Visual Studio 2008. (Thanks to Andrew Thompson.)\n\n  Own Id: OTP-8345\n\n- EPMD now correctly handles the extra data field which can be given in the\n  ALIVE2_REQ request and retrieved in the PORT2_RESP response. (Thanks to Klas\n  Johansson.)\n\n  Own Id: OTP-8361\n\n- The configure test for reliable floating point exceptions has been update to\n  work on modern versions of Mac OS X. (Thanks to Trannie Carter.)\n\n  Own Id: OTP-8368\n\n- ERTS makefiles used to detect the use of a gcc C compiler by checking if CC\n  equaled gcc. That is, the makefiles failed to detect gcc C compilers with\n  other command line names than gcc. \\`configure' now substitute GCC into the\n  makefiles. If CC is a gcc C compiler, GCC will have the value yes. (Thanks to\n  Jean-Sébastien Pédron)\n\n  Own Id: OTP-8373\n\n- ETS bug causing the `memory` counter from `ets:info` for ordered_set's to\n  sometimes get out of synch and absurdly high.\n\n  Own Id: OTP-8377 Aux Id: seq11442\n\n- Immediately repeated multi-scheduling block/unblock cycles using\n  `erlang:system_flag(multi_scheduling, block | unblock)` could deadlock the\n  runtime system.\n\n  Own Id: OTP-8386\n\n- A number of bugs concerning re and unicode are corrected:\n\n  re:compile no longer loses unicode option, which also fixes bug in re:split.\n\n  re:replace now handles unicode charlist replacement argument\n\n  re:replace now handles unicode RE charlist argument correctly\n\n  re:replace now handles binary unicode output correctly when nothing is\n  replaced.\n\n  Most code, testcases and error isolation done by Rory Byrne.\n\n  Own Id: OTP-8394\n\n- The loading of native code was not properly atomic in the SMP emulator, which\n  could cause crashes. Also a per-MFA information table for the native code has\n  now been protected with a lock since it turns that it could be accessed\n  concurrently in the SMP emulator. (Thanks to Mikael Pettersson.)\n\n  Own Id: OTP-8397\n\n- Fix processes in exiting status that are about to be scheduled, to not be\n  allowed to garbage collect.\n\n  Own Id: OTP-8420\n\n- Removed bogus \"\\\\011\" character sequence in documentation.\n\n  Own Id: OTP-8422\n\n- The resolver routines failed to look up the own node name as hostname, if the\n  OS native resolver was erroneously configured, bug reported by Yogish Baliga,\n  now fixed.\n\n  The resolver routines now tries to parse the hostname as an IP string as most\n  OS resolvers do, unless the native resolver is used.\n\n  The DNS resolver inet_res and file resolver inet_hosts now do not read OS\n  configuration files until they are needed. Since the native resolver is\n  default, in most cases they are never needed.\n\n  The DNS resolver's automatic updating of OS configuration file data\n  (/etc/resolv.conf) now uses the 'domain' keyword as default search domain if\n  there is no 'search' keyword.\n\n  Own Id: OTP-8426 Aux Id: OTP-8381\n\n- The re module: A regular expression with an option change at the start of a\n  pattern that had top-level alternatives could cause overwriting and/or a\n  crash. (Thanks to Michael Santos.)\n\n  Own Id: OTP-8438\n\n- Harmless buffer overflow by one byte in asn1 and ram_file_drv.\n\n  Own Id: OTP-8451","ref":"notes.html#fixed-bugs-and-malfunctions-322"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Improved GC performance after BIF/NIF call when a lot of heap fragments was\n  created. This will mainly benefit NIFs that return large compound terms.\n\n  Own Id: OTP-8240\n\n- Incompatible changes in the experimental NIF feature.\n\n  - Changed the NIF function prototypes in order to allow more than 3 function\n    arguments.\n  - `enif_get_data` renamed as `enif_priv_data`.\n  - `enif_make_string` got a third argument for character encoding.\n  - The return value of `erlang:load_nif/2` on error changed.\n\n  Read more in the documentation of `erl_nif` and `erlang:load_nif/2`\n\n  .\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8304\n\n- Cross compilation improvements and other build system improvements.\n\n  Most notable:\n\n  - Lots of cross compilation improvements. The old cross compilation support\n    was more or less non-existing as well as broken. Please, note that the cross\n    compilation support should still be considered as experimental. Also note\n    that old cross compilation configurations cannot be used without\n    modifications. For more information on cross compiling Erlang/OTP see the\n    `$ERL_TOP/INSTALL-CROSS.md` file.\n  - Support for staged install using\n    [DESTDIR](http://www.gnu.org/prep/standards/html_node/DESTDIR.html). The old\n    broken `INSTALL_PREFIX` has also been fixed. For more information see the\n    `$ERL_TOP/INSTALL.md` file.\n  - Documentation of the `release` target of the top `Makefile`. For more\n    information see the `$ERL_TOP/INSTALL.md` file.\n  - `make install` now by default creates relative symbolic links instead of\n    absolute ones. For more information see the `$ERL_TOP/INSTALL.md` file.\n  - `$ERL_TOP/configure --help=recursive` now works and prints help for all\n    applications with `configure` scripts.\n  - Doing `make install`, or `make release` directly after `make all` no longer\n    triggers miscellaneous rebuilds.\n  - Existing bootstrap system is now used when doing `make install`, or\n    `make release` without a preceding `make all`.\n  - The `crypto` and `ssl` applications use the same runtime library path when\n    dynamically linking against `libssl.so` and `libcrypto.so`. The runtime\n    library search path has also been extended.\n  - The `configure` scripts of Erl_interface and ODBC now search for thread\n    libraries and thread library quirks the same way as ERTS do.\n  - The `configure` script of the `odbc` application now also looks for odbc\n    libraries in `lib64` and `lib/64` directories when building on a 64-bit\n    system.\n  - The `config.h.in` file in the `erl_interface` application is now\n    automatically generated in instead of statically updated which reduces the\n    risk of `configure` tests without any effect.\n\n  (Thanks to Henrik Riomar for suggestions and testing)\n\n  (Thanks to Winston Smith for the AVR32-Linux cross configuration and testing)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8323\n\n- NIF improvements:\n\n  - Driver API for multi-threading made available for NIFs.\n  - Support for mempory managed (garbage collected) resource objects. A way to\n    pass \"pointers\" to native data structures between C and Erlang in a safe\n    way.\n  - Support for references, floats and term comparison.\n  - Various new functions, like `enif_inspect_iolist_as_binary`,\n    `enif_make_sub_binary`, `enif_get_string`, `enif_get_atom`,\n    `enif_make_tuple_from_array`, `enif_make_list_from_array`,\n    `enif_make_existing_atom`.\n\n  Own Id: OTP-8335\n\n- Minor alignment adjustments of scheduler specific data.\n\n  Own Id: OTP-8341\n\n- The documentation is now possible to build in an open source environment after\n  a number of bugs are fixed and some features are added in the documentation\n  build process.\n\n  \\- The arity calculation is updated.\n\n  \\- The module prefix used in the function names for bif's are removed in the\n  generated links so the links will look like\n  \"http://www.erlang.org/doc/man/erlang.html#append_element-2\" instead of\n  \"http://www.erlang.org/doc/man/erlang.html#erlang:append_element-2\".\n\n  \\- Enhanced the menu positioning in the html documentation when a new page is\n  loaded.\n\n  \\- A number of corrections in the generation of man pages (thanks to Sergei\n  Golovan)\n\n  \\- The legal notice is taken from the xml book file so OTP's build process can\n  be used for non OTP applications.\n\n  Own Id: OTP-8343\n\n- There is new `erlang:binary_to_term/2` BIF that takes an option list. The\n  option `safe` can be used to prevent creation of resources that are not\n  garbage collected (such as atoms). (Thanks to Jayson Vantuyl.)\n\n  Own Id: OTP-8367\n\n- The default settings for garbage collection of binaries has been adjusted to\n  be less aggressive than in R13B03. It is now also possible configure the\n  settings for binary GC. See the documentation for `spawn_opt/2-5`,\n  `erlang:system_info/1`, `erlang:system_flag/2`, `process_flag/2-3`,\n  `erlang:trace/3`, and the documentation for `erl` for the new command line\n  options `+hms` and `+hmbs`.\n\n  Own Id: OTP-8370\n\n- A bug causing memory corruption in re:run() has been corrected. (Thanks to\n  Yamashina Hio.)\n\n  Own Id: OTP-8375\n\n- The `-Werror` option for `erlc` and the compiler option `warnings_as_errors`\n  will cause warnings to be treated as errors. (Thanks to Christopher Faulet.)\n\n  Own Id: OTP-8382\n\n- Explicit top directories in archive files are now optional.\n\n  For example, if an archive (app-vsn.ez) just contains an app-vsn/ebin/mod.beam\n  file, the file info for the app-vsn and app-vsn/ebin directories are faked\n  using the file info from the archive file as origin. The virtual directories\n  can also be listed. For short, the top directories are virtual if they does\n  not exist.\n\n  Own Id: OTP-8387\n\n- An unnecessary lock operation in os:timestamp/0 has been eliminated, making it\n  slightly more efficient. (Thanks to Jonas Falkevik and Tuncer Ayaz.)\n\n  Own Id: OTP-8390\n\n- There is a new `+t` emulator option for changing the maximum number of atoms.\n  (Thanks to Julien Barbot.)\n\n  Own Id: OTP-8405\n\n- Fixed numerous compiler warnings generated by gcc 4.4.1 and tile-cc\n  2.0.1.78377 when compiling the runtime system.\n\n  Own Id: OTP-8412\n\n- `configure` learned the option `--enable-m32-build` to force the building of a\n  32-bit run-time on systems where the default C compiler generates 64-bit\n  executables by default.\n\n  Own Id: OTP-8415\n\n- HiPE now works in the 64-bit emulator on Mac OS X. (Thanks to Geoff Cant.)\n\n  Own Id: OTP-8416\n\n- Improved handling of symbolic links to escripts\n\n  Own Id: OTP-8417\n\n- Add lock profiling tool.\n\n  The Lock profiling tool, lcnt, can make use of the internal lock statistics\n  when the runtime system is built with this feature enabled.\n\n  This provides a mechanism to examine potential lock bottlenecks within the\n  runtime itself.\n\n  \\- Add erts_debug:lock_counters(\\{copy_save, bool()\\}). This option enables or\n  disables statistics saving for destroyed processes and ets-tables. Enabling\n  this might consume a lot of memory.\n\n  \\- Add id-numbering for lock classes which is otherwise undefined.\n\n  Own Id: OTP-8424\n\n- Removed spurious options to the emulator from escript.\n\n  Own Id: OTP-8427\n\n- Minor documentation fixes. Mainly anchor adjustments.\n\n  Own Id: OTP-8457","ref":"notes.html#improvements-and-new-features-92"},{"type":"extras","title":"Erts 5.7.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- An insufficient stack allocation was made when reading CPU information on BSD\n  operating systems. (Thanks Michael Turner and Akira Kitada)\n\n  Own Id: OTP-8207\n\n- A bug when supplying an argument without a dash directly after the program\n  name when starting erlang could prevent distribution to start. This is now\n  corrected.\n\n  Own Id: OTP-8209\n\n- A ticker process could potentially be blocked indefinitely trying to send a\n  tick to a node not responding. If this happened, the connection would not be\n  brought down as it should.\n\n  Own Id: OTP-8218\n\n- Using certain firewalls (i.e. MS IAS Client and certain versions of COMODO)\n  could expose an undocumented behaviour in the Win32 socket interface causing\n  the name resolution calls to hang infinitely. This is now worked around by\n  adding possibilities for port programs under Windows to use overlapped I/O on\n  their standard input/output file handles.\n\n  Own Id: OTP-8230\n\n- Fixed bug on ETS tables with `write_concurrency`. The emulator could crash\n  when doing a `select` or `match` with a bound key without finding any object.\n\n  Own Id: OTP-8242\n\n- The `information-request` / `information-response`, and\n  `group-leader-change-request` / `group-leader-changed-response` signal pairs\n  described below did not always adhere to the signal order guarantees of\n  Erlang's signal model in the runtime system with SMP support. These signals\n  could for example sometimes pass exit signals.\n\n  The following BIFs behaviors can be modeled as if an asynchronous\n  `information-request` signal is sent to `Pid`. If `Pid` is alive, it responds\n  with an asynchronous `information-response` signal; otherwise, the runtime\n  system responds with a `no-such-process` signal. When the response is\n  received, the caller transforms it into the result of the BIF.\n\n  - [`is_process_alive(Pid)`](`is_process_alive/1`)\n  - `erlang:process_display(Pid, Type)`\n  - [`process_info(Pid)`](`process_info/1`)\n  - [`process_info(Pid, ItemSpec)`](`process_info/2`)\n\n  When `Pid` resides on the same node as the caller of\n  [`group_leader(GroupLeader, Pid)`](`group_leader/2`), the\n  [`group_leader/2`](`group_leader/2`) BIFs behavior can be modeled as if an\n  asynchronous `group-leader-change-request` signal is sent to `Pid`. If `Pid`\n  is alive, it responds with an asynchronous `group-leader-changed-response`\n  signal; otherwise, the runtime system responds with a `no-such-process`\n  signal. When the response is received, the caller transforms it into the\n  result of the BIF. The distributed case which only consists of an asynchronous\n  `group-leader-change-request` signal and no response is not effected.\n\n  Own Id: OTP-8245\n\n- Errors in the `system_profile` documentation has been corrected.\n\n  Own Id: OTP-8257\n\n- Low watermark socket option modified high watermark instead of low watermark\n  in the inet_driver. (Thanks to Feng Yu and Tuncer Ayaz)\n\n  Own Id: OTP-8279\n\n- A race condition could cause the runtime system with SMP support to end up in\n  a completely unresponsive state.\n\n  Own Id: OTP-8297","ref":"notes.html#fixed-bugs-and-malfunctions-323"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The use of `pthread_cond_timedwait()` have been completely removed from the\n  runtime system. This since its behavior is unpredictable when the system clock\n  is suddenly changed. The previous use of it was harmless.\n\n  Own Id: OTP-8193\n\n- The documentation is now built with open source tools (xsltproc and fop) that\n  exists on most platforms. One visible change is that the frames are removed.\n\n  Own Id: OTP-8201\n\n- A new garbage collecting strategy for binaries which is more aggressive than\n  the previous implementation. Binaries now has a virtual binary heap tied to\n  each process. When binaries are created or received to a process it will check\n  if the heap limit has been reached and if a reclaim should be done. This\n  imitates the behavior of ordinary Erlang terms. The virtual heaps are grown\n  and shrunk like ordinary heaps. This will lessen the memory footprint of\n  binaries in a system.\n\n  Own Id: OTP-8202\n\n- The `ErlDrvTermData` term types used by `driver_output_term()` and\n  `driver_send_term()` have been extended with the term types `ERL_DRV_INT64`,\n  and `ERL_DRV_UINT64` for passing 64-bit integers. Also the 64-bit integer data\n  types `ErlDrvSInt64` and `ErlDrvUInt64` have been introduced.\n\n  For more information see the [erl_driver(3)](erl_driver.md) documentation.\n\n  Own Id: OTP-8205\n\n- \\[escript] The restriction that the first line in escripts must begin with\n  `#!` has been removed.\n\n  \\[escript] Some command line options to the escript executable has now been\n  documented. For example you can run an escript in the debugger by just adding\n  a command line option.\n\n  \\[escript] The documentation of the escript header syntax has been clarified.\n  For example the header is optional. This means that it is possible to directly\n  \"execute\" `.erl`, `.beam` and`.zip` files.\n\n  Own Id: OTP-8215\n\n- The instruction for building OTP on Windows was outdated and incomplete, the\n  document is updated.\n\n  Also the otp_build script required windows drives to show up in Cygwin using\n  the /cygdrive prefix. That requirement is now removed.\n\n  Own Id: OTP-8219\n\n- A module can have native implemented functions (NIFs) that are dynamically\n  loaded by calling `erlang:load_nif/2`. This is an experimental feature that is\n  not yet intended for production systems. It is released with intention to get\n  some early feedback on the interfaces before they are carved in stone.\n\n  Own Id: OTP-8220\n\n- The [`float/1`](`float/1`) BIF would always force a garbage collection. The\n  BIFs [`size/1`](`size/1`), [`byte_size/1`](`byte_size/1`),\n  [`bit_size/1`](`bit_size/1`), [`abs/1`](`abs/1`), and [`round/1`](`round/1`)\n  would force a garbage-collection if the result was not a sufficiently small\n  integer.\n\n  Own Id: OTP-8221\n\n- The `erlang:port_command/3` BIF has been added. `erlang:port_command/3` is\n  currently not auto imported, but it is planned to be auto imported in OTP R14.\n  For more information see the `m:erlang` documentation.\n\n  Own Id: OTP-8225\n\n- '`configure --enable-darwin-64bit`' would fail if Snow Leopard had been booted\n  with the 64-bit kernel. (Thanks to Ryan M. Graham.)\n\n  Own Id: OTP-8236","ref":"notes.html#improvements-and-new-features-93"},{"type":"extras","title":"Erts 5.7.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- On Windows, open_port(\\{spawn,Command\\},Opts) could not run executables with\n  spaces in the path or filename, regardless of quoting efforts. While\n  open_port(\\{spawn_executable,Exec\\},Opts) can run any executable, it was still\n  impossible to use 'spawn' to do the same thing. This is now corrected.\n\n  Own Id: OTP-8055\n\n- The scheduler bind type `processor_spread` spread schedulers too much on large\n  NUMA systems.\n\n  The new scheduler bind type `spread` spreads schedulers as much as possible,\n  and behaves as `processor_spread` previously did. For more information see the\n  documentation of the `+sbt` command line argument in the [erl](erl_cmd.md)\n  documentation, and the documentation of\n  `erlang:system_flag(scheduler_bind_type, SchedulerBindType)`.\n\n  Own Id: OTP-8063\n\n- Automatically detected CPU topology on Linux system could erroneously contain\n  logical processors with `-1` as identifiers. This happened when\n  `sysconf(_SC_NPROCESSORS_CONF)` returned a value larger than the amount of\n  logical processors found.\n\n  Own Id: OTP-8064\n\n- When the minimal term [] (end of list) was sent as the complete message to a\n  process on another node, and received there, it could not be decoded. This bug\n  is now corrected. Fortunately [] is uncommon as the complete message in real\n  applications but it is a serious bug anyway.\n\n  Own Id: OTP-8092\n\n- A bug when the floating point exception pointer was not initialized has been\n  corrected. It manifested itself on CentOS 5.1 sometimes when a floating point\n  value was sent to a remote node. Bug reported and patch suggested by David\n  Reiss, confirmed by Mikael Pettersson.\n\n  Some build problems on IRIX was also corrected. Problem reported by Patrick\n  Baggett, patch by Mikael Pettersson.\n\n  Own Id: OTP-8095\n\n- A terminating process could erroneously unregister a name for another process.\n  This could occur under the following conditions: The name of the terminating\n  process was unregistered and then registered for another process\n  simultaneously as the process that first had the name was terminating.\n\n  Own Id: OTP-8099 Aux Id: seq11344\n\n- Running erlc in a very deep directory (with a path length of more 256 or more\n  characters) would cause the emulator to crash in a call to\n  [`list_to_atom/1`](`list_to_atom/1`). (Thanks to Chris Newcombe.)\n\n  Own Id: OTP-8124\n\n- A deadlock of the runtime system could occur when unregistering the name of a\n  port.\n\n  Own Id: OTP-8145\n\n- `Makefile.in` has been updated to use the LDFLAGS environment variable (if\n  set). (Thanks to Davide Pesavento.)\n\n  Own Id: OTP-8157\n\n- The pthread rwlock implementation on Linux could cause starvation of writers.\n  We, therefore, now use our own rwlock implementation on Linux.\n\n  Own Id: OTP-8158\n\n- Open source Erlang builds are updated to work well on Snow Leopard (MacOS X\n  10.6)\n\n  Own Id: OTP-8168\n\n- A call to `erlang:system_info(schedulers_online)` could end up in an infinite\n  loop. This happened if the amount of schedulers was larger than one, the\n  amount of schedulers online was one, and someone was blocking\n  multi-scheduling.\n\n  Own Id: OTP-8169\n\n- An error in erlang:system_profile/2 could cause timestamped messages to arrive\n  out of order in the SMP case. This has now been fixed.\n\n  Own Id: OTP-8171\n\n- [`binary_to_atom/2`](`binary_to_atom/2`) and\n  [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`) would leak memory\n  if the binary contained unaligned data.\n\n  Own Id: OTP-8192\n\n- The async thread pool in the runtime system without SMP support used a memory\n  allocator that was not thread safe for async jobs.\n\n  Own Id: OTP-8194","ref":"notes.html#fixed-bugs-and-malfunctions-324"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Processor internal NUMA nodes are now supported in the ERTS internal CPU\n  topology representation. For more information see the documentation of the\n  `+sct` command line argument in the [erl](erl_cmd.md) documentation, and the\n  documentation of `erlang:system_info(cpu_topology)`.\n\n  Own Id: OTP-8041\n\n- Documentation for ets improved about concurrency.\n\n  Own Id: OTP-8050\n\n- Emulator flags in an escript were earlier inherited to emulators started from\n  the emulator running the escript. For example when an escript invoked\n  `os:cmd(\"erl\")`, the new emulator were given erroneous emulator flags. This\n  bug has now been fixed\n\n  Escript filenames may now contain dots.\n\n  Own Id: OTP-8060\n\n- Made some BIFs non-recursive (relational operators,hash and phash) to limit\n  internal stack usage.\n\n  Own Id: OTP-8065\n\n- Fixed Windows specific bug in erl_prim_loader. Now it handles the root\n  directory (e.g. c:/) better. This bug affected the directory listing in the\n  debugger.\n\n  Own Id: OTP-8080\n\n- A TCP socket with option `{packet,4}` could crash the emulator if it received\n  a packet header with a very large size value (>2Gb). The same bug caused\n  `erlang:decode_packet/3` to return faulty values. (Thanks to Georgos Seganos.)\n\n  Own Id: OTP-8102\n\n- The maximum size of the export table has been raised from 65536 to 524288\n  entries.\n\n  Own Id: OTP-8104 Aux Id: seq11345\n\n- The file module has now a read_line/1 function similar to the io:get_line/2,\n  but with byte oriented semantics. The function file:read_line/1 works for raw\n  files as well, but for good performance it is recommended to use it together\n  with the 'read_ahead' option for raw file access.\n\n  Own Id: OTP-8108\n\n- Fixed bug causing emulator crash when reading a term in external format\n  containing a corrupt list with a negative length.\n\n  Own Id: OTP-8117\n\n- New emulator flag `+sss`, to set stack size of scheduler threads.\n\n  Own Id: OTP-8119\n\n- The Windows utility Erlsrv, run in interactive mode now accepts options for\n  registering internal service name and description field of Windows registry\n  database.\n\n  Own Id: OTP-8132\n\n- `erlang:demonitor(Mon, [flush])` has been optimized. Previously it always\n  searched the message queue of the caller for a `'DOWN'` message. Current\n  implementation only search the message queue when necessary. It is quite\n  common that the search is not necessary.\n\n  A new option `info` has been added to `erlang:demonitor/2`. For more\n  information see the `m:erlang` documentation.\n\n  Own Id: OTP-8143\n\n- I/O tasks could unnecessarily be rescheduled. This was harmless, but not\n  useful work.\n\n  Own Id: OTP-8148\n\n- Minor improvements of `erlang:memory/[1,2]`.\n\n  Own Id: OTP-8152\n\n- New configuration option to enable use of shared zlib.\n\n  Own Id: OTP-8155\n\n- Fixed smp bug in ETS that could cause emulator crash when table with more than\n  1000 objects accessed by several processes, including calls to variants of\n  `select` or `match` combined with concurrent object deletion.\n\n  Own Id: OTP-8166 Aux Id: seq11392\n\n- The code path interpretation is now more relaxed. The flag -code_path_choice\n  now defaults to relaxed instead of strict. See the documentation of code and\n  init for more info.\n\n  Own Id: OTP-8170\n\n- Load balancing of run queues and check for I/O are triggered more often than\n  before in situations where processes are scheduled often but are doing very\n  little work each time they execute.\n\n  Own Id: OTP-8172\n\n- Call tracing binary comprehensions would cause an emulator crash. (Thanks to\n  Paul Mineiro.)\n\n  Own Id: OTP-8179\n\n- [`binary_to_term/1`](`binary_to_term/1`) would crash the emulator instead of\n  generating a `badarg` exception when given certain invalid terms. (Thanks to\n  Scott Lystig Fritchie.)\n\n  Own Id: OTP-8180","ref":"notes.html#improvements-and-new-features-94"},{"type":"extras","title":"Erts 5.7.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Crash dumps should now cause less problems for the crashdump_viewer\n  application. (For processes where arity was non-zero, the arguments are now\n  longer printed - they used to be printed in a format that was not parseable.)\n\n  Own Id: OTP-7472 Aux Id: seq11019, 11292\n\n- Processes could potentially get stuck on an offline scheduler.\n\n  Own Id: OTP-7990\n\n- [`binary_to_atom/2`](`binary_to_atom/2`) and\n  [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`) could leak memory\n  if they caused a `badarg` exception.\n\n  Own Id: OTP-7997\n\n- A process could under very rare circumstances erroneously be resumed.\n\n  Own Id: OTP-8000\n\n- Load balancing between schedulers could under rare circumstances cause an\n  emulator crash.\n\n  Own Id: OTP-8008\n\n- `erlang:memory(processes_used)` always returned `0` instead of the correct\n  value. (Thanks to Geoff Cant)\n\n  Own Id: OTP-8022","ref":"notes.html#fixed-bugs-and-malfunctions-325"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Major improvements of the Erlang distribution for Erlang runtime systems with\n  SMP support. Previously distribution port locks were heavily contended, and\n  all encoding and decoding for a specific distribution channel had to be done\n  in sequence. Lock contention due to the distribution is now negligible and\n  both encoding and decoding of Erlang messages can be done in parallel.\n\n  The old atom cache protocol used by the Erlang distribution has been dropped\n  since it effectively prevented all parallel encoding and decoding of messages\n  passed over the same distribution channel.\n\n  A new atom cache protocol has been introduced which isolates atom cache\n  accesses and makes parallel encoding and decoding of messages passed over the\n  same distribution channel possible. The new atom cache protocol also use an\n  atom cache size 8 times larger than before. The new atom cache protocol is\n  documented in the ERTS users guide.\n\n  Erlang messages received via the distribution are now decoded by the receiving\n  Erlang processes without holding any distribution channel specific locks.\n  Erlang messages and signals sent over the distribution are as before encoded\n  by the sending Erlang process, but now without holding any distribution\n  channel specific locks during the encoding. That is, both encoding and\n  decoding can be and are done in parallel regardless of distribution channel\n  used.\n\n  The part that cannot be parallelized is the atom cache updates. Atom cache\n  updates are therefore now scheduled on the distribution port. Since it is only\n  one entity per distribution channel doing this work there is no lock\n  contention due to the atom cache updates.\n\n  The new runtime system does not understand the old atom cache protocol. New\n  and old runtime systems can however still communicate, but no atom cache will\n  be used.\n\n  Own Id: OTP-7774\n\n- Fixed a bug that caused error logging from `driver_select` sometimes with\n  additional symptoms such as failing IP communications or even an emulator\n  crash.\n\n  Own Id: OTP-7898 Aux Id: seq11304\n\n- Improved SMP concurrency for ETS tables. Several mutating operations can now\n  be performed truly concurrent on different records of the same table. To\n  support this, the table has to be created with option `write_concurrency`, as\n  it is achieved at the expense of some execution and memory overhead.\n  `ets:select` and `select_count` has also been improved for all tables to not\n  acquire exclusive table lock during the iteration.\n\n  Own Id: OTP-7922\n\n- erl (that is erl.exe and dyn_erl) and erlexec has been made more dynamic so no\n  hard coded paths needs to added at installation time to erl (that is erl.ini\n  and erl). Reltool will make use of this in a future release.\n\n  Own Id: OTP-7952\n\n- Added functionality to get higher resolution timestamp from system. The\n  erlang:now function returns a timestamp that's not always consistent with the\n  actual operating system time (due to resilience against large time changes in\n  the operating system). The function os:timestamp/0 is added to get a similar\n  timestamp as the one being returned by erlang:now, but untouched by Erlangs\n  time correcting and smoothing algorithms. The timestamp returned by\n  os:timestamp is always consistent with the operating systems view of time,\n  like the calendar functions for getting wall clock time, but with higher\n  resolution. Example of usage can be found in the os manual page.\n\n  Own Id: OTP-7971\n\n- Two new options are added to open_port - spawn_executable which runs external\n  executables in a controlled way, and spawn_driver which only opens port to\n  loaded Erlang drivers. See the erlang manual page for details.\n\n  Own Id: OTP-7995\n\n- New functionality in ETS to transfer the ownership of a table. A table can\n  either change owner be declaring an \"heir\", another process that will inherit\n  the table if the owner terminates. A table can also change owner by calling a\n  new function `ets:give_away`.\n\n  Own Id: OTP-8006\n\n- Updates to Tilera build environment.\n\n  Own Id: OTP-8009\n\n- A stack trace was unnecessarily saved during process termination.\n\n  Own Id: OTP-8014\n\n- User defined CPU topology and scheduler bind type can now be set from the\n  command line when starting an emulator. For more information see the\n  documentation of the `+sct`, and the `+sbt` emulator flags in the\n  [erl](erl_cmd.md) documentation.\n\n  The CPU topologies returned from `erlang:system_info/1` and\n  `erlang:system_flag/2` now always contain the `processor` level, also when not\n  strictly necessary.\n\n  Own Id: OTP-8030\n\n- Various fixes in ETS: `ets:first` could return a deleted key in a fixated\n  table. `ets:lookup` could return objects out of order if a deleted object was\n  re-inserted into a fixed bag. `ets:delete_object` could fail to delete\n  duplicate objects in a duplicate_bag.\n\n  Own Id: OTP-8040","ref":"notes.html#improvements-and-new-features-95"},{"type":"extras","title":"Erts 5.7.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a bug on Windows that could make `gen_tcp:send` hang trying to send an\n  iolist of more than 16 binaries.\n\n  Own Id: OTP-7816\n\n- The runtime system could under rare circumstances crash during load balancing.\n\n  Own Id: OTP-7908 Aux Id: otp-7500\n\n- `run_erl` uses fallback if Unix98 pseudo-terminal is not present on host.\n\n  Own Id: OTP-7916 Aux Id: seq11249\n\n- A message buffer memory leak in the runtime system without smp support has\n  been fixed.\n\n  Own Id: OTP-7941\n\n- Attempting to append a binary of 16Mb or greater to another binary using the\n  bit syntax would cause a `system_limit` exception. There was also several\n  cases when constructing binaries when a `badarg` exception was generated when\n  it should have been `system_limit`.\n\n  Own Id: OTP-7942\n\n- The runtime system with SMP support failed to terminate the caller of\n  [`link(RemotePid)`](`link/1`) properly, if `RemotePid` was the pid of a\n  process on an unreachable node. The calling process was in this case marked as\n  exiting, but never terminated.\n\n  Own Id: OTP-7946","ref":"notes.html#fixed-bugs-and-malfunctions-326"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Rudimentary support for cross compiling is added to the source release. The\n  support is still in its infancy and has only been used to cross compile on\n  Linux for a different cpu architecture and a different Linux version, but\n  should be extendible to support other platforms as well. The cross\n  configuration files with examples are placed in $ERL_TOP/xcomp/. View\n  README.xcomp and run $ERL_TOP/otp_build -help for further information.\n\n  Own Id: OTP-7854\n\n- The escape sequence `\\{` which was given a new interpretation in R13A has\n  retained its old meaning (the ASCII code for `{`), which means that codes\n  greater than 255 have to be stated using hexadecimal characters (for example,\n  `\\x{AAA}`). The escape sequence `\\xH` where H is a hexadecimal character\n  followed by something else but a hexadecimal character is no longer valid\n  (incompatibility with R13A). Character codes less than 256 can be stated using\n  two hexadecimal characters (for example, `\\x0D`).\n\n  Own Id: OTP-7891 Aux Id: OTP-7855\n\n- The [`term_to_binary/1`](`term_to_binary/1`) BIF used to be implemented with\n  recursive C code, which could cause the Erlang emulator to terminate because\n  of a stack overflow.\n\n  Also fixed some minor issues in [`term_to_binary/1`](`term_to_binary/1`) and\n  [`binary_to_term/1`](`binary_to_term/1`) pointed out by Matthew Dempsky.\n\n  Own Id: OTP-7894\n\n- Several glitches and performance issues in the Unicode and I/O-system\n  implementation of R13A have been corrected.\n\n  Own Id: OTP-7896 Aux Id: OTP-7648 OTP-7887\n\n- Minor documentation improvements of the `scheduler_bind_type` argument of\n  `erlang:system_flag/2`, and the `scheduler_bind_type`, and the\n  `scheduler_bindings` arguments of `erlang:system_info/1`.\n\n  Own Id: OTP-7901 Aux Id: OTP-7777\n\n- There is a new BIF `erlang:make_tuple/3`.\n\n  Own Id: OTP-7913","ref":"notes.html#improvements-and-new-features-96"},{"type":"extras","title":"Erts 5.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- _OpenSource:_\n\n  FreeBSD leap-seconds are handled according to patch submitted by OpenSource\n  user Kenji Rikitake. No test case covers this functionality (unsupported\n  platform).\n\n  Own Id: OTP-7609\n\n- A corrected bug in ETS for `bag` and `duplicate_bag`. A `delete/2` or\n  `lookup_element/3` could miss objects in a fixed table if one or more objects\n  with the same key had already been deleted.\n\n  Own Id: OTP-7665\n\n- A new driver call-back `stop_select` is introduced to allow drivers to\n  de-select and then close a file descriptor in a safe way in a SMP emulator.\n  The old way was not strictly according to posix standard and could in some\n  rare cases lead to unexpected behavior. A new flag `ERL_DRV_USE` can be passed\n  to `driver_select()` to tell it that the descriptor should be closed.\n  `stop_select` is then called when it is safe to do so. Old drivers will\n  however still work as before.\n\n  Own Id: OTP-7670\n\n- A bug fixed for TCP sockets with option `{packet,http}`. An HTTP request with\n  an absolute URI was returned with a corrupt path string. This bug did only\n  exist in R12B-4 and R12B-5.\n\n  Own Id: OTP-7682 Aux Id: OTP-7647\n\n- run_erl did in some cases fail to extract control sequences from to_erl (like:\n  winsize=X,Y) and did instead send them to be interpreted by the erlang shell.\n\n  Own Id: OTP-7688\n\n- A bug in the installer on Windows not updating file associations properly is\n  now corrected.\n\n  Own Id: OTP-7746\n\n- More space than necessary could be allocated in binaries when appending to a\n  binary (also in a binary comprehension) and the data appended did not consist\n  of wholes bytes (e.g. 13 bits).\n\n  Own Id: OTP-7747\n\n- The gen_sctp option sctp_peer_addr_params,\n  #sctp_paddrparams\\{address=\\{IP,Port\\} was erroneously decoded in the inet\n  driver. This bug has now been corrected.\n\n  Own Id: OTP-7755\n\n- Outstanding async driver jobs leaked memory if the issuing port died before\n  the async jobs completed.\n\n  Own Id: OTP-7784\n\n- A bug in the dynamic library loading affecting, among others, OpenSolaris is\n  now corrected. (Thanks to Paul Fisher.)\n\n  Own Id: OTP-7796\n\n- run_erl compile errors fixed for FreeBSD\n\n  Own Id: OTP-7817\n\n- A bug in the inet driver for SCTP on Solaris showing for e.g gen_sctp:abort/1\n  and gen_sctp:eof/1 has been corrected. Patch suggestion by Simon Cornish.\n\n  Own Id: OTP-7866","ref":"notes.html#fixed-bugs-and-malfunctions-327"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The order of objects visited in select for ordered_set is now documented.\n\n  Own Id: OTP-7339\n\n- The runtime system with SMP support now uses multiple, scheduler specific run\n  queues, instead of one globally shared run queue.\n\n  The lock protecting the shared run queue was heavily contended, and the shared\n  run queue also caused Erlang processes to randomly migrate between schedulers\n  with negative cache effects as a result.\n\n  With the current scheduler specific run queue solution, lock contention due to\n  run queue protection has been reduced, and Erlang processes are only migrated\n  when needed to balance the load between the schedulers. The reduced amount of\n  migration also reduce lock contention on locks protecting the scheduler\n  specific instances of the erts internal memory allocators.\n\n  The scheduler specific run queues are also a necessity for a lot of future\n  planned NUMA (Non-Uniform Memory Access) specific optimizations.\n\n  Own Id: OTP-7500\n\n- Support for Unicode is implemented as described in EEP10. Formatting and\n  reading of unicode data both from terminals and files is supported by the io\n  and io_lib modules. Files can be opened in modes with automatic translation to\n  and from different unicode formats. The module 'unicode' contains functions\n  for conversion between external and internal unicode formats and the re module\n  has support for unicode data. There is also language syntax for specifying\n  string and character data beyond the ISO-latin-1 range.\n\n  The interactive shell will support input and output of unicode characters when\n  the terminal and operating system supports it.\n\n  Please see the EEP and the io/io_lib manual pages as well as the stdlib users\n  guide for details.\n\n  _I/O-protocol incompatibilities:_\n\n  The io_protocol between io_Server and client is updated to handle protocol\n  data in unicode formats. The updated protocol is now documented. The\n  specification resides in the stdlib _users manual_, which is a new part of the\n  manual.\n\n  _io module incompatibilities:_\n\n  The io:put_chars, io:get_chars and io:get_line all handle and return unicode\n  data. In the case where binaries can be provided (as to io:put_chars), they\n  shall be encoded in UTF-8. When binaries are returned (as by\n  io:get_line/get_chars when the io_server is set in _binary mode_) the returned\n  data is also _always_ encoded as UTF-8. The file module however still returns\n  byte-oriented data, why file:read can be used instead of io:get_chars to read\n  binary data in ISO-latin-1.\n\n  _io_lib module incompatibilities:_\n\n  io_lib:format can, given new format directives (i.e \"~ts\" and \"~tc\"), return\n  lists containing integers larger than 255.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7648 Aux Id: OTP-7580 OTP-7514 OTP-7494 OTP-7443 OTP-7181 EEP10\n  EEP11\n\n- The format of the string returned by `erlang:system_info(system_version)` (as\n  well as the first message when Erlang is started) has changed. The string now\n  contains the both the OTP version number as well as the erts version number.\n\n  Own Id: OTP-7649\n\n- Message passing has been further optimized for parallel execution. Serial\n  message passing is slightly more expensive than before, but parallel send to a\n  common receiver is much cheaper.\n\n  Own Id: OTP-7659\n\n- Lock contention on the atom table lock when decoding Erlang terms on the\n  external format has been drastically reduced.\n\n  Own Id: OTP-7660\n\n- The undocumented, unsupported, and deprecated guard BIF `is_constant/1` has\n  been removed.\n\n  \\*** INCOMPATIBILITY with R12B \\***\n\n  Own Id: OTP-7673\n\n- The Erlang process lock implementation has been improved by Mat Hostetter at\n  Tilera Corporation.\n\n  Own Id: OTP-7692\n\n- A `{nodedown, Node}` message passed by the `net_kernel:monitor_nodes/X`\n  functionality is now guaranteed to be sent after `Node` has been removed from\n  the result returned by `erlang:nodes/Y`.\n\n  Own Id: OTP-7725\n\n- The short-circuit operators `andalso` and `orelse` no longer guarantees that\n  their second argument is either `true` or `false`. As a consequence,\n  `andalso`/`orelse` are now tail-recursive.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7748\n\n- A new BIF, `lists:keyfind/3`, has been added. It works like\n  `lists:keysearch/3` except that it does not wrap the returned tuple in a\n  `value` tuple in case of success. (Thanks to James Hague for suggesting this\n  function.)\n\n  Own Id: OTP-7752\n\n- Optimization for drivers by creating small binaries direct on process heap.\n\n  Own Id: OTP-7762\n\n- `I bsl N` could cause the Erlang virtual machine to run of memory instead\n  generating a `system_limit` if N was absurdly huge. (Thanks to Daniel\n  Hedlund.)\n\n  There would always be a garbage collection when evaluating `I bsl N` or\n  `I bsr N` if `I` was a bignum.\n\n  If `I` is an integer and `N` a bignum, `I bsl N` will now cause the correct\n  `system_limit` exception instead of `bad_arith` as in earlier releases.\n\n  If `I` is an integer and `N` a bignum, `I bsr N` will return either 0 or -1\n  depending on the sign of `I` instead of causing a `bad_arith` exception as in\n  earlier releases.\n\n  Own Id: OTP-7764\n\n- Scheduler threads can now be bound to logical processors on newer Linux and\n  Solaris systems. More systems will be supported in the future.\n\n  In some cases performance has increased drastically when binding schedulers.\n  Schedulers are not bound by default, though. This since it might cause a\n  performance degradation if multiple programs have bound to processors, e.g.\n  multiple Erlang runtime systems. For more information see the documentation of\n  `erlang:system_flag/2`.\n\n  In order to bind scheduler threads the CPU topology need to be known. On some\n  newer Linux and Solaris systems the runtime system automatically detects the\n  CPU topology. If the emulator isn't able to automatically detect the CPU\n  topology, the CPU topology can be defined. For more information see the\n  documentation of `erlang:system_flag/2`.\n\n  Own Id: OTP-7777\n\n- The compiler will refuse to a compile file where the module name in the file\n  differs from the output file name.\n\n  When compiling using `erlc`, the current working directory will no be included\n  in the code path (unless explicitly added using \"-pa .\").\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7793\n\n- The BIFs [`atom_to_binary/2`](`atom_to_binary/2`),\n  [`binary_to_atom/2`](`binary_to_atom/2`), and\n  [`binary_to_existing_atom/2`](`binary_to_existing_atom/2`) have been added.\n\n  Own Id: OTP-7804\n\n- The amount of schedulers online can now be changed during operation. The\n  amount of schedulers online defaults to the same amount as available logical\n  processors. For more information see the documentation of\n  `erlang:system_flag/2` and `erl`.\n\n  Own Id: OTP-7811\n\n- The deprecated functions `erlang:fault/1`, `erlang:fault/2`, and\n  `file:rawopen/2` have been removed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7812\n\n- Erts internal dynamically allocated process and port specific data for rarely\n  used data. This is used to reduce memory usage of processes and ports that do\n  not use specific functionality. More functionality will be moved to process\n  and port specific data in future releases.\n\n  Own Id: OTP-7818\n\n- New packet type `http_bin` for gen_tcp sockets and `erlang:decode_packet`. It\n  works like `http` except that strings are returned as binaries instead of\n  lists.\n\n  Own Id: OTP-7821\n\n- The obsolete wd_keeper program for embedded Solaris systems has been removed.\n\n  Own Id: OTP-7822\n\n- Nodes belonging to different independent clusters can now co-exist on the same\n  host with the help of a new environment variable setting ERL_EPMD_PORT.\n\n  Own Id: OTP-7826\n\n- There are new functions `erlang:min/2` and `erlang:max/2` to calculate the\n  minimum and maximum of two terms, respectively. Note that the functions are\n  not auto-imported, so they need to be imported explicitly or the `erlang`\n  prefix must be used when calling them.\n\n  Own Id: OTP-7841\n\n- The copyright notices have been updated.\n\n  Own Id: OTP-7851\n\n- Enhanced build environment for cross compilation to Tilera Tile architecture.\n\n  Support for native ethread atomics on Tilera Tile64/TilePro (Thanks to Tilera\n  Corporation).\n\n  Own Id: OTP-7852\n\n- The escape sequences `\\x` and `\\{` have been assigned new interpretations\n  (they used to return the ASCII code for `x` and `{` respectively). One or more\n  octal characters inside curly brackets after a leading backslash is from now\n  on an alternative to the existing syntax `\\NNN`, but can also be used for\n  codes greater than 255. In a similar fashion, one or more hexadecimal\n  characters can be put inside curly brackets after a leading `\\x`. Furthermore,\n  the escape sequences `\\xH` and `\\xHH`, where N is a hexadecimal character, can\n  be used for codes less than 256.\n\n  NOTE: These new escape sequences are still considered experimental and may be\n  changed in the R13B release.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7855\n\n- The PCRE library's exported function names are now prefixed with erts\\_ in the\n  erlang emulator to avoid clashes with dynamically loaded drivers.\n\n  Own Id: OTP-7861\n\n- A runtime system with SMP support will now be built by default on most\n  platforms if a usable posix thread library or native windows threads are\n  found.\n\n  For more information see the top README file.\n\n  Own Id: OTP-7872","ref":"notes.html#improvements-and-new-features-97"},{"type":"extras","title":"Erts 5.6.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A corrected bug in ETS for `bag` and `duplicate_bag`. A `delete/2` or\n  `lookup_element/3` could miss objects in a fixed table if one or more objects\n  with the same key had already been deleted.\n\n  Own Id: OTP-7665\n\n- A bug fixed for TCP sockets with option `{packet,http}`. An HTTP request with\n  an absolute URI was returned with a corrupt path string. This bug did only\n  exist in R12B-4 and R12B-5.\n\n  Own Id: OTP-7682 Aux Id: OTP-7647\n\n- Calling `gen_tcp:send()` from several processes on socket with option\n  `send_timeout` could lead to much longer timeout than specified. The solution\n  is a new socket option `{send_timeout_close,true}` that will do automatic\n  close on timeout. Subsequent calls to send will then immediately fail due to\n  the closed connection.\n\n  Own Id: OTP-7731 Aux Id: seq11161\n\n- A process being garbage collected via the\n  [`garbage_collect/1`](`garbage_collect/1`) BIF or the\n  [`check_process_code/2`](`check_process_code/2`) BIF didn't handle message\n  receive and resume correctly during the garbage collect. When this occurred,\n  the process returned to the state it had before the garbage collect instead of\n  entering the new state.\n\n  Own Id: OTP-7738","ref":"notes.html#fixed-bugs-and-malfunctions-328"},{"type":"extras","title":"Erts 5.6.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug in inet_drv concerning gen_tcp:connect has been corrected. A connect\n  towards a non-open port through open firewalls could sometimes erroneously be\n  successful. Any subsequent operation would fail, though.\n\n  Own Id: OTP-6542\n\n- Floating point arithmetic in drivers could cause a runtime system crash and/or\n  unexpected results on runtime systems with floating point exceptions enabled.\n  Floating point exceptions are disabled unless explicitly enabled or if hipe is\n  enabled.\n\n  Own Id: OTP-7237\n\n- A bug when many sockets got signalled simultaneously causing the emulator to\n  panic with the message \"Inconsistent, why isn't io reported?\" is now\n  corrected.\n\n  Own Id: OTP-7420\n\n- Starting erl with option \"-detached\" now disconnects correctly from terminal\n  session on Unix.\n\n  Own Id: OTP-7461\n\n- Mended gdb etp-commands for ETS access.\n\n  Own Id: OTP-7538\n\n- `erlang:decode_packet/3` allows white space between HTTP header tag and colon\n  according to RFC2616.\n\n  Own Id: OTP-7543\n\n- An emulator compiled for SCTP now starts even if the dynamic libraries are not\n  present. The SCTP driver is then of course not loaded.\n\n  Own Id: OTP-7551\n\n- To build on Mac OS X, 10.3.0 or later is now required because of fixes for two\n  problems:\n\n  There would be a resource leak when `erl_ddl` attempted to unload a driver.\n  This problem has been corrected by using `dlopen()` (which works on all modern\n  Unix-like platforms) instead of the Mac OS X specific API calls.\n\n  Signal handling in the run-time system for HiPE has been updated to work on\n  later versions of Mac OS X than 10.2.x. Therefore, `--enable-hipe` now works\n  on Mac OS X with Intel CPUs.\n\n  Thanks to Geoff Cant for the patches.\n\n  Own Id: OTP-7562\n\n- Corrected some information about the protocol between EPMD and Erlang nodes.\n  (Thanks to Michael Regen.)\n\n  Own Id: OTP-7594\n\n- When using `erlang:system_monitor(Pid,{long_gc,Time})`, and the GC time\n  exceeded 1 second, it sometimes erroneously showed up as about 4300 seconds.\n  (This bug was corrected in R9C, but re-introduced in R12B.) (Thanks to Chris\n  Newcombe.)\n\n  Own Id: OTP-7622 Aux Id: OTP-4903, seq8379","ref":"notes.html#fixed-bugs-and-malfunctions-329"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The driver entry of a dynamically loaded driver is now copied when loaded\n  which enables some internal optimizations. Note that drivers that modify the\n  driver entry during execution will not work anymore. Such a miss-use of the\n  driver interface is however not supported.\n\n  Own Id: OTP-6900\n\n- The split function is now added to the re library. Exceptions and errors from\n  both run, replace and split are made more consistent.\n\n  Own Id: OTP-7514 Aux Id: OTP-7494\n\n- Fixed harmless compiler warnings when building the emulator and minor build\n  changes in order to avoid unnecessary rebuilds.\n\n  Own Id: OTP-7530\n\n- There is now experimental support for loading of code from archive files. See\n  the documentation of `code`, `init`, `erl_prim_loader `and `escript` for more\n  info.\n\n  The error handling of `escripts` has been improved.\n\n  An `escript` may now set explicit arguments to the emulator, such as\n  `-smp enabled`.\n\n  An `escript` may now contain a precompiled beam file.\n\n  An `escript` may now contain an archive file containing one or more\n  applications (experimental).\n\n  The internal module `code_aux` has been removed.\n\n  Own Id: OTP-7548 Aux Id: otp-6622\n\n- The reallocation functionality part of the ERTS internal memory allocators,\n  now consider current block in combination with surrounding free blocks as an\n  alternative location for a reallocation.\n\n  Own Id: OTP-7555\n\n- There could remain false references from a process to a module that has been\n  called earlier, so that the process would be killed if the module was\n  reloaded. (Thanks to Richard Carlsson.)\n\n  Also, the fix for this bug also made it possible to make stack backtraces (as\n  returned from `erlang:get_stacktrace/0` and other functions) more correct in\n  that the immediate caller is always included in the stack backtrace (it could\n  sometimes be missing).\n\n  Own Id: OTP-7559\n\n- Improved locking in IO-handling for better smp performance.\n\n  Own Id: OTP-7560\n\n- Improved BIF rescheduling functionality.\n\n  Own Id: OTP-7587\n\n- Loading a module compiled with Erlang/OTP R9C and calling `module_info/0` in\n  the module would crash the emulator. The emulator now refuses to load any\n  module compiled with R9C or earlier. (Note: only trivial modules compiled with\n  R10B or earlier could be loaded anyway.) (Thanks to Martin Kjellin.)\n\n  Own Id: OTP-7590","ref":"notes.html#improvements-and-new-features-98"},{"type":"extras","title":"Erts 5.6.4.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-4-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A process calling one of the following BIFs could under very rare conditions\n  deadlock in the runtime system with SMP support:\n  [`check_process_code/2`](`check_process_code/2`),\n  [`garbage_collect/1`](`garbage_collect/1`), `process_info/[1,2]`,\n  `system_flag/2`, and `erlang:suspend_process/[1,2]`.\n\n  Own Id: OTP-7582\n\n- A couple of statistics variables were not managed in a thread safe manner in\n  the runtime system with SMP support.\n\n  Own Id: OTP-7583\n\n- An extremely rare race condition when terminating a process could potentially\n  cause a runtime system crash.\n\n  Own Id: OTP-7584\n\n- Under certain conditions and when using run_erl/to_erl, the terminal Erlang\n  driver (ttsl_drv) could crash the emulator by doing a division by zero due to\n  incorrect handling of terminals reporting a zero width. For terminals\n  reporting zero width, the driver now fallbacks to a default width of 80 and a\n  default height of 24 (vt100), as a fallback behaviour. This fixes the crashes\n  and also makes output on \"dumb\" terminals much more readable.\n\n  Own Id: OTP-7592 Aux Id: seq11073","ref":"notes.html#fixed-bugs-and-malfunctions-330"},{"type":"extras","title":"Erts 5.6.4.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-4-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- A new `erts_alloc` parameter `+M rmbcmt` (relative multiblock carrier move\n  threshold) has been added. It determines when to force a moving realloc in a\n  multiblock carrier when a block is shrunk. For more information see the\n  `erts_alloc(3)` documentation.\n\n  Own Id: OTP-7540\n\n- The new option `+d` can be given to `erl` to suppress the crash dump\n  generation if an internal error is detected. As a result, a more useful core\n  dump is produced.\n\n  Own Id: OTP-7578 Aux Id: seq11052","ref":"notes.html#improvements-and-new-features-99"},{"type":"extras","title":"Erts 5.6.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Double backslashes in format string passed to the erts internal printf\n  implementation produced erroneous results. No such format strings were passed\n  to the erts internal printf implementation, i.e., the bug was therefore\n  completely harmless. (Thanks to Perry Smith.)\n\n  Own Id: OTP-7408\n\n- Large files are now handled on Windows, where the filesystem supports it.\n\n  Own Id: OTP-7410\n\n- Bug fixed for `{packet,http}` when space follows http headers.\n\n  Own Id: OTP-7458\n\n- The trace option `running` could cause an emulator crash if the current\n  function couldn't be determined.\n\n  Own Id: OTP-7484\n\n- Using 16#ffffFFFF as a timeout value in receive...after would often cause a\n  timeout almost at once due to an 32-bit integer overflow. (Thanks to Serge\n  Aleynikov and Matthias Lang.)\n\n  Own Id: OTP-7493\n\n- For the process that an escript runs in, the `trap_exit` process flag is now\n  `false` instead of `true` (as in previous releases). Scripts that depend on\n  the previous (counter-intuitive) behaviour might not work. (Thanks to Bengt\n  Kleberg.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7517\n\n- A bug in the `string:to_integer/1` builtin made the emulator unstable. This is\n  now corrected. (Thanks to Lev Walkin.)\n\n  Own Id: OTP-7526","ref":"notes.html#fixed-bugs-and-malfunctions-331"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Performance for ETS intensive applications should now be better in the SMP\n  emulator. Also, ETS table identifiers (as returned by `ets:new/2`) are now\n  spread out in wider range than before (using 28 bits in a 32-bit emulator) to\n  make sure that the table identifier for a deleted table will not be quickly\n  re-used.\n\n  NOTE: Table identifiers can now be negative integers. Programs that\n  (incorrectly) assume that table identifiers can only be positive integers\n  might stop to work. (The type of a table identifier is intentionally not\n  documented, and may change in a future release.)\n\n  Own Id: OTP-7348\n\n- New BIF `erlang:decode_packet/3` that extracts a protocol packet from a\n  binary. Similar to the socket option `{packet, Type}`. Also documented the\n  socket packet type `http` and made it official. _NOTE_: The tuple format for\n  `http` packets sent from an active socket has been changed in an incompatible\n  way.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7404\n\n- The source code for the documentation for some applications (erts, kernel,\n  stdlib, and several others) are now included in the source tar ball. There is\n  currently no Makefile support for building HTML files from the source (such\n  support will be included in a future release).\n\n  Own Id: OTP-7406\n\n- A lot of frequently accessed memory counters (erts internal) have been\n  removed. This since they hurt performance on the runtime system with SMP\n  support. As a result `erlang:memory/[0,1]` will only deliver a result if all\n  `erts_alloc(3)` allocators are enabled (default). The result delivered when\n  all `erts_alloc(3)` allocators are enabled are both more accurate and less\n  accurate than before. More memory than before are included in the result, but\n  the different parts that are summed are not gathered atomically. A call to\n  `erlang:memory/[0,1]` is much cheaper for the system than before. This since\n  the information isn't gathered atomically anymore which was very expensive.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7468\n\n- Pre-allocators used for, for example, timers, and messages have been rewritten\n  to be scheduler specific. That is, different schedulers will now allocate from\n  different pools which reduces lock contention.\n\n  Own Id: OTP-7470\n\n- On Mac OS X, file:sync/1 now guarantees that all filesystem buffers are\n  written to the disk by using the fcntl() with F_FULLFSYNC option. Previously,\n  file:sync/1 called fsync(), which only guaranteed that the data had been\n  transferred to the disk drive. (Thanks to Jan Lehnardt.)\n\n  Own Id: OTP-7471\n\n- Termination of a process that takes a long time can now be preempted, i.e.,\n  the terminating process will be rescheduled for later continuation of\n  termination so that other processes can execute. Termination of a process that\n  owns many and/or large ets tables typically takes a long time.\n\n  Own Id: OTP-7477\n\n- A new trace option `exiting` has been added. The `exiting` trace is similar to\n  the `running` trace, but for exiting processes. For more information see the\n  erlang(3) documentation.\n\n  The `erlang:trace/3` bif now doesn't block other scheduler threads if only one\n  tracee is specified in the call to `erlang:trace/3`.\n\n  Own Id: OTP-7481\n\n- The re module is extended with repetitive matches (global option) and\n  replacement function.\n\n  Own Id: OTP-7494 Aux Id: OTP-7181\n\n- In the section about binary construction, the reference manual now mentions\n  what happens when an integer value does not fit into an integer segment of\n  size N (namely, that the N least significant bits will be put into the binary\n  and that the most significant bits will be silently discarded). (Thanks to\n  Edwin Fine.)\n\n  Own Id: OTP-7506\n\n- Setting the `{active,once}` for a socket (using inets:setopts/2) is now\n  specially optimized (because the `{active,once}` option is typically used much\n  more frequently than other options).\n\n  Own Id: OTP-7520","ref":"notes.html#improvements-and-new-features-100"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- Floating point arithmetic in drivers can cause a runtime system crash and/or\n  unexpected results on runtime systems with floating point exceptions enabled.\n  Floating point exceptions are disabled unless explicitly enabled or if hipe is\n  enabled.\n\n  Own Id: OTP-7237","ref":"notes.html#known-bugs-and-problems-7"},{"type":"extras","title":"Erts 5.6.3.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-3-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Binary construction with an integer field of size 0 at the end of the\n  constructed binary (and the size given in a variable), would cause a write of\n  one byte outside the memory reserved for the binary, which in turn could cause\n  an emulator crash.\n\n  Own Id: OTP-7422\n\n- A race condition in the dynamic driver implementation could cause an emulator\n  crash. (Thanks to Paul Fisher)\n\n  Own Id: OTP-7464\n\n- Calls to `erlang:system_info(allocated_areas)` could cause the runtime system\n  with SMP support to crash.\n\n  Own Id: OTP-7474\n\n- The `env` option to `open_port()` could cause the runtime system with SMP\n  support to crash.\n\n  Own Id: OTP-7475","ref":"notes.html#fixed-bugs-and-malfunctions-332"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Operations that needed to block other threads in the runtime system with SMP\n  support unnecessarily waited for async threads to block. Most important the\n  `erlang:memory/[0,1]` bif, code loading, and the `erlang:trace/3` bif.\n\n  Own Id: OTP-7480","ref":"notes.html#improvements-and-new-features-101"},{"type":"extras","title":"Erts 5.6.3.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Calls to `erlang:memory/[0,1]` could cause the runtime system with SMP support\n  to crash.\n\n  Own Id: OTP-7415","ref":"notes.html#fixed-bugs-and-malfunctions-333"},{"type":"extras","title":"Erts 5.6.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Doing local call trace on bit syntax matching code that has been optimized\n  with delayed sub-binary creation could crash the emulator.\n\n  Own Id: OTP-7399 Aux Id: seq10978","ref":"notes.html#fixed-bugs-and-malfunctions-334"},{"type":"extras","title":"Erts 5.6.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Only one to_erl process at a time is allowed to connect to the same run_erl\n  pipe. Prevents buggy behaviour when IO from several to_erl's get interleaved.\n\n  Own Id: OTP-5107\n\n- IPv6 name resolving has now been fixed to use getaddrinfo() patch (thoroughly\n  reworked) courtesy of Love Hörnquist-Åstrand submitted by Fredrik Thulin. It\n  also can use gethostname2() patch (also reworked) courtesy of Mikael Magnusson\n  for debian submitted by Sergei Golovan.\n\n  Own Id: OTP-5382\n\n- Improved error handling in run_erl\n\n  Own Id: OTP-7252\n\n- A permanent fix for the deadlock issue temporarily fixed by OTP-7260.\n\n  - **OTP-7260** - The runtime system with SMP support could under rare\n    circumstances deadlock when a distribution channel was taken down while\n    multiple simultaneous operations were performed on it.\n\n  Own Id: OTP-7267 Aux Id: OTP-7260\n\n- ./configure has been improved to find 64-bit OpenSSL libraries.\n\n  Own Id: OTP-7270\n\n- A terminating process could under very rare circumstances trigger a bug which\n  could crash the runtime system with SMP support.\n\n  Own Id: OTP-7272\n\n- SCTP_ADDR_CONFIRMED events are now handled by gen_sctp.\n\n  Own Id: OTP-7276\n\n- binary_to_term/1 would crash the emulator if the binary data contained an\n  external fun with non-atom module and/or function. Corrected to generate a\n  badarg exception.\n\n  Own Id: OTP-7281\n\n- On Mac OS 10.5 (Leopard), sending to socket which the other end closes could\n  cause the emulator to consume 100% CPU time. (Thanks to Matthias Radestock.)\n\n  Own Id: OTP-7289\n\n- The vanilla driver used on Windows could crash the emulator and sometimes\n  produced corrupt files. The vanilla driver is the driver that is used when one\n  only pass a filename as first argument to [`open_port/2`](`open_port/2`).\n  _NOTE_: This use of [`open_port/2`](`open_port/2`) is _obsolete_, and the\n  documentation of this use has previously been removed. The functionality is\n  only present for backward compatibility reasons and _will_ eventually be\n  removed.\n\n  Own Id: OTP-7301\n\n- Faulty matching in binaries larger than 512Mb on 64bit machines fixed.(On\n  32bit, the size limit for binaries is still 512Mb). Thanks to Edwin Fine and\n  Per Gustafsson for finding fault and fix.\n\n  Own Id: OTP-7309\n\n- crypto:start() on Windows caused emulator to hang on error popup window if\n  openssl DLL was not found. Windows error popups now suppressed.\n\n  Own Id: OTP-7325\n\n- Configuration option `without-termcap` can be used to disable the use of\n  termcap libraries for terminal cursor control in the shell.\n\n  Own Id: OTP-7338\n\n- to_erl reports its terminal window size to run_erl in order to get output\n  formatted accordingly\n\n  Own Id: OTP-7342\n\n- On Solaris, the `compressed` option for file operations did not work if the\n  file descriptor happened to be greater than 255 (a problem with fopen() and\n  friends in Solaris itself).\n\n  Own Id: OTP-7343 Aux Id: seq10949\n\n- A race condition in the runtime system with SMP support causing an erroneous\n  removal of a newly created ets table has been fixed.\n\n  The race occurred when a process removed a table during termination\n  simultaneously as another process removed the same table via `ets:delete/1`\n  and a third process created a table that accidentally got the same internal\n  table index as the table being removed.\n\n  Own Id: OTP-7349\n\n- `zlib:inflate` failed when the size of the inflated data was an exact multiple\n  of the internal buffer size (4000 bytes by default).\n\n  Own Id: OTP-7359\n\n- If the total number of allowed atoms is exceeded, there will now be a\n  controlled termination of the emulator with a crash dump file. The emulator\n  used to simply crash. (Thanks Howard Yeh and Thomas Lindgren.)\n\n  Own Id: OTP-7372\n\n- The break handler in werl on Windows could cause the emulator to hang or\n  crash, that is now corrected.\n\n  Own Id: OTP-7394 Aux Id: seq10969\n\n- The configure script now tests for an serious optimization bug in gcc-4.3.0.\n  If the bug is present, the configure script will abort (if this happens, the\n  only way to build Erlang/OTP is to change to another version of gcc). (Thanks\n  to Mikael Pettersson.)\n\n  Own Id: OTP-7397","ref":"notes.html#fixed-bugs-and-malfunctions-335"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- On Unix, the emulator now notices when the width of the terminal has changed.\n  (Thanks to Matthew Dempsky and Patrick Mahoney.)\n\n  Own Id: OTP-7290\n\n- There is a new function `init:stop/1` which can be used to shutdown the system\n  cleanly AND generate a non-zero exit status or crash dump. (Thanks to Magnus\n  Froberg.)\n\n  Own Id: OTP-7308\n\n- process_info(Pid, garbage_collection) now returns more information\n\n  Own Id: OTP-7311\n\n- The `hide` option for [`open_port/2`](`open_port/2`) is now documented.\n  (Thanks to Richard Carlsson.)\n\n  Own Id: OTP-7358","ref":"notes.html#improvements-and-new-features-102"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- Floating point arithmetic in drivers can cause a runtime system crash on\n  runtime systems with floating point exceptions enabled. Floating point\n  exceptions are disabled unless explicitly enabled or if hipe is enabled.\n\n  Own Id: OTP-7237","ref":"notes.html#known-bugs-and-problems-8"},{"type":"extras","title":"Erts 5.6.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The maximum length of an atom of 255 characters is now strictly enforced.\n  [`binary_to_term/1`](`binary_to_term/1`) will now fail with a badarg if an\n  encoded term contains an atom longer than 255 characters. Atoms created by\n  drivers will now be truncated to 255 characters if necessary. (Thanks to\n  Matthew Dempsky.)\n\n  Own Id: OTP-7147\n\n- A bug in \"bignum handling\" on some 64bit architectures could cause rem and div\n  operations on large numbers to hang indefinitely. Rem operations involving the\n  smallest negative number representable in 28 bits or 60 bits could also cause\n  access violation and emulator crash. Both errors are corrected.\n\n  Own Id: OTP-7177\n\n- When doing the initial garbage collection after waking a hibernated process, a\n  fullsweep garbage collection was unnecessarily triggered.\n\n  Own Id: OTP-7212\n\n- The beta testing module `gen_sctp` now supports active mode as stated in the\n  documentation. Active mode is still rather untested, and there are some issues\n  about what should be the right semantics for `gen_sctp:connect/5`. In\n  particular: should it be blocking or non-blocking or choosable. There is a\n  high probability it will change semantics in a (near) future patch.\n\n  Try it, give comments and send in bug reports\\!\n\n  Own Id: OTP-7225\n\n- Invalid arguments to `ets:update_counter/3` were not handled correctly. A\n  tuple position (`Pos`) less than 1 caused the element directly following the\n  key to be updated (as if no position at all had been specified). All invalid\n  values for `Pos` will now fail with `badarg`.\n\n  Own Id: OTP-7226\n\n- The runtime system with SMP support could under rare circumstances deadlock\n  when a distribution channel was taken down while multiple simultaneous\n  operations were performed on it.\n\n  Own Id: OTP-7260","ref":"notes.html#fixed-bugs-and-malfunctions-336"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- More checksum/hash algorithms from the zlib library are now available as built\n  in functions (like md5 hashes has been for a long time).\n\n  Own Id: OTP-7128\n\n- Minor improvements in the garbage collector.\n\n  Own Id: OTP-7139 Aux Id: OTP-7132\n\n- The switch \"-detached\" to the windows werl program now can create an erlang\n  virtual machine without any main window and without a temporary console\n  showing.\n\n  Own Id: OTP-7142\n\n- `erlang:system_info/1` now accepts the `logical_processors`, and\n  `debug_compiled` arguments. For more info see the, `m:erlang` documentation.\n\n  The scale factor returned by `test_server:timetrap_scale_factor/0` is now also\n  effected if the emulator uses a larger amount of scheduler threads than the\n  amount of logical processors on the system.\n\n  Own Id: OTP-7175\n\n- A new BIF ets:update_element/3. To update individual elements within an\n  ets-tuple, without having to read, update and write back the entire tuple.\n\n  Own Id: OTP-7200\n\n- A process executing the `processes/0` BIF can now be preempted by other\n  processes during its execution. This in order to disturb the rest of the\n  system as little as possible. The returned result is, of course, still a\n  consistent snapshot of existing processes at a time during the call to\n  `processes/0`.\n\n  The documentation of the `processes/0` BIF and the\n  [`is_process_alive/1`](`is_process_alive/1`) BIF have been updated in order to\n  clarify the difference between an existing process and a process that is\n  alive.\n\n  Own Id: OTP-7213","ref":"notes.html#improvements-and-new-features-103"},{"type":"extras","title":"Erts 5.6.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Not enough parameters were passed when sending an error report in\n  erl_check_io.c (Thanks to Matthew Dempsky).\n\n  Own Id: OTP-7176\n\n- In rare circumstances, complex binary matching code could cause the emulator\n  to crash or not match when it should. (Thanks to Rory Byrne.)\n\n  Own Id: OTP-7198","ref":"notes.html#fixed-bugs-and-malfunctions-337"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The `{allocator_sizes, Alloc}` and `alloc_util_allocators` arguments are now\n  accepted by `erlang:system_info/1`. For more information see the `m:erlang`\n  documentation.\n\n  Own Id: OTP-7167\n\n- The finishing reallocation of the heap block when hibernating a process is now\n  always moving the heap block since it drastically reduces memory fragmentation\n  when hibernating large amounts of processes.\n\n  Own Id: OTP-7187","ref":"notes.html#improvements-and-new-features-104"},{"type":"extras","title":"Erts 5.6.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The SMP emulator on sparc64 erroneously used the sparc32 atomic and the\n  sparc32 spinlock implementations which caused it to crash.\n\n  Own Id: OTP-7006\n\n- Call tracing the new guard BIFs `byte_size`, `bit_size`, or `tuple_size` and\n  the loading a module that uses one of those functions, could cause the\n  emulator to terminate.\n\n  Own Id: OTP-7008\n\n- configuring --enable-darwin-universal or --enable-darwin-64bit on MacOSX could\n  result in a non optimized emulator. Top level configure script now corrected.\n\n  Own Id: OTP-7014\n\n- configuring --with-gd did not produce correct include flags for percept.\n\n  Own Id: OTP-7015\n\n- Environment variables weren't handled in thread safe manner in the runtime\n  system with SMP support on Windows.\n\n  `erl_drv_putenv()`, and `erl_drv_getenv()` has been introduced for use in\n  drivers. Do _not_ use putenv(), or getenv() directly in drivers. For more\n  information see the `erl_driver` documentation.\n\n  Own Id: OTP-7035\n\n- HIPE: Corrected the choice of interface to the send/3 and setnode/3 BIFs for\n  native-compiled code. Using the incorrect interface could, in unusual\n  circumstances, lead to random runtime errors.\n\n  Own Id: OTP-7067\n\n- Garbage collections could become extremely slow when there were many keys in\n  the process dictionary. (Thanks to Fredrik Svahn.)\n\n  Own Id: OTP-7068\n\n- The duplicate documentation directory in the windows installation is removed.\n\n  Own Id: OTP-7070\n\n- Documentation bugfixes and clarifications.\n\n  (Thanks to Joern (opendev@gmail.com), Matthias Lang, and Richard Carlsson.)\n\n  Own Id: OTP-7079\n\n- The runtime system with SMP support _not_ using the native atomic integer\n  implementation part of OTP could deadlock when run on a system with more than\n  one logical processor. That is, only the runtime system with SMP support on\n  _other_ hardware platforms than x86, x86_64, sparc32, and powerpc32 were\n  effected by this bug.\n\n  Own Id: OTP-7080\n\n- The break handling code (run when Ctrl-C is hit) could could potentially\n  deadlock the runtime system with SMP support.\n\n  Own Id: OTP-7104\n\n- The sctp driver has been updated to work against newer lksctp packages e.g\n  1.0.7 that uses the API spelling change adaption -> adaptation. Older lksctp\n  (1.0.6) still work. The erlang API in gen_sctp.erl and inet_sctp.hrl now\n  spells 'adaptation' regardless of the underlying C API.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7120\n\n- A bug in `erlang:phash2/1` on 64-bit platforms has been fixed. (Thanks to\n  Scott Lystig Fritchie.)\n\n  Own Id: OTP-7127\n\n- The emulator could under rare circumstances crash while garbage collecting.\n\n  Own Id: OTP-7132","ref":"notes.html#fixed-bugs-and-malfunctions-338"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The documentation has been updated so as to reflect the last updates of the\n  Erlang shell as well as the minor modifications of the control sequence `p` of\n  the `io_lib` module.\n\n  Superfluous empty lines have been removed from code examples and from Erlang\n  shell examples.\n\n  Own Id: OTP-6944 Aux Id: OTP-6554, OTP-6911\n\n- Bit syntax construction with a small integer in a non-byte aligned field wider\n  than the CPU's word size could cause garbage bits in the beginning of the\n  field.\n\n  Own Id: OTP-7085\n\n- All Windows versions older than Windows 2000 are now _not supported_ by the\n  Erlang runtime system. This since there was a need for usage of features\n  introduced in Windows 2000.\n\n  Own Id: OTP-7086\n\n- Memory management improvements especially for the runtime system with SMP\n  support:\n\n  - The runtime system with SMP support can now use multiple, thread specific\n    instances of most memory allocators. This improves performance since it\n    reduces lock contention in the memory allocators. It may however increase\n    memory usage for some applications. The runtime system with SMP support will\n    by default enable this feature on most allocators. The amount of instances\n    used can be configured.\n  - `driver_alloc()`, `driver_realloc()`, and `driver_free()` now use their own\n    erts specific memory allocator instead of the default `malloc()`\n    implementation on the system.\n  - The default configuration of some allocators have been changed to fit\n    applications that use much memory better.\n  - Some new `erts_alloc` configuration parameters have been added.\n  - `erts_alloc_config` has been modified to be able to create configurations\n    suitable for multiple instances of allocators.\n  - The returned value from `erlang:system_info({allocator, Alloc})` has been\n    changed. This since an allocator may now run in multiple instances.\n\n  If you for some reason want the memory allocators to be configured as before,\n  you can pass the `+Mea r11b` command-line argument to `erl`.\n\n  For more information see the `erts_alloc(3)`, the `m:erts_alloc_config`, and\n  the `m:erlang` documentation.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7100\n\n- On Unix, denormalized floating point numbers could not be created using\n  [`list_to_float/1`](`list_to_float/1`) or\n  [`binary_to_term/1`](`binary_to_term/1`). (Thanks to Matthew Dempsky.)\n\n  Own Id: OTP-7122\n\n- Native atomic integers and spin-locks are now also available for the runtime\n  system with SMP support on sparc64.\n\n  Own Id: OTP-7130\n\n- FP exceptions support for sparc64 userspace on Linux has been added. Note that\n  FP exception support is now turned off by default, so to actually enable it\n  you need to do '`./configure --enable-fp-exceptions`'.\n\n  Own Id: OTP-7131","ref":"notes.html#improvements-and-new-features-105"},{"type":"extras","title":"Erts 5.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug for raw files when reading 0 bytes returning 'eof' instead of empty data\n  has been corrected.\n\n  Own Id: OTP-6291 Aux Id: OTP-6967\n\n- All exported functions in gzio.c have now been renamed to avoid conflict with\n  drivers that are indirectly linked with an external zlib library.\n\n  Own Id: OTP-6816 Aux Id: OTP-6591\n\n- On the 64-bit Erlang emulator, bit syntax construction with integers\n  containing more than 60 bits (\"big numbers\") into fields with more than 60\n  bits could produce incorrect results.\n\n  Own Id: OTP-6833\n\n- When the runtime system failed to allocate memory for binaries, it could dead\n  lock while writing the `erl_crash.dump`.\n\n  Own Id: OTP-6848\n\n- The runtime system with SMP support could deadlock if a process called the\n  `erlang:suspend_process(Pid)` BIF or the `erlang:garbage_collect(Pid)` BIF\n  while the process identified by `Pid` was currently running and the process\n  calling the BIFs was terminated during the call to the BIFs.\n\n  Processes suspending each other via the `erlang:suspend_process/1` BIF or\n  garbage collecting each other via the `erlang:garbage_collect/1` BIF could\n  deadlock each other when the runtime system with SMP support was used.\n\n  Own Id: OTP-6920\n\n- `dbg` could leave traced processes in a suspended state if the tracer process\n  was killed with exit reason `kill`.\n\n  `erlang:suspend_process/2` has been introduced which accepts an option list as\n  second argument. For more information see the `m:erlang` documentation.\n\n  Processes suspended via `erlang:suspend_process/[1,2]` will now be\n  automatically resumed if the process that called\n  `erlang:suspend_process/[1,2]` terminates.\n\n  Processes could previously be suspended by one process and resumed by another\n  unless someone was tracing the suspendee. This is _not_ possible anymore. The\n  process resuming a process _has_ to be the one that suspended it.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6946\n\n- file:write_file/3, file:write/2 and file:read/2 could crash (contrary to\n  documentation) for odd enough file system problems, e.g write to full file\n  system. This bug has now been corrected.\n\n  In this process the file module has been rewritten to produce better error\n  codes. Posix error codes now originate from the OS file system calls or are\n  generated only for very similar causes (for example 'enomem' is generated if a\n  memory allocation fails, and 'einval' is generated if the file handle in\n  Erlang is a file handle but currently invalid).\n\n  More Erlang-ish error codes are now generated. For example `{error,badarg}` is\n  now returned from `file:close/1` if the argument is not of a file handle type.\n  See file(3).\n\n  The possibility to write a single byte using `file:write/2` instead of a list\n  or binary of one byte, contradictory to the documentation, has been removed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6967 Aux Id: OTP-6597 OTP-6291\n\n- Monitor messages produced by the system monitor functionality, and garbage\n  collect trace messages could contain erroneous heap and/or stack sizes when\n  the actual heaps and/or stacks were huge.\n\n  As of erts version 5.6 the `large_heap` option to\n  `erlang:system_monitor/[1,2]` has been modified. The monitor message is sent\n  if the sum of the sizes of all memory blocks allocated for all heap\n  generations is equal to or larger than the specified size. Previously the\n  monitor message was sent if the memory block allocated for the youngest\n  generation was equal to or larger than the specified size.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6974 Aux Id: seq10796\n\n- `inet:getopts/2` returned random values on Windows Vista.\n\n  Own Id: OTP-7003","ref":"notes.html#fixed-bugs-and-malfunctions-339"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The emulator internal process lock implementation has been rewritten and\n  optimized. A slight risk of starvation existed in the previous implementation.\n  This risk has also been eliminated in the new implementation.\n\n  Own Id: OTP-6500\n\n- Bitstrings (bit-level) binaries and binary comprehensions are now part of the\n  language. See the Reference Manual.\n\n  Own Id: OTP-6558\n\n- The windows version of erlang now has SMP support. The SMP emulator is run by\n  default on machines which shows more than one virtual or physical processor.\n\n  Own Id: OTP-6560 Aux Id: OTP-6925\n\n- The details of the compressed term format has been documented in\n  erl_ext_dist.txt. (Thanks to Daniel Goertzen.)\n\n  Own Id: OTP-6755\n\n- The runtime system with SMP support is now started by default if more than one\n  logical processor are detected. For more information, see the `erl(3)`\n  documentation.\n\n  Own Id: OTP-6756\n\n- The external format for Erlang terms and the distribution protocol are now\n  documented in ERTS User's Guide.\n\n  Own Id: OTP-6779\n\n- New BIF's erlang:system_profile/1 and erlang:system_profile/2. These BIF's\n  controls concurrency profiling options for processes, ports and schedulers.\n\n  Own Id: OTP-6783 Aux Id: OTP-6285\n\n- The `ErlDrvTermData` term types used by `driver_output_term()` and\n  `driver_send_term()` have been extended with the term types\n  `ERL_DRV_BUF2BINARY`, `ERL_DRV_EXT2TERM`, and `ERL_DRV_UINT`.\n  `ERL_DRV_BUF2BINARY` is used for passing and creating a binary,\n  `ERL_DRV_EXT2TERM` is used for passing terms encoded with the external term\n  format, and `ERL_DRV_UINT` is used for passing unsigned integers.\n\n  Also the data types `ErlDrvUInt` and `ErlDrvSInt` have been added which makes\n  it more obvious how arguments to term types are interpreted with regards to\n  width and signedness.\n\n  The incorrect data types `ErlDriverTerm`, `ErlDriverBinary`, and\n  `ErlDriverPort` in the `erl_driver(3)` documentation have been replaced with\n  the correct data types `ErlDrvTermData`, `ErlDrvBinary`, and `ErlDrvPort`.\n\n  For more information see the `erl_driver(3)` documentation.\n\n  Own Id: OTP-6823\n\n- Miscellaneous improvements of the erts internal thread library.\n\n  It now support optimized atomic operations and spin-locks on windows.\n\n  Fall-backs based on mutexes and/or spin-locks for missing optimized atomic\n  operations, spin-locks, or rwlocks has been implemented. This makes it\n  possible to compile the runtime system with SMP support on a lot more\n  platforms.\n\n  Default stack size on OpenBSD has been increased to 256 kilo-words.\n\n  Own Id: OTP-6831 Aux Id: OTP-6560\n\n- Many bit syntax operations, both construction and matching, are faster. For\n  further information, see the Efficiency Guide.\n\n  Own Id: OTP-6838\n\n- Literal lists, tuples, and binaries are no longer constructed at run-time as\n  they used to be, but are stored in a per-module constant pool. Literals that\n  are used more than once are stored only once.\n\n  This is not a change to the language, only in the details of its\n  implementation. Therefore, the implications of this change is described in the\n  Efficiency Guide.\n\n  Example 1: In the expression\n  [`element(BitNum-1, {1,2,4,8,16,32,64,128})`](`element/2`), the tuple used to\n  be constructed every time the expression was executed, which could be\n  detrimental to performance in two ways if the expression was executed in a\n  loop: the time to build the tuple itself and the time spent in garbage\n  collections because the heap filled up with garbage faster.\n\n  Example 2: Literal strings, such as `\"abc\"`, used to be stored in the compiled\n  code compactly as a byte string and expanded to a list at run-time. Now all\n  strings will be stored expanded to lists (such as `[$a,$b,$c]`) in the\n  constant pool. That means that the string will be faster to use at run-time,\n  but that it will require more space even when not used. If space is an issue,\n  you might want to use binary literals (that is, `<<\"abc\">>`) instead of string\n  literals for infrequently used long strings (such as error messages).\n\n  Own Id: OTP-6850\n\n- The Erlang driver API has been extended with a portable POSIX thread like API\n  for multi-threading. The Erlang driver thread API provides:\n\n  - Threads\n  - Mutexes\n  - Condition variables\n  - Read/Write locks\n  - Thread specific data\n\n  For more information see the `erl_driver(3)` documentation.\n\n  Own Id: OTP-6857\n\n- Recursive calls now usually consume less stack than in R11B. See the\n  Efficiency Guide.\n\n  Own Id: OTP-6862 Aux Id: seq10746\n\n- The deprecated BIFs `erlang:old_binary_to_term/1` and `erlang:info/1` have\n  been removed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6876\n\n- Calls to driver call-backs triggered by external events are now scheduled and\n  interleaved with execution of Erlang processes also on the runtime system\n  without SMP support.\n\n  Own Id: OTP-6878\n\n- Faster arithmetic of integers of more than 27 bits signed (or 60 bits signed\n  on an 64-bit CPU), and also faster integer multiplication. (Thanks to Tony\n  Rogvall.)\n\n  Own Id: OTP-6891\n\n- Significant improvements of the `process_info` BIFs:\n\n  - [`process_info/2`](`process_info/2`) can now be called with a list of items\n    as second argument in order to atomically retrieve information about\n    multiple items.\n  - `process_info/[1,2]` has been optimized in the runtime system with SMP\n    support. The whole scheduler could previously be blocked for a significant\n    period of time in `process_info/[1,2]` waiting for a lock on the process\n    being inspected. The Erlang process calling `process_info/[1,2]` can still\n    be blocked for a significant period of time waiting for the lock, but the\n    scheduler will now be able to run other processes while the process calling\n    `process_info/[1,2]` waits for the lock.\n  - [`process_info/2`](`process_info/2`) now accept a few more items than\n    before.\n  - The documentation of `process_info/[1,2]` has been improved.\n\n  For more information see the `m:erlang` documentation.\n\n  Own Id: OTP-6899\n\n- [`open_port({}, [])`](`open_port/2`) could crash the emulator. (Thanks to\n  Matthew Dempsky.)\n\n  Own Id: OTP-6901\n\n- Two new guard BIFs have been introduced as a recommended replacement for\n  [`size/1`](`size/1`). (The [`size/1`](`size/1`) BIF will be removed no earlier\n  than in R14B.) The BIFs are [`tuple_size/1`](`tuple_size/1`) to calculate the\n  size of a tuple and [`byte_size/1`](`byte_size/1`) to calculate the number of\n  bytes needed for the contents of the binary or bitstring (rounded up to the\n  nearest number of bytes if necessary).\n\n  There is also a new [`bit_size/1`](`bit_size/1`) BIF that returns the exact\n  number of bits that a binary or bitstring contains.\n\n  Own Id: OTP-6902\n\n- The `ets:fixtable/2` function, which has been deprecated for several releases,\n  has been removed.\n\n  The `ets:info/1` function has been reimplemented as a BIF, which guarantees\n  that information returned is consistent.\n\n  The `ets:info/2` function now fails with reason `badarg` if the second\n  argument is invalid. (Dialyzer can be used to find buggy code where the second\n  argument is misspelled.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6906\n\n- As the linux kernel may generate a minor fault when tracing with CPU\n  timestamps, and there exists no patch to the Linux kernel that fixes the\n  problem, cpu timestamps are disabled on Linux for now.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6922\n\n- The functions io:columns/0, io:columns/1, io:rows/0 and io:rows/1 are added to\n  allow the user to get information about the terminal geometry. The shell takes\n  some advantage of this when formatting output. For regular files and other\n  io-devices where height and width are not applicable, the functions return\n  \\{error,enotsup\\}.\n\n  Potential incompatibility: If one has written a custom io-handler, the handler\n  has to either return an error or take care of io-requests regarding terminal\n  height and width. Usually that is no problem as io-handlers, as a rule of\n  thumb, should give an error reply when receiving unknown io-requests, instead\n  of crashing.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6933\n\n- `driver_caller()` can now also be used from the `start` callback of a driver.\n\n  Own Id: OTP-6951\n\n- The emulator can now be compiled for 64bit intel, as well as a 32bit universal\n  binary on darwin/MacOSX 10.4 and 10.5.\n\n  Own Id: OTP-6961\n\n- If `open_port` fails because all available ports are already in use, it will\n  now throw a `system_limit` exception instead of an `enfile` exception.\n  (`enfile` might still be thrown if the operating system would return ENFILE.)\n\n  Own Id: OTP-6968\n\n- The [`spawn_monitor/1`](`spawn_monitor/1`) and\n  [`spawn_monitor/3`](`spawn_monitor/3`) BIFs are now auto-imported (i.e. they\n  no longer need an `erlang:` prefix).\n\n  Own Id: OTP-6975\n\n- On Windows, the werl window now handles resize, so that the whole window can\n  be utilized. Text selection is also updated to be line oriented instead of\n  rectangle oriented as in earlier versions.\n\n  Own Id: OTP-6994 Aux Id: OTP-6933\n\n- Kqueue support (kernel-poll) has been enabled on FreeBSD. The problem with\n  kqueue not detecting writes on a pipe on FreeBSD was actually not a kqueue\n  issue, but a writev on pipes issue. Neither poll(), nor select() detected the\n  write when the bug hit. NetBSD and DragonFlyBSD probably have or have had the\n  same bug. This bug should have been fixed in FreeBSD 6.3 and FreeBSD 7.0\n  thanks to Jean-Sebastien Pedron.\n\n  Own Id: OTP-7001","ref":"notes.html#improvements-and-new-features-106"},{"type":"extras","title":"Erts 5.5.5.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-5-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Hanging writes on temporarily unavailable NFS filesystems could cause the\n  execution of (not file related) erlang code to get blocked even though I/O\n  threads were used. This is now corrected.\n\n  Own Id: OTP-6907 Aux Id: seq10771","ref":"notes.html#fixed-bugs-and-malfunctions-340"},{"type":"extras","title":"Erts 5.5.5.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-5-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Data passed to a driver via `erlang:port_call` could be corrupted when the\n  runtime system with SMP support was used. (Thanks to YAMASHINA Hio.)\n\n  Own Id: OTP-6879\n\n- In the SMP emulator, if several processes called ets:update_counter/3 (even\n  for different tables) when the counter values exceeded 27 bits, the counter\n  values could be corrupted or the emulator could crash.\n\n  Own Id: OTP-6880 Aux Id: seq10760","ref":"notes.html#fixed-bugs-and-malfunctions-341"},{"type":"extras","title":"Erts 5.5.5.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-5-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Creating a named table using `ets:new/2` or renaming a named table using\n  `ets:rename/2` could in rare circumstances succeed, meaning that there would\n  be two or more tables with the same name. Now such call will fail with a\n  `badarg` exception as it is supposed to do.\n\n  `ets:delete/1` used on a named table now removes the name immediately so that\n  a new table with the same name can be created.\n\n  Turning on call trace on the internal BIF that implements `ets:delete/1` would\n  crash the emulator.\n\n  SMP emulator only: Using `ets:rename/2` on a table that `ets:safe_fixtable/2`\n  has been used on could cause an emulator crash or undefined behaviour because\n  of a missing lock.\n\n  Own Id: OTP-6872 Aux Id: seq10756, seq10757","ref":"notes.html#fixed-bugs-and-malfunctions-342"},{"type":"extras","title":"Erts 5.5.5.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-5-2"},{"type":"extras","title":"Known Bugs and Problems - ERTS Release Notes","doc":"- ets:select/3 on ordered_set and with a chunksize a multiple of 1000 gave all\n  elements instead of just 1000. Also ets:slot/2 on ordered set could give\n  unexpected results on SMP emulator. Both problems are corrected.\n\n  Own Id: OTP-6842","ref":"notes.html#known-bugs-and-problems-9"},{"type":"extras","title":"Erts 5.5.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- All exported functions in gzio.c have now been renamed to avoid conflict with\n  drivers that are indirectly linked with an external zlib library.\n\n  Own Id: OTP-6816 Aux Id: OTP-6591\n\n- Calling binary_to_term/1 with certain invalid binaries would crash the\n  emulator.\n\n  Own Id: OTP-6817","ref":"notes.html#fixed-bugs-and-malfunctions-343"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Restored speed of bit-syntax matching of 32 bits integers.\n\n  Own Id: OTP-6789 Aux Id: seq10688","ref":"notes.html#improvements-and-new-features-107"},{"type":"extras","title":"Erts 5.5.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The functions in gzio.c have been renamed to avoid conflict with drivers that\n  indirectly linked with an external zlib library.\n\n  Own Id: OTP-6591\n\n- The emulator without SMP support dumped core if an async-thread finished a job\n  after the emulator had begun writing an `erl_crash.dump`.\n\n  Own Id: OTP-6685\n\n- In bit syntax matching, integer fields with greater size than 16Mb would fail\n  to match. (Thanks to Bertil Karlsson and Francesco Pierfederici.)\n\n  Matching out a 32-bit integer not aligned on a byte boundary from a binary\n  could cause an heap overflow (and subsequent termination of the emulator).\n\n  A module that contained bit syntax construction with a literal field size\n  greater than 16Mb would fail to load.\n\n  Several other similar bugs having to do with huge field sizes were eliminated.\n\n  Attempting to construct a binary longer than 536870911 bytes will now fail\n  with a `system_limit` exception (rather than fail in mysterious ways or\n  construct an binary with incorrect contents). Similarly, attempting to match a\n  binary longer than 536870911 bytes will now fail (instead of producing an\n  incorrect result). This limitation has been documented in the Efficiency\n  Guide. (The limit is in the 32-bit emulator; use the 64-bit emulator if you\n  need to handle larger binaries than 536870911.)\n\n  Own Id: OTP-6686\n\n- Bugs in rem and div of very large numbers are corrected.\n\n  Own Id: OTP-6692\n\n- `erlang:system_info({allocator, Alloc})` didn't allocate enough heap when a\n  bignum was part of the result which could cause an emulator crash.\n\n  Own Id: OTP-6693\n\n- It was previously not possible to pass `erts_alloc` the same configuration via\n  the command-line, as used by default.\n\n  A `+M*` command-line argument that configure a size of some sort can now be\n  passed a value that equals the size of the address space. The value used, in\n  this case, will be `\"the size of the address space\" - 1`.\n\n  Own Id: OTP-6699\n\n- `SysIOVec* driver_peekq(ErlDrvPort port, int *vlen)` did not update `*vlen` if\n  `port` was invalid. `*vlen` is now set to `-1` if the `port` is invalid.\n\n  The `efile` driver expects `*vlen` to be updated also when the `port` is\n  invalid. This situation occurs seldom, but when the runtime system has\n  async-threads enabled and ports are killed it can. When it occurred the\n  runtime system crashed.\n\n  Own Id: OTP-6729","ref":"notes.html#fixed-bugs-and-malfunctions-344"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- For scripts written using `escript`, there is a new function\n  `escript:script_name/0`, which can be used to retrieve the pathame of the\n  script. The documentation has been clarified regarding pre-defined macros such\n  as ?MODULE and the module name.\n\n  Own Id: OTP-6593\n\n- The section Guards in the chapter The Abstract Format of the ERTS User's Guide\n  has been updated.\n\n  Own Id: OTP-6600\n\n- Corrected protocol layer flue for socket options SO_LINGER, SO_SNDBUF and\n  SO_RCVBUF, for SCTP.\n\n  Own Id: OTP-6625 Aux Id: OTP-6336\n\n- The behaviour of the inet option \\{active,once\\} on peer close is improved and\n  documented.\n\n  Own Id: OTP-6681\n\n- The inet option send_timeout for connection oriented sockets is added to allow\n  for timeouts in communicating send requests to the underlying TCP stack.\n\n  Own Id: OTP-6684 Aux Id: seq10637 OTP-6681\n\n- The command line flag `-args_file FileName`, and the environment variables\n  `ERL_AFLAGS`, and `ERL_ZFLAGS` for the `erl` command have been added. For more\n  information see the [erl](erl_cmd.md) documentation.\n\n  Own Id: OTP-6697\n\n- The `is_constant/1` type test has been deprecated. `is_constant/1` is\n  improperly named and almost entirely undocumented.\n\n  Own Id: OTP-6731","ref":"notes.html#improvements-and-new-features-108"},{"type":"extras","title":"Erts 5.5.4.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-4-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- [`process_flag(trap_exit, Bad)`](`process_flag/2`) where `Bad` was a term not\n  equal to `true` or `false`, didn't fail with `badarg` as it should; instead,\n  the failure was silently ignored. This bug was introduced in `erts-5.5.2`.\n\n  Own Id: OTP-6627 Aux Id: OTP-6160\n\n- The minimum and default stack size for async-threads has been increased to 16\n  kilowords. This since the previous minimum and default stack size of 8\n  kilowords proved to be too small (introduced in `erts-5.5.4.2`).\n\n  Own Id: OTP-6628 Aux Id: OTP-6580, Seq10633","ref":"notes.html#fixed-bugs-and-malfunctions-345"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- process_flag/2 accepts the new flag `sensitive`.\n\n  Own Id: OTP-6592 Aux Id: seq10555","ref":"notes.html#improvements-and-new-features-109"},{"type":"extras","title":"Erts 5.5.4.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-4-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- When a port steals control over a file descriptor from another port, the\n  stealing port tests if the other port is alive. This in order to be able to\n  give an accurate error message. In the runtime system with SMP support, this\n  test was done without appropriate locks held. This could in worst case lead to\n  an erroneous error message; therefore, this bug is to be considered harmless.\n\n  Own Id: OTP-6602","ref":"notes.html#fixed-bugs-and-malfunctions-346"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The default stack size for threads in the async-thread pool has been shrunk to\n  8 kilowords, i.e., 32 KB on 32-bit architectures. This small default size has\n  been chosen since the amount of async-threads might be quite large. The\n  default stack size is enough for drivers delivered with Erlang/OTP, but might\n  not be sufficiently large for other dynamically linked in drivers that use the\n  `driver_async()` functionality. A suggested stack size for threads in the\n  async-thread pool can be configured via the `+a` command line argument of\n  [erl](erl_cmd.md).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6580","ref":"notes.html#improvements-and-new-features-110"},{"type":"extras","title":"Erts 5.5.4.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-4-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Setting the time on the system while using heart on a linux machine where the\n  emulator was built with clock_gettime support (default from Linux\n  2.6/erts-5.5.4 and upwards), could make the heart command fire. This was due\n  to bug in the heart executable which is now corrected.\n\n  Own Id: OTP-6598 Aux Id: seq10614","ref":"notes.html#fixed-bugs-and-malfunctions-347"},{"type":"extras","title":"Erts 5.5.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Corrected misspelling of '`-pz`' in the help text for `erlc`. (Thanks to Ulf\n  Wiger.)\n\n  Own Id: OTP-6433\n\n- The MD5 calculation of a BEAM file done by `code:module_md5/1`,\n  `beam_lib:md5/1`, and by the compiler for the default value of the `vsn`\n  attribute have all been changed so that its result will be the same on all\n  platforms; modules containing funs could get different MD5s on different\n  platforms.\n\n  Own Id: OTP-6459\n\n- The emulator could dump core while writing an `erl_crash.dump` file if there\n  were funs with a large terms in its environment. Since there is no way to\n  inspect a fun's environment in the crashdump_viewer application anyway, a\n  variables in the environment are now set to [] before dumping the fun. (Thanks\n  to Jean-Sebastien Pedron.)\n\n  Own Id: OTP-6504\n\n- `{Port, {exit_status, S}}` messages from ports opened with the `exit_status`\n  option could under rare circumstances be delayed. This bug was present on\n  Erlang runtime systems without SMP support on all unix operating systems other\n  than SunOS.\n\n  Own Id: OTP-6528\n\n- A bug in linuxthreads could cause the emulator to dump core when dlerror() was\n  called before the first call to dlopen(). As a workaround the emulator always\n  makes a call to dlopen() on initialization when linuxthreads is used as thread\n  library.\n\n  Own Id: OTP-6530\n\n- file:sync/1 did not do anything on Windows. Now it calls the system function\n  for flushing buffers (FlushFileBuffers()). (Thanks to Matthew Sackman.)\n\n  Own Id: OTP-6531\n\n- [`open_port/2`](`open_port/2`) could on the runtime system with SMP support\n  fail with the wrong exit reason when a port couldn't be created. When this\n  happened the exit reason was typically `eintr`, or `ebusy` instead of\n  `eagain`.\n\n  Own Id: OTP-6536\n\n- The file driver (efile_drv) did not flush data written using the option\n  'delayed_write' after the set timeout time, rather at the next file operation.\n  This bug has now been corrected.\n\n  Own Id: OTP-6538","ref":"notes.html#fixed-bugs-and-malfunctions-348"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- An interface towards the SCTP Socket API Extensions has been implemented.It is\n  an Open Source patch courtesy of Serge Aleynikov and Leonid Timochouk. The\n  Erlang code parts has been adapted by the OTP team, changing the Erlang API\n  somewhat.\n\n  The Erlang interface consists of the module `gen_sctp` and an include file\n  `-include_lib(\"kernel/include/inet_sctp.hrl\").` for option record definitions.\n  The `gen_sctp` module is documented.\n\n  The delivered Open Source patch, before the OTP team rewrites, was written\n  according to http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13 and was\n  claimed to work fine, tested on Linux Fedora Core 5.0 (kernel 2.6.15-2054 or\n  later) and on Solaris 10 and 11. The OTP team rewrites used the same standard\n  document but might have accidentally broken some functionality. If so it will\n  soon be patched to working state. The tricky parts in C and the general design\n  has essentially not changed. During the rewrites the code was hand tested on\n  SuSE Linux Enterprise Server 10, and briefly on Solaris 10. Feedbach on code\n  and docs is very much appreciated.\n\n  The SCTP interface is in beta state. It has only been hand tested and has no\n  automatic test suites in OPT meaning everything is most certainly not tested.\n  Socket active mode is broken. IPv6 is not tested. The documentation has been\n  reworked due to the API changes, but has not been proofread after this.\n\n  Thank you from the OTP team to Serge Aleynikov and Leonid Timochouk for a\n  valuable contribution. We hope we have not messed it up too much.\n\n  Own Id: OTP-6336\n\n- A `{minor_version,Version}` option is now recognized by\n  [`term_to_binary/2`](`term_to_binary/2`). \\{minor_version,1\\} will cause\n  floats to be encoded in an exact and more space-efficient way compared to the\n  previous encoding.\n\n  Own Id: OTP-6434\n\n- There is a new `escript` program that can be used for writing scripts in\n  Erlang. Erlang scripts don't need to be compiled and any arguments can be\n  passed to them without risk that they are interpreted by the Erlang system.\n\n  Own Id: OTP-6505\n\n- Setting and getting socket options in a \"raw\" fashion is now allowed. Using\n  this feature will inevitably produce non portable code, but will allow setting\n  ang getting arbitrary uncommon options on TCP stacks that do have them.\n\n  Own Id: OTP-6519\n\n- Miscellaneous signal handling improvements on the Erlang runtime system with\n  SMP support.\n\n  The fallback implementation of spin locks and atomic operations are now\n  implemented using pthread spin locks when pthread spin locks are found on the\n  system.\n\n  The Erlang runtime system with SMP support can now run on Linux systems that\n  has Linuxthreads instead of NPTL (Native POSIX Thread Library). Note that the\n  SMP support hasn't been as thoroughly tested with Linuxthreads as with NPTL. A\n  runtime system with SMP support will therefore not be built by default on\n  Linux when NPTL isn't found. In order to force a build of the runtime system\n  with SMP support, pass `--enable-smp-support` to `configure` when building\n  OTP.\n\n  Own Id: OTP-6525","ref":"notes.html#improvements-and-new-features-111"},{"type":"extras","title":"Erts 5.5.3.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `erlang:system_flag(multi_scheduling, block)` could cause the emulator with\n  SMP support to deadlock.\n\n  Own Id: OTP-6431 Aux Id: OTP-6403\n\n- The runtime system with SMP support failed to call the driver timeout callback\n  of ports in state closing. This could cause ports to fail flushing their I/O\n  queues.\n\n  Own Id: OTP-6432\n\n- The `{Port, closed}` message from a closed port could arrive at the port owner\n  before `Port` had been removed from the result of `erlang:ports/0` in the\n  runtime system with SMP support.\n\n  Own Id: OTP-6437\n\n- The async id of async jobs created via `driver_async` wasn't created in a\n  thread safe manner in the runtime system with SMP support. This could in worst\n  case cause `driver_async_cancel()` to cancel another async job than intended.\n\n  Own Id: OTP-6438\n\n- Under rare circumstances a terminating connection between two nodes could\n  cause an instantaneous reconnect between the two nodes to fail on the runtime\n  system with SMP support.\n\n  Own Id: OTP-6447\n\n- In the documentation of the driver entry field `extended_marker` of erts\n  version 5.5.3 (`driver_entry(3)`), the following is stated: \"The following\n  fields are ignored if this field is equal to `0`\". This is a documentation bug\n  and has been changed to: \"If this field is equal to `0`, all the fields\n  following this field also _have_ to be `0`, or `NULL` in case it is a pointer\n  field\".\n\n  The runtime check for detection of old incompatible drivers made when loading\n  drivers has been improved. The emulator can, however, not make sure that a\n  driver that doesn't use the extended driver interface isn't incompatible.\n  Therefore, when loading a driver that doesn't use the extended driver\n  interface, there is a risk that it will be loaded also when the driver is\n  incompatible. When the driver use the extended driver interface, the emulator\n  can verify that it isn't of an incompatible driver version. You are therefore\n  advised to use the extended driver interface.\n\n  For more information see the `erl_driver(3)` and `driver_entry(3)`\n  documentation.\n\n  Own Id: OTP-6452 Aux Id: OTP-6330\n\n- When terminating ports on the runtime system with SMP support, removal of\n  links to processes was done without locking the link lock on processes. This\n  could cause an emulator crash.\n\n  Own Id: OTP-6475\n\n- The emulator with SMP support could crash when a port flushed its I/O queue by\n  calling `driver_async()` from the timeout driver callback.\n\n  Own Id: OTP-6479\n\n- Large exit reasons could under rare circumstances cause the runtime system\n  with SMP support to crash.\n\n  Own Id: OTP-6521","ref":"notes.html#fixed-bugs-and-malfunctions-349"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Faster system calls for keeping the time accurate are used on newer Linux\n  kernels, which can result in a significant speed-up of the emulator on those\n  systems.\n\n  Own Id: OTP-6430\n\n- Added number of async threads and number of scheduler threads to the system\n  information that can be retrieved via `driver_system_info()`. For more\n  information see the `erl_driver(3)` documentation.\n\n  Own Id: OTP-6440\n\n- When `SIGUSR1` is received by the runtime system with SMP support, the\n  `erl_crash.dump` is now written by a special thread, instead of as before\n  directly from the signal handler.\n\n  Own Id: OTP-6465\n\n- term_to_binary/2 with compression is now faster.\n\n  term_to_binary/2 now accepts the option '`{compressed,Level}`' for specifying\n  the compression level. `Level` must be in the range 0 (no compression) through\n  9 (highest compression level). Default is 6.\n\n  Future compatibility bugfix: binary_to_term/1 did not handle the `Uniq` and\n  `Index` fields correctly.\n\n  Own Id: OTP-6494\n\n- Removed unnecessary reallocation when initializing kernel-poll set.\n\n  Own Id: OTP-6516","ref":"notes.html#improvements-and-new-features-112"},{"type":"extras","title":"Erts 5.5.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Node and fun table entries could under rare circumstances be deallocated\n  multiple times on the emulator with SMP support.\n\n  Own Id: OTP-6369\n\n- epoll_wait() can repeat entries for the same file descriptor in the result\n  array. This could cause the ready_input, ready_output, or event callbacks of a\n  driver to unintentionally be called multiple times. We have only noted\n  repeated entries when an error condition has occurred on the file descriptor.\n  In this case, the repeated entries should normally not be a problem for the\n  driver since it should detect the error and de-select the file descriptor.\n  Therefore this bug should be considered harmless. The emulator now coalesce\n  repeated entries into one.\n\n  You are only affected by this bug if you are using erts-5.5.2.\\* and the\n  kernel-poll feature on linux.\n\n  Own Id: OTP-6376 Aux Id: OTP-6222\n\n- If a process that was waiting in gen_tcp:accept/1 was killed, calling\n  gen_tcp:accept/1 again on the same listen socket would fail with\n  '`{error,einval}`'.\n\n  Own Id: OTP-6381 Aux Id: seq10535\n\n- The emulator failed to start on Solaris 10 when kernel-poll support was\n  enabled and the maximum number of filedescriptors configured was less than or\n  equal to 256.\n\n  Own Id: OTP-6384 Aux Id: OTP-6222\n\n- The R10B compiler could generate unsafe `bs_save/bs_restore` instructions that\n  could cause memory corruption. (The R11B compiler does not have that problem.)\n  The erlang emulator will now refuse to load R10B-compiled modules that contain\n  such unsafe `bs_save/bs_restore` instructions. In addition, the beam_validator\n  module in the compiler will also reject such instructions (in case it is used\n  to validate R10B code). (Thanks to Matthew Reilly.)\n\n  Own Id: OTP-6386\n\n- Process and port timers could fail to work properly on the runtime system with\n  SMP support. Many thanks to Dmitriy Kargapolov and Serge Aleynikov who tracked\n  down this bug.\n\n  Own Id: OTP-6387\n\n- Bit syntax code compiled by an R10B compiler that matched out a floating point\n  number would not properly check that the floating point number was valid; if\n  the float was, for instance, NaN the emulator could crash.\n\n  Own Id: OTP-6395\n\n- statistics(runtime) on Windows used to return the elapsed system time for the\n  process, instead of the user time. Corrected. (Thanks to Robert Virding.)\n\n  Own Id: OTP-6407\n\n- A loadable driver (loaded by erl_ddll) which used driver_async() would cause\n  the emulator to crash. (Thanks to Dmitriy Kargapolov.)\n\n  Own Id: OTP-6410\n\n- Under rare circumstances the emulator on unix platforms could fail to\n  terminate the Erlang port corresponding to a port program opened with the\n  `exit_status` option.\n\n  Own Id: OTP-6411\n\n- A link removed via [`unlink/1`](`unlink/1`) could under rare circumstances\n  transfer exit signals for a short period of time after the call to\n  [`unlink/1`](`unlink/1`) had returned when the runtime system with SMP support\n  was used.\n\n  Own Id: OTP-6425 Aux Id: OTP-6160","ref":"notes.html#fixed-bugs-and-malfunctions-350"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- In the runtime system with SMP support, ports are now being scheduled on the\n  scheduler threads interleaved with processes instead of being run in a\n  separate I/O thread.\n\n  Own Id: OTP-6262\n\n- More interfaces are added in erl_ddll, to support different usage scenarios.\n\n  Own Id: OTP-6307 Aux Id: OTP-6234\n\n- In the runtime system with SMP support, the global I/O lock has been replaced\n  with a more fine grained port locking scheme. Port locking is either done on\n  driver level, i.e., all ports executing the same driver share a lock, or on\n  port level, i.e., each port has its own lock. Currently the inet driver, the\n  efile driver, and the spawn driver use port level locking and all other\n  statically linked in drivers use driver level locking. By default dynamically\n  linked in drivers will use locking on driver level. For more information on\n  how to enable port level locking see the `erl_driver(3)` and the\n  `driver_entry(3)` man pages.\n\n  As of erts version 5.5.3 the driver interface has been extended. The extended\n  interface introduce version management, the possibility to pass capability\n  flags to the runtime system at driver initialization, and some new driver API\n  functions. For example, the `driver_system_info()` function which can be used\n  to determine if the driver is run in a runtime system with SMP support or not.\n  The extended interface doesn't have to be used, _but_ dynamically linked in\n  driver _have_ to be recompiled. For information see the `erl_driver(3)` and\n  the `driver_entry(3)` man pages.\n\n  _NOTE:_ Dynamically linked in drivers _have_ to be recompiled.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6330 Aux Id: OTP-6262\n\n- A test and debug feature which modifies the timing of the runtime system has\n  been added. For more information, see documentation of the `+T ` command\n  line argument of [erl](erl_cmd.md).\n\n  Own Id: OTP-6382\n\n- The version of zlib (http://zlib.net) linked into run-time system has been\n  updated to version 1.2.3.\n\n  Own Id: OTP-6394\n\n- The `erlc` program now passes on the `-smp` and `-hybrid` options to the\n  Erlang emulator it starts. This is mainly useful for compiling native code,\n  because native code must be compiled with same type of run-time system as in\n  which it will be run.\n\n  If the `-s` option is given, `erlc` now prints a warning that it is deprecated\n  and that it will be removed in R12B.\n\n  Own Id: OTP-6398\n\n- The `schedulers` option of `erlang:system_flag/2` has been removed, i.e., the\n  number of scheduler threads cannot be changed after emulator boot time any\n  more.\n\n  A `multi_scheduling` option has been added to `erlang:system_flag/2`. This\n  option can be used for blocking and unblocking multi-scheduling. For more\n  information see the `m:erlang` documentation.\n\n  Own Id: OTP-6403\n\n- A port program that had been started with the `exit_status` option and closed\n  one of the pipes used for communication with the emulator caused the emulator\n  to continuously poll for termination of the port program. This only became a\n  problem when the emulator didn't have other things to do and the port program\n  closed a pipe much earlier than it terminated. When the emulator had other\n  things to do, such as running Erlang processes, the emulator polled for\n  termination in between scheduling of processes.\n\n  Now the emulator doesn't poll for termination of the port program at all;\n  instead, it waits for the child signal from the terminated port program to\n  arrive and then schedules the Erlang port for termination.\n\n  The termination of any port programs have also been optimized. Previously the\n  termination of any port program did always cause a scan of a table of the size\n  equal to maximum number of file descriptors. If the maximum number of file\n  descriptors was large, this scan could be quite expensive. Now the search have\n  been reduced to the set of ports started with the `exit_status` option.\n\n  Note, all of the above only applies to Erlang emulators on Unix platforms.\n\n  Own Id: OTP-6412 Aux Id: seq10194\n\n- \\* BEAM: added support for floating-point exceptions on FreeBSD (32-bit x86)\n\n  \\* SMP: made locking procedures work even when native lock operations aren't\n  implemented\n\n  \\* SMP: improved timing accuracy in the timer thread (if enabled)\n\n  Own Id: OTP-6424","ref":"notes.html#improvements-and-new-features-113"},{"type":"extras","title":"Erts 5.5.2.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- A bug in the kernel poll implementation could cause the emulator to omit\n  polling for events on file descriptors. The bug was only present when using\n  the kernel poll implementation based on epoll or kqueue. This bug was\n  introduced in erts-5.5.2.\n\n  Own Id: OTP-6344 Aux Id: OTP-6222","ref":"notes.html#fixed-bugs-and-malfunctions-351"},{"type":"extras","title":"Erts 5.5.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The run_erl program now acquires its pseudo-ttys using openpty(3), so that it\n  will work on newer Linux distributions that don't have the traditional\n  pseudo-tty devices in the file system. On platforms that don't have\n  openpty(3), run_erl will still search for pseudo-tty devices in the file\n  system.\n\n  The run_erl program will now wait using waitpid(3) to prevent the program it\n  spawned to become defunct. run_erl will also terminate after a delay of 5\n  seconds (to allow any pending output to be written to the log file) if the\n  spawned program terminates even if some child of it still holds stdin and/or\n  stdout open.\n\n  Own Id: OTP-6225 Aux Id: seq10500\n\n- A bug in ordered_set ETS datatyp caused ets:select (and match) to return\n  faulty results when the table contained process id's from another node.\n\n  Own Id: OTP-6338","ref":"notes.html#fixed-bugs-and-malfunctions-352"},{"type":"extras","title":"Erts 5.5.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- erlc: A typo in the help text for '-pa path' was corrected.\n\n  Own Id: OTP-6218\n\n- Failure in port command/control driver callbacks could crash the non-SMP\n  emulator. This bug was introduced in the 5.5 version of erts.\n\n  Own Id: OTP-6224\n\n- Erroneous \"`Input driver gone away without deselecting!`\" error reports could\n  sometimes occur when a driver instance terminated in the ready_output()\n  callback of the driver. This bug was only present in emulators that used\n  poll(). Note, that this bug was harmless, the only effect it had was the\n  erroneous error report.\n\n  Own Id: OTP-6229 Aux Id: OTP-3993, Seq5266, Seq7247, OTP-4307\n\n- The emulator could cause a type assertion failure while writing an\n  erl_crash.dump, causing the erl_crash.dump to be terminated and a core dump\n  generated.\n\n  Own Id: OTP-6235 Aux Id: seq10444\n\n- The registered name of a process is now the last observable resource removed\n  before links and monitors are triggered when a process terminates.\n\n  Previously ets tables were removed after the registered name. This could cause\n  problems on the runtime system with SMP support for code that expected that\n  ets tables owned by a specific process had been removed if the name of the\n  process had been removed.\n\n  Own Id: OTP-6237\n\n- Failure to fork() a new (os) process could cause the emulator to deadlock.\n  This bug affect all emulators with SMP support, and emulators with async\n  thread support on SunOS.\n\n  Own Id: OTP-6241 Aux Id: OTP-3906\n\n- Fprof traces could become truncated for the SMP emulator. This bug has now\n  been corrected.\n\n  Own Id: OTP-6246\n\n- The undocumented functions inet:getiflist/0,1 inet:ifget/2,3 and inet:getif/1\n  were completely broken on Windows. That has been fixed.\n\n  Own Id: OTP-6255\n\n- Behavior in case of disappeared nodes when using the dist_auto_connect once\n  got changed in R11B-1. The timeouts regarding normal distributed operations is\n  now reverted to the old (pre R11B-1).\n\n  Own Id: OTP-6258 Aux Id: OTP-6200, seq10449\n\n- The bsl and bsr operators could cause the emulator to crash if given invalid\n  arguments. (Thanks to datacompboy and Per Gustafsson.)\n\n  Own Id: OTP-6259\n\n- driver_cancel_timer() could under certain circumstances fail to cancel the\n  timer on the runtime system with SMP support.\n\n  Own Id: OTP-6261\n\n- A call to erlang:system_info(info) could deadlock the runtime system with SMP\n  support.\n\n  Own Id: OTP-6268","ref":"notes.html#fixed-bugs-and-malfunctions-353"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Exit signals are now truly asynchronous in the runtime system with SMP\n  support. This simplifies locking in bifs a lot, and makes process termination\n  cheaper.\n\n  Own Id: OTP-6160\n\n- When tracing on the runtime system with SMP support it can be difficult to\n  know when a trace has been delivered to the tracer. A new built in function\n  `erlang:trace_delivered/1` has been introduced in order to make it easier to\n  know when the trace has been delivered. See the erlang(3) man page for more\n  information.\n\n  Own Id: OTP-6205 Aux Id: OTP-6269\n\n- Kernel poll support can now be combined with SMP support. Currently the\n  following kernel poll versions exist: `/dev/poll`, `epoll`, and `kqueue`.\n  Linux `kpoll` has been replaced with `epoll`. Some time in the future there\n  will also be a kernel poll version using Solaris event ports.\n\n  The \"check io\" implementation for unix has been completely rewritten. The\n  current kernel poll implementation reduce the amount of system calls needed\n  compared to the old kernel poll implementation.\n\n  When `epoll` or `kqueue` is used either `poll` or `select` is used as\n  fallback. Previously only `poll` could be used as fallback. Since `select` now\n  can be used as fallback, kernel poll support is now also available on newer\n  MacOSX. Note however, when `select` is used as fallback, the maximum number of\n  file descriptors is limited to `FD_SETSIZE`.\n\n  Kernel poll support is now enabled by default if `/dev/poll`, `epoll`, or\n  `kqueue` is found when building OTP, i.e. you do not have to pass the\n  `--enable-kernel-poll` argument to `configure`. As before, kernel poll is\n  disabled by default in the runtime system. In order to enable it, pass the\n  `+Ktrue` command line argument to `erl`.\n\n  Note: `configure` will refuse to enable kernel poll support on FreeBSD since\n  `kqueue` have problems with (at least) pipes on all version of FreeBSD that we\n  have tested.\n\n  Own Id: OTP-6222 Aux Id: seq10380\n\n- The `erl_ddll` module and the code in the emulator have been completely\n  rewritten; several bugs were fixed.\n\n  Own Id: OTP-6234\n\n- The SMP emulator now avoids locking for the following operations (thus making\n  them as fast as in the UP emulator): [`atom_to_list/1`](`atom_to_list/1`),\n  atom comparison, atom hashing, `erlang:apply/3`.\n\n  Own Id: OTP-6252\n\n- There are new BIFs `erlang:spawn_monitor/1,3`, and the new option `monitor`\n  for `spawn_opt/2,3,4,5`.\n\n  The `observer_backend` module has been updated to handle the new BIFs.\n\n  Own Id: OTP-6281","ref":"notes.html#improvements-and-new-features-114"},{"type":"extras","title":"Erts 5.5.1.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-1-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- There is now an option read_packets for UDP sockets that sets the maximum\n  number of UDP packets that will be read for each invocation of the socket\n  driver.\n\n  Own Id: OTP-6249 Aux Id: seq10452","ref":"notes.html#improvements-and-new-features-115"},{"type":"extras","title":"Erts 5.5.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Complex pattern matching of strings would fail in the 64 bits emulator because\n  of a bug in the loader. (Thanks to Igor Goryachev.)\n\n  Own Id: OTP-6142\n\n- `-134217728 div 134217728` and `-134217728 rem 134217728` would be calculated\n  incorrectly. [`abs(-2147483648)`](`abs/1`) could in unlucky circumstances\n  cause a heap overflow, as could size(Binary) when size of the binary was\n  larger than 128Mb.\n\n  Own Id: OTP-6154\n\n- erlang:display/1 displayed erroneous values for negative integers.\n\n  Big integers (both positive and negative) were previously displayed in\n  hexadecimal form while small integers were displayed in decimal form. All\n  integers are now displayed in decimal form.\n\n  NOTE: erlang:display/1 should only be used for debugging.\n\n  Own Id: OTP-6156\n\n- A call to erlang:trace/3 with erroneous flags caused the SMP emulator to\n  deadlock instead of exiting the calling process with badarg.\n\n  Own Id: OTP-6175\n\n- A bug causing the emulator to hang when exiting a process that is exception\n  traced has been fixed.\n\n  Own Id: OTP-6180\n\n- ets:rename/1 could deadlock, or crash the SMP emulator when the table wasn't a\n  named table.\n\n  ets:next/2, and ets:prev/2 could return erroneous results on the SMP emulator.\n\n  Own Id: OTP-6198 Aux Id: seq10392, seq10415\n\n- A memory allocation bug could cause the SMP emulator to crash when a process\n  had executed a `receive after` with a larger timeout than 10 minutes.\n\n  Own Id: OTP-6199\n\n- The runtime system with SMP support did not slowly adjust its view of time\n  when the system time suddenly changed.\n\n  Timeouts could sometimes timeout too early on the runtime system with SMP\n  support.\n\n  Own Id: OTP-6202","ref":"notes.html#fixed-bugs-and-malfunctions-354"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The smp runtime system now automatically detects the number of logical\n  processors on MacOSX (darwin) and OpenBSD.\n\n  The smp runtime system is now built by default on MacOSX (darwin) on x86.\n\n  Own Id: OTP-6119\n\n- The `-smp` command line argument now take the following options: `enable`,\n  `auto`, or `disable`.\n\n  Especially the `-smpauto` argument is useful since it starts the Erlang\n  runtime system with SMP support if it is available and more than one logical\n  processor are detected; otherwise, it starts the Erlang runtime system without\n  SMP support. For more information see the [erl](erl_cmd.md) man page.\n\n  Own Id: OTP-6126\n\n- Increased the reduction cost for sending messages in the SMP emulator so it\n  behaves more like the non-SMP emulator.\n\n  Own Id: OTP-6196\n\n- A port running a dynamically linked-in driver that exits due to the driver\n  being unloaded now exits with exit reason `driver_unloaded`. Previously the\n  port exited with exit reason `-1`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6204\n\n- Changed name of the `erlang:system_info/1` argument `scheduler` to\n  `scheduler_id`. This since the `scheduler` argument so easily could be mixed\n  up with the `schedulers` argument (both returning integers).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6208\n\n- The changes below were made by Mikael Pettersson, HiPE.\n\n  HiPE runtime system:\n\n  Reduce overheads in the HiPE runtime system's BIF glue code.\n\n  Fix bug when exceptions are thrown from BEAM to HiPE.\n\n  Support SPARC on Linux.\n\n  Support x86 on FreeBSD.\n\n  Floating-point exceptions:\n\n  Reduce overheads in checking results of floating-point operations.\n\n  Minor bug fix in SSE2 floating-point exception handling.\n\n  Support SSE2 floating-point exceptions on 32-bit x86 machines.\n\n  Make FP exceptions work in the SMP runtime system on FreeBSD/x86.\n\n  Support floating-point exceptions on SPARCs running Linux.\n\n  Runtime system:\n\n  Minor scheduler optimisation in the non-SMP runtime system.\n\n  Substantial reduction of I/O thread overheads in the SMP runtime system if the\n  separate timer thread is used. (In R11B-1, the separate timer thread is not\n  used.)\n\n  Own Id: OTP-6211","ref":"notes.html#improvements-and-new-features-116"},{"type":"extras","title":"ERTS 5.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Previously [`unlink/1`](`unlink/1`) and `erlang:demonitor/2` behaved\n  completely asynchronous. This had one undesirable effect, though. You could\n  never know when you were guaranteed _not_ to be affected by a link that you\n  had unlinked or a monitor that you had demonitored.\n\n  The new behavior of [`unlink/1`](`unlink/1`) and `erlang:demonitor/2` can be\n  viewed as two operations performed atomically. Asynchronously send an unlink\n  signal or a demonitor signal, and ignore any future results of the link or\n  monitor.\n\n  _NOTE_: This change can cause some obscure code to fail which previously did\n  not. For example, the following code might hang:\n\n  ```erlang\n              Mon = erlang:monitor(process, Pid),\n              %% ...\n              exit(Pid, bang),\n              erlang:demonitor(Mon),\n              receive\n                  {'DOWN', Mon , process, Pid, _} -> ok\n              %% We were previously guaranteed to get a down message\n              %% (since we exited the process ourself), so we could\n              %% in this case leave out:\n              %% after 0 -> ok\n              end,\n  ```\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-5772\n\n- Two bugs fixed: If the environment variable `ERL_FLAGS` was set, its contents\n  would be appended to the end of the command line even if the command line had\n  an `-extra` options. Changed to place the options from `ERL_FLAGS` just before\n  `-extra`. Also, the `-smp` and `-hybrid` flags no longer have any effect if\n  placed after `-extra`.\n\n  Own Id: OTP-6054","ref":"notes.html#fixed-bugs-and-malfunctions-355"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The documentation for writing drivers in the ERTS User's Guide has been\n  expanded and updated.\n\n  Own Id: OTP-5192\n\n- The `andalso` and `orelse` operators are now allowed to be used in guards.\n  That also applies to match specifications.\n\n  Own Id: OTP-5894 Aux Id: OTP-5149\n\n- There is a new trace match spec function `{exception_trace}` and a\n  corresponding trace message `exception_from` that can be used to trace on any\n  exit from a function, both normal function return and exception return. See\n  the documentation for details.\n\n  The `return_to` trace message is now also generated when the execution returns\n  to a function due to catching an exception.\n\n  Own Id: OTP-5956\n\n- Erlang runtime system with SMP (symmetric multi processing) support.\n\n  The runtime system with SMP support is in this release focused on stability\n  and there are a number of steps with optimizations to follow before it will\n  take full advantage of multi processor systems. The released system is however\n  truly multi threaded and you will notice increased performance for many\n  applications already. We recommend that you evaluate your application on the\n  SMP version of the runtime system and wait for some more optimizations before\n  you use it in a real product. You will then discover if there are any problems\n  in your application that needs to be fixed in order for it to work properly in\n  a multi threaded environment. More optimized versions of the runtime system\n  with SMP support will be included in the R11B maintenance releases.\n\n  The SMP enabled runtime system will be started if the `-smp` command line\n  argument is passed to the `erl` command. In order to make use of more than one\n  processor core, multiple scheduler threads are used. By default, the number of\n  scheduler threads will equal the number of processor cores. The number of\n  scheduler threads can be set with the `+S` command line argument. For more\n  information see the [erl](erl_cmd.md) man page.\n\n  A runtime system with SMP support is by default built on the following\n  platforms if posix threads, and a gcc compiler of at least version 2.95 is\n  found:\n\n  - Linux with at least kernel version 2.6 and the Native POSIX Thread Library\n    on x86, x86_64, and 32-bits PowerPC.\n  - Solaris of at least version 8 on 32-bits SPARC-V9.\n  - MacOSX of at least version 10.4 (Darwin 8.0) on 32-bits PowerPC.\n\n  The runtime system with SMP support is known _not_ to build on:\n\n  - Windows.\n  - Linux with kernel versions less than 2.4, or without the Native POSIX Thread\n    Library.\n  - Other hardware platforms than x86, x86_64, 32-bits SPARC-V9 and 32-bits\n    PowerPC.\n\n  Windows will be supported in a future release.\n\n  The runtime system with SMP support might build on other operating systems in\n  combination with supported hardware. In order to force a build of a runtime\n  system with SMP support, pass the `--enable-smp-support` command line argument\n  to configure. Note, however, that it is not enough that it builds. The\n  underlying thread library and operating system has to provide SMP support as\n  well. If the thread library does not distribute scheduler threads over\n  multiple processor cores then the runtime system will only seemingly provide\n  SMP support. If the runtime system is not built by default on a specific\n  platform, we have _not_ tested it on that platform.\n\n  _NOTE_: The design of SMP support for drivers is ongoing. There will probably\n  be incompatible driver changes (only affecting drivers run on the runtime\n  system with SMP support) released as patches for R11B.\n\n  _Potential incompatibility_: Previously, specific driver call-backs were\n  always called from the same thread. This is _not_ true in the runtime system\n  with SMP support. Calls to call-backs will be made from different threads,\n  e.g., two consecutive calls to exactly the same call-back can be made from two\n  different threads. This will in _most_ cases not be a problem. All calls to\n  call-backs are synchronized, i.e., only one call-back will be called at a\n  time.\n\n  In the future the default behavior will _probably_ be the following: Calls to\n  call-backs will, as now, be made from different threads. Calls to call-backs\n  in the same driver _instance_ will be synchronized. It will probably be\n  possible to configure so that all calls to call-backs in all driver instances\n  of a specific driver type will be synchronized. It may be possible to\n  configure so that all calls to call-backs of a driver instance or a of a\n  specific driver type will be made from the same thread.\n\n  Parallelism in the Erlang code executed is a necessity for the Erlang runtime\n  system to be able to take advantage of multi-core or multi-processor hardware.\n  There need to be at least as many Erlang processes runnable as processor cores\n  for the Erlang runtime system to be able to take advantage of all processor\n  cores.\n\n  An Erlang runtime system with SMP support with only one Erlang process\n  runnable all the time will almost always be slower than the same Erlang\n  runtime system without SMP support. This is due to thread synchronization\n  overhead.\n\n  Known major bottleneck in the Erlang runtime system:\n\n  - Currently the I/O system uses one \"big lock\", i.e. only one thread can do\n    I/O at a time (with the exception of async threads and threads created by\n    users own linked-in drivers). This is high on the list of things to\n    optimize. Note, code that does not do I/O can be executed at the same time\n    as one thread does I/O.\n\n  Some pitfalls which might cause Erlang programs that work on the non-SMP\n  runtime system to fail on the SMP runtime system:\n\n  - A newly spawned process will often begin executing immediately. Code that\n    expects that the parent process will be able to execute for a while before\n    the child process begins executing is likely to fail.\n  - High priority processes could previously provide mutual exclusion (bad\n    programming style) by preventing normal and low priority processes from\n    being run. High priority processes cannot be used this way to provide mutual\n    exclusion.\n  - `erlang:yield()` could be used to provide some kind of temporary mutual\n    exclusion (also bad programming style). `erlang:yield()` cannot be used to\n    provide any kind of mutual exclusion.\n  - Obscure pitfall, only if a process being traced also sends normal messages\n    to the tracer:  \n      The order between trace messages and normal messages is undefined. I.e.\n    the order between normal messages sent from a tracee to a tracer and the\n    trace messages generated from the same tracee to the same tracer is\n    undefined. The internal order of normal messages and the internal order of\n    trace messages will, of course, be preserved as before.\n\n  The kernel poll feature is currently not supported by the runtime system with\n  SMP support. It will probably be supported in a future release.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6006 Aux Id: OTP-6095\n\n- Linked-in driver modifications.\n\n  - Linked-in drivers must be recompiled.\n  - The `refc` field in the `ErlDrvBinary` type has been removed. The reference\n    count can be accessed via API functions. For more information see the\n    `erl_driver(3)` man page.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6095 Aux Id: OTP-6006","ref":"notes.html#improvements-and-new-features-117"},{"type":"extras","title":"ERTS 5.4.13 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Large files (more than 2 GBytes) are now handled on Solaris 8.\n\n  Own Id: OTP-5849 Aux Id: seq10157\n\n- A failing bit syntax construction could fail with the PREVIOUS exception\n  reason that had occurred in the process (instead of with `badarg`).\n\n  Own Id: OTP-5911\n\n- When building OTP, the Kernel application was built in both the primary and\n  secondary bootstrap steps, which would cause problems if OTP including its\n  bootstrap is checked into a version control system (such as CVS). (Thanks to\n  Sebastian Strollo.)\n\n  Own Id: OTP-5921\n\n- `binary_to_term(<<131,109,255,255,255,255)` and similar expressions used to\n  crash the emulator instead of causing a `badarg` exception. (Thanks to\n  Matthias Lang.)\n\n  Own Id: OTP-5933\n\n- `erlang:hibernate/3` could sometimes crash the emulator when no heap was\n  needed.\n\n  Own Id: OTP-5940\n\n- Execution of match specs could under rare circumstances cause the emulator to\n  dump core.\n\n  Execution of match specs could cause memory leaks in the hybrid emulator.\n\n  Own Id: OTP-5955\n\n- A bug in `erlang:trace_info/2` when getting info for a function in a deleted\n  module resulting in an emulator crash, has been corrected.\n\n  Own Id: OTP-5957\n\n- Different (and old) `config.guess` files in the ERTS and Erl_Interface\n  applications would cause build problems on the new Intel-based iMacs. (Thanks\n  to Sebastion Strollo.)\n\n  Own Id: OTP-5967\n\n- pthread header and library mismatch on Linux systems (at least some SuSE and\n  Debian) with both NPTL and Linuxthreads libraries installed.\n\n  Own Id: OTP-5981","ref":"notes.html#fixed-bugs-and-malfunctions-356"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The driver_set_timer did not change the previous timeout if called a second\n  time. Now it works as specified, changing the timeout.\n\n  Own Id: OTP-5942\n\n- The undocumented `{packet,http}` option (for the `gen_tcp` module) did not\n  work correctly when there were multiple continuation lines. (Thanks to Per\n  Hedeland.)\n\n  Own Id: OTP-5945\n\n- The setuid_socket_wrap program was corrected to work for C compilers that\n  treat the `char` type as unsigned. (Thanks to Magnus Henoch.)\n\n  Own Id: OTP-5946","ref":"notes.html#improvements-and-new-features-118"},{"type":"extras","title":"ERTS 5.4.12 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Fixed a minor build problem on Windows.\n\n  Own Id: OTP-5819 Aux Id: OTP-5382 OTP-5540 OTP-5577\n\n- The `delay_send` option for `gen_tcp` was broken on Windows.\n\n  Own Id: OTP-5822\n\n- If there were user-defined variables in the boot script, and their values were\n  not provided using the `-boot_var` option, the emulator would refuse to start\n  with a confusing error message. Corrected to show a clear, understandable\n  message.\n\n  The `prim_file` module was modified to not depend on the `lists` module, to\n  make it possible to start the emulator using a user-defined loader. (Thanks to\n  Martin Bjorklund.)\n\n  Own Id: OTP-5828 Aux Id: seq10151","ref":"notes.html#fixed-bugs-and-malfunctions-357"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The HiPE compiler identifies more leaf functions, giving slightly faster code.\n\n  Corrected problems in HiPE's coalescing register allocating that would cause\n  it to fail when compiling very large functions (e.g. some of parse modules in\n  the Megaco application).\n\n  Own Id: OTP-5853","ref":"notes.html#improvements-and-new-features-119"},{"type":"extras","title":"ERTS 5.4.11 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Timers could sometimes timeout too early. This bug has now been fixed.\n\n  Automatic cancellation of timers created by\n  `erlang:send_after(Time,pid(),Msg)` and `erlang:start_timer(Time,pid(),Msg)`\n  has been introduced. Timers created with the receiver specified by a pid, will\n  automatically be cancelled when the receiver exits. For more information see\n  the `m:erlang` man page.\n\n  In order to be able to maintain a larger amount of timers without increasing\n  the maintenance cost, the internal timer wheel and bif timer table have been\n  enlarged.\n\n  Also a number of minor bif timer optimizations have been implemented.\n\n  Own Id: OTP-5795 Aux Id: OTP-5090, seq8913, seq10139, OTP-5782\n\n- `erlang:monitor(process,Pid)` hanged if `Pid` referred to a process on a\n  non-existing node with the same nodename as the nodename of node on which the\n  call was made. This bug has now been fixed.\n\n  Own Id: OTP-5827","ref":"notes.html#fixed-bugs-and-malfunctions-358"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- By setting Unix environment variables, the priority for the emulator can be\n  lowered when it is writing crash dumps and the time allowed for finishing\n  writing a crash dump can be set to a certain number of seconds. See the\n  documentation for `erl` in the ERTS application. (Also, a few other previously\n  undocumented environment variables are now documented.)\n\n  Own Id: OTP-5818\n\n- Documentation improvements:\n\n  \\- documentation for `erlang:link/1` corrected\n\n  \\- command line flag `-code_path_cache` added\n\n  \\- `erl` command line flags clarifications\n\n  \\- `m:net_kernel` clarifications\n\n  Own Id: OTP-5847","ref":"notes.html#improvements-and-new-features-120"},{"type":"extras","title":"ERTS 5.4.10 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- \\-D_GNU_SOURCE is now always passed on the compile command line on linux. This\n  in order to ensure that all included system headers see \\_GNU_SOURCE defined.\n\n  \\_GNU_SOURCE is now also defined on linux in configure when looking for\n  features.\n\n  Some minor (harmless) configure bugs were also fixed.\n\n  Own Id: OTP-5749\n\n- Some compiler warnings and Dialyzer warnings were eliminated in the Tools\n  application.\n\n  When tracing to a port (which `fprof` does), there could be fake schedule\n  out/schedule in messages sent for a process that had exited.\n\n  Own Id: OTP-5757","ref":"notes.html#fixed-bugs-and-malfunctions-359"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The BIFs [`iolist_size/1`](`iolist_size/1`) and\n  [`iolist_to_binary/1`](`iolist_to_binary/1`) has been added.\n\n  The BIF [`list_to_existing_atom/1`](`list_to_existing_atom/1`) has been added.\n\n  Minor bug fix: The exception reason could be changed to `error` inside nested\n  try/catch constructs if the `erlang:raise/3` BIF was called with an empty\n  stacktrace. (Calling `erlang:raise/3` with an empty stacktrace is NOT\n  recommended.)\n\n  Minor bugfix: On Windows, `file:open/2` will now return the documented error\n  reason `{error,eisdir}` if the filename refers to a directory (it used to\n  return `{error,eacces}`).\n\n  The message in the documentation for `erlang:system_monitor/2`, description of\n  `busy_dist_port`, was corrected.\n\n  Own Id: OTP-5709 Aux Id: seq10100\n\n- The previously undocumented and UNSUPPORTED `zlib` module has been updated in\n  an incompatible way and many bugs have been corrected. It is now also\n  documented.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-5715\n\n- New socket options `priority` and `tos` for platforms that support them\n  (currently only Linux).\n\n  Own Id: OTP-5756\n\n- Only the emulator is now linked with termcap library in order to decrease\n  library dependencies for other otp programs.\n\n  Own Id: OTP-5758","ref":"notes.html#improvements-and-new-features-121"},{"type":"extras","title":"ERTS 5.4.9.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-9-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The native resolver has gotten an control API for extended debugging and soft\n  restart. It is: `inet_gethost_native:control(Control)`  \n  `Control = {debug_level,Level} | soft_restart`  \n  `Level = integer() in the range 0-4`.\n\n  Own Id: OTP-5751 Aux Id: EABln25013","ref":"notes.html#fixed-bugs-and-malfunctions-360"},{"type":"extras","title":"ERTS 5.4.9.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-9-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- On VxWorks, epmd did not handle file descriptors with higher numbers than 63.\n  Also, if epmd should get a file descriptor with a number >= FD_SETSIZE, it\n  will close a the file descriptor and write a message to the log (instead of\n  mysteriously fail); the Erlang node that tried to register will fail with a\n  duplicate_name error (unfortunately, epmd has no way to indicate to the Erlang\n  node why the register attempt failed).\n\n  Own Id: OTP-5716 Aux Id: seq10070","ref":"notes.html#improvements-and-new-features-122"},{"type":"extras","title":"ERTS 5.4.9 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Timezone data is now initialized better. (was a problem at least on NetBSD\n  2.0.2) Thanks to Rich Neswold.\n\n  Own Id: OTP-5621\n\n- The hybrid-heap emulator ('erl -hybrid') is much more stable. We have\n  corrected all known bugs that caused it to dump core while running our test\n  suites.\n\n  Own Id: OTP-5634\n\n- Fixed rare memory leaks in `erlang:demonitor/1` when distributed monitors were\n  removed.\n\n  Own Id: OTP-5692\n\n- Processes were sometimes unnecessarily garbage collected when terminating.\n  These unnecessary garbage collections have now been eliminated.\n\n  Own Id: OTP-5693","ref":"notes.html#fixed-bugs-and-malfunctions-361"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The `c:i/0` function will now run in a paged mode if there are more than 100\n  processes in the system. (Thanks to Ulf Wiger.)\n\n  `erlang:system_info(process_count)` has been optimized and does now return\n  exactly the same value as [`length(processes())`](`length/1`). Previously\n  `erlang:system_info(process_count)` did not include exiting processes which\n  are included in [`length(processes())`](`length/1`).\n\n  The `+P` flag for `erl`, which sets the maximum number of processes allowed to\n  exist at the same, no longer accepts values higher than 134217727. (You will\n  still probably run out of memory before you'll be able to reach that limit.)\n\n  Own Id: OTP-5645 Aux Id: seq9984\n\n- The term-building driver functions `driver_output_term()` and\n  `driver_send_term()` have been updated:\n\n  The ERL_DRV_FLOAT type has been added.\n\n  For the ERL_DRV_BINARY type, the length and offset are now validated against\n  the length of the driver binary.\n\n  The ERL_DRV_PID type is now implemented (it was documented, but not\n  implemented).\n\n  Own Id: OTP-5674","ref":"notes.html#improvements-and-new-features-123"},{"type":"extras","title":"ERTS 5.4.8 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `ets:delete/1` now allows other Erlang process to run when a large table is\n  being deleted.\n\n  Own Id: OTP-5572\n\n- A bug regarding tcp sockets which results in hanging `gen_tcp:send/2` has been\n  corrected. To encounter this bug you needed one process that read from a\n  socket, one that wrote more date than the reader read out so the sender got\n  suspended, and then the reader closed the socket. (Reported and diagnosed by\n  Alexey Shchepin.)\n\n  Corrected a bug in the (undocumented and unsupported) option `{packet,http}`\n  for `gen_tcp.` (Thanks to Claes Wikstrom and Luke Gorrie.)\n\n  Updated the documentation regarding the second argument to `gen_tcp:recv/2`,\n  the `Length` to receive.\n\n  Own Id: OTP-5582 Aux Id: seq9839\n\n- Erlang/OTP will now build on Mac OS X 10.4 \"Tiger\" (the problem was that 10.4\n  has a partially implemented poll() function that can't handle devices). Also,\n  on Mac OS X 10.3 \"Panther\", Erlang/OTP will now use select() instead of poll()\n  (because poll() on Mac OS X 10.3 is implemented using select()).\n\n  Own Id: OTP-5595\n\n- A bug in the file driver when opening a file in compressed mode, and the\n  returned allocated pointer from the compressing library was in very high\n  memory (>= 2GB), causing e.g. `file:read/2` to return `{error,ebadf}`, has\n  been corrected.\n\n  Own Id: OTP-5618","ref":"notes.html#fixed-bugs-and-malfunctions-362"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The new fun `M:F/A` construct creates a fun that refers to the latest version\n  of `M:F/A.` This syntax is meant to replace tuple funs `{M,F}` which have many\n  problems.\n\n  The new type test [`is_function(Fun,A)`](`is_function/2`) (which may be used\n  in guards) test whether `Fun` is a fun that can be applied with `A` arguments.\n  (Currently, `Fun` can also be a tuple fun.)\n\n  Own Id: OTP-5584\n\n- In the HiPE application, there's a new experimental register allocator\n  (optimistic coalescing), and the linear scan register allocator is now also\n  available on ppc. Plus lots of cleanups.\n\n  Minor hybrid heap corrections.\n\n  The maximum size of a heap used to be artificially limited so that the size of\n  a heap would fit in 28 bits; that limitation could cause the emulator to\n  terminate in a garbage collection even if there still was available memory.\n  Now the largest heap size for a 32 bit CPU is 1,699,221,830 bytes. (Thanks to\n  Jesper Wilhelmsson.)\n\n  Also removed the undocumented `+H` emulator option.\n\n  Own Id: OTP-5596","ref":"notes.html#improvements-and-new-features-124"},{"type":"extras","title":"ERTS 5.4.7 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- `to_erl` could close unexpectedly on Linux systems. Also, output from the\n  emulator could be lost. Corrected.\n\n  Own Id: OTP-5561","ref":"notes.html#fixed-bugs-and-malfunctions-363"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The `cpu_timestamp` option for `erlang:trace/3` is now also supported on\n  Linux.\n\n  Own Id: OTP-5532 Aux Id: seq9813\n\n- The last known `werl` window size/position is now saved correctly when `werl`\n  is stopped with the window minimized. A problem with the placement not being\n  saved if the emulator is halted or stopped from the JCL menu has also been\n  fixed.\n\n  Own Id: OTP-5544 Aux Id: OTP-5522","ref":"notes.html#improvements-and-new-features-125"},{"type":"extras","title":"ERTS 5.4.6 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Some math libraries do not always throw floating-point exceptions on errors.\n  In order to be able to use these libraries, floating-point errors are now more\n  thoroughly checked.\n\n  Misc floating-point fixes for Linux and MacOSX.\n\n  Own Id: OTP-5467\n\n- An internal buffer was sometimes not cleared which caused garbage to appear in\n  error messages sent to the error logger.\n\n  `errno` was sometimes clobbered which caused erroneous error reports about\n  `poll()` errors.\n\n  Only emulators on unix platforms were affected by these bugs.\n\n  Own Id: OTP-5492\n\n- The ethread library now works on OpenBSD.\n\n  Own Id: OTP-5515\n\n- Corrected a bug in the (undocumented and unsupported) option `{packet,http}`\n  for `gen_tcp`. (Thanks to Claes Wikstrom and Luke Gorrie.)\n\n  Own Id: OTP-5519","ref":"notes.html#fixed-bugs-and-malfunctions-364"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- [`binary_to_term/1`](`binary_to_term/1`) could cause the emulator to crash\n  when given invalid pids or funs.\n\n  Own Id: OTP-5484 Aux Id: seq9801\n\n- Some more stability problems were fixed in the hybrid-heap emulator.\n\n  Own Id: OTP-5489\n\n- After `werl` was closed with the window minimized, it was not possible to\n  restart `werl` with an open window. A temporary solution has so far been\n  implemented that restores the initial window settings every time `werl` is\n  started.\n\n  Own Id: OTP-5522","ref":"notes.html#improvements-and-new-features-126"},{"type":"extras","title":"ERTS 5.4.5 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If a process had node links (created by [`monitor_node/2`](`monitor_node/2`)),\n  executing [`process_info(Pid,memory)`](`process_info/2`) for that process\n  would crash the emulator.\n\n  Own Id: OTP-5420\n\n- Minor corrections to the help text printed by `erlc -help`. The documentation\n  for `erlc` was also slightly updated.\n\n  Own Id: OTP-5428\n\n- 32-bit words were used for offsets in the garbage collector. This caused the\n  emulator to crash on 64-bit machines when heaps were moved more than 4 GB\n  during garbage collection.\n\n  Own Id: OTP-5430\n\n- [`is_boolean(42.5)`](`is_boolean/1`) failed to load if optimization was\n  explicitly turned off.\n\n  Own Id: OTP-5448\n\n- If there was a call to `Module:foo/X` from any loaded module, the returned by\n  `M:module_info(exports)` would always include `{foo,X}` (even though\n  `Module:foo/X` if was not defined).\n\n  Own Id: OTP-5450 Aux Id: seq9722","ref":"notes.html#fixed-bugs-and-malfunctions-365"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The `c` option for the `+B` flag has been introduced which makes it possible\n  to use Ctrl-C (Ctrl-Break on Windows) to interrupt the shell process rather\n  than to invoke the emulator break handler. All new `+B` options are also\n  supported on Windows (`werl`) as of now. Furthermore, Ctrl-C on Windows has\n  now been reserved for copying text (what Ctrl-Ins was used for previously).\n  Ctrl-Break should be used for break handling. Lastly, the documentation of the\n  system flags has been updated.\n\n  Own Id: OTP-5388","ref":"notes.html#improvements-and-new-features-127"},{"type":"extras","title":"ERTS 5.4.4 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The function `erlang:float/1` can now be used in match specifications and is\n  recognized by `dbg:fun2ms/1` and `ets:fun2ms/1`. This addition is part of the\n  work to \"harmonize\" match specification guards with Erlang guards.\n\n  Own Id: OTP-5297 Aux Id: OTP-4927\n\n- The [`register/2`](`register/2`) BIF would return `true` even if the second\n  argument was not a pid for living process. Corrected to cause an exception.\n\n  Own Id: OTP-5324 Aux Id: seq9698\n\n- In the 'bag' type of ets tables, elements having the same key were supposed to\n  be order in insertion order. The would be wrong if a rehash occurred.\n\n  Own Id: OTP-5340 Aux Id: seq9704\n\n- Linked in drivers in the Crypto and Asn1 applications are now compiled with\n  the `-D_THREAD_SAFE` and `-D_REENTRANT` switches on unix when the emulator has\n  thread support enabled.\n\n  Linked in drivers on MacOSX are not compiled with the undocumented\n  `-lbundle1.o` switch anymore. Thanks to Sean Hinde who sent us a patch.\n\n  Linked in driver in Crypto, and port programs in SSL, now compiles on OSF1.\n\n  Minor makefile improvements in Runtime_Tools.\n\n  Own Id: OTP-5346\n\n- Fixed a bug in the hybrid heap in distributed send operations.\n\n  Own Id: OTP-5361\n\n- A BIF `erlang:raise/3` has been added. See the manual for details. It is\n  intended for internal system programming only, advanced error handling.\n\n  Own Id: OTP-5376 Aux Id: OTP-5257\n\n- Mikael Pettersson (HiPE) corrected a few bugs in the emulator that caused\n  problems when compiled with the experimental gcc-4.0.0.\n\n  Own Id: OTP-5386","ref":"notes.html#fixed-bugs-and-malfunctions-366"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Minor update of the internal documentation of the `epmd` protocol.\n\n  The listen port of `epmd` has now been registered at IANA:\n  [http://www.iana.org/assignments/port-numbers](http://www.iana.org/assignments/port-numbers).\n\n  Own Id: OTP-5234\n\n- `run_erl.c` now works on Mac OS X and FreeBSD.\n\n  Own Id: OTP-5384\n\n- A few bugs were corrected in the HiPE application.\n\n  Own Id: OTP-5385","ref":"notes.html#improvements-and-new-features-128"},{"type":"extras","title":"ERTS 5.4.3 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- Font and color preferences for `werl.exe` now can be saved even after the\n  first time you run `werl.exe`. The window position and size is also saved.\n  Patch from James Hague who did all the hard work.\n\n  Own Id: OTP-5250\n\n- OTP archive libraries, e.g. the `erl_interface` library, on MacOSX could not\n  be used without first rerunning `ranlib` on them. This bug has now been fixed.\n\n  Own Id: OTP-5274\n\n- Bugs in `erlang:hash/2` and `erlang:phash/2` on 64-bit platforms have been\n  fixed.\n\n  Own Id: OTP-5292","ref":"notes.html#fixed-bugs-and-malfunctions-367"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- Corrected a crash in the 64-bits emulator.\n\n  Corrected a problem in the hybrid heap emulator.\n\n  In the chapter about the abstract format in the ERTS User's Guide, updated the\n  last section about how the abstract format is stored in BEAM files.\n\n  Own Id: OTP-5262\n\n- The maximum number of concurrent threads in the internal ethread thread\n  package has been limited to 2048.\n\n  Own Id: OTP-5280","ref":"notes.html#improvements-and-new-features-129"},{"type":"extras","title":"ERTS 5.4.2.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-2-1"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- If Erlang/OTP was installed in a short directory name, such as\n  `C:\\Program\\erl5.4.2`, the emulator would not start.\n\n  Own Id: OTP-5254","ref":"notes.html#improvements-and-new-features-130"},{"type":"extras","title":"ERTS 5.4.2 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- If one used `select/3` and `select/1` on a non-fixed ETS table and deleted\n  objects simultaneously, the emulator could crash. Note that the result of such\n  simultaneous operations on tables that are not in a fixed state is still\n  undefined, but the emulator crash is, needless to say, fixed.\n\n  Own Id: OTP-5209 Aux Id: seq9198\n\n- Arithmetic with big numbers could crash the emulator.\n\n  The HiPE native code compiler and run-time code in the emulator has been\n  updated. (Note: Native code is still not supported.)\n\n  Eliminated a few bugs that could crash the hybrid emulator (which is not\n  supported).\n\n  Own Id: OTP-5233 Aux Id: seq9587","ref":"notes.html#fixed-bugs-and-malfunctions-368"},{"type":"extras","title":"ERTS 5.4.1 - ERTS Release Notes","doc":"","ref":"notes.html#erts-5-4-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - ERTS Release Notes","doc":"- The ethread library was unnecessarily rebuilt multiple times during the build\n  process, also a debug version of the library was build during the install\n  phase. These unnecessary builds have now been removed. Note, the content of\n  the installed Erlang/OTP system is not effected at all by this change.\n\n  Own Id: OTP-5203\n\n- The emulator could fail to clear the memory segment cache. This could\n  potentially cause memory allocation to unnecessarily fail when memory usage\n  was close to its maximum. This bug has now been fixed.\n\n  Own Id: OTP-5211\n\n- std_alloc (std short for standard) was sometimes called def_alloc (def short\n  for default). std_alloc is now everywhere referred to as std_alloc.\n\n  Own Id: OTP-5216\n\n- A documentation bug has been corrected in the `erts_alloc(3)` documentation.\n  It was stated that some of the memory allocators present were by default\n  disabled. This is true for Erlang/OTP R9C, but is not true for Erlang/OTP\n  R10B. In R10B all memory allocators present are enabled by default.\n\n  Own Id: OTP-5217","ref":"notes.html#fixed-bugs-and-malfunctions-369"},{"type":"extras","title":"Improvements and New Features - ERTS Release Notes","doc":"- The emulator now close all open files and sockets immediately after receiving\n  an USR1 signal. This causes the emulator to unregister at `epmd` as early as\n  possible.\n\n  Own Id: OTP-5221 Aux Id: OTP-4985, seq9514\n\n- Try/catch support in the emulator slightly updated.\n\n  Own Id: OTP-5229","ref":"notes.html#improvements-and-new-features-131"},{"type":"extras","title":"Introduction","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Introduction","ref":"introduction.html"},{"type":"extras","title":"Scope - Introduction","doc":"The Erlang Runtime System Application, ERTS, contains functionality necessary to\nrun the Erlang system.","ref":"introduction.html#scope"},{"type":"extras","title":"Prerequisites - Introduction","doc":"It is assumed that the reader is familiar with the Erlang programming language.","ref":"introduction.html#prerequisites"},{"type":"extras","title":"Communication in Erlang","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Communication in Erlang\n\nCommunication in Erlang is conceptually performed using asynchronous signaling.\nAll different executing entities, such as processes and ports, communicate\nthrough asynchronous signals. The most commonly used signal is a message. Other\ncommon signals are exit, link, unlink, monitor, and demonitor signals.","ref":"communication.html"},{"type":"extras","title":"Passing of Signals - Communication in Erlang","doc":"This information has been moved to the\n[_Signals_ section of the _Processes_ chapter in the _Erlang Reference Manual_](`e:system:ref_man_processes.md#signal-delivery`).","ref":"communication.html#passing-of-signals"},{"type":"extras","title":"Synchronous Communication - Communication in Erlang","doc":"This information has been moved to the\n[_Signals_ section of the _Processes_ chapter in the _Erlang Reference Manual_](`e:system:ref_man_processes.md#sync-comm`).","ref":"communication.html#synchronous-communication"},{"type":"extras","title":"Implementation - Communication in Erlang","doc":"The implementation of different asynchronous signals in the virtual machine can\nvary over time, but the behavior always respects this concept of asynchronous\nsignals being passed between entities as described above.\n\nBy inspecting the implementation, you might notice that some specific signal\ngives a stricter guarantee than described above. It is of vital importance that\nsuch knowledge about the implementation is _not_ used by Erlang code, as the\nimplementation can change at any time without prior notice.\n\nExamples of major implementation changes:\n\n- As from ERTS 5.5.2 exit signals to processes are truly asynchronously\n  delivered.\n- As from ERTS 5.10 all signals from processes to ports are truly asynchronously\n  delivered.","ref":"communication.html#implementation"},{"type":"extras","title":"Time and Time Correction in Erlang","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Time and Time Correction in Erlang","ref":"time_correction.html"},{"type":"extras","title":"Extended Time Functionality - Time and Time Correction in Erlang","doc":"As of Erlang/OTP 18 (ERTS 7.0) the time functionality was extended. This\nincludes a [new API](time_correction.md#new-time-api) for time and\n[time warp modes](time_correction.md#time-warp-modes) that change the system\nbehavior when system time changes.\n\n> #### Note {: .info }\n>\n> As of Erlang/OTP 26 (ERTS 14.0) the\n> [multi time warp mode](time_correction.md#multi-time-warp-mode) is enabled by\n> default. This assumes that all code executing on the system is\n> [time warp safe](time_correction.md#time-warp-safe-code).\n>\n> If you have old code in the system that is not time warp safe, you now\n> explicitly need to start the system in\n> [no time warp mode](time_correction.md#no-time-warp-mode) (or\n> [singe time warp mode](time_correction.md#single-time-warp-mode) if it is\n> partially time warp safe) in order to avoid problems. When starting the system\n> in no time warp mode, the system behaves as it did prior to the introduction\n> of the extended time functionality introduced in OTP 18.\n>\n> If you have code that is not time warp safe, you are strongly encouraged to\n> change this so that you can use multi time warp mode. Compared to no time warp\n> mode, multi time warp mode improves scalability and performance as well as\n> accuracy and precision of time measurements.","ref":"time_correction.html#extended-time-functionality"},{"type":"extras","title":"Terminology - Time and Time Correction in Erlang","doc":"To make it easier to understand this section, some terms are defined. This is a\nmix of our own terminology (Erlang/OS system time, Erlang/OS monotonic time,\ntime warp) and globally accepted terminology.","ref":"time_correction.html#terminology"},{"type":"extras","title":"Monotonically Increasing - Time and Time Correction in Erlang","doc":"In a monotonically increasing sequence of values, all values that have a\npredecessor are either larger than or equal to its predecessor.","ref":"time_correction.html#monotonically-increasing"},{"type":"extras","title":"Strictly Monotonically Increasing - Time and Time Correction in Erlang","doc":"In a strictly monotonically increasing sequence of values, all values that have\na predecessor are larger than its predecessor.","ref":"time_correction.html#strictly-monotonically-increasing"},{"type":"extras","title":"UT1 - Time and Time Correction in Erlang","doc":"Universal Time. UT1 is based on the rotation of the earth and conceptually means\nsolar time at 0° longitude.","ref":"time_correction.html#ut1"},{"type":"extras","title":"UTC - Time and Time Correction in Erlang","doc":"Coordinated Universal Time. UTC almost aligns with\n[UT1](time_correction.md#ut1). However, UTC uses the SI definition of a second,\nwhich has not exactly the same length as the second used by UT1. This means that\nUTC slowly drifts from UT1. To keep UTC relatively in sync with UT1, leap\nseconds are inserted, and potentially also deleted. That is, an UTC day can be\n86400, 86401, or 86399 seconds long.","ref":"time_correction.html#utc"},{"type":"extras","title":"POSIX Time - Time and Time Correction in Erlang","doc":"Time since\n[Epoch](http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap03.html#tag_21_03_00_17).\nEpoch is defined to be 00:00:00 [UTC](time_correction.md#utc), 1970-01-01.\n[A day in POSIX time](http://pubs.opengroup.org/onlinepubs/009604499/basedefs/xbd_chap04.html#tag_04_14)\nis defined to be exactly 86400 seconds long. Strangely enough, Epoch is defined\nto be a time in UTC, and UTC has another definition of how long a day is.\nQuoting the Open Group\n[\"POSIX time is therefore not necessarily UTC, despite its appearance\"](http://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_15).\nThe effect of this is that when an UTC leap second is inserted, POSIX time\neither stops for a second, or repeats the last second. If an UTC leap second\nwould be deleted (which has not happened yet), POSIX time would make a one\nsecond leap forward.","ref":"time_correction.html#posix-time"},{"type":"extras","title":"Time Resolution - Time and Time Correction in Erlang","doc":"The shortest time interval that can be distinguished when reading time values.","ref":"time_correction.html#time-resolution"},{"type":"extras","title":"Time Precision - Time and Time Correction in Erlang","doc":"The shortest time interval that can be distinguished repeatedly and reliably\nwhen reading time values. Precision is limited by the\n[resolution](time_correction.md#time-resolution), but resolution and precision\ncan differ significantly.","ref":"time_correction.html#time-precision"},{"type":"extras","title":"Time Accuracy - Time and Time Correction in Erlang","doc":"The correctness of time values.","ref":"time_correction.html#time-accuracy"},{"type":"extras","title":"Time Warp - Time and Time Correction in Erlang","doc":"A time warp is a leap forwards or backwards in time. That is, the difference of\ntime values taken before and after the time warp does not correspond to the\nactual elapsed time.","ref":"time_correction.html#time-warp"},{"type":"extras","title":"OS System Time - Time and Time Correction in Erlang","doc":"The operating systems view of [POSIX time](time_correction.md#posix-time). To\nretrieve it, call [`os:system_time()`](`os:system_time/0`). This may or may not\nbe an accurate view of POSIX time. This time may typically be adjusted both\nbackwards and forwards without limitation. That is,\n[time warps](time_correction.md#time-warp) may be observed.\n\nTo get information about the Erlang runtime system's source of OS system time,\ncall\n[`erlang:system_info(os_system_time_source)`](`m:erlang#system_info_os_system_time_source`).","ref":"time_correction.html#os-system-time"},{"type":"extras","title":"OS Monotonic Time - Time and Time Correction in Erlang","doc":"A monotonically increasing time provided by the OS. This time does not leap and\nhas a relatively steady frequency although not completely correct. However, it\nis not uncommon that OS monotonic time stops if the system is suspended. This\ntime typically increases since some unspecified point in time that is not\nconnected to [OS system time](time_correction.md#os-system-time). This type of\ntime is not necessarily provided by all OSs.\n\nTo get information about the Erlang runtime system's source of OS monotonic\ntime, call\n[`erlang:system_info(os_monotonic_time_source)`](`m:erlang#system_info_os_monotonic_time_source`).","ref":"time_correction.html#os-monotonic-time"},{"type":"extras","title":"Erlang System Time - Time and Time Correction in Erlang","doc":"The Erlang runtime systems view of [POSIX time](time_correction.md#posix-time).\nTo retrieve it, call [`erlang:system_time()`](`erlang:system_time/0`).\n\nThis time may or may not be an accurate view of POSIX time, and may or may not\nalign with [OS system time](time_correction.md#os-system-time). The runtime\nsystem works towards aligning the two system times. Depending on the\n[time warp mode](time_correction.md#time-warp-modes) used, this can be achieved\nby letting Erlang system time perform a\n[time warp](time_correction.md#time-warp).","ref":"time_correction.html#erlang-system-time"},{"type":"extras","title":"Erlang Monotonic Time - Time and Time Correction in Erlang","doc":"A monotonically increasing time provided by the Erlang runtime system. Erlang\nmonotonic time increases since some unspecified point in time. To retrieve it,\ncall [`erlang:monotonic_time()`](`erlang:monotonic_time/0`).\n\nThe [accuracy](time_correction.md#time-accuracy) and\n[precision](time_correction.md#time-precision) of Erlang monotonic time heavily\ndepends on the following:\n\n- Accuracy and precision of\n  [OS monotonic time](time_correction.md#os-monotonic-time)\n- Accuracy and precision of [OS system time](time_correction.md#os-system-time)\n- [time warp mode](time_correction.md#time-warp-modes) used\n\nOn a system without OS monotonic time, Erlang monotonic time guarantees\nmonotonicity, but cannot give other guarantees. The frequency adjustments made\nto Erlang monotonic time depend on the time warp mode used.\n\nInternally in the runtime system, Erlang monotonic time is the \"time engine\"\nthat is used for more or less everything that has anything to do with time. All\ntimers, regardless of it is a `receive ... after` timer, BIF timer, or a timer\nin the `m:timer` module, are triggered relative Erlang monotonic time. Even\n[Erlang system time](time_correction.md#erlang-system-time) is based on Erlang\nmonotonic time. By adding current Erlang monotonic time with current time\noffset, you get current Erlang system time.\n\nTo retrieve the current time offset, call `erlang:time_offset/0`.","ref":"time_correction.html#erlang-monotonic-time"},{"type":"extras","title":"Timers - Time and Time Correction in Erlang","doc":"All timers are triggered relative Erlang monotonic time. All timers currently\nhave millisecond resolution both in the API and internally in the runtime\nsystem. That is, resolution (as well as precision and accuracy) will not be\nhigher than millisecond. If [Erlang monotonic time](#erlang-monotonic-time) has\na lower resolution than millisecond, the timer resolution will be lower than\nmillisecond as well.\n\nTimers can only be triggered on whole milliseconds since [the runtime\nsystem start](`m:erlang#system_info_start_time`). A timer is not allowed to\ntrigger before the timeout time given by the user. That is, assuming that the\nsystem is *not* heavily loaded, a timer will typically be triggered in the range\n[`T`, `T+1`) milliseconds when the user has given the timeout time `T`. If the\nsystem is heavily loaded, it may take an even longer time until a timer is\ntriggered.","ref":"time_correction.html#timers"},{"type":"extras","title":"Introduction - Time and Time Correction in Erlang","doc":"Time is vital to an Erlang program and, more importantly, _correct_ time is\nvital to an Erlang program. As Erlang is a language with soft real-time\nproperties and we can express time in our programs, the Virtual Machine and the\nlanguage must be careful about what is considered a correct time and in how time\nfunctions behave.\n\nWhen Erlang was designed, it was assumed that the wall clock time in the system\nshowed a monotonic time moving forward at exactly the same pace as the\ndefinition of time. This more or less meant that an atomic clock (or better time\nsource) was expected to be attached to your hardware and that the hardware was\nthen expected to be locked away from any human tinkering forever. While this can\nbe a compelling thought, it is simply never the case.\n\nA \"normal\" modern computer cannot keep time, not on itself and not unless you\nhave a chip-level atomic clock wired to it. Time, as perceived by your computer,\nmust normally be corrected. Hence the Network Time Protocol (NTP) protocol,\ntogether with the `ntpd` process, does its best to keep your computer time in\nsync with the correct time. Between NTP corrections, usually a less potent\ntime-keeper than an atomic clock is used.\n\nHowever, NTP is not fail-safe. The NTP server can be unavailable, `ntp.conf` can\nbe wrongly configured, or your computer can sometimes be disconnected from\nInternet. Furthermore, you can have a user (or even system administrator) who\nthinks the correct way to handle Daylight Saving Time is to adjust the clock one\nhour two times a year (which is the incorrect way to do it). To complicate\nthings further, this user fetched your software from Internet and has not\nconsidered what the correct time is as perceived by a computer. The user does\nnot care about keeping the wall clock in sync with the correct time. The user\nexpects your program to have unlimited knowledge about the time.\n\nMost programmers also expect time to be reliable, at least until they realize\nthat the wall clock time on their workstation is off by a minute. Then they set\nit to the correct time, but most probably not in a smooth way.\n\nThe number of problems that arise when you always expect the wall clock time on\nthe system to be correct can be immense. Erlang therefore introduced the\n\"corrected estimate of time\", or the \"time correction\", many years ago. The time\ncorrection relies on the fact that most operating systems have some kind of\nmonotonic clock, either a real-time extension or some built-in \"tick counter\"\nthat is independent of the wall clock settings. This counter can have\nmicrosecond resolution or much less, but it has a drift that cannot be ignored.","ref":"time_correction.html#introduction"},{"type":"extras","title":"Time Correction - Time and Time Correction in Erlang","doc":"If time correction is enabled, the Erlang runtime system makes use of both\n[OS system time](time_correction.md#os-system-time) and\n[OS monotonic time](time_correction.md#os-monotonic-time), to adjust the\nfrequency of the Erlang monotonic clock. Time correction ensures that\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time) does not warp\nand that the frequency is relatively accurate. The type of frequency adjustments\ndepends on the time warp mode used. Section\n[Time Warp Modes](time_correction.md#time-warp-modes) provides more details.\n\nBy default time correction is enabled if support for it exists on the specific\nplatform. Support for it includes both OS monotonic time, provided by the OS,\nand an implementation in the Erlang runtime system using OS monotonic time. To\ncheck if your system has support for OS monotonic time, call\n[`erlang:system_info(os_monotonic_time_source)`](`m:erlang#system_info_os_monotonic_time_source`).\nTo check if time correction is enabled on your system, call\n[`erlang:system_info(time_correction)`](`m:erlang#system_info_time_correction`).\n\nTo enable or disable time correction, pass command-line argument\n[`+c [true|false]`](erl_cmd.md#+c) to [`erl(1)`](erl_cmd.md).\n\nIf time correction is disabled, Erlang monotonic time can warp forwards or stop,\nor even freeze for extended periods of time. There are then no guarantees that\nthe frequency of the Erlang monotonic clock is accurate or stable.\n\n_You typically never want to disable time correction_. Previously a performance\npenalty was associated with time correction, but nowadays it is usually the\nother way around. If time correction is disabled, you probably get bad\nscalability, bad performance, and bad time measurements.","ref":"time_correction.html#time-correction"},{"type":"extras","title":"Time Warp Safe Code - Time and Time Correction in Erlang","doc":"Time warp safe code can handle a [time warp](time_correction.md#time-warp) of\n[Erlang system time](time_correction.md#erlang-system-time).\n\n`erlang:now/0` behaves bad when Erlang system time warps. When Erlang system\ntime does a time warp backwards, the values returned from `erlang:now/0` freeze\n(if you disregard the microsecond increments made because of the actual call)\nuntil OS system time reaches the point of the last value returned by\n`erlang:now/0`. This freeze can continue for a long time. It can take years,\ndecades, and even longer until the freeze stops.\n\nAll uses of `erlang:now/0` are not necessarily time warp unsafe. If you do not\nuse it to get time, it is time warp safe. However, _all uses of `erlang:now/0`\nare suboptimal_ from a performance and scalability perspective. So you really\nwant to replace the use of it with other functionality. For examples of how to\nreplace the use of `erlang:now/0`, see section\n[How to Work with the New API](time_correction.md#Dos_and_Donts).","ref":"time_correction.html#time-warp-safe-code"},{"type":"extras","title":"Time Warp Modes - Time and Time Correction in Erlang","doc":"Current [Erlang system time](time_correction.md#erlang-system-time) is\ndetermined by adding the current\n[Erlang monotonic time](`erlang:monotonic_time/0`) with current\n[time offset](`erlang:time_offset/0`). The time offset is managed differently\ndepending on which time warp mode you use.\n\nTo set the time warp mode, pass command-line argument\n[`+C [no_time_warp|single_time_warp|multi_time_warp]`](erl_cmd.md#+C_) to\n[`erl(1)`](erl_cmd.md).","ref":"time_correction.html#time-warp-modes"},{"type":"extras","title":"No Time Warp Mode - Time and Time Correction in Erlang","doc":"The time offset is determined at runtime system start and does not change later.\nThis is the same behavior as was default prior to OTP 26 (ERTS 14.0), and the\nonly behavior prior to OTP 18 (ERTS 7.0).\n\nAs the time offset is not allowed to change, time correction must adjust the\nfrequency of the Erlang monotonic clock to align Erlang system time with OS\nsystem time smoothly. A significant downside of this approach is that we on\npurpose will use a faulty frequency on the Erlang monotonic clock if adjustments\nare needed. This error can be as large as 1%. This error will show up in all\ntime measurements in the runtime system.\n\nIf time correction is not enabled, Erlang monotonic time freezes when OS system\ntime leaps backwards. The freeze of monotonic time continues until OS system\ntime catches up. The freeze can continue for a long time. When OS system time\nleaps forwards, Erlang monotonic time also leaps forward.","ref":"time_correction.html#no-time-warp-mode"},{"type":"extras","title":"Single Time Warp Mode - Time and Time Correction in Erlang","doc":"This mode is more or less a backward compatibility mode as from its\nintroduction.\n\nOn an embedded system it is not uncommon that the system has no power supply,\nnot even a battery, when it is shut off. The system clock on such a system is\ntypically way off when the system boots. If\n[no time warp mode](time_correction.md#no-time-warp-mode) is used, and the\nErlang runtime system is started before OS system time has been corrected,\nErlang system time can be wrong for a long time, centuries or even longer.\n\nIf you need to use Erlang code that is not\n[time warp safe](time_correction.md#time-warp-safe-code), and you need to start\nthe Erlang runtime system before OS system time has been corrected, you may want\nto use the single time warp mode.\n\n> #### Note {: .info }\n>\n> There are limitations to when you can execute time warp unsafe code using this\n> mode. If it is possible to use time warp safe code only, it is _much_ better\n> to use the [multi-time warp mode](time_correction.md#multi-time-warp-mode)\n> instead.\n\nUsing the single time warp mode, the time offset is handled in two phases:\n\n- **Preliminary Phase** - This phase starts when the runtime system starts. A\n  preliminary time offset based on current OS system time is determined. This\n  offset is from now on to be fixed during the whole preliminary phase.\n\n  If time correction is enabled, adjustments to the Erlang monotonic clock are\n  made to keep its frequency as correct as possible. However, _no_ adjustments\n  are made trying to align Erlang system time and OS system time. That is,\n  during the preliminary phase Erlang system time and OS system time can diverge\n  from each other, and no attempt is made to prevent this.\n\n  If time correction is disabled, changes in OS system time affects the\n  monotonic clock the same way as when the\n  [no time warp mode](time_correction.md#no-time-warp-mode) is used.\n\n- **Final Phase** - This phase begins when the user finalizes the time offset by\n  calling\n  [`erlang:system_flag(time_offset, finalize)`](`m:erlang#system_flag_time_offset`).\n  The finalization can only be performed once.\n\n  During finalization, the time offset is adjusted and fixed so that current\n  Erlang system time aligns with the current OS system time. As the time offset\n  can change during the finalization, Erlang system time can do a time warp at\n  this point. The time offset is from now on fixed until the runtime system\n  terminates. If time correction has been enabled, the time correction from now\n  on also makes adjustments to align Erlang system time with OS system time.\n  When the system is in the final phase, it behaves exactly as in\n  [no time warp mode](time_correction.md#no-time-warp-mode).\n\nIn order for this to work properly, the user must ensure that the following two\nrequirements are satisfied:\n\n- **Forward Time Warp** - The time warp made when finalizing the time offset can\n  only be done forwards without encountering problems. This implies that the\n  user must ensure that OS system time is set to a time earlier or equal to\n  actual POSIX time before starting the Erlang runtime system.\n\n  If you are not sure that OS system time is correct, set it to a time that is\n  guaranteed to be earlier than actual POSIX time before starting the Erlang\n  runtime system, just to be safe.\n\n- **Finalize Correct OS System Time** - OS system time must be correct when the\n  user finalizes the time offset.\n\nIf these requirements are not fulfilled, the system may behave very bad.\n\nAssuming that these requirements are fulfilled, time correction is enabled, and\nOS system time is adjusted using a time adjustment protocol such as NTP, only\nsmall adjustments of Erlang monotonic time are needed to keep system times\naligned after finalization. As long as the system is not suspended, the largest\nadjustments needed are for inserted (or deleted) leap seconds.\n\n> #### Warning {: .warning }\n>\n> To use this mode, ensure that all Erlang code that will execute in both phases\n> is [time warp safe](time_correction.md#time-warp-safe-code).\n>\n> Code executing only in the final phase does not have to be able to cope with\n> the time warp.","ref":"time_correction.html#single-time-warp-mode"},{"type":"extras","title":"Multi-Time Warp Mode - Time and Time Correction in Erlang","doc":"_Multi-time warp mode in combination with time correction is the preferred\nconfiguration_. This as the Erlang runtime system have better performance, scale\nbetter, and behave better on almost all platforms. Also, the accuracy and\nprecision of time measurements are better. Only Erlang runtime systems executing\non ancient platforms benefit from another configuration. As of OTP 26 (ERTS\n14.0) this is also the default.\n\nThe time offset can change at any time without limitations. That is, Erlang\nsystem time can perform time warps both forwards and backwards at _any_ time. As\nwe align Erlang system time with OS system time by changing the time offset, we\ncan enable a time correction that tries to adjust the frequency of the Erlang\nmonotonic clock to be as correct as possible. This makes time measurements using\nErlang monotonic time more accurate and precise.\n\nIf time correction is disabled, Erlang monotonic time leaps forward if OS system\ntime leaps forward. If OS system time leaps backwards, Erlang monotonic time\nstops briefly, but it does not freeze for extended periods of time. This as the\ntime offset is changed to align Erlang system time with OS system time.\n\n> #### Warning {: .warning }\n>\n> To use this mode, ensure that all Erlang code that will execute on the runtime\n> system is [time warp safe](time_correction.md#time-warp-safe-code).","ref":"time_correction.html#multi-time-warp-mode"},{"type":"extras","title":"New Time API - Time and Time Correction in Erlang","doc":"The old time API is based on `erlang:now/0`. `erlang:now/0` was intended to be\nused for many unrelated things. This tied these unrelated operations together\nand caused issues with performance, scalability, accuracy, and precision for\noperations that did not need to have such issues. To improve this, the new API\nspreads different functionality over multiple functions.\n\nTo be backward compatible, `erlang:now/0` remains \"as is\", but _you are strongly\ndiscouraged from using it_. Many use cases of `erlang:now/0` prevents you from\nusing the new [multi-time warp mode](time_correction.md#multi-time-warp-mode),\nwhich is an important part of this new time functionality improvement.\n\nSome of the new BIFs on some systems, perhaps surprisingly, return negative\ninteger values on a newly started runtime system. This is not a bug, but a\nmemory use optimization.\n\nThe new API consists of the following new BIFs:\n\n- `erlang:convert_time_unit/3`\n- `erlang:monotonic_time/0`\n- `erlang:monotonic_time/1`\n- `erlang:system_time/0`\n- `erlang:system_time/1`\n- `erlang:time_offset/0`\n- `erlang:time_offset/1`\n- `erlang:timestamp/0`\n- `erlang:unique_integer/0`\n- `erlang:unique_integer/1`\n- `os:system_time/0`\n- `os:system_time/1`\n\nThe new API also consists of extensions of the following existing BIFs:\n\n- [`erlang:monitor(time_offset, clock_service)`](`erlang:monitor/2`)\n- [`erlang:system_flag(time_offset, finalize)`](`m:erlang#system_flag_time_offset`)\n- [`erlang:system_info(os_monotonic_time_source)`](`m:erlang#system_info_os_monotonic_time_source`)\n- [`erlang:system_info(os_system_time_source)`](`m:erlang#system_info_os_system_time_source`)\n- [`erlang:system_info(time_offset)`](`m:erlang#system_info_time_offset`)\n- [`erlang:system_info(time_warp_mode)`](`m:erlang#system_info_time_warp_mode`)\n- [`erlang:system_info(time_correction)`](`m:erlang#system_info_time_correction`)\n- [`erlang:system_info(start_time)`](`m:erlang#system_info_start_time`)\n- [`erlang:system_info(end_time)`](`m:erlang#system_info_end_time`)","ref":"time_correction.html#new-time-api"},{"type":"extras","title":"New Erlang Monotonic Time - Time and Time Correction in Erlang","doc":"Erlang monotonic time as such is new as from ERTS 7.0. It is introduced to\ndetach time measurements, such as elapsed time from calendar time. In many use\ncases there is a need to measure elapsed time or specify a time relative to\nanother point in time without the need to know the involved times in UTC or any\nother globally defined time scale. By introducing a time scale with a local\ndefinition of where it starts, time that do not concern calendar time can be\nmanaged on that time scale. Erlang monotonic time uses such a time scale with a\nlocally defined start.\n\nThe introduction of Erlang monotonic time allows us to adjust the two Erlang\ntimes (Erlang monotonic time and Erlang system time) separately. By doing this,\nthe accuracy of elapsed time does not have to suffer just because the system\ntime happened to be wrong at some point in time. Separate adjustments of the two\ntimes are only performed in the time warp modes, and only fully separated in the\n[multi-time warp mode](time_correction.md#multi-time-warp-mode). All other modes\nthan the multi-time warp mode are for backward compatibility reasons. When using\nthese modes, the accuracy of Erlang monotonic time suffer, as the adjustments of\nErlang monotonic time in these modes are more or less tied to Erlang system\ntime.\n\nThe adjustment of system time could have been made smother than using a time\nwarp approach, but we think that would be a bad choice. As we can express and\nmeasure time that is not connected to calendar time by the use of Erlang\nmonotonic time, it is better to expose the change in Erlang system time\nimmediately. This as the Erlang applications executing on the system can react\non the change in system time as soon as possible. This is also more or less\nexactly how most operating systems handle this (OS monotonic time and OS system\ntime). By adjusting system time smoothly, we would just hide the fact that\nsystem time changed and make it harder for the Erlang applications to react to\nthe change in a sensible way.\n\nTo be able to react to a change in Erlang system time, you must be able to\ndetect that it happened. The change in Erlang system time occurs when the\ncurrent time offset is changed. We have therefore introduced the possibility to\nmonitor the time offset using\n[`erlang:monitor(time_offset, clock_service)`](`erlang:monitor/2`). A process\nmonitoring the time offset is sent a message on the following format when the\ntime offset is changed:\n\n```text\n{'CHANGE', MonitorReference, time_offset, clock_service, NewTimeOffset}\n```","ref":"time_correction.html#new-erlang-monotonic-time"},{"type":"extras","title":"Unique Values - Time and Time Correction in Erlang","doc":"Besides reporting time, `erlang:now/0` also produces unique and strictly\nmonotonically increasing values. To detach this functionality from time\nmeasurements, we have introduced\n[`erlang:unique_integer()`](`erlang:unique_integer/1`).\n\n[](){: #Dos_and_Donts }","ref":"time_correction.html#unique-values"},{"type":"extras","title":"How to Work with the New API - Time and Time Correction in Erlang","doc":"Previously `erlang:now/0` was the only option for doing many things. This\nsection deals with some things that `erlang:now/0` can be used for, and how you\nuse the new API.\n\n#### Retrieve Erlang System Time\n\n> #### Dont {: .error }\n>\n> Use `erlang:now/0` to retrieve the current Erlang system time.\n\n> #### Do {: .tip }\n>\n> Use `erlang:system_time/1` to retrieve the current Erlang system time on the\n> [time unit](`t:erlang:time_unit/0`) of your choice.\n>\n> If you want the same format as returned by `erlang:now/0`, use\n> `erlang:timestamp/0`.\n\n#### Measure Elapsed Time\n\n> #### Dont {: .error }\n>\n> Take time stamps with `erlang:now/0` and calculate the difference in time with\n> `timer:now_diff/2`.\n\n> #### Do {: .tip }\n>\n> Take time stamps with `erlang:monotonic_time/0` and calculate the time\n> difference using ordinary subtraction. The result is in `native`\n> [time unit](`t:erlang:time_unit/0`). If you want to convert the result to\n> another time unit, you can use `erlang:convert_time_unit/3`.\n>\n> An easier way to do this is to use `erlang:monotonic_time/1` with the desired\n> time unit. However, you can then lose accuracy and precision.\n\n#### Determine Order of Events\n\n> #### Dont {: .error }\n>\n> Determine the order of events by saving a time stamp with `erlang:now/0` when\n> the event occurs.\n\n> #### Do {: .tip }\n>\n> Determine the order of events by saving the integer returned by\n> [`erlang:unique_integer([monotonic])`](`erlang:unique_integer/1`) when the\n> event occurs. These integers are strictly monotonically ordered on current\n> runtime system instance corresponding to creation time.\n\n#### Determine Order of Events with Time of the Event\n\n> #### Dont {: .error }\n>\n> Determine the order of events by saving a time stamp with `erlang:now/0` when\n> the event occurs.\n\n> #### Do {: .tip }\n>\n> Determine the order of events by saving a tuple containing\n> [monotonic time](`erlang:monotonic_time/0`) and a\n> [strictly monotonically increasing integer](`erlang:unique_integer/1`) as\n> follows:\n>\n> ```erlang\n> Time = erlang:monotonic_time(),\n> UMI = erlang:unique_integer([monotonic]),\n> EventTag = {Time, UMI}\n> ```\n>\n> These tuples are strictly monotonically ordered on the current runtime system\n> instance according to creation time. It is important that the monotonic time\n> is in the first element (the most significant element when comparing\n> two-tuples). Using the monotonic time in the tuples, you can calculate time\n> between events.\n>\n> If you are interested in Erlang system time at the time when the event\n> occurred, you can also save the time offset before or after saving the events\n> using `erlang:time_offset/0`. Erlang monotonic time added with the time offset\n> corresponds to Erlang system time.\n>\n> If you are executing in a mode where time offset can change, and you want to\n> get the actual Erlang system time when the event occurred, you can save the\n> time offset as a third element in the tuple (the least significant element\n> when comparing three-tuples).\n\n#### Create a Unique Name\n\n> #### Dont {: .error }\n>\n> Use the values returned from `erlang:now/0` to create a name unique on the\n> current runtime system instance.\n\n> #### Do {: .tip }\n>\n> Use the value returned from `erlang:unique_integer/0` to create a name unique\n> on the current runtime system instance. If you only want positive integers,\n> you can use [`erlang:unique_integer([positive])`](`erlang:unique_integer/1`).\n\n#### Seed Random Number Generation with a Unique Value\n\n> #### Dont {: .error }\n>\n> Seed random number generation using `erlang:now/0`.\n\n> #### Do {: .tip }\n>\n> Seed random number generation using a combination of\n> [`erlang:monotonic_time/0`](`erlang:monotonic_time/0`),\n> [`erlang:time_offset/0`](`erlang:time_offset/0`),\n> [`erlang:unique_integer/0`](`erlang:unique_integer/0`), and other\n> functionality.\n\nTo sum up this section: _Do not use `erlang:now/0`._","ref":"time_correction.html#how-to-work-with-the-new-api"},{"type":"extras","title":"Support of Both New and Old OTP Releases - Time and Time Correction in Erlang","doc":"It can be required that your code must run on a variety of OTP installations of\ndifferent OTP releases. If so, you cannot use the new API out of the box, as it\nwill not be available on releases before OTP 18. The solution is _not_ to avoid\nusing the new API, as your code would then not benefit from the scalability and\naccuracy improvements made. Instead, use the new API when available, and fall\nback on `erlang:now/0` when the new API is unavailable.\n\nFortunately most of the new API can easily be implemented using existing\nprimitives, except for:\n\n- [`erlang:system_info(start_time)`](`m:erlang#system_info_start_time`)\n- [`erlang:system_info(end_time)`](`m:erlang#system_info_end_time`)\n- [`erlang:system_info(os_monotonic_time_source)`](`m:erlang#system_info_os_monotonic_time_source`)\n- [`erlang:system_info(os_system_time_source)`](`m:erlang#system_info_os_system_time_source`)\n\nBy wrapping the API with functions that fall back on `erlang:now/0` when the new\nAPI is unavailable, and using these wrappers instead of using the API directly,\nthe problem is solved. These wrappers can, for example, be implemented as in\n[$ERL_TOP/erts/example/time_compat.erl](assets/time_compat.erl).","ref":"time_correction.html#support-of-both-new-and-old-otp-releases"},{"type":"extras","title":"Match Specifications in Erlang","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Match Specifications in Erlang\n\nA \"match specification\" (`match_spec`) is an Erlang term describing a small\n\"program\" that tries to match something. It can be used to either control\ntracing with `erlang:trace_pattern/3` or to search for objects in an ETS table\nwith for example `ets:select/2`. The match specification in many ways works like\na small function in Erlang, but is interpreted/compiled by the Erlang runtime\nsystem to something much more efficient than calling an Erlang function. The\nmatch specification is also very limited compared to the expressiveness of real\nErlang functions.\n\nThe most notable difference between a match specification and an Erlang fun is\nthe syntax. Match specifications are Erlang terms, not Erlang code. Also, a\nmatch specification has a strange concept of exceptions:\n\n- An exception (such as `badarg`) in the `MatchCondition` part, which resembles\n  an Erlang guard, generates immediate failure.\n- An exception in the `MatchBody` part, which resembles the body of an Erlang\n  function, is implicitly caught and results in the single atom `'EXIT'`.","ref":"match_spec.html"},{"type":"extras","title":"Grammar - Match Specifications in Erlang","doc":"A match specification used in tracing can be described in the following\n_informal_ grammar:\n\n- MatchExpression ::= [ MatchFunction, ... ]\n- MatchFunction ::= { MatchHead, MatchConditions, MatchBody }\n- MatchHead ::= MatchVariable | `'_'` | [ MatchHeadPart, ... ]\n- MatchHeadPart ::= [term()](`t:term/0`) | MatchVariable | `'_'`\n- MatchVariable ::= '$ '\n- MatchConditions ::= [ MatchCondition, ...] | `[]`\n- MatchCondition ::= { GuardFunction } | { GuardFunction,\n  ConditionExpression, ... }\n- BoolFunction ::= `is_atom` | `is_float` | `is_integer` | `is_list` |\n  `is_number` | `is_pid` | `is_port` | `is_reference` | `is_tuple` | `is_map` |\n  `is_map_key` | `is_binary` | `is_bitstring` | `is_boolean` | `is_function` |\n  `is_record` | `is_seq_trace` | `'and'` | `'or'` | `'not'` | `'xor'` |\n  `'andalso'` | `'orelse'`\n- ConditionExpression ::= ExprMatchVariable | { GuardFunction } | {\n  GuardFunction, ConditionExpression, ... } | TermConstruct\n- ExprMatchVariable ::= MatchVariable (bound in the MatchHead) | `'$_'` | `'$$'`\n- TermConstruct = {{}} | {{ ConditionExpression, ... }} | `[]` |\n  [ConditionExpression, ...] | `#{}` | #{[term()](`t:term/0`) => ConditionExpression, ...}\n  | NonCompositeTerm | Constant\n- NonCompositeTerm ::= [term()](`t:term/0`) (not list or tuple or map)\n- Constant ::= {`const`, [term()](`t:term/0`)}\n- GuardFunction ::= BoolFunction | `abs` | `element` | `hd` | `length` |\n  `map_get` | `map_size` | `max` | `min` | `node` | `float` | `round` | `floor`\n  | `ceil` | `size` | `bit_size` | `byte_size` | `tuple_size` | `tl` | `trunc` |\n  `binary_part` | `'+'` | `'-'` | `'*'` | `'div'` | `'rem'` | `'band'` | `'bor'`\n  | `'bxor'` | `'bnot'` | `'bsl'` | `'bsr'` | `'>'` | `'>='` | `'<'` | `'=<'` |\n  `'=:='` | `'=='` | `'=/='` | `'/='` | `self` | `get_tcw`\n- MatchBody ::= [ ActionTerm ]\n- ActionTerm ::= ConditionExpression | ActionCall\n- ActionCall ::= {ActionFunction} | {ActionFunction, ActionTerm, ...}\n- ActionFunction ::= `set_seq_token` | `get_seq_token` | `message` |\n  `return_trace` | `exception_trace` | `process_dump` | `enable_trace` |\n  `disable_trace` | `trace` | `display` | `caller` | `caller_line` |\n  `current_stacktrace` | `set_tcw` | `silent`\n\nA match specification used in `m:ets` can be described in the following\n_informal_ grammar:\n\n- MatchExpression ::= [ MatchFunction, ... ]\n- MatchFunction ::= { MatchHead, MatchConditions, MatchBody }\n- MatchHead ::= MatchVariable | `'_'` | { MatchHeadPart, ... }\n- MatchHeadPart ::= [term()](`t:term/0`) | MatchVariable | `'_'`\n- MatchVariable ::= '$ '\n- MatchConditions ::= [ MatchCondition, ...] | `[]`\n- MatchCondition ::= { GuardFunction } | { GuardFunction,\n  ConditionExpression, ... }\n- BoolFunction ::= `is_atom` | `is_float` | `is_integer` | `is_list` |\n  `is_number` | `is_pid` | `is_port` | `is_reference` | `is_tuple` | `is_map` |\n  `is_map_key` | `is_binary` | `is_bitstring` | `is_boolean` | `is_function` |\n  `is_record` | `'and'` | `'or'` | `'not'` | `'xor'` | `'andalso'` | `'orelse'`\n- ConditionExpression ::= ExprMatchVariable | { GuardFunction } | {\n  GuardFunction, ConditionExpression, ... } | TermConstruct\n- ExprMatchVariable ::= MatchVariable (bound in the MatchHead) | `'$_'` | `'$$'`\n- TermConstruct = {{}} | {{ ConditionExpression, ... }} | `[]` |\n  [ConditionExpression, ...] | #{} | #{[term()](`t:term/0`) => ConditionExpression, ...}\n  | NonCompositeTerm | Constant\n- NonCompositeTerm ::= [term()](`t:term/0`) (not list or tuple or map)\n- Constant ::= {`const`, [term()](`t:term/0`)}\n- GuardFunction ::= BoolFunction | `abs` | `element` | `hd` | `length` |\n  `map_get` | `map_size` | `max` | `min` | `node` | `float` | `round` | `floor`\n  | `ceil` | `size` | `bit_size` | `byte_size` | `tuple_size` | `tl` | `trunc` |\n  `binary_part` | `'+'` | `'-'` | `'*'` | `'div'` | `'rem'` | `'band'` | `'bor'`\n  | `'bxor'` | `'bnot'` | `'bsl'` | `'bsr'` | `'>'` | `'>='` | `'<'` | `'=<'` |\n  `'=:='` | `'=='` | `'=/='` | `'/='` | `self`\n- MatchBody ::= [ ConditionExpression, ... ]","ref":"match_spec.html#grammar"},{"type":"extras","title":"Function Descriptions - Match Specifications in Erlang","doc":"","ref":"match_spec.html#function-descriptions"},{"type":"extras","title":"Functions Allowed in All Types of Match Specifications - Match Specifications in Erlang","doc":"The functions allowed in `match_spec` work as follows:\n\n- **`is_atom`, `is_boolean`, `is_float`, `is_integer`, `is_list`, `is_number`,\n  `is_pid`, `is_port`, `is_reference`, `is_tuple`, `is_map`, `is_binary`,\n  `is_bitstring`, `is_function`** - Same as the corresponding guard tests in\n  Erlang, return `true` or `false`.\n\n- **`is_record`** - Takes an additional parameter, which _must_ be the result of\n  `record_info(size,  )`, like in\n  `{is_record, '$1', rectype, record_info(size, rectype)}`.\n\n- **`'not'`** - Negates its single argument (anything other than `false` gives\n  `false`).\n\n- **`'and'`** - Returns `true` if all its arguments (variable length argument\n  list) evaluate to `true`, otherwise `false`. Evaluation order is undefined.\n\n- **`'or'`** - Returns `true` if any of its arguments evaluates to `true`.\n  Variable length argument list. Evaluation order is undefined.\n\n- **`'andalso'`** - Works as `'and'`, but quits evaluating its arguments when\n  one argument evaluates to something else than `true`. Arguments are evaluated\n  left to right.\n\n- **`'orelse'`** - Works as `'or'`, but quits evaluating as soon as one of its\n  arguments evaluates to `true`. Arguments are evaluated left to right.\n\n- **`'xor'`** - Only two arguments, of which one must be `true` and the other\n  `false` to return `true`; otherwise `'xor'` returns false.\n\n- **`abs`, `element`, `hd`, `length`, `map_get`, `map_size`, `max`, `min`,\n  `node`, `round`, `ceil`, `floor`, `float`, `size`, `bit_size`, `byte_size`,\n  `tuple_size`, `tl`, `trunc`, `binary_part`, `'+'`, `'-'`, `'*'`, `'div'`,\n  `'rem'`, `'band'`, `'bor'`, `'bxor'`, `'bnot'`, `'bsl'`, `'bsr'`, `'>'`,\n  `'>='`, `'<'`, `'=<'`, `'=:='`, `'=='`, `'=/='`, `'/='`, `self`** - Same as\n  the corresponding Erlang BIFs (or operators). In case of bad arguments, the\n  result depends on the context. In the `MatchConditions` part of the\n  expression, the test fails immediately (like in an Erlang guard). In the\n  `MatchBody` part, exceptions are implicitly caught and the call results in the\n  atom `'EXIT'`.","ref":"match_spec.html#functions-allowed-in-all-types-of-match-specifications"},{"type":"extras","title":"Functions Allowed Only for Tracing - Match Specifications in Erlang","doc":"The functions allowed only for tracing work as follows:\n\n- **`is_seq_trace`** - Returns `true` if a sequential trace token is set for the\n  current process, otherwise `false`.\n\n- **`set_seq_token`** - Works as `seq_trace:set_token/2`, but returns `true` on\n  success, and `'EXIT'` on error or bad argument. Only allowed in the\n  `MatchBody` part and only allowed when tracing.\n\n- **`get_seq_token`** - Same as `seq_trace:get_token/0` and only allowed in the\n  `MatchBody` part when tracing.\n\n- **`message`** - Sets an additional message appended to the trace message sent.\n  One can only set one additional message in the body. Later calls replace the\n  appended message.\n\n  As a special case, `{message, false}` disables sending of trace messages\n  ('call' and 'return_to') for this function call, just like if the match\n  specification had not matched. This can be useful if only the side effects of\n  the `MatchBody` part are desired.\n\n  Another special case is `{message, true}`, which sets the default behavior, as\n  if the function had no match specification; trace message is sent with no\n  extra information (if no other calls to `message` are placed before\n  `{message, true}`, it is in fact a \"noop\").\n\n  Takes one argument: the message. Returns `true` and can only be used in the\n  `MatchBody` part and when tracing.\n\n- **`return_trace`** - Causes a `return_from` trace message to be sent upon\n  return from the current function. Takes no arguments, returns `true` and can\n  only be used in the `MatchBody` part when tracing. If the process trace flag\n  `silent` is active, the `return_from` trace message is inhibited.\n\n  _Warning:_ If the traced function is tail-recursive, this match specification\n  function destroys that property. Hence, if a match specification executing\n  this function is used on a perpetual server process, it can only be active for\n  a limited period of time, or the emulator will eventually use all memory in\n  the host machine and crash. If this match specification function is inhibited\n  using process trace flag `silent`, tail-recursiveness still remains.\n\n- **`exception_trace`** - Works as `return_trace` plus; if the traced function\n  exits because of an exception, an `exception_from` trace message is generated,\n  regardless of the exception is caught or not.\n\n- **`process_dump`** - Returns some textual information about the current\n  process as a binary. Takes no arguments and is only allowed in the `MatchBody`\n  part when tracing.\n\n- **`enable_trace`** - Enable a trace flag for a process.\n\n  With one parameter this function turns on tracing like\n  the Erlang call [`trace:process(S, self(), true, [P2])`](`trace:process/4`),\n  where `S` is the current trace session and `P2` is the parameter to\n  `enable_trace`.\n\n  With two parameters, the first parameter is to be either a process identifier\n  or the registered name of a process. In this case tracing is turned on for the\n  designated process in the same way as in the Erlang call\n  [`trace:process(S, P1, true, [P2])`](`trace:process/4`), where `P1` is the\n  first and `P2` is the second argument. `P1` _cannot_ be one of the atoms\n  `all`, `new` or `existing` (unless they are registered names). `P2` _cannot_\n  be `cpu_timestamp` or `tracer`.\n\n  Returns `true` and can only be used in the `MatchBody` part when tracing.\n\n  If used by the legacy function `erlang:trace_pattern/3`, the process `P1` gets\n  its trace messages sent to the same tracer as the process executing the\n  statement uses.\n\n- **`disable_trace`** - Disable a trace flag for a process.\n\n  With one parameter this function disables tracing like\n  the Erlang call [`trace:process(S, self(), false, [P2])`](`trace:process/4`),\n  where `S` is the current trace session and `P2` is the parameter to\n  `disable_trace`.\n\n  With two parameters this function works as the Erlang call\n  [`trace:process(S, P1, false, [P2])`](`trace:process/4`), where `P1` can be\n  either a process identifier or a registered name and is specified as the first\n  argument to the match specification function. `P2` _cannot_ be `cpu_timestamp`\n  or `tracer`.\n\n  Returns `true` and can only be used in the `MatchBody` part when tracing.\n\n- **`trace`** - Enable and/or disable trace flags for a process.\n\n  With two parameters this function takes a list of trace flags to\n  disable as first parameter and a list of trace flags to enable as second\n  parameter. Logically, the disable list is applied first, but effectively all\n  changes are applied atomically. The trace flags are the same as for\n  `trace:process/4`, not including `cpu_timestamp`.\n\n  With three parameters to this function, the first is either a process\n  identifier or the registered name of a process to set trace flags on, the\n  second is the disable list, and the third is the enable list.\n\n  When used via the new `m:trace` API, trace flag `tracer` is not allowed and the\n  receiving tracer is always the tracer of the current session.\n\n  When used via the legacy function `erlang:trace_pattern/3`, trace flag `tracer`\n  is allowed. If no tracer is specified, the same tracer as the process\n  executing the match specification is used (not the meta tracer). If that\n  process doesn't have a tracer either, then trace flags are ignored.\n\n  When using a [tracer module](`m:erl_tracer`), the module must be loaded before\n  the match specification is executed. If it is not loaded, the match fails.\n\n  Returns `true` if any trace property was changed for the trace target process,\n  otherwise `false`. Can only be used in the `MatchBody` part when tracing.\n\n- **`caller`** - Returns the calling function as a tuple\n  `{Module, Function, Arity}` or the atom `undefined` if the calling function\n  cannot be determined. Can only be used in the `MatchBody` part when tracing.\n\n  Notice that if a \"technically built in function\" (that is, a function not\n  written in Erlang) is traced, the `caller` function sometimes returns the atom\n  `undefined`. The calling Erlang function is not available during such calls.\n\n- **`caller_line`** - Similar to `caller` but returns additional information\n  about the source code location of the function call-site within the caller\n  function. Returns the calling function as a tuple\n  `{Module, Function, Arity, {File, Line}}`. `File` is the\n  [string](`e:system:data_types.md#string`) file name while `Line` is source\n  line number. If the `File` and `Line` cannot be determined,\n  `{Module, Function, Arity, undefined}` is returned. If the calling function\n  cannot be determined, the atom `undefined` is returned. Can only be used in\n  the `MatchBody` part when tracing.\n\n  Notice that if a \"technically built in function\" (that is, a function not\n  written in Erlang) is traced, the `caller_line` function sometimes returns the\n  atom `undefined`. The calling Erlang function is not available during such\n  calls.\n\n- **`current_stacktrace`** - Returns the current call stack back-trace\n  ([stacktrace](`t:erlang:stacktrace/0`)) of the calling function. The stack has\n  the same format as in the `catch` part of a `try`. See\n  [The call-stack back trace (stacktrace)](`e:system:errors.md#stacktrace`). The\n  depth of the stacktrace is truncated according to the `backtrace_depth` system\n  flag setting.\n\n  Accepts a depth parameter. The depth value will be `backtrace_depth` if the\n  argument is greater.\n\n- **`display`** - For debugging purposes only. Displays the single argument as\n  an Erlang term on `stdout`, which is seldom what is wanted. Returns `true` and\n  can only be used in the `MatchBody` part when tracing.\n\n- **`get_tcw`{: #get_tcw }** - Takes no argument and returns the value of the\n  node's trace control word. The same is done by\n  `erlang:system_info(trace_control_word)`.\n\n  The trace control word is a 32-bit unsigned integer intended for generic trace\n  control. The trace control word can be tested and set both from within trace\n  match specifications and with BIFs. This call is only allowed when tracing.\n\n- **`set_tcw`{: #set_tcw }** - Takes one unsigned integer argument, sets the\n  value of the node's trace control word to the value of the argument, and\n  returns the previous value. The same is done by\n  `erlang:system_flag(trace_control_word, Value)`. It is only allowed to use\n  `set_tcw` in the `MatchBody` part when tracing.\n\n- **`silent`** - Takes one argument. If the argument is `true`, the call trace\n  message mode for the current process is set to silent for this call and all\n  later calls, that is, call trace messages are inhibited even if\n  `{message, true}` is called in the `MatchBody` part for a traced function.\n\n  This mode can also be activated with flag `silent` to `erlang:trace/3`.\n\n  If the argument is `false`, the call trace message mode for the current\n  process is set to normal (non-silent) for this call and all later calls.\n\n  If the argument is not `true` or `false`, the call trace message mode is\n  unaffected.\n\n> #### Note {: .info }\n>\n> All \"function calls\" must be tuples, even if they take no arguments. The value\n> of `self` is the atom() `self`, but the value of `{self}` is the pid() of the\n> current process.\n\n[](){: #match_target }","ref":"match_spec.html#functions-allowed-only-for-tracing"},{"type":"extras","title":"Match target - Match Specifications in Erlang","doc":"Each execution of a match specification is done against a match target term. The\nformat and content of the target term depends on the context in which the match\nis done. The match target for ETS is always a full table tuple. The match target\nfor call trace is always a list of all function arguments. The match target for\nevent trace depends on the event type, see table below.\n\n| Context | Type      | Match target                 | Description                                 |\n| ------- | --------- | ---------------------------- | ------------------------------------------- |\n| ETS     |           | {Key, Value1, Value2, ...}   | A table object                              |\n| Trace   | call      | [Arg1, Arg2, ...]            | Function arguments                          |\n| Trace   | send      | [Receiver, Message]          | Receiving process/port and message term     |\n| Trace   | 'receive' | [Node, Sender, Message]      | Sending node, process/port and message term |\n\n_Table: Match target depending on context_","ref":"match_spec.html#match-target"},{"type":"extras","title":"Variables and Literals - Match Specifications in Erlang","doc":"Variables take the form `'$ '`, where ` ` is an integer between 0\nand 100,000,000 (1e+8). The behavior if the number is outside these limits is\n_undefined_. In the `MatchHead` part, the special variable `'_'` matches\nanything, and never gets bound (like `_` in Erlang).\n\n- In the `MatchCondition/MatchBody` parts, no unbound variables are allowed, so\n  `'_'` is interpreted as itself (an atom). Variables can only be bound in the\n  `MatchHead` part.\n- In the `MatchBody` and `MatchCondition` parts, only variables bound previously\n  can be used.\n- As a special case, the following apply in the `MatchCondition/MatchBody`\n  parts:\n\n  - The variable `'$_'` expands to the whole\n    [match target](match_spec.md#match_target) term.\n  - The variable `'$$'` expands to a list of the values of all bound variables\n    in order (that is, `['$1','$2', ...]`).\n\nIn the `MatchHead` part, all literals (except the variables above) are\ninterpreted \"as is\".\n\nIn the `MatchCondition/MatchBody` parts, the interpretation is in some ways\ndifferent. Literals in these parts can either be written \"as is\", which works\nfor all literals except tuples, or by using the special form `{const, T}`, where\n`T` is any Erlang term.\n\nFor tuple literals in the match specification, double tuple parentheses can also\nbe used, that is, construct them as a tuple of arity one containing a single\ntuple, which is the one to be constructed. The \"double tuple parenthesis\" syntax\nis useful to construct tuples from already bound variables, like in\n`{{'$1', [a,b,'$2']}}`. Examples:\n\n| Expression                | Variable Bindings   | Result                                   |\n| ------------------------- | ------------------- | ---------------------------------------- |\n| `{{'$1','$2'}}`           | '$1' = a, '$2' = b  | `{a,b}`                                  |\n| `{const, {'$1', '$2'}}`   | Irrelevant          | `{'$1', '$2'}`                           |\n| `a`                       | Irrelevant          | `a`                                      |\n| `'$1'`                    | '$1' = []           | `[]`                                     |\n| `[{{a}}]`                 | Irrelevant          | `[{a}]`                                  |\n| `['$1']`                  | '$1' = []           | `[[]]`                                   |\n| `42`                      | Irrelevant          | `42`                                     |\n| `\"hello\"`                 | Irrelevant          | `\"hello\"`                                |\n| `$1`                      | Irrelevant          | `49` (the ASCII value for character '1') |\n\n_Table: Literals in MatchCondition/MatchBody Parts of a Match Specification_","ref":"match_spec.html#variables-and-literals"},{"type":"extras","title":"Execution of the Match - Match Specifications in Erlang","doc":"The execution of the match expression, when the runtime system decides whether a\ntrace message is to be sent, is as follows:\n\nFor each tuple in the `MatchExpression` list and while no match has succeeded:\n\n1. Match the `MatchHead` part against the match target term, binding the\n   `'$ '` variables (much like in `ets:match/2`). If the `MatchHead` part\n   cannot match the arguments, the match fails.\n1. Evaluate each `MatchCondition` (where only `'$ '` variables previously\n   bound in the `MatchHead` part can occur) and expect it to return the atom\n   `true`. When a condition does not evaluate to `true`, the match fails. If any\n   BIF call generates an exception, the match also fails.\n1. Two cases can occur:\n\n- If the match specification is executing when tracing:\n\n  Evaluate each `ActionTerm` in the same way as the `MatchConditions`, but\n  ignore the return values. Regardless of what happens in this part, the match\n  has succeeded.\n\n- If the match specification is executed when selecting objects from an ETS\n  table:\n\n  Evaluate the expressions in order and return the value of the last expression\n  (typically there is only one expression in this context).\n\n[](){: #differences_ets_tracing }","ref":"match_spec.html#execution-of-the-match"},{"type":"extras","title":"Differences between Match Specifications in ETS and Tracing - Match Specifications in Erlang","doc":"ETS match specifications produce a return value. Usually the `MatchBody`\ncontains one single `ConditionExpression` that defines the return value without\nany side effects. Calls with side effects are not allowed in the ETS context.\n\nWhen tracing there is no return value to produce, the match specification either\nmatches or does not. The effect when the expression matches is a trace message\nrather than a returned term. The `ActionTerm`s are executed as in an imperative\nlanguage, that is, for their side effects. Functions with side effects are also\nallowed when tracing.","ref":"match_spec.html#differences-between-match-specifications-in-ets-and-tracing"},{"type":"extras","title":"Tracing Examples - Match Specifications in Erlang","doc":"Match an argument list of three, where the first and third arguments are equal:\n\n```erlang\n[{['$1', '_', '$1'],\n  [],\n  []}]\n```\n\nMatch an argument list of three, where the second argument is a number > 3:\n\n```erlang\n[{['_', '$1', '_'],\n  [{ '>', '$1', 3}],\n  []}]\n```\n\nMatch an argument list of three, where the third argument is either a tuple\ncontaining argument one and two, _or_ a list beginning with argument one and two\n(that is, `[a,b,[a,b,c]]` or `[a,b,{a,b}]`):\n\n```erlang\n[{['$1', '$2', '$3'],\n  [{'orelse',\n      {'=:=', '$3', {{'$1','$2'}}},\n      {'and',\n        {'=:=', '$1', {hd, '$3'}},\n        {'=:=', '$2', {hd, {tl, '$3'}}}}}],\n  []}]\n```\n\nThe above problem can also be solved as follows:\n\n```erlang\n[{['$1', '$2', {'$1', '$2}], [], []},\n {['$1', '$2', ['$1', '$2' | '_']], [], []}]\n```\n\nMatch two arguments, where the first is a tuple beginning with a list that in\nturn begins with the second argument times two (that is, `[{[4,x],y},2]` or\n`[{[8], y, z},4])`:\n\n```erlang\n[{['$1', '$2'],[{'=:=', {'*', 2, '$2'}, {hd, {element, 1, '$1'}}}],\n  []}]\n```\n\nMatch three arguments. When all three are equal and are numbers, append the\nprocess dump to the trace message, otherwise let the trace message be \"as is\",\nbut set the sequential trace token label to 4711:\n\n```erlang\n[{['$1', '$1', '$1'],\n  [{is_number, '$1'}],\n  [{message, {process_dump}}]},\n {'_', [], [{set_seq_token, label, 4711}]}]\n```\n\nAs can be noted above, the parameter list can be matched against a single\n`MatchVariable` or an `'_'`. To replace the whole parameter list with a single\nvariable is a special case. In all other cases the `MatchHead` must be a\n_proper_ list.\n\nGenerate a trace message only if the trace control word is set to 1:\n\n```erlang\n[{'_',\n  [{'==',{get_tcw},{const, 1}}],\n  []}]\n```\n\nGenerate a trace message only if there is a `seq_trace` token:\n\n```erlang\n[{'_',\n  [{'==',{is_seq_trace},{const, 1}}],\n  []}]\n```\n\nRemove the `'silent'` trace flag when the first argument is `'verbose'`, and add\nit when it is `'silent':`\n\n```erlang\n[{'$1',\n  [{'==',{hd, '$1'},verbose}],\n  [{trace, [silent],[]}]},\n {'$1',\n  [{'==',{hd, '$1'},silent}],\n  [{trace, [],[silent]}]}]\n```\n\nAdd a `return_trace` message if the function is of arity 3:\n\n```erlang\n[{'$1',\n  [{'==',{length, '$1'},3}],\n  [{return_trace}]},\n {'_',[],[]}]\n```\n\nGenerate a trace message only if the function is of arity 3 and the first\nargument is `'trace'`:\n\n```erlang\n[{['trace','$2','$3'],\n  [],\n  []},\n {'_',[],[]}]\n```","ref":"match_spec.html#tracing-examples"},{"type":"extras","title":"ETS Examples - Match Specifications in Erlang","doc":"Match all objects in an ETS table, where the first element is the atom\n`'strider'` and the tuple arity is 3, and return the whole object:\n\n```erlang\n[{{strider,'_','_'},\n  [],\n  ['$_']}]\n```\n\nMatch all objects in an ETS table with arity > 1 and the first element is\n'gandalf', and return element 2:\n\n```erlang\n[{'$1',\n  [{'==', gandalf, {element, 1, '$1'}},{'>=',{size, '$1'},2}],\n  [{element,2,'$1'}]}]\n```\n\nIn this example, if the first element had been the key, it is much more\nefficient to match that key in the `MatchHead` part than in the\n`MatchConditions` part. The search space of the tables is restricted with\nregards to the `MatchHead` so that only objects with the matching key are\nsearched.\n\nMatch tuples of three elements, where the second element is either `'merry'` or\n`'pippin'`, and return the whole objects:\n\n```erlang\n[{{'_',merry,'_'},\n  [],\n  ['$_']},\n {{'_',pippin,'_'},\n  [],\n  ['$_']}]\n```\n\nFunction `ets:test_ms/2` can be useful for testing complicated ETS matches.","ref":"match_spec.html#ets-examples"},{"type":"extras","title":"How to Interpret the Erlang Crash Dumps","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# How to Interpret the Erlang Crash Dumps\n\nThis section describes the `erl_crash.dump` file generated upon abnormal exit of\nthe Erlang runtime system.\n\n> #### Note {: .info }\n>\n> The Erlang crash dump had a major facelift in Erlang/OTP R9C. The information\n> in this section is therefore not directly applicable for older dumps. However,\n> if you use `m:crashdump_viewer` on older dumps, the crash dumps are translated\n> into a format similar to this.\n\nThe system writes the crash dump in the current directory of the emulator or in\nthe file pointed out by the environment variable (whatever that means on the\ncurrent operating system) `ERL_CRASH_DUMP`. For a crash dump to be written, a\nwritable file system must be mounted.\n\nCrash dumps are written mainly for one of two reasons: either the built-in\nfunction `erlang:halt/1` is called explicitly with a string argument from\nrunning Erlang code, or the runtime system has detected an error that cannot be\nhandled. The most usual reason that the system cannot handle the error is that\nthe cause is external limitations, such as running out of memory. A crash dump\ncaused by an internal error can be caused by the system reaching limits in the\nemulator itself (like the number of atoms in the system, or too many\nsimultaneous ETS tables). Usually the emulator or the operating system can be\nreconfigured to avoid the crash, which is why interpreting the crash dump\ncorrectly is important.\n\nOn systems that support OS signals, it is also possible to stop the runtime\nsystem and generate a crash dump by sending the `SIGUSR1` signal.\n\nThe Erlang crash dump is a readable text file, but it can be difficult to read.\nUsing the Crashdump Viewer tool in the `Observer` application simplifies the\ntask. This is a wx-widget-based tool for browsing Erlang crash dumps.","ref":"crash_dump.html"},{"type":"extras","title":"General Information - How to Interpret the Erlang Crash Dumps","doc":"The first part of the crash dump shows the following:\n\n- The creation time for the dump\n- A slogan indicating the reason for the dump\n- The system version of the node from which the dump originates\n- The number of atoms in the atom table\n- The runtime system thread that caused the crash dump","ref":"crash_dump.html#general-information"},{"type":"extras","title":"Reasons for Crash Dumps (Slogan) - How to Interpret the Erlang Crash Dumps","doc":"The reason for the dump is shown in the beginning of the file as:\n\n```text\nSlogan:  \n```\n\nIf the system is halted by the BIF `erlang:halt/1`, the slogan is the string\nparameter passed to the BIF, otherwise it is a description generated by the\nemulator or the (Erlang) kernel. Normally the message is enough to understand\nthe problem, but some messages are described here. Notice that the suggested\nreasons for the crash are _only suggestions_. The exact reasons for the errors\ncan vary depending on the local applications and the underlying operating\nsystem.\n\n- **_ : Cannot allocate   bytes of memory (of type \" \")_** - The system\n  has run out of memory.   is the allocator that failed to allocate memory,\n    is the number of bytes that   tried to allocate, and   is the memory\n  block type that the memory was needed for. The most common case is that a\n  process stores huge amounts of data. In this case   is most often `heap`,\n  `old_heap`, `heap_frag`, or `binary`. For more information on allocators, see\n  [`erts_alloc(3)`](erts_alloc.md).\n\n- **_ : Cannot reallocate   bytes of memory (of type \" \")_** - Same as\n  above except that memory was reallocated instead of allocated when the system\n  ran out of memory.\n\n- **_Unexpected op code  _** - Error in compiled code, `beam` file damaged, or\n  error in the compiler.\n\n- **_Module   undefined `|` Function   undefined `|` No function\n   : /1 `|` No function  :start/2_** - The Kernel/STDLIB\n  applications are damaged or the start script is damaged.\n\n- **_Driver_select called with too large file descriptor `N`_** - The number of\n  file descriptors for sockets exceeds 1024 (Unix only). The limit on file\n  descriptors in some Unix flavors can be set to over 1024, but only 1024\n  sockets/pipes can be used simultaneously by Erlang (because of limitations in\n  the Unix `select` call). The number of open regular files is not affected by\n  this.\n\n- **_Received SIGUSR1_** - Sending the `SIGUSR1` signal to an Erlang machine\n  (Unix only) forces a crash dump. This slogan reflects that the Erlang machine\n  crash-dumped because of receiving that signal.\n\n- **_Kernel pid terminated ( ) ( )_** - The kernel supervisor\n  has detected a failure, usually that the `application_controller` has shut\n  down (`Who` = `application_controller`, `Why` = `shutdown`). The application\n  controller can have shut down for many reasons, the most usual is that the\n  node name of the distributed Erlang node is already in use. A complete\n  supervisor tree \"crash\" (that is, the top supervisors have exited) gives about\n  the same result. This message comes from the Erlang code and not from the\n  virtual machine itself. It is always because of some failure in an\n  application, either within OTP or a \"user-written\" one. Looking at the error\n  log for your application is probably the first step to take.\n\n- **_Init terminating in do_boot ()_** - The primitive Erlang boot sequence was\n  terminated, most probably because the boot script has errors or cannot be\n  read. This is usually a configuration error; the system can have been started\n  with a faulty `-boot` parameter or with a boot script from the wrong OTP\n  version.\n\n- **_Could not start kernel pid ( ) ()_** - One of the kernel processes\n  could not start. This is probably because of faulty arguments (like errors in\n  a `-config` argument) or faulty configuration files. Check that all files are\n  in their correct location and that the configuration files (if any) are not\n  damaged. Usually messages are also written to the controlling terminal and/or\n  the error log explaining what is wrong.\n\nOther errors than these can occur, as the `erlang:halt/1` BIF can generate any\nmessage. If the message is not generated by the BIF and does not occur in the\nlist above, it can be because of an error in the emulator. There can however be\nunusual messages, not mentioned here, which are still connected to an\napplication failure. There is much more information available, so a thorough\nreading of the crash dump can reveal the crash reason. The size of processes,\nthe number of ETS tables, and the Erlang data on each process stack can be\nuseful to find the problem.","ref":"crash_dump.html#reasons-for-crash-dumps-slogan"},{"type":"extras","title":"Number of Atoms - How to Interpret the Erlang Crash Dumps","doc":"The number of atoms in the system at the time of the crash is shown as `Atoms:  `.\nSome ten thousands atoms is perfectly normal, but more can indicate\nthat the BIF `erlang:list_to_atom/1` is used to generate many _different_ atoms\ndynamically, which is never a good idea.","ref":"crash_dump.html#number-of-atoms"},{"type":"extras","title":"Scheduler Information - How to Interpret the Erlang Crash Dumps","doc":"Under the tag _=scheduler_ is shown information about the current state and\nstatistics of the schedulers in the runtime system. On operating systems that\nallow suspension of other threads, the data within this section reflects what\nthe runtime system looks like when a crash occurs.\n\nThe following fields can exist for a process:\n\n- **_=scheduler:id_** - Heading. States the scheduler identifier.\n\n- **_Scheduler Sleep Info Flags_** - If empty, the scheduler was doing some\n  work. If not empty, the scheduler is either in some state of sleep, or\n  suspended.\n\n- **_Scheduler Sleep Info Aux Work_** - If not empty, a scheduler internal\n  auxiliary work is scheduled to be done.\n\n- **_Current Port_** - The port identifier of the port that is currently\n  executed by the scheduler.\n\n- **_Current Process_** - The process identifier of the process that is\n  currently executed by the scheduler. If there is such a process, this entry is\n  followed by the _State_, _Internal State_, _Program Counter_, and _CP_ of that\n  same process. The entries are described in section\n  [Process Information](crash_dump.md#process-data).\n\n  Notice that this is a snapshot of what the entries are exactly when the crash\n  dump is starting to be generated. Therefore they are most likely different\n  (and more telling) than the entries for the same processes found in the\n  _=proc_ section. If there is no currently running process, only the _Current\n  Process_ entry is shown.\n\n- **_Current Process Limited Stack Trace_** - This entry is shown only if there\n  is a current process. It is similar to\n  [_=proc_stack_](crash_dump.md#process-data), except that only the function frames\n  are shown (that is, the stack variables are omitted). Also, only the top and\n  bottom part of the stack are shown. If the stack is small (< 512 slots), the\n  entire stack is shown. Otherwise the entry _skipping","ref":"crash_dump.html#scheduler-information"},{"type":"extras","title":"slots_ is shown, where - How to Interpret the Erlang Crash Dumps","doc":"`##` is replaced by the number of slots that has been skipped.\n\n- **_Run Queue_** - Shows statistics about how many processes and ports of\n  different priorities are scheduled on this scheduler.\n\n- **\\*\\*\\* crashed \\*\\*\\*** - This entry is normally not shown. It signifies\n  that getting the rest of the information about this scheduler failed for some\n  reason.","ref":"crash_dump.html#slots_-is-shown-where"},{"type":"extras","title":"Memory Information - How to Interpret the Erlang Crash Dumps","doc":"Under the tag _=memory_ is shown information similar to what can be obtained on\na living node with [`erlang:memory()`](`erlang:memory/0`).","ref":"crash_dump.html#memory-information"},{"type":"extras","title":"Internal Table Information - How to Interpret the Erlang Crash Dumps","doc":"Under the tags _=hash_table: _ and _=index_table: _ is\nshown internal tables. These are mostly of interest for runtime system\ndevelopers.","ref":"crash_dump.html#internal-table-information"},{"type":"extras","title":"Allocated Areas - How to Interpret the Erlang Crash Dumps","doc":"Under the tag _=allocated_areas_ is shown information similar to what can be\nobtained on a living node with\n[`erlang:system_info(allocated_areas)`](`m:erlang#system_info_allocated_areas`).","ref":"crash_dump.html#allocated-areas"},{"type":"extras","title":"Allocator - How to Interpret the Erlang Crash Dumps","doc":"Under the tag _=allocator: _ is shown various information about allocator  .\nThe information is similar to what can be obtained on a living node with\n[`erlang:system_info({allocator,  })`](`m:erlang#system_info_allocator_tuple`).\nFor more information, see also [`erts_alloc(3)`](erts_alloc.md).","ref":"crash_dump.html#allocator"},{"type":"extras","title":"Process Information - How to Interpret the Erlang Crash Dumps","doc":"The Erlang crashdump contains a listing of each living Erlang process in the\nsystem. The following fields can exist for a process:\n\n- **_=proc: _** - Heading. States the process identifier.\n\n- **_State_** - The state of the process. This can be one of the following:\n\n  - **_Scheduled_** - The process was scheduled to run but is currently not\n    running (\"in the run queue\").\n\n  - **_Waiting_** - The process was waiting for something (in `receive`).\n\n  - **_Running_** - The process was currently running. If the BIF\n    `erlang:halt/1` was called, this was the process calling it.\n\n  - **_Exiting_** - The process was on its way to exit.\n\n  - **_Garbing_** - This is bad luck, the process was garbage collecting when\n    the crash dump was written. The rest of the information for this process is\n    limited.\n\n  - **_Suspended_** - The process is suspended, either by the BIF\n    `erlang:suspend_process/1` or because it tries to write to a busy port.\n\n- **_Registered name_** - The registered name of the process, if any.\n\n- **_Spawned as_** - The entry point of the process, that is, what function was\n  referenced in the `spawn` or `spawn_link` call that started the process.\n\n- **_Last scheduled in for | Current call_** - The current function of the\n  process. These fields do not always exist.\n\n- **_Spawned by_** - The parent of the process, that is, the process that\n  executed `spawn` or `spawn_link`.\n\n- **_Started_** - The date and time when the process was started.\n\n- **_Message queue length_** - The number of messages in the process' message\n  queue.\n\n- **_Number of heap fragments_** - The number of allocated heap fragments.\n\n- **_Heap fragment data_** - Size of fragmented heap data, in words. This is\n  data either created by messages sent to the process or by the Erlang BIFs.\n  This amount depends on so many things that this field is usually\n  uninteresting.\n\n- **_Link list_** - Process IDs of processes linked to this one. Can also\n  contain ports. If process monitoring is used, this field also tells in which\n  direction the monitoring is in effect. That is, a link \"to\" a process tells\n  you that the \"current\" process was monitoring the other, and a link \"from\" a\n  process tells you that the other process was monitoring the current one.\n\n- **_Reductions_** - The number of reductions consumed by the process.\n\n- **_Stack+heap_** - The size of the stack and heap, in words (they share memory\n  segment).\n\n- **_OldHeap_** - The size of the \"old heap\", in words. The Erlang virtual\n  machine uses generational garbage collection with two generations. There is\n  one heap for new data items and one for the data that has survived two garbage\n  collections. The assumption (which is almost always correct) is that data\n  surviving two garbage collections can be \"tenured\" to a heap more seldom\n  garbage collected, as they will live for a long period. This is a usual\n  technique in virtual machines. The sum of the heaps and stack together\n  constitute most of the allocated memory of the process.\n\n- **_Heap unused, OldHeap unused_** - The amount of unused memory on each heap,\n  in words. This information is usually useless.\n\n- **_Memory_** - The total memory used by this process, in bytes. This includes\n  call stack, heap, and internal structures. Same as\n  [`erlang:process_info(Pid,memory)`](`erlang:process_info/2`).\n\n- **_Program counter_** - The current instruction pointer. This is only of\n  interest for runtime system developers. The function into which the program\n  counter points is the current function of the process.\n\n- **_CP_** - The continuation pointer, that is, the return address for the\n  current call. Usually useless for other than runtime system developers. This\n  can be followed by the function into which the CP points, which is the\n  function calling the current function.\n\n- **_Arity_** - The number of live argument registers. The argument registers if\n  any are live will follow. These can contain the arguments of the function if\n  they are not yet moved to the stack.\n\n- **_Internal State_** - A more detailed internal representation of the state of\n  this process.\n\nSee also section [Process Data](crash_dump.md#process-data).","ref":"crash_dump.html#process-information"},{"type":"extras","title":"Port Information - How to Interpret the Erlang Crash Dumps","doc":"This section lists the open ports, their owners, any linked processes, and the\nname of their driver or external process.","ref":"crash_dump.html#port-information"},{"type":"extras","title":"ETS Tables - How to Interpret the Erlang Crash Dumps","doc":"This section contains information about all the ETS tables in the system. The\nfollowing fields are of interest for each table:\n\n- **_=ets: _** - Heading. States the table owner (a process identifier).\n\n- **_Table_** - The identifier for the table. If the table is a `named_table`,\n  this is the name.\n\n- **_Name_** - The table name, regardless of if it is a `named_table` or not.\n\n- **_Hash table, Buckets_** - If the table is a hash table, that is, if it is\n  not an `ordered_set`.\n\n- **_Hash table, Chain Length_** - If the table is a hash table. Contains\n  statistics about the table, such as the maximum, minimum, and average chain\n  length. Having a maximum much larger than the average, and a standard\n  deviation much larger than the expected standard deviation is a sign that the\n  hashing of the terms behaves badly for some reason.\n\n- **_Ordered set (AVL tree), Elements_** - If the table is an `ordered_set`.\n  (The number of elements is the same as the number of objects in the table.)\n\n- **_Fixed_** - If the table is fixed using `ets:safe_fixtable/2` or some\n  internal mechanism.\n\n- **_Objects_** - The number of objects in the table.\n\n- **_Words_** - The number of words allocated to data in the table.\n\n- **_Type_** - The table type, that is, `set`, `bag`, `duplicate_bag`, or\n  `ordered_set`.\n\n- **_Compressed_** - If the table was compressed.\n\n- **_Protection_** - The protection of the table.\n\n- **_Write Concurrency_** - If `write_concurrency` was enabled for the table.\n\n- **_Read Concurrency_** - If `read_concurrency` was enabled for the table.","ref":"crash_dump.html#ets-tables"},{"type":"extras","title":"Timers - How to Interpret the Erlang Crash Dumps","doc":"This section contains information about all the timers started with the BIFs\n`erlang:start_timer/3` and `erlang:send_after/3`. The following fields exist for\neach timer:\n\n- **_=timer: _** - Heading. States the timer owner (a process identifier),\n  that is, the process to receive the message when the timer expires.\n\n- **_Message_** - The message to be sent.\n\n- **_Time left_** - Number of milliseconds left until the message would have\n  been sent.","ref":"crash_dump.html#timers"},{"type":"extras","title":"Distribution Information - How to Interpret the Erlang Crash Dumps","doc":"If the Erlang node was alive, that is, set up for communicating with other\nnodes, this section lists the connections that were active. The following fields\ncan exist:\n\n- **_=node: _** - The node name.\n\n- **_no_distribution_** - If the node was not distributed.\n\n- **_=visible_node: _** - Heading for a visible node, that is, an alive\n  node with a connection to the node that crashed. States the channel number for\n  the node.\n\n- **_=hidden_node: _** - Heading for a hidden node. A hidden node is the\n  same as a visible node, except that it is started with the `\"-hidden\"` flag.\n  States the channel number for the node.\n\n- **_=not_connected: _** - Heading for a node that was connected to the\n  crashed node earlier. References (that is, process or port identifiers) to the\n  not connected node existed at the time of the crash. States the channel number\n  for the node.\n\n- **_Name_** - The name of the remote node.\n\n- **_Controller_** - The port controlling communication with the remote node.\n\n- **_Creation_** - An integer (1-3) that together with the node name identifies\n  a specific instance of the node.\n\n- **_Remote monitoring:    _** - The local process was\n  monitoring the remote process at the time of the crash.\n\n- **_Remotely monitored by:    _** - The remote process\n  was monitoring the local process at the time of the crash.\n\n- **_Remote link:    _** - A link existed between the\n  local process and the remote process at the time of the crash.","ref":"crash_dump.html#distribution-information"},{"type":"extras","title":"Loaded Module Information - How to Interpret the Erlang Crash Dumps","doc":"This section contains information about all loaded modules.\n\nFirst, the memory use by the loaded code is summarized:\n\n- **_Current code_** - Code that is the current latest version of the modules.\n\n- **_Old code_** - Code where there exists a newer version in the system, but\n  the old version is not yet purged.\n\nThen, all loaded modules are listed. The following fields exist:\n\n- **_=mod: _** - Heading. States the module name.\n\n- **_Current size_** - Memory use for the loaded code, in bytes.\n\n- **_Old size_** - Memory use for the old code, in bytes.\n\n- **_Current attributes_** - Module attributes for the current code. This field\n  is decoded when looked at by the Crashdump Viewer tool.\n\n- **_Old attributes_** - Module attributes for the old code, if any. This field\n  is decoded when looked at by the Crashdump Viewer tool.\n\n- **_Current compilation info_** - Compilation information (options) for the\n  current code. This field is decoded when looked at by the Crashdump Viewer\n  tool.\n\n- **_Old compilation info_** - Compilation information (options) for the old\n  code, if any. This field is decoded when looked at by the Crashdump Viewer\n  tool.","ref":"crash_dump.html#loaded-module-information"},{"type":"extras","title":"Fun Information - How to Interpret the Erlang Crash Dumps","doc":"This section lists all funs. The following fields exist for each fun:\n\n- **_=fun_** - Heading.\n\n- **_Module_** - The name of the module where the fun was defined.\n\n- **_Uniq, Index_** - Identifiers.\n\n- **_Address_** - The address of the fun's code.\n\n- **_Refc_** - The number of references to the fun.","ref":"crash_dump.html#fun-information"},{"type":"extras","title":"Process Data - How to Interpret the Erlang Crash Dumps","doc":"For each process there is at least one _=proc_stack_ and one _=proc_heap_ tag,\nfollowed by the raw memory information for the stack and heap of the process.\n\nFor each process there is also a _=proc_messages_ tag if the process message\nqueue is non-empty, and a _=proc_dictionary_ tag if the process dictionary (the\n[`put/2`](`put/2`) and [`get/1`](`get/1`) thing) is non-empty.\n\nThe raw memory information can be decoded by the Crashdump Viewer tool. You can\nthen see the stack dump, the message queue (if any), and the dictionary (if\nany).\n\nThe stack dump is a dump of the Erlang process stack. Most of the live data\n(that is, variables currently in use) are placed on the stack; thus this can be\ninteresting. One has to \"guess\" what is what, but as the information is\nsymbolic, thorough reading of this information can be useful. As an example, we\ncan find the state variable of the Erlang primitive loader online `(5)` and\n`(6)` in the following example:\n\n```erlang\n(1)  3cac44   Return addr 0x13BF58 ( )\n(2)  y(0)     [\"/view/siri_r10_dev/clearcase/otp/erts/lib/kernel/ebin\",\n(3)            \"/view/siri_r10_dev/clearcase/otp/erts/lib/stdlib/ebin\"]\n(4)  y(1)     <0.1.0>\n(5)  y(2)     {state,[],none,#Fun ,undefined,#Fun ,\n(6)            #Fun ,#Port<0.2>,infinity,#Fun }\n(7)  y(3)     infinity\n```\n\nWhen interpreting the data for a process, it is helpful to know that anonymous\nfunction objects (funs) are given the following:\n\n- A name constructed from the name of the function in which they are created\n- A number (starting with 0) indicating the number of that fun within that\n  function","ref":"crash_dump.html#process-data"},{"type":"extras","title":"Atoms - How to Interpret the Erlang Crash Dumps","doc":"This section presents all the atoms in the system. This is only of interest if\none suspects that dynamic generation of atoms can be a problem, otherwise this\nsection can be ignored.\n\nNotice that the last created atom is shown first.","ref":"crash_dump.html#atoms"},{"type":"extras","title":"Disclaimer - How to Interpret the Erlang Crash Dumps","doc":"The format of the crash dump evolves between OTP releases. Some information\ndescribed here may not apply to your version. A description like this will never\nbe complete; it is meant as an explanation of the crash dump in general and as a\nhelp when trying to find application errors, not as a complete specification.","ref":"crash_dump.html#disclaimer"},{"type":"extras","title":"How to Implement an Alternative Carrier for the Erlang Distribution","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# How to Implement an Alternative Carrier for the Erlang Distribution\n\nThis section describes how to implement an alternative carrier protocol for the\nErlang distribution. The distribution is normally carried by TCP/IP. Here is\nexplained a method for replacing TCP/IP with another protocol.\n\nThe section is a step-by-step explanation of the `uds_dist` example application\n(in the Kernel application `examples` directory). The `uds_dist` application\nimplements distribution over Unix domain sockets and is written for the Sun\nSolaris 2 operating environment. The mechanisms are however general and apply to\nany operating system Erlang runs on. The reason the C code is not made portable,\nis simply readability.","ref":"alt_dist.html"},{"type":"extras","title":"Introduction - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"To implement a new carrier for the Erlang distribution, the main steps are as\nfollows.\n\n> #### Note {: .info }\n>\n> As of ERTS version 10.0 support for distribution controller processes has been\n> introduced. That is, the traffic over a distribution channel can be managed by\n> a process instead of only by a port. This makes it possible to implement large\n> parts of the logic in Erlang code, and you perhaps do not even need a new\n> driver for the protocol. One example could be Erlang distribution over UDP\n> using `gen_udp` (your Erlang code will of course have to take care of\n> retransmissions, etc in this example). That is, depending on what you want to\n> do you perhaps do not need to implement a driver at all and can then skip the\n> driver related sections below. The `gen_tcp_dist` and `erl_uds_dist` examples\n> described in the [Distribution Module](alt_dist.md#distribution-module)\n> section utilize distribution controller processes and can be worth having a\n> look at if you want to use distribution controller processes.","ref":"alt_dist.html#introduction"},{"type":"extras","title":"Writing an Erlang Driver - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"First, the protocol must be available to the Erlang machine, which involves\nwriting an Erlang driver. A port program cannot be used, an Erlang driver is\nrequired. Erlang drivers can be:\n\n- Statically linked to the emulator, which can be an alternative when using the\n  open source distribution of Erlang, or\n- Dynamically loaded into the Erlang machines address space, which is the only\n  alternative if a precompiled version of Erlang is to be used\n\nWriting an Erlang driver is not easy. The driver is written as some callback\nfunctions called by the Erlang emulator when data is sent to the driver, or the\ndriver has any data available on a file descriptor. As the driver callback\nroutines execute in the main thread of the Erlang machine, the callback\nfunctions can perform no blocking activity whatsoever. The callbacks are only to\nset up file descriptors for waiting and/or read/write available data. All I/O\nmust be non-blocking. Driver callbacks are however executed in sequence, why a\nglobal state can safely be updated within the routines.","ref":"alt_dist.html#writing-an-erlang-driver"},{"type":"extras","title":"Writing an Erlang Interface for the Driver - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"When the driver is implemented, one would preferably write an Erlang interface\nfor the driver to be able to test the functionality of the driver separately.\nThis interface can then be used by the distribution module, which will cover the\ndetails of the protocol from the `net_kernel`.\n\nThe easiest path is to mimic the `inet` and `inet_tcp` interfaces, but not much\nfunctionality in those modules needs to be implemented. In the example\napplication, only a few of the usual interfaces are implemented, and they are\nmuch simplified.","ref":"alt_dist.html#writing-an-erlang-interface-for-the-driver"},{"type":"extras","title":"Writing a Distribution Module - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"When the protocol is available to Erlang through a driver and an Erlang\ninterface module, a distribution module can be written. The distribution module\nis a module with well-defined callbacks, much like a `gen_server` (there is no\ncompiler support for checking the callbacks, though). This module implements:\n\n- The details of finding other nodes (that is, talking to `epmd` or something\n  similar)\n- Creating a listen port (or similar)\n- Connecting to other nodes\n- Performing the handshakes/cookie verification\n\nThere is however a utility module, `dist_util`, which does most of the hard work\nof handling handshakes, cookies, timers, and ticking. Using `dist_util` makes\nimplementing a distribution module much easier and that is done in the example\napplication.","ref":"alt_dist.html#writing-a-distribution-module"},{"type":"extras","title":"Creating Boot Scripts - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"The last step is to create boot scripts to make the protocol implementation\navailable at boot time. The implementation can be debugged by starting the\ndistribution when all the system is running, but in a real system the\ndistribution is to start very early, why a boot script and some command-line\nparameters are necessary.\n\nThis step also implies that the Erlang code in the interface and distribution\nmodules is written in such a way that it can be run in the startup phase. In\nparticular, there can be no calls to the `application` module or to any modules\nnot loaded at boot time. That is, only `Kernel`, `STDLIB`, and the application\nitself can be used.","ref":"alt_dist.html#creating-boot-scripts"},{"type":"extras","title":"Distribution Module - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"The distribution module exposes an API that `net_kernel` calls in order to\nmanage connections to other nodes. The module name should have the suffix\n`_dist`.\n\nThe module needs to create some kind of listening entity (process or port) and\nan acceptor process that accepts incoming connections using the listening\nentity. For each connection, the module at least needs to create one connection\nsupervisor process, which also is responsible for the handshake when setting up\nthe connection, and a distribution controller (process or port) responsible for\ntransport of data over the connection. The distribution controller and the\nconnection supervisor process should be linked together so both of them are\ncleaned up when the connection is taken down.\n\nNote that there need to be exactly one distribution controller per connection. A\nprocess or port can only be distribution controller for one connection. The\nregistration as distribution controller cannot be undone. It will stick until\nthe distribution controller terminates. The distribution controller should not\nignore exit signals. It is allowed to trap exits, but it should then voluntarily\nterminate when an exit signal is received.\n\nAn example implementation of a distribution module can be found in\n[$ERL_TOP/lib/kernel/examples/gen_tcp_dist/src/gen_tcp_dist.erl](assets/gen_tcp_dist.erl).\nIt implements the distribution over TCP/IP using the `gen_tcp` API with\ndistribution controllers implemented by processes. This instead of using port\ndistribution controllers as the ordinary TCP/IP distribution uses.\n\nAnother example implementation of a distribution module can be found in\n[$ERL_TOP/lib/kernel/examples/erl_uds_dist/src/erl_uds_dist.erl](assets/erl_uds_dist.erl).\nIt implements the distribution over Unix domain sockets using the `gen_tcp` API\nwith distribution controllers implemented by processes. Compared to the original\n`uds_dist` example using a port driver written in C, `erl_uds_dist` is written\nentirely in Erlang.","ref":"alt_dist.html#distribution-module"},{"type":"extras","title":"Exported Callback Functions - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"The following functions are mandatory:\n\n- ```erlang\n  listen(Name) ->\n    {ok, {Listen, Address, Creation}} | {error, Error}\n  listen(Name,Host) ->\n    {ok, {Listen, Address, Creation}} | {error, Error}\n  ```\n  {: #listen }\n  \n  `listen/2` is called once in order to listen for incoming connection requests.\n  The call is made when the distribution is brought up. The argument `Name` is\n  the part of the node name before the `@` sign in the full node name. It can be\n  either an atom or a string. The argument `Host` is the part of the node name\n  after the `@` sign in the full node name. It is always a string.\n\n  The return value consists of a `Listen` handle (which is later passed to the\n  [`accept/1`](alt_dist.md#accept) callback), `Address` which is a\n  `#net_address{}` record with information about the address for the node (the\n  `#net_address{}` record is defined in `kernel/include/net_address.hrl`), and\n  `Creation` which (currently) is an integer `1`, `2`, or `3`.\n\n  If [`epmd`](epmd_cmd.md) is to be used for node discovery, you typically want\n  to use the `erl_epmd` module (part of the `kernel` application) in order to\n  register the listen port with `epmd` and retrieve `Creation` to use.\n\n- ```\n  address() ->\n    Address\n  ```\n  {: #address }\n  \n  `address/0` is called in order to get the `Address` part of the\n  [`listen/2`](alt_dist.md#listen) function without creating a listen socket.\n  All fields except `address` have to be set in the returned record\n\n  Example:\n\n  ```erlang\n  address() ->\n      {ok, Host} = inet:gethostname(),\n      #net_address{ host = Host, protocol = tcp, family = inet6 }.\n  ```\n\n- ```erlang\n  accept(Listen) ->\n    AcceptorPid\n  ```\n  {: #accept }\n  \n  `accept/1` should spawn a process that accepts connections. This process\n  should preferably execute on `max` priority. The process identifier of this\n  process should be returned.\n\n  The `Listen` argument will be the same as the `Listen` handle part of the\n  return value of the [`listen/1`](alt_dist.md#listen) callback above.\n  `accept/1` is called only once when the distribution protocol is started.\n\n  The caller of this function is a representative for `net_kernel` (this may or\n  may not be the process registered as `net_kernel`) and is in this document\n  identified as `Kernel`. When a connection has been accepted by the acceptor\n  process, it needs to inform `Kernel` about the accepted connection. This is\n  done by passing a message of the form:\n\n  ```erlang\n  Kernel ! {accept, AcceptorPid, DistController, Family, Proto}\n  ```\n\n  `DistController` is either the process or port identifier of the distribution\n  controller for the connection. The distribution controller should be created\n  by the acceptor processes when a new connection is accepted. Its job is to\n  dispatch traffic on the connection.\n\n  `Kernel` responds with one of the following messages:\n\n  - **`{Kernel, controller, SupervisorPid}`** - The request was accepted and\n    `SupervisorPid` is the process identifier of the connection supervisor\n    process (which is created in the\n    [`accept_connection/5`](alt_dist.md#accept_connection) callback).\n\n  - **`{Kernel, unsupported_protocol}`** - The request was rejected. This is a\n    fatal error. The acceptor process should terminate.\n\n  When an accept sequence has been completed the acceptor process is expected to\n  continue accepting further requests.\n\n- ```\n  accept_connection(AcceptorPid, DistCtrl, MyNode, Allowed, SetupTime) ->\n    ConnectionSupervisorPid\n  ```\n  {: #accept_connection }\n  \n  `accept_connection/5` should spawn a process that will perform the Erlang\n  distribution handshake for the connection. If the handshake successfully\n  completes it should continue to function as a connection supervisor. This\n  process should preferably execute on `max` priority and should be linked to\n  the caller. The `dist_util:net_ticker_spawn_options()` function can be called\n  to get spawn options suitable for this process which can be passed directly to\n  `erlang:spawn_opt/4`. `dist_util:net_ticker_spawn_options()` will by default\n  return `[link, {priority, max}]`, but allows the user to configure more\n  options using the\n  [`net_ticker_spawn_options`](`e:kernel:kernel_app.md#net_ticker_spawn_options`)\n  kernel parameter. The process identifier of this process should be returned.\n\n  The arguments:\n\n  - **`AcceptorPid`** - Process identifier of the process created by the\n    [`accept/1`](alt_dist.md#accept) callback.\n\n  - **`DistCtrl`** - The identifier of the distribution controller identifier\n    created by the acceptor process. To be passed along to\n    `dist_util:handshake_other_started(HsData)`.\n\n  - **`MyNode`** - Node name of this node. To be passed along to\n    `dist_util:handshake_other_started(HsData)`.\n\n  - **`Allowed`** - To be passed along to\n    `dist_util:handshake_other_started(HsData)`.\n\n  - **`SetupTime`** - Time used for creating a setup timer by a call to\n    `dist_util:start_timer(SetupTime)`. The timer should be passed along to\n    `dist_util:handshake_other_started(HsData)`.\n\n  The created process should provide callbacks and other information needed for\n  the handshake in a [`#hs_data{}`](alt_dist.md#hs_data_record) record and call\n  `dist_util:handshake_other_started(HsData)` with this record.\n\n  `dist_util:handshake_other_started(HsData)` will perform the handshake and if\n  the handshake successfully completes this process will then continue in a\n  connection supervisor loop as long as the connection is up.\n\n- ```\n  setup(Node, Type, MyNode, LongOrShortNames, SetupTime) ->\n    ConnectionSupervisorPid\n  ```\n  {: #setup }\n  \n  `setup/5` should spawn a process that connects to `Node`. When connection has\n  been established it should perform the Erlang distribution handshake for the\n  connection. If the handshake successfully completes it should continue to\n  function as a connection supervisor. This process should preferably execute on\n  `max` priority and should be linked to the caller. The\n  `dist_util:net_ticker_spawn_options()` function can be called to get spawn\n  options suitable for this process which can be passed directly to\n  `erlang:spawn_opt/4`. `dist_util:net_ticker_spawn_options()` will by default\n  return `[link, {priority, max}]`, but allows the user to configure more\n  options using the\n  [`net_ticker_spawn_options`](`e:kernel:kernel_app.md#net_ticker_spawn_options`)\n  kernel parameter. The process identifier of this process should be returned.\n\n  The arguments:\n\n  - **`Node`** - Node name of remote node. To be passed along to\n    `dist_util:handshake_we_started(HsData)`.\n\n  - **`Type`** - Connection type. To be passed along to\n    `dist_util:handshake_we_started(HsData)`.\n\n  - **`MyNode`** - Node name of this node. To be passed along to\n    `dist_util:handshake_we_started(HsData)`.\n\n  - **`LongOrShortNames`** - Either the atom `longnames` or the atom\n    `shortnames` indicating whether long or short names is used.\n\n  - **`SetupTime`** - Time used for creating a setup timer by a call to\n    `dist_util:start_timer(SetupTime)`. The timer should be passed along to\n    `dist_util:handshake_we_started(HsData)`.\n\n  The caller of this function is a representative for `net_kernel` (this may or\n  may not be the process registered as `net_kernel`) and is in this document\n  identified as `Kernel`.\n\n  This function should, besides spawning the connection supervisor, also create\n  a distribution controller. The distribution controller is either a process or\n  a port which is responsible for dispatching traffic.\n\n  The created process should provide callbacks and other information needed for\n  the handshake in a [`#hs_data{}`](alt_dist.md#hs_data_record) record and call\n  `dist_util:handshake_we_started(HsData)` with this record.\n\n  `dist_util:handshake_we_started(HsData)` will perform the handshake and the\n  handshake successfully completes this process will then continue in a\n  connection supervisor loop as long as the connection is up.\n\n- ```\n  close(Listen) ->\n    void()\n  ```\n  {: #close }\n  \n  Called in order to close the `Listen` handle that originally was passed from\n  the [`listen/1`](alt_dist.md#listen) callback.\n\n- ```\n  select(NodeName) ->\n    boolean()\n  ```\n  {: #select }\n  \n  Return `true` if the host name part of the `NodeName` is valid for use with\n  this protocol; otherwise, `false`.\n\nThere are also two optional functions that may be exported:\n\n- ```\n  setopts(Listen, Opts) ->\n    ok | {error, Error}\n  ```\n  {: #setopts }\n  \n  The argument `Listen` is the handle originally passed from the\n  [`listen/1`](alt_dist.md#listen) callback. The argument `Opts` is a list of\n  options to set on future connections.\n\n- ```\n  getopts(Listen, Opts) ->\n    {ok, OptionValues} | {error, Error}\n  ```\n  {: #getopts }\n  \n  The argument `Listen` is the handle originally passed from the\n  [`listen/1`](alt_dist.md#listen) callback. The argument `Opts` is a list of\n  options to read for future connections.\n\n[](){: #hs_data_record }","ref":"alt_dist.html#exported-callback-functions"},{"type":"extras","title":"The #hs_data{} Record - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"The `dist_util:handshake_we_started/1` and `dist_util:handshake_other_started/1`\nfunctions takes a `#hs_data{}` record as argument. There are quite a lot of\nfields in this record that you need to set. The record is defined in\n`kernel/include/dist_util.hrl`. Not documented fields should not be set, i.e.,\nshould be left as `undefined`.\n\nThe following `#hs_data{}` record fields need to be set unless otherwise stated:\n\n- **`kernel_pid`{: #hs_data_kernel_pid }** - Process identifier of the `Kernel`\n  process. That is, the process that called either\n  [`setup/5`](alt_dist.md#setup) or\n  [`accept_connection/5`](alt_dist.md#accept_connection).\n\n- **`other_node`{: #hs_data_other_node }** - Name of the other node. This field\n  is only mandatory when this node initiates the connection. That is, when\n  connection is set up via [`setup/5`](alt_dist.md#setup).\n\n- **`this_node`{: #hs_data_this_node }** - The node name of this node.\n\n- **`socket`{: #hs_data_socket }** - The identifier of the distribution\n  controller.\n\n- **`timer`{: #hs_data_timer }** - The timer created using\n  `dist_util:start_timer/1`.\n\n- **`allowed`{: #hs_data_allowed }** - Information passed as `Allowed` to\n  `accept_connection/5`. This field is only mandatory when the remote node\n  initiated the connection. That is, when the connection is set up via\n  [`accept_connection/5`](alt_dist.md#accept_connection).\n\n- **`f_send`{: #hs_data_f_send }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrlr, Data) -> ok | {error, Error}\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller and `Data`\n  is io data to pass to the other side.\n\n  Only used during handshake phase.\n\n- **`f_recv`{: #hs_data_f_recv }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrlr, Length, Timeout) -> {ok, Packet} | {error, Reason}\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller. If\n  `Length` is `0`, all available bytes should be returned. If `Length > 0`,\n  exactly `Length` bytes should be returned, or an error; possibly discarding\n  less than `Length` bytes of data when the connection is closed from the other\n  side. It is used for passive receive of data from the other end.\n\n  Only used during handshake phase.\n\n- **`f_setopts_pre_nodeup`{: #hs_data_f_setopts_pre_nodeup }** - A fun with the\n  following signature:\n\n  ```erlang\n  fun (DistCtrlr) -> ok | {error, Error}\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller. Called\n  just before the distribution channel is taken up for normal traffic.\n\n  Only used during handshake phase.\n\n- **`f_setopts_post_nodeup`{: #hs_data_f_setopts_post_nodeup }** - A fun with\n  the following signature:\n\n  ```erlang\n  fun (DistCtrlr) -> ok | {error, Error}\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller. Called\n  just after distribution channel has been taken up for normal traffic.\n\n  Only used during handshake phase.\n\n- **`f_getll`{: #hs_data_f_getll }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrlr) -> ID\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller and `ID` is\n  the identifier of the low level entity that handles the connection (often\n  `DistCtrlr` itself).\n\n  Only used during handshake phase.\n\n- **`f_address`{: #hs_data_f_address }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrlr, Node) -> NetAddress\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller, `Node` is\n  the node name of the node on the other end, and `NetAddress` is a\n  `#net_address{}` record with information about the address for the `Node` on\n  the other end of the connection. The `#net_address{}` record is defined in\n  `kernel/include/net_address.hrl`.\n\n  Only used during handshake phase.\n\n- **`mf_tick`{: #hs_data_mf_tick }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrlr) -> void()\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller. This\n  function should send information over the connection that is not interpreted\n  by the other end while increasing the statistics of received packets on the\n  other end. This is usually implemented by sending an empty packet.\n\n  > #### Note {: .info }\n  >\n  > It is of vital importance that this operation does not block the caller for\n  > a long time. This since it is called from the connection supervisor.\n\n  Used when connection is up.\n\n- **`mf_getstat`{: #hs_data_mf_getstat }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrlr) -> {ok, Received, Sent, PendSend}\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller, `Received`\n  is received packets, `Sent` is sent packets, and `PendSend` is amount of data\n  in queue to be sent (typically in bytes, but `dist_util` only checks whether\n  the value is non-zero to know there is data in queue) or a `t:boolean/0`\n  indicating whether there are packets in queue to be sent.\n\n  > #### Note {: .info }\n  >\n  > It is of vital importance that this operation does not block the caller for\n  > a long time. This since it is called from the connection supervisor.\n\n  Used when connection is up.\n\n- **`request_type`{: #hs_data_request_type }** - The request `Type` as passed to\n  [`setup/5`](alt_dist.md#setup). This is only mandatory when the connection has\n  been initiated by this node. That is, the connection is set up via `setup/5`.\n\n- **`mf_setopts`{: #hs_data_mf_setopts }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrl, Opts) -> ok | {error, Error}\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller and `Opts`\n  is a list of options to set on the connection.\n\n  This function is optional. Used when connection is up.\n\n- **`mf_getopts`{: #hs_data_mf_getopts }** - A fun with the following signature:\n\n  ```erlang\n  fun (DistCtrl, Opts) -> {ok, OptionValues} | {error, Error}\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller and `Opts`\n  is a list of options to read for the connection.\n\n  This function is optional. Used when connection is up.\n\n- **`f_handshake_complete`{: #hs_data_f_handshake_complete }** - A fun with the\n  following signature:\n\n  ```erlang\n  fun (DistCtrlr, Node, DHandle) -> void()\n  ```\n\n  where `DistCtrlr` is the identifier of the distribution controller, `Node` is\n  the node name of the node connected at the other end, and `DHandle` is a\n  distribution handle needed by a distribution controller process when calling\n  the following BIFs:\n\n  - `erlang:dist_ctrl_get_data/1`\n  - `erlang:dist_ctrl_get_data_notification/1`\n  - `erlang:dist_ctrl_input_handler/2`\n  - `erlang:dist_ctrl_put_data/2`\n\n  This function is called when the handshake has completed and the distribution\n  channel is up. The distribution controller can begin dispatching traffic over\n  the channel. This function is optional.\n\n  Only used during handshake phase.\n\n- **`add_flags`{: #hs_data_add_flags }** -\n  [Distribution flags](erl_dist_protocol.md#dflags) to add to the connection.\n  Currently all (non obsolete) flags will automatically be enabled.\n\n  This flag field is optional.\n\n- **`reject_flags`{: #hs_data_reject_flags }** -\n  [Distribution flags](erl_dist_protocol.md#dflags) to reject. Currently the\n  following distribution flags can be rejected:\n\n  - **`DFLAG_DIST_HDR_ATOM_CACHE`** - Do not use atom cache over this\n    connection.\n\n  - **`DFLAG_FRAGMENTS`** - Split large distribution messages into multiple\n    fragments.\n\n  This flag field is optional.\n\n  See also [Distribution Data Delivery](alt_dist.md#distribution-data-delivery)\n\n- **`require_flags`{: #hs_data_require_flags }** - Require these\n  [distribution flags](erl_dist_protocol.md#dflags) to be used. The connection\n  will be aborted during the handshake if the other end does not use them.\n\n  This flag field is optional.","ref":"alt_dist.html#the-hs_data-record"},{"type":"extras","title":"Distribution Data Delivery - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"When using the default configuration, the data to pass over a connection needs\nto be delivered as is to the node on the receiving end in the _exact same\norder_, with no loss of data what so ever, as sent from the sending node.\n\nThe data delivery order can be relaxed by disabling features that require strict\nordering. This is done by passing the\n[distribution flags](erl_dist_protocol.md#dflags) returned by\n`dist_util:strict_order_flags/0` in the\n[`reject_flags`](alt_dist.md#hs_data_reject_flags) field of the\n[`#hs_data{}`](alt_dist.md#hs_data_record) record used when setting up the\nconnection. When relaxed ordering is used, only the order of signals with the\nsame sender/receiver pair has to be preserved. However, note that disabling the\nfeatures that require strict ordering may have a negative impact on performance,\nthroughput, and/or latency.","ref":"alt_dist.html#distribution-data-delivery"},{"type":"extras","title":"Enable Your Distribution Module - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"For `net_kernel` to find out which distribution module to use, the `erl`\ncommand-line argument `-proto_dist` is used. It is followed by one or more\ndistribution module names, with suffix \"\\_dist\" removed. That is, `gen_tcp_dist`\nas a distribution module is specified as `-proto_dist gen_tcp`.\n\nIf no `epmd` (TCP port mapper daemon) is used, also command-line option\n`-no_epmd` is to be specified, which makes Erlang skip the `epmd` startup, both\nas an OS process and as an Erlang ditto.","ref":"alt_dist.html#enable-your-distribution-module"},{"type":"extras","title":"The Driver - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"> #### Note {: .info }\n>\n> This section was written a long time ago. Most of it is still valid, but some\n> things have changed since then. Some updates have been made to the\n> documentation of the driver presented here, but more can be done and is\n> planned for the future. The reader is encouraged to read the\n> [`erl_driver`](erl_driver.md) and [`driver_entry`](driver_entry.md)\n> documentation also.\n\nAlthough Erlang drivers in general can be beyond the scope of this section, a\nbrief introduction seems to be in place.","ref":"alt_dist.html#the-driver"},{"type":"extras","title":"Drivers in General - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"An Erlang driver is a native code module written in C (or assembler), which\nserves as an interface for some special operating system service. This is a\ngeneral mechanism that is used throughout the Erlang emulator for all kinds of\nI/O. An Erlang driver can be dynamically linked (or loaded) to the Erlang\nemulator at runtime by using the `erl_ddll` Erlang module. Some of the drivers\nin OTP are however statically linked to the runtime system, but that is more an\noptimization than a necessity.\n\nThe driver data types and the functions available to the driver writer are\ndefined in header file `erl_driver.h` seated in Erlang's include directory. See\nthe [erl_driver](erl_driver.md) documentation for details of which functions are\navailable.\n\nWhen writing a driver to make a communications protocol available to Erlang, one\nshould know just about everything worth knowing about that particular protocol.\nAll operation must be non-blocking and all possible situations are to be\naccounted for in the driver. A non-stable driver will affect and/or crash the\nwhole Erlang runtime system.\n\nThe emulator calls the driver in the following situations:\n\n- When the driver is loaded. This callback must have a special name and inform\n  the emulator of what callbacks are to be used by returning a pointer to a\n  `ErlDrvEntry` struct, which is to be properly filled in (see below).\n- When a port to the driver is opened (by a `open_port` call from Erlang). This\n  routine is to set up internal data structures and return an opaque data entity\n  of the type `ErlDrvData`, which is a data type large enough to hold a pointer.\n  The pointer returned by this function is the first argument to all other\n  callbacks concerning this particular port. It is usually called the port\n  handle. The emulator only stores the handle and does never try to interpret\n  it, why it can be virtually anything (anything not larger than a pointer that\n  is) and can point to anything if it is a pointer. Usually this pointer refers\n  to a structure holding information about the particular port, as it does in\n  the example.\n- When an Erlang process sends data to the port. The data arrives as a buffer of\n  bytes, the interpretation is not defined, but is up to the implementor. This\n  callback returns nothing to the caller, answers are sent to the caller as\n  messages (using a routine called `driver_output` available to all drivers).\n  There is also a way to talk in a synchronous way to drivers, described below.\n  There can be an additional callback function for handling data that is\n  fragmented (sent in a deep io-list). That interface gets the data in a form\n  suitable for Unix `writev` rather than in a single buffer. There is no need\n  for a distribution driver to implement such a callback, so we will not.\n- When a file descriptor is signaled for input. This callback is called when the\n  emulator detects input on a file descriptor that the driver has marked for\n  monitoring by using the interface `driver_select`. The mechanism of driver\n  select makes it possible to read non-blocking from file descriptors by calling\n  `driver_select` when reading is needed, and then do the reading in this\n  callback (when reading is possible). The typical scenario is that\n  `driver_select` is called when an Erlang process orders a read operation, and\n  that this routine sends the answer when data is available on the file\n  descriptor.\n- When a file descriptor is signaled for output. This callback is called in a\n  similar way as the previous, but when writing to a file descriptor is\n  possible. The usual scenario is that Erlang orders writing on a file\n  descriptor and that the driver calls `driver_select`. When the descriptor is\n  ready for output, this callback is called and the driver can try to send the\n  output. Queuing can be involved in such operations, and there are convenient\n  queue routines available to the driver writer to use.\n- When a port is closed, either by an Erlang process or by the driver calling\n  one of the `driver_failure_XXX` routines. This routine is to clean up\n  everything connected to one particular port. When other callbacks call a\n  `driver_failure_XXX` routine, this routine is immediately called. The callback\n  routine issuing the error can make no more use of the data structures for the\n  port, as this routine surely has freed all associated data and closed all file\n  descriptors. If the queue utility available to driver writer is used, this\n  routine is however _not_ called until the queue is empty.\n- When an Erlang process calls `erlang:port_control/3`, which is a synchronous\n  interface to drivers. The control interface is used to set driver options,\n  change states of ports, and so on. This interface is used a lot in the\n  example.\n- When a timer expires. The driver can set timers with the function\n  `driver_set_timer`. When such timers expire, a specific callback function is\n  called. No timers are used in the example.\n- When the whole driver is unloaded. Every resource allocated by the driver is\n  to be freed.","ref":"alt_dist.html#drivers-in-general"},{"type":"extras","title":"The Data Structures of the Distribution Driver - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"The driver used for Erlang distribution is to implement a reliable, order\nmaintaining, variable length packet-oriented protocol. All error correction,\nresending and such need to be implemented in the driver or by the underlying\ncommunications protocol. If the protocol is stream-oriented (as is the case with\nboth TCP/IP and our streamed Unix domain sockets), some mechanism for packaging\nis needed. We will use the simple method of having a header of four bytes\ncontaining the length of the package in a big-endian 32-bit integer. As Unix\ndomain sockets only can be used between processes on the same machine, we do not\nneed to code the integer in some special endianness, but we will do it anyway\nbecause in most situation you need to do it. Unix domain sockets are reliable\nand order maintaining, so we do not need to implement resends and such in the\ndriver.\n\nWe start writing the example Unix domain sockets driver by declaring prototypes\nand filling in a static `ErlDrvEntry` structure:\n\n```c\n( 1) #include  \n( 2) #include  \n( 3) #include  \n( 4) #include  \n( 5) #include  \n( 6) #include  \n( 7) #include  \n( 8) #include  \n( 9) #include  \n(10) #include  \n\n(11) #define HAVE_UIO_H\n(12) #include \"erl_driver.h\"\n\n(13) /*\n(14) ** Interface routines\n(15) */\n(16) static ErlDrvData uds_start(ErlDrvPort port, char *buff);\n(17) static void uds_stop(ErlDrvData handle);\n(18) static void uds_command(ErlDrvData handle, char *buff, int bufflen);\n(19) static void uds_input(ErlDrvData handle, ErlDrvEvent event);\n(20) static void uds_output(ErlDrvData handle, ErlDrvEvent event);\n(21) static void uds_finish(void);\n(22) static int uds_control(ErlDrvData handle, unsigned int command,\n(23)                        char* buf, int count, char** res, int res_size);\n\n(24) /* The driver entry */\n(25) static ErlDrvEntry uds_driver_entry = {\n(26)     NULL,                            /* init, N/A */\n(27)     uds_start,                       /* start, called when port is opened */\n(28)     uds_stop,                        /* stop, called when port is closed */\n(29)     uds_command,                     /* output, called when erlang has sent */\n(30)     uds_input,                       /* ready_input, called when input\n(31)                                         descriptor ready */\n(32)     uds_output,                      /* ready_output, called when output\n(33)                                         descriptor ready */\n(34)     \"uds_drv\",                       /* char *driver_name, the argument\n(35)                                         to open_port */\n(36)     uds_finish,                      /* finish, called when unloaded */\n(37)     NULL,                            /* void * that is not used (BC) */\n(38)     uds_control,                     /* control, port_control callback */\n(39)     NULL,                            /* timeout, called on timeouts */\n(40)     NULL,                            /* outputv, vector output interface */\n(41)     NULL,                            /* ready_async callback */\n(42)     NULL,                            /* flush callback */\n(43)     NULL,                            /* call callback */\n(44)     NULL,                            /* event callback */\n(45)     ERL_DRV_EXTENDED_MARKER,         /* Extended driver interface marker */\n(46)     ERL_DRV_EXTENDED_MAJOR_VERSION,  /* Major version number */\n(47)     ERL_DRV_EXTENDED_MINOR_VERSION,  /* Minor version number */\n(48)     ERL_DRV_FLAG_SOFT_BUSY,          /* Driver flags. Soft busy flag is\n(49)                                         required for distribution drivers */\n(50)     NULL,                            /* Reserved for internal use */\n(51)     NULL,                            /* process_exit callback */\n(52)     NULL                             /* stop_select callback */\n(53) };\n```\n\nOn line 1-10 the OS headers needed for the driver are included. As this driver\nis written for Solaris, we know that the header `uio.h` exists. So the\npreprocessor variable `HAVE_UIO_H` can be defined before `erl_driver.h` is\nincluded on line 12. The definition of `HAVE_UIO_H` will make the I/O vectors\nused in Erlang's driver queues to correspond to the operating systems ditto,\nwhich is very convenient.\n\nOn line 16-23 the different callback functions are declared (\"forward\ndeclarations\").\n\nThe driver structure is similar for statically linked-in drivers and dynamically\nloaded. However, some of the fields are to be left empty (that is, initialized\nto NULL) in the different types of drivers. The first field (the `init` function\npointer) is always left blank in a dynamically loaded driver, see line 26.\n`NULL` on line 37 is always to be there, the field is no longer used and is\nretained for backward compatibility. No timers are used in this driver, why no\ncallback for timers is needed. The `outputv` field (line 40) can be used to\nimplement an interface similar to Unix `writev` for output. The Erlang runtime\nsystem could previously not use `outputv` for the distribution, but it can as\nfrom ERTS 5.7.2. As this driver was written before ERTS 5.7.2 it does not use\nthe `outputv` callback. Using the `outputv` callback is preferred, as it reduces\ncopying of data. (We will however use scatter/gather I/O internally in the\ndriver.)\n\nAs from ERTS 5.5.3 the driver interface was extended with version control and\nthe possibility to pass capability information. Capability flags are present on\nline 48. As from ERTS 5.7.4 flag\n[`ERL_DRV_FLAG_SOFT_BUSY`](driver_entry.md#driver_flags) is required for drivers\nthat are to be used by the distribution. The soft busy flag implies that the\ndriver can handle calls to the `output` and `outputv` callbacks although it has\nmarked itself as busy. This has always been a requirement on drivers used by the\ndistribution, but no capability information has been available about this\npreviously. For more information, see\n[`erl_driver:set_busy_port()`](erl_driver.md#set_busy_port)).\n\nThis driver was written before the runtime system had SMP support. The driver\nwill still function in the runtime system with SMP support, but performance will\nsuffer from lock contention on the driver lock used for the driver. This can be\nalleviated by reviewing and perhaps rewriting the code so that each instance of\nthe driver safely can execute in parallel. When instances safely can execute in\nparallel, it is safe to enable instance-specific locking on the driver. This is\ndone by passing [`ERL_DRV_FLAG_USE_PORT_LOCKING`](driver_entry.md#driver_flags)\nas a driver flag. This is left as an exercise for the reader.\n\nThus, the defined callbacks are as follows:\n\n- **`uds_start`** - Must initiate data for a port. We do not create any sockets\n  here, only initialize data structures.\n\n- **`uds_stop`** - Called when a port is closed.\n\n- **`uds_command`** - Handles messages from Erlang. The messages can either be\n  plain data to be sent or more subtle instructions to the driver. This function\n  is here mostly for data pumping.\n\n- **`uds_input`** - Called when there is something to read from a socket.\n\n- **`uds_output`** - Called when it is possible to write to a socket.\n\n- **`uds_finish`** - Called when the driver is unloaded. A distribution driver\n  will never be unloaded, but we include this for completeness. To be able to\n  clean up after oneself is always a good thing.\n\n- **`uds_control`** - The `erlang:port_control/3` callback, which is used a lot\n  in this implementation.\n\nThe ports implemented by this driver operate in two major modes, named `command`\nand `data`. In `command` mode, only passive reading and writing (like\n`gen_tcp:recv`/`gen_tcp:send`) can be done. The port is in this mode during the\ndistribution handshake. When the connection is up, the port is switched to\n`data` mode and all data is immediately read and passed further to the Erlang\nemulator. In `data` mode, no data arriving to `uds_command` is interpreted, only\npackaged and sent out on the socket. The `uds_control` callback does the\nswitching between those two modes.\n\nWhile `net_kernel` informs different subsystems that the connection is coming\nup, the port is to accept data to send. However, the port should not receive any\ndata, to avoid that data arrives from another node before every kernel subsystem\nis prepared to handle it. A third mode, named `intermediate`, is used for this\nintermediate stage.\n\nAn enum is defined for the different types of ports:\n\n```c\n( 1) typedef enum {\n( 2)     portTypeUnknown,      /* An uninitialized port */\n( 3)     portTypeListener,     /* A listening port/socket */\n( 4)     portTypeAcceptor,     /* An intermediate stage when accepting\n( 5)                              on a listen port */\n( 6)     portTypeConnector,    /* An intermediate stage when connecting */\n( 7)     portTypeCommand,      /* A connected open port in command mode */\n( 8)     portTypeIntermediate, /* A connected open port in special\n( 9)                              half active mode */\n(10)     portTypeData          /* A connected open port in data mode */\n(11) } PortType;\n```\n\nThe different types are as follows:\n\n- **`portTypeUnknown`** - The type a port has when it is opened, but not bound\n  to any file descriptor.\n\n- **`portTypeListener`** - A port that is connected to a listen socket. This\n  port does not do much, no data pumping is done on this socket, but read data\n  is available when one is trying to do an accept on the port.\n\n- **`portTypeAcceptor`** - This port is to represent the result of an accept\n  operation. It is created when one wants to accept from a listen socket, and it\n  is converted to a `portTypeCommand` when the accept succeeds.\n\n- **`portTypeConnector`** - Very similar to `portTypeAcceptor`, an intermediate\n  stage between the request for a connect operation and that the socket is\n  connected to an accepting ditto in the other end. When the sockets are\n  connected, the port switches type to `portTypeCommand`.\n\n- **`portTypeCommand`** - A connected socket (or accepted socket) in `command`\n  mode mentioned earlier.\n\n- **`portTypeIntermediate`** - The intermediate stage for a connected socket.\n  There is to be no processing of input for this socket.\n\n- **`portTypeData`** - The mode where data is pumped through the port and the\n  `uds_command` routine regards every call as a call where sending is wanted. In\n  this mode, all input available is read and sent to Erlang when it arrives on\n  the socket, much like in the active mode of a `gen_tcp` socket.\n\nWe study the state that is needed for the ports. Notice that not all fields are\nused for all types of ports. Some space could be saved by using unions, but that\nwould clutter the code with multiple indirections, so here is used one struct\nfor all types of ports, for readability:\n\n```c\n( 1) typedef unsigned char Byte;\n( 2) typedef unsigned int Word;\n\n( 3) typedef struct uds_data {\n( 4)     int fd;                   /* File descriptor */\n( 5)     ErlDrvPort port;          /* The port identifier */\n( 6)     int lockfd;               /* The file descriptor for a lock file in\n( 7)                                  case of listen sockets */\n( 8)     Byte creation;            /* The creation serial derived from the\n( 9)                                  lock file */\n(10)     PortType type;            /* Type of port */\n(11)     char *name;               /* Short name of socket for unlink */\n(12)     Word sent;                /* Bytes sent */\n(13)     Word received;            /* Bytes received */\n(14)     struct uds_data *partner; /* The partner in an accept/listen pair */\n(15)     struct uds_data *next;    /* Next structure in list */\n(16)     /* The input buffer and its data */\n(17)     int buffer_size;          /* The allocated size of the input buffer */\n(18)     int buffer_pos;           /* Current position in input buffer */\n(19)     int header_pos;           /* Where the current header is in the\n(20)                                  input buffer */\n(21)     Byte *buffer;             /* The actual input buffer */\n(22) } UdsData;\n```\n\nThis structure is used for all types of ports although some fields are useless\nfor some types. The least memory consuming solution would be to arrange this\nstructure as a union of structures. However, the multiple indirections in the\ncode to access a field in such a structure would clutter the code too much for\nan example.\n\nThe fields in the structure are as follows:\n\n- **`fd`** - The file descriptor of the socket associated with the port.\n\n- **`port`** - The port identifier for the port that this structure corresponds\n  to. It is needed for most `driver_XXX` calls from the driver back to the\n  emulator.\n\n- **`lockfd`** - If the socket is a listen socket, we use a separate (regular)\n  file for two purposes:\n\n  - We want a locking mechanism that gives no race conditions, to be sure if\n    another Erlang node uses the listen socket name we require or if the file is\n    only left there from a previous (crashed) session.\n  - We store the `creation` serial number in the file. The `creation` is a\n    number that is to change between different instances of different Erlang\n    emulators with the same name, so that process identifiers from one emulator\n    do not become valid when sent to a new emulator with the same distribution\n    name. The creation can be from 0 through 3 (two bits) and is stored in every\n    process identifier sent to another node.\n\n    In a system with TCP-based distribution, this data is kept in the _Erlang\n    port mapper daemon_ (`epmd`), which is contacted when a distributed node\n    starts. The lock file and a convention for the UDS listen socket's name\n    remove the need for `epmd` when using this distribution module. UDS is\n    always restricted to one host, why avoiding a port mapper is easy.\n\n- **`creation`** - The creation number for a listen socket, which is calculated\n  as (the value found in the lock-file + 1) rem 4. This creation value is also\n  written back into the lock file, so that the next invocation of the emulator\n  finds our value in the file.\n\n- **`type`** - The current type/state of the port, which can be one of the\n  values declared above.\n\n- **`name`** - The name of the socket file (the path prefix removed), which\n  allows for deletion (`unlink`) when the socket is closed.\n\n- **`sent`** - How many bytes that have been sent over the socket. This can\n  wrap, but that is no problem for the distribution, as the Erlang distribution\n  is only interested in if this value has changed. (The Erlang `net_kernel`\n  `ticker` uses this value by calling the driver to fetch it, which is done\n  through the `erlang:port_control/3` routine.)\n\n- **`received`** - How many bytes that are read (received) from the socket, used\n  in similar ways as `sent`.\n\n- **`partner`** - A pointer to another port structure, which is either the\n  listen port from which this port is accepting a connection or conversely. The\n  \"partner relation\" is always bidirectional.\n\n- **`next`** - Pointer to next structure in a linked list of all port\n  structures. This list is used when accepting connections and when the driver\n  is unloaded.\n\n- **`buffer_size`, `buffer_pos`, `header_pos`, `buffer`** - Data for input\n  buffering. For details about the input buffering, see the source code in\n  directory `kernel/examples`. That certainly goes beyond the scope of this\n  section.","ref":"alt_dist.html#the-data-structures-of-the-distribution-driver"},{"type":"extras","title":"Selected Parts of the Distribution Driver Implementation - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"The implementation of the distribution driver is not completely covered here,\ndetails about buffering and other things unrelated to driver writing are not\nexplained. Likewise are some peculiarities of the UDS protocol not explained in\ndetail. The chosen protocol is not important.\n\nPrototypes for the driver callback routines can be found in the `erl_driver.h`\nheader file.\n\nThe driver initialization routine is (usually) declared with a macro to make the\ndriver easier to port between different operating systems (and flavors of\nsystems). This is the only routine that must have a well-defined name. All other\ncallbacks are reached through the driver structure. The macro to use is named\n`DRIVER_INIT` and takes the driver name as parameter:\n\n```c\n(1) /* Beginning of linked list of ports */\n(2) static UdsData *first_data;\n\n(3) DRIVER_INIT(uds_drv)\n(4) {\n(5)     first_data = NULL;\n(6)     return &uds_driver_entry;\n(7) }\n```\n\nThe routine initializes the single global data structure and returns a pointer\nto the driver entry. The routine is called when `erl_ddll:load_driver` is called\nfrom Erlang.\n\nThe `uds_start` routine is called when a port is opened from Erlang. In this\ncase, we only allocate a structure and initialize it. Creating the actual socket\nis left to the `uds_command` routine.\n\n```c\n( 1) static ErlDrvData uds_start(ErlDrvPort port, char *buff)\n( 2) {\n( 3)     UdsData *ud;\n( 4)\n( 5)     ud = ALLOC(sizeof(UdsData));\n( 6)     ud->fd = -1;\n( 7)     ud->lockfd = -1;\n( 8)     ud->creation = 0;\n( 9)     ud->port = port;\n(10)     ud->type = portTypeUnknown;\n(11)     ud->name = NULL;\n(12)     ud->buffer_size = 0;\n(13)     ud->buffer_pos = 0;\n(14)     ud->header_pos = 0;\n(15)     ud->buffer = NULL;\n(16)     ud->sent = 0;\n(17)     ud->received = 0;\n(18)     ud->partner = NULL;\n(19)     ud->next = first_data;\n(20)     first_data = ud;\n(21)\n(22)     return((ErlDrvData) ud);\n(23) }\n```\n\nEvery data item is initialized, so that no problems arise when a newly created\nport is closed (without there being any corresponding socket). This routine is\ncalled when [`open_port({spawn, \"uds_drv\"},[])`](`open_port/2`) is called from\nErlang.\n\nThe `uds_command` routine is the routine called when an Erlang process sends\ndata to the port. This routine handles all asynchronous commands when the port\nis in `command` mode and the sending of all data when the port is in `data`\nmode:\n\n```c\n( 1) static void uds_command(ErlDrvData handle, char *buff, int bufflen)\n( 2) {\n( 3)     UdsData *ud = (UdsData *) handle;\n\n( 4)     if (ud->type == portTypeData || ud->type == portTypeIntermediate) {\n( 5)         DEBUGF((\"Passive do_send %d\",bufflen));\n( 6)         do_send(ud, buff + 1, bufflen - 1); /* XXX */\n( 7)         return;\n( 8)     }\n( 9)     if (bufflen == 0) {\n(10)         return;\n(11)     }\n(12)     switch (*buff) {\n(13)     case 'L':\n(14)         if (ud->type != portTypeUnknown) {\n(15)             driver_failure_posix(ud->port, ENOTSUP);\n(16)             return;\n(17)         }\n(18)         uds_command_listen(ud,buff,bufflen);\n(19)         return;\n(20)     case 'A':\n(21)         if (ud->type != portTypeUnknown) {\n(22)             driver_failure_posix(ud->port, ENOTSUP);\n(23)             return;\n(24)         }\n(25)         uds_command_accept(ud,buff,bufflen);\n(26)         return;\n(27)     case 'C':\n(28)         if (ud->type != portTypeUnknown) {\n(29)             driver_failure_posix(ud->port, ENOTSUP);\n(30)             return;\n(31)         }\n(32)         uds_command_connect(ud,buff,bufflen);\n(33)         return;\n(34)     case 'S':\n(35)         if (ud->type != portTypeCommand) {\n(36)             driver_failure_posix(ud->port, ENOTSUP);\n(37)             return;\n(38)         }\n(39)         do_send(ud, buff + 1, bufflen - 1);\n(40)         return;\n(41)     case 'R':\n(42)         if (ud->type != portTypeCommand) {\n(43)             driver_failure_posix(ud->port, ENOTSUP);\n(44)             return;\n(45)         }\n(46)         do_recv(ud);\n(47)         return;\n(48)     default:\n(49)         return;\n(50)     }\n(51) }\n```\n\nThe command routine takes three parameters; the handle returned for the port by\n`uds_start`, which is a pointer to the internal port structure, the data buffer,\nand the length of the data buffer. The buffer is the data sent from Erlang (a\nlist of bytes) converted to an C array (of bytes).\n\nIf Erlang sends, for example, the list `[$a,$b,$c]` to the port, the `bufflen`\nvariable is `3` and the `buff` variable contains `{'a','b','c'}` (no `NULL`\ntermination). Usually the first byte is used as an opcode, which is the case in\nthis driver too (at least when the port is in `command` mode). The opcodes are\ndefined as follows:\n\n- **`'L' `** - Creates and listens on socket with the specified\n  name.\n\n- **`'A' `** - Accepts from the listen socket\n  identified by the specified identification number. The identification number\n  is retrieved with the `uds_control` routine.\n\n- **`'C' `** - Connects to the socket named  .\n\n- **`'S' `** - Sends the data   on the connected/accepted socket (in\n  `command` mode). The sending is acknowledged when the data has left this\n  process.\n\n- **`'R'`** - Receives one packet of data.\n\n\"One packet of data\" in command `'R'` can be explained as follows. This driver\nalways sends data packaged with a 4 byte header containing a big-endian 32-bit\ninteger that represents the length of the data in the packet. There is no need\nfor different packet sizes or some kind of streamed mode, as this driver is for\nthe distribution only. Why is the header word coded explicitly in big-endian\nwhen a UDS socket is local to the host? It is good practice when writing a\ndistribution driver, as distribution in practice usually crosses the host\nboundaries.\n\nOn line 4-8 is handled the case where the port is in `data` mode or\n`intermediate` mode and the remaining routine handles the different commands.\nThe routine uses the `driver_failure_posix()` routine to report errors (see, for\nexample, line 15). Notice that the failure routines make a call to the\n`uds_stop` routine, which will remove the internal port data. The handle (and\nthe casted handle `ud`) is therefore _invalid pointers_ after a `driver_failure`\ncall and we should _return immediately_. The runtime system will send exit\nsignals to all linked processes.\n\nThe `uds_input` routine is called when data is available on a file descriptor\npreviously passed to the `driver_select` routine. This occurs typically when a\nread command is issued and no data is available. The `do_recv` routine is as\nfollows:\n\n```c\n( 1) static void do_recv(UdsData *ud)\n( 2) {\n( 3)     int res;\n( 4)     char *ibuf;\n( 5)     for(;;) {\n( 6)         if ((res = buffered_read_package(ud,&ibuf)) < 0) {\n( 7)             if (res == NORMAL_READ_FAILURE) {\n( 8)                 driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_READ, 1);\n( 9)             } else {\n(10)                 driver_failure_eof(ud->port);\n(11)             }\n(12)             return;\n(13)         }\n(14)         /* Got a package */\n(15)         if (ud->type == portTypeCommand) {\n(16)             ibuf[-1] = 'R'; /* There is always room for a single byte\n(17)                                opcode before the actual buffer\n(18)                                (where the packet header was) */\n(19)             driver_output(ud->port,ibuf - 1, res + 1);\n(20)             driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_READ,0);\n(21)             return;\n(22)         } else {\n(23)             ibuf[-1] = DIST_MAGIC_RECV_TAG; /* XXX */\n(24)             driver_output(ud->port,ibuf - 1, res + 1);\n(25)             driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_READ,1);\n(26)         }\n(27)     }\n(28) }\n```\n\nThe routine tries to read data until a packet is read or the\n`buffered_read_package` routine returns a `NORMAL_READ_FAILURE` (an internally\ndefined constant for the module, which means that the read operation resulted in\nan `EWOULDBLOCK`). If the port is in `command` mode, the reading stops when one\npackage is read. If the port is in `data` mode, the reading continues until the\nsocket buffer is empty (read failure). If no more data can be read and more is\nwanted (which is always the case when the socket is in `data` mode),\n`driver_select` is called to make the `uds_input` callback be called when more\ndata is available for reading.\n\nWhen the port is in `data` mode, all data is sent to Erlang in a format that\nsuits the distribution. In fact, the raw data will never reach any Erlang\nprocess, but will be translated/interpreted by the emulator itself and then\ndelivered in the correct format to the correct processes. In the current\nemulator version, received data is to be tagged with a single byte of 100. That\nis what the macro `DIST_MAGIC_RECV_TAG` is defined to. The tagging of data in\nthe distribution can be changed in the future.\n\nThe `uds_input` routine handles other input events (like non-blocking `accept`),\nbut most importantly handle data arriving at the socket by calling `do_recv`:\n\n```c\n( 1) static void uds_input(ErlDrvData handle, ErlDrvEvent event)\n( 2) {\n( 3)     UdsData *ud = (UdsData *) handle;\n\n( 4)     if (ud->type == portTypeListener) {\n( 5)         UdsData *ad = ud->partner;\n( 6)         struct sockaddr_un peer;\n( 7)         int pl = sizeof(struct sockaddr_un);\n( 8)         int fd;\n\n( 9)         if ((fd = accept(ud->fd, (struct sockaddr *) &peer, &pl)) < 0) {\n(10)             if (errno != EWOULDBLOCK) {\n(11)                 driver_failure_posix(ud->port, errno);\n(12)                 return;\n(13)             }\n(14)             return;\n(15)         }\n(16)         SET_NONBLOCKING(fd);\n(17)         ad->fd = fd;\n(18)         ad->partner = NULL;\n(19)         ad->type = portTypeCommand;\n(20)         ud->partner = NULL;\n(21)         driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_READ, 0);\n(22)         driver_output(ad->port, \"Aok\",3);\n(23)         return;\n(24)     }\n(25)     do_recv(ud);\n(26) }\n```\n\nThe important line is the last line in the function: the `do_read` routine is\ncalled to handle new input. The remaining function handles input on a listen\nsocket, which means that it is to be possible to do an accept on the socket,\nwhich is also recognized as a read event.\n\nThe output mechanisms are similar to the input. The `do_send` routine is as\nfollows:\n\n```c\n( 1) static void do_send(UdsData *ud, char *buff, int bufflen)\n( 2) {\n( 3)     char header[4];\n( 4)     int written;\n( 5)     SysIOVec iov[2];\n( 6)     ErlIOVec eio;\n( 7)     ErlDrvBinary *binv[] = {NULL,NULL};\n\n( 8)     put_packet_length(header, bufflen);\n( 9)     iov[0].iov_base = (char *) header;\n(10)     iov[0].iov_len = 4;\n(11)     iov[1].iov_base = buff;\n(12)     iov[1].iov_len = bufflen;\n(13)     eio.iov = iov;\n(14)     eio.binv = binv;\n(15)     eio.vsize = 2;\n(16)     eio.size = bufflen + 4;\n(17)     written = 0;\n(18)     if (driver_sizeq(ud->port) == 0) {\n(19)         if ((written = writev(ud->fd, iov, 2)) == eio.size) {\n(20)             ud->sent += written;\n(21)             if (ud->type == portTypeCommand) {\n(22)                 driver_output(ud->port, \"Sok\", 3);\n(23)             }\n(24)             return;\n(25)         } else if (written < 0) {\n(26)             if (errno != EWOULDBLOCK) {\n(27)                 driver_failure_eof(ud->port);\n(28)                 return;\n(29)             } else {\n(30)                 written = 0;\n(31)             }\n(32)         } else {\n(33)             ud->sent += written;\n(34)         }\n(35)         /* Enqueue remaining */\n(36)     }\n(37)     driver_enqv(ud->port, &eio, written);\n(38)     send_out_queue(ud);\n(39) }\n```\n\nThis driver uses the `writev` system call to send data onto the socket. A\ncombination of `writev` and the driver output queues is very convenient. An\n`ErlIOVec` structure contains a `SysIOVec` (which is equivalent to the\n`struct iovec` structure defined in `uio.h`. The `ErlIOVec` also contains an\narray of `ErlDrvBinary` pointers, of the same length as the number of buffers in\nthe I/O vector itself. One can use this to allocate the binaries for the queue\n\"manually\" in the driver, but here the binary array is filled with `NULL` values\n(line 7). The runtime system then allocates its own buffers when `driver_enqv`\nis called (line 37).\n\nThe routine builds an I/O vector containing the header bytes and the buffer (the\nopcode has been removed and the buffer length decreased by the output routine).\nIf the queue is empty, we write the data directly to the socket (or at least try\nto). If any data is left, it is stored in the queue and then we try to send the\nqueue (line 38). An acknowledgement is sent when the message is delivered\ncompletely (line 22). The `send_out_queue` sends acknowledgements if the sending\nis completed there. If the port is in `command` mode, the Erlang code serializes\nthe send operations so that only one packet can be waiting for delivery at a\ntime. Therefore the acknowledgement can be sent whenever the queue is empty.\n\nThe `send_out_queue` routine is as follows:\n\n```c\n( 1) static int send_out_queue(UdsData *ud)\n( 2) {\n( 3)     for(;;) {\n( 4)         int vlen;\n( 5)         SysIOVec *tmp = driver_peekq(ud->port, &vlen);\n( 6)         int wrote;\n( 7)         if (tmp == NULL) {\n( 8)             driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_WRITE, 0);\n( 9)             if (ud->type == portTypeCommand) {\n(10)                 driver_output(ud->port, \"Sok\", 3);\n(11)             }\n(12)             return 0;\n(13)         }\n(14)         if (vlen > IO_VECTOR_MAX) {\n(15)             vlen = IO_VECTOR_MAX;\n(16)         }\n(17)         if ((wrote = writev(ud->fd, tmp, vlen)) < 0) {\n(18)             if (errno == EWOULDBLOCK) {\n(19)                 driver_select(ud->port, (ErlDrvEvent) ud->fd,\n(20)                               DO_WRITE, 1);\n(21)                 return 0;\n(22)             } else {\n(23)                 driver_failure_eof(ud->port);\n(24)                 return -1;\n(25)             }\n(26)         }\n(27)         driver_deq(ud->port, wrote);\n(28)         ud->sent += wrote;\n(29)     }\n(30) }\n```\n\nWe simply pick out an I/O vector from the queue (which is the whole queue as a\n`SysIOVec`). If the I/O vector is too long (`IO_VECTOR_MAX` is defined to 16),\nthe vector length is decreased (line 15), otherwise the `writev` call (line 17)\nfails. Writing is tried and anything written is dequeued (line 27). If the write\nfails with `EWOULDBLOCK` (notice that all sockets are in non-blocking mode),\n`driver_select` is called to make the `uds_output` routine be called when there\nis space to write again.\n\nWe continue trying to write until the queue is empty or the writing blocks.\n\nThe routine above is called from the `uds_output` routine:\n\n```c\n( 1) static void uds_output(ErlDrvData handle, ErlDrvEvent event)\n( 2) {\n( 3)    UdsData *ud = (UdsData *) handle;\n( 4)    if (ud->type == portTypeConnector) {\n( 5)        ud->type = portTypeCommand;\n( 6)        driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_WRITE, 0);\n( 7)        driver_output(ud->port, \"Cok\",3);\n( 8)        return;\n( 9)    }\n(10)    send_out_queue(ud);\n(11) }\n```\n\nThe routine is simple: it first handles the fact that the output select will\nconcern a socket in the business of connecting (and the connecting blocked). If\nthe socket is in a connected state, it simply sends the output queue. This\nroutine is called when it is possible to write to a socket where we have an\noutput queue, so there is no question what to do.\n\nThe driver implements a control interface, which is a synchronous interface\ncalled when Erlang calls `erlang:port_control/3`. Only this interface can\ncontrol the driver when it is in `data` mode. It can be called with the\nfollowing opcodes:\n\n- **`'C'`** - Sets port in `command` mode.\n\n- **`'I'`** - Sets port in `intermediate` mode.\n\n- **`'D'`** - Sets port in `data` mode.\n\n- **`'N'`** - Gets identification number for listen port. This identification\n  number is used in an accept command to the driver. It is returned as a\n  big-endian 32-bit integer, which is the file identifier for the listen socket.\n\n- **`'S'`** - Gets statistics, which is the number of bytes received, the number\n  of bytes sent, and the number of bytes pending in the output queue. This data\n  is used when the distribution checks that a connection is alive (ticking). The\n  statistics is returned as three 32-bit big-endian integers.\n\n- **`'T'`** - Sends a tick message, which is a packet of length 0. Ticking is\n  done when the port is in `data` mode, so the command for sending data cannot\n  be used (besides it ignores zero length packages in `command` mode). This is\n  used by the ticker to send dummy data when no other traffic is present.\n\n  _Note:_ It is important that the interface for sending ticks is not blocking.\n  This implementation uses `erlang:port_control/3`, which does not block the\n  caller. If `erlang:port_command` is used, use `erlang:port_command/3` and pass\n  `[force]` as option list; otherwise the caller can be blocked indefinitely on\n  a busy port and prevent the system from taking down a connection that is not\n  functioning.\n\n- **`'R'`** - Gets creation number of a listen socket, which is used to dig out\n  the number stored in the lock file to differentiate between invocations of\n  Erlang nodes with the same name.\n\nThe control interface gets a buffer to return its value in, but is free to\nallocate its own buffer if the provided one is too small. The `uds_control` code\nis as follows:\n\n```c\n( 1) static int uds_control(ErlDrvData handle, unsigned int command,\n( 2)                        char* buf, int count, char** res, int res_size)\n( 3) {\n( 4) /* Local macro to ensure large enough buffer. */\n( 5) #define ENSURE(N)                               \\\n( 6)    do {                                         \\\n( 7)        if (res_size  received);\n(18)            put_packet_length((*res) + 5, ud->sent);\n(19)            put_packet_length((*res) + 9, driver_sizeq(ud->port));\n(20)            return 13;\n(21)        }\n(22)    case 'C':\n(23)        if (ud->type  type = portTypeCommand;\n(27)        driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_READ, 0);\n(28)        ENSURE(1);\n(29)        **res = 0;\n(30)        return 1;\n(31)    case 'I':\n(32)        if (ud->type  type = portTypeIntermediate;\n(36)        driver_select(ud->port, (ErlDrvEvent) ud->fd, DO_READ, 0);\n(37)        ENSURE(1);\n(38)        **res = 0;\n(39)        return 1;\n(40)    case 'D':\n(41)        if (ud->type  type = portTypeData;\n(45)        do_recv(ud);\n(46)        ENSURE(1);\n(47)        **res = 0;\n(48)        return 1;\n(49)    case 'N':\n(50)        if (ud->type != portTypeListener) {\n(51)            return report_control_error(res, res_size, \"einval\");\n(52)        }\n(53)        ENSURE(5);\n(54)        (*res)[0] = 0;\n(55)        put_packet_length((*res) + 1, ud->fd);\n(56)        return 5;\n(57)    case 'T': /* tick */\n(58)        if (ud->type != portTypeData) {\n(59)            return report_control_error(res, res_size, \"einval\");\n(60)        }\n(61)        do_send(ud,\"\",0);\n(62)        ENSURE(1);\n(63)        **res = 0;\n(64)        return 1;\n(65)    case 'R':\n(66)        if (ud->type != portTypeListener) {\n(67)            return report_control_error(res, res_size, \"einval\");\n(68)        }\n(69)        ENSURE(2);\n(70)        (*res)[0] = 0;\n(71)        (*res)[1] = ud->creation;\n(72)        return 2;\n(73)    default:\n(74)        return report_control_error(res, res_size, \"einval\");\n(75)    }\n(76) #undef ENSURE\n(77) }\n```\n\nThe macro `ENSURE` (line 5-10) is used to ensure that the buffer is large enough\nfor the answer. We switch on the command and take actions. We always have read\nselect active on a port in `data` mode (achieved by calling `do_recv` on line\n45), but we turn off read selection in `intermediate` and `command` modes (line\n27 and 36).\n\nThe rest of the driver is more or less UDS-specific and not of general interest.","ref":"alt_dist.html#selected-parts-of-the-distribution-driver-implementation"},{"type":"extras","title":"Putting It All Together - How to Implement an Alternative Carrier for the Erlang Distribution","doc":"To test the distribution, the `net_kernel:start/1` function can be used. It is\nuseful, as it starts the distribution on a running system, where\ntracing/debugging can be performed. The `net_kernel:start/1` routine takes a\nlist as its single argument. The list first element in the list is to be the\nnode name (without the \"@hostname\") as an atom. The second (and last) element is\nto be one of the atoms `shortnames` or `longnames`. In the example case,\n`shortnames` is preferred.\n\nFor `net_kernel` to find out which distribution module to use, command-line\nargument `-proto_dist` is used. It is followed by one or more distribution\nmodule names, with suffix \"\\_dist\" removed, that is, `uds_dist` as a\ndistribution module is specified as `-proto_dist uds`.\n\nIf no `epmd` (TCP port mapper daemon) is used, also command-line option\n`-no_epmd` is to be specified, which makes Erlang skip the `epmd` startup, both\nas an OS process and as an Erlang ditto.\n\nThe path to the directory where the distribution modules reside must be known at\nboot. This can be achieved either by specifying `-pa  ` on the command line\nor by building a boot script containing the applications used for your\ndistribution protocol. (In the `uds_dist` protocol, only the `uds_dist`\napplication needs to be added to the script.)\n\nThe distribution starts at boot if all the above is specified and an\n`-sname  ` flag is present at the command line.\n\n_Example 1:_\n\n```text\n$ erl -pa $ERL_TOP/lib/kernel/examples/uds_dist/ebin -proto_dist uds -no_epmd\nErlang (BEAM) emulator version 5.0\n\nEshell V5.0  (abort with ^G)\n1> net_kernel:start([bing,shortnames]).\n{ok,<0.30.0>}\n(bing@hador)2>\n```\n\n_Example 2:_\n\n```text\n$ erl -pa $ERL_TOP/lib/kernel/examples/uds_dist/ebin -proto_dist uds \\\n      -no_epmd -sname bong\nErlang (BEAM) emulator version 5.0\n\nEshell V5.0  (abort with ^G)\n(bong@hador)1>\n```\n\nThe `ERL_FLAGS` environment variable can be used to store the complicated\nparameters in:\n\n```text\n$ ERL_FLAGS=-pa $ERL_TOP/lib/kernel/examples/uds_dist/ebin \\\n      -proto_dist uds -no_epmd\n$ export ERL_FLAGS\n$ erl -sname bang\nErlang (BEAM) emulator version 5.0\n\nEshell V5.0  (abort with ^G)\n(bang@hador)1>\n```\n\n`ERL_FLAGS` should not include the node name.","ref":"alt_dist.html#putting-it-all-together"},{"type":"extras","title":"How to Implement an Alternative Node Discovery for Erlang Distribution","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# How to Implement an Alternative Node Discovery for Erlang Distribution\n\nThis section describes how to implement an alternative node discovery mechanism\nfor Erlang distribution. Node discovery is normally done using DNS and the\nErlang Port Mapper Daemon (EPMD) for port registration and lookup.\n\n> #### Note {: .info }\n>\n> Support for alternative node discovery mechanisms was added in Erlang/OTP 21.","ref":"alt_disco.html"},{"type":"extras","title":"Introduction - How to Implement an Alternative Node Discovery for Erlang Distribution","doc":"To implement your own node discovery module you have to write your own EPMD\nmodule. The [EPMD module](`m:erl_epmd`) is responsible for providing the\nlocation of another node. The distribution modules\n(`inet_tcp_dist`/`inet_tls_dist`) call the EPMD module to get the IP address and\nport of the other node. The EPMD module that is part of Erlang/OTP will resolve\nthe hostname using DNS and uses the EPMD unix process to get the port of another\nnode. The EPMD unix process does this by connecting to the other node on a\nwell-known port, port 4369.","ref":"alt_disco.html#introduction"},{"type":"extras","title":"Discovery module - How to Implement an Alternative Node Discovery for Erlang Distribution","doc":"The discovery module needs to implement the same API as the regular\n[EPMD module](`m:erl_epmd`). However, instead of communicating with EPMD you can\nconnect to any service to find out connection details of other nodes. A\ndiscovery module is enabled by setting [\\-epmd_module](erl_cmd.md) when starting\nerlang. The discovery module must implement the following callbacks:\n\n- **[start_link/0](`erl_epmd:start_link/0`)** - Start any processes needed by\n  the discovery module.\n\n- **[names/1](`erl_epmd:names/1`)** - Return node names held by the registrar\n  for the given host.\n\n- **[register_node/2](`erl_epmd:register_node/2`)** - Register the given node\n  name with the registrar.\n\n- **[port_please/3](`erl_epmd:port_please/3`)** - Return the distribution port\n  used by the given node.\n\nThe discovery module may implement the following callback:\n\n- **[address_please/3](`erl_epmd:address_please/3`)** - Return the address of\n  the given node. If not implemented, `erl_epmd:address_please/3` will be used\n  instead.\n\n  This callback may also return the port of the given node. In that case\n  [port_please/3](`erl_epmd:port_please/3`) may be omitted.\n\n- **[listen_port_please/2](`erl_epmd:listen_port_please/2`)** - Return the port\n  the local node should listen to. If not implemented,\n  `erl_epmd:listen_port_please/2` will be used instead.","ref":"alt_disco.html#discovery-module"},{"type":"extras","title":"The Abstract Format","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# The Abstract Format\n\nThis section describes the standard representation of parse trees for Erlang\nprograms as Erlang terms. This representation is known as the _abstract format_.\nFunctions dealing with such parse trees are\n[`compile:forms/1,2`](`compile:forms/1`) and functions in the following modules:\n\n- `m:epp`\n- `m:erl_eval`\n- `m:erl_lint`\n- `m:erl_parse`\n- `m:erl_pp`\n- `m:io`\n\nThe functions are also used as input and output for parse transforms, see the\n`m:compile` module.\n\nWe use the function `Rep` to denote the mapping from an Erlang source construct\n`C` to its abstract format representation `R`, and write `R = Rep(C)`.\n\nThe word `ANNO` in this section represents an annotation, and denotes among\nother things the number of the line in the source file where the construction\noccurred. See `m:erl_anno` for details. Several instances of `ANNO` in the same\nconstruction can denote different annotations.\n\nAs operators are not terms in their own right, when operators are mentioned\nbelow, the representation of an operator is to be taken to be the atom with a\nprintname consisting of the same characters as the operator.","ref":"absform.html"},{"type":"extras","title":"Module Declarations and Forms - The Abstract Format","doc":"A module declaration consists of a sequence of forms, which are either function\ndeclarations or attributes.\n\n- If D is a module declaration consisting of the forms `F_1`, ..., `F_k`, then\n  Rep(D) = `[Rep(F_1), ..., Rep(F_k)]`.\n- If F is an attribute `-export([Fun_1/A_1, ..., Fun_k/A_k])`, then Rep(F) =\n  `{attribute,ANNO,export,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}`.\n- If F is an attribute `-import(Mod,[Fun_1/A_1, ..., Fun_k/A_k])`, then Rep(F) =\n  `{attribute,ANNO,import,{Mod,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}}`.\n- If F is an attribute `-module(Mod)`, then Rep(F) =\n  `{attribute,ANNO,module,Mod}`.\n- If F is an attribute `-file(File,Line)`, then Rep(F) =\n  `{attribute,ANNO,file,{File,Line}}`.\n- If F is a function declaration `Name Fc_1 ; ... ; Name Fc_k`, where each\n  `Fc_i` is a function clause with a pattern sequence of the same length\n  `Arity`, then Rep(F) =\n  `{function,ANNO,Name,Arity,[Rep(Fc_1), ...,Rep(Fc_k)]}`.\n- If F is a function specification `-Spec Name Ft_1; ...; Ft_k`, where `Spec` is\n  either the atom `spec` or the atom `callback`, and each `Ft_i` is a possibly\n  constrained function type with an argument sequence of the same length\n  `Arity`, then Rep(F) =\n  `{attribute,ANNO,Spec,{{Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}`.\n- If F is a function specification `-spec Mod:Name Ft_1; ...; Ft_k`, where each\n  `Ft_i` is a possibly constrained function type with an argument sequence of\n  the same length `Arity`, then Rep(F) =\n  `{attribute,ANNO,spec,{{Mod,Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}`.\n- If F is a record declaration `-record(Name,{V_1, ..., V_k})`, where each `V_i`\n  is a record field, then Rep(F) =\n  `{attribute,ANNO,record,{Name,[Rep(V_1), ..., Rep(V_k)]}}`. For Rep(V), see\n  below.\n- If F is a type declaration `-Type Name(V_1, ..., V_k) :: T`, where `Type` is\n  either the atom `type` or the atom `opaque`, each `V_i` is a type variable,\n  and `T` is a type, then Rep(F) =\n  `{attribute,ANNO,Type,{Name,Rep(T),[Rep(V_1), ..., Rep(V_k)]}}`.\n- If F is a wild attribute `-A(T)`, then Rep(F) = `{attribute,ANNO,A,T}`.","ref":"absform.html#module-declarations-and-forms"},{"type":"extras","title":"Record Fields - The Abstract Format","doc":"Each field in a record declaration can have an optional, explicit, default\ninitializer expression, and an optional type.\n\n- If V is `A`, then Rep(V) = `{record_field,ANNO,Rep(A)}`.\n- If V is `A = E`, where `E` is an expression, then Rep(V) =\n  `{record_field,ANNO,Rep(A),Rep(E)}`.\n- If V is `A :: T`, where `T` is a type, then Rep(V) =\n  `{typed_record_field,{record_field,ANNO,Rep(A)},Rep(T)}`.\n- If V is `A = E :: T`, where `E` is an expression and `T` is a type, then\n  Rep(V) = `{typed_record_field,{record_field,ANNO,Rep(A),Rep(E)},Rep(T)}`.","ref":"absform.html#record-fields"},{"type":"extras","title":"Representation of Parse Errors and End-of-File - The Abstract Format","doc":"In addition to the representations of forms, the list that represents a module\ndeclaration (as returned by functions in `m:epp` and `m:erl_parse`) can contain\nthe following:\n\n- Tuples `{error,E}` and `{warning,W}`, denoting syntactically incorrect forms\n  and warnings.\n- `{eof,LOCATION}`, denoting an end-of-stream encountered before a complete form\n  had been parsed. The word `LOCATION` represents a location, and denotes the\n  number of the last line, and possibly the number of the last column on that\n  line, in the source file. See `m:erl_anno` for details.\n\nSee [`the form_info/0`](`t:erl_parse:form_info/0`) type in `m:erl_parse` for\nmore details about these values.","ref":"absform.html#representation-of-parse-errors-and-end-of-file"},{"type":"extras","title":"Atomic Literals - The Abstract Format","doc":"There are five kinds of atomic literals, which are represented in the same way\nin patterns, expressions, and guards:\n\n- If L is an atom literal, then Rep(L) = `{atom,ANNO,L}`.\n- If L is a character literal, then Rep(L) = `{char,ANNO,L}`.\n- If L is a float literal, then Rep(L) = `{float,ANNO,L}`.\n- If L is an integer literal, then Rep(L) = `{integer,ANNO,L}`.\n- If L is a string literal consisting of the characters `C_1`, ..., `C_k`, then\n  Rep(L) = `{string,ANNO,[C_1, ..., C_k]}`.\n\nNotice that negative integer and float literals do not occur as such; they are\nparsed as an application of the unary negation operator.","ref":"absform.html#atomic-literals"},{"type":"extras","title":"Patterns - The Abstract Format","doc":"If Ps is a sequence of patterns `P_1, ..., P_k`, then Rep(Ps) =\n`[Rep(P_1), ..., Rep(P_k)]`. Such sequences occur as the list of arguments to a\nfunction or fun.\n\nIndividual patterns are represented as follows:\n\n- If P is an atomic literal `L`, then Rep(P) = Rep(L).\n- If P is a bitstring pattern `< >`,\n  where each `Size_i` is an expression that can be evaluated to an integer, and\n  each `TSL_i` is a type specificer list, then Rep(P) =\n  `{bin,ANNO,[{bin_element,ANNO,Rep(P_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(P_k),Rep(Size_k),Rep(TSL_k)}]}`.\n  For Rep(TSL), see below. An omitted `Size_i` is represented by `default`. An\n  omitted `TSL_i` is represented by `default`.\n- If P is a compound pattern `P_1 = P_2`, then Rep(P) =\n  `{match,ANNO,Rep(P_1),Rep(P_2)}`.\n- If P is a cons pattern `[P_h | P_t]`, then Rep(P) =\n  `{cons,ANNO,Rep(P_h),Rep(P_t)}`.\n- If P is a map pattern `#{A_1, ..., A_k}`, where each `A_i` is an association\n  `P_i_1 := P_i_2`, then Rep(P) = `{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}`. For\n  Rep(A), see below.\n- If P is a nil pattern `[]`, then Rep(P) = `{nil,ANNO}`.\n- If P is an operator pattern `P_1 Op P_2`, where `Op` is a binary operator\n  (this is either an occurrence of `++` applied to a literal string or character\n  list, or an occurrence of an expression that can be evaluated to a number at\n  compile time), then Rep(P) = `{op,ANNO,Op,Rep(P_1),Rep(P_2)}`.\n- If P is an operator pattern `Op P_0`, where `Op` is a unary operator (this is\n  an occurrence of an expression that can be evaluated to a number at compile\n  time), then Rep(P) = `{op,ANNO,Op,Rep(P_0)}`.\n- If P is a parenthesized pattern `( P_0 )`, then Rep(P) = `Rep(P_0)`, that is,\n  parenthesized patterns cannot be distinguished from their bodies.\n- If P is a record field index pattern `#Name.Field`, where `Field` is an atom,\n  then Rep(P) = `{record_index,ANNO,Name,Rep(Field)}`.\n- If P is a record pattern `#Name{Field_1=P_1, ..., Field_k=P_k}`, where each\n  `Field_i` is an atom or `_`, then Rep(P) =\n  `{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(P_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(P_k)}]}`.\n- If P is a tuple pattern `{P_1, ..., P_k}`, then Rep(P) =\n  `{tuple,ANNO,[Rep(P_1), ..., Rep(P_k)]}`.\n- If P is a universal pattern `_`, then Rep(P) = `{var,ANNO,'_'}`.\n- If P is a variable pattern `V`, then Rep(P) = `{var,ANNO,A}`, where A is an\n  atom with a printname consisting of the same characters as `V`.\n\nNotice that every pattern has the same source form as some expression, and is\nrepresented in the same way as the corresponding expression.","ref":"absform.html#patterns"},{"type":"extras","title":"Expressions - The Abstract Format","doc":"A body B is a non-empty sequence of expressions `E_1, ..., E_k`, and Rep(B) =\n`[Rep(E_1), ..., Rep(E_k)]`.\n\nAn expression E is one of the following:\n\n- If E is an atomic literal `L`, then Rep(E) = Rep(L).\n- If E is a bitstring comprehension `< >`, where each `Q_i`\n  is a qualifier, then Rep(E) = `{bc,ANNO,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}`.\n  For Rep(Q), see below.\n- If E is a bitstring constructor `< >`,\n  where each `Size_i` is an expression and each `TSL_i` is a type specificer\n  list, then Rep(E) =\n  `{bin,ANNO,[{bin_element,ANNO,Rep(E_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(E_k),Rep(Size_k),Rep(TSL_k)}]}`.\n  For Rep(TSL), see below. An omitted `Size_i` is represented by `default`. An\n  omitted `TSL_i` is represented by `default`.\n- If E is a block expression `begin B end`, where `B` is a body, then Rep(E) =\n  `{block,ANNO,Rep(B)}`.\n- If E is a case expression `case E_0 of Cc_1 ; ... ; Cc_k end`, where `E_0` is\n  an expression and each `Cc_i` is a case clause, then Rep(E) =\n  `{'case',ANNO,Rep(E_0),[Rep(Cc_1), ..., Rep(Cc_k)]}`.\n- If E is a catch expression `catch E_0`, then Rep(E) =\n  `{'catch',ANNO,Rep(E_0)}`.\n- If E is a cons skeleton `[E_h | E_t]`, then Rep(E) =\n  `{cons,ANNO,Rep(E_h),Rep(E_t)}`.\n- If E is a fun expression `fun Name/Arity`, then Rep(E) =\n  `{'fun',ANNO,{function,Name,Arity}}`.\n- If E is a fun expression `fun Module:Name/Arity`, then Rep(E) =\n  `{'fun',ANNO,{function,Rep(Module),Rep(Name),Rep(Arity)}}`.\n- If E is a fun expression `fun Fc_1 ; ... ; Fc_k end`, where each `Fc_i` is a\n  function clause, then Rep(E) =\n  `{'fun',ANNO,{clauses,[Rep(Fc_1), ..., Rep(Fc_k)]}}`.\n- If E is a fun expression `fun Name Fc_1 ; ... ; Name Fc_k end`, where `Name`\n  is a variable and each `Fc_i` is a function clause, then Rep(E) =\n  `{named_fun,ANNO,Name,[Rep(Fc_1), ..., Rep(Fc_k)]}`.\n- If E is a function call `E_0(E_1, ..., E_k)`, then Rep(E) =\n  `{call,ANNO,Rep(E_0),[Rep(E_1), ..., Rep(E_k)]}`.\n- If E is a function call `E_m:E_0(E_1, ..., E_k)`, then Rep(E) =\n  `{call,ANNO,{remote,ANNO,Rep(E_m),Rep(E_0)},[Rep(E_1), ..., Rep(E_k)]}`.\n- If E is an if expression `if Ic_1 ; ... ; Ic_k end`, where each `Ic_i` is an\n  if clause, then Rep(E) = `{'if',ANNO,[Rep(Ic_1), ..., Rep(Ic_k)]}`.\n- If E is a list comprehension `[E_0 || Q_1, ..., Q_k]`, where each `Q_i` is a\n  qualifier, then Rep(E) = `{lc,ANNO,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}`. For\n  Rep(Q), see below.\n- If E is a map comprehension `#{E_0 || Q_1, ..., Q_k}`, where `E_0` is an\n  association `K => V` and each `Q_i` is a qualifier, then Rep(E) =\n  `{mc,ANNO,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}`. For Rep(E_0) and Rep(Q), see\n  below.\n- If E is a map creation `#{A_1, ..., A_k}`, where each `A_i` is an association\n  `E_i_1 => E_i_2`, then Rep(E) = `{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}`. For\n  Rep(A), see below.\n- If E is a map update `E_0#{A_1, ..., A_k}`, where each `A_i` is an association\n  `E_i_1 => E_i_2` or `E_i_1 := E_i_2`, then Rep(E) =\n  `{map,ANNO,Rep(E_0),[Rep(A_1), ..., Rep(A_k)]}`. For Rep(A), see below.\n- If E is a match operator expression `P = E_0`, where `P` is a pattern, then\n  Rep(E) = `{match,ANNO,Rep(P),Rep(E_0)}`.\n- If E is a conditional match operator expression `P ?= E_0`, where `P` is a\n  pattern, then Rep(E) = `{maybe_match,ANNO,Rep(P),Rep(E_0)}`.\n- If E is a maybe expression `maybe B end`, where `B` is a body then Rep(E) =\n  `{'maybe',ANNO,Rep(B)}`.\n- If E is a maybe expression `maybe B else Ec_1 ; ... ; Ec_k end`, where `B` is\n  a body and each `Ec_i` is an else clause then Rep(E) =\n  `{'maybe',ANNO,Rep(B),{'else',ANNO,[Rep(Ec_1), ..., Rep(Ec_k)]}}`.\n- If E is nil, `[]`, then Rep(E) = `{nil,ANNO}`.\n- If E is an operator expression `E_1 Op E_2`, where `Op` is a binary operator\n  other than match operator `=`, then Rep(E) = `{op,ANNO,Op,Rep(E_1),Rep(E_2)}`.\n- If E is an operator expression `Op E_0`, where `Op` is a unary operator, then\n  Rep(E) = `{op,ANNO,Op,Rep(E_0)}`.\n- If E is a parenthesized expression `( E_0 )`, then Rep(E) = `Rep(E_0)`, that\n  is, parenthesized expressions cannot be distinguished from their bodies.\n- If E is a receive expression `receive Cc_1 ; ... ; Cc_k end`, where each\n  `Cc_i` is a case clause, then Rep(E) =\n  `{'receive',ANNO,[Rep(Cc_1), ..., Rep(Cc_k)]}`.\n- If E is a receive expression `receive Cc_1 ; ... ; Cc_k after E_0 -> B_t end`,\n  where each `Cc_i` is a case clause, `E_0` is an expression, and `B_t` is a\n  body, then Rep(E) =\n  `{'receive',ANNO,[Rep(Cc_1), ..., Rep(Cc_k)],Rep(E_0),Rep(B_t)}`.\n- If E is a record creation `#Name{Field_1=E_1, ..., Field_k=E_k}`, where each\n  `Field_i` is an atom or `_`, then Rep(E) =\n  `{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(E_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(E_k)}]}`.\n- If E is a record field access `E_0#Name.Field`, where `Field` is an atom, then\n  Rep(E) = `{record_field,ANNO,Rep(E_0),Name,Rep(Field)}`.\n- If E is a record field index `#Name.Field`, where `Field` is an atom, then\n  Rep(E) = `{record_index,ANNO,Name,Rep(Field)}`.\n- If E is a record update `E_0#Name{Field_1=E_1, ..., Field_k=E_k}`, where each\n  `Field_i` is an atom, then Rep(E) =\n  `{record,ANNO,Rep(E_0),Name,[{record_field,ANNO,Rep(Field_1),Rep(E_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(E_k)}]}`.\n- If E is a tuple skeleton `{E_1, ..., E_k}`, then Rep(E) =\n  `{tuple,ANNO,[Rep(E_1), ..., Rep(E_k)]}`.\n- If E is a try expression `try B catch Tc_1 ; ... ; Tc_k end`, where `B` is a\n  body and each `Tc_i` is a catch clause, then Rep(E) =\n  `{'try',ANNO,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],[]}`.\n- If E is a try expression\n  `try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n end`, where `B` is a body,\n  each `Cc_i` is a case clause, and each `Tc_j` is a catch clause, then Rep(E) =\n  `{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],[]}`.\n- If E is a try expression `try B after A end`, where `B` and `A` are bodies,\n  then Rep(E) = `{'try',ANNO,Rep(B),[],[],Rep(A)}`.\n- If E is a try expression `try B of Cc_1 ; ... ; Cc_k after A end`, where `B`\n  and `A` are a bodies, and each `Cc_i` is a case clause, then Rep(E) =\n  `{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[],Rep(A)}`.\n- If E is a try expression `try B catch Tc_1 ; ... ; Tc_k after A end`, where\n  `B` and `A` are bodies, and each `Tc_i` is a catch clause, then Rep(E) =\n  `{'try',ANNO,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],Rep(A)}`.\n- If E is a try expression\n  `try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n after A end`, where `B`\n  and `A` are a bodies, each `Cc_i` is a case clause, and each `Tc_j` is a catch\n  clause, then Rep(E) =\n  `{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],Rep(A)}`.\n- If E is a variable `V`, then Rep(E) = `{var,ANNO,A}`, where `A` is an atom\n  with a printname consisting of the same characters as `V`.","ref":"absform.html#expressions"},{"type":"extras","title":"Qualifiers - The Abstract Format","doc":"A qualifier Q is one of the following:\n\n- If Q is a filter `E`, where `E` is an expression, then Rep(Q) = `Rep(E)`.\n- If Q is a zip generator `Q_1 && ...&& Q_k]`, where each `Q_i` is\n  a non-zip generator, then Rep(E) = `{zip,ANNO,[Rep(Q_1), ..., Rep(Q_k)]}`.\n  For Rep(Q), see below.\n- If Q is a list generator `P <- E`, where `P` is a pattern and `E` is an\n  expression, then Rep(Q) = `{generate,ANNO,Rep(P),Rep(E)}`.\n- If Q is a list generator `P <:- E`, where `P` is a pattern and `E` is an\n  expression, then Rep(Q) = `{generate_strict,ANNO,Rep(P),Rep(E)}`.\n- If Q is a bitstring generator `P <= E`, where `P` is a pattern and `E` is an\n  expression, then Rep(Q) = `{b_generate,ANNO,Rep(P),Rep(E)}`.\n- If Q is a bitstring generator `P <:= E`, where `P` is a pattern and `E` is an\n  expression, then Rep(Q) = `{b_generate_strict,ANNO,Rep(P),Rep(E)}`.\n- If Q is a map generator `P <- E`, where `P` is an association pattern\n  `P_1 := P_2` and `E` is an expression, then Rep(Q) =\n  `{m_generate,ANNO,Rep(P),Rep(E)}`. For Rep(P), see below.\n- If Q is a map generator `P <:- E`, where `P` is an association pattern\n  `P_1 := P_2` and `E` is an expression, then Rep(Q) =\n  `{m_generate_strict,ANNO,Rep(P),Rep(E)}`.","ref":"absform.html#qualifiers"},{"type":"extras","title":"Bitstring Element Type Specifiers - The Abstract Format","doc":"A type specifier list TSL for a bitstring element is a sequence of type\nspecifiers `TS_1 - ... - TS_k`, and Rep(TSL) = `[Rep(TS_1), ..., Rep(TS_k)]`.\n\n- If TS is a type specifier `A`, where `A` is an atom, then Rep(TS) = `A`.\n- If TS is a type specifier `A:Value`, where `A` is an atom and `Value` is an\n  integer, then Rep(TS) = `{A,Value}`.","ref":"absform.html#bitstring-element-type-specifiers"},{"type":"extras","title":"Associations - The Abstract Format","doc":"An association A is one of the following:\n\n- If A is an association `K => V`, then Rep(A) =\n  `{map_field_assoc,ANNO,Rep(K),Rep(V)}`.\n- If A is an association `K := V`, then Rep(A) =\n  `{map_field_exact,ANNO,Rep(K),Rep(V)}`.","ref":"absform.html#associations"},{"type":"extras","title":"Clauses - The Abstract Format","doc":"There are function clauses, if clauses, case clauses, and catch clauses.\n\nA clause C is one of the following:\n\n- If C is a case clause `P -> B`, where `P` is a pattern and `B` is a body, then\n  Rep(C) = `{clause,ANNO,[Rep(P)],[],Rep(B)}`.\n- If C is a case clause `P when Gs -> B`, where `P` is a pattern, `Gs` is a\n  guard sequence, and `B` is a body, then Rep(C) =\n  `{clause,ANNO,[Rep(P)],Rep(Gs),Rep(B)}`.\n- If C is a catch clause `P -> B`, where `P` is a pattern and `B` is a body,\n  then Rep(C) = `{clause,ANNO,[Rep({throw,P,_})],[],Rep(B)}`, that is, a catch\n  clause with an explicit exception class `throw` and with or without an\n  explicit stacktrace variable `_` cannot be distinguished from a catch clause\n  without an explicit exception class and without an explicit stacktrace\n  variable.\n- If C is a catch clause `X : P -> B`, where `X` is an atomic literal or a\n  variable pattern, `P` is a pattern, and `B` is a body, then Rep(C) =\n  `{clause,ANNO,[Rep({X,P,_})],[],Rep(B)}`, that is, a catch clause with an\n  explicit exception class and with an explicit stacktrace variable `_` cannot\n  be distinguished from a catch clause with an explicit exception class and\n  without an explicit stacktrace variable.\n- If C is a catch clause `X : P : S -> B`, where `X` is an atomic literal or a\n  variable pattern, `P` is a pattern, `S` is a variable, and `B` is a body, then\n  Rep(C) = `{clause,ANNO,[Rep({X,P,S})],[],Rep(B)}`.\n- If C is a catch clause `P when Gs -> B`, where `P` is a pattern, `Gs` is a\n  guard sequence, and `B` is a body, then Rep(C) =\n  `{clause,ANNO,[Rep({throw,P,_})],Rep(Gs),Rep(B)}`, that is, a catch clause\n  with an explicit exception class `throw` and with or without an explicit\n  stacktrace variable `_` cannot be distinguished from a catch clause without an\n  explicit exception class and without an explicit stacktrace variable.\n- If C is a catch clause `X : P when Gs -> B`, where `X` is an atomic literal or\n  a variable pattern, `P` is a pattern, `Gs` is a guard sequence, and `B` is a\n  body, then Rep(C) = `{clause,ANNO,[Rep({X,P,_})],Rep(Gs),Rep(B)}`, that is, a\n  catch clause with an explicit exception class and with an explicit stacktrace\n  variable `_` cannot be distinguished from a catch clause with an explicit\n  exception class and without an explicit stacktrace variable.\n- If C is a catch clause `X : P : S when Gs -> B`, where `X` is an atomic\n  literal or a variable pattern, `P` is a pattern, `Gs` is a guard sequence, `S`\n  is a variable, and `B` is a body, then Rep(C) =\n  `{clause,ANNO,[Rep({X,P,S})],Rep(Gs),Rep(B)}`.\n- If C is a function clause `( Ps ) -> B`, where `Ps` is a pattern sequence and\n  `B` is a body, then Rep(C) = `{clause,ANNO,Rep(Ps),[],Rep(B)}`.\n- If C is a function clause `( Ps ) when Gs -> B`, where `Ps` is a pattern\n  sequence, `Gs` is a guard sequence and `B` is a body, then Rep(C) =\n  `{clause,ANNO,Rep(Ps),Rep(Gs),Rep(B)}`.\n- If C is an if clause `Gs -> B`, where `Gs` is a guard sequence and `B` is a\n  body, then Rep(C) = `{clause,ANNO,[],Rep(Gs),Rep(B)}`.","ref":"absform.html#clauses"},{"type":"extras","title":"Guards - The Abstract Format","doc":"A guard sequence Gs is a sequence of guards `G_1; ...; G_k`, and Rep(Gs) =\n`[Rep(G_1), ..., Rep(G_k)]`. If the guard sequence is empty, then Rep(Gs) =\n`[]`.\n\nA guard G is a non-empty sequence of guard tests `Gt_1, ..., Gt_k`, and Rep(G) =\n`[Rep(Gt_1), ..., Rep(Gt_k)]`.\n\nA guard test Gt is one of the following:\n\n- If Gt is an atomic literal `L`, then Rep(Gt) = Rep(L).\n- If Gt is a bitstring constructor\n  `< >`, where each `Size_i` is a\n  guard test and each `TSL_i` is a type specificer list, then Rep(Gt) =\n  `{bin,ANNO,[{bin_element,ANNO,Rep(Gt_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(Gt_k),Rep(Size_k),Rep(TSL_k)}]}`.\n  For Rep(TSL), see above. An omitted `Size_i` is represented by `default`. An\n  omitted `TSL_i` is represented by `default`.\n- If Gt is a cons skeleton `[Gt_h | Gt_t]`, then Rep(Gt) =\n  `{cons,ANNO,Rep(Gt_h),Rep(Gt_t)}`.\n- If Gt is a function call `A(Gt_1, ..., Gt_k)`, where `A` is an atom, then\n  Rep(Gt) = `{call,ANNO,Rep(A),[Rep(Gt_1), ..., Rep(Gt_k)]}`.\n- If Gt is a function call `A_m:A(Gt_1, ..., Gt_k)`, where `A_m` is the atom\n  `erlang` and `A` is an atom or an operator, then Rep(Gt) =\n  `{call,ANNO,{remote,ANNO,Rep(A_m),Rep(A)},[Rep(Gt_1), ..., Rep(Gt_k)]}`.\n- If Gt is a map creation `#{A_1, ..., A_k}`, where each `A_i` is an association\n  `Gt_i_1 => Gt_i_2`, then Rep(Gt) = `{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}`. For\n  Rep(A), see above.\n- If Gt is a map update `Gt_0#{A_1, ..., A_k}`, where each `A_i` is an\n  association `Gt_i_1 => Gt_i_2` or `Gt_i_1 := Gt_i_2`, then Rep(Gt) =\n  `{map,ANNO,Rep(Gt_0),[Rep(A_1), ..., Rep(A_k)]}`. For Rep(A), see above.\n- If Gt is nil, `[]`, then Rep(Gt) = `{nil,ANNO}`.\n- If Gt is an operator guard test `Gt_1 Op Gt_2`, where `Op` is a binary\n  operator other than match operator `=`, then Rep(Gt) =\n  `{op,ANNO,Op,Rep(Gt_1),Rep(Gt_2)}`.\n- If Gt is an operator guard test `Op Gt_0`, where `Op` is a unary operator,\n  then Rep(Gt) = `{op,ANNO,Op,Rep(Gt_0)}`.\n- If Gt is a parenthesized guard test `( Gt_0 )`, then Rep(Gt) = `Rep(Gt_0)`,\n  that is, parenthesized guard tests cannot be distinguished from their bodies.\n- If Gt is a record creation `#Name{Field_1=Gt_1, ..., Field_k=Gt_k}`, where\n  each `Field_i` is an atom or `_`, then Rep(Gt) =\n  `{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(Gt_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(Gt_k)}]}`.\n- If Gt is a record field access `Gt_0#Name.Field`, where `Field` is an atom,\n  then Rep(Gt) = `{record_field,ANNO,Rep(Gt_0),Name,Rep(Field)}`.\n- If Gt is a record field index `#Name.Field`, where `Field` is an atom, then\n  Rep(Gt) = `{record_index,ANNO,Name,Rep(Field)}`.\n- If Gt is a tuple skeleton `{Gt_1, ..., Gt_k}`, then Rep(Gt) =\n  `{tuple,ANNO,[Rep(Gt_1), ..., Rep(Gt_k)]}`.\n- If Gt is a variable pattern `V`, then Rep(Gt) = `{var,ANNO,A}`, where A is an\n  atom with a printname consisting of the same characters as `V`.\n\nNotice that every guard test has the same source form as some expression, and is\nrepresented in the same way as the corresponding expression.","ref":"absform.html#guards"},{"type":"extras","title":"Types - The Abstract Format","doc":"- If T is an annotated type `A :: T_0`, where `A` is a variable, then Rep(T) =\n  `{ann_type,ANNO,[Rep(A),Rep(T_0)]}`.\n- If T is an atom, a character, or an integer literal L, then Rep(T) = Rep(L).\n- If T is a bitstring type `<<_:M,_:_*N>>`, where `M` and `N` are singleton\n  integer types, then Rep(T) = `{type,ANNO,binary,[Rep(M),Rep(N)]}`.\n- If T is the empty list type `[]`, then Rep(T) = `{type,ANNO,nil,[]}`, that is,\n  the empty list type `[]` cannot be distinguished from the predefined type\n  `t:nil/0`.\n- If T is a fun type `fun()`, then Rep(T) = `{type,ANNO,'fun',[]}`.\n- If T is a fun type `fun((...) -> T_0)`, then Rep(T) =\n  `{type,ANNO,'fun',[{type,ANNO,any},Rep(T_0)]}`.\n- If T is a fun type `fun(Ft)`, where `Ft` is a function type, then Rep(T) =\n  `Rep(Ft)`. For Rep(Ft), see below.\n- If T is an integer range type `L .. H`, where `L` and `H` are singleton\n  integer types, then Rep(T) = `{type,ANNO,range,[Rep(L),Rep(H)]}`.\n- If T is a map type `t:map/0`, then Rep(T) = `{type,ANNO,map,any}`.\n- If T is a map type `#{A_1, ..., A_k}`, where each `A_i` is an association\n  type, then Rep(T) = `{type,ANNO,map,[Rep(A_1), ..., Rep(A_k)]}`. For Rep(A),\n  see below.\n- If T is an operator type `T_1 Op T_2`, where `Op` is a binary operator (this\n  is an occurrence of an expression that can be evaluated to an integer at\n  compile time), then Rep(T) = `{op,ANNO,Op,Rep(T_1),Rep(T_2)}`.\n- If T is an operator type `Op T_0`, where `Op` is a unary operator (this is an\n  occurrence of an expression that can be evaluated to an integer at compile\n  time), then Rep(T) = `{op,ANNO,Op,Rep(T_0)}`.\n- If T is `( T_0 )`, then Rep(T) = `Rep(T_0)`, that is, parenthesized types\n  cannot be distinguished from their bodies.\n- If T is a predefined (or built-in) type `N(T_1, ..., T_k)`, then Rep(T) =\n  `{type,ANNO,N,[Rep(T_1), ..., Rep(T_k)]}`.\n- If T is a record type `#Name{F_1, ..., F_k}`, where each `F_i` is a record\n  field type, then Rep(T) =\n  `{type,ANNO,record,[Rep(Name),Rep(F_1), ..., Rep(F_k)]}`. For Rep(F), see\n  below.\n- If T is a remote type `M:N(T_1, ..., T_k)`, then Rep(T) =\n  `{remote_type,ANNO,[Rep(M),Rep(N),[Rep(T_1), ..., Rep(T_k)]]}`.\n- If T is a tuple type `t:tuple/0`, then Rep(T) = `{type,ANNO,tuple,any}`.\n- If T is a tuple type `{T_1, ..., T_k}`, then Rep(T) =\n  `{type,ANNO,tuple,[Rep(T_1), ..., Rep(T_k)]}`.\n- If T is a type union `T_1 | ... | T_k`, then Rep(T) =\n  `{type,ANNO,union,[Rep(T_1), ..., Rep(T_k)]}`.\n- If T is a type variable `V`, then Rep(T) = `{var,ANNO,A}`, where `A` is an\n  atom with a printname consisting of the same characters as `V`. A type\n  variable is any variable except underscore (`_`).\n- If T is a user-defined type `N(T_1, ..., T_k)`, then Rep(T) =\n  `{user_type,ANNO,N,[Rep(T_1), ..., Rep(T_k)]}`.","ref":"absform.html#types"},{"type":"extras","title":"Function Types - The Abstract Format","doc":"A function type Ft is one of the following:\n\n- If Ft is a constrained function type `Ft_1 when Fc`, where `Ft_1` is a\n  function type and `Fc` is a function constraint, then Rep(T) =\n  `{type,ANNO,bounded_fun,[Rep(Ft_1),Rep(Fc)]}`. For Rep(Fc), see below.\n- If Ft is a function type `(T_1, ..., T_n) -> T_0`, where each `T_i` is a type,\n  then Rep(Ft) =\n  `{type,ANNO,'fun',[{type,ANNO,product,[Rep(T_1), ..., Rep(T_n)]},Rep(T_0)]}`.","ref":"absform.html#function-types"},{"type":"extras","title":"Function Constraints - The Abstract Format","doc":"A function constraint Fc is a non-empty sequence of constraints `C_1, ..., C_k`,\nand Rep(Fc) = `[Rep(C_1), ..., Rep(C_k)]`.\n\n- If C is a constraint `V :: T`, where `V` is a type variable and `T` is a type,\n  then Rep(C) =\n  `{type,ANNO,constraint,[{atom,ANNO,is_subtype},[Rep(V),Rep(T)]]}`.","ref":"absform.html#function-constraints"},{"type":"extras","title":"Association Types - The Abstract Format","doc":"- If A is an association type `K => V`, where `K` and `V` are types, then Rep(A)\n  = `{type,ANNO,map_field_assoc,[Rep(K),Rep(V)]}`.\n- If A is an association type `K := V`, where `K` and `V` are types, then Rep(A)\n  = `{type,ANNO,map_field_exact,[Rep(K),Rep(V)]}`.","ref":"absform.html#association-types"},{"type":"extras","title":"Record Field Types - The Abstract Format","doc":"- If F is a record field type `Name :: Type`, where `Type` is a type, then\n  Rep(F) = `{type,ANNO,field_type,[Rep(Name),Rep(Type)]}`.","ref":"absform.html#record-field-types"},{"type":"extras","title":"The Abstract Format after Preprocessing - The Abstract Format","doc":"The compilation option `debug_info` can be specified to the compiler to have the\nabstract code stored in the `abstract_code` chunk in the Beam file (for\ndebugging purposes).\n\nAs from Erlang/OTP R9C, the `abstract_code` chunk contains\n`{raw_abstract_v1,AbstractCode}`, where `AbstractCode` is the abstract code as\ndescribed in this section.\n\nIn OTP releases before R9C, the abstract code after some more processing was\nstored in the Beam file. The first element of the tuple would be either\n`abstract_v1` (in OTP R7B) or `abstract_v2` (in OTP R8B).","ref":"absform.html#the-abstract-format-after-preprocessing"},{"type":"extras","title":"tty - A Command-Line Interface","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# tty - A Command-Line Interface\n\n`tty` is a simple command-line interface program where keystrokes are collected\nand interpreted. Completed lines are sent to the shell for interpretation. A\nsimple history mechanism saves previous lines, which can be edited before\nsending them to the shell. `tty` is started when Erlang is started with the\nfollowing command:\n\n```text\nerl\n```\n\n`tty` operates in several different modes:\n\n- Normal mode, in which text lines can be edited and sent to the shell.\n- Search mode, in which the user can search for previous commands in the history\n  buffer.\n- Shell break mode, which allows the user to kill the current shell, start\n  multiple shells, and so on.","ref":"tty.html"},{"type":"extras","title":"Normal Mode - tty - A Command-Line Interface","doc":"In normal mode keystrokes from the user are collected and interpreted by `tty`.\nMost of the _Emacs_ line-editing commands are supported. The following is a\ncomplete list of the supported line-editing commands.\n\nTypographic conventions:\n\n- `C-a` means pressing the _Ctrl_ key and the letter `a` simultaneously.\n- `C-S-a` means pressing the _Ctrl_ key, the _Shift_ key, and the letter `a`\n  simultaneously.\n- `M-f` means pressing the _Esc_ key and the letter `f` in sequence or pressing\n  the _Alt_ key and the letter `f` simultaneously.\n- `Home` and `End` represent the keys with the same name on the keyboard.\n- `Left`, `Right`, `Up` and `Down` represent the corresponding arrow keys.\n- When a function has multiple possible key sequences they are listed on\n  individual lines in the `Key Sequence` column.\n\n| Key Sequence           | Function                                                                                                                                                                                                                                                              |\n| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `Home`                 | Beginning of line                                                                                                                                                                                                                                                     |\n| `C-a`                  | Beginning of line                                                                                                                                                                                                                                                     |\n| `C-b`                  | Backward character                                                                                                                                                                                                                                                    |\n| `C-Left` or `M-Left`   | Backward word                                                                                                                                                                                                                                                         |\n| `M-b`                  | Backward word                                                                                                                                                                                                                                                         |\n| `C-d`                  | Delete character                                                                                                                                                                                                                                                      |\n| `M-d`                  | Delete word                                                                                                                                                                                                                                                           |\n| `End`                  | End of line                                                                                                                                                                                                                                                           |\n| `C-e`                  | End of line                                                                                                                                                                                                                                                           |\n| `C-f`                  | Forward character                                                                                                                                                                                                                                                     |\n| `C-Right` or `M-Right` | Forward word                                                                                                                                                                                                                                                          |\n| `M-f`                  | Forward word                                                                                                                                                                                                                                                          |\n| `C-g`                  | Enter shell break mode                                                                                                                                                                                                                                                |\n| `C-k`                  | Kill line                                                                                                                                                                                                                                                             |\n| `C-u`                  | Backward kill line                                                                                                                                                                                                                                                    |\n| `C-l`                  | Clears the screen                                                                                                                                                                                                                                                     |\n| `M-c`                  | Clears the current expression                                                                                                                                                                                                                                         |\n| `M-l`                  | Redraw line                                                                                                                                                                                                                                                           |\n| `C-n`                  | Fetch next line from the history buffer                                                                                                                                                                                                                               |\n| `C-o` or `M-o`         | Edit the current line using the editor specified in the environment variable `VISUAL` or `EDITOR`. The environment variables can contain arguments to the editor if needed, for example `VISUAL=\"emacs -nw\"`. On Windows the editor cannot be a console based editor. |\n| `C-p`                  | Fetch previous line from the history buffer                                                                                                                                                                                                                           |\n| `M-r`                  | Format current expression using `shell:format_shell_func/1`                                                                                                                                                                                                           |\n| `C-r`                  | Enter search mode and then search backward in the shell history                                                                                                                                                                                                       |\n| `C-s`                  | In search mode, search forward in the shell history                                                                                                                                                                                                                   |\n| `C-t`                  | Transpose characters                                                                                                                                                                                                                                                  |\n| `C-w`                  | Backward kill word                                                                                                                                                                                                                                                    |\n| `C-y`                  | Insert previously killed text                                                                                                                                                                                                                                         |\n| `C-]`                  | Insert matching closing bracket                                                                                                                                                                                                                                       |\n| `C-Up` or `M-Up`       | Navigate one row up when editing multiple lines                                                                                                                                                                                                                       |\n| `C-Down` or `M-Down`   | Navigate one row down when editing multiple lines                                                                                                                                                                                                                     |\n| `M-Enter`              | Insert a new line at cursor                                                                                                                                                                                                                                           |\n| `M-<` or `M-S-Up`      | Navigate to the start of the current expression                                                                                                                                                                                                                       |\n| `M->` or `M-S-Down`    | Navigate to the end of the current expression                                                                                                                                                                                                                         |\n| `Tab` or `C-i`         | Autocomplete current expression, or show completion suggestions                                                                                                                                                                                                       |\n| `M-c`                  | Clear current expression                                                                                                                                                                                                                                              |\n| `M-h`                  | Display help for the module or function closest on the left of the cursor.                                                                                                                                                                                            |\n| `PageUp`               | Scroll the expand, search or help buffer 5 lines upwards.                                                                                                                                                                                                             |\n| `PageDown`             | Scroll the expand, search or help buffer 5 lines downwards.                                                                                                                                                                                                           |\n\n_Table: tty Text Editing_","ref":"tty.html#normal-mode"},{"type":"extras","title":"Shell Break Mode - tty - A Command-Line Interface","doc":"In this mode the following can be done:\n\n- Kill or suspend the current shell\n- Connect to a suspended shell\n- Start a new shell","ref":"tty.html#shell-break-mode"},{"type":"extras","title":"How to Implement a Driver","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# How to Implement a Driver\n\n> #### Note {: .info }\n>\n> This section was written a long time ago. Most of it is still valid, as it\n> explains important concepts, but this was written for an older driver\n> interface so the examples do not work anymore. The reader is encouraged to\n> read the [`erl_driver`](erl_driver.md) and [`driver_entry`](driver_entry.md)\n> documentation also.","ref":"driver.html"},{"type":"extras","title":"Introduction - How to Implement a Driver","doc":"This section describes how to build your own driver for Erlang.\n\nA driver in Erlang is a library written in C, which is linked to the Erlang\nemulator and called from Erlang. Drivers can be used when C is more suitable\nthan Erlang, to speed up things, or to provide access to OS resources not\ndirectly accessible from Erlang.\n\nA driver can be dynamically loaded, as a shared library (known as a DLL on\nWindows), or statically loaded, linked with the emulator when it is compiled and\nlinked. Only dynamically loaded drivers are described here, statically linked\ndrivers are beyond the scope of this section.\n\n> #### Warning {: .warning }\n>\n> When a driver is loaded it is executed in the context of the emulator, shares\n> the same memory and the same thread. This means that all operations in the\n> driver must be non-blocking, and that any crash in the driver brings the whole\n> emulator down. In short, be careful.","ref":"driver.html#introduction"},{"type":"extras","title":"Sample Driver - How to Implement a Driver","doc":"This section describes a simple driver for accessing a postgres database using\nthe libpq C client library. Postgres is used because it is free and open source.\nFor information on postgres, see [www.postgres.org](http://www.postgres.org).\n\nThe driver is synchronous, it uses the synchronous calls of the client library.\nThis is only for simplicity, but not good, as it halts the emulator while\nwaiting for the database. This is improved below with an asynchronous sample\ndriver.\n\nThe code is straightforward: all communication between Erlang and the driver is\ndone with [`port_control/3`](`port_control/3`), and the driver returns data back\nusing the `rbuf`.\n\nAn Erlang driver only exports one function: the driver entry function. This is\ndefined with a macro, `DRIVER_INIT`, which returns a pointer to a C `struct`\ncontaining the entry points that are called from the emulator. The `struct`\ndefines the entries that the emulator calls to call the driver, with a `NULL`\npointer for entries that are not defined and used by the driver.\n\nThe `start` entry is called when the driver is opened as a port with\n[`open_port/2`](`open_port/2`). Here we allocate memory for a user data\nstructure. This user data is passed every time the emulator calls us. First we\nstore the driver handle, as it is needed in later calls. We allocate memory for\nthe connection handle that is used by LibPQ. We also set the port to return\nallocated driver binaries, by setting flag `PORT_CONTROL_FLAG_BINARY`, calling\n`set_port_control_flags`. (This is because we do not know if our data will fit\nin the result buffer of `control`, which has a default size, 64 bytes, set up by\nthe emulator.)\n\nAn entry `init` is called when the driver is loaded. However, we do not use\nthis, as it is executed only once, and we want to have the possibility of\nseveral instances of the driver.\n\nThe `stop` entry is called when the port is closed.\n\nThe `control` entry is called from the emulator when the Erlang code calls\n[`port_control/3`](`port_control/3`), to do the actual work. We have defined a\nsimple set of commands: `connect` to log in to the database, `disconnect` to log\nout, and `select` to send a SQL-query and get the result. All results are\nreturned through `rbuf`. The library [`ei`] in [`erl_interface`](`e:erl_interface:index.html`)\nis used to encode data in binary term format. The result is returned to the emulator as binary\nterms, so `binary_to_term` is called in Erlang to convert the result to term\nform.\n\nThe code is available in `pg_sync.c` in the `sample` directory of `erts`.\n\nThe driver entry contains the functions that will be called by the emulator. In\nthis example, only [`start`], [`stop`], and [`control`] are provided:\n\n```c\n/* Driver interface declarations */\nstatic ErlDrvData start(ErlDrvPort port, char *command);\nstatic void stop(ErlDrvData drv_data);\nstatic int control(ErlDrvData drv_data, unsigned int command, char *buf,\n                   int len, char **rbuf, int rlen);\n\nstatic ErlDrvEntry pq_driver_entry = {\n    NULL,                        /* init */\n    start,\n    stop,\n    NULL,                        /* output */\n    NULL,                        /* ready_input */\n    NULL,                        /* ready_output */\n    \"pg_sync\",                   /* the name of the driver */\n    NULL,                        /* finish */\n    NULL,                        /* handle */\n    control,\n    NULL,                        /* timeout */\n    NULL,                        /* outputv */\n    NULL,                        /* ready_async */\n    NULL,                        /* flush */\n    NULL,                        /* call */\n    NULL                         /* event */\n};\n```\n\nWe have a structure to store state needed by the driver, in this case we only\nneed to keep the database connection:\n\n```c\ntypedef struct our_data_s {\n    PGconn* conn;\n} our_data_t;\n```\n\nThe control codes that we have defined are as follows:\n\n```c\n/* Keep the following definitions in alignment with the\n * defines in erl_pq_sync.erl\n */\n\n#define DRV_CONNECT             'C'\n#define DRV_DISCONNECT          'D'\n#define DRV_SELECT              'S'\n```\n\nThis returns the driver structure. The macro [`DRIVER_INIT`] defines the only\nexported function. All the other functions are static, and will not be exported\nfrom the library.\n\n```c\n/* INITIALIZATION AFTER LOADING */\n\n/*\n * This is the init function called after this driver has been loaded.\n * It must *not* be declared static. Must return the address to\n * the driver entry.\n */\n\nDRIVER_INIT(pq_drv)\n{\n    return &pq_driver_entry;\n}\n```\n\nHere some initialization is done, [`start`] is called from `open_port/2`. The data\nwill be passed to [`control`] and [`stop`].\n\n```c\n/* DRIVER INTERFACE */\nstatic ErlDrvData start(ErlDrvPort port, char *command)\n{\n    our_data_t* data;\n\n    data = (our_data_t*)driver_alloc(sizeof(our_data_t));\n    data->conn = NULL;\n    set_port_control_flags(port, PORT_CONTROL_FLAG_BINARY);\n    return (ErlDrvData)data;\n}\n```\n\nWe call disconnect to log out from the database. (This should have been done\nfrom Erlang, but just in case.)\n\n```c\nstatic int do_disconnect(our_data_t* data, ei_x_buff* x);\n\nstatic void stop(ErlDrvData drv_data)\n{\n    our_data_t* data = (our_data_t*)drv_data;\n\n    do_disconnect(data, NULL);\n    driver_free(data);\n}\n```\n\nWe use the binary format only to return data to the emulator; input data is a\nstring parameter for `connect` and `select`. The returned data consists of\nErlang terms.\n\nThe functions `get_s` and `ei_x_to_new_binary` are utilities that are used to\nmake the code shorter. `get_s` duplicates the string and zero-terminates it, as\nthe postgres client library wants that. `ei_x_to_new_binary` takes an\n`ei_x_buff` buffer, allocates a binary, and copies the data there. This binary\nis returned in `*rbuf`. (Notice that this binary is freed by the emulator, not\nby us.)\n\n```c\nstatic char* get_s(const char* buf, int len);\nstatic int do_connect(const char *s, our_data_t* data, ei_x_buff* x);\nstatic int do_select(const char* s, our_data_t* data, ei_x_buff* x);\n\n/* As we are operating in binary mode, the return value from control\n * is irrelevant, as long as it is not negative.\n */\nstatic int control(ErlDrvData drv_data, unsigned int command, char *buf,\n                   int len, char **rbuf, int rlen)\n{\n    int r;\n    ei_x_buff x;\n    our_data_t* data = (our_data_t*)drv_data;\n    char* s = get_s(buf, len);\n    ei_x_new_with_version(&x);\n    switch (command) {\n        case DRV_CONNECT:    r = do_connect(s, data, &x);  break;\n        case DRV_DISCONNECT: r = do_disconnect(data, &x);  break;\n        case DRV_SELECT:     r = do_select(s, data, &x);   break;\n        default:             r = -1;        break;\n    }\n    *rbuf = (char*)ei_x_to_new_binary(&x);\n    ei_x_free(&x);\n    driver_free(s);\n    return r;\n}\n```\n\n`do_connect` is where we log in to the database. If the connection was\nsuccessful, we store the connection handle in the driver data, and return\n`'ok'`. Otherwise, we return the error message from postgres and store `NULL` in\nthe driver data.\n\n```c\nstatic int do_connect(const char *s, our_data_t* data, ei_x_buff* x)\n{\n    PGconn* conn = PQconnectdb(s);\n    if (PQstatus(conn) != CONNECTION_OK) {\n        encode_error(x, conn);\n        PQfinish(conn);\n        conn = NULL;\n    } else {\n        encode_ok(x);\n    }\n    data->conn = conn;\n    return 0;\n}\n```\n\nIf we are connected (and if the connection handle is not `NULL`), we log out\nfrom the database. We need to check if we should encode an `'ok'`, as we can get\nhere from function [`stop`], which does not return data to the emulator:\n\n```c\nstatic int do_disconnect(our_data_t* data, ei_x_buff* x)\n{\n    if (data->conn == NULL)\n        return 0;\n    PQfinish(data->conn);\n    data->conn = NULL;\n    if (x != NULL)\n        encode_ok(x);\n    return 0;\n}\n```\n\nWe execute a query and encode the result. Encoding is done in another C module,\n`pg_encode.c`, which is also provided as sample code.\n\n```c\nstatic int do_select(const char* s, our_data_t* data, ei_x_buff* x)\n{\n   PGresult* res = PQexec(data->conn, s);\n    encode_result(x, res, data->conn);\n    PQclear(res);\n    return 0;\n}\n```\n\nHere we check the result from postgres. If it is data, we encode it as lists of\nlists with column data. Everything from postgres is C strings, so we use\n[`ei_x_encode_string`] to send the result as strings to Erlang. (The head of the\nlist contains the column names.)\n\n```c\nvoid encode_result(ei_x_buff* x, PGresult* res, PGconn* conn)\n{\n    int row, n_rows, col, n_cols;\n    switch (PQresultStatus(res)) {\n    case PGRES_TUPLES_OK:\n        n_rows = PQntuples(res);\n        n_cols = PQnfields(res);\n        ei_x_encode_tuple_header(x, 2);\n        encode_ok(x);\n        ei_x_encode_list_header(x, n_rows+1);\n        ei_x_encode_list_header(x, n_cols);\n        for (col = 0; col < n_cols; ++col) {\n            ei_x_encode_string(x, PQfname(res, col));\n        }\n        ei_x_encode_empty_list(x);\n        for (row = 0; row < n_rows; ++row) {\n            ei_x_encode_list_header(x, n_cols);\n            for (col = 0; col < n_cols; ++col) {\n                ei_x_encode_string(x, PQgetvalue(res, row, col));\n            }\n            ei_x_encode_empty_list(x);\n        }\n        ei_x_encode_empty_list(x);\n        break;\n    case PGRES_COMMAND_OK:\n        ei_x_encode_tuple_header(x, 2);\n        encode_ok(x);\n        ei_x_encode_string(x, PQcmdTuples(res));\n        break;\n    default:\n        encode_error(x, conn);\n        break;\n    }\n}\n```","ref":"driver.html#sample-driver"},{"type":"extras","title":"Compiling and Linking the Sample Driver - How to Implement a Driver","doc":"The driver is to be compiled and linked to a shared library (DLL on Windows).\nWith gcc, this is done with link flags `-shared` and `-fpic`. As we use the [`ei`]\nlibrary, we should include it too. There are several versions of [`ei`], compiled\nfor debug or non-debug and multi-threaded or single-threaded. In the makefile\nfor the samples, the `obj` directory is used for the [`ei`] library, meaning that\nwe use the non-debug, single-threaded version.","ref":"driver.html#compiling-and-linking-the-sample-driver"},{"type":"extras","title":"Calling a Driver as a Port in Erlang - How to Implement a Driver","doc":"Before a driver can be called from Erlang, it must be loaded and opened. Loading\nis done using the `m:erl_ddll` module (the `m:erl_ddll` driver that loads dynamic\ndriver is actually a driver itself). If loading is successful, the port can be\nopened with [`open_port/2`](`open_port/2`). The port name must match the name of\nthe shared library and the name in the driver entry structure.\n\nWhen the port has been opened, the driver can be called. In the `pg_sync`\nexample, we do not have any data from the port, only the return value from the\n`port_control/3`.\n\nThe following code is the Erlang part of the synchronous postgres driver,\n`pg_sync.erl`:\n\n```erlang\n-module(pg_sync).\n\n-define(DRV_CONNECT, 1).\n-define(DRV_DISCONNECT, 2).\n-define(DRV_SELECT, 3).\n\n-export([connect/1, disconnect/1, select/2]).\n\nconnect(ConnectStr) ->\n    case erl_ddll:load_driver(\".\", \"pg_sync\") of\n        ok -> ok;\n        {error, already_loaded} -> ok;\n        E -> exit({error, E})\n    end,\n    Port = open_port({spawn, ?MODULE}, []),\n    case binary_to_term(port_control(Port, ?DRV_CONNECT, ConnectStr)) of\n        ok -> {ok, Port};\n        Error -> Error\n    end.\n\ndisconnect(Port) ->\n    R = binary_to_term(port_control(Port, ?DRV_DISCONNECT, \"\")),\n    port_close(Port),\n    R.\n\nselect(Port, Query) ->\n    binary_to_term(port_control(Port, ?DRV_SELECT, Query)).\n```\n\nThe API is simple:\n\n- `connect/1` loads the driver, opens it, and logs on to the database, returning\n  the Erlang port if successful.\n- `select/2` sends a query to the driver and returns the result.\n- `disconnect/1` closes the database connection and the driver. (However, it\n  does not unload it.)\n\nThe connection string is to be a connection string for postgres.\n\nThe driver is loaded with `erl_ddll:load_driver/2`. If this is successful, or if\nit is already loaded, it is opened. This will call the `start` function in the\ndriver.\n\nWe use the [`port_control/3`](`port_control/3`) function for all calls into the\ndriver. The result from the driver is returned immediately and converted to\nterms by calling [`binary_to_term/1`](`binary_to_term/1`). (We trust that the\nterms returned from the driver are well-formed, otherwise the `binary_to_term/1`\ncalls could be contained in a `catch`.)","ref":"driver.html#calling-a-driver-as-a-port-in-erlang"},{"type":"extras","title":"Sample Asynchronous Driver - How to Implement a Driver","doc":"Sometimes database queries can take a long time to complete, in our `pg_sync`\ndriver, the emulator halts while the driver is doing its job. This is often not\nacceptable, as no other Erlang process gets a chance to do anything. To improve\non our postgres driver, we re-implement it using the asynchronous calls in\nLibPQ.\n\nThe asynchronous version of the driver is in the sample files `pg_async.c` and\n`pg_asyng.erl`.\n\n```c\n/* Driver interface declarations */\nstatic ErlDrvData start(ErlDrvPort port, char *command);\nstatic void stop(ErlDrvData drv_data);\nstatic int control(ErlDrvData drv_data, unsigned int command, char *buf,\n                   int len, char **rbuf, int rlen);\nstatic void ready_io(ErlDrvData drv_data, ErlDrvEvent event);\n\nstatic ErlDrvEntry pq_driver_entry = {\n    NULL,                     /* init */\n    start,\n    stop,\n    NULL,                     /* output */\n    ready_io,                 /* ready_input */\n    ready_io,                 /* ready_output */\n    \"pg_async\",               /* the name of the driver */\n    NULL,                     /* finish */\n    NULL,                     /* handle */\n    control,\n    NULL,                     /* timeout */\n    NULL,                     /* outputv */\n    NULL,                     /* ready_async */\n    NULL,                     /* flush */\n    NULL,                     /* call */\n    NULL                      /* event */\n};\n\ntypedef struct our_data_t {\n    PGconn* conn;\n    ErlDrvPort port;\n    int socket;\n    int connecting;\n} our_data_t;\n```\n\nSome things have changed from `pg_sync.c`: we use the entry `ready_io` for\n[`ready_input`] and [`ready_output`], which is called from the emulator only when\nthere is input to be read from the socket. (Actually, the socket is used in a\n`select` function inside the emulator, and when the socket is signaled,\nindicating there is data to read, the [`ready_input`] entry is called. More about\nthis below.)\n\nOur driver data is also extended, we keep track of the socket used for\ncommunication with postgres, and also the port, which is needed when we send\ndata to the port with [`driver_output`]. We have a flag `connecting` to tell\nwhether the driver is waiting for a connection or waiting for the result of a\nquery. (This is needed, as the entry `ready_io` is called both when connecting\nand when there is a query result.)\n\n```c\nstatic int do_connect(const char *s, our_data_t* data)\n{\n    PGconn* conn = PQconnectStart(s);\n    if (PQstatus(conn) == CONNECTION_BAD) {\n        ei_x_buff x;\n        ei_x_new_with_version(&x);\n        encode_error(&x, conn);\n        PQfinish(conn);\n        conn = NULL;\n        driver_output(data->port, x.buff, x.index);\n        ei_x_free(&x);\n    }\n    PQconnectPoll(conn);\n    int socket = PQsocket(conn);\n    data->socket = socket;\n    driver_select(data->port, (ErlDrvEvent)socket, DO_READ, 1);\n    driver_select(data->port, (ErlDrvEvent)socket, DO_WRITE, 1);\n    data->conn = conn;\n    data->connecting = 1;\n    return 0;\n}\n```\n\nThe `connect` function looks a bit different too. We connect using the\nasynchronous `PQconnectStart` function. After the connection is started, we\nretrieve the socket for the connection with `PQsocket`. This socket is used with\nthe [`driver_select`] function to wait for connection. When the socket is ready\nfor input or for output, the `ready_io` function is called.\n\nNotice that we only return data (with [`driver_output`]) if there is an error\nhere, otherwise we wait for the connection to be completed, in which case our\n`ready_io` function is called.\n\n```c\nstatic int do_select(const char* s, our_data_t* data)\n{\n    data->connecting = 0;\n    PGconn* conn = data->conn;\n    /* if there's an error return it now */\n    if (PQsendQuery(conn, s) == 0) {\n        ei_x_buff x;\n        ei_x_new_with_version(&x);\n        encode_error(&x, conn);\n        driver_output(data->port, x.buff, x.index);\n        ei_x_free(&x);\n    }\n    /* else wait for ready_output to get results */\n    return 0;\n}\n```\n\nThe `do_select` function initiates a select, and returns if there is no\nimmediate error. The result is returned when `ready_io` is called.\n\n```c\nstatic void ready_io(ErlDrvData drv_data, ErlDrvEvent event)\n{\n    PGresult* res = NULL;\n    our_data_t* data = (our_data_t*)drv_data;\n    PGconn* conn = data->conn;\n    ei_x_buff x;\n    ei_x_new_with_version(&x);\n    if (data->connecting) {\n        ConnStatusType status;\n        PQconnectPoll(conn);\n        status = PQstatus(conn);\n        if (status == CONNECTION_OK)\n            encode_ok(&x);\n        else if (status == CONNECTION_BAD)\n            encode_error(&x, conn);\n    } else {\n        PQconsumeInput(conn);\n        if (PQisBusy(conn))\n            return;\n        res = PQgetResult(conn);\n        encode_result(&x, res, conn);\n        PQclear(res);\n        for (;;) {\n            res = PQgetResult(conn);\n            if (res == NULL)\n                break;\n            PQclear(res);\n        }\n    }\n    if (x.index > 1) {\n        driver_output(data->port, x.buff, x.index);\n        if (data->connecting)\n            driver_select(data->port, (ErlDrvEvent)data->socket, DO_WRITE, 0);\n    }\n    ei_x_free(&x);\n}\n```\n\nThe `ready_io` function is called when the socket we got from postgres is ready\nfor input or output. Here we first check if we are connecting to the database.\nIn that case, we check connection status and return OK if the connection is\nsuccessful, or error if it is not. If the connection is not yet established, we\nsimply return; `ready_io` is called again.\n\nIf we have a result from a connect, indicated by having data in the `x` buffer,\nwe no longer need to select on output ([`ready_output`]), so we remove this by\ncalling [`driver_select`].\n\nIf we are not connecting, we wait for results from a `PQsendQuery`, so we get\nthe result and return it. The encoding is done with the same functions as in the\nearlier example.\n\nError handling is to be added here, for example, checking that the socket is\nstill open, but this is only a simple example.\n\nThe Erlang part of the asynchronous driver consists of the sample file\n`pg_async.erl`.\n\n```erlang\n-module(pg_async).\n\n-define(DRV_CONNECT, $C).\n-define(DRV_DISCONNECT, $D).\n-define(DRV_SELECT, $S).\n\n-export([connect/1, disconnect/1, select/2]).\n\nconnect(ConnectStr) ->\n    case erl_ddll:load_driver(\".\", \"pg_async\") of\n        ok -> ok;\n        {error, already_loaded} -> ok;\n        _ -> exit({error, could_not_load_driver})\n    end,\n    Port = open_port({spawn, ?MODULE}, [binary]),\n    port_control(Port, ?DRV_CONNECT, ConnectStr),\n    case return_port_data(Port) of\n        ok ->\n            {ok, Port};\n        Error ->\n            Error\n    end.\n\ndisconnect(Port) ->\n    port_control(Port, ?DRV_DISCONNECT, \"\"),\n    R = return_port_data(Port),\n    port_close(Port),\n    R.\n\nselect(Port, Query) ->\n    port_control(Port, ?DRV_SELECT, Query),\n    return_port_data(Port).\n\nreturn_port_data(Port) ->\n    receive\n        {Port, {data, Data}} ->\n            binary_to_term(Data)\n    end.\n```\n\nThe Erlang code is slightly different, as we do not return the result\nsynchronously from `port_control/3`, instead we get it from [`driver_output`] as\ndata in the message queue. The function `return_port_data` above receives data\nfrom the port. As the data is in binary format, we use\n[`binary_to_term/1`](`binary_to_term/1`) to convert it to an Erlang term. Notice\nthat the driver is opened in binary mode ([`open_port/2`](`open_port/2`) is\ncalled with option `[binary]`). This means that data sent from the driver to the\nemulator is sent as binaries. Without option `binary`, they would have been\nlists of integers.","ref":"driver.html#sample-asynchronous-driver"},{"type":"extras","title":"An Asynchronous Driver Using driver_async - How to Implement a Driver","doc":"As a final example we demonstrate the use of [`driver_async`]. We also use the\ndriver term interface. The driver is written in C++. This enables us to use an\nalgorithm from STL. We use the `next_permutation` algorithm to get the next\npermutation of a list of integers. For large lists (> 100,000 elements), this\ntakes some time, so we perform this as an asynchronous task.\n\nThe asynchronous API for drivers is complicated. First, the work must be\nprepared. In the example, this is done in [`output`]. We could have used\n[`control`], but we want some variation in the examples. In our driver, we\nallocate a structure that contains anything that is needed for the asynchronous\ntask to do the work. This is done in the main emulator thread. Then the\nasynchronous function is called from a driver thread, separate from the main\nemulator thread. Notice that the driver functions are not re-entrant, so they\nare not to be used. Finally, after the function is completed, the driver\ncallback [`ready_async`] is called from the main emulator thread, this is where we\nreturn the result to Erlang. (We cannot return the result from within the\nasynchronous function, as we cannot call the driver functions.)\n\nThe following code is from the sample file `next_perm.cc`. The driver entry\nlooks like before, but also contains the callback [`ready_async`].\n\n```c\nstatic ErlDrvEntry next_perm_driver_entry = {\n    NULL,                        /* init */\n    start,\n    NULL,                        /* stop */\n    output,\n    NULL,                        /* ready_input */\n    NULL,                        /* ready_output */\n    \"next_perm\",                 /* the name of the driver */\n    NULL,                        /* finish */\n    NULL,                        /* handle */\n    NULL,                        /* control */\n    NULL,                        /* timeout */\n    NULL,                        /* outputv */\n    ready_async,\n    NULL,                        /* flush */\n    NULL,                        /* call */\n    NULL                         /* event */\n};\n```\n\nThe `output` function allocates the work area of the asynchronous function. As\nwe use C++, we use a struct, and stuff the data in it. We must copy the original\ndata, it is not valid after we have returned from the `output` function, and the\n`do_perm` function is called later, and from another thread. We return no data\nhere, instead it is sent later from the [`ready_async`] callback.\n\nThe `async_data` is passed to the `do_perm` function. We do not use a\n`async_free` function (the last argument to [`driver_async`]), it is only used if\nthe task is cancelled programmatically.\n\n```c\nstruct our_async_data {\n    bool prev;\n    vector  data;\n    our_async_data(ErlDrvPort p, int command, const char* buf, int len);\n};\n\nour_async_data::our_async_data(ErlDrvPort p, int command,\n                               const char* buf, int len)\n    : prev(command == 2),\n      data((int*)buf, (int*)buf + len / sizeof(int))\n{\n}\n\nstatic void do_perm(void* async_data);\n\nstatic void output(ErlDrvData drv_data, char *buf, int len)\n{\n    if (*buf < 1 || *buf > 2) return;\n    ErlDrvPort port = reinterpret_cast (drv_data);\n    void* async_data = new our_async_data(port, *buf, buf+1, len);\n    driver_async(port, NULL, do_perm, async_data, do_free);\n}\n```\n\nIn the `do_perm` we do the work, operating on the structure that was allocated\nin `output`.\n\n```c\nstatic void do_perm(void* async_data)\n{\n    our_async_data* d = reinterpret_cast (async_data);\n    if (d->prev)\n        prev_permutation(d->data.begin(), d->data.end());\n    else\n        next_permutation(d->data.begin(), d->data.end());\n}\n```\n\nIn the `ready_async` function the output is sent back to the emulator. We use\nthe driver term format instead of [`ei`]. This is the only way to send Erlang\nterms directly to a driver, without having the Erlang code to call\n[`binary_to_term/1`](`binary_to_term/1`). In the simple example this works well,\nand we do not need to use [`ei`] to handle the binary term format.\n\nWhen the data is returned, we deallocate our data.\n\n```c\nstatic void ready_async(ErlDrvData drv_data, ErlDrvThreadData async_data)\n{\n    ErlDrvPort port = reinterpret_cast (drv_data);\n    our_async_data* d = reinterpret_cast (async_data);\n    int n = d->data.size(), result_n = n*2 + 3;\n    ErlDrvTermData *result = new ErlDrvTermData[result_n], *rp = result;\n    for (vector ::iterator i = d->data.begin();\n         i != d->data.end(); ++i) {\n        *rp++ = ERL_DRV_INT;\n        *rp++ = *i;\n    }\n    *rp++ = ERL_DRV_NIL;\n    *rp++ = ERL_DRV_LIST;\n    *rp++ = n+1;\n    driver_output_term(port, result, result_n);\n    delete[] result;\n    delete d;\n}\n```\n\nThis driver is called like the others from Erlang. However, as we use\n[`driver_output_term`], there is no need to call `binary_to_term/1`. The Erlang code\nis in the sample file `next_perm.erl`.\n\nThe input is changed into a list of integers and sent to the driver.\n\n```erlang\n-module(next_perm).\n\n-export([next_perm/1, prev_perm/1, load/0, all_perm/1]).\n\nload() ->\n    case whereis(next_perm) of\n        undefined ->\n            case erl_ddll:load_driver(\".\", \"next_perm\") of\n                ok -> ok;\n                {error, already_loaded} -> ok;\n                E -> exit(E)\n            end,\n            Port = open_port({spawn, \"next_perm\"}, []),\n            register(next_perm, Port);\n        _ ->\n            ok\n    end.\n\nlist_to_integer_binaries(L) ->\n    [< > || I <- L].\n\nnext_perm(L) ->\n    next_perm(L, 1).\n\nprev_perm(L) ->\n    next_perm(L, 2).\n\nnext_perm(L, Nxt) ->\n    load(),\n    B = list_to_integer_binaries(L),\n    port_control(next_perm, Nxt, B),\n    receive\n        Result ->\n            Result\n    end.\n\nall_perm(L) ->\n    New = prev_perm(L),\n    all_perm(New, L, [New]).\n\nall_perm(L, L, Acc) ->\n    Acc;\nall_perm(L, Orig, Acc) ->\n    New = prev_perm(L),\n    all_perm(New, Orig, [New | Acc]).\n```\n\n[`ei`]: `e:erl_interface:ei.md`\n[`start`]: `e:erts:driver_entry.md#start`\n[`stop`]: `e:erts:driver_entry.md#stop`\n[`control`]: `e:erts:driver_entry.md#control`\n[`output`]: `e:erts:driver_entry.md#output`\n[`DRIVER_INIT`]: `e:erts:driver_entry.md#DRIVER_INIT`\n[`ready_input`]: `e:erts:driver_entry.md#ready_input`\n[`ready_output`]: `e:erts:driver_entry.md#ready_output`\n[`ready_async`]: `e:erts:driver_entry.md#ready_async`\n[`driver_output`]: `e:erts:erl_driver.md#driver_output`\n[`driver_output_term`]: `e:erts:erl_driver.md#driver_output_term`\n[`driver_select`]: `e:erts:erl_driver.md#driver_select`\n[`driver_async`]: `e:erts:erl_driver.md#driver_async`\n[`ei_x_encode_string`]: `e:erl_interface:ei.md#ei_x_encode_string`","ref":"driver.html#an-asynchronous-driver-using-driver_async"},{"type":"extras","title":"Inet Configuration","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Inet Configuration","ref":"inet_cfg.html"},{"type":"extras","title":"Introduction - Inet Configuration","doc":"This section describes how the Erlang runtime system is configured for IP\ncommunication. It also explains how you can configure it for your needs by a\nconfiguration file. The information is primarily intended for users with special\nconfiguration needs or problems. There is normally no need for specific settings\nfor Erlang to function properly on a correctly IP-configured platform.\n\nWhen Erlang starts up it reads the Kernel variable `inetrc`, which, if defined,\nis to specify the location and name of a user configuration file. Example:\n\n```text\n% erl -kernel inetrc '\"./cfg_files/erl_inetrc\"'\n```\n\nNotice that the use of an `.inetrc` file, which was supported in earlier\nErlang/OTP versions, is now obsolete.\n\nA second way to specify the configuration file is to set environment variable\n`ERL_INETRC` to the full name of the file. Example (bash):\n\n```text\n% export ERL_INETRC=./cfg_files/erl_inetrc\n```\n\nNotice that the Kernel variable `inetrc` overrides this environment variable.\n\nIf no user configuration file is specified and Erlang is started in\nnon-distributed or short name distributed mode, Erlang uses default\nconfiguration settings and a native lookup method that works correctly under\nmost circumstances. Erlang reads no information from system `inet` configuration\nfiles (such as `/etc/host.conf` and `/etc/nsswitch.conf`) in these modes, except\nfor `/etc/resolv.conf` and `/etc/hosts` that is read and monitored for changes\non Unix platforms for the internal DNS client `m:inet_res`.\n\nIf Erlang is started in long name distributed mode, it needs to get the domain\nname from somewhere and reads system `inet` configuration files for this\ninformation. Any hosts and resolver information found is also recorded, but not\nused as long as Erlang is configured for native lookups. The information becomes\nuseful if the lookup method is changed to `'file'` or `'dns'`, see below.\n\nNative lookup (system calls) is always the default resolver method. This is true\nfor all platforms, except OSE Delta where `'file'` or `'dns'` is used (in that\npriority order).\n\nOn Windows platforms, Erlang searches the system registry rather than looks for\nconfiguration files when started in long name distributed mode.","ref":"inet_cfg.html#introduction"},{"type":"extras","title":"Configuration Data - Inet Configuration","doc":"Erlang records the following data in a local database if found in system `inet`\nconfiguration files (or system registry):\n\n- Hostnames and host addresses\n- Domain name\n- Nameservers\n- Search domains\n- Lookup method\n\nThis data can also be specified explicitly in the user configuration file. This\nfile is to contain lines of configuration parameters (each terminated with a\nfull stop). Some parameters add data to the configuration (such as host and\nnameserver), others overwrite any previous settings (such as domain and lookup).\nThe user configuration file is always examined last in the configuration\nprocess, making it possible for the user to override any default values or\npreviously made settings. Call `inet:get_rc()` to view the state of the `inet`\nconfiguration database.\n\nThe valid configuration parameters are as follows:\n\n- ```\n  {file, Format, File}.\n    Format = atom()\n    File = string()\n  ```\n\n  Specify a system file that Erlang is to read configuration data from. `Format`\n  tells the parser how the file is to be interpreted:\n\n  - `resolv` (Unix resolv.conf)\n  - `host_conf_freebsd` (FreeBSD host.conf)\n  - `host_conf_bsdos` (BSDOS host.conf)\n  - `host_conf_linux` (Linux host.conf)\n  - `nsswitch_conf` (Unix nsswitch.conf)\n  - `hosts` (Unix hosts)\n\n  `File` is to specify the filename with full path.\n\n- ```\n  {resolv_conf, File}.\n    File = string()\n  ```\n\n  Specify a system file that Erlang is to read resolver configuration from for\n  the internal DNS client `m:inet_res`, and monitor for changes, even if it does\n  not exist. The path must be absolute.\n\n  This can override the configuration parameters `nameserver` and `search`\n  depending on the contents of the specified file. They can also change any time\n  in the future reflecting the file contents.\n\n  If the file is specified as an empty string `\"\"`, no file is read or monitored\n  in the future. This emulates the old behavior of not configuring the DNS\n  client when the node is started in short name distributed mode.\n\n  If this parameter is not specified, it defaults to `/etc/resolv.conf` unless\n  environment variable `ERL_INET_ETC_DIR` is set, which defines the directory\n  for this file to some maybe other than `/etc`.\n\n- ```\n  {hosts_file, File}.\n    File = string()\n  ```\n\n  Specify a system file that Erlang is to read resolver configuration from for\n  the internal hosts file resolver, and monitor for changes, even if it does not\n  exist. The path must be absolute.\n\n  These host entries are searched after all added with `{file, hosts, File}`\n  above or `{host, IP, Aliases}` below when lookup option `file` is used.\n\n  If the file is specified as an empty string `\"\"`, no file is read or monitored\n  in the future. This emulates the old behavior of not configuring the DNS\n  client when the node is started in short name distributed mode.\n\n  If this parameter is not specified, it defaults to `/etc/hosts` unless\n  environment variable `ERL_INET_ETC_DIR` is set, which defines the directory\n  for this file to some maybe other than `/etc`.\n\n- ```\n  {registry, Type}.\n    Type = atom()\n  ```\n\n  Specify a system registry that Erlang is to read configuration data from.\n  `win32` is the only valid option.\n\n- ```\n  {host, IP, Aliases}.\n    IP = tuple()\n  ```\n\n  `Aliases = [string()]`\n\n  Add host entry to the hosts table.\n\n- ```\n  {domain, Domain}.\n    Domain = string()\n  ```\n\n  Set domain name.\n\n- ```\n  {nameserver, IP [,Port]}.\n    IP = tuple()\n    Port = integer()\n  ```\n\n  Add address (and port, if other than default) of the primary nameserver to use\n  for `m:inet_res`.\n\n- ```\n  {alt_nameserver, IP [,Port]}.\n    IP = tuple()\n    Port = integer()\n  ```\n\n  Add address (and port, if other than default) of the secondary nameserver for\n  `m:inet_res`.\n\n- ```\n  {search, Domains}.\n    Domains = [string()]\n  ```\n\n  Add search domains for `m:inet_res`.\n\n- ```\n  {lookup, Methods}.\n    Methods = [atom()]\n  ```\n\n  Specify lookup methods and in which order to try them. The valid methods are\n  as follows:\n\n  - `native` (use system calls)\n  - `file` (use host data retrieved from system configuration files and/or the\n    user configuration file)\n  - `dns` (use the Erlang DNS client `m:inet_res` for nameserver queries)\n\n  The lookup method `string` tries to parse the hostname as an IPv4 or IPv6\n  string and return the resulting IP address. It is automatically tried first\n  when `native` is _not_ in the `Methods` list. To skip it in this case, the\n  pseudo lookup method `nostring` can be inserted anywhere in the `Methods`\n  list.\n\n- ```\n  {cache_size, Size}.\n    Size = integer()\n  ```\n\n  Set the resolver cache size for `dns` lookups. `native` lookups are not\n  cached. Defaults to 100 DNS records.\n\n- ```\n  {cache_refresh, Time}.\n    Time = integer()\n  ```\n\n  Set how often (in milliseconds) the resolver cache for `m:inet_res` is\n  refreshed (that is, expired DNS records are deleted). Defaults to 1 hour.\n\n- ```\n  {timeout, Time}.\n    Time = integer()\n  ```\n\n  Set the time to wait until retry (in milliseconds) for DNS queries made by\n  `m:inet_res`. Defaults to 2 seconds.\n\n- ```\n  {retry, N}.\n    N = integer()\n  ```\n\n  Set the number of DNS queries `m:inet_res` will try before giving up. Defaults\n  to 3.\n\n- ```\n  {servfail_retry_timeout, Time}.\n    Time = non_neg_integer()\n  ```\n\n  After all name servers have been tried, there is a timeout before the name\n  servers are tried again. This is to prevent the server from answering the\n  query with what's in the servfail cache,\n  [`inet_res`](`m:inet_res#servfail_retry_timeout`). Defaults to 1500 milli\n  seconds .\n\n- ```\n  {inet6, Bool}.\n    Bool = true | false\n  ```\n\n  Tells the DNS client `m:inet_res` to look up IPv6 addresses. Defaults to\n  `false`.\n\n- ```\n  {usevc, Bool}.\n    Bool = true | false\n  ```\n\n  Tells the DNS client `m:inet_res` to use TCP (Virtual Circuit) instead of UDP.\n  Defaults to `false`.\n\n- ```\n  {edns, Version}.\n    Version = false | 0\n  ```\n\n  Sets the EDNS version that `m:inet_res` will use. The only allowed version is\n  zero. Defaults to `false`, which means not to use EDNS.\n\n- ```\n  {udp_payload_size, Size}.\n    N = integer()\n  ```\n\n  Sets the allowed UDP payload size `m:inet_res` will advertise in EDNS queries.\n  Also sets the limit when the DNS query will be deemed too large for UDP\n  forcing a TCP query instead; this is not entirely correct, as the advertised\n  UDP payload size of the individual nameserver is what is to be used, but this\n  simple strategy will do until a more intelligent (probing, caching) algorithm\n  needs to be implemented. Default to 1280, which stems from the standard\n  Ethernet MTU size.\n\n- ```\n  {udp, Module}.\n    Module = atom()\n  ```\n\n  Tell Erlang to use another primitive UDP module than `inet_udp`.\n\n- ```\n  {tcp, Module}.\n    Module = atom()\n  ```\n\n  Tell Erlang to use another primitive TCP module than `inet_tcp`.\n\n- ```\n  clear_hosts.\n  ```\n\n  Clear the hosts table.\n\n- ```\n  clear_ns.\n  ```\n\n  Clear the list of recorded nameservers (primary and secondary).\n\n- ```\n  clear_search.\n  ```\n\n  Clear the list of search domains.","ref":"inet_cfg.html#configuration-data"},{"type":"extras","title":"User Configuration Example - Inet Configuration","doc":"Assume that a user does not want Erlang to use the native lookup method, but\nwants Erlang to read all information necessary from start and use that for\nresolving names and addresses. If lookup fails, Erlang is to request the data\nfrom a nameserver (using the Erlang DNS client, set to use EDNS allowing larger\nresponses). The resolver configuration is updated when its configuration file\nchanges. Also, DNS records are never to be cached. The user configuration file\n(in this example named `erl_inetrc`, stored in directory `./cfg_files`) can then\nlook as follows (Unix):\n\n```erlang\n%% -- ERLANG INET CONFIGURATION FILE --\n%% read the hosts file\n{file, hosts, \"/etc/hosts\"}.\n%% add a particular host\n{host, {134,138,177,105}, [\"finwe\"]}.\n%% do not monitor the hosts file\n{hosts_file, \"\"}.\n%% read and monitor nameserver config from here\n{resolv_conf, \"/usr/local/etc/resolv.conf\"}.\n%% enable EDNS\n{edns,0}.\n%% disable caching\n{cache_size, 0}.\n%% specify lookup method\n{lookup, [file, dns]}.\n```\n\nAnd Erlang can, for example, be started as follows:\n\n```text\n% erl -sname my_node -kernel inetrc '\"./cfg_files/erl_inetrc\"'\n```","ref":"inet_cfg.html#user-configuration-example"},{"type":"extras","title":"External Term Format","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# External Term Format","ref":"erl_ext_dist.html"},{"type":"extras","title":"Introduction - External Term Format","doc":"The external term format is mainly used in the distribution mechanism of Erlang.\n\nAs Erlang has a fixed number of types, there is no need for a programmer to\ndefine a specification for the external format used within some application. All\nErlang terms have an external representation and the interpretation of the\ndifferent terms is application-specific.\n\nIn Erlang the BIF [`erlang:term_to_binary/1,2`](`erlang:term_to_binary/1`) is\nused to convert a term into the external format. To convert binary data encoding\nto a term, the BIF `erlang:binary_to_term/1` is used.\n\nThe distribution does this implicitly when sending messages across node\nboundaries.\n\n[](){: #overall_format }\n\nThe overall format of the term format is as follows:\n\n| 1     | 1     | N      |\n| ----- | ----- | ------ |\n| `131` | `Tag` | `Data` |\n\n> #### Note {: .info }\n>\n> When messages are\n> [passed between connected nodes](erl_dist_protocol.md#connected_nodes) and a\n> [distribution header](erl_ext_dist.md#distribution-header) is used, the first\n> byte containing the version number (131) is omitted from the terms that follow\n> the distribution header. This is because the version number is implied by the\n> version number in the distribution header.\n\nThe compressed term format is as follows:\n\n| 1     | 1    | 4                  | N                     |\n| ----- | ---- | ------------------ | --------------------- |\n| `131` | `80` | `UncompressedSize` | `Zlib-compressedData` |\n\nUncompressed size (unsigned 32-bit integer in big-endian byte order) is the size\nof the data before it was compressed. The compressed data has the following\nformat when it has been expanded:\n\n| 1     | Uncompressed Size |\n| ----- | ----------------- |\n| `Tag` | `Data`            |\n\n[](){: #utf8_atoms }","ref":"erl_ext_dist.html#introduction"},{"type":"extras","title":"Encoding atoms - External Term Format","doc":"As from ERTS 9.0 (OTP 20), atoms may contain any Unicode characters.\n\nAtoms sent over node distribution are always encoded in UTF-8 using either\n[`ATOM_UTF8_EXT`](erl_ext_dist.md#atom_utf8_ext),\n[`SMALL_ATOM_UTF8_EXT`](erl_ext_dist.md#small_atom_utf8_ext) or\n[`ATOM_CACHE_REF`](erl_ext_dist.md#atom_cache_ref).\n\nAtoms encoded with [`erlang:term_to_binary/1,2`](`erlang:term_to_binary/1`) or\n[`erlang:term_to_iovec/1,2`](`erlang:term_to_iovec/1`) are by default\nalso always encoded in UTF-8 using either\n[`ATOM_UTF8_EXT`](erl_ext_dist.md#atom_utf8_ext) or\n[`SMALL_ATOM_UTF8_EXT`](erl_ext_dist.md#small_atom_utf8_ext).\n\nThe maximum number of allowed characters in an atom is 255. In the UTF-8 case,\neach character can need 4 bytes to be encoded.","ref":"erl_ext_dist.html#encoding-atoms"},{"type":"extras","title":"Distribution Header - External Term Format","doc":"The distribution header is sent by the erlang distribution to carry metadata\nabout the coming [control message](erl_dist_protocol.md#control_message) and\npotential payload. It is primarily used to handle the atom cache in the Erlang\ndistribution. Since OTP-22 it is also used to fragment large distribution\nmessages into multiple smaller fragments. For more information about how the\ndistribution uses the distribution header, see the documentation of the\n[protocol between connected nodes](erl_dist_protocol.md#connected_nodes) in the\n[distribution protocol](erl_dist_protocol.md) documentation.\n\nAny [ATOM_CACHE_REF](erl_ext_dist.md#atom_cache_ref) entries with corresponding\n`AtomCacheReferenceIndex` in terms encoded on the external format following a\ndistribution header refer to the atom cache references made in the distribution\nheader. The range is 0 <= `AtomCacheReferenceIndex` < 255, that is, at most 255\ndifferent atom cache references from the following terms can be made.","ref":"erl_ext_dist.html#distribution-header"},{"type":"extras","title":"Normal Distribution Header - External Term Format","doc":"The non-fragmented distribution header format is as follows:\n\n| 1     | 1    | 1                       | NumberOfAtomCacheRefs/2+1 \\| 0 | N \\| 0          |\n| ----- | ---- | ----------------------- | ------------------------------ | --------------- |\n| `131` | `68` | `NumberOfAtomCacheRefs` | `Flags`                        | `AtomCacheRefs` |\n\n`Flags` consist of `NumberOfAtomCacheRefs/2+1` bytes, unless\n`NumberOfAtomCacheRefs` is `0`. If `NumberOfAtomCacheRefs` is `0`, `Flags` and\n`AtomCacheRefs` are omitted. Each atom cache reference has a half byte flag\nfield. Flags corresponding to a specific `AtomCacheReferenceIndex` are located\nin flag byte number `AtomCacheReferenceIndex/2`. Flag byte 0 is the first byte\nafter the `NumberOfAtomCacheRefs` byte. Flags for an even\n`AtomCacheReferenceIndex` are located in the least significant half byte and\nflags for an odd `AtomCacheReferenceIndex` are located in the most significant\nhalf byte.\n\nThe flag field of an atom cache reference has the following format:\n\n| 1 bit               | 3 bits         |\n| ------------------- | -------------- |\n| `NewCacheEntryFlag` | `SegmentIndex` |\n\nThe most significant bit is the `NewCacheEntryFlag`. If set, the corresponding\ncache reference is new. The three least significant bits are the `SegmentIndex`\nof the corresponding atom cache entry. An atom cache consists of 8 segments,\neach of size 256, that is, an atom cache can contain 2048 entries.\n\nAnother half byte flag field is located along with flag fields for atom cache\nreferences. When `NumberOfAtomCacheRefs` is even, this half byte is the least\nsignificant half byte of the byte that follows the atom cache references. When\n`NumberOfAtomCacheRefs` is odd, this half byte is the most significant half byte\nof the last byte of the atom cache references (on the wire, it will appear\nbefore the last cache reference). It has the following format:\n\n| 3 bits            | 1 bit       |\n| ----------------- | ----------- |\n| `CurrentlyUnused` | `LongAtoms` |\n\nThe least significant bit in that half byte is flag `LongAtoms`. If it is set, 2\nbytes are used for atom lengths instead of 1 byte in the distribution header.\n\nAfter the `Flags` field follow the `AtomCacheRefs`. The first `AtomCacheRef` is\nthe one corresponding to `AtomCacheReferenceIndex` 0\\. Higher indices follow in\nsequence up to index `NumberOfAtomCacheRefs - 1`.\n\nIf the `NewCacheEntryFlag` for the next `AtomCacheRef` has been set, a\n`NewAtomCacheRef` on the following format follows:\n\n| 1                      | 1 \\| 2   | Length     |\n| ---------------------- | -------- | ---------- |\n| `InternalSegmentIndex` | `Length` | `AtomText` |\n\n`InternalSegmentIndex` together with the `SegmentIndex` completely identify the\nlocation of an atom cache entry in the atom cache. `Length` is the number of\nbytes that `AtomText` consists of. Length is a 2 byte big-endian integer if flag\n`LongAtoms` has been set, otherwise a 1 byte integer. When distribution flag\n[`DFLAG_UTF8_ATOMS`](erl_dist_protocol.md#DFLAG_UTF8_ATOMS) has been exchanged\nbetween both nodes in the\n[distribution handshake](erl_dist_protocol.md#distribution_handshake),\ncharacters in `AtomText` are encoded in UTF-8, otherwise in Latin-1. The\nfollowing `CachedAtomRef`s with the same `SegmentIndex` and\n`InternalSegmentIndex` as this `NewAtomCacheRef` refer to this atom until a new\n`NewAtomCacheRef` with the same `SegmentIndex` and `InternalSegmentIndex`\nappear.\n\nFor more information on encoding of atoms, see the\n[section on UTF-8 encoded atoms](erl_ext_dist.md#utf8_atoms) above.\n\nIf the `NewCacheEntryFlag` for the next `AtomCacheRef` has not been set, a\n`CachedAtomRef` on the following format follows:\n\n| 1                      |\n| ---------------------- |\n| `InternalSegmentIndex` |\n\n`InternalSegmentIndex` together with the `SegmentIndex` identify the location of\nthe atom cache entry in the atom cache. The atom corresponding to this\n`CachedAtomRef` is the latest `NewAtomCacheRef` preceding this `CachedAtomRef`\nin another previously passed distribution header.\n\n[](){: #fragments }","ref":"erl_ext_dist.html#normal-distribution-header"},{"type":"extras","title":"Distribution Header for fragmented messages - External Term Format","doc":"Messages sent between Erlang nodes can sometimes be quite large. Since OTP-22 it\nis possible to split large messages into smaller fragments in order to allow\nsmaller messages to be interleaved between larges messages. It is only the\n`message` part of each\n[distributed message](erl_dist_protocol.md#connected_nodes) that may be split\nusing fragmentation. Therefore it is recommended to use the\n[PAYLOAD control messages](erl_dist_protocol.md#new-ctrlmessages-for-erlang-otp-22)\nintroduced in OTP-22.\n\nFragmented distribution messages are only used if the receiving node signals\nthat it supports them via the\n[DFLAG_FRAGMENTS](erl_dist_protocol.md#DFLAG_FRAGMENTS) distribution flag.\n\nA process must complete the sending of a fragmented message before it can start\nsending any other message on the same distribution channel.\n\nThe start of a sequence of fragmented messages looks like this:\n\n| 1     | 1    | 8            | 8            | 1                       | NumberOfAtomCacheRefs/2+1 \\| 0 | N \\| 0          |\n| ----- | ---- | ------------ | ------------ | ----------------------- | ------------------------------ | --------------- |\n| `131` | `69` | `SequenceId` | `FragmentId` | `NumberOfAtomCacheRefs` | `Flags`                        | `AtomCacheRefs` |\n\nThe continuation of a sequence of fragmented messages looks like this:\n\n| 1     | 1    | 8            | 8            |\n| ----- | ---- | ------------ | ------------ |\n| `131` | `70` | `SequenceId` | `FragmentId` |\n\nThe starting distribution header is very similar to a non-fragmented\ndistribution header. The atom cache works the same as for normal distribution\nheader and is the same for the entire sequence. The additional fields added are\nthe sequence id and fragment id.\n\n- **Sequence ID** - The sequence id is used to uniquely identify a fragmented\n  message sent from one process to another on the same distributed connection.\n  This is used to identify which sequence a fragment is a part of as the same\n  process can be in the process of receiving multiple sequences at the same\n  time.\n\n  As one process can only be sending one fragmented message at once, it can be\n  convenient to use the local PID as the sequence id.\n\n- **Fragments ID** - The Fragment ID is used to number the fragments in a\n  sequence. The id starts at the total number of fragments and then decrements\n  to 1 (which is the final fragment). So if a sequence consists of 3 fragments\n  the fragment id in the starting header will be 3, and then fragments 2 and 1\n  are sent.\n\n  The fragments must be delivered in the correct order, so if an unordered\n  distribution carrier is used, they must be ordered before delivered to the\n  Erlang run-time.\n\n#### Example:\n\nAs an example, let say that we want to send\n`{call, <0.245.2>, {set_get_state, <<0:1024>>}}` to registered process `reg`\nusing a fragment size of 128. To send this message we need a distribution\nheader, atom cache updates, the control message (which would be\n`{6, <0.245.2>, [], reg}` in this case) and finally the actual message. This\nwould all be encoded into:\n\n```text\n131,69,0,0,2,168,0,0,5,83,0,0,0,0,0,0,0,2,               %% Header with seq and frag id\n5,4,137,9,10,5,236,3,114,101,103,9,4,99,97,108,108,      %% Atom cache updates\n238,13,115,101,116,95,103,101,116,95,115,116,97,116,101,\n104,4,97,6,103,82,0,0,0,0,85,0,0,0,0,2,82,1,82,2,        %% Control message\n104,3,82,3,103,82,0,0,0,0,245,0,0,0,2,2,                 %% Actual message using cached atoms\n104,2,82,4,109,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n\n131,70,0,0,2,168,0,0,5,83,0,0,0,0,0,0,0,1,               %% Cont Header with seq and frag id\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,               %% Rest of payload\n0,0,0,0\n```\n\nLet us break that apart into its components. First we have the distribution\nheader tags together with the sequence id and a fragment id of 2.\n\n```text\n131,69,                   %% Start fragment header\n0,0,2,168,0,0,5,83,       %% The sequence ID\n0,0,0,0,0,0,0,2,           %% The fragment ID\n```\n\nThen we have the updates to the atom cache:\n\n```text\n5,4,137,9,  %% 5 atoms and their flags\n10,5,       %% The already cached atom ids\n236,3,114,101,103,  %% The atom 'reg'\n9,4,99,97,108,108,  %% The atom 'call'\n238,13,115,101,116,95,103,101,116,95,115,116,97,116,101, %% The atom 'set_get_state'\n```\n\nThe first byte says that we have 5 atoms that are part of the cache. Then\nfollows three bytes that are the atom cache ref flags. Each of the flags uses 4\nbits so they are a bit hard to read in decimal byte form. In binary half-byte\nform they look like this:\n\n```text\n0000, 0100, 1000, 1001, 1001\n```\n\nAs the high bit of the first two atoms in the cache are not set we know that\nthey are already in the cache, so they do not have to be sent again (this is the\nnode name of the receiving and sending node). Then follows the atoms that have\nto be sent, together with their segment ids.\n\nThen the listing of the atoms comes, starting with 10 and 5 which are the atom\nrefs of the already cached atoms. Then the new atoms are sent.\n\nWhen the atom cache is setup correctly the control message is sent.\n\n```text\n104,4,97,6,103,82,0,0,0,0,85,0,0,0,0,2,82,1,82,2,\n```\n\nNote that up until here it is not allowed to fragments the message. The entire\natom cache and control message has to be part of the starting fragment. After\nthe control message the payload of the message is sent using 128 bytes:\n\n```text\n104,3,82,3,103,82,0,0,0,0,245,0,0,0,2,2,\n104,2,82,4,109,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n```\n\nSince the payload is larger than 128-bytes it is split into two fragments. The\nsecond fragment does not have any atom cache update instructions so it is a lot\nsimpler:\n\n```text\n131,70,0,0,2,168,0,0,5,83,0,0,0,0,0,0,0,1, %% Continuation dist header 70 with seq and frag id\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, %% remaining payload\n0,0,0,0\n```\n\n> #### Note {: .info }\n>\n> The fragment size of 128 is only used as an example. Any fragments size may be\n> used when sending fragmented messages.","ref":"erl_ext_dist.html#distribution-header-for-fragmented-messages"},{"type":"extras","title":"ATOM_CACHE_REF - External Term Format","doc":"| 1    | 1                         |\n| ---- | ------------------------- |\n| `82` | `AtomCacheReferenceIndex` |\n\nRefers to the atom with `AtomCacheReferenceIndex` in the\n[distribution header](erl_ext_dist.md#distribution-header).","ref":"erl_ext_dist.html#atom_cache_ref"},{"type":"extras","title":"SMALL_INTEGER_EXT - External Term Format","doc":"| 1    | 1     |\n| ---- | ----- |\n| `97` | `Int` |\n\nUnsigned 8-bit integer.","ref":"erl_ext_dist.html#small_integer_ext"},{"type":"extras","title":"INTEGER_EXT - External Term Format","doc":"| 1    | 4     |\n| ---- | ----- |\n| `98` | `Int` |\n\nSigned 32-bit integer in big-endian format.","ref":"erl_ext_dist.html#integer_ext"},{"type":"extras","title":"FLOAT_EXT - External Term Format","doc":"| 1    | 31             |\n| ---- | -------------- |\n| `99` | `Float string` |\n\nA finite float (i.e. not inf, -inf or NaN) is stored in string format. The\nformat used in sprintf to format the float is \"%.20e\" (there are more bytes\nallocated than necessary). To unpack the float, use sscanf with format \"%lf\".\n\nThis term is used in minor version 0 of the external format; it has been\nsuperseded by [`NEW_FLOAT_EXT`](erl_ext_dist.md#new_float_ext).","ref":"erl_ext_dist.html#float_ext"},{"type":"extras","title":"PORT_EXT - External Term Format","doc":"| 1     | N      | 4    | 1          |\n| ----- | ------ | ---- | ---------- |\n| `102` | `Node` | `ID` | `Creation` |\n\nSame as [`NEW_PORT_EXT`](erl_ext_dist.md#new_port_ext) except the `Creation`\nfield is only one byte and only two bits are significant, the rest are to be 0.","ref":"erl_ext_dist.html#port_ext"},{"type":"extras","title":"NEW_PORT_EXT - External Term Format","doc":"| 1    | N      | 4    | 4          |\n| ---- | ------ | ---- | ---------- |\n| `89` | `Node` | `ID` | `Creation` |\n\nSame as [`V4_PORT_EXT`](erl_ext_dist.md#v4_port_ext) except the `ID` field is\nonly four bytes. Only 28 bits are significant; the rest are to be 0.\n\n`NEW_PORT_EXT` was introduced in OTP 19, but only to be decoded and echoed back.\nNot encoded for local ports.\n\nIn OTP 23 distribution flag\n[`DFLAG_BIG_CREATION`](erl_dist_protocol.md#DFLAG_BIG_CREATION) became\nmandatory. All ports are now encoded using `NEW_PORT_EXT`, even external ports\nreceived as [`PORT_EXT`](erl_ext_dist.md#port_ext) from older nodes.","ref":"erl_ext_dist.html#new_port_ext"},{"type":"extras","title":"V4_PORT_EXT - External Term Format","doc":"| 1     | N      | 8    | 4          |\n| ----- | ------ | ---- | ---------- |\n| `120` | `Node` | `ID` | `Creation` |\n\nEncodes a port identifier (obtained from `erlang:open_port/2`). `Node` is the\noriginating node, [encoded as an atom](erl_ext_dist.md#utf8_atoms). `ID` is a\n64-bit big endian unsigned integer. The `Creation` works just like in\n[`NEW_PID_EXT`](erl_ext_dist.md#new_pid_ext). Port operations are not allowed\nacross node boundaries.\n\nIn OTP 26 distribution flag [`DFLAG_V4_NC`](erl_dist_protocol.md#DFLAG_V4_NC) as\nwell as `V4_PORT_EXT` became mandatory accepting full 64-bit ports to be decoded\nand echoed back.","ref":"erl_ext_dist.html#v4_port_ext"},{"type":"extras","title":"PID_EXT - External Term Format","doc":"| 1     | N      | 4    | 4        | 1          |\n| ----- | ------ | ---- | -------- | ---------- |\n| `103` | `Node` | `ID` | `Serial` | `Creation` |\n\nSame as [`NEW_PID_EXT`](erl_ext_dist.md#new_pid_ext) except the `Creation` field\nis only one byte and only two bits are significant, the rest are to be 0.","ref":"erl_ext_dist.html#pid_ext"},{"type":"extras","title":"NEW_PID_EXT - External Term Format","doc":"| 1    | N      | 4    | 4        | 4          |\n| ---- | ------ | ---- | -------- | ---------- |\n| `88` | `Node` | `ID` | `Serial` | `Creation` |\n\nEncodes an Erlang process identifier object.\n\n- **`Node`** - The name of the originating node,\n  [encoded as an atom](erl_ext_dist.md#utf8_atoms).\n\n- **`ID`** - A 32-bit big endian unsigned integer.\n\n- **`Serial`** - A 32-bit big endian unsigned integer.\n\n- **`Creation`** - A 32-bit big endian unsigned integer. All identifiers\n  originating from the same node incarnation must have identical `Creation`\n  values. This makes it possible to separate identifiers from old (crashed)\n  nodes from a new one. The value zero is reserved and must be avoided for\n  normal operations.\n\n`NEW_PID_EXT` was introduced in OTP 19, but only to be decoded and echoed back.\nNot encoded for local processes.\n\nIn OTP 23 distribution flag\n[`DFLAG_BIG_CREATION`](erl_dist_protocol.md#DFLAG_BIG_CREATION) became\nmandatory. All pids are now encoded using `NEW_PID_EXT`, even external pids\nreceived as [`PID_EXT`](erl_ext_dist.md#pid_ext) from older nodes.\n\nIn OTP 26 distribution flag [`DFLAG_V4_NC`](erl_dist_protocol.md#DFLAG_V4_NC)\nbecame mandatory accepting full 64-bit pids to be decoded and echoed back.","ref":"erl_ext_dist.html#new_pid_ext"},{"type":"extras","title":"SMALL_TUPLE_EXT - External Term Format","doc":"| 1     | 1       | N          |\n| ----- | ------- | ---------- |\n| `104` | `Arity` | `Elements` |\n\nEncodes a tuple. The `Arity` field is an unsigned byte that determines how many\nelements that follows in section `Elements`.","ref":"erl_ext_dist.html#small_tuple_ext"},{"type":"extras","title":"LARGE_TUPLE_EXT - External Term Format","doc":"| 1     | 4       | N          |\n| ----- | ------- | ---------- |\n| `105` | `Arity` | `Elements` |\n\nSame as [`SMALL_TUPLE_EXT`](erl_ext_dist.md#small_tuple_ext) except that `Arity`\nis an unsigned 4 byte integer in big-endian format.","ref":"erl_ext_dist.html#large_tuple_ext"},{"type":"extras","title":"MAP_EXT - External Term Format","doc":"| 1     | 4       | N       |\n| ----- | ------- | ------- |\n| `116` | `Arity` | `Pairs` |\n\nEncodes a map. The `Arity` field is an unsigned 4 byte integer in big-endian\nformat that determines the number of key-value pairs in the map. Key and value\npairs (`Ki => Vi`) are encoded in section `Pairs` in the following order:\n`K1, V1, K2, V2,..., Kn, Vn`. Duplicate keys are _not allowed_ within the same\nmap.\n\n*As from *Erlang/OTP 17.0","ref":"erl_ext_dist.html#map_ext"},{"type":"extras","title":"NIL_EXT - External Term Format","doc":"| 1     |\n| ----- |\n| `106` |\n\nThe representation for an empty list, that is, the Erlang syntax `[]`.","ref":"erl_ext_dist.html#nil_ext"},{"type":"extras","title":"STRING_EXT - External Term Format","doc":"| 1     | 2        | Len          |\n| ----- | -------- | ------------ |\n| `107` | `Length` | `Characters` |\n\nString does _not_ have a corresponding Erlang representation, but is an\noptimization for sending lists of bytes (integer in the range 0-255) more\nefficiently over the distribution. As field `Length` is an unsigned 2 byte\ninteger (big-endian), implementations must ensure that lists longer than 65535\nelements are encoded as [`LIST_EXT`](erl_ext_dist.md#list_ext).","ref":"erl_ext_dist.html#string_ext"},{"type":"extras","title":"LIST_EXT - External Term Format","doc":"| 1     | 4        |            |        |\n| ----- | -------- | ---------- | ------ |\n| `108` | `Length` | `Elements` | `Tail` |\n\n`Length` is the number of elements that follows in section `Elements`. `Tail` is\nthe final tail of the list; it is [`NIL_EXT`](erl_ext_dist.md#nil_ext) for a\nproper list, but can be any type if the list is improper (for example, `[a|b]`).","ref":"erl_ext_dist.html#list_ext"},{"type":"extras","title":"BINARY_EXT - External Term Format","doc":"| 1     | 4     | Len    |\n| ----- | ----- | ------ |\n| `109` | `Len` | `Data` |\n\nBinaries are generated with bit syntax expression or with\n`erlang:list_to_binary/1`, `erlang:term_to_binary/1`, or as input from binary\nports. The `Len` length field is an unsigned 4 byte integer (big-endian).","ref":"erl_ext_dist.html#binary_ext"},{"type":"extras","title":"SMALL_BIG_EXT - External Term Format","doc":"| 1     | 1   | 1      | n                   |\n| ----- | --- | ------ | ------------------- |\n| `110` | `n` | `Sign` | `d(0)` ... `d(n-1)` |\n\nBignums are stored in unary form with a `Sign` byte, that is, 0 if the bignum is\npositive and 1 if it is negative. The digits are stored with the least\nsignificant byte stored first. To calculate the integer, the following formula\ncan be used:\n\n```\nB = 256\n(d0*B^0 + d1*B^1 + d2*B^2 + ... d(N-1)*B^(n-1))\n```","ref":"erl_ext_dist.html#small_big_ext"},{"type":"extras","title":"LARGE_BIG_EXT - External Term Format","doc":"| 1     | 4   | 1      | n                   |\n| ----- | --- | ------ | ------------------- |\n| `111` | `n` | `Sign` | `d(0)` ... `d(n-1)` |\n\nSame as [`SMALL_BIG_EXT`](erl_ext_dist.md#small_big_ext) except that the length\nfield is an unsigned 4 byte integer.","ref":"erl_ext_dist.html#large_big_ext"},{"type":"extras","title":"REFERENCE_EXT (deprecated) - External Term Format","doc":"| 1     | N      | 4    | 1          |\n| ----- | ------ | ---- | ---------- |\n| `101` | `Node` | `ID` | `Creation` |\n\nThe same as [`NEW_REFERENCE_EXT`](erl_ext_dist.md#new_reference_ext) except `ID`\nis only one word (`Len` = 1).","ref":"erl_ext_dist.html#reference_ext-deprecated"},{"type":"extras","title":"NEW_REFERENCE_EXT - External Term Format","doc":"| 1     | 2     | N      | 1          | N'       |\n| ----- | ----- | ------ | ---------- | -------- |\n| `114` | `Len` | `Node` | `Creation` | `ID ...` |\n\nThe same as [`NEWER_REFERENCE_EXT`](erl_ext_dist.md#newer_reference_ext)\n_except_:\n\n- **`ID`** - In the first word (4 bytes) of `ID`, only 18 bits are significant,\n  the rest must be 0.\n\n- **`Creation`** - Only one byte long and only two bits are significant, the\n  rest must be 0.","ref":"erl_ext_dist.html#new_reference_ext"},{"type":"extras","title":"NEWER_REFERENCE_EXT - External Term Format","doc":"| 1    | 2     | N      | 4          | N'       |\n| ---- | ----- | ------ | ---------- | -------- |\n| `90` | `Len` | `Node` | `Creation` | `ID ...` |\n\nEncodes a reference term generated with `erlang:make_ref/0`.\n\n- **`Node`** - The name of the originating node,\n  [encoded as an atom](erl_ext_dist.md#utf8_atoms).\n\n- **`Len`** - A 16-bit big endian unsigned integer not larger than 5.\n\n- **`ID`** - A sequence of `Len` big-endian unsigned integers (4 bytes each, so\n  `N'` = 4 \\* `Len`), but is to be regarded as uninterpreted data.\n\n- **`Creation`** - Works just like in\n  [`NEW_PID_EXT`](erl_ext_dist.md#new_pid_ext).\n\n`NEWER_REFERENCE_EXT` was introduced in OTP 19, but only to be decoded and\nechoed back. Not encoded for local references.\n\nIn OTP 23 distribution flag\n[`DFLAG_BIG_CREATION`](erl_dist_protocol.md#DFLAG_BIG_CREATION) became\nmandatory. All references are now encoded using `NEWER_REFERENCE_EXT`, even\nexternal references received as\n[`NEW_REFERENCE_EXT`](erl_ext_dist.md#new_reference_ext) from older nodes.\n\nIn OTP 26 distribution flag [`DFLAG_V4_NC`](erl_dist_protocol.md#DFLAG_V4_NC)\nbecame mandatory. References now can contain up to 5 `ID` words.","ref":"erl_ext_dist.html#newer_reference_ext"},{"type":"extras","title":"FUN_EXT (removed) - External Term Format","doc":"| 1     | 4         | N1    | N2       | N3      | N4     | N5              |\n| ----- | --------- | ----- | -------- | ------- | ------ | --------------- |\n| `117` | `NumFree` | `Pid` | `Module` | `Index` | `Uniq` | `Free vars ...` |\n\nNot emitted since OTP R8, and not decoded since OTP 23.","ref":"erl_ext_dist.html#fun_ext-removed"},{"type":"extras","title":"NEW_FUN_EXT - External Term Format","doc":"| 1     | 4      | 1       | 16     | 4       | 4         | N1       | N2         | N3        | N4    | N5          |\n| ----- | ------ | ------- | ------ | ------- | --------- | -------- | ---------- | --------- | ----- | ----------- |\n| `112` | `Size` | `Arity` | `Uniq` | `Index` | `NumFree` | `Module` | `OldIndex` | `OldUniq` | `Pid` | `Free Vars` |\n\nThis is the encoding of internal funs: `fun F/A` and `fun(Arg1,..) -> ... end`.\n\n- **`Size`** - The total number of bytes, including field `Size`.\n\n- **`Arity`** - The arity of the function implementing the fun.\n\n- **`Uniq`** - The 16 bytes MD5 of the significant parts of the Beam file.\n\n- **`Index`** - An index number. Each fun within a module has an unique index.\n  `Index` is stored in big-endian byte order.\n\n- **`NumFree`** - The number of free variables.\n\n- **`Module`** - The module that the fun is implemented in,\n  [encoded as an atom](erl_ext_dist.md#utf8_atoms).\n\n- **`OldIndex`** - An integer encoded using\n  [`SMALL_INTEGER_EXT`](erl_ext_dist.md#small_integer_ext) or\n  [`INTEGER_EXT`](erl_ext_dist.md#integer_ext). Is typically a small index into\n  the module's fun table.\n\n- **`OldUniq`** - An integer encoded using\n  [`SMALL_INTEGER_EXT`](erl_ext_dist.md#small_integer_ext) or\n  [`INTEGER_EXT`](erl_ext_dist.md#integer_ext). `Uniq` is the hash value of the\n  parse tree for the fun.\n\n- **`Pid`** - A process identifier as in [`PID_EXT`](erl_ext_dist.md#pid_ext).\n  Represents the process in which the fun was created.\n\n- **`Free vars`** - `NumFree` number of terms, each one encoded according to its\n  type.","ref":"erl_ext_dist.html#new_fun_ext"},{"type":"extras","title":"EXPORT_EXT - External Term Format","doc":"| 1     | N1       | N2         | N3      |\n| ----- | -------- | ---------- | ------- |\n| `113` | `Module` | `Function` | `Arity` |\n\nThis term is the encoding for external funs: `fun M:F/A`.\n\n`Module` and `Function` are [encoded as atoms](erl_ext_dist.md#utf8_atoms).\n\n`Arity` is an integer encoded using\n[`SMALL_INTEGER_EXT`](erl_ext_dist.md#small_integer_ext).","ref":"erl_ext_dist.html#export_ext"},{"type":"extras","title":"BIT_BINARY_EXT - External Term Format","doc":"| 1    | 4     | 1      | Len    |\n| ---- | ----- | ------ | ------ |\n| `77` | `Len` | `Bits` | `Data` |\n\nThis term represents a bitstring whose length in bits does not have to be a\nmultiple of 8. The `Len` field is an unsigned 4 byte integer (big-endian). The\n`Bits` field is the number of bits (1-8) that are used in the last byte in the\ndata field, counting from the most significant bit to the least significant.","ref":"erl_ext_dist.html#bit_binary_ext"},{"type":"extras","title":"NEW_FLOAT_EXT - External Term Format","doc":"| 1    | 8            |\n| ---- | ------------ |\n| `70` | `IEEE float` |\n\nA finite float (i.e. not inf, -inf or NaN) is stored as 8 bytes in big-endian\nIEEE format.\n\nThis term is used in minor version 1 of the external format.","ref":"erl_ext_dist.html#new_float_ext"},{"type":"extras","title":"ATOM_UTF8_EXT - External Term Format","doc":"| 1     | 2     | Len        |\n| ----- | ----- | ---------- |\n| `118` | `Len` | `AtomName` |\n\nAn atom is stored with a 2 byte unsigned length in big-endian order, followed by\n`Len` bytes containing the `AtomName` encoded in UTF-8.\n\nFor more information, see the\n[section on encoding atoms](erl_ext_dist.md#utf8_atoms) in the beginning of this\npage.","ref":"erl_ext_dist.html#atom_utf8_ext"},{"type":"extras","title":"SMALL_ATOM_UTF8_EXT - External Term Format","doc":"| 1     | 1     | Len        |\n| ----- | ----- | ---------- |\n| `119` | `Len` | `AtomName` |\n\nAn atom is stored with a 1 byte unsigned length, followed by `Len` bytes\ncontaining the `AtomName` encoded in UTF-8. Longer atoms encoded in UTF-8 can be\nrepresented using [`ATOM_UTF8_EXT`](erl_ext_dist.md#atom_utf8_ext).\n\nFor more information, see the\n[section on encoding atoms](erl_ext_dist.md#utf8_atoms) in the beginning of this\npage.\n\n[](){: #atom_ext }","ref":"erl_ext_dist.html#small_atom_utf8_ext"},{"type":"extras","title":"ATOM_EXT (deprecated) - External Term Format","doc":"| 1     | 2     | Len        |\n| ----- | ----- | ---------- |\n| `100` | `Len` | `AtomName` |\n\nAn atom is stored with a 2 byte unsigned length in big-endian order, followed by\n`Len` numbers of 8-bit Latin-1 characters that forms the `AtomName`. The maximum\nallowed value for `Len` is 255.\n\n[](){: #small_atom_ext }","ref":"erl_ext_dist.html#atom_ext-deprecated"},{"type":"extras","title":"SMALL_ATOM_EXT (deprecated) - External Term Format","doc":"| 1     | 1     | Len        |\n| ----- | ----- | ---------- |\n| `115` | `Len` | `AtomName` |\n\nAn atom is stored with a 1 byte unsigned length, followed by `Len` numbers of\n8-bit Latin-1 characters that forms the `AtomName`.\n\n> #### Note {: .info }\n>\n> `SMALL_ATOM_EXT` was introduced in ERTS 5.7.2 and require an exchange of\n> distribution flag\n> [`DFLAG_SMALL_ATOM_TAGS`](erl_dist_protocol.md#DFLAG_SMALL_ATOM_TAGS) in the\n> [distribution handshake](erl_dist_protocol.md#distribution_handshake).","ref":"erl_ext_dist.html#small_atom_ext-deprecated"},{"type":"extras","title":"LOCAL_EXT - External Term Format","doc":"| 1     | ... |\n| ----- | --- |\n| `121` | ... |\n\nMarks that this is encoded on an alternative local external term format intended\nto only be decoded by a specific local decoder. The bytes following from here on\nmay contain any unspecified type of encoding of terms. It is the responsibility\nof the user to only attempt to decode terms on the local external term format\nwhich has been produced by a matching encoder.\n\nThis tag is used by the Erlang runtime system upon encoding the local external\nterm format when the [`local`](`m:erlang#term_to_binary_local`) option is passed\nto [`term_to_binary/2`](`erlang:term_to_binary/2`), but can be used by other\nencoders as well providing similar functionality. The Erlang runtime system adds\na hash immediately following the `LOCAL_EXT` tag which is verified on decoding\nin order to verify that encoder and decoder match which might be a good\npractice. This will very likely catch mistakes made by users, but is not\nguaranteed to, and is not intended to, prevent decoding of an intentionally\nforged encoding on the local external term format.\n\n`LOCAL_EXT` was introduced in OTP 26.0.","ref":"erl_ext_dist.html#local_ext"},{"type":"extras","title":"Distribution Protocol","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Distribution Protocol\n\nThis description is far from complete. It will be updated if the protocol is\nupdated. However, the protocols, both from Erlang nodes to the Erlang Port\nMapper Daemon (EPMD) and between Erlang nodes are stable since many years.\n\nThe distribution protocol can be divided into four parts:\n\n- Low-level socket connection (1)\n- Handshake, interchange node name, and authenticate (2)\n- Authentication (done by `m:net_kernel`) (3)\n- Connected (4)\n\nA node fetches the port number of another node through the EPMD (at the other\nhost) to initiate a connection request.\n\nFor each host, where a distributed Erlang node is running, also an EPMD is to be\nrunning. The EPMD can be started explicitly or automatically as a result of the\nErlang node startup.\n\nBy default the EPMD listens on port 4369.\n\n(3) and (4) above are performed at the same level but the `net_kernel`\ndisconnects the other node if it communicates using an invalid cookie (after 1\nsecond).\n\nThe integers in all multibyte fields are in big-endian order.\n\n> #### Warning {: .warning }\n>\n> The Erlang Distribution protocol is not by itself secure and does not aim to\n> be so. In order to get secure distribution the distributed nodes should be\n> configured to use distribution over tls. See the\n> [Using SSL for Erlang Distribution](`e:ssl:ssl_distribution.md`) User's Guide\n> for details on how to setup a secure distributed node.","ref":"erl_dist_protocol.html"},{"type":"extras","title":"EPMD Protocol - Distribution Protocol","doc":"The EPMD Protocol supports various tasks:\n\n- Registering a Node\n- Unregistering a Node\n- Getting the Distributing Port of Another Node\n- Getting all Registered Names\n- Dumping all Data from EPMD\n- Killing EPMD\n- `STOP_REQ` (Not Used)\n\nThe requests served by the EPMD for these tasks are summarized in the following figure.\n\n```mermaid\n---\ntitle: Summary of EPMD Requests\n---\n\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n\n    Note over EPMD: Register a Node in EPMD\n    client ->> EPMD: ALIVE2_REQ\n    alt\n        EPMD -->> client: ALIVE2_X_RESP\n    else\n        EPMD -->> client: ALIVE2_RESP\n    end\n\n    Note over EPMD: Unregister a Node in EPMD\n    client ->> EPMD: ALIVE_CLOSE_REQ\n\n    Note over client: Get the Distribution Port of Another Node\n    client ->> EPMD: PORT_PLEASE2_REQ\n    EPMD -->> client: PORT2_RESP\n\n    Note over client: Get All Registered Names from EPMD\n    client ->> EPMD: NAMES_REQ\n    EPMD -->> client: NAMES_RESP\n\n    Note over EPMD: Dump all Data from EPMD\n    client ->> EPMD: DUMP_REQ\n    EPMD -->> client: DUMP_RESP\n\n    Note over EPMD: Kill EPMD\n    client ->> EPMD: KILL_REQ\n    EPMD -->> client: KILL_RESP\n\n    Note over EPMD: STOP_REQ (Not Used)\n    client ->> EPMD: STOP_REQ\n    EPMD -->> client: STOP_OK_RESP\n    EPMD -->> client: STOP_NOTOK_RESP\n```\n\nEach request `*_REQ` is preceded by a 2 byte length field. Thus, the overall\nrequest format is as follows:\n\n| 2        | n         |\n| -------- | --------- |\n| `Length` | `Request` |\n\n_Table: Request Format_","ref":"erl_dist_protocol.html#epmd-protocol"},{"type":"extras","title":"Register a Node in EPMD - Distribution Protocol","doc":"When a distributed node is started it registers itself in the EPMD. The message\n`ALIVE2_REQ` described below is sent from the node to the EPMD. The response\nfrom the EPMD is `ALIVE2_X_RESP` (or `ALIVE2_RESP`):\n\n```mermaid\n---\ntitle: Register a Node in EPMD\n---\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n\n    client ->> EPMD: ALIVE2_REQ\n    alt\n        EPMD -->> client: ALIVE2_X_RESP\n    else\n        EPMD -->> client: ALIVE2_RESP\n    end\n```\n\n| 1     | 2        | 1          | 1          | 2                | 2               | 2      | Nlen       | 2      | Elen    |\n| ----- | -------- | ---------- | ---------- | ---------------- | --------------- | ------ | ---------- | ------ | ------- |\n| `120` | `PortNo` | `NodeType` | `Protocol` | `HighestVersion` | `LowestVersion` | `Nlen` | `NodeName` | `Elen` | `Extra` |\n\n_Table: ALIVE2_REQ (120)_\n\n- **`PortNo`** - The port number on which the node accept connection requests.\n\n- **`NodeType`** - 77 = normal Erlang node, 72 = hidden node (C-node), ...\n\n- **`Protocol`** - 0 = TCP/IPv4, ...\n\n- **`HighestVersion`** - The highest distribution protocol version this node can\n  handle. The value in OTP 23 and later is 6. Older nodes only support\n  version 5.\n\n- **`LowestVersion`** - The lowest distribution version that this node can\n  handle. The value in OTP 25 and later is 6 as support for connections to nodes\n  older than OTP 23 has been dropped.\n\n- **`Nlen`** - The length (in bytes) of field `NodeName`.\n\n- **`NodeName`** - The node name as an UTF-8 encoded string of `Nlen` bytes.\n\n- **`Elen`** - The length of field `Extra`.\n\n- **`Extra`** - Extra field of `Elen` bytes.\n\nThe connection created to the EPMD must be kept as long as the node is a\ndistributed node. When the connection is closed, the node is automatically\nunregistered from the EPMD.\n\nThe response message is either `ALIVE2_X_RESP` or `ALIVE2_RESP` depending on\ndistribution version. If both the node and EPMD support distribution version 6\nthen the response is `ALIVE2_X_RESP` otherwise it is the older `ALIVE2_RESP`:\n\n| 1     | 1        | 4          |\n| ----- | -------- | ---------- |\n| `118` | `Result` | `Creation` |\n\n_Table: ALIVE2_X_RESP (118) with 32 bit creation_\n\n| 1     | 1        | 2          |\n| ----- | -------- | ---------- |\n| `121` | `Result` | `Creation` |\n\n_Table: ALIVE2_RESP (121) with 16-bit creation_\n\nResult = 0 -> ok, result > 0 -> error.","ref":"erl_dist_protocol.html#register-a-node-in-epmd"},{"type":"extras","title":"Unregister a Node from EPMD - Distribution Protocol","doc":"A node unregisters itself from the EPMD by closing the TCP connection to EPMD\nestablished when the node was registered:\n\n```mermaid\n---\ntitle: Register a Node in EPMD\n---\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n    \n    client ->> EPMD: ALIVE_CLOSE_REQ\n```","ref":"erl_dist_protocol.html#unregister-a-node-from-epmd"},{"type":"extras","title":"Get the Distribution Port of Another Node - Distribution Protocol","doc":"When one node wants to connect to another node it starts with a\n`PORT_PLEASE2_REQ` request to the EPMD on the host where the node resides to get\nthe distribution port that the node listens to:\n\n```mermaid\n---\ntitle: Get the Distribution Port of Another Node\n---\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n    \n    client ->> EPMD: PORT_PLEASE2_REQ\n    EPMD -->> client: PORT2_RESP\n```\n\n\n| 1     | N          |\n| ----- | ---------- |\n| `122` | `NodeName` |\n\n_Table: PORT_PLEASE2_REQ (122)_\n\nwhere N = `Length` \\- 1.\n\n| 1     | 1        |\n| ----- | -------- |\n| `119` | `Result` |\n\n_Table: PORT2_RESP (119) Response Indicating Error, Result > 0_\n\nor\n\n| 1     | 1        | 2        | 1          | 1          | 2                | 2               | 2      | Nlen       | 2      | Elen     |\n| ----- | -------- | -------- | ---------- | ---------- | ---------------- | --------------- | ------ | ---------- | ------ | -------- |\n| `119` | `Result` | `PortNo` | `NodeType` | `Protocol` | `HighestVersion` | `LowestVersion` | `Nlen` | `NodeName` | `Elen` | >`Extra` |\n\n_Table: PORT2_RESP, Result = 0_\n\nIf `Result` > 0, the packet only consists of `[119, Result]`.\n\nThe EPMD closes the socket when it has sent the information.","ref":"erl_dist_protocol.html#get-the-distribution-port-of-another-node"},{"type":"extras","title":"Get All Registered Names from EPMD - Distribution Protocol","doc":"This request is used through the Erlang function\n[`net_adm:names/1,2`](`net_adm:names/1`). A TCP connection is opened to the EPMD\nand this request is sent:\n\n```mermaid\n---\ntitle: Get All Registered Names from EPMD\n---\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n    \n    client ->> EPMD: NAMES_REQ\n    EPMD -->> client: NAMES_RESP\n```\n\n| 1     |\n| ----- |\n| `110` |\n\n_Table: NAMES_REQ (110)_\n\nThe response for a `NAMES_REQ` is as follows:\n\n| 4            |             |\n| ------------ | ----------- |\n| `EPMDPortNo` | `NodeInfo*` |\n\n_Table: NAMES_RESP_\n\n`NodeInfo` is a string written for each active node. When all `NodeInfo` has\nbeen written the connection is closed by the EPMD.\n\n`NodeInfo` is, as expressed in Erlang:\n\n```erlang\nio:format(\"name ~ts at port ~p~n\", [NodeName, Port]).\n```","ref":"erl_dist_protocol.html#get-all-registered-names-from-epmd"},{"type":"extras","title":"Dump All Data from EPMD - Distribution Protocol","doc":"This request is not really used, it is to be regarded as a debug feature.\n\n```mermaid\n---\ntitle: Dump All Data from EPMD\n---\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n    \n    client ->> EPMD: DUMP_REQ\n    EPMD -->> client: DUMP_RESP\n```\n\n\n| 1     |\n| ----- |\n| `100` |\n\n_Table: DUMP_REQ_\n\nThe response for a `DUMP_REQ` is as follows:\n\n| 4            |             |\n| ------------ | ----------- |\n| `EPMDPortNo` | `NodeInfo*` |\n\n_Table: DUMP_RESP_\n\n`NodeInfo` is a string written for each node kept in the EPMD. When all\n`NodeInfo` has been written the connection is closed by the EPMD.\n\n`NodeInfo` is, as expressed in Erlang:\n\n```erlang\nio:format(\"active name     ~ts at port ~p, fd = ~p~n\",\n          [NodeName, Port, Fd]).\n```\n\nor\n\n```erlang\nio:format(\"old/unused name ~ts at port ~p, fd = ~p ~n\",\n          [NodeName, Port, Fd]).\n```","ref":"erl_dist_protocol.html#dump-all-data-from-epmd"},{"type":"extras","title":"Kill EPMD - Distribution Protocol","doc":"This request kills the running EPMD. It is almost never used.\n\n```mermaid\n---\ntitle: Kill EPMD\n---\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n    \n    client ->> EPMD: KILL_REQ\n    EPMD -->> client: KILL_RESP\n```\n\n| 1     |\n| ----- |\n| `107` |\n\n_Table: KILL_REQ_\n\nThe response for a `KILL_REQ` is as follows:\n\n| 2          |\n| ---------- |\n| `OKString` |\n\n_Table: KILL_RESP_\n\nwhere `OKString` is \"OK\".","ref":"erl_dist_protocol.html#kill-epmd"},{"type":"extras","title":"STOP_REQ (Not Used) - Distribution Protocol","doc":"```mermaid\n---\ntitle: STOP_REQ (Not Used)\n---\nsequenceDiagram\n    participant client as Client (or Node)\n    participant EPMD\n    \n    client ->> EPMD: STOP_REQ\n    EPMD -->> client: STOP_OK_RESP\n    EPMD -->> client: STOP_NOTOK_RESP\n```\n\n| 1     | n          |\n| ----- | ---------- |\n| `115` | `NodeName` |\n\n_Table: STOP_REQ_\n\nwhere n = `Length` \\- 1.\n\nThe response for a `STOP_REQ` is as follows:\n\n| 7          |\n| ---------- |\n| `OKString` |\n\n_Table: STOP_RESP_\n\nwhere `OKString` is \"STOPPED\".\n\nA negative response can look as follows:\n\n| 7           |\n| ----------- |\n| `NOKString` |\n\n_Table: STOP_NOTOK_RESP_\n\nwhere `NOKString` is \"NOEXIST\".\n\n[](){: #distribution_handshake }","ref":"erl_dist_protocol.html#stop_req-not-used"},{"type":"extras","title":"Distribution Handshake - Distribution Protocol","doc":"This section describes the distribution handshake protocol used between nodes to\nestablishing a connection. The protocol was introduced in Erlang/OTP R6 and\namended in OTP 23. From OTP 25 support for the older protocol was dropped.\nTherefore an OTP 25 node can not connect to nodes older than OTP 23. This\ndocumentation only decribes the part of the protocol used by OTP 25.\n\n> #### Note {: .info }\n>\n> A bug introduced in OTP 25.0 may cause OTP 25 nodes to reject connection\n> attempts from OTP 23 and 24 nodes that are not using `epmd` to gain version\n> information about the remote node. This is fixed in OTP 25.3.","ref":"erl_dist_protocol.html#distribution-handshake"},{"type":"extras","title":"General - Distribution Protocol","doc":"The TCP/IP distribution uses a handshake that expects a connection-based\nprotocol, that is, the protocol does not include any authentication after the\nhandshake procedure.\n\nThis is not entirely safe, as it is vulnerable against takeover attacks, but it\nis a tradeoff between fair safety and performance.\n\nThe cookies are never sent in cleartext and the handshake procedure expects the\nclient (called `A`) to be the first one to prove that it can generate a\nsufficient digest. The digest is generated with the MD5 message digest algorithm\nand the challenges are expected to be random numbers.","ref":"erl_dist_protocol.html#general"},{"type":"extras","title":"Definitions - Distribution Protocol","doc":"A challenge is a 32-bit integer in big-endian order. Below the function\n`gen_challenge()` returns a random 32-bit integer used as a challenge.\n\nA digest is a (16 bytes) MD5 hash of the cookie (as text) concatenated with the\nchallenge (as text). Below, the function `gen_digest(Challenge, Cookie)`\ngenerates a digest as described above.\n\nAn `out_cookie` is the cookie used in outgoing communication to a certain node,\nso that `A`'s `out_cookie` for `B` is to correspond with `B`'s `in_cookie` for\n`A` and conversely. `A`'s `out_cookie` for `B` and `A`'s `in_cookie` for `B`\nneed _not_ be the same. Below the function `out_cookie(Node)` returns the\ncurrent node's `out_cookie` for `Node`.\n\nAn `in_cookie` is the cookie expected to be used by another node when\ncommunicating with us, so that `A`'s `in_cookie` for `B` corresponds with `B`'s\n`out_cookie` for `A`. Below the function `in_cookie(Node)` returns the current\nnode's `in_cookie` for `Node`.\n\nThe cookies are text strings that can be viewed as passwords.\n\nEvery message in the handshake starts with a 16-bit big-endian integer, which\ncontains the message length (not counting the two initial bytes). In Erlang this\ncorresponds to option `{packet, 2}` in `m:gen_tcp`. Notice that after the\nhandshake, the distribution switches to 4 byte packet headers.","ref":"erl_dist_protocol.html#definitions"},{"type":"extras","title":"The Handshake in Detail - Distribution Protocol","doc":"Imagine two nodes, `A` that initiates the handshake and `B` that accepts the\nconnection.\n\n- **1) connect/accept** - `A` connects to `B` through TCP/IP and `B` accepts the\n  connection.\n\n- **2) `send_name`/`receive_name`** - `A` sends an initial identification to\n  `B`, which receives the message. The message can have two different formats\n  which looks as follows (the packet headers are removed):\n\n  | 1     | 2           | 4       | Nlen   |\n  | ----- | ----------- | ------- | ------ |\n  | `'n'` | `Version=5` | `Flags` | `Name` |\n\n  _Table: Old send_name ('n') for protocol version 5_\n\n  | 1     | 8       | 4          | 2      | Nlen   |\n  | ----- | ------- | ---------- | ------ | ------ |\n  | `'N'` | `Flags` | `Creation` | `Nlen` | `Name` |\n\n  _Table: New send_name ('N') for protocol version 6_\n\n  The old `send_name` format is only sent from OTP 23 and 24 nodes that are not\n  using `epmd` and therefore do not know if the remote node only supports\n  protocol version 5. The `Version` is a 16-bit big endian integer and _must_\n  always have the value 5 (even though node `A` supports version 6). `Flags` are\n  the [capability flags](erl_dist_protocol.md#dflags) of node `A` in 32-bit big\n  endian. The flag bit\n  [`DFLAG_HANDSHAKE_23`](erl_dist_protocol.md#DFLAG_HANDSHAKE_23) must be set\n  (as node `A` must supports version 6). `Name` is the full node name of `A`, as\n  a string of bytes (the packet length denotes how long it is).\n\n  The new `send_name` is sent to nodes known to support version 6. `Flags` are\n  the [capability flags](erl_dist_protocol.md#dflags) of node `A` in 64-bit big\n  endian. The flag bit\n  [`DFLAG_HANDSHAKE_23`](erl_dist_protocol.md#DFLAG_HANDSHAKE_23) must always be\n  set. `Creation` is the node incarnation identifier used by node `A` to create\n  its pids, ports and references. `Name` is the full node name of `A`, as a\n  string of bytes. `Nlen` is the byte length of the node name in 16-bit big\n  endian. Any extra data after the node `Name` must be accepted and ignored.\n\n  The `Name` must be just the host name (without @) when\n  [`DFLAG_NAME_ME`](erl_dist_protocol.md#DFLAG_NAME_ME) is set.\n\n- **3) `recv_status`/`send_status`** - `B` sends a status message to `A`, which\n  indicates if the connection is allowed.\n\n  | 1     | Slen     |\n  | ----- | -------- |\n  | `'s'` | `Status` |\n\n  _Table: The format of the status message_\n\n  's' is the message tag. `Status` is the status code as a string (not null\n  terminated). The following status codes are defined:\n\n  - **`ok`** - The handshake will continue.\n\n  - **`ok_simultaneous`** - The handshake will continue, but `A` is informed\n    that `B` has another ongoing connection attempt that will be shut down\n    (simultaneous connect where `A`'s name is greater than `B`'s name, compared\n    literally).\n\n  - **`nok`** - The handshake will not continue, as `B` already has an ongoing\n    handshake, which it itself has initiated (simultaneous connect where `B`'s\n    name is greater than `A`'s).\n\n  - **`not_allowed`** - The connection is disallowed for some (unspecified)\n    security reason.\n\n  - **`alive`** - A connection to the node is already active, which either means\n    that node `A` is confused or that the TCP connection breakdown of a previous\n    node with this name has not yet reached node `B`. See step 3B below.\n\n  - **`named:`** - The handshake will continue, but `A` requested a dynamic node\n    name by setting flag [`DFLAG_NAME_ME`](erl_dist_protocol.md#DFLAG_NAME_ME).\n    The dynamic node name of `A` is supplied at the end of the status message\n    from `B`. The host name of `A` which was sent as `Name` in `send_name` will\n    be used by node `B` to generate the full dynamic node name.\n\n    | 1     | Slen=6            | 2      | Nlen   | 4          |\n    | ----- | ----------------- | ------ | ------ | ---------- |\n    | `'s'` | `Status='named:'` | `Nlen` | `Name` | `Creation` |\n\n    *Table: The format of the 'named:' status message*\n\n    `Name` is the full dynamic node name of `A`, as a string of bytes. `Nlen` is\n    the byte length of the node name in 16-bit big endian. `Creation` is the\n    incarnation identifier of node `A` generated by node `B`. Any extra data after\n    the node `Creation` must be accepted and ignored.\n\n- **3B) `send_status`/`recv_status`** - If status was `alive`, node `A` answers\n  with another status message containing either `true`, which means that the\n  connection is to continue (the old connection from this node is broken), or\n  `false`, which means that the connection is to be closed (the connection\n  attempt was a mistake.\n\n- **4) `recv_challenge`/`send_challenge`** - If the status was `ok` or\n  `ok_simultaneous`, the handshake continues with `B` sending `A` another\n  message, the challenge. The challenge contains the same type of information as\n  the \"name\" message initially sent from `A` to `B`, plus a 32-bit challenge:\n\n  | 1     | 8       | 4           | 4          | 2      | Nlen   |\n  | ----- | ------- | ----------- | ---------- | ------ | ------ |\n  | `'N'` | `Flags` | `Challenge` | `Creation` | `Nlen` | `Name` |\n\n  _Table: The new challenge message format (version 6)_\n\n  `Challenge` is a 32-bit big-endian integer. The other fields are node `B`'s\n  flags, creation and full node name, similar to the `send_name` message. Any\n  extra data after the node `Name` must be accepted and ignored.\n\n- **4B) `send_complement`/`recv_complement`** - The complement message, from `A`\n  to `B`, is only sent if node `A` initially sent an old name message. It\n  contains complementary information missing in the initial old name message\n  from node `A`.\n\n  | 1     | 4           | 4          |\n  | ----- | ----------- | ---------- |\n  | `'c'` | `FlagsHigh` | `Creation` |\n\n  _Table: The complement message_\n\n  `FlagsHigh` are the high capability flags (bit 33-64) of node `A` as a 32-bit\n  big endian integer. `Creation` is the incarnation identifier of node `A`.\n\n- **5) `send_challenge_reply`/`recv_challenge_reply`** - Now `A` has generated a\n  digest and its own challenge. Those are sent together in a package to `B`:\n\n  | 1     | 4           | 16       |\n  | ----- | ----------- | -------- |\n  | `'r'` | `Challenge` | `Digest` |\n\n  _Table: The challenge_reply message_\n\n  `Challenge` is `A`'s challenge for `B` to handle. `Digest` is the MD5 digest\n  that `A` constructed from the challenge `B` sent in the previous step.\n\n- **6) `recv_challenge_ack`/`send_challenge_ack`** - `B` checks that the digest\n  received from `A` is correct and generates a digest from the challenge\n  received from `A`. The digest is then sent to `A`. The message is as follows:\n\n  | 1     | 16       |\n  | ----- | -------- |\n  | `'a'` | `Digest` |\n\n  _Table: The challenge_ack message_\n\n  `Digest` is the digest calculated by `B` for `A`'s challenge.\n\n- **7) check** - `A` checks the digest from `B` and the connection is up.","ref":"erl_dist_protocol.html#the-handshake-in-detail"},{"type":"extras","title":"Semigraphic View - Distribution Protocol","doc":"```erlang\nA (initiator)                                      B (acceptor)\n\nTCP connect ------------------------------------>\n                                                   TCP accept\n\nsend_name -------------------------------------->\n                                                   recv_name\n\n  <---------------------------------------------- send_status\nrecv_status\n(if status was 'alive'\n send_status - - - - - - - - - - - - - - - - - ->\n                                                   recv_status)\n\n                          (ChB)                      ChB = gen_challenge()\n  <---------------------------------------------- send_challenge\nrecv_challenge\n\n(if old send_name\n send_complement - - - - - - - - - - - - - - - ->\n                                                   recv_complement)\n\nChA = gen_challenge(),\nOCA = out_cookie(B),\nDiA = gen_digest(ChB, OCA)\n                          (ChA, DiA)\nsend_challenge_reply --------------------------->\n                                                   recv_challenge_reply\n                                                   ICB = in_cookie(A),\n                                                   check:\n                                                   DiA == gen_digest (ChB, ICB)?\n                                                   - if OK:\n                                                    OCB = out_cookie(A),\n                                                    DiB = gen_digest (ChA, OCB)\n                          (DiB)\n  <----------------------------------------------- send_challenge_ack\nrecv_challenge_ack                                  DONE\nICA = in_cookie(B),                                - else:\ncheck:                                              CLOSE\nDiB == gen_digest(ChA, ICA)?\n- if OK:\n DONE\n- else:\n CLOSE\n```\n\n[](){: #dflags }","ref":"erl_dist_protocol.html#semigraphic-view"},{"type":"extras","title":"Distribution Flags - Distribution Protocol","doc":"Early in the distribution handshake the two participating nodes exchange\ncapability flags. This is done in order to determine how the communication\nbetween the two nodes should be performed. The intersection of the capabilities\npresented by the two nodes defines the capabilities that will be used. The\nfollowing capability flags are defined:\n\n- **`-define(DFLAG_PUBLISHED,16#1).`** - The node is to be published and part of\n  the global namespace.\n\n- **`-define(DFLAG_ATOM_CACHE,16#2).`** - The node implements an atom cache\n  (obsolete).\n\n- **`-define(DFLAG_EXTENDED_REFERENCES,16#4).`** - The node implements extended\n  (3 × 32 bits) references. This flag is mandatory. If not present, the\n  connection is refused.\n\n- **`-define(DFLAG_DIST_MONITOR,16#8).`** - The node implements distributed\n  process monitoring.\n\n- **`-define(DFLAG_FUN_TAGS,16#10).`** - The node uses separate tags for funs\n  (lambdas) in the distribution protocol. This flag is mandatory. If not\n  present, the connection is refused.\n\n- **`-define(DFLAG_DIST_MONITOR_NAME,16#20).`** - The node implements\n  distributed named process monitoring.\n\n- **`-define(DFLAG_HIDDEN_ATOM_CACHE,16#40).`** - The (hidden) node implements\n  atom cache (obsolete).\n\n- **`-define(DFLAG_NEW_FUN_TAGS,16#80).`** - The node understands the\n  [`NEW_FUN_EXT`](erl_ext_dist.md#new_fun_ext) tag. This flag is mandatory. If\n  not present, the connection is refused.\n\n- **`-define(DFLAG_EXTENDED_PIDS_PORTS,16#100).`** - The node can handle\n  extended pids and ports. This flag is mandatory. If not present, the\n  connection is refused.\n\n- **`-define(DFLAG_EXPORT_PTR_TAG,16#200).`** - The node understands the\n  [`EXPORT_EXT`](erl_ext_dist.md#export_ext) tag. This flag is mandatory. If not\n  present, the connection is refused.\n\n- **`-define(DFLAG_BIT_BINARIES,16#400).`** - The node understands the\n  [`BIT_BINARY_EXT`](erl_ext_dist.md#bit_binary_ext) tag. This flag is\n  mandatory. If not present, the connection is refused.\n\n- **`-define(DFLAG_NEW_FLOATS,16#800).`** - The node understands the\n  [`NEW_FLOAT_EXT`](erl_ext_dist.md#new_float_ext) tag. This flag is mandatory.\n  If not present, the connection is refused.\n\n- **`-define(DFLAG_UNICODE_IO,16#1000).`**\n\n- **`-define(DFLAG_DIST_HDR_ATOM_CACHE,16#2000).`** - The node implements atom\n  cache in distribution header.\n\n- **`-define(DFLAG_SMALL_ATOM_TAGS, 16#4000).`{: #DFLAG_SMALL_ATOM_TAGS }** -\n  The node understands the [`SMALL_ATOM_EXT`](erl_ext_dist.md#small_atom_ext)\n  tag.\n\n- **`-define(DFLAG_UTF8_ATOMS, 16#10000).`{: #DFLAG_UTF8_ATOMS }** - The node\n  understands UTF-8 atoms encoded with\n  [`ATOM_UTF8_EXT`](erl_ext_dist.md#atom_utf8_ext) and\n  [`SMALL ATOM_UTF8_EXT`](erl_ext_dist.md#small_atom_utf8_ext). This flag is\n  mandatory. If not present, the connection is refused.\n\n- **`-define(DFLAG_MAP_TAG, 16#20000).`** - The node understands the map tag\n  [`MAP_EXT`](erl_ext_dist.md#map_ext). This flag is mandatory. If not present,\n  the connection is refused.\n\n- **`-define(DFLAG_BIG_CREATION, 16#40000).`{: #DFLAG_BIG_CREATION }** - The\n  node understands big node creation tags\n  [`NEW_PID_EXT`](erl_ext_dist.md#new_pid_ext),\n  [`NEW_PORT_EXT`](erl_ext_dist.md#new_port_ext) and\n  [`NEWER_REFERENCE_EXT`](erl_ext_dist.md#newer_reference_ext). This flag is\n  mandatory. If not present, the connection is refused.\n\n- **`-define(DFLAG_SEND_SENDER, 16#80000).`** - Use the `SEND_SENDER`\n  [control message](erl_dist_protocol.md#control_message) instead of the `SEND`\n  control message and use the `SEND_SENDER_TT` control message instead of the\n  `SEND_TT` control message.\n\n- **`-define(DFLAG_BIG_SEQTRACE_LABELS, 16#100000).`** - The node understands\n  any term as the seqtrace label.\n\n- **`-define(DFLAG_EXIT_PAYLOAD, 16#400000).`** - Use the `PAYLOAD_EXIT`,\n  `PAYLOAD_EXIT_TT`, `PAYLOAD_EXIT2`, `PAYLOAD_EXIT2_TT` and\n  `PAYLOAD_MONITOR_P_EXIT`\n  [control message](erl_dist_protocol.md#control_message)s instead of the\n  non-PAYLOAD variants.\n\n- **`-define(DFLAG_FRAGMENTS, 16#800000).`{: #DFLAG_FRAGMENTS }** - Use\n  [fragmented](erl_ext_dist.md#fragments) distribution messages to send large\n  messages.\n\n- **`-define(DFLAG_HANDSHAKE_23, 16#1000000).`{: #DFLAG_HANDSHAKE_23 }** - The\n  node supports the new connection setup handshake (version 6) introduced in\n  OTP 23. This flag is mandatory (from OTP 25). If not present, the connection\n  is refused.\n\n- **`-define(DFLAG_UNLINK_ID, 16#2000000).`{: #DFLAG_UNLINK_ID }** - Use the\n  [new link protocol](erl_dist_protocol.md#link_protocol).\n\n  > #### Note {: .info }\n  >\n  > This flag is mandatory as of OTP 26.\n\n- **`-define(DFLAG_MANDATORY_25_DIGEST, (1 bsl 36)).`** - The node supports all\n  capabilities that are mandatory in OTP 25. Introduced in OTP 25.\n\n  > #### Note {: .info }\n  >\n  > This flag will become mandatory in OTP 27.\n\n- **`-define(DFLAG_SPAWN, (1 bsl 32)).`{: #DFLAG_SPAWN }** - Set if the\n  [`SPAWN_REQUEST`](erl_dist_protocol.md#SPAWN_REQUEST),\n  [`SPAWN_REQUEST_TT`](erl_dist_protocol.md#SPAWN_REQUEST_TT),\n  [`SPAWN_REPLY`](erl_dist_protocol.md#SPAWN_REPLY),\n  [`SPAWN_REPLY_TT`](erl_dist_protocol.md#SPAWN_REPLY_TT) control messages are\n  supported.\n\n- **`-define(DFLAG_NAME_ME, (1 bsl 33)).`{: #DFLAG_NAME_ME }** - Dynamic node\n  name. This is not a capability but rather used as a request from the\n  connecting node to receive its node name from the accepting node as part of\n  the handshake.\n\n- **`-define(DFLAG_V4_NC, (1 bsl 34)).`{: #DFLAG_V4_NC }** - The node accepts a\n  larger amount of data in pids, ports and references (node container types\n  version 4). In the pid case full 32-bit `ID` and `Serial` fields in\n  [`NEW_PID_EXT`](erl_ext_dist.md#new_pid_ext), in the port case a 64-bit\n  integer in [`V4_PORT_EXT`](erl_ext_dist.md#v4_port_ext), and in the reference\n  case up to 5 32-bit ID words are now accepted in\n  [`NEWER_REFERENCE_EXT`](erl_ext_dist.md#newer_reference_ext). This flag was\n  introduced in OTP 24 and became mandatory in OTP 26.\n\n- **`-define(DFLAG_ALIAS, (1 bsl 35)).`{: #DFLAG_ALIAS }** - The node supports\n  process alias and can by this handle the\n  [`ALIAS_SEND`](erl_dist_protocol.md#ALIAS_SEND) and\n  [`ALIAS_SEND_TT`](erl_dist_protocol.md#ALIAS_SEND_TT) control messages.\n  Introduced in OTP 24.\n\n  > #### Warning {: .warning }\n  >\n  > `DFLAG_ALIAS` is deprecated and is scheduled for removal in OTP 30. It has\n  > been replaced by\n  > [`DFLAG_ALTACT_SIG`](erl_dist_protocol.md#DFLAG_ALTACT_SIG).\n\n- **`-define(DFLAG_ALTACT_SIG, (1 bsl 37)).`{: #DFLAG_ALTACT_SIG }** - The node\n  supports alternate action messages (alias and priority messages) and can by\n  this handle the\n  [`ALTACT_SIG_SEND`](erl_dist_protocol.md#ALTACT_SIG_SEND) control messages.\n  Introduced in OTP 28.\n\nThere is also function `dist_util:strict_order_flags/0` returning all flags\n(bitwise or:ed together) corresponding to features that require strict ordering\nof data over distribution channels.\n\n[](){: #connected_nodes }","ref":"erl_dist_protocol.html#distribution-flags"},{"type":"extras","title":"Protocol between Connected Nodes - Distribution Protocol","doc":"Since ERTS 5.7.2 (OTP R13B) the runtime system passes a distribution flag in the\nhandshake stage that enables the use of a\n[distribution header ](erl_ext_dist.md#distribution-header)on all messages\npassed. Messages passed between nodes have in this case the following format:\n\n| 4        | d                    | n                | m         |\n| -------- | -------------------- | ---------------- | --------- |\n| `Length` | `DistributionHeader` | `ControlMessage` | `Message` |\n\n_Table: Format of Messages Passed between Nodes (as from ERTS 5.7.2 (OTP R13B))_\n\n- **`Length`** - Equal to d + n + m.\n\n- **`DistributionHeader`** -\n  [Distribution header describing the atom cache and fragmented distribution messages.](erl_ext_dist.md#distribution-header)\n\n- **`ControlMessage`** - A tuple passed using the external format of Erlang.\n\n- **`Message`** - The message sent to another node using the '\\!' or the reason\n  for a EXIT, EXIT2 or DOWN signal using the external term format.\n\nNotice that\n[the version number is omitted from the terms that follow a distribution header ](erl_ext_dist.md#overall_format).\n\nNodes with an ERTS version earlier than 5.7.2 (OTP R13B) does not pass the\ndistribution flag that enables the distribution header. Messages passed between\nnodes have in this case the following format:\n\n| 4        | 1      | n                | m         |\n| -------- | ------ | ---------------- | --------- |\n| `Length` | `Type` | `ControlMessage` | `Message` |\n\n_Table: Format of Messages Passed between Nodes (before ERTS 5.7.2 (OTP R13B))_\n\n- **`Length`** - Equal to 1 + n + m.\n\n- **`Type`** - Equal to `112` (pass through).\n\n- **`ControlMessage`** - A tuple passed using the external format of Erlang.\n\n- **`Message`** - The message sent to another node using the '\\!' (in external\n  format). Notice that `Message` is only passed in combination with a\n  `ControlMessage` encoding a send ('\\!').\n\n[](){: #control_message }\n\nThe `ControlMessage` is a tuple, where the first element indicates which\ndistributed operation it encodes:\n\n- **`LINK`{: #LINK }** - `{1, FromPid, ToPid}`\n\n  This signal is sent by `FromPid` in order to create a link between `FromPid`\n  and `ToPid`.\n\n- **`SEND`** - `{2, Unused, ToPid}`\n\n  Followed by `Message`.\n\n  `Unused` is kept for backward compatibility.\n\n- **`EXIT`** - `{3, FromPid, ToPid, Reason}`\n\n  This signal is sent when a link has been broken\n\n- **`UNLINK`{: #UNLINK } (obsolete)** - `{4, FromPid, ToPid}`\n\n  > #### Warning {: .warning }\n  >\n  > This signal is obsolete and not supported as of OTP 26. For more information\n  > see the documentation of the\n  > [link protocol](erl_dist_protocol.md#link_protocol).\n\n- **`NODE_LINK`** - `{5}`\n\n- **`REG_SEND`** - `{6, FromPid, Unused, ToName}`\n\n  Followed by `Message`.\n\n  `Unused` is kept for backward compatibility.\n\n- **`GROUP_LEADER`** - `{7, FromPid, ToPid}`\n\n- **`EXIT2`** - `{8, FromPid, ToPid, Reason}`\n\n  This signal is sent by a call to the erlang:exit/2 bif\n\n- **`SEND_TT`** - `{12, Unused, ToPid, TraceToken}`\n\n  Followed by `Message`.\n\n  `Unused` is kept for backward compatibility.\n\n- **`EXIT_TT`** - `{13, FromPid, ToPid, TraceToken, Reason}`\n\n- **`REG_SEND_TT`** - `{16, FromPid, Unused, ToName, TraceToken}`\n\n  Followed by `Message`.\n\n  `Unused` is kept for backward compatibility.\n\n- **`EXIT2_TT`** - `{18, FromPid, ToPid, TraceToken, Reason}`\n\n- **`MONITOR_P`** - `{19, FromPid, ToProc, Ref}`, where `FromPid` = monitoring\n  process and `ToProc` = monitored process pid or name (atom)\n\n- **`DEMONITOR_P`** - `{20, FromPid, ToProc, Ref}`, where `FromPid` = monitoring\n  process and `ToProc` = monitored process pid or name (atom)\n\n  We include `FromPid` just in case we want to trace this.\n\n- **`MONITOR_P_EXIT`** - `{21, FromProc, ToPid, Ref, Reason}`, where `FromProc`\n  = monitored process pid or name (atom), `ToPid` = monitoring process, and\n  `Reason` = exit reason for the monitored process","ref":"erl_dist_protocol.html#protocol-between-connected-nodes"},{"type":"extras","title":"New Ctrlmessages for Erlang/OTP 21 - Distribution Protocol","doc":"- **`SEND_SENDER`** - `{22, FromPid, ToPid}`\n\n  Followed by `Message`.\n\n  This control message replaces the `SEND` control message and will be sent when\n  the distribution flag [`DFLAG_SEND_SENDER`](erl_dist_protocol.md#dflags) has\n  been negotiated in the connection setup handshake.\n\n  > #### Note {: .info }\n  >\n  > Messages encoded before the connection has been set up may still use the\n  > `SEND` control message. However, once a `SEND_SENDER` or `SEND_SENDER_TT`\n  > control message has been sent, no more `SEND` control messages will be sent\n  > in the same direction on the connection.\n\n- **`SEND_SENDER_TT`** - `{23, FromPid, ToPid, TraceToken}`\n\n  Followed by `Message`.\n\n  This control message replaces the `SEND_TT` control message and will be sent\n  when the distribution flag [`DFLAG_SEND_SENDER`](erl_dist_protocol.md#dflags)\n  has been negotiated in the connection setup handshake.\n\n  > #### Note {: .info }\n  >\n  > Messages encoded before the connection has been set up may still use the\n  > `SEND_TT` control message. However, once a `SEND_SENDER` or `SEND_SENDER_TT`\n  > control message has been sent, no more `SEND_TT` control messages will be\n  > sent in the same direction on the connection.","ref":"erl_dist_protocol.html#new-ctrlmessages-for-erlang-otp-21"},{"type":"extras","title":"New Ctrlmessages for Erlang/OTP 22 - Distribution Protocol","doc":"> #### Note {: .info }\n>\n> Messages encoded before the connection has been set up may still use the\n> non-PAYLOAD variant. However, once a PAYLOAD control message has been sent, no\n> more non-PAYLOAD control messages will be sent in the same direction on the\n> connection.\n\n- **`PAYLOAD_EXIT`** - `{24, FromPid, ToPid}`\n\n  Followed by `Reason`.\n\n  This control message replaces the `EXIT` control message and will be sent when\n  the distribution flag [`DFLAG_EXIT_PAYLOAD`](erl_dist_protocol.md#dflags) has\n  been negotiated in the connection setup handshake.\n\n- **`PAYLOAD_EXIT_TT`** - `{25, FromPid, ToPid, TraceToken}`\n\n  Followed by `Reason`.\n\n  This control message replaces the `EXIT_TT` control message and will be sent\n  when the distribution flag [`DFLAG_EXIT_PAYLOAD`](erl_dist_protocol.md#dflags)\n  has been negotiated in the connection setup handshake.\n\n- **`PAYLOAD_EXIT2`** - `{26, FromPid, ToPid}`\n\n  Followed by `Reason`.\n\n  This control message replaces the `EXIT2` control message and will be sent\n  when the distribution flag [`DFLAG_EXIT_PAYLOAD`](erl_dist_protocol.md#dflags)\n  has been negotiated in the connection setup handshake.\n\n- **`PAYLOAD_EXIT2_TT`** - `{27, FromPid, ToPid, TraceToken}`\n\n  Followed by `Reason`.\n\n  This control message replaces the `EXIT2_TT` control message and will be sent\n  when the distribution flag [`DFLAG_EXIT_PAYLOAD`](erl_dist_protocol.md#dflags)\n  has been negotiated in the connection setup handshake.\n\n- **`PAYLOAD_MONITOR_P_EXIT`** - `{28, FromProc, ToPid, Ref}`\n\n  Followed by `Reason`.\n\n  This control message replaces the `MONITOR_P_EXIT` control message and will be\n  sent when the distribution flag\n  [`DFLAG_EXIT_PAYLOAD`](erl_dist_protocol.md#dflags) has been negotiated in the\n  connection setup handshake.","ref":"erl_dist_protocol.html#new-ctrlmessages-for-erlang-otp-22"},{"type":"extras","title":"New Ctrlmessages for Erlang/OTP 23 - Distribution Protocol","doc":"- **`SPAWN_REQUEST`{: #SPAWN_REQUEST }** -\n  `{29, ReqId, From, GroupLeader, {Module, Function, Arity}, OptList}`\n\n  Followed by `ArgList`.\n\n  This signal is sent by the [`spawn_request()`](`erlang:spawn_request/5`) BIF.\n\n  - **`ReqId :: reference()`** - Request identifier. Also used as monitor\n    reference in case the `monitor` option has been passed.\n\n  - **`From :: pid()`** - Process identifier of the process making the request.\n    That is, the parent process to be.\n\n  - **`GroupLeader :: pid()`** - Process identifier of the group leader of the\n    newly created process.\n\n  - **`{Module :: atom(), Function :: atom(), Arity :: integer() >= 0}`** -\n    Entry point for the new process.\n\n  - **`OptList :: [term()]`** - A proper list of spawn options to use when\n    spawning.\n\n  - **`ArgList :: [term()]`** - A proper list of arguments to use in the call to\n    the entry point.\n\n  Only supported when the [`DFLAG_SPAWN`](erl_dist_protocol.md#DFLAG_SPAWN)\n  [distribution flag](erl_dist_protocol.md#dflags) has been passed.\n\n- **`SPAWN_REQUEST_TT`{: #SPAWN_REQUEST_TT }** -\n  `{30, ReqId, From, GroupLeader, {Module, Function, Arity}, OptList, Token}`\n\n  Followed by `ArgList`.\n\n  Same as [`SPAWN_REQUEST`](erl_dist_protocol.md#SPAWN_REQUEST), but also with a\n  sequential trace `Token`.\n\n  Only supported when the [`DFLAG_SPAWN`](erl_dist_protocol.md#DFLAG_SPAWN)\n  [distribution flag](erl_dist_protocol.md#dflags) has been passed.\n\n- **`SPAWN_REPLY`{: #SPAWN_REPLY }** - `{31, ReqId, To, Flags, Result}`\n\n  This signal is sent as a reply to a process previously sending a\n  [`SPAWN_REQUEST`](erl_dist_protocol.md#SPAWN_REQUEST) signal.\n\n  - **`ReqId :: reference()`** - Request identifier. Also used as monitor\n    reference in case the `monitor` option has been passed.\n\n  - **`To :: pid()`** - Process identifier of the process making the spawn\n    request.\n\n  - **`Flags :: integer() >= 0`** - A bit flag field of bit flags bitwise or:ed\n    together. Currently the following flags are defined:\n\n    - **`1`** - A link between `To` and `Result` was set up on the node where\n      `Result` resides.\n\n    - **`2`** - A monitor from `To` to `Result` was set up on the node where\n      `Result` resides.\n\n  - **`Result :: pid() | atom()`** - Result of the operation. If `Result` is a\n    process identifier, the operation succeeded and the process identifier is\n    the identifier of the newly created process. If `Result` is an atom, the\n    operation failed and the atom identifies failure reason.\n\n  Only supported when the [`DFLAG_SPAWN`](erl_dist_protocol.md#DFLAG_SPAWN)\n  [distribution flag](erl_dist_protocol.md#dflags) has been passed.\n\n- **`SPAWN_REPLY_TT`{: #SPAWN_REPLY_TT }** -\n  `{32, ReqId, To, Flags, Result, Token}`\n\n  Same as [`SPAWN_REPLY`](erl_dist_protocol.md#SPAWN_REPLY), but also with a\n  sequential trace `Token`.\n\n  Only supported when the [`DFLAG_SPAWN`](erl_dist_protocol.md#DFLAG_SPAWN)\n  [distribution flag](erl_dist_protocol.md#dflags) has been passed.\n\n- **`UNLINK_ID`{: #UNLINK_ID }** - `{35, Id, FromPid, ToPid}`\n\n  This signal is sent by `FromPid` in order to remove a link between `FromPid`\n  and `ToPid`. This unlink signal replaces the\n  [`UNLINK`](erl_dist_protocol.md#UNLINK) signal. Besides process identifiers of\n  the sender and receiver the `UNLINK_ID` signal also contains an integer\n  identifier `Id`. Valid range of `Id` is `[1, (1 bsl 64) - 1]`. `Id` is to be\n  passed back to the sender by the receiver in an\n  [`UNLINK_ID_ACK`](erl_dist_protocol.md#UNLINK_ID_ACK) signal. `Id` must\n  uniquely identify the `UNLINK_ID` signal among all not yet acknowledged\n  `UNLINK_ID` signals from `FromPid` to `ToPid`.\n\n  This signal is part of the\n  [new link protocol](erl_dist_protocol.md#link_protocol) which became mandatory\n  as of OTP 26.\n\n- **`UNLINK_ID_ACK`{: #UNLINK_ID_ACK }** - `{36, Id, FromPid, ToPid}`\n\n  An unlink acknowledgement signal. This signal is sent as an acknowledgement of\n  the reception of an [`UNLINK_ID`](erl_dist_protocol.md#UNLINK_ID) signal. The\n  `Id` element should be the same `Id` as present in the `UNLINK_ID` signal.\n  `FromPid` identifies the sender of the `UNLINK_ID_ACK` signal and `ToPid`\n  identifies the sender of the `UNLINK_ID` signal.\n\n  This signal is part of the\n  [new link protocol](erl_dist_protocol.md#link_protocol) which became mandatory\n  as of OTP 26.","ref":"erl_dist_protocol.html#new-ctrlmessages-for-erlang-otp-23"},{"type":"extras","title":"New Ctrlmessages for Erlang/OTP 24 - Distribution Protocol","doc":"- **`ALIAS_SEND`{: #ALIAS_SEND }** - `{33, FromPid, Alias}`\n\n  > #### Warning {: .warning }\n  >\n  > This signal is deprecated and has been scheduled for removal in OTP 30.\n  > It has been replaced by the\n  > the [`ALTACT_SIG_SEND`](erl_dist_protocol.md#ALTACT_SIG_SEND) signal.\n\n  Followed by `Message`.\n\n  This control message is used when sending the message `Message` to the process\n  identified by the process alias `Alias`. Nodes that can handle this control\n  message sets the distribution flag\n  [`DFLAG_ALIAS`](erl_dist_protocol.md#DFLAG_ALIAS) in the connection setup\n  handshake.\n\n- **`ALIAS_SEND_TT`{: #ALIAS_SEND_TT }** - `{34, FromPid, Alias, Token}`\n\n  > #### Warning {: .warning }\n  >\n  > This signal is deprecated and has been scheduled for removal in OTP 30.\n  > It has been replaced by the\n  > the [`ALTACT_SIG_SEND`](erl_dist_protocol.md#ALTACT_SIG_SEND) signal.\n\n  Followed by `Message`.\n\n  Same as [`ALIAS_SEND`](erl_dist_protocol.md#ALIAS_SEND), but also with a\n  sequential trace `Token`.","ref":"erl_dist_protocol.html#new-ctrlmessages-for-erlang-otp-24"},{"type":"extras","title":"New Ctrlmessages for Erlang/OTP 28 - Distribution Protocol","doc":"- **`ALTACT_SIG_SEND`{: #ALTACT_SIG_SEND }** - `{37, Flags, SenderPid, To}` or `{37, Flags, SenderPid, To, Token}`\n\n  Followed by `Data`.\n\n  This control message is used when sending an alternate action signal with\n  associated `Data` to the process identified by `To`. Currently defined\n  alternate action signals are alias and priority message signals and exit\n  signals. That is, signals with an action upon reception which is different\n  than the default action.\n\n  Currently the following bitwise flags are defined:\n  * `ALTACT_SIG_FLG_PRIO` - **`1`** - This is a priority signal\n  * `ALTACT_SIG_FLG_TOKEN` - **`2`** - The control message is a 5-tuple with\n    token as element 5; otherwise, the control message is a 4-tuple.\n  * `ALTACT_SIG_FLG_ALIAS` - **`4`** - Send to an alias, i.e., `To` is a reference\n  * `ALTACT_SIG_FLG_NAME` - **`8`** - Send to a registered name, i.e., `To` is an atom\n  * `ALTACT_SIG_FLG_EXIT` - **`16`** - The signal is an exit signal\n\n  If neither `ALTACT_SIG_FLG_ALIAS` nor `ALTACT_SIG_FLG_NAME` is set, `To` is\n  a process identifier.\n\n  If `ALTACT_SIG_FLG_EXIT` is not set, the signal is a message signal.\n\n  For a message signal `Data` corresponds to the actual message term, and for\n  an exit signal `Data` corresponds to the exit reason term.\n\n  Nodes that can handle this control message sets the distribution flag\n  [`DFLAG_ALTACT_SIG`](erl_dist_protocol.md#DFLAG_ALTACT_SIG) in the connection\n  setup handshake.\n\n[](){: #link_protocol } [](){: #new_link_protocol } [](){: #old_link_protocol }","ref":"erl_dist_protocol.html#new-ctrlmessages-for-erlang-otp-28"},{"type":"extras","title":"Link Protocol - Distribution Protocol","doc":"The new link protocol introduced in OTP 23.3 became mandatory as of OTP 26. As\nof OTP 26, OTP nodes will therefor refuse to connect to nodes that do not\nindicate that they support the new link protocol using the\n[`DFLAG_UNLINK_ID`](erl_dist_protocol.md#DFLAG_UNLINK_ID)\n[distribution flag](erl_dist_protocol.md#dflags).\n\nThe new link protocol introduced two new signals,\n[`UNLINK_ID`](erl_dist_protocol.md#UNLINK_ID) and\n[`UNLINK_ID_ACK`](erl_dist_protocol.md#UNLINK_ID), which replaced the old\n[`UNLINK`](erl_dist_protocol.md#UNLINK) signal. The old\n[`LINK`](erl_dist_protocol.md#LINK) signal is still sent in order to set up a\nlink, but handled differently upon reception.\n\nIn order to set up a link, a `LINK` signal is sent, from the process initiating\nthe operation, to the process that it wants to link to. In order to remove a\nlink, an `UNLINK_ID` signal is sent, from the process initiating the operation,\nto the linked process. The receiver of an `UNLINK_ID` signal responds with an\n`UNLINK_ID_ACK` signal. Upon reception of an `UNLINK_ID` signal, the\ncorresponding `UNLINK_ID_ACK` signal _must_ be sent before any other signals are\nsent to the sender of the `UNLINK_ID` signal. Together with\n[the signal ordering guarantee](`e:system:ref_man_processes.md#signal-delivery`)\nof Erlang this makes it possible for the sender of the `UNLINK_ID` signal to\nknow the order of other signals which is essential for the protocol. The\n`UNLINK_ID_ACK` signal should contain the same `Id` as the `Id` contained in the\n`UNLINK_ID` signal being acknowledged.\n\nProcesses also need to maintain process local information about links. The state\nof this process local information is changed when the signals above are sent and\nreceived. This process local information also determines if a signal should be\nsent when a process calls [`link/1`](`erlang:link/1`) or\n[`unlink/1`](`erlang:unlink/1`). A `LINK` signal is only sent if there does not\ncurrently exist an active link between the processes according to the process\nlocal information and an `UNLINK_ID` signal is only sent if there currently\nexists an active link between the processes according to the process local\ninformation.\n\nThe process local information about a link contains:\n\n- **Pid** - Process identifier of the linked process.\n\n- **Active Flag** - If set, the link is active and the process will react on\n  [incoming exit signals](`e:system:ref_man_processes.md#receiving_exit_signals`)\n  issued due to the link. If not set, the link is inactive and incoming exit\n  signals, issued due to the link, will be ignored. That is, the processes are\n  considered as _not_ linked.\n\n- **Unlink Id** - Identifier of an outstanding unlink operation. That is, an\n  unlink operation that has not yet been acknowledged. This information is only\n  used when the active flag is not set.\n\nA process is only considered linked to another process if it has process local\ninformation about the link containing the process identifier of the other\nprocess and with the active flag set.\n\nThe process local information about a link is updated as follows:\n\n- **A `LINK` signal is sent** - Link information is created if not already\n  existing. The active flag is set, and unlink id is cleared. That is, if we had\n  an outstanding unlink operation we will ignore the result of that operation\n  and enable the link.\n\n- **A `LINK` signal is received** - If no link information already exists, it is\n  created, the active flag is set and unlink id is cleared. If the link\n  information already exists, the signal is silently ignored, regardless of\n  whether the active flag is set or not. That is, if we have an outstanding\n  unlink operation we will _not_ activate the link. In this scenario, the sender\n  of the `LINK` signal has not yet sent an `UNLINK_ID_ACK` signal corresponding\n  to our `UNLINK_ID` signal which means that it will receive our `UNLINK_ID`\n  signal after it sent its `LINK` signal. This in turn means that both processes\n  in the end will agree that there is no link between them.\n\n- **An `UNLINK_ID` signal is sent** - Link information already exists and the\n  active flag is set (otherwise the signal would not be sent). The active flag\n  is unset, and the unlink id of the signal is saved in the link information.\n\n- **An `UNLINK_ID` signal is received** - If the active flag is set, information\n  about the link is removed. If the active flag is not set (that is, we have an\n  outstanding unlink operation), the information about the link is left\n  unchanged.\n\n- **An `UNLINK_ID_ACK` signal is sent** - This is done when an `UNLINK_ID`\n  signal is received and causes no further changes of the link information.\n\n- **An `UNLINK_ID_ACK` signal is received** - If information about the link\n  exists, the active flag is not set, and the unlink id in the link information\n  equals the `Id` in the signal, the link information is removed; otherwise, the\n  signal is ignored.\n\nWhen a process receives an exit signal due to a link, the process will first\nreact to the exit signal if the link is active and then remove the process local\ninformation about the link.\n\nIn case the connection is lost between two nodes, exit signals with exit reason\n`noconnection` are sent to all processes with links over the connection. This\nwill cause all process local information about links over the connection to be\nremoved.\n\nExactly the same link protocol is also used internally on an Erlang node. The\nsignals however have different formats since they do not have to be sent over\nthe wire.","ref":"erl_dist_protocol.html#link-protocol"},{"type":"extras","title":"epmd","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# epmd\n\nErlang Port Mapper Daemon","ref":"epmd_cmd.html"},{"type":"extras","title":"Description - epmd","doc":"The `epmd` command be used to start the port mapper daemon:\n\n```text\nepmd [-d|-debug] [DbgExtra...] [-address Addresses]\n    [-port No] [-daemon] [-relaxed_command_check]\n```\n\nIt can also be used to communicate with a running port mapper daemon:\n\n\n```text\nepmd [-d|-debug] [-port No] [-names|-kill|-stop Name]\n```\n\n\nThis daemon acts as a name server on all hosts involved in distributed Erlang\ncomputations. When an Erlang node starts, the node has a name and it obtains an\naddress from the host OS kernel. The name and address are sent to the `epmd`\ndaemon running on the local host. In a TCP/IP environment, the address consists\nof the IP address and a port number. The node name is an atom of the form\n`Name@Node`. The job of the `epmd` daemon is to keep track of which node name\nlistens on which address. Hence, `epmd` maps symbolic node names to machine\naddresses.\n\nThe TCP/IP `epmd` daemon only keeps track of the `Name` (first) part of an\nErlang node name. The `Host` part (whatever is after the `@`) is implicit in the\nnode name where the `epmd` daemon was contacted, as is the IP address where the\nErlang node can be reached. Consistent and correct TCP naming services are\ntherefore required for an Erlang network to function correctly.\n\n> #### Note {: .info }\n>\n> On Windows the maximum number of nodes allowed in one epmd instance is 60.\n> This is because of limitations in the current implementation. If you need more\n> nodes, you should look into using and erlang based epmd implementation such as\n> [Erlang EPMD](https://github.com/erlang/epmd).\n\n- **Starting the port mapper daemon** - The daemon is started automatically by\n  command [`erl(1)`](erl_cmd.md) if the node is to be distributed and no running\n  instance is present. If automatically launched environment variables must be\n  used to change the behavior of the daemon; see section\n  [Environment Variables](epmd_cmd.md#environment_variables).\n\n  If argument `-daemon` is not specified, `epmd` runs as a normal program with\n  the controlling terminal of the shell in which it is started. Normally, it is\n  to be run as a daemon.\n\n  Regular startup options are described in section\n  [Regular Options](epmd_cmd.md#daemon_flags).\n\n  The `DbgExtra` options are described in section\n  [DbgExtra Options](epmd_cmd.md#debug_flags).\n\n- **Communicating with a running port mapper daemon** - Communicating with the\n  running `epmd` daemon by the `epmd` program is done primarily for debugging\n  purposes.\n\n  The different queries are described in section\n  [Interactive options](epmd_cmd.md#interactive_flags).\n\n[](){: #daemon_flags }","ref":"epmd_cmd.html#description"},{"type":"extras","title":"Regular Options - epmd","doc":"These options are available when starting the name server. The name server is\nnormally started automatically by command [`erl(1)`](erl_cmd.md) (if not already\navailable), but it can also be started at system startup.\n\n- **`-address List`** - Lets this instance of `epmd` listen only on the\n  comma-separated list of IP addresses and on the loopback address (which is\n  implicitly added to the list if it has not been specified). This can also be\n  set using environment variable `ERL_EPMD_ADDRESS`; see section\n  [Environment Variables](epmd_cmd.md#environment_variables).\n\n- **`-port No`** - Lets this instance of `epmd` listen to another TCP port than\n  default 4369. This can also be set using environment variable `ERL_EPMD_PORT`;\n  see section [Environment Variables](epmd_cmd.md#environment_variables).\n\n- **`-d | -debug`** - Enables debug output. The more `-d` flags specified, the\n  more debug output you will get (to a certain limit). This option is most\n  useful when the `epmd` daemon is not started as a daemon.\n\n- **`-daemon`** - Starts `epmd` detached from the controlling terminal. Logging\n  ends up in syslog when available and correctly configured. If the `epmd`\n  daemon is started at boot, this option is definitely to be used. It is also\n  used when command `erl` automatically starts `epmd`.\n\n- **`-relaxed_command_check`** - Starts the `epmd` program with relaxed command\n  checking (mostly for backward compatibility). This affects the following:\n\n  - With relaxed command checking, the `epmd` daemon can be killed from the\n    local host with, for example, command `epmd -kill` even if active nodes are\n    registered. Normally only daemons with an empty node database can be killed\n    with `epmd -kill`.\n  - Command `epmd -stop` (and the corresponding messages to `epmd`, as can be\n    specified using [`erl_interface:ei(3)`](`e:erl_interface:ei.md`)) is\n    normally always ignored. This because it can cause a strange situation where\n    two nodes of the same name can be alive at the same time. A node unregisters\n    itself by only closing the connection to `epmd`, which is why command `stop`\n    was only intended for use in debugging situations.\n\n    With relaxed command checking enabled, you can forcibly unregister live\n    nodes.\n\n  Relaxed command checking can also be enabled by setting environment variable\n  `ERL_EPMD_RELAXED_COMMAND_CHECK` before starting `epmd`.\n\n  Use relaxed command checking only on systems with very limited interactive\n  usage.\n\n[](){: #debug_flags }","ref":"epmd_cmd.html#regular-options"},{"type":"extras","title":"DbgExtra Options - epmd","doc":"> #### Note {: .info }\n>\n> These options are only for debugging and testing `epmd` clients. They are not\n> to be used in normal operation.\n\n- **`-packet_timeout Seconds`** - Sets the number of seconds a connection can be\n  inactive before `epmd` times out and closes the connection. Defaults to 60.\n\n- **`-delay_accept Seconds`** - To simulate a busy server, you can insert a\n  delay between when `epmd` gets notified that a new connection is requested and\n  when the connection gets accepted.\n\n- **`-delay_write Seconds`** - Also a simulation of a busy server. Inserts a\n  delay before a reply is sent.\n\n[](){: #interactive_flags }","ref":"epmd_cmd.html#dbgextra-options"},{"type":"extras","title":"Interactive Options - epmd","doc":"These options make `epmd` run as an interactive command, displaying the results\nof sending queries to an already running instance of `epmd`. The `epmd`\ncontacted is always on the local node, but option `-port` can be used to select\nbetween instances if several are running using different ports on the host.\n\n- **`-port No`** - Contacts the `epmd` listening on the specified TCP port\n  number (default 4369). This can also be set using environment variable\n  `ERL_EPMD_PORT`; see section\n  [Environment Variables](epmd_cmd.md#environment_variables).\n\n- **`-names`** - Lists names registered with the currently running `epmd`.\n\n- **`-kill`** - Kills the currently running `epmd`.\n\n  Killing the running `epmd` is only allowed if `epmd -names` shows an empty\n  database or if `-relaxed_command_check` was specified when the running\n  instance of `epmd` was started.\n\n  Notice that `-relaxed_command_check` is specified when starting the daemon\n  that is to accept killing when it has live nodes registered. When running\n  `epmd` interactively, `-relaxed_command_check` has no effect. A daemon that is\n  started without relaxed command checking must be killed using, for example,\n  signals or some other OS-specific method if it has active clients registered.\n\n- **`-stop Name`** - Forcibly unregisters a live node from the `epmd` database.\n\n  This command can only be used when contacting `epmd` instances started with\n  flag `-relaxed_command_check`.\n\n  Notice that relaxed command checking must enabled for the `epmd` daemon\n  contacted. When running `epmd` interactively, `-relaxed_command_check` has no\n  effect.\n\n[](){: #environment_variables }","ref":"epmd_cmd.html#interactive-options"},{"type":"extras","title":"Environment Variables - epmd","doc":"- **`ERL_EPMD_ADDRESS`** - Can be set to a comma-separated list of IP addresses,\n  in which case the `epmd` daemon will listen only on the specified address(es)\n  and on the loopback address (which is implicitly added to the list if it has\n  not been specified). The default behavior is to listen on all available IP\n  addresses.\n\n- **`ERL_EPMD_PORT`** - Can contain the port number `epmd` will use. The default\n  port will work fine in most cases. A different port can be specified to allow\n  several instances of `epmd`, representing independent clusters of nodes, to\n  co-exist on the same host. All nodes in a cluster must use the same `epmd`\n  port number.\n\n- **`ERL_EPMD_RELAXED_COMMAND_CHECK`** - If set before start, the `epmd` daemon\n  behaves as if option `-relaxed_command_check` was specified at startup.\n  Consequently, if this option is set before starting the Erlang virtual\n  machine, the automatically started `epmd` accepts the `-kill` and `-stop`\n  commands without restrictions.","ref":"epmd_cmd.html#environment-variables"},{"type":"extras","title":"Logging - epmd","doc":"On some operating systems _syslog_ will be used for error reporting when `epmd`\nruns as a daemon. To enable the error logging, you must edit the\n/etc/syslog.conf file and add an entry:\n\n```text\n  !epmd\n  *.* /var/log/epmd.log\n```\n\nwhere ` ` are at least one real tab character. Spaces are silently ignored.","ref":"epmd_cmd.html#logging"},{"type":"extras","title":"Access Restrictions - epmd","doc":"The `epmd` daemon accepts messages from both the local host and remote hosts.\nHowever, only the query commands are answered (and acted upon) if the query\ncomes from a remote host. It is always an error to try to register a node name\nif the client is not a process on the same host as the `epmd` instance is\nrunning on. Such requests are considered hostile and the connection is closed\nimmediately.\n\nThe following queries are accepted from remote nodes:\n\n- Port queries, that is, on which port the node with a specified name listens\n- Name listing, that is, gives a list of all names registered on the host\n\nTo restrict access further, firewall software must be used.","ref":"epmd_cmd.html#access-restrictions"},{"type":"extras","title":"erl","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# erl\n\nStart the Erlang runtime system.","ref":"erl_cmd.html"},{"type":"extras","title":"Description - erl","doc":"The `erl` program starts an Erlang runtime system. The exact details (for\nexample, whether `erl` is a script or a program and which other programs it\ncalls) are system-dependent.\n\n> #### Note {: .info }\n>\n> If you are using Erlang/OTP 25 or earlier on Windows and want to\n> start an Erlang system with full shell support, you should use\n> `werl.exe`.  See the [Erlang/OTP 25\n> documentation](https://www.erlang.org/docs/25/man/werl) for details\n> on how to do that.","ref":"erl_cmd.html#description"},{"type":"extras","title":"erl <arguments> - erl","doc":"Starts an Erlang runtime system.\n\nThe arguments can be divided into _emulator flags_, _flags_, and _plain\narguments_:\n\n- Any argument starting with character `+` is interpreted as an [emulator flag](#emulator-flags).\n\n  As indicated by the name, emulator flags control the behavior of the emulator.\n\n- Any argument starting with character `-` (hyphen) is interpreted as a\n  [flag](#flags), which is to be passed to the Erlang part of the\n  runtime system, more specifically to the `init` system process, see `m:init`.\n\n  The `init` process itself interprets some of these flags, the _init flags_. It\n  also stores any remaining flags, the _user flags_. The latter can be retrieved\n  by calling `init:get_argument/1`.\n\n  A small number of \"-\" flags exist, which now actually are emulator flags, see\n  the description below.\n\n- Plain arguments are not interpreted in any way. They are also stored by the\n  `init` process and can be retrieved by calling `init:get_plain_arguments/0`.\n  Plain arguments can occur before the first flag, or after a `--` flag. Also,\n  the `-extra` flag causes everything that follows to become plain arguments.\n\n_Examples:_\n\n```erlang\n% erl +W w -sname arnie +S 2 -s my_init -extra +bertie\n(arnie@host)1> init:get_argument(sname).\n{ok,[[\"arnie\"]]}\n(arnie@host)2> init:get_plain_arguments().\n[\"+bertie\"]\n```\n\nHere `+W w` and `+S 2` are emulator flags. `-s my_init` is an init flag,\ninterpreted by `init`. `-sname arnie` is a user flag, stored by `init`. It is\nread by Kernel and causes the Erlang runtime system to become distributed.\nFinally, everything after `-extra` (that is, `+bertie`) is considered as plain\narguments.\n\n```erlang\n% erl -myflag 1\n1> init:get_argument(myflag).\n{ok,[[\"1\"]]}\n2> init:get_plain_arguments().\n[]\n```\n\nHere the user flag `-myflag 1` is passed to and stored by the `init` process. It\nis a user-defined flag, presumably used by some user-defined application.","ref":"erl_cmd.html#erl-arguments"},{"type":"extras","title":"Flags - erl","doc":"In the following list, init flags are marked \"(init flag)\". Unless otherwise\nspecified, all other flags are user flags, for which the values can be retrieved\nby calling `init:get_argument/1`. Notice that the list of user flags is not\nexhaustive, there can be more application-specific flags that instead are\ndescribed in the corresponding application documentation.\n\n- **`--` (init flag)** - Everything following `--` up to the next flag (`-flag`\n  or `+flag`) is considered plain arguments and can be retrieved using\n  `init:get_plain_arguments/0`.\n\n- **`-Application Par Val`** - Sets the application configuration parameter\n  `Par` to the value `Val` for the application `Application`; see\n  [`app(4)`](`e:kernel:app.md`) and `m:application`.\n\n- **`-args_file FileName`{: #args_file }** - Command-line arguments are read\n  from the file `FileName`. The arguments read from the file replace flag\n  '`-args_file FileName`' on the resulting command line.\n\n  The file `FileName` is to be a plain text file and can contain comments and\n  command-line arguments. A comment begins with a `#` character and continues\n  until the next end of line character. Backslash (\\\\) is used as quoting\n  character. All command-line arguments accepted by `erl` are allowed, also flag\n  `-args_file FileName`. Be careful not to cause circular dependencies between\n  files containing flag `-args_file`, though.\n\n  The flag `-extra` is treated in special way. Its scope ends at the end of the\n  file. Arguments following an `-extra` flag are moved on the command line into\n  the `-extra` section, that is, the end of the command line following after an\n  `-extra` flag.\n\n- **`-async_shell_start`** - The initial Erlang shell does not read user input\n  until the system boot procedure has been completed (Erlang/OTP 5.4 and later).\n  This flag disables the start synchronization feature and lets the shell start\n  in parallel with the rest of the system.\n\n- **`-boot File`{: #boot }** - Specifies the name of the boot file, `File.boot`,\n  which is used to start the system; see `m:init`. Unless `File` contains an\n  absolute path, the system searches for `File.boot` in the current and\n  `$ROOT/bin` directories.\n\n  Defaults to `$ROOT/bin/start.boot`.\n\n- **`-boot_var Var Dir`** - If the boot script contains a path variable `Var`\n  other than `$ROOT`, this variable is expanded to `Dir`. Used when applications\n  are installed in another directory than `$ROOT/lib`; see\n  [`systools:make_script/1,2`](`systools:make_script/1`) in SASL.\n\n- **`-code_path_cache`** - Enables the code path cache of the code server; see\n  `m:code`.\n\n- **`-compile Mod1 Mod2 ...`** - Compiles the specified modules and then\n  terminates (with non-zero exit code if the compilation of some file did not\n  succeed). Implies `-noinput`.\n\n  Not recommended; use [`erlc`](erlc_cmd.md) instead.\n\n- **`-config Config [Config ...]`{: #config }** - Specifies the name of one or\n  more configuration files, `Config.config`, which is used to configure\n  applications; see [`app(4)`](`e:kernel:app.md`) and `m:application`. See the\n  documentation for the [configuration file format](`e:kernel:config.md`) for a\n  description of the configuration format and the order in which configuration\n  parameters are read.\n\n- **`-configfd FD [FD ...]`{: #configfd }** - Specifies the name of one or more\n  file descriptors (called configuration file descriptors from here on) with\n  configuration data for applications; see [`app(4)`](`e:kernel:app.md`) and\n  `m:application`. See the documentation for the\n  [configuration file format](`e:kernel:config.md`) for a description of the\n  configuration format and the order in which configuration parameters are read.\n\n  A configuration file descriptor will be read until its end and will then be\n  closed.\n\n  The content of a configuration file descriptor is stored so that it can be\n  reused when `init:restart/0` or `init:restart/1` is called.\n\n  The parameter `-configfd 0` implies `-noinput`.\n\n  > #### Note {: .info }\n  >\n  > It is not recommended to use file descriptors 1 (standard output), and 2\n  > (standard error) together with `-configfd` as these file descriptors are\n  > typically used to print information to the console the program is running\n  > in.\n\n  Examples (Unix shell):\n\n  ```text\n  $ erl \\\n  -noshell \\\n  -configfd 3 \\\n  -eval \\\n  'io:format(\"~p~n\",[application:get_env(kernel, logger_level)]),erlang:halt()' 3< \\\n  <(echo '[{kernel, [{logger_level, warning}]}].')\n  {ok,warning}\n  ```\n\n  ```text\n  $ echo '[{kernel, [{logger_level, warning}]}].' > test1.config\n  $ echo '[{kernel, [{logger_level, error}]}].' > test2.config\n  $ erl \\\n  -noshell \\\n  -configfd 3 \\\n  -configfd 4 \\\n  -eval \\\n  'io:format(\"~p~n\",[application:get_env(kernel, logger_level)]),erlang:halt()' \\\n  3  #### Warning {: .warning }\n  >\n  > Starting a distributed node without also specifying\n  > [`-proto_dist inet_tls`](#proto_dist) will expose the node to\n  > attacks that may give the attacker complete access to the node and in\n  > extension the cluster. When using un-secure distributed nodes, make sure\n  > that the network is configured to keep potential attackers out.\n\n- **`-no_epmd`** - Specifies that the distributed node does not need\n  [epmd](epmd_cmd.md) at all.\n\n  This option ensures that the Erlang runtime system does not start\n  [epmd](epmd_cmd.md) and does not start the `m:erl_epmd` process for\n  distribution either.\n\n  This option only works if Erlang is started as a distributed node with the\n  [\\-proto_dist](#proto_dist) option using an alternative protocol for\n  Erlang distribution which does not rely on epmd for node registration and\n  discovery. For more information, see\n  [How to implement an Alternative Carrier for the Erlang Distribution](alt_dist.md).\n\n- **`-noinput`{: #noinput }** - Ensures that the Erlang runtime system never\n  tries to read any input. Implies `-noshell`.\n\n- **`-noshell`{: #noshell }** - Starts an Erlang runtime system with no shell.\n  This flag makes it possible to have the Erlang runtime system as a component\n  in a series of Unix pipes.\n\n- **`-nostick`** - Disables the sticky directory facility of the Erlang code\n  server; see `m:code`.\n\n- **`-oldshell`** - Invokes the old Erlang shell from Erlang/OTP 3.3. The old\n  shell can still be used.\n\n- **`-pa Dir1 Dir2 ...`** - Adds the specified directories to the beginning of\n  the code path, similar to `code:add_pathsa/1`. Note that the order of the\n  given directories will be reversed in the resulting path.\n\n  As an alternative to `-pa`, if several directories are to be prepended to the\n  code path and the directories have a common parent directory, that parent\n  directory can be specified in environment variable `ERL_LIBS`; see `m:code`.\n\n- **`-pz Dir1 Dir2 ...`** - Adds the specified directories to the end of the\n  code path, similar to `code:add_pathsz/1`; see `m:code`.\n\n- **`-path Dir1 Dir2 ...`** - Replaces the path specified in the boot script;\n  see [`script(4)`](`e:sasl:script.md`).\n\n- **`-proto_dist Proto`**{: #proto_dist } -  Specifies a protocol for Erlang\n  distribution:\n\n  - **`inet_tcp`** - TCP over IPv4 (the default)\n\n  - **`inet_tls`** - Distribution over TLS/SSL, See the\n    [Using SSL for Erlang Distribution](`e:ssl:ssl_distribution.md`) User's\n    Guide for details on how to setup a secure distributed node.\n\n  - **`inet6_tcp`** - TCP over IPv6\n\n  For example, to start up IPv6 distributed nodes:\n\n  ```text\n  % erl -name test@ipv6node.example.com -proto_dist inet6_tcp\n  ```\n\n- **`-remsh Node`{: #remsh }** - Starts Erlang with a remote shell connected to\n  `Node`.\n\n  If no `-name` or `-sname` is given the node will be started using\n  `-sname undefined`. If `Node` does not contain a hostname, one is\n  automatically taken from `-name` or `-sname`\n\n  > #### Note {: .info }\n  >\n  > Before OTP-23 the user _needed_ to supply a valid `-sname` or `-name` for\n  > `-remsh` to work. This is still the case if the target node is not running\n  > OTP-23 or later.\n\n  > #### Note {: .info }\n  >\n  > The connecting node needs to have a proper shell with terminal emulation.\n  > This means that UNIX users must use an Erlang compiled with terminal\n  > capabilities and before Erlang/OTP 25 Windows users must use\n  > [`werl`](werl_cmd.md).\n\n- **`-rsh Program`** - Specifies an alternative to `ssh` for starting a slave\n  node on a remote host; see `m:slave`.\n\n- **`-S Mod [Func [Arg1, Arg2, ...]]` (init flag)** - Makes `init` call the\n  specified function. `Func` defaults to `start`. The function is assumed to be\n  of arity 1, taking the list `[Arg1,Arg2,...]` as argument, or an empty list if\n  no arguments are passed. All further arguments occurring after this option are\n  passed to the specified function as strings. Implies `-noshell`. See `m:init`.\n\n- **`-run Mod [Func [Arg1, Arg2, ...]]` (init flag)** - Makes `init` call the\n  specified function. `Func` defaults to `start`. If no arguments are provided,\n  the function is assumed to be of arity 0. Otherwise it is assumed to be of\n  arity 1, taking the list `[Arg1,Arg2,...]` as argument. All arguments are\n  passed as strings. See `m:init`.\n\n- **`-s Mod [Func [Arg1, Arg2, ...]]` (init flag)** - Makes `init` call the\n  specified function. `Func` defaults to `start`. If no arguments are provided,\n  the function is assumed to be of arity 0. Otherwise it is assumed to be of\n  arity 1, taking the list `[Arg1,Arg2,...]` as argument. All arguments are\n  passed as atoms. See `m:init`.\n\n- **`-setcookie Cookie`{: #setcookie }** - Sets the magic cookie of the node to\n  `Cookie`; see `erlang:set_cookie/1`. See see section\n  [Distributed Erlang](`e:system:distributed.md`) in the Erlang Reference Manual\n  for more details.\n\n- **`-setcookie Node Cookie`** - Sets the magic cookie for `Node` to `Cookie`;\n  see `erlang:set_cookie/2`.\n\n- **`-shutdown_time Time`** - Specifies how long time (in milliseconds) the\n  `init` process is allowed to spend shutting down Erlang applications in the\n  system. If `Time` milliseconds have elapsed, all processes still existing\n  are killed. Defaults to `infinity`.\n\n- **`-sname Name`{: #sname }** - Makes the Erlang runtime system into a\n  distributed node, similar to [`-name`](#name), but the host name\n  portion of the node name `Name@Host` will be the short name, not fully\n  qualified.\n\n  This is sometimes the only way to run distributed Erlang if the Domain Name\n  System (DNS) is not running. No communication can exist between nodes running\n  with flag `-sname` and those running with flag `-name`, as node names must be\n  unique in distributed Erlang systems.\n\n  If `Name` is set to _`undefined`_ the node will be started in a special mode\n  optimized to be the temporary client of another node. The node will then\n  request a dynamic node name from the first node it connects to. Read more in\n  [Dynamic Node Name](`e:system:distributed.md#dyn_node_name`).\n\n  > #### Warning {: .warning }\n  >\n  > Starting a distributed node without also specifying\n  > [`-proto_dist inet_tls`](#proto_dist) will expose the node to\n  > attacks that may give the attacker complete access to the node and in\n  > extension the cluster. When using un-secure distributed nodes, make sure\n  > that the network is configured to keep potential attackers out.\n\n- **`-start_epmd true | false`{: #start_epmd }** - Specifies whether Erlang\n  should start [epmd](epmd_cmd.md) on startup. By default this is `true`, but if\n  you prefer to start epmd manually, set this to `false`.\n\n  This only applies if Erlang is started as a distributed node, i.e. if `-name`\n  or `-sname` is specified. Otherwise, epmd is not started even if\n  `-start_epmd true` is given.\n\n  Note that a distributed node will fail to start if epmd is not running.\n\n- **`-version` (emulator flag)** - Makes the emulator print its version number.\n  The same as `erl +V`.","ref":"erl_cmd.html#flags"},{"type":"extras","title":"Emulator Flags - erl","doc":"`erl` invokes the code for the Erlang emulator (virtual machine), which supports\nthe following flags. The flags are read from left to right and later flags override the\nbehavior of earlier flags.\n\n- **`+a size`{: #async_thread_stack_size }** - Suggested stack size, in\n  kilowords, for threads in the async thread pool. Valid range is 16-8192\n  kilowords. The default suggested stack size is 16 kilowords, that is, 64\n  kilobyte on 32-bit architectures. This small default size has been chosen\n  because the number of async threads can be large. The default size is enough\n  for drivers delivered with Erlang/OTP, but might not be large enough for other\n  dynamically linked-in drivers that use the\n  [`driver_async()`](erl_driver.md#driver_async) functionality. Notice that the\n  value passed is only a suggestion, and it can even be ignored on some\n  platforms.\n\n- **`+A size`{: #async_thread_pool_size }** - Sets the number of threads in\n  async thread pool. Valid range is 1-1024. The async thread pool is used by\n  linked-in drivers to handle work that may take a very long time.\n  Since OTP 21, the default Erlang/OTP distribution includes few\n  linked-in drivers that use the async thread pool. Most of them have\n  been migrated to dirty IO schedulers. Defaults to 1.\n\n- **`+B [c | d | i]`** - Option `c` makes `Ctrl-C` interrupt the current shell\n  instead of invoking the emulator break handler. Option `d` (same as specifying\n  `+B` without an extra option) disables the break handler. Option `i` makes the\n  emulator ignore any break signal.\n\n  If option `c` is used with `oldshell` on Unix, `Ctrl-C` will restart the shell\n  process rather than interrupt it.\n\n- **`+c true | false`{: #+c }** - Enables or disables\n  [time correction](time_correction.md#time-correction):\n\n  - **`true`** - Enables time correction. This is the default if time correction\n    is supported on the specific platform.\n\n  - **`false`** - Disables time correction.\n\n  For backward compatibility, the boolean value can be omitted. This is\n  interpreted as `+c false`.\n\n- **`+C no_time_warp | single_time_warp | multi_time_warp`{: #+C_ }** - Sets\n  [time warp mode](time_correction.md#time-warp-modes):\n\n  - **`no_time_warp`** -\n    [No time warp mode](time_correction.md#no-time-warp-mode) (the default)\n\n  - **`single_time_warp`** -\n    [Single time warp mode](time_correction.md#single-time-warp-mode)\n\n  - **`multi_time_warp`** -\n    [Multi-time warp mode](time_correction.md#multi-time-warp-mode)\n\n- **`+d`** - If the emulator detects an internal error (or runs out of memory),\n  it, by default, generates both a crash dump and a core dump. The core dump is,\n  however, not very useful as the content of process heaps is destroyed by the\n  crash dump generation.\n\n  Option `+d` instructs the emulator to produce only a core dump and no crash\n  dump if an internal error is detected.\n\n  Calling `erlang:halt/1` with a string argument still produces a crash dump. On\n  Unix systems, sending an emulator process a `SIGUSR1` signal also forces a\n  crash dump.\n\n- **`+dcg DecentralizedCounterGroupsLimit`{: #+dcg }** - Limits the number of\n  decentralized counter groups used by decentralized counters optimized for\n  update operations in the Erlang runtime system. By default, the limit is 256.\n\n  When the number of schedulers is less than or equal to the limit, each\n  scheduler has its own group. When the number of schedulers is larger than the\n  groups limit, schedulers share groups. Shared groups degrade the performance\n  for updating counters while many reader groups degrade the performance for\n  reading counters. So, the limit is a tradeoff between performance for update\n  operations and performance for read operations. Each group consumes 64 bytes\n  in each counter.\n\n  Note that a runtime system using decentralized counter groups benefits from\n  [binding schedulers to logical processors](#%2Bsbt), as the groups\n  are distributed better between schedulers with this option.\n\n  This option only affects decentralized counters used for the counters that are\n  keeping track of the memory consumption and the number of terms in ETS tables\n  of type ordered_set with the write_concurrency option activated.\n\n- **`+e Number`{: #+e }** - Sets the maximum number of ETS tables. This limit is\n  [partially obsolete](`m:ets#max_ets_tables`).\n\n- **`+ec`** - Forces option `compressed` on all ETS tables. Only intended for\n  test and evaluation.\n\n- **`+fnl`{: #file_name_encoding }** - The virtual machine works with filenames\n  as if they are encoded using the ISO Latin-1 encoding, disallowing Unicode\n  characters with code points > 255.\n\n  For more information about Unicode filenames, see section\n  [Unicode Filenames](`e:stdlib:unicode_usage.md#unicode_file_names`) in the\n  STDLIB User's Guide. Notice that this value also applies to command-line\n  parameters and environment variables (see section\n  [Unicode in Environment and Parameters](`e:stdlib:unicode_usage.md#unicode_in_environment_and_parameters`)\n  in the STDLIB User's Guide).\n\n- **`+fnu[{w|i|e}]`** - The virtual machine works with filenames as if they are\n  encoded using UTF-8 (or some other system-specific Unicode encoding). This is\n  the default on operating systems that enforce Unicode encoding, that is,\n  Windows MacOS X and Android.\n\n  The `+fnu` switch can be followed by `w`, `i`, or `e` to control how wrongly\n  encoded filenames are to be reported:\n\n  - `w` means that a warning is sent to the `error_logger` whenever a wrongly\n    encoded filename is \"skipped\" in directory listings. This is the default.\n  - `i` means that those wrongly encoded filenames are silently ignored.\n  - `e` means that the API function returns an error whenever a wrongly encoded\n    filename (or directory name) is encountered.\n\n  Notice that `file:read_link/1` always returns an error if the link points to\n  an invalid filename.\n\n  For more information about Unicode filenames, see section\n  [Unicode Filenames](`e:stdlib:unicode_usage.md#unicode_file_names`) in the\n  STDLIB User's Guide. Notice that this value also applies to command-line\n  parameters and environment variables (see section\n  [Unicode in Environment and Parameters](`e:stdlib:unicode_usage.md#unicode_in_environment_and_parameters`)\n  in the STDLIB User's Guide).\n\n- **`+fna[{w|i|e}]`** - Selection between `+fnl` and `+fnu` is done based on the\n  current locale settings in the OS. This means that if you have set your\n  terminal for UTF-8 encoding, the filesystem is expected to use the same\n  encoding for filenames. This is the default on all operating systems, except\n  Android, MacOS X and Windows.\n\n  The `+fna` switch can be followed by `w`, `i`, or `e`. This has effect if the\n  locale settings cause the behavior of `+fnu` to be selected; see the\n  description of `+fnu` above. If the locale settings cause the behavior of\n  `+fnl` to be selected, then `w`, `i`, or `e` have no effect.\n\n  For more information about Unicode filenames, see section\n  [Unicode Filenames](`e:stdlib:unicode_usage.md#unicode_file_names`) in the\n  STDLIB User's Guide. Notice that this value also applies to command-line\n  parameters and environment variables (see section\n  [Unicode in Environment and Parameters](`e:stdlib:unicode_usage.md#unicode_in_environment_and_parameters`)\n  in the STDLIB User's Guide).\n\n- **`+hms Size`** - Sets the default heap size of processes to the size `Size`\n  words.\n\n- **`+hmbs Size`** - Sets the default binary virtual heap size of processes to\n  the size `Size` words.\n\n- **`+hmax Size`{: #+hmax }** - Sets the default maximum heap size of processes\n  to the size `Size` words. Defaults to `0`, which means that no maximum heap\n  size is used. For more information, see\n  [`process_flag(max_heap_size, MaxHeapSize)`](`m:erlang#process_flag_max_heap_size`).\n\n- **`+hmaxel true|false`{: #+hmaxel }** - Sets whether to send an error logger\n  message or not for processes reaching the maximum heap size. Defaults to\n  `true`. For more information, see\n  [`process_flag(max_heap_size, MaxHeapSize)`](`m:erlang#process_flag_max_heap_size`).\n\n- **`+hmaxib true|false`{: #+hmaxib }** - Sets whether to include the size of\n  shared off-heap binaries in the sum compared against the maximum heap size.\n  Defaults to `false`. For more information, see\n  [`process_flag(max_heap_size, MaxHeapSize)`](`m:erlang#process_flag_max_heap_size`).\n\n- **`+hmaxk true|false`{: #+hmaxk }** - Sets whether to kill processes reaching\n  the maximum heap size or not. Default to `true`. For more information, see\n  [`process_flag(max_heap_size, MaxHeapSize)`](`m:erlang#process_flag_max_heap_size`).\n\n- **`+hpds Size`** - Sets the initial process dictionary size of processes to\n  the size `Size`.\n\n- **`+hmqd off_heap|on_heap`{: #+hmqd }** - Sets the default value of the\n  `message_queue_data` process flag. Defaults to `on_heap`. If `+hmqd` is not\n  passed, `on_heap` will be the default. For more information, see\n  [`process_flag(message_queue_data, MQD)`](`m:erlang#process_flag_message_queue_data`).\n\n- **`+IOp PollSets`{: #+IOp }** - Sets the number of IO pollsets to use when\n  polling for I/O. This option is only used on platforms that support concurrent\n  updates of a pollset, otherwise the same number of pollsets are used as IO\n  poll threads. The default is 1.\n\n- **`+IOt PollThreads`{: #+IOt }** - Sets the number of IO poll threads to use\n  when polling for I/O. The maximum number of poll threads allowed is 1024. The\n  default is 1.\n\n  A good way to check if more IO poll threads are needed is to use\n  [microstate accounting](`m:msacc`) and see what the load of the IO poll thread\n  is. If it is high it could be a good idea to add more threads.\n\n- **`+IOPp PollSetsPercentage`{: #+IOPp }** - Similar to\n  [`+IOp`](#%2BIOp) but uses percentages to set the number of IO\n  pollsets to create, based on the number of poll threads configured. If both\n  `+IOPp` and `+IOp` are used, `+IOPp` is ignored.\n\n- **`+IOPt PollThreadsPercentage`{: #+IOPt }** - Similar to\n  [`+IOt`](#%2BIOt) but uses percentages to set the number of IO poll\n  threads to create, based on the number of schedulers configured. If both\n  `+IOPt` and `+IOt` are used, `+IOPt` is ignored.\n\n- **`+IOs true|false`{: #+IOs }** - Enable or disable scheduler thread poll\n  optimization. Default is `true`.\n\n  If enabled, file descriptors that are frequently read may be moved to a\n  special pollset used by scheduler threads. The objective is to reduce the\n  number of system calls and thereby CPU load, but it can in some cases increase\n  scheduling latency for individual file descriptor input events.\n\n- **`+JPcover true|false|function|function_counters|line|line_counters`{:\n  #+JPcover }**\n\n  Enables or disables support for coverage when running with the JIT. Defaults\n  to false.\n\n  - **`function`** - All modules that are loaded will be instrumented to keep\n    track of which functions are executed. Information about which functions\n    that have been executed can be retrieved by calling\n    [`code:get_coverage(function, Module)`](`code:get_coverage/2`).\n\n  - **`function_counters`** - All modules that are loaded will be instrumented\n    to count how many times each function is executed. Information about how\n    many times each function has been executed can be retrieved by calling\n    [`code:get_coverage(function, Module)`](`code:get_coverage/2`).\n\n  - **`line`** - When modules that have been compiled with the\n    [`line_coverage`](`m:compile#line_coverage`) option are loaded, they will be\n    instrumented to keep track of which lines have been executed. Information\n    about which lines have been executed can be retrieved by calling\n    [`code:get_coverage(line, Module)`](`code:get_coverage/2`), and information\n    about which functions that have been executed can be retrieved by calling\n    [`code:get_coverage(function, Module)`](`code:get_coverage/2`).\n\n  - **`line_counters`** - When modules that have been compiled with the\n    [`line_coverage`](`m:compile#line_coverage`) option are loaded, they will be\n    instrumented to count the number of times each line is executed. Information\n    about how many times each line has been executed can be retrieved by calling\n    [`code:get_coverage(line, Module)`](`code:get_coverage/2`), and information\n    about which functions that have been executed can be retrieved by calling\n    [`code:get_coverage(function, Module)`](`code:get_coverage/2`) (note that in\n    this mode, counters for the number of times each function has been executed\n    **cannot** be retrieved).\n\n  - **`true`** - Same as `line_counters`.\n\n  - **`false`** - Disables coverage.\n\n  Since: OTP 27.0\n\n- **`+JPperf true|false|dump|map|fp|no_fp`{: #+JPperf }** - Enables or disables\n  support for the `perf` profiler when running with the JIT on Linux. Defaults\n  to false.\n\n  This option can be combined multiple times to enable several options:\n\n  - **`dump`** - Gives `perf` detailed line information, so that the\n    `perf annotate` feature works.\n\n  - **`map`** - Gives `perf` a map over all module code, letting it translate\n    machine code addresses to Erlang source code locations. This also enables\n    frame pointers for Erlang code so that `perf` can walk the call stacks of\n    Erlang processes, which costs one extra word per stack frame.\n\n  - **`fp`** - Enables frame pointers independently of the `map` option.\n\n  - **`no_fp`** - Disables the frame pointers added by the `map` option.\n\n  - **`true`** - Enables `map` and `dump`.\n\n  - **`false`** - Disables all other options.\n\n  For more details about how to run perf see the\n  [perf support](BeamAsm.md#linux-perf-support) section in the BeamAsm internal\n  documentation.\n\n- **`+JPperfdirectory  `{: #+JPperfdirectory }** - Set the directory\n  used to store `perf` dump and map files when running with the JIT on Linux.\n  Defaults to `/tmp`.\n\n- **`+JMsingle true|false`{: #+JMsingle }** - Enables or disables the use of\n  single-mapped RWX memory for JIT code.\n\n  The default is to map JIT:ed machine code into two regions sharing the same\n  physical pages, where one region is executable but not writable, and the other\n  writable but not executable. As some tools, such as QEMU user mode emulation,\n  cannot deal with the dual mapping, this flags allows it to be disabled. This\n  flag is automatically enabled by the [`+JPperf`](#%2BJPperf) flag.\n\n  Since: OTP 26.0\n\n- **`+L`** - Prevents loading information about source filenames and line\n  numbers. This saves some memory, but exceptions do not contain information\n  about the filenames and line numbers.\n\n- **`+MFlag Value`{: #erts_alloc }** - Memory allocator-specific flags. For more\n  information, see [`erts_alloc(3)`](erts_alloc.md).\n\n- **`+pad true|false`{: #+pad }** - The boolean value used with the `+pad`\n  parameter determines the default value of the [`async_dist`](`m:erlang#process_flag_async_dist`) process flag of newly spawned processes.\n\n  By default, if no `+pad` command line option is\n  passed, the `async_dist` flag will be set to `false`.\n\n  The value used in runtime can be inspected by calling\n  [`erlang:system_info(async_dist)`](`m:erlang#system_info_async_dist`).\n\n  Since: OTP 25.3\n\n- **[](){: #%2Bpc } `+pc Range`{: #printable_character_range }** -\n  Sets the range of characters that the system considers printable in heuristic\n  detection of strings. This typically affects the shell, debugger, and\n  `io:format` functions (when `~tp` is used in the format string).\n\n  Two values are supported for `Range`:\n\n  - **`latin1`** - The default. Only characters in the ISO Latin-1 range can be\n    considered printable. This means that a character with a code point > 255 is\n    never considered printable and that lists containing such characters are\n    displayed as lists of integers rather than text strings by tools.\n\n  - **`unicode`** - All printable Unicode characters are considered when\n    determining if a list of integers is to be displayed in string syntax. This\n    can give unexpected results if, for example, your font does not cover all\n    Unicode characters.\n\n  See also `io:printable_range/0` in STDLIB.\n\n- **[](){: #%2BP } `+P Number`{: #max_processes }** -\n  Sets the maximum number of simultaneously existing processes for this system\n  if a `Number` is passed as value. Valid range for `Number` is\n  `[1024-134217727]`.\n\n  > #### Note {: .info }\n  >\n  > The actual maximum chosen may be much larger than the `Number`\n  > passed. Currently the runtime system often, but not always,\n  > chooses a value that is a power of 2. This might, however, be\n  > changed in the future. The actual value chosen can be checked by\n  > calling\n  > [erlang:system_info(process_limit)](`m:erlang#system_info_process_limit`).\n\n  The default value is `1048576`\n\n- **[](){: #%2BQ } `+Q Number`{: #max_ports }** -\n  Sets the maximum number of simultaneously existing ports for this system if a\n  Number is passed as value. Valid range for `Number` is `[1024-134217727]`.\n\n  > #### Note {: .info }\n  >\n  > The actual maximum chosen may be much larger than the actual\n  > `Number` passed. Currently the runtime system often, but not\n  > always, chooses a value that is a power of 2. This might, however,\n  > be changed in the future. The actual value chosen can be checked\n  > by calling\n  > [`erlang:system_info(port_limit)`](`m:erlang#system_info_port_limit`).\n\n  The default value used is normally `65536`. However, if the runtime system is\n  able to determine maximum amount of file descriptors that it is allowed to\n  open and this value is larger than `65536`, the chosen value will increased to\n  a value larger or equal to the maximum amount of file descriptors that can be\n  opened.\n\n  On Windows the default value is set to `8196` because the normal OS\n  limitations are set higher than most machines can handle.\n\n- **`+r`** - Forces ETS memory blocks to be moved on reallocation.\n\n- **`+rg ReaderGroupsLimit`{: #+rg }** - Limits the number of reader groups used\n  by read/write locks optimized for read operations in the Erlang runtime\n  system. By default the reader groups limit is 64.\n\n  When the number of schedulers is less than or equal to the reader groups\n  limit, each scheduler has its own reader group. When the number of schedulers\n  is larger than the reader groups limit, schedulers share reader groups. Shared\n  reader groups degrade read lock and read unlock performance while many reader\n  groups degrade write lock performance. So, the limit is a tradeoff between\n  performance for read operations and performance for write operations. Each\n  reader group consumes 64 byte in each read/write lock.\n\n  Notice that a runtime system using shared reader groups benefits from\n  [binding schedulers to logical processors](#%2Bsbt), as the reader\n  groups are distributed better between schedulers.\n\n- **`+S Schedulers:SchedulerOnline`{: #+S }** - Sets the number of scheduler\n  threads to create and scheduler threads to set online. The maximum for both\n  values is 1024. If the Erlang runtime system is able to determine the number\n  of logical processors configured and logical processors available,\n  `Schedulers` defaults to logical processors configured, and `SchedulersOnline`\n  defaults to logical processors available; otherwise the default values are 1.\n  If the emulator detects that it is subject to a\n  [CPU quota](`m:erlang#system_info_cpu_quota`), the default value for\n  `SchedulersOnline` will be limited accordingly.\n\n  `Schedulers` can be omitted if `:SchedulerOnline` is not and conversely. The\n  number of schedulers online can be changed at runtime through\n  [`erlang:system_flag(schedulers_online, SchedulersOnline)`](`m:erlang#system_flag_schedulers_online`).\n\n  If `Schedulers` or `SchedulersOnline` is specified as a negative number, the\n  value is subtracted from the default number of logical processors configured\n  or logical processors available, respectively.\n\n  Specifying value `0` for `Schedulers` or `SchedulersOnline` resets the number\n  of scheduler threads or scheduler threads online, respectively, to its default\n  value.\n\n- **`+SP SchedulersPercentage:SchedulersOnlinePercentage`{: #+SP }** - Similar\n  to [`+S`](#%2BS) but uses percentages to set the number of scheduler\n  threads to create, based on logical processors configured, and scheduler\n  threads to set online, based on logical processors available. Specified values\n  must be > 0. For example, `+SP 50:25` sets the number of scheduler threads to\n  50% of the logical processors configured, and the number of scheduler threads\n  online to 25% of the logical processors available. `SchedulersPercentage` can\n  be omitted if `:SchedulersOnlinePercentage` is not and conversely. The number\n  of schedulers online can be changed at runtime through\n  [`erlang:system_flag(schedulers_online, SchedulersOnline)`](`m:erlang#system_flag_schedulers_online`).\n\n  This option interacts with [`+S`](#%2BS) settings. For example, on a\n  system with 8 logical cores configured and 8 logical cores available, the\n  combination of the options `+S 4:4 +SP 50:25` (in either order) results in 2\n  scheduler threads (50% of 4) and 1 scheduler thread online (25% of 4).\n\n- **`+SDcpu DirtyCPUSchedulers:DirtyCPUSchedulersOnline`{: #+SDcpu }** - Sets\n  the number of dirty CPU scheduler threads to create and dirty CPU scheduler\n  threads to set online. The maximum for both values is 1024, and each value is\n  further limited by the settings for normal schedulers:\n\n  - The number of dirty CPU scheduler threads created cannot exceed the number\n    of normal scheduler threads created.\n  - The number of dirty CPU scheduler threads online cannot exceed the number of\n    normal scheduler threads online.\n\n  For details, see [`+S`](#%2BS) and [`+SP`](#%2BSP). By\n  default, the number of dirty CPU scheduler threads created equals the number\n  of normal scheduler threads created, and the number of dirty CPU scheduler\n  threads online equals the number of normal scheduler threads online.\n  `DirtyCPUSchedulers` can be omitted if `:DirtyCPUSchedulersOnline` is not and\n  conversely. The number of dirty CPU schedulers online can be changed at\n  runtime through\n  [`erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)`](`m:erlang#system_flag_dirty_cpu_schedulers_online`).\n\n  The amount of dirty CPU schedulers is limited by the amount of normal\n  schedulers in order to limit the effect on processes executing on ordinary\n  schedulers. If the amount of dirty CPU schedulers was allowed to be unlimited,\n  dirty CPU bound jobs would potentially starve normal jobs.\n\n  Typical users of the dirty CPU schedulers are large garbage collections, json\n  protocol encode/decoders written as nifs and matrix manipulation libraries.\n\n  You can use `m:msacc` in order to see the current load of the dirty CPU\n  schedulers threads and adjust the number used accordingly.\n\n- **`+SDPcpu DirtyCPUSchedulersPercentage:DirtyCPUSchedulersOnlinePercentage`{:\n  #+SDPcpu }** - Similar to [`+SDcpu`](#%2BSDcpu) but uses percentages\n  to set the number of dirty CPU scheduler threads to create and the number of\n  dirty CPU scheduler threads to set online. Specified values must be > 0. For\n  example, `+SDPcpu 50:25` sets the number of dirty CPU scheduler threads to 50%\n  of the logical processors configured and the number of dirty CPU scheduler\n  threads online to 25% of the logical processors available.\n  `DirtyCPUSchedulersPercentage` can be omitted if\n  `:DirtyCPUSchedulersOnlinePercentage` is not and conversely. The number of\n  dirty CPU schedulers online can be changed at runtime through\n  [`erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)`](`m:erlang#system_flag_dirty_cpu_schedulers_online`).\n\n  This option interacts with [`+SDcpu`](#%2BSDcpu) settings. For\n  example, on a system with 8 logical cores configured and 8 logical cores\n  available, the combination of the options `+SDcpu 4:4 +SDPcpu 50:25` (in\n  either order) results in 2 dirty CPU scheduler threads (50% of 4) and 1 dirty\n  CPU scheduler thread online (25% of 4).\n\n- **`+SDio DirtyIOSchedulers`{: #+SDio }** - Sets the number of dirty I/O\n  scheduler threads to create. Valid range is 1-1024. By default, the number of\n  dirty I/O scheduler threads created is 10.\n\n  The amount of dirty IO schedulers is not limited by the amount of normal\n  schedulers [like the amount of dirty CPU schedulers](#%2BSDcpu).\n  This since only I/O bound work is expected to execute on dirty I/O schedulers.\n  If the user should schedule CPU bound jobs on dirty I/O schedulers, these jobs\n  might starve ordinary jobs executing on ordinary schedulers.\n\n  Typical users of the dirty IO schedulers are reading and writing to files.\n\n  You can use `m:msacc` in order to see the current load of the dirty IO\n  schedulers threads and adjust the number used accordingly.\n\n- **`+sFlag Value`** - Scheduling specific flags.\n\n  - **`+sbt BindType`{: #+sbt }** - Sets scheduler bind type.\n\n    Schedulers can also be bound using flag [`+stbt`](#%2Bstbt). The\n    only difference between these two flags is how the following errors are\n    handled:\n\n    - Binding of schedulers is not supported on the specific platform.\n    - No available CPU topology. That is, the runtime system was not able to\n      detect the CPU topology automatically, and no\n      [user-defined CPU topology](#%2Bsct) was set.\n\n    If any of these errors occur when `+sbt` has been passed, the runtime system\n    prints an error message, and refuses to start. If any of these errors occur\n    when `+stbt` has been passed, the runtime system silently ignores the error,\n    and start up using unbound schedulers.\n\n    Valid `BindType`s:\n\n    - **`u`** - `unbound` \\- Schedulers are not bound to logical processors,\n      that is, the operating system decides where the scheduler threads execute,\n      and when to migrate them. This is the default.\n\n    - **`ns`** - `no_spread` \\- Schedulers with close scheduler identifiers are\n      bound as close as possible in hardware.\n\n    - **`ts`** - `thread_spread` \\- Thread refers to hardware threads (such as\n      Intel's hyper-threads). Schedulers with low scheduler identifiers, are\n      bound to the first hardware thread of each core, then schedulers with\n      higher scheduler identifiers are bound to the second hardware thread of\n      each core,and so on.\n\n    - **`ps`** - `processor_spread` \\- Schedulers are spread like\n      `thread_spread`, but also over physical processor chips.\n\n    - **`s`** - `spread` \\- Schedulers are spread as much as possible.\n\n    - **`nnts`** - `no_node_thread_spread` \\- Like `thread_spread`, but if\n      multiple Non-Uniform Memory Access (NUMA) nodes exist, schedulers are\n      spread over one NUMA node at a time, that is, all logical processors of\n      one NUMA node are bound to schedulers in sequence.\n\n    - **`nnps`** - `no_node_processor_spread` \\- Like `processor_spread`, but if\n      multiple NUMA nodes exist, schedulers are spread over one NUMA node at a\n      time, that is, all logical processors of one NUMA node are bound to\n      schedulers in sequence.\n\n    - **`tnnps`** - `thread_no_node_processor_spread` \\- A combination of\n      `thread_spread`, and `no_node_processor_spread`. Schedulers are spread\n      over hardware threads across NUMA nodes, but schedulers are only spread\n      over processors internally in one NUMA node at a time.\n\n    - **`db`** - `default_bind` \\- Binds schedulers the default way. Defaults to\n      `thread_no_node_processor_spread` (which can change in the future).\n\n    Binding of schedulers is only supported on newer Linux, Solaris, FreeBSD,\n    and Windows systems.\n\n    If no CPU topology is available when flag `+sbt` is processed and `BindType`\n    is any other type than `u`, the runtime system fails to start. CPU topology\n    can be defined using flag [`+sct`](#%2Bsct). Notice that flag\n    `+sct` can have to be passed before flag `+sbt` on the command line (if no\n    CPU topology has been automatically detected).\n\n    The runtime system does by default _not_ bind schedulers to logical\n    processors.\n\n    > #### Note {: .info }\n    >\n    > If the Erlang runtime system is the only operating system process that\n    > binds threads to logical processors, this improves the performance of the\n    > runtime system. However, if other operating system processes (for example\n    > another Erlang runtime system) also bind threads to logical processors,\n    > there can be a performance penalty instead. This performance penalty can\n    > sometimes be severe. If so, you are advised not to bind the schedulers.\n\n    How schedulers are bound matters. For example, in situations when there are\n    fewer running processes than schedulers online, the runtime system tries to\n    migrate processes to schedulers with low scheduler identifiers. The more the\n    schedulers are spread over the hardware, the more resources are available to\n    the runtime system in such situations.\n\n    > #### Note {: .info }\n    >\n    > If a scheduler fails to bind, this is often silently ignored, as it is not\n    > always possible to verify valid logical processor identifiers. If an error\n    > is reported, it is reported to the `error_logger`. If you want to verify\n    > that the schedulers have bound as requested, call\n    > [`erlang:system_info(scheduler_bindings)`](`m:erlang#system_info_scheduler_bindings`).\n\n  - **`+sbwt none|very_short|short|medium|long|very_long`{: #+sbwt }** - Sets\n    scheduler busy wait threshold. Defaults to `medium`. The threshold\n    determines how long schedulers are to busy wait when running out of work\n    before going to sleep.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n  - **`+sbwtdcpu none|very_short|short|medium|long|very_long`{: #+sbwtdcpu }** -\n    As [`+sbwt`](#%2Bsbwt) but affects dirty CPU schedulers. Defaults\n    to `short`.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n  - **`+sbwtdio none|very_short|short|medium|long|very_long`{: #+sbwtdio }** -\n    As [`+sbwt`](#%2Bsbwt) but affects dirty IO schedulers. Defaults\n    to `short`.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n  - **`+scl true|false`{: #+scl }** - Enables or disables scheduler compaction\n    of load. By default scheduler compaction of load is enabled. When enabled,\n    load balancing strives for a load distribution, which causes as many\n    scheduler threads as possible to be fully loaded (that is, not run out of\n    work). This is accomplished by migrating load (for example, runnable\n    processes) into a smaller set of schedulers when schedulers frequently run\n    out of work. When disabled, the frequency with which schedulers run out of\n    work is not taken into account by the load balancing logic.\n\n    `+scl false` is similar to [`+sub true`](#%2Bsub), but `+sub true`\n    also balances scheduler utilization between schedulers.\n\n  - **`+sct CpuTopology`{: #+sct }** - Sets a user-defined CPU topology.\n    The user-defined CPU topology overrides\n    any automatically detected CPU topology. The CPU topology is used when\n    [binding schedulers to logical processors](#%2Bsbt). This option must be before\n    [`+sbt`](#%2Bsbt) on the command-line.\n\n    ```\n      = integer(); when 0 =<   =< 65535\n      =  - \n      =   |  \n      =  ,  |  \n      = L \n      = T  | t \n      = C  | c \n      = P  | p \n      = N  | n \n      =       |\n                    \n    CpuTopology =  :  |  \n    ```\n\n    Uppercase letters signify real identifiers and lowercase letters signify\n    fake identifiers only used for description of the topology. Identifiers\n    passed as real identifiers can be used by the runtime system when trying to\n    access specific hardware; if they are incorrect the behavior is undefined.\n    Faked logical CPU identifiers are not accepted, as there is no point in\n    defining the CPU topology without real logical CPU identifiers. Thread,\n    core, processor, and node identifiers can be omitted. If omitted, the thread\n    ID defaults to `t0`, the core ID defaults to `c0`, the processor ID defaults\n    to `p0`, and the node ID is left undefined. Either each logical processor\n    must belong to only one NUMA node, or no logical processors must belong to\n    any NUMA nodes.\n\n    Both increasing and decreasing ` `s are allowed.\n\n    NUMA node identifiers are system wide. That is, each NUMA node on the system\n    must have a unique identifier. Processor identifiers are also system wide.\n    Core identifiers are processor wide. Thread identifiers are core wide.\n\n    The order of the identifier types implies the hierarchy of the CPU topology.\n    The valid orders are as follows:\n\n    - `     `, that is, thread\n      is part of a core that is part of a processor, which is part of a NUMA\n      node.\n    - `     `, that is, thread\n      is part of a core that is part of a NUMA node, which is part of a\n      processor.\n\n    A CPU topology can consist of both processor external, and processor\n    internal NUMA nodes as long as each logical processor belongs to only one\n    NUMA node. If ` ` is omitted, its default position is before\n    ` `. That is, the default is processor external NUMA nodes.\n\n    If a list of identifiers is used in an ` `:\n\n    - ` ` must be a list of identifiers.\n    - At least one other identifier type besides ` ` must also have a\n      list of identifiers.\n    - All lists of identifiers must produce the same number of identifiers.\n\n    A simple example. A single quad core processor can be described as follows:\n\n    ```erlang\n    % erl +sct L0-3c0-3\n    1> erlang:system_info(cpu_topology).\n    [{processor,[{core,{logical,0}},\n                 {core,{logical,1}},\n                 {core,{logical,2}},\n                 {core,{logical,3}}]}]\n    ```\n\n    A more complicated example with two quad core processors, each processor in\n    its own NUMA node. The ordering of logical processors is a bit weird. This\n    to give a better example of identifier lists:\n\n    ```erlang\n    % erl +sct L0-1,3-2c0-3p0N0:L7,4,6-5c0-3p1N1\n    1> erlang:system_info(cpu_topology).\n    [{node,[{processor,[{core,{logical,0}},\n                        {core,{logical,1}},\n                        {core,{logical,3}},\n                        {core,{logical,2}}]}]},\n     {node,[{processor,[{core,{logical,7}},\n                        {core,{logical,4}},\n                        {core,{logical,6}},\n                        {core,{logical,5}}]}]}]\n    ```\n\n    As long as real identifiers are correct, it is OK to pass a CPU topology\n    that is not a correct description of the CPU topology. When used with care\n    this can be very useful. This to trick the emulator to bind its schedulers\n    as you want. For example, if you want to run multiple Erlang runtime systems\n    on the same machine, you want to reduce the number of schedulers used and\n    manipulate the CPU topology so that they bind to different logical CPUs. An\n    example, with two Erlang runtime systems on a quad core machine:\n\n    ```text\n    % erl +sct L0-3c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname one\n    % erl +sct L3-0c0-3 +sbt db +S3:2 -detached -noinput -noshell -sname two\n    ```\n\n    In this example, each runtime system have two schedulers each online, and\n    all schedulers online will run on different cores. If we change to one\n    scheduler online on one runtime system, and three schedulers online on the\n    other, all schedulers online will still run on different cores.\n\n    Notice that a faked CPU topology that does not reflect how the real CPU\n    topology looks like is likely to decrease the performance of the runtime\n    system.\n\n    For more information, see\n    [`erlang:system_info(cpu_topology)`](`m:erlang#system_info_cpu_topology`).\n\n  - **`+ssrct`{: #+ssrct }** - Skips reading CPU topology.\n\n    > #### Note {: .info }\n    >\n    > Reading CPU topology slows down startup when starting many parallel\n    > instances of ERTS on systems with large amount of cores; using this flag\n    > might speed up execution in such scenarios.\n\n  - **`+sfwi Interval`{: #+sfwi }** - Sets scheduler-forced wakeup interval. All\n    run queues are scanned each `Interval` milliseconds. While there are\n    sleeping schedulers in the system, one scheduler is woken for each non-empty\n    run queue found. `Interval` default to `0`, meaning this feature is\n    disabled.\n\n    > #### Note {: .info }\n    >\n    > This feature has been introduced as a temporary workaround for\n    > long-executing native code, and native code that does not bump reductions\n    > properly in OTP. When these bugs have been fixed, this flag will be\n    > removed.\n\n  - **`+spp Bool`{: #+spp }** - Sets default scheduler hint for port\n    parallelism. If set to `true`, the virtual machine schedules port tasks when\n    it improves parallelism in the system. If set to `false`, the virtual\n    machine tries to perform port tasks immediately, improving latency at the\n    expense of parallelism. Default to `false`. The default used can be\n    inspected in runtime by calling\n    [`erlang:system_info(port_parallelism)`](`m:erlang#system_info_port_parallelism`).\n    The default can be overridden on port creation by passing option\n    [`parallelism`](`m:erlang#open_port_parallelism`) to `erlang:open_port/2`.\n\n  - **`+sss size`{: #sched_thread_stack_size }** - Suggested stack size, in\n    kilowords, for scheduler threads. Valid range is 20-8192 kilowords. The\n    default suggested stack size is 128 kilowords.\n\n  - **`+sssdcpu size`{: #dcpu_sched_thread_stack_size }** - Suggested stack\n    size, in kilowords, for dirty CPU scheduler threads. Valid range is 20-8192\n    kilowords. The default suggested stack size is 40 kilowords.\n\n  - **`+sssdio size`{: #dio_sched_thread_stack_size }** - Suggested stack size,\n    in kilowords, for dirty IO scheduler threads. Valid range is 20-8192\n    kilowords. The default suggested stack size is 40 kilowords.\n\n  - **`+stbt BindType`{: #+stbt }** - Tries to set the scheduler bind type. The\n    same as flag [`+sbt`](#%2Bsbt) except how some errors are handled.\n    For more information, see [`+sbt`](#%2Bsbt).\n\n  - **`+sub true|false`{: #+sub }** - Enables or disables\n    [scheduler utilization](`m:erlang#statistics_scheduler_wall_time`) balancing\n    of load. By default scheduler utilization balancing is disabled and instead\n    scheduler compaction of load is enabled, which strives for a load\n    distribution that causes as many scheduler threads as possible to be fully\n    loaded (that is, not run out of work). When scheduler utilization balancing\n    is enabled, the system instead tries to balance scheduler utilization\n    between schedulers. That is, strive for equal scheduler utilization on all\n    schedulers.\n\n    `+sub true` is only supported on systems where the runtime system detects\n    and uses a monotonically increasing high-resolution clock. On other systems,\n    the runtime system fails to start.\n\n    `+sub true` implies [`+scl false`](#%2Bscl). The difference\n    between `+sub true` and `+scl false` is that `+scl false` does not try to\n    balance the scheduler utilization.\n\n  - **`+swct very_eager|eager|medium|lazy|very_lazy`{: #+swct }** - Sets\n    scheduler wake cleanup threshold. Defaults to `medium`. Controls how eager\n    schedulers are to be requesting wakeup because of certain cleanup\n    operations. When a lazy setting is used, more outstanding cleanup operations\n    can be left undone while a scheduler is idling. When an eager setting is\n    used, schedulers are more frequently woken, potentially increasing\n    CPU-utilization.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n  - **`+sws default|legacy`{: #+sws }** - Sets scheduler wakeup strategy.\n    Default strategy changed in ERTS 5.10 (Erlang/OTP R16A). This strategy was\n    known as `proposal` in Erlang/OTP R15. The `legacy` strategy was used as\n    default from R13 up to and including R15.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n  - **`+swt very_low|low|medium|high|very_high`{: #+swt }** - Sets scheduler\n    wakeup threshold. Defaults to `medium`. The threshold determines when to\n    wake up sleeping schedulers when more work than can be handled by currently\n    awake schedulers exists. A low threshold causes earlier wakeups, and a high\n    threshold causes later wakeups. Early wakeups distribute work over multiple\n    schedulers faster, but work does more easily bounce between schedulers.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n  - **`+swtdcpu very_low|low|medium|high|very_high`{: #+swtdcpu }** - As\n    [`+swt`](#%2Bswt) but affects dirty CPU schedulers. Defaults to\n    `medium`.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n  - **`+swtdio very_low|low|medium|high|very_high`{: #+swtdio }** - As\n    [`+swt`](#%2Bswt) but affects dirty IO schedulers. Defaults to\n    `medium`.\n\n    > #### Note {: .info }\n    >\n    > This flag can be removed or changed at any time without prior notice.\n\n- **`+t size`{: #+t_size }** - Sets the maximum number of atoms the virtual machine\n  can handle. Defaults to 1,048,576.\n\n- **`+T Level`{: #+T_level }** - Enables modified timing and sets the modified timing\n  level. Valid range is 0-9. The timing of the runtime system is changed. A high\n  level usually means a greater change than a low level. Changing the timing can\n  be very useful for finding timing-related bugs.\n\n  Modified timing affects the following:\n\n  - **Process spawning** - A process calling `spawn`, `spawn_link`,\n    `spawn_monitor`, or `spawn_opt` is scheduled out immediately after\n    completing the call. When higher modified timing levels are used, the caller\n    also sleeps for a while after it is scheduled out.\n\n  - **Context reductions** - The number of reductions a process is allowed to\n    use before it is scheduled out is increased or reduced.\n\n  - **Input reductions** - The number of reductions performed before checking\n    I/O is increased or reduced.\n\n  > #### Note {: .info }\n  >\n  > Performance suffers when modified timing is enabled. This flag is _only_\n  > intended for testing and debugging.\n  >\n  > `return_to` and `return_from` trace messages are lost when tracing on the\n  > spawn BIFs.\n  >\n  > This flag can be removed or changed at any time without prior notice.\n\n- **`+v`** - Verbose.\n\n- **`+V`** - Makes the emulator print its version number.\n\n- **`+W w | i | e`** - Sets the mapping of warning messages for `error_logger`.\n  Messages sent to the error logger using one of the warning routines can be\n  mapped to errors (`+W e`), warnings (`+W w`), or information reports (`+W i`).\n  Defaults to warnings. The current mapping can be retrieved using\n  `error_logger:warning_map/0`. For more information, see\n  `error_logger:warning_map/0` in Kernel.\n\n- **`+zFlag Value`** - Miscellaneous flags:\n\n  - **`+zdbbl size`{: #+zdbbl }** - Sets the distribution buffer busy limit\n    ([`dist_buf_busy_limit`](`m:erlang#system_info_dist_buf_busy_limit`)) in\n    kilobytes. Valid range is 1-2097151. Defaults to 1024.\n\n    A larger buffer limit allows processes to buffer more outgoing messages over\n    the distribution. When the buffer limit has been reached, sending processes\n    will be suspended until the buffer size has shrunk. The buffer limit is per\n    distribution channel. A higher limit gives lower latency and higher\n    throughput at the expense of higher memory use.\n\n    This limit only affects processes that have disabled\n    [_fully asynchronous distributed signaling_](`m:erlang#process_flag_async_dist`).\n\n  - **`+zdntgc time`{: #+zdntgc }** - Sets the delayed node table garbage\n    collection time\n    ([`delayed_node_table_gc`](`m:erlang#system_info_delayed_node_table_gc`)) in\n    seconds. Valid values are either `infinity` or an integer in the range\n    0-100000000. Defaults to 60.\n\n    Node table entries that are not referred linger in the table for at least\n    the amount of time that this parameter determines. The lingering prevents\n    repeated deletions and insertions in the tables from occurring.\n\n  - **`+zosrl limit`{: #+zosrl }** - Sets a limit on the amount of outstanding\n    requests made by a system process orchestrating system wide changes. Valid\n    range of this limit is `[1, 134217727]`. See\n    [`erlang:system_flag(outstanding_system_requests_limit, Limit)`](`m:erlang#system_flag_outstanding_system_requests_limit`)\n    for more information.\n\n  - **`+zhft limit`{: #+zhft }** - Sets a limit on how long the runtime system\n    is allowed to perform [flush](`m:erlang#halt_flush`) operations while\n    [halting](`erlang:halt/2`). Valid ` ` values are integers in the\n    range `0..2147483647` or the word `infinity`. ` ` is in milliseconds\n    and is by default `infinity`.\n\n    If flushing during a halt operation has been ongoing for ` `\n    milliseconds, the flushing will be interrupted and the runtime system will\n    be immediately terminated with exit code `255`. If halting without flushing,\n    the ` ` will have no effect on the system.\n\n    The value set by this flag can be read by Erlang code by calling\n    [`erlang:system_info(halt_flush_timeout)`](`m:erlang#system_info_halt_flush_timeout`).\n\n    See also the [`flush_timeout`](`m:erlang#halt_flush_timeout`) option of the\n    [`erlang:halt/2`](`erlang:halt/2`) BIF. Note that the shortest timeout of\n    this command line argument and the `flush_timeout` option will be the actual\n    timeout value in effect.\n\n    Since: OTP 27.0","ref":"erl_cmd.html#emulator-flags"},{"type":"extras","title":"Environment Variables - erl","doc":"- **`ERL_CRASH_DUMP`** - If the emulator needs to write a crash dump, the value\n  of this variable is the filename of the crash dump file. If the variable is\n  not set, the name of the crash dump file is `erl_crash.dump` in the current\n  directory.\n\n- **`ERL_CRASH_DUMP_NICE`** - _Unix systems_: If the emulator needs to write a\n  crash dump, it uses the value of this variable to set the nice value for the\n  process, thus lowering its priority. Valid range is 1-39 (higher values are\n  replaced with 39). The highest value, 39, gives the process the lowest\n  priority.\n\n- **`ERL_CRASH_DUMP_SECONDS`** - _Unix systems_: This variable gives the number\n  of seconds that the emulator is allowed to spend writing a crash dump. When\n  the given number of seconds have elapsed, the emulator is terminated.\n\n  - **`ERL_CRASH_DUMP_SECONDS=0`** - If the variable is set to `0` seconds, the\n    runtime system does not even attempt to write the crash dump file. It only\n    terminates. This is the default if option `-heart` is passed to `erl` and\n    `ERL_CRASH_DUMP_SECONDS` is not set.\n\n  - **`ERL_CRASH_DUMP_SECONDS=S`** - If the variable is set to a positive value\n    `S`, wait for `S` seconds to complete the crash dump file and then\n    terminates the runtime system with a `SIGALRM` signal.\n\n  - **`ERL_CRASH_DUMP_SECONDS=-1`** - A negative value causes the termination of\n    the runtime system to wait indefinitely until the crash dump file has been\n    completely written. This is the default if option `-heart` is _not_ passed\n    to `erl` and `ERL_CRASH_DUMP_SECONDS` is not set.\n\n  See also `m:heart`.\n\n- **`ERL_CRASH_DUMP_BYTES`** - This variable sets the maximum size of a crash\n  dump file in bytes. The crash dump will be truncated if this limit is\n  exceeded. If the variable is not set, no size limit is enforced by default. If\n  the variable is set to `0`, the runtime system does not even attempt to write\n  a crash dump file.\n\n  Introduced in ERTS 8.1.2 (Erlang/OTP 19.2).\n\n- **`ERL_AFLAGS`{: #ERL_AFLAGS }** - The content of this variable is added to\n  the beginning of the command line for `erl`.\n\n  Flag `-extra` is treated in a special way. Its scope ends at the end of the\n  environment variable content. Arguments following an `-extra` flag are moved\n  on the command line into section `-extra`, that is, the end of the command\n  line following an `-extra` flag.\n\n- **`ERL_ZFLAGS`{: #ERL_ZFLAGS } and `ERL_FLAGS`{: #ERL_FLAGS }** - The content\n  of these variables are added to the end of the command line for `erl`.\n\n  Flag `-extra` is treated in a special way. Its scope ends at the end of the\n  environment variable content. Arguments following an `-extra` flag are moved\n  on the command line into section `-extra`, that is, the end of the command\n  line following an `-extra` flag.\n\n- **`ERL_LIBS`** - Contains a list of additional library directories that the\n  code server searches for applications and adds to the code path; see `m:code`.\n\n- **`ERL_EPMD_ADDRESS`** - Can be set to a comma-separated list of IP addresses,\n  in which case the [`epmd`](epmd_cmd.md) daemon listens only on the specified\n  address(es) and on the loopback address (which is implicitly added to the list\n  if it has not been specified).\n\n- **`ERL_EPMD_PORT`** - Can contain the port number to use when communicating\n  with [`epmd`](epmd_cmd.md). The default port works fine in most cases. A\n  different port can be specified to allow nodes of independent clusters to\n  co-exist on the same host. All nodes in a cluster must use the same `epmd`\n  port number.","ref":"erl_cmd.html#environment-variables"},{"type":"extras","title":"Signals - erl","doc":"On Unix systems, the Erlang runtime will interpret two types of signals.\n\n- **`SIGUSR1`** - A `SIGUSR1` signal forces a crash dump.\n\n- **`SIGTERM`** - A `SIGTERM` will produce a `stop` message to the `init`\n  process. This is equivalent to a `init:stop/0` call.\n\n  Introduced in ERTS 8.3 (Erlang/OTP 19.3)\n\nThe signal `SIGUSR2` is reserved for internal usage. No other signals are\nhandled.","ref":"erl_cmd.html#signals"},{"type":"extras","title":"Configuration - erl","doc":"The standard Erlang/OTP system can be reconfigured to change the default\nbehavior on startup.\n\n- **The `.erlang` startup file** - When Erlang/OTP is started, the system\n  searches for a file named `.erlang` in the\n  [user's home directory](`m:init#home`) and then\n  [`filename:basedir(user_config, \"erlang\")`](`m:filename#user_config`).\n\n  If an `.erlang` file is found, it is assumed to contain valid Erlang\n  expressions. These expressions are evaluated as if they were input to the\n  shell.\n\n  A typical `.erlang` file contains a set of search paths, for example:\n\n  ```erlang\n  io:format(\"executing user profile in $HOME/.erlang\\n\",[]).\n  code:add_path(\"/home/calvin/test/ebin\").\n  code:add_path(\"/home/hobbes/bigappl-1.2/ebin\").\n  io:format(\".erlang rc finished\\n\",[]).\n  ```\n\n- **user_default** and **shell_default** - Functions in the shell that are not\n  prefixed by a module name are assumed to be functional objects (funs),\n  built-in functions (BIFs), or belong to the module `user_default` or\n  `shell_default`.\n\n  To include private shell commands, define them in a module `user_default` and\n  add the following argument as the first line in the `.erlang` file:\n\n  ```text\n  code:load_abs(\"..../user_default\").\n  ```\n\n- **erl** - If the contents of `.erlang` are changed and a private version of\n  `user_default` is defined, the Erlang/OTP environment can be customized. More\n  powerful changes can be made by supplying command-line arguments in the\n  startup script `erl`. For more information, see `m:init`.","ref":"erl_cmd.html#configuration"},{"type":"extras","title":"See Also - erl","doc":"[`epmd(1)`](epmd_cmd.md), `m:erl_prim_loader`, [`erts_alloc(3)`](erts_alloc.md),\n`m:init`, `m:application`, `m:auth`, `m:code`, `m:erl_boot_server`, `m:heart`,\n`m:net_kernel`, `m:make`","ref":"erl_cmd.html#see-also"},{"type":"extras","title":"erlc","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# erlc\n\nCompiler","ref":"erlc_cmd.html"},{"type":"extras","title":"Description - erlc","doc":"The `erlc` program provides a common way to run all compilers in the Erlang\nsystem. Depending on the extension of each input file, `erlc` invokes the\nappropriate compiler. Regardless of which compiler is used, the same flags are\nused to provide parameters, such as include paths and output directory.\n\nThe current working directory, `\".\"`, is not included in the code path when\nrunning the compiler. This is to avoid loading Beam files from the current\nworking directory that could potentially be in conflict with the compiler or the\nErlang/OTP system used by the compiler.","ref":"erlc_cmd.html#description"},{"type":"extras","title":"erlc flags file1.ext file2.ext... - erlc","doc":"Compiles one or more files. The files must include the extension, for example,\n`.erl` for Erlang source code, or `.yrl` for Yecc source code. `Erlc` uses the\nextension to invoke the correct compiler.","ref":"erlc_cmd.html#erlc-flags-file1-ext-file2-ext"},{"type":"extras","title":"Generally Useful Flags - erlc","doc":"The following flags are supported:\n\n- **`-I  `** - Instructs the compiler to search for include files in\n  the `Directory`. When encountering an `-include` or `-include_lib` directive,\n  the compiler searches for header files in the following directories:\n\n  - `\".\"`, the current working directory of the file server\n  - The base name of the compiled file\n  - The directories specified using option `-I`; the directory specified last is\n    searched first\n\n- **`-o  `** - The directory where the compiler is to place the output\n  files. Defaults to the current working directory.\n\n- **`-D `** - Defines a macro.\n\n- **`-D = `** - Defines a macro with the specified value. The value\n  can be any Erlang term. Depending on the platform, the value may need to be\n  quoted if the shell itself interprets certain characters. On Unix, terms\n  containing tuples and lists must be quoted. Terms containing spaces must be\n  quoted on all platforms.\n\n- **`-Werror`** - Makes all warnings into errors.\n\n- **`-W `** - Sets warning level to `Number`. Defaults to `1`. To turn\n  off warnings, use `-W0`.\n\n- **`-W`** - Same as `-W1`. Default.\n\n- **`-v`** - Enables verbose output.\n\n- **`-b  `** - Specifies the type of output file. `Output_type` is\n  the same as the file extension of the output file, but without the period.\n  This option is ignored by compilers that have a single output format.\n\n- **`-no-server`** - Do not use the\n  [compile server](erlc_cmd.md#compile_server).\n\n- **`-server`** - Use the [compile server](erlc_cmd.md#compile_server).\n\n- **`-enable-feature  `{: #enable-feature }** - Enables the\n  [feature](`e:system:features.md#features`) `feature` during compilation. The\n  special feature `all` can be used to enable all features.\n\n- **`-disable-feature  `{: #disable-feature }** - Disables the\n  [feature](`e:system:features.md#features`) `feature` during compilation. The\n  special feature `all` can be used to disable all non permanent features.\n\n- **`-list-features`** - [](){: #list-features } List short descriptions of the\n  current configurable [features](`e:system:features.md#features`).\n  Non-configurable features (those with status `rejected` or `permanent`)\n  will not be shown.\n\n- **`-describe-feature  `** - [](){: #describe-feature } Show long\n  description and history of [feature](`e:system:features.md#features`)\n  `feature`.\n\n- **`-M`** - Produces a Makefile rule to track header dependencies. The rule is\n  sent to `stdout`. No object file is produced.\n\n- **`-MMD`** - Generate dependencies as a side-effect. The object file will be\n  produced as normal. This option overrides the option `-M`.\n\n- **`-MF  `** - As option `-M`, except that the Makefile is written to\n  `Makefile`. No object file is produced.\n\n- **`-MD`** - Same as `-M -MF  .Pbeam`.\n\n- **`-MT  `** - In conjunction with option `-M` or `-MF`, changes the\n  name of the rule emitted to `Target`.\n\n- **`-MQ  `** - As option `-MT`, except that characters special to\n  `make/1` are quoted.\n\n- **`-MP`** - In conjunction with option `-M` or `-MF`, adds a phony target for\n  each dependency.\n\n- **`-MG`** - In conjunction with option `-M` or `-MF`, considers missing\n  headers as generated files and adds them to the dependencies.\n\n- **`--`** - Signals that no more options will follow. The rest of the arguments\n  is treated as filenames, even if they start with hyphens.\n\n- **`+ `** - A flag starting with a plus (`+`) rather than a hyphen is\n  converted to an Erlang term and passed unchanged to the compiler. For example,\n  option `export_all` for the Erlang compiler can be specified as follows:\n\n  ```text\n  erlc +export_all file.erl\n  ```\n\n  Depending on the platform, the value may need to be quoted if the shell itself\n  interprets certain characters. On Unix, terms containing tuples and lists must\n  be quoted. Terms containing spaces must be quoted on all platforms.","ref":"erlc_cmd.html#generally-useful-flags"},{"type":"extras","title":"Special Flags - erlc","doc":"The following flags are useful in special situations, such as rebuilding the OTP\nsystem:\n\n- **`-pa  `** - Appends `Directory` to the front of the code path in\n  the invoked Erlang emulator. This can be used to invoke another compiler than\n  the default one.\n\n- **`-pz  `** - Appends `Directory` to the code path in the invoked\n  Erlang emulator.","ref":"erlc_cmd.html#special-flags"},{"type":"extras","title":"Supported Compilers - erlc","doc":"The following compilers are supported:\n\n- **`.erl`** - Erlang source code. It generates a `.beam` file.\n\n  Options `-P`, `-E`, and `-S` are equivalent to `+'P'`, `+'E'`, and `+'S'`,\n  except that it is not necessary to include the single quotes to protect them\n  from the shell.\n\n  Supported options: `-I`, `-o`, `-D`, `-v`, `-W`, `-b`.\n\n- **`.S`** - Erlang assembler source code. It generates a `.beam` file.\n\n  Supported options: same as for `.erl`.\n\n- **`.core`** - Erlang core source code. It generates a `.beam` file.\n\n  Supported options: same as for `.erl`.\n\n- **`.yrl`** - Yecc source code. It generates an `.erl` file.\n\n  Use option `-I` with the name of a file to use that file as a customized\n  prologue file (option `includefile`).\n\n  Supported options: `-o`, `-v`, `-I`, `-W`.\n\n- **`.mib`** - MIB for SNMP. It generates a `.bin` file.\n\n  Supported options: `-I`, `-o`, `-W`.\n\n- **`.bin`** - A compiled MIB for SNMP. It generates a `.hrl` file.\n\n  Supported options: `-o`, `-v`.\n\n- **`.rel`** - Script file. It generates a boot file.\n\n  Use option `-I` to name directories to be searched for application files\n  (equivalent to the `path` in the option list for `systools:make_script/2`).\n\n  Supported option: `-o`.\n\n- **`.asn1`** - ASN1 file. It creates an `.erl`, `.hrl`, and `.asn1db` file from\n  an `.asn1` file. Also compiles the `.erl` using the Erlang compiler unless\n  option `+noobj` is specified.\n\n  Supported options: `-I`, `-o`, `-b`, `-W`.\n\n- **`.idl`** - IC file. It runs the IDL compiler.\n\n  Supported options: `-I`, `-o`.\n\n[](){: #compile_server }","ref":"erlc_cmd.html#supported-compilers"},{"type":"extras","title":"Compile Server - erlc","doc":"The compile server can be used to potentially speed up the build of multi-file\nprojects by avoiding to start an Erlang system for each file to compile. Whether\nit will speed up the build depends on the nature of the project and the build\nmachine.\n\nBy default, the compile server is not used. It can be enabled by giving `erlc`\nthe option `-server` or by setting the environment variable `ERLC_USE_SERVER` to\n`yes` or `true`.\n\nWhen the compile server is enabled, `erlc` will automatically use the server if\nit is started and start the server if has not already started. The server will\nterminate itself when it has been idle for some number of seconds.\n\n`erlc` and the compile server communicate using the Erlang distribution. The\ncompile server is started as a hidden node, with a name that includes the\ncurrent user. Thus, each user on a computer has their own compile server.\n\nUsing the compile server does not always speed up the build, as the compile\nserver sometimes must be restarted to ensure correctness. Here are some examples\nof situations that force a restart:\n\n- `erlc` wants to use a different version of Erlang than the compile server is\n  using.\n- `erlc` wants to use different options for `erl` than the compile server was\n  started with. (A change to code path using the option `-pa` could cause\n  different parse transforms to be loaded. To be safe, the compile server will\n  be restarted when any `erl` option is changed.)\n- If the current working directory for `erlc` is different from the working\n  directory active when the compile server was started, **and** if the compile\n  server has active jobs, it will be restarted as soon as those jobs have\n  finished. (Build systems that build files randomly across multiple directories\n  in parallel will probably not benefit from the compile server.)\n\n[](){: #environment_variables }","ref":"erlc_cmd.html#compile-server"},{"type":"extras","title":"Environment Variables - erlc","doc":"- **`ERLC_EMULATOR`** - The command for starting the emulator, which must be\n  just the path for the emulator without any parameters. Defaults to `erl`\n  in the same directory as the `erlc` program itself, or, if it does not exist,\n  `erl` in any of the directories specified in environment variable `PATH`.\n\n- **`ERLC_USE_SERVER`** - Allowed values are `yes` or `true` to use the\n  [compile server](erlc_cmd.md#compile_server), and `no` or `false` to not use\n  the compile server. If other values are given, `erlc` will print a warning\n  message and continue.\n\n- **`ERLC_SERVER_ID`** - Tells `erlc` to identify the\n  [compile server](erlc_cmd.md#compile_server) by the given name, allowing a\n  single user to run multiple unrelated builds in parallel without them\n  affecting each other, which can be useful for shared build machines and the\n  like. The name must be alpha­numeric, and it defaults to being empty.","ref":"erlc_cmd.html#environment-variables"},{"type":"extras","title":"See Also - erlc","doc":"[`erl(1)`](erl_cmd.md), `m:compile`, `m:yecc`, `m:snmp`","ref":"erlc_cmd.html#see-also"},{"type":"extras","title":"erlsrv","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# erlsrv\n\nRun the Erlang emulator as a service on Windows","ref":"erlsrv_cmd.html"},{"type":"extras","title":"Description - erlsrv","doc":"This utility is specific to Windows NT/2000/XP (and later versions of Windows).\nIt allows Erlang emulators to run as services on the Windows system, allowing\nembedded systems to start without any user needing to log on. The emulator\nstarted in this way can be manipulated through the Windows services applet in a\nmanner similar to other services.\n\nNote that `erlsrv` is not a general service utility for Windows, but designed\nfor embedded Erlang systems.\n\n`erlsrv` also provides a command-line interface for registering, changing,\nstarting, and stopping services.\n\nTo manipulate services, the logged on user is to have administrator privileges\non the machine. The Erlang machine itself is (default) run as the local\nadministrator. This can be changed with the Services applet in Windows.\n\nThe processes created by the service can, as opposed to normal services, be\n\"killed\" with the task manager. Killing an emulator that is started by a service\ntriggers the \"OnFail\" action specified for that service, which can be a reboot.\n\nThe following parameters can be specified for each Erlang service:\n\n- **`StopAction`** - Tells `erlsrv` how to stop the Erlang emulator. Default is\n  to kill it (Win32 TerminateProcess), but this action can specify any Erlang\n  shell command that will be executed in the emulator to make it stop. The\n  emulator is expected to stop within 30 seconds after the command is issued in\n  the shell. If the emulator is not stopped, it reports a running state to the\n  service manager.\n\n- **`OnFail`** - Can be one of the following:\n\n  - **`reboot`** - The Windows system is rebooted whenever the emulator stops (a\n    more simple form of watchdog). This can be useful for less critical systems,\n    otherwise use the heart functionality to accomplish this.\n\n  - **`restart`** - Makes the Erlang emulator be restarted (with whatever\n    parameters are registered for the service at the occasion) when it stops. If\n    the emulator stops again within 10 seconds, it is not restarted to avoid an\n    infinite loop, which could hang the Windows system.\n\n  - **`restart_always`** - Similar to `restart`, but does not try to detect\n    cyclic restarts; it is expected that some other mechanism is present to\n    avoid the problem.\n\n  - **`ignore` (the default)** - Reports the service as stopped to the service\n    manager whenever it fails; it must be manually restarted.\n\n  On a system where release handling is used, this is always to be set to\n  `ignore`. Use `heart` to restart the service on failure instead.\n\n- **`Machine`** - The location of the Erlang emulator. The default is the\n  `erl.exe` located in the same directory as `erlsrv.exe`.\n\n  If the system uses release handling, this is to be set to a program similar to\n  `start_erl.exe`.\n\n- **`Env`** - Specifies an _extra_ environment for the emulator. The environment\n  variables specified here are added to the system-wide environment block that\n  is normally present when a service starts up. Variables present in both the\n  system-wide environment and in the service environment specification will be\n  set to the value specified in the service.\n\n- **`WorkDir`** - The working directory for the Erlang emulator. Must be on a\n  local drive (no network drives are mounted when a service starts). Default\n  working directory for services is `%SystemDrive%%SystemPath%`. Debug log files\n  will be placed in this directory.\n\n- **`Priority`** - The process priority of the emulator. Can be one of the\n  following:\n\n  - **`realtime`** - Not recommended, as the machine will possibly be\n    inaccessible to interactive users.\n\n  - **`high`** - Can be used if two Erlang nodes are to reside on one dedicated\n    system and one is to have precedence over the other.\n\n  - **`low`** - Can be used if interactive performance is not to be affected by\n    the emulator process.\n\n  - **`default`** - The default priority.\n\n- **`SName or Name`** - Specifies the short or long node name of the Erlang\n  emulator. The Erlang services are always distributed. Default is to use the\n  service name as (short) nodename.\n\n- **`DebugType`** - Specifies that output from the Erlang shell is to be sent to\n  a \"debug log\". The log file is named  `.debug` or\n   `.debug.` , where   is an integer from 1 through 99. The log\n  file is placed in the working directory of the service (as specified in\n  `WorkDir`).\n\n  Can be one of the following:\n\n  - **`new`** - Uses a separate log file for every invocation of the service\n    ( `.debug.` ).\n\n  - **`reuse`** - Reuses the same log file ( `.debug`).\n\n  - **`console`** - Opens an interactive Windows console window for the Erlang\n    shell of the service. Automatically disables the `StopAction`. A service\n    started with an interactive console window does not survive logouts.\n    `OnFail` actions do not work with debug consoles either.\n\n  - **`none` (the default)** - The output of the Erlang shell is discarded.\n\n  > #### Note {: .info }\n  >\n  > The `console` option is _not_ intended for production. It is _only_ a\n  > convenient way to debug Erlang services during development.\n  >\n  > The `new` and `reuse` options might seem convenient in a production system,\n  > but consider that the logs grow indefinitely during the system lifetime and\n  > cannot be truncated, except if the service is restarted.\n  >\n  > In short, the `DebugType` is intended for debugging only. Logs during\n  > production are better produced with the standard Erlang logging facilities.\n\n- **`Args`** - Passes extra arguments to the emulator startup program `erl.exe`\n  (or `start_erl.exe`). Arguments that cannot be specified here are `-noinput`\n  (`StopActions` would not work), `-name`, and `-sname` (they are specified in\n  any way). The most common use is for specifying cookies and flags to be passed\n  to `m:init` (`-s`).\n\n- **`InternalServiceName`** - Specifies the Windows-internal service name (not\n  the display name, which is the one `erlsrv` uses to identify the service).\n\n  This internal name cannot be changed, it is fixed even if the service is\n  renamed. `erlsrv` generates a unique internal name when a service is created.\n  It is recommended to keep to the default if release handling is to be used for\n  the application.\n\n  The internal service name can be seen in the Windows service manager if\n  viewing `Properties` for an Erlang service.\n\n- **`Comment`** - A textual comment describing the service. Not mandatory, but\n  shows up as the service description in the Windows service manager.\n\n[](){: #001 } The naming of the service in a system that uses release handling\nmust follow the convention *NodeName_Release*, where _NodeName_ is the first\npart of the Erlang node name (up to, but not including the \"@\") and _Release_ is\nthe current release of the application.","ref":"erlsrv_cmd.html#description"},{"type":"extras","title":"erlsrv {set | add} <service-name> [<service options>] - erlsrv","doc":"The `set` and `add` commands modifies or adds an Erlang service, respectively.\nThe simplest form of an `add` command is without any options in which case all\ndefault values (described above) apply. The service name is mandatory.\n\nEvery option can be specified without parameters, the default value is then\napplied. Values to the options are supplied _only_ when the default is not to be\nused. For example, `erlsrv set myservice -prio -arg` sets the default priority\nand removes all arguments.\n\nService options:\n\n- **`-st[opaction] [ ]`** - Defines the `StopAction`, the\n  command given to the Erlang shell when the service is stopped. Default is\n  none.\n\n- **`-on[fail] [{reboot | restart | restart_always}]`** - The action to take\n  when the Erlang emulator stops unexpectedly. Default is to ignore.\n\n- **`-m[achine] [ ]`** - The complete path to the Erlang emulator.\n  Never use the `werl` program for this. Defaults to the `erl.exe` in the same\n  directory as `erlsrv.exe`. When release handling is used, this is to be set to\n  a program similar to `start_erl.exe`.\n\n- **`-e[nv] [ [= ]] ...`** - Edits the environment block for the\n  service. Every environment variable specified is added to the system\n  environment block. If a variable specified here has the same name as a\n  system-wide environment variable, the specified value overrides the\n  system-wide. Environment variables are added to this list by specifying\n   =  and deleted from the list by specifying   alone.\n  The environment block is automatically sorted. Any number of `-env` options\n  can be specified in one command. Default is to use the system environment\n  block unmodified (except for two additions, see section\n  [Environment](erlsrv_cmd.md#002) below).\n\n- **`-w[orkdir] [ ]`** - The initial working directory of the Erlang\n  emulator. Defaults to the system directory.\n\n- **`-p[riority] [{low|high|realtime}]`** - The priority of the Erlang emulator.\n  Default to the Windows default priority.\n\n- **`{-sn[ame] | -n[ame]} [ ]`** - The node name of the Erlang\n  machine. Distribution is mandatory. Defaults to `-sname  `.\n\n- **`-d[ebugtype] [{new|reuse|console}]`** - Specifies where shell output is to\n  be sent. Default is that shell output is discarded. To be used only for\n  debugging.\n\n- **`-ar[gs] [ ]`** - Extra arguments to the Erlang\n  emulator. Avoid `-noinput`, `-noshell`, and `-sname`/`-name`. Default is no\n  extra arguments. Remember that the services cookie file is not necessarily the\n  same as the interactive users. The service runs as the local administrator.\n  Specify all arguments together in one string, use double quotes (\") to specify\n  an argument string containing spaces, and use quoted quotes (\\\\\") to specify a\n  quote within the argument string if necessary.\n\n- **`-i[nternalservicename] [ ]`** - _Only_ allowed for `add`.\n  Specifies a Windows-internal service name for the service, which by default is\n  set to something unique (prefixed with the original service name) by `erlsrv`\n  when adding a new service. Specifying this is a purely cosmethic action and is\n  _not_ recommended if release handling is to be performed. The internal service\n  name cannot be changed once the service is created. The internal name is _not_\n  to be confused with the ordinary service name, which is the name used to\n  identify a service to `erlsrv`.\n\n- **`-c[omment] [ ]`** - Specifies a textual comment\n  describing the service. This comment shows up as the service description in\n  the Windows service manager.","ref":"erlsrv_cmd.html#erlsrv-set-add-service-name-service-options"},{"type":"extras","title":"erlsrv {start | start_disabled | stop | disable | enable} <service-name> - erlsrv","doc":"These commands are only added for convenience, the normal way to manipulate the\nstate of a service is through the control panels services applet.\n\nThe `start` and `stop` commands communicates with the service manager for\nstarting and stopping a service. The commands wait until the service is started\nor stopped. When disabling a service, it is not stopped, the disabled state does\nnot take effect until the service is stopped. Enabling a service sets it in\nautomatic mode, which is started at boot. This command cannot set the service to\nmanual.\n\nThe `start_disabled` command operates on a service regardless of if it is\nenabled/disabled or started/stopped. It does this by first enabling it\n(regardless of if it is enabled or not), then starting it (if not already\nstarted), and then disabling it. The result is a disabled but started service,\nregardless of its earlier state. This is useful for starting services\ntemporarily during a release upgrade. The difference between using\n`start_disabled` and the sequence `enable`, `start`, and `disable` is that all\nother `erlsrv` commands are locked out during the sequence of operations in\n`start_disable`, making the operation atomic from an `erlsrv` user's point of\nview.","ref":"erlsrv_cmd.html#erlsrv-start-start_disabled-stop-disable-enable-service-name"},{"type":"extras","title":"erlsrv remove <service-name> - erlsrv","doc":"Removes the service completely with all its registered options. It is stopped\nbefore it is removed.","ref":"erlsrv_cmd.html#erlsrv-remove-service-name"},{"type":"extras","title":"erlsrv list [<service-name>] - erlsrv","doc":"If no service name is specified, a brief listing of all Erlang services is\npresented. If a service name is supplied, all options for that service are\npresented.","ref":"erlsrv_cmd.html#erlsrv-list-service-name"},{"type":"extras","title":"erlsrv help - erlsrv","doc":"Displays a brief help text.","ref":"erlsrv_cmd.html#erlsrv-help"},{"type":"extras","title":"Environment - erlsrv","doc":"[](){: #002 } The environment of an Erlang machine started as a service contains\ntwo special variables:\n\n- **`ERLSRV_SERVICE_NAME`** - The name of the service that started the machine.\n\n- **`ERLSRV_EXECUTABLE`** - The full path to the `erlsrv.exe`, which can be used\n  to manipulate the service. This comes in handy when defining a heart command\n  for your service.\n\nA command file for restarting a service looks as follows:\n\n```text\n@echo off\n%ERLSRV_EXECUTABLE% stop %ERLSRV_SERVICE_NAME%\n%ERLSRV_EXECUTABLE% start %ERLSRV_SERVICE_NAME%\n```\n\nThis command file is then set as heart command.\n\nThe environment variables can also be used to detect that we are running as a\nservice and make port programs react correctly to the control events generated\non logout (see the next section).","ref":"erlsrv_cmd.html#environment"},{"type":"extras","title":"Port Programs - erlsrv","doc":"When a program runs in the service context, it must handle the control events\nthat are sent to every program in the system when the interactive user logs off.\nThis is done in different ways for programs running in the console subsystem and\nprograms running as window applications. An application running in the console\nsubsystem (normal for port programs) uses the win32 function\n`SetConsoleCtrlHandler` to register a control handler that returns `true` in\nanswer to the `CTRL_LOGOFF_EVENT` and `CTRL_SHUTDOWN_EVENT` events. Other\napplications only forward `WM_ENDSESSION` and `WM_QUERYENDSESSION` to the\ndefault window procedure.\n\nA brief example in C of how to set the console control handler:\n\n```c\n#include  \n/*\n** A Console control handler that ignores the log off events,\n** and lets the default handler take care of other events.\n*/\nBOOL WINAPI service_aware_handler(DWORD ctrl){\n    if(ctrl == CTRL_LOGOFF_EVENT)\n        return TRUE;\n    if(ctrl == CTRL_SHUTDOWN_EVENT)\n        return TRUE;\n    return FALSE;\n}\n\nvoid initialize_handler(void){\n    char buffer[2];\n    /*\n     * We assume we are running as a service if this\n     * environment variable is defined.\n     */\n    if(GetEnvironmentVariable(\"ERLSRV_SERVICE_NAME\",buffer,\n                              (DWORD) 2)){\n        /*\n        ** Actually set the control handler\n        */\n        SetConsoleCtrlHandler(&service_aware_handler, TRUE);\n    }\n}\n```","ref":"erlsrv_cmd.html#port-programs"},{"type":"extras","title":"Notes - erlsrv","doc":"Although the options are described in a Unix-like format, the case of the\noptions or commands is not relevant, and both character \"/\" and \"-\" can be used\nfor options.\n\nNote that the program resides in the emulator's `bin` directory, not in the\n`bin` directory directly under the Erlang root. The reasons for this are the\nsubtle problem of upgrading the emulator on a running system, where a new\nversion of the runtime system should not need to overwrite existing (and\nprobably used) executables.\n\nTo manipulate the Erlang services easily, put the\n` \\erts- \\bin` directory in the path instead of\n` \\bin`. The `erlsrv` program can be found from inside Erlang by\nusing the `os:find_executable/1` Erlang function.\n\nFor release handling to work, use `start_erl` as the Erlang machine. As stated\n[above](erlsrv_cmd.md#001), the service name is significant.","ref":"erlsrv_cmd.html#notes"},{"type":"extras","title":"See Also - erlsrv","doc":"[`start_erl(1)`](start_erl_cmd.md), `m:release_handler`","ref":"erlsrv_cmd.html#see-also"},{"type":"extras","title":"escript","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# escript\n\nRun a script written in Erlang.","ref":"escript_cmd.html"},{"type":"extras","title":"Synopsis - escript","doc":"```\nscript-name [arg1 arg2...]\n```","ref":"escript_cmd.html#synopsis"},{"type":"extras","title":"Description - escript","doc":"`escript` provides support for running short Erlang programs without having to\ncompile them first, and an easy way to retrieve the command-line arguments.\n`escript`s are created by either writing them by hand or using `escript:create/2`.\n\nescripts are run by directly invoking them (does not work on Windows):\n\n```text\nscript-name [arg1 arg2...]\n```\n\nor by calling the `escript` program (works on all platforms):\n\n```text\nescript [escript-flags] script-name.escript [arg1 arg2...]\n```\n\nFor example:\n\n```text\n$ chmod u+x factorial\n$ cat factorial\n```\n\n```\n#!/usr/bin/env escript\n%% -*- erlang -*-\n%%! -sname factorial -mnesia debug verbose\nmain([String]) ->\n    try\n        N = list_to_integer(String),\n        F = fac(N),\n        io:format(\"factorial ~w = ~w\\n\", [N,F])\n    catch\n        _:_ ->\n            usage()\n    end;\nmain(_) ->\n    usage().\n\nusage() ->\n    io:format(\"usage: factorial integer\\n\"),\n    halt(1).\n\nfac(0) -> 1;\nfac(N) -> N * fac(N-1).\n```\n\n```text\n$ ./factorial 5\nfactorial 5 = 120\n$ ./factorial\nusage: factorial integer\n$ ./factorial five\nusage: factorial integer\n```\n\nThe header of the Erlang script in the example differs from a normal Erlang\nmodule. The first line is intended to be the interpreter line, which invokes\n`escript`.\n\nHowever, if you invoke the `escript` as follows, the contents of the first line\ndo not matter, but it cannot contain Erlang code as it will be ignored:\n\n```text\n$ escript factorial 5\n```\n\nThe second line in the example contains an optional directive to the `Emacs`\neditor, which causes it to enter the major mode for editing Erlang source files.\nIf the directive is present, it must be located on the second line.\n\nIf a comment selecting the [encoding](`m:epp#encoding`) exists, it can be\nlocated on the second line.\n\n> #### Note {: .info }\n>\n> The encoding specified by the above mentioned comment applies to the script\n> itself. The encoding of the I/O-server, however, must be set explicitly as\n> follows:\n>\n> ```erlang\n> io:setopts([{encoding, latin1}])\n> ```\n>\n> The default encoding of the I/O-server for\n> [`standard_io`](`t:io:standard_io/0`) is `unicode` if its supported. (see\n> section\n> [Summary of Options](`e:stdlib:unicode_usage.md#unicode_options_summary`)) in\n> the STDLIB User's Guide.\n\nOn the third line (or second line depending on the presence of the Emacs\ndirective), arguments can be specified to the emulator, for example:\n\n```text\n%%! -sname factorial -mnesia debug verbose\n```\n\nSuch an argument line must start with `%%!` and the remaining line is\ninterpreted as arguments to the emulator.\n\nIf you know the location of the `escript` executable, the first line can\ndirectly give the path to `escript`, for example:\n\n```text\n#!/usr/local/bin/escript\n```\n\nAs any other type of scripts, Erlang scripts do not work on Unix platforms if\nthe execution bit for the script file is not set. (To turn on the execution bit,\nuse `chmod +x script-name`.)\n\nThe remaining Erlang script file can either contain Erlang _source code_, an\n_inlined beam file_, or an _inlined archive file_.\n\nAn Erlang script file must always contain the `main/1` function. When the script\nis run, the `main/1` function is called with a list of strings representing the\narguments specified to the script (not changed or interpreted in any way).\n\nIf the `main/1` function in the script returns successfully, the exit status for\nthe script is `0`. If an exception is generated during execution, a short\nmessage is printed and the script terminates with exit status `127`.\n\nTo return your own non-zero exit code, call [`halt(ExitCode)`](`halt/1`), for\nexample:\n\n```text\nhalt(1).\n```\n\nTo retrieve the pathname of the script, call `escript:script_name/0` from your\nscript (the pathname is usually, but not always, absolute).\n\nIf the file contains source code (as in the example above), it is processed by\nthe `m:epp` preprocessor. This means that you, for example, can use predefined\nmacros (such as `?MODULE`) and include directives like the `-include_lib`\ndirective. For example, use\n\n```erlang\n-include_lib(\"kernel/include/file.hrl\").\n```\n\nto include the record definitions for the records used by function\n`file:read_link_info/1`. You can also select encoding by including an encoding\ncomment here, but if a valid encoding comment exists on the second line, it\ntakes precedence.\n\nThe script is checked for syntactic and semantic correctness before it is run.\nIf there are warnings (such as unused variables), they are printed and the\nscript will still be run. If there are errors, they are printed and the script\nwill not be run and its exit status is `127`.\n\nBoth the module declaration and the export declaration of the `main/1` function\nare optional.\n\nBy default, the script will be compiled by the Erlang compiler.\n\nIt is possible to force it to be interpreted by including the following line\nsomewhere in the script file:\n\n```erlang\n-mode(interpret).\n```\n\nExecution of interpreted code is slower than compiled code, and some language\nconstructs will not work, but there is no requirement for the Erlang compiler\napplication to be available.\n\n> #### Change {: .info }\n>\n> Before Erlang/OTP 27 the script would be interpreted by default.","ref":"escript_cmd.html#description"},{"type":"extras","title":"Precompiled escripts - escript","doc":"A script can also contains precompiled `beam` code. To create a precompiled\nescript it is recommended that you use `escript:create/2`. In a\nprecompiled script, the interpretation of the script header is the same as in a\nscript containing source code. This means that you can make a `beam` file\nexecutable by prepending the file with the lines starting with `#!` and `%%!`\nmentioned above. In a precompiled script, the `main/1` function must be\nexported.\n\nAnother option is to have an entire Erlang archive in the script. In an archive\nscript, the interpretation of the script header is the same as in a script\ncontaining source code. This means that you can make an archive file executable\nby prepending the file with the lines starting with `#!` and `%%!` mentioned\nabove. In an archive script, the `main/1` function must be exported. By default\nthe `main/1` function in the module with the same name as the basename of the\n`escript` file is invoked. This behavior can be overridden by setting flag\n`-escript main Module` as one of the emulator flags. `Module` must be the name\nof a module that has an exported `main/1` function. For more information about\narchives and code loading, see `m:escript` and `m:code`.\n\nIt is often very convenient to have a header in the escript, especially on Unix\nplatforms. However, the header is optional, so you directly can \"execute\" an\nErlang module, Beam file, or archive file without adding any header to them. But\nthen you have to invoke the script as follows:\n\n```text\n$ escript factorial.erl 5\nfactorial 5 = 120\n$ escript factorial.beam 5\nfactorial 5 = 120\n$ escript factorial.zip 5\nfactorial 5 = 120\n```","ref":"escript_cmd.html#precompiled-escripts"},{"type":"extras","title":"Bundling escripts - escript","doc":"It is possible to bundle `escript`(s) with an Erlang runtime system to make it\nself-sufficient and relocatable. In such a standalone system, the `escript`(s)\nshould be located in the top `bin` directory of the standalone system and given\n`.escript` as file extension. Further the (built-in) `escript` program should be\ncopied to the same directory and given the script's original name (without the\n`.escript` extension). This will enable use of the bundled Erlang runtime\nsystem.\n\nThe (built-in) `escript` program first determines which Erlang runtime system to\nuse and then starts it to execute your script. Usually the runtime system is\nlocated in the same Erlang installation as the `escript` program itself. But for\nstandalone systems with one or more escripts it may be the case that the\n`escript` program in your path actually starts the runtime system bundled with\nthe escript. This is intentional, and typically happens when the standalone\nsystem `bin` directory is not in the execution path (as it may cause its `erl`\nprogram to override the desired one) and the `escript`(s) are referred to via\nsymbolic links from a `bin` directory in the path.","ref":"escript_cmd.html#bundling-escripts"},{"type":"extras","title":"Options Accepted By escript - escript","doc":"- **`-c`** - Compiles the escript regardless of the value of the mode attribute.\n\n- **`-d`** - Debugs the escript. Starts the debugger, loads the module\n  containing the `main/1` function into the debugger, sets a breakpoint in\n  `main/1`, and invokes `main/1`. If the module is precompiled, it must be\n  explicitly compiled with option `debug_info`.\n\n- **`-i`** - Interprets the escript regardless of the value of the mode\n  attribute.\n\n- **`-s`** - Performs a syntactic and semantic check of the script file.\n  Warnings and errors (if any) are written to the standard output, but the\n  script will not be run. The exit status is `0` if any errors are found,\n  otherwise `127`.\n\n> #### Note {: .info }\n>\n> The configuration of the Erlang emulator invoked by `escript` can also be\n> controlled using the\n> [environment variables understood by `erl`](erl_cmd.md#environment-variables).","ref":"escript_cmd.html#options-accepted-by-escript"},{"type":"extras","title":"run_erl","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# run_erl\n\nRedirect Erlang input and output streams on Unix systems.","ref":"run_erl_cmd.html"},{"type":"extras","title":"Description - run_erl","doc":"The `run_erl` program is specific to Unix systems. This program redirects the\nstandard input and standard output streams so that all output can be logged. It\nalso lets the program [`to_erl`](`e:system:embedded.md#to_erl`) connect to the\nErlang console, making it possible to monitor and debug an embedded system remotely.\n\nFor more information about the use, see the\n[Embedded System User's Guide](`e:system:embedded.md`) in System\nDocumentation.\n\n```text\nrun_erl [-daemon] pipe_dir/ log_dir \"exec command arg1 arg2 ...\"\n```\n\nArguments:\n\n- **`-daemon`** - This option is highly recommended. It makes `run_erl` run in\n  the background completely detached from any controlling terminal and the\n  command returns to the caller immediately. Without this option, `run_erl` must\n  be started using several tricks in the shell to detach it completely from the\n  terminal in use when starting it. The option must be the first argument to\n  `run_erl` on the command line.\n\n- **`pipe_dir`** - The named pipe, usually `/tmp/`. It must be suffixed by a `/`\n  (slash), that is, `/tmp/epipes/`, not `/tmp/epipes`.\n\n- **`log_dir`** - The log files, that is:\n\n  - One log file, `run_erl.log`, which logs progress and warnings from the\n    `run_erl` program itself.\n  - Up to five log files at maximum 100 KB each with the content of the standard\n    streams from and to the command. (Both the number of logs and sizes can be\n    changed by environment variables, see section\n    [Environment Variables](run_erl_cmd.md#environment_variables) below.)\n\n    When the logs are full, `run_erl` deletes and reuses the oldest log file.\n\n- **`\"exec command arg1 arg2 ...\"`** - A space-separated string specifying the\n  program to be executed. The second field is typically a command name such as\n  `erl`.","ref":"run_erl_cmd.html#description"},{"type":"extras","title":"Notes concerning the Log Files - run_erl","doc":"While running, `run_erl` sends all output, uninterpreted, to a log file. The\nfile is named `erlang.log.N`, where `N` is an integer. When the log is \"full\"\n(default log size is 100 KB), `run_erl` starts to log in file\n`erlang.log.(N+1)`, until `N` reaches a certain number (default 5), whereupon\n`N` starts at 1 again and the oldest files start getting overwritten.\n\nIf no output comes from the Erlang shell, but the Erlang machine still seems to\nbe alive, an \"ALIVE\" message is written to the log; it is a time stamp and is\nwritten, by default, after 15 minutes of inactivity. Also, if output from Erlang\nis logged, but more than 5 minutes (default) has passed since last time we got\nanything from Erlang, a time stamp is written in the log. The \"ALIVE\" messages\nlook as follows:\n\n```text\n===== ALIVE  \n```\n\nThe other time stamps look as follows:\n\n```text\n=====  \n```\n\n`date-time-string` is the date and time the message is written, default in local\ntime (can be changed to UTC if needed). It is formatted with the ANSI-C function\n`strftime` using the format string `%a %b %e %T %Z %Y`, which produces messages\nlike `===== ALIVE Thu May 15 10:13:36 MEST 2003`; this can be changed, see the\nnext section.\n\n[](){: #environment_variables }","ref":"run_erl_cmd.html#notes-concerning-the-log-files"},{"type":"extras","title":"Environment Variables - run_erl","doc":"The following environment variables are recognized by `run_erl` and change the\nlogging behavior. For more information, see the previous section.\n\n- **`RUN_ERL_LOG_ALIVE_MINUTES`** - How long to wait for output (in minutes)\n  before writing an \"ALIVE\" message to the log. Defaults to 15, minimum is 1.\n\n- **`RUN_ERL_LOG_ACTIVITY_MINUTES`** - How long Erlang needs to be inactive\n  before output is preceded with a time stamp. Defaults to\n  `RUN_ERL_LOG_ALIVE_MINUTES div 3`, minimum is 1.\n\n- **`RUN_ERL_LOG_ALIVE_FORMAT`** - Specifies another format string to be used in\n  the `strftime` C library call. That is, specifying this to `\"%e-%b-%Y, %T %Z\"`\n  gives log messages with time stamps like `15-May-2003, 10:23:04 MET`. For more\n  information, see the documentation for the C library function `strftime`.\n  Defaults to `\"%a %b %e %T %Z %Y\"`.\n\n- **`RUN_ERL_LOG_ALIVE_IN_UTC`** - If set to anything else than `0`, it makes\n  all times displayed by `run_erl` to be in UTC (GMT, CET, MET, without Daylight\n  Saving Time), rather than in local time. This does not affect data coming from\n  Erlang, only the logs output directly by `run_erl`. Application SASL can be\n  modified accordingly by setting the Erlang application variable `utc_log` to\n  `true`.\n\n- **`RUN_ERL_LOG_GENERATIONS`** - Controls the number of log files written\n  before older files are reused. Defaults to 5, minimum is 2, maximum is 1000.\n\n  Note that, as a way to indicate the newest file, `run_erl` will delete the\n  oldest log file to maintain a \"hole\" in the file sequences. For example, if\n  log files #1, #2, #4 and #5 exists, that means #2 is the latest and #4 is the\n  oldest. You will therefore at most get one less log file than the value set by\n  `RUN_ERL_LOG_GENERATIONS`.\n\n- **`RUN_ERL_LOG_MAXSIZE`** - The size, in bytes, of a log file before switching\n  to a new log file. Defaults to 100000, minimum is 1000, maximum is about 2^30.\n\n- **`RUN_ERL_DISABLE_FLOWCNTRL`** - If defined, disables input and output flow\n  control for the pty opend by `run_erl`. Useful if you want to remove any risk\n  of accidentally blocking the flow control by using Ctrl-S (instead of Ctrl-D\n  to detach), which can result in blocking of the entire Beam process, and in\n  the case of running heart as supervisor even the heart process becomes blocked\n  when writing log message to terminal, leaving the heart process unable to do\n  its work.","ref":"run_erl_cmd.html#environment-variables"},{"type":"extras","title":"See Also - run_erl","doc":"[`start(1)`](start_cmd.md), [`start_erl(1)`](start_erl_cmd.md)","ref":"run_erl_cmd.html#see-also"},{"type":"extras","title":"start","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# start\n\nOTP start script example for Unix.","ref":"start_cmd.html"},{"type":"extras","title":"Description - start","doc":"The `start` script is an example script on how to start up the Erlang system in\nembedded mode on Unix.\n\nFor more information about the use, see the\n[Embedded System User's Guide](`e:system:embedded.md`) in System\nDocumentation.\n\n```text\nstart [ data_file ]\n```\n\nArgument:\n\n- **`data_file`** - Optional. Specifies what `start_erl.data` file to use.\n\nEnvironment variable `RELDIR` can be set before calling this example, which sets\nthe directory where to find the release files.","ref":"start_cmd.html#description"},{"type":"extras","title":"See Also - start","doc":"[`run_erl(1)`](run_erl_cmd.md), [`start_erl(1)`](start_erl_cmd.md)","ref":"start_cmd.html#see-also"},{"type":"extras","title":"start_erl","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# start_erl\n\nStart Erlang for embedded systems on Windows systems.","ref":"start_erl_cmd.html"},{"type":"extras","title":"Description - start_erl","doc":"The `start_erl` program is specific to Windows NT/2000/XP (and later versions of\nWindows). Although there are programs with the same name on other platforms,\ntheir functionality is different.\n\nThis program is distributed both in compiled form (under\n` \\erts- \\bin`) and in source form (under\n` \\erts- \\src`). The purpose of the source code is to\nease customization of the program for local needs, such as cyclic restart\ndetection. There is also a \"make\"-file, written for the `nmake` program\ndistributed with Microsoft Visual C++. This program can, however, be compiled\nwith any Win32 C compiler (possibly with minor modifications).\n\nThis program aids release handling on Windows systems. The program is to be\ncalled by the `erlsrv` program, read up the release data file `start_erl.data`,\nand start Erlang. Some options to `start_erl` are added and removed by the\nrelease handler during upgrade with emulator restart (more specifically option\n`-data`).\n\n```text\nstart_erl [ ] ++ [ ]\n```\n\nThe `start_erl` program in its original form recognizes the following options:\n\n- **`++`** - Mandatory. Delimits `start_erl` options from normal Erlang options.\n  Everything on the command line _before_ `++` is interpreted as options to be\n  sent to the `erl` program. Everything _after_ `++` is interpreted as options\n  to `start_erl` itself.\n\n- **`-reldir  `** - Mandatory if environment variable `RELDIR` is\n  not specified and no `-rootdir` option is specified. Tells `start_erl` where\n  the root of the release tree is located in the file system (typically\n  ` \\releases`). The `start_erl.data` file is expected to be\n  located in this directory (unless otherwise specified). If only option\n  `-rootdir` is specified, the directory is assumed to be\n  ` \\releases`.\n\n- **`-rootdir  `** - Mandatory if `-reldir` is not\n  specified and no `RELDIR` exists in the environment. This specifies the Erlang\n  installation root directory (under which the `lib`, `releases`, and\n  `erts- ` directories are located). If only `-reldir` (or environment\n  variable `RELDIR`) is specified, the Erlang root is assumed to be the\n  directory exactly one level above the release directory.\n\n- **`-data  `** - Optional. Specifies another data file than\n  `start_erl.data` in the ` `. It is specified relative to the\n  ` ` or absolute (including drive letter, and so on). This option is\n  used by the release handler during upgrade and is not to be used during normal\n  operation. Normally the release data file is not to be named differently.\n\n- **`-bootflags  `** - Optional. Specifies a file name\n  relative to the release directory (that is, the subdirectory of ` `\n  where the `.boot` file and others are located). The contents of this file is\n  appended to the command line when Erlang is started. This makes it easy to\n  start the emulator with different options for different releases.","ref":"start_erl_cmd.html#description"},{"type":"extras","title":"Notes - start_erl","doc":"- As the source code is distributed, it can easily be modified to accept other\n  options. The program must still accept option `-data` with the semantics\n  described above for the release handler to work correctly.\n- The Erlang emulator is found by examining the registry keys for the emulator\n  version specified in the release data file. The new emulator must be properly\n  installed before the upgrade for this to work.\n- Although the program is located together with files specific to the emulator\n  version, it is not expected to be specific to the emulator version. The\n  release handler does _not_ change option `-machine` to `erlsrv` during\n  emulator restart. Locate the (possibly customized) `start_erl` program so that\n  it is not overwritten during upgrade.\n- The default options of the `erlsrv` program are not sufficient for release\n  handling. The machine started by `erlsrv` is be specified as the `start_erl`\n  program and the arguments are to contain `++` followed by the desired options.","ref":"start_erl_cmd.html#notes"},{"type":"extras","title":"See Also - start_erl","doc":"[`erlsrv`](erlsrv_cmd.md), `m:release_handler`","ref":"start_erl_cmd.html#see-also"},{"type":"extras","title":"werl","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# werl\n\nThe Erlang Emulator on Windows","ref":"werl_cmd.html"},{"type":"extras","title":"Description - werl","doc":"> #### Note {: .info }\n>\n> Since Erlang/OTP 26 the werl.exe command is now only a link to\n> [erl.exe](erl_cmd.md) as the normal Erlang shell has been updated to work on\n> both Unix and Windows in the same way.\n>\n> The text below is kept for systems that have yet to upgrade to Erlang/OTP 26\n\nOn Windows, the preferred way to start the Erlang system for interactive use is\nas follows:\n\n`werl  `\n\nThis starts Erlang in its own window, with fully functioning command-line\nediting and scrollbars. All flags except `-oldshell` work as they do for\n[`erl(1)`](erl_cmd.md).\n\n- To copy text to the clipboard, use `Ctrl-C`.\n- To paste text, use `Ctrl-V`.\n- To interrupt the runtime system or the shell process (depending on what has\n  been specified with system flag `+B`), use `Ctrl-Break`.\n\nIn cases where you want to redirect standard input and/or standard output or use\nErlang in a pipeline, `werl` is not suitable, and the `erl` program is to be\nused instead.\n\nThe `werl` window is in many ways modeled after the `xterm` window present on\nother platforms, as the `xterm` model fits well with line-oriented command-based\ninteraction. This means that selecting text is line-oriented rather than\nrectangle-oriented.\n\n- To select text in the `werl` window, press and hold the left mouse button and\n  drag the mouse over the text you want to select. If the selection crosses line\n  boundaries, the selected text consists of complete lines where applicable\n  (just like in a word processor).\n- To select more text than fits in the window, start by selecting a small part\n  in the beginning of the text you want, then use the scrollbar to view the end\n  of the desired selection, point to it, and press the _right_ mouse button. The\n  whole area between your first selection and the point where you right-clicked\n  is included in the selection.\n- To copy the selected text to the clipboard, either use `Ctrl-C`, use the menu,\n  or press the copy button in the toolbar.\n\nPasted text is inserted at the current prompt position and is interpreted by\nErlang as usual keyboard input.\n\n- To retrieve previous command lines, press the `Up arrow` or use `Ctrl-P`.\n\nA drop-down box in the toolbar contains the command history. Selecting a command\nin the drop-down box inserts the command at the prompt, as if you used the\nkeyboard to retrieve the command.\n\n- To stop the Erlang emulator, close the `werl` window.","ref":"werl_cmd.html#description"},{"type":"extras","title":"driver_entry","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# driver_entry\n\nThe driver-entry structure used by Erlang drivers.","ref":"driver_entry.html"},{"type":"extras","title":"Description - driver_entry","doc":"> #### Warning {: .warning #WARNING }\n>\n> _Use this functionality with extreme care._\n>\n> A driver callback is executed as a direct extension of the native code of the\n> VM. Execution is not made in a safe environment. The VM _cannot_ provide the\n> same services as provided when executing Erlang code, such as pre-emptive\n> scheduling or memory protection. If the driver callback function does not\n> behave well, the whole VM will misbehave.\n>\n> - A driver callback that crash will crash the whole VM.\n> - An erroneously implemented driver callback can cause a VM internal state\n>   inconsistency, which can cause a crash of the VM, or miscellaneous\n>   misbehaviors of the VM at any point after the call to the driver callback.\n> - A driver callback doing [lengthy work](erl_driver.md#lengthy_work) before\n>   returning degrades responsiveness of the VM, and can cause miscellaneous\n>   strange behaviors. Such strange behaviors include, but are not limited to,\n>   extreme memory usage, and bad load balancing between schedulers. Strange\n>   behaviors that can occur because of lengthy work can also vary between\n>   Erlang/OTP releases.\n\nAs from ERTS 5.9 (Erlang/OTP R15B) the driver interface has been changed with\nlarger types for the callbacks [`output`](driver_entry.md#output),\n[`control`](driver_entry.md#control), and [`call`](driver_entry.md#call). See\ndriver [version management](erl_driver.md#version_management) in\n[`erl_driver`](erl_driver.md).\n\n> #### Note {: .info }\n>\n> Old drivers (compiled with an `erl_driver.h` from an ERTS version earlier than\n> 5.9) must be updated and have to use the extended interface (with\n> [version management ](erl_driver.md#version_management)).\n\nThe `driver_entry` structure is a C struct that all Erlang drivers define. It\ncontains entry points for the Erlang driver, which are called by the Erlang\nemulator when Erlang code accesses the driver.\n\n[](){: #emulator } The [`erl_driver`](erl_driver.md) driver API functions need a\nport handle that identifies the driver instance (and the port in the emulator).\nThis is only passed to the `start` function, but not to the other functions. The\n`start` function returns a driver-defined handle that is passed to the other\nfunctions. A common practice is to have the `start` function allocate some\napplication-defined structure and stash the `port` handle in it, to use it later\nwith the driver API functions.\n\nThe driver callback functions are called synchronously from the Erlang emulator.\nIf they take too long before completing, they can cause time-outs in the\nemulator. Use the queue or asynchronous calls if necessary, as the emulator must\nbe responsive.\n\nThe driver structure contains the driver name and some 15 function pointers,\nwhich are called at different times by the emulator.\n\nThe only exported function from the driver is `driver_init`. This function\nreturns the `driver_entry` structure that points to the other functions in the\ndriver. The `driver_init` function is declared with a macro,\n`DRIVER_INIT(drivername)`. (This is because different operating systems have\ndifferent names for it.)\n{: #DRIVER_INIT }\n\nWhen writing a driver in C++, the driver entry is to be of `\"C\"` linkage. One\nway to do this is to put the following line somewhere before the driver entry:\n\n```text\nextern \"C\" DRIVER_INIT(drivername);\n```\n\nWhen the driver has passed the `driver_entry` over to the emulator, the driver\nis _not_ allowed to modify the `driver_entry`.\n\nIf compiling a driver for static inclusion through `--enable-static-drivers`,\nyou must define `STATIC_ERLANG_DRIVER` before the `DRIVER_INIT` declaration.\n\n> #### Note {: .info }\n>\n> Do _not_ declare the `driver_entry` `const`. This because the emulator must\n> modify the `handle` and the `handle2` fields. A statically allocated, and\n> `const`\\-declared `driver_entry` can be located in read-only memory, which\n> causes the emulator to crash.","ref":"driver_entry.html#description"},{"type":"extras","title":"Data Types - driver_entry","doc":"`ErlDrvEntry`\n\n```c\ntypedef struct erl_drv_entry {\n    int (*init)(void);          /* Called at system startup for statically\n                                   linked drivers, and after loading for\n                                   dynamically loaded drivers */\n#ifndef ERL_SYS_DRV\n    ErlDrvData (*start)(ErlDrvPort port, char *command);\n                                /* Called when open_port/2 is invoked,\n                                   return value -1 means failure */\n#else\n    ErlDrvData (*start)(ErlDrvPort port, char *command, SysDriverOpts* opts);\n                                /* Special options, only for system driver */\n#endif\n    void (*stop)(ErlDrvData drv_data);\n                                /* Called when port is closed, and when the\n                                   emulator is halted */\n    void (*output)(ErlDrvData drv_data, char *buf, ErlDrvSizeT len);\n                                /* Called when we have output from Erlang to\n                                   the port */\n    void (*ready_input)(ErlDrvData drv_data, ErlDrvEvent event);\n                                /* Called when we have input from one of\n                                   the driver's handles */\n    void (*ready_output)(ErlDrvData drv_data, ErlDrvEvent event);\n                                /* Called when output is possible to one of\n                                   the driver's handles */\n    char *driver_name;          /* Name supplied as command in\n                                   erlang:open_port/2 */\n    void (*finish)(void);       /* Called before unloading the driver -\n                                   dynamic drivers only */\n    void *handle;               /* Reserved, used by emulator internally */\n    ErlDrvSSizeT (*control)(ErlDrvData drv_data, unsigned int command,\n                            char *buf, ErlDrvSizeT len,\n\t\t\t    char **rbuf, ErlDrvSizeT rlen);\n                                /* \"ioctl\" for drivers - invoked by\n                                   port_control/3 */\n    void (*timeout)(ErlDrvData drv_data);\n                                /* Handling of time-out in driver */\n    void (*outputv)(ErlDrvData drv_data, ErlIOVec *ev);\n                                /* Called when we have output from Erlang\n                                   to the port */\n    void (*ready_async)(ErlDrvData drv_data, ErlDrvThreadData thread_data);\n    void (*flush)(ErlDrvData drv_data);\n                                /* Called when the port is about to be\n                                   closed, and there is data in the\n                                   driver queue that must be flushed\n                                   before 'stop' can be called */\n    ErlDrvSSizeT (*call)(ErlDrvData drv_data, unsigned int command,\n                         char *buf, ErlDrvSizeT len,\n\t\t\t char **rbuf, ErlDrvSizeT rlen, unsigned int *flags);\n                                /* Works mostly like 'control', a synchronous\n                                   call into the driver */\n    void* unused_event_callback;\n    int extended_marker;        /* ERL_DRV_EXTENDED_MARKER */\n    int major_version;          /* ERL_DRV_EXTENDED_MAJOR_VERSION */\n    int minor_version;          /* ERL_DRV_EXTENDED_MINOR_VERSION */\n    int driver_flags;           /* ERL_DRV_FLAGs */\n    void *handle2;              /* Reserved, used by emulator internally */\n    void (*process_exit)(ErlDrvData drv_data, ErlDrvMonitor *monitor);\n                                /* Called when a process monitor fires */\n    void (*stop_select)(ErlDrvEvent event, void* reserved);\n                                /* Called to close an event object */\n } ErlDrvEntry;\n```\n\n- **`int (*init)(void)`{: #init }** - Called directly after the driver has been\n  loaded by `erl_ddll:load_driver/2` (actually when the driver is added to the\n  driver list). The driver is to return `0`, or, if the driver cannot\n  initialize, `-1`.\n\n- **`ErlDrvData (*start)(ErlDrvPort port, char* command)`{: #start }** - Called\n  when the driver is instantiated, when `erlang:open_port/2` is called. The\n  driver is to return a number >= 0 or a pointer, or, if the driver cannot be\n  started, one of three error codes:\n\n  - **`ERL_DRV_ERROR_GENERAL`** - General error, no error code\n\n  - **`ERL_DRV_ERROR_ERRNO`** - Error with error code in `errno`\n\n  - **`ERL_DRV_ERROR_BADARG`** - Error, `badarg`\n\n  If an error code is returned, the port is not started.\n\n- **`void (*stop)(ErlDrvData drv_data)`{: #stop }** - Called when the port is\n  closed, with `erlang:port_close/1` or `Port ! {self(), close}`. Notice that\n  terminating the port owner process also closes the port. If `drv_data` is a\n  pointer to memory allocated in `start`, then `stop` is the place to deallocate\n  that memory.\n\n- **`void (*output)(ErlDrvData drv_data, char *buf, ErlDrvSizeT len)`{: #output }** -\n  Called when an Erlang process has sent data to the port. The data is\n  pointed to by `buf`, and is `len` bytes. Data is sent to the port with\n  `Port ! {self(), {command, Data}}` or with `erlang:port_command/2`. Depending\n  on how the port was opened, it is to be either a list of integers `0...255` or\n  a binary. See `erlang:open_port/2` and `erlang:port_command/2`.\n\n- **`void (*ready_input)(ErlDrvData drv_data, ErlDrvEvent event)`{: #ready_input }**\n\n- **`void (*ready_output)(ErlDrvData drv_data, ErlDrvEvent event)`{: #ready_output }** -\n  Called when a driver event (specified in parameter `event`) is signaled. This is used\n  to help asynchronous drivers \"wake up\" when something occurs.\n\n  On Unix the `event` is a pipe or socket handle (or something that the `select`\n  system call understands).\n\n  On Windows the `event` is an `Event` or `Semaphore` (or something that the\n  `WaitForMultipleObjects` API function understands). (Some trickery in the\n  emulator allows more than the built-in limit of 64 `Events` to be used.)\n\n  To use this with threads and asynchronous routines, create a pipe on Unix and\n  an `Event` on Windows. When the routine completes, write to the pipe (use\n  `SetEvent` on Windows), this makes the emulator call `ready_input` or\n  `ready_output`.\n\n  False events can occur. That is, calls to `ready_input` or `ready_output`\n  although no real events are signaled. In reality, it is rare (and\n  OS-dependant), but a robust driver must nevertheless be able to handle such\n  cases.\n\n- **`char *driver_name`{: #driver_name }** - The driver name. It must correspond\n  to the atom used in `erlang:open_port/2`, and the name of the driver library\n  file (without the extension).\n\n- **`void (*finish)(void)`{: #finish }** - Called by the `erl_ddll` driver when\n  the driver is unloaded. (It is only called in dynamic drivers.)\n\n  The driver is only unloaded as a result of calling `erl_ddll:unload_driver/1`,\n  or when the emulator halts.\n\n- **`void *handle`** - This field is reserved for the emulator's internal use.\n  The emulator will modify this field, so it is important that the\n  `driver_entry` is not declared `const`.\n\n- __`ErlDrvSSizeT (*control)(ErlDrvData drv_data, unsigned int command, char *buf, ErlDrvSizeT len, char **rbuf, ErlDrvSizeT rlen)`__{: #control } -\n  A special routine invoked with `erlang:port_control/3`. It\n  works a little like an \"ioctl\" for Erlang drivers. The data specified to\n  [`port_control/3`](`port_control/3`) arrives in `buf` and `len`. The driver\n  can send data back, using `*rbuf` and `rlen`.\n\n  This is the fastest way of calling a driver and get a response. It makes no\n  context switch in the Erlang emulator and requires no message passing. It is\n  suitable for calling C function to get faster execution, when Erlang is too\n  slow.\n\n  If the driver wants to return data, it is to return it in `rbuf`. When\n  `control` is called, `*rbuf` points to a default buffer of `rlen` bytes, which\n  can be used to return data. Data is returned differently depending on the port\n  control flags (those that are set with\n  [`erl_driver:set_port_control_flags`](erl_driver.md#set_port_control_flags)).\n\n  If the flag is set to `PORT_CONTROL_FLAG_BINARY`, a binary is returned. Small\n  binaries can be returned by writing the raw data into the default buffer. A\n  binary can also be returned by setting `*rbuf` to point to a binary allocated\n  with [`erl_driver:driver_alloc_binary`](erl_driver.md#driver_alloc_binary).\n  This binary is freed automatically after `control` has returned. The driver\n  can retain the binary for _read only_ access with\n  [`erl_driver:driver_binary_inc_refc`](erl_driver.md#driver_binary_inc_refc) to\n  be freed later with\n  [`erl_driver:driver_free_binary`](erl_driver.md#driver_free_binary). It is\n  never allowed to change the binary after `control` has returned. If `*rbuf` is\n  set to `NULL`, an empty list is returned.\n\n  If the flag is set to `0`, data is returned as a list of integers. Either use\n  the default buffer or set `*rbuf` to point to a larger buffer allocated with\n  [`erl_driver:driver_alloc`](erl_driver.md#driver_alloc). The buffer is freed\n  automatically after `control` has returned.\n\n  Using binaries is faster if more than a few bytes are returned.\n\n  The return value is the number of bytes returned in `*rbuf`.\n\n- **`void (*timeout)(ErlDrvData drv_data)`{: #timeout }** - Called any time\n  after the driver's timer reaches `0`. The timer is activated with\n  [`erl_driver:driver_set_timer`](erl_driver.md#driver_set_timer). No priorities\n  or ordering exist among drivers, so if several drivers time out at the same\n  time, anyone of them is called first.\n\n- **`void (*outputv)(ErlDrvData drv_data, ErlIOVec *ev)`{: #outputv }** - Called\n  whenever the port is written to. If it is `NULL`, the `output` function is\n  called instead. This function is faster than `output`, as it takes an\n  `ErlIOVec` directly, which requires no copying of the data. The port is to be\n  in binary mode, see `erlang:open_port/2`.\n\n  `ErlIOVec` contains both a `SysIOVec`, suitable for `writev`, and one or more\n  binaries. If these binaries are to be retained when the driver returns from\n  `outputv`, they can be queued (using, for example,\n  [`erl_driver:driver_enq_bin`](erl_driver.md#driver_enq_bin)) or, if they are\n  kept in a static or global variable, the reference counter can be incremented.\n\n- **`void (*ready_async)(ErlDrvData drv_data, ErlDrvThreadData thread_data)`{: #ready_async }** -\n  Called after an asynchronous call has completed. The asynchronous call is started with\n  [`erl_driver:driver_async`](erl_driver.md#driver_async). This function is\n  called from the Erlang emulator thread, as opposed to the asynchronous\n  function, which is called in some thread (if multi-threading is enabled).\n\n- **`void (*flush)(ErlDrvData drv_data)`** - Called when the port is about to be\n  closed, and there is data in the driver queue that must be flushed before\n  'stop' can be called.\n\n- __`ErlDrvSSizeT (*call)(ErlDrvData drv_data, unsigned int command, char *buf, ErlDrvSizeT len, char **rbuf, ErlDrvSizeT rlen, unsigned int *flags)`__{: #call } -\n  Called from `erlang:port_call/3`. It works a lot like the\n  `control` callback, but uses the external term format for input and output.\n\n  `command` is an integer, obtained from the call from Erlang (the second\n  argument to `erlang:port_call/3`).\n\n  `buf` and `len` provide the arguments to the call (the third argument to\n  `erlang:port_call/3`). They can be decoded using `ei` functions.\n\n  `rbuf` points to a return buffer, `rlen` bytes long. The return data is to be\n  a valid Erlang term in the external (binary) format. This is converted to an\n  Erlang term and returned by `erlang:port_call/3` to the caller. If more space\n  than `rlen` bytes is needed to return data, `*rbuf` can be set to memory\n  allocated with [`erl_driver:driver_alloc`](erl_driver.md#driver_alloc). This\n  memory is freed automatically after `call` has returned.\n\n  The return value is the number of bytes returned in `*rbuf`. If\n  `ERL_DRV_ERROR_GENERAL` is returned (or in fact, anything < 0),\n  `erlang:port_call/3` throws a `BAD_ARG`.\n\n- **`void (*event)(ErlDrvData drv_data, ErlDrvEvent event, ErlDrvEventData event_data)`** -\n  Intentionally left undocumented.\n\n- **`int extended_marker`{: #extended_marker }** - This field is either to be\n  equal to `ERL_DRV_EXTENDED_MARKER` or `0`. An old driver (not aware of the\n  extended driver interface) is to set this field to `0`. If this field is `0`,\n  all the following fields _must_ also be `0`, or `NULL` if it is a pointer\n  field.\n\n- **`int major_version`** - This field is to equal\n  `ERL_DRV_EXTENDED_MAJOR_VERSION` if field `extended_marker` equals\n  `ERL_DRV_EXTENDED_MARKER`.\n\n- **`int minor_version`** - This field is to equal\n  `ERL_DRV_EXTENDED_MINOR_VERSION` if field `extended_marker` equals\n  `ERL_DRV_EXTENDED_MARKER`.\n\n- **`int driver_flags`{: #driver_flags }** - This field is used to pass driver\n  capability and other information to the runtime system. If field\n  `extended_marker` equals `ERL_DRV_EXTENDED_MARKER`, it is to contain `0` or\n  driver flags (`ERL_DRV_FLAG_*`) OR'ed bitwise. The following driver flags\n  exist:\n\n  - **`ERL_DRV_FLAG_USE_PORT_LOCKING`** - The runtime system uses port-level\n    locking on all ports executing this driver instead of driver-level locking.\n    For more information, see [`erl_driver`](erl_driver.md#smp_support).\n\n  - **`ERL_DRV_FLAG_SOFT_BUSY`** - Marks that driver instances can handle being\n    called in the [`output`](driver_entry.md#output) and/or\n    [`outputv`](driver_entry.md#outputv) callbacks although a driver instance\n    has marked itself as busy (see\n    [`erl_driver:set_busy_port`](erl_driver.md#set_busy_port)). As from ERTS\n    5.7.4 this flag is required for drivers used by the Erlang distribution (the\n    behavior has always been required by drivers used by the distribution).\n\n  - **`ERL_DRV_FLAG_NO_BUSY_MSGQ`** - Disables busy port message queue\n    functionality. For more information, see\n    [`erl_driver:erl_drv_busy_msgq_limits`](erl_driver.md#erl_drv_busy_msgq_limits).\n\n  - **`ERL_DRV_FLAG_USE_INIT_ACK`** - When this flag is specified, the linked-in\n    driver must manually acknowledge that the port has been successfully started\n    using [`erl_driver:erl_drv_init_ack()`](erl_driver.md#erl_drv_init_ack).\n    This allows the implementor to make the `erlang:open_port` exit with\n    `badarg` after some initial asynchronous initialization has been done.\n\n- **`void *handle2`** - This field is reserved for the emulator's internal use.\n  The emulator modifies this field, so it is important that the `driver_entry`\n  is not declared `const`.\n\n- **`void (*process_exit)(ErlDrvData drv_data, ErlDrvMonitor *monitor)`{: #process_exit }** -\n  Called when a monitored process exits. The `drv_data` is\n  the data associated with the port for which the process is monitored (using\n  [`erl_driver:driver_monitor_process`](erl_driver.md#driver_monitor_process))\n  and the `monitor` corresponds to the `ErlDrvMonitor` structure filled in when\n  creating the monitor. The driver interface function\n  [`erl_driver:driver_get_monitored_process`](erl_driver.md#driver_get_monitored_process)\n  can be used to retrieve the process ID of the exiting process as an\n  `ErlDrvTermData`.\n\n- **`void (*stop_select)(ErlDrvEvent event, void* reserved)`{: #stop_select }** -\n  Called on behalf of\n  [`erl_driver:driver_select`](erl_driver.md#driver_select) when it is safe to\n  close an event object.\n\n  A typical implementation on Unix is to do `close((int)event)`.\n\n  Argument `reserved` is intended for future use and is to be ignored.\n\n  In contrast to most of the other callback functions, `stop_select` is called\n  independent of any port. No `ErlDrvData` argument is passed to the function.\n  No driver lock or port lock is guaranteed to be held. The port that called\n  `driver_select` can even be closed at the time `stop_select` is called. But it\n  can also be the case that `stop_select` is called directly by\n  `erl_driver:driver_select`.\n\n  It is not allowed to call any functions in the [driver API](erl_driver.md)\n  from `stop_select`. This strict limitation is because the volatile context\n  that `stop_select` can be called.","ref":"driver_entry.html#data-types"},{"type":"extras","title":"See Also - driver_entry","doc":"[`erl_driver(3)`](erl_driver.md), `m:erlang`, `m:erl_ddll`","ref":"driver_entry.html#see-also"},{"type":"extras","title":"erl_driver","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# erl_driver\n\nAPI functions for an Erlang driver.","ref":"erl_driver.html"},{"type":"extras","title":"Description - erl_driver","doc":"An Erlang driver is a library containing a set of native driver callback\nfunctions that the Erlang Virtual Machine calls when certain events occur. There\ncan be multiple instances of a driver, each instance is associated with an\nErlang port.\n\n[](){: #WARNING }\n\n> #### Warning {: .warning }\n>\n> _Use this functionality with extreme care._\n>\n> A driver callback is executed as a direct extension of the native code of the\n> VM. Execution is not made in a safe environment. The VM _cannot_ provide the\n> same services as provided when executing Erlang code, such as pre-emptive\n> scheduling or memory protection. If the driver callback function does not\n> behave well, the whole VM will misbehave.\n>\n> - A driver callback that crash will crash the whole VM.\n> - An erroneously implemented driver callback can cause a VM internal state\n>   inconsistency, which can cause a crash of the VM, or miscellaneous\n>   misbehaviors of the VM at any point after the call to the driver callback.\n> - A driver callback doing [lengthy work](erl_driver.md#lengthy_work) before\n>   returning degrades responsiveness of the VM and can cause miscellaneous\n>   strange behaviors. Such strange behaviors include, but are not limited to,\n>   extreme memory usage and bad load balancing between schedulers. Strange\n>   behaviors that can occur because of lengthy work can also vary between\n>   Erlang/OTP releases.\n\nAs from ERTS 5.5.3 the driver interface has been extended (see\n[`extended marker`](driver_entry.md#extended_marker)). The extended interface\nintroduces [version management](erl_driver.md#version_management), the\npossibility to pass capability flags (see\n[`driver_flags`](driver_entry.md#driver_flags)) to the runtime system at driver\ninitialization, and some new driver API functions.\n\n> #### Note {: .info }\n>\n> As from ERTS 5.9 old drivers must be recompiled and use the extended\n> interface. They must also be adjusted to the\n> [64-bit capable driver interface](erl_driver.md#rewrites_for_64_bits).\n\nThe driver calls back to the emulator, using the API functions declared in\n`erl_driver.h`. They are used for outputting data from the driver, using timers,\nand so on.\n\nEach driver instance is associated with a port. Every port has a port owner\nprocess. Communication with the port is normally done through the port owner\nprocess. Most of the functions take the `port` handle as an argument. This\nidentifies the driver instance. Notice that this port handle must be stored by\nthe driver, it is not given when the driver is called from the emulator (see\n[`driver_entry`](driver_entry.md#emulator)).\n\nSome of the functions take a parameter of type `ErlDrvBinary`, a driver binary.\nIt is to be both allocated and freed by the caller. Using a binary directly\navoids one extra copying of data.\n\nMany of the output functions have a \"header buffer\", with `hbuf` and `hlen`\nparameters. This buffer is sent as a list before the binary (or list, depending\non port mode) that is sent. This is convenient when matching on messages\nreceived from the port. (Although in the latest Erlang versions there is the\nbinary syntax, which enables you to match on the beginning of a binary.)\n\n[](){: #smp_support } Drivers are locked either on driver level or port level\n(driver instance level). By default driver level locking will be used, that is,\nonly one emulator thread will execute code in the driver at a time. If port\nlevel locking is used, multiple emulator threads can execute code in the driver\nat the same time. Only one thread at a time will call driver callbacks\ncorresponding to the same port, though. To enable port level locking, set the\n`ERL_DRV_FLAG_USE_PORT_LOCKING` [driver flag](driver_entry.md#driver_flags) in\nthe [`driver_entry`](driver_entry.md) used by the driver. When port level\nlocking is used, the driver writer is responsible for synchronizing all accesses\nto data shared by the ports (driver instances).\n\nMost drivers written before the runtime system with SMP support existed can run\nin the runtime system with SMP support, without being rewritten, if driver level\nlocking is used.\n\n> #### Note {: .info }\n>\n> It is assumed that drivers do not access other drivers. If drivers access each\n> other, they must provide their own mechanism for thread-safe synchronization.\n> Such \"inter-driver communication\" is strongly discouraged.\n\n> #### Note {: .info }\n>\n> Regardless of locking scheme used, calls to driver callbacks can be made from\n> different threads.\n\nMost functions in this API are _not_ thread-safe, that is, they _cannot_ be\ncalled from arbitrary threads. Functions that are not documented as thread-safe\ncan only be called from driver callbacks or function calls descending from a\ndriver callback call. Notice that driver callbacks can be called from different\nthreads. This, however, is not a problem for any function in this API, as the\nemulator has control over these threads.\n\n> #### Warning {: .warning }\n>\n> Functions not explicitly documented as thread-safe are _not_ thread safe.\n>\n> A function not explicitly documented as thread-safe can, at some point in\n> time, have a thread-safe implementation in the runtime system. Such an\n> implementation can however change to a thread _unsafe_ implementation at any\n> time _without any notice_.\n>\n> _Only use functions explicitly documented as thread-safe from arbitrary\n> threads._\n\n[](){: #lengthy_work } As mentioned in the [warning](erl_driver.md#WARNING) text\nat the beginning of this section, it is of vital importance that a driver\ncallback returns relatively fast. It is difficult to give an exact maximum\namount of time that a driver callback is allowed to work, but usually a\nwell-behaving driver callback is to return within 1 millisecond. This can be\nachieved using different approaches. If you have full control over the code to\nexecute in the driver callback, the best approach is to divide the work into\nmultiple chunks of work, and trigger multiple calls to the\n[time-out callback](driver_entry.md#timeout) using zero time-outs. Function\n[`erl_drv_consume_timeslice`](erl_driver.md#erl_drv_consume_timeslice) can be\nuseful to determine when to trigger such time-out callback calls. However,\nsometimes it cannot be implemented this way, for example when calling\nthird-party libraries. In this case, you typically want to dispatch the work to\nanother thread. Information about thread primitives is provided below.","ref":"erl_driver.html#description"},{"type":"extras","title":"Functionality - erl_driver","doc":"All functions that a driver needs to do with Erlang are performed through driver\nAPI functions. Functions exist for the following functionality:\n\n- **Timer functions** - Control the timer that a driver can use. The timer has\n  the emulator call the [`timeout`](driver_entry.md#timeout) entry function\n  after a specified time. Only one timer is available for each driver instance.\n\n- **Queue handling** - Every driver instance has an associated queue. This queue\n  is a `SysIOVec`, which works as a buffer. It is mostly used for the driver to\n  buffer data that is to be written to a device, it is a byte stream. If the\n  port owner process closes the driver, and the queue is not empty, the driver\n  is not closed. This enables the driver to flush its buffers before closing.\n\n  The queue can be manipulated from any threads if a port data lock is used. For\n  more information, see [`ErlDrvPDL`](erl_driver.md#ErlDrvPDL).\n\n- **Output functions** - With these functions, the driver sends data back to the\n  emulator. The data is received as messages by the port owner process, see\n  `erlang:open_port/2`. The vector function and the function taking a driver\n  binary are faster, as they avoid copying the data buffer. There is also a fast\n  way of sending terms from the driver, without going through the binary term\n  format.\n\n- **Failure** - The driver can exit and signal errors up to Erlang. This is only\n  for severe errors, when the driver cannot possibly keep open.\n\n- **Asynchronous calls** - Erlang/OTP R7B and later versions have provision for\n  asynchronous function calls, using a thread pool provided by Erlang. There is\n  also a select call, which can be used for asynchronous drivers.\n\n- **[](){: #multi_threading } Multi-threading**  \n  A POSIX thread like API for multi-threading is provided. The Erlang driver\n  thread API only provides a subset of the functionality provided by the POSIX\n  thread API. The subset provided is more or less the basic functionality needed\n  for multi-threaded programming:\n\n  - [Threads](erl_driver.md#ErlDrvTid)\n  - [Mutexes](erl_driver.md#ErlDrvMutex)\n  - [Condition variables](erl_driver.md#ErlDrvCond)\n  - [Read/write locks](erl_driver.md#ErlDrvRWLock)\n  - [Thread-specific data](erl_driver.md#ErlDrvTSDKey)\n\n  The Erlang driver thread API can be used in conjunction with the POSIX thread\n  API on UN-ices and with the Windows native thread API on Windows. The Erlang\n  driver thread API has the advantage of being portable, but there can exist\n  situations where you want to use functionality from the POSIX thread API or\n  the Windows native thread API.\n\n  The Erlang driver thread API only returns error codes when it is reasonable to\n  recover from an error condition. If it is not reasonable to recover from an\n  error condition, the whole runtime system is terminated. For example, if a\n  create mutex operation fails, an error code is returned, but if a lock\n  operation on a mutex fails, the whole runtime system is terminated.\n\n  Notice that there is no \"condition variable wait with time-out\" in the Erlang\n  driver thread API. This because of issues with `pthread_cond_timedwait`. When\n  the system clock suddenly is changed, it is not always guaranteed that you\n  will wake up from the call as expected. An Erlang runtime system must be able\n  to cope with sudden changes of the system clock. Therefore, we have omitted it\n  from the Erlang driver thread API. In the Erlang driver case, time-outs can\n  and are to be handled with the timer functionality of the Erlang driver API.\n\n  Notice that many functions in the Erlang driver API are _not_ thread-safe. If\n  a function is not documented as thread-safe, it is _not_ thread-safe.\n\n  > #### Note {: .info }\n  >\n  > When executing in an emulator thread, it is _very important_ that you unlock\n  > _all_ locks you have locked before letting the thread out of your control;\n  > otherwise you are _very likely_ to deadlock the whole emulator.\n  >\n  > If you need to use thread-specific data in an emulator thread, only have the\n  > thread-specific data set while the thread is under your control, and clear\n  > the thread-specific data before you let the thread out of your control.\n\n  In the future, debug functionality will probably be integrated with the Erlang\n  driver thread API. All functions that create entities take a `name` argument.\n  Currently the `name` argument is unused, but it will be used when the debug\n  functionality is implemented. If you name all entities created well, the debug\n  functionality will be able to give you better error reports.\n\n- **Adding/removing drivers** - A driver can add and later remove drivers.\n\n- **Monitoring processes** - A driver can monitor a process that does not own a\n  port.\n\n- **[](){: #version_management } Version management**  \n  Version management is enabled for drivers that have set the\n  [`extended_marker`](driver_entry.md#extended_marker) field of their\n  [`driver_entry`](driver_entry.md) to `ERL_DRV_EXTENDED_MARKER`. `erl_driver.h`\n  defines:\n\n  - `ERL_DRV_EXTENDED_MARKER`\n  - `ERL_DRV_EXTENDED_MAJOR_VERSION`, which is incremented when driver\n    incompatible changes are made to the Erlang runtime system. Normally it\n    suffices to recompile drivers when `ERL_DRV_EXTENDED_MAJOR_VERSION` has\n    changed, but it can, under rare circumstances, mean that drivers must be\n    slightly modified. If so, this will of course be documented.\n  - `ERL_DRV_EXTENDED_MINOR_VERSION`, which is incremented when new features are\n    added. The runtime system uses the minor version of the driver to determine\n    what features to use.\n\n  The runtime system normally refuses to load a driver if the major versions\n  differ, or if the major versions are equal and the minor version used by the\n  driver is greater than the one used by the runtime system. Old drivers with\n  lower major versions are however allowed after a bump of the major version\n  during a transition period of two major releases. Such old drivers can,\n  however, fail if deprecated features are used.\n\n  The emulator refuses to load a driver that does not use the extended driver\n  interface, to allow for 64-bit capable drivers, as incompatible type changes\n  for the callbacks [`output`](driver_entry.md#output),\n  [`control`](driver_entry.md#control), and [`call`](driver_entry.md#call) were\n  introduced in Erlang/OTP R15B. A driver written with the old types would\n  compile with warnings and when called return garbage sizes to the emulator,\n  causing it to read random memory and create huge incorrect result blobs.\n\n  Therefore it is not enough to only recompile drivers written with version\n  management for pre R15B types; the types must be changed in the driver\n  suggesting other rewrites, especially regarding size variables. _Investigate\n  all warnings when recompiling._\n\n  Also, the API driver functions `driver_output*` and `driver_vec_to_buf`,\n  `driver_alloc/realloc*`, and the `driver_*` queue functions were changed to\n  have larger length arguments and return values. This is a lesser problem, as\n  code that passes smaller types gets them auto-converted in the calls, and as\n  long as the driver does not handle sizes that overflow an `int`, all will work\n  as before.\n\n- **[](){: #time_measurement } Time measurement**  \n  Support for time measurement in drivers:\n\n  - [`ErlDrvTime`](erl_driver.md#ErlDrvTime)\n  - [`ErlDrvTimeUnit`](erl_driver.md#ErlDrvTimeUnit)\n  - [`erl_drv_monotonic_time`](erl_driver.md#erl_drv_monotonic_time)\n  - [`erl_drv_time_offset`](erl_driver.md#erl_drv_time_offset)\n  - [`erl_drv_convert_time_unit`](erl_driver.md#erl_drv_convert_time_unit)\n\n[](){: #rewrites_for_64_bits }","ref":"erl_driver.html#functionality"},{"type":"extras","title":"Rewrites for 64-Bit Driver Interface - erl_driver","doc":"ERTS 5.9 introduced two new integer types,\n[`ErlDrvSizeT`](erl_driver.md#ErlDrvSizeT) and\n[`ErlDrvSSizeT`](erl_driver.md#ErlDrvSSizeT), which can hold 64-bit sizes if\nnecessary.\n\nTo not update a driver and only recompile, it probably works when building for a\n32-bit machine creating a false sense of security. Hopefully that will generate\nmany important warnings. But when recompiling the same driver later on for a\n64-bit machine, there _will_ be warnings and almost certainly crashes. So it is\na _bad_ idea to postpone updating the driver and not fixing the warnings.\n\nWhen recompiling with `gcc`, use flag `-Wstrict-prototypes` to get better\nwarnings. Try to find a similar flag if you use another compiler.\n\nThe following is a checklist for rewriting a pre ERTS 5.9 driver, most important\nfirst:\n\n- **Return types for driver callbacks** - Rewrite driver callback\n  [`control`](driver_entry.md#control) to use return type `ErlDrvSSizeT` instead\n  of `int`.\n\n  Rewrite driver callback [`call`](driver_entry.md#call) to use return type\n  `ErlDrvSSizeT` instead of `int`.\n\n  > #### Note {: .info }\n  >\n  > These changes are essential not to crash the emulator or worse cause\n  > malfunction. Without them a driver can return garbage in the high 32 bits to\n  > the emulator, causing it to build a huge result from random bytes, either\n  > crashing on memory allocation or succeeding with a random result from the\n  > driver call.\n\n- **Arguments to driver callbacks** - Driver callback\n  [`output`](driver_entry.md#output) now gets `ErlDrvSizeT` as 3rd argument\n  instead of previously `int`.\n\n  Driver callback [`control`](driver_entry.md#control) now gets `ErlDrvSizeT` as\n  4th and 6th arguments instead of previously `int`.\n\n  Driver callback [`call`](driver_entry.md#call) now gets `ErlDrvSizeT` as 4th\n  and 6th arguments instead of previously `int`.\n\n  Sane compiler's calling conventions probably make these changes necessary only\n  for a driver to handle data chunks that require 64-bit size fields (mostly\n  larger than 2 GB, as that is what an `int` of 32 bits can hold). But it is\n  possible to think of non-sane calling conventions that would make the driver\n  callbacks mix up the arguments causing malfunction.\n\n  > #### Note {: .info }\n  >\n  > The argument type change is from signed to unsigned. This can cause problems\n  > for, for example, loop termination conditions or error conditions if you\n  > only change the types all over the place.\n\n- **Larger `size` field in `ErlIOVec`** - The `size` field in\n  [`ErlIOVec`](erl_driver.md#ErlIOVec) has been changed to `ErlDrvSizeT` from\n  `int`. Check all code that use that field.\n\n  Automatic type-casting probably makes these changes necessary only for a\n  driver that encounters sizes > 32 bits.\n\n  > #### Note {: .info }\n  >\n  > The `size` field changed from signed to unsigned. This can cause problems\n  > for, for example, loop termination conditions or error conditions if you\n  > only change the types all over the place.\n\n- **Arguments and return values in the driver API** - Many driver API functions\n  have changed argument type and/or return value to `ErlDrvSizeT` from mostly\n  `int`. Automatic type-casting probably makes these changes necessary only for\n  a driver that encounters sizes > 32 bits.\n\n  - **[`driver_output`](erl_driver.md#driver_output)** - 3rd argument\n\n  - **[`driver_output2`](erl_driver.md#driver_output2)** - 3rd and 5th arguments\n\n  - **[`driver_output_binary`](erl_driver.md#driver_output_binary)** - 3rd, 5th,\n    and 6th arguments\n\n  - **[`driver_outputv`](erl_driver.md#driver_outputv)** - 3rd and 5th arguments\n\n  - **[`driver_vec_to_buf`](erl_driver.md#driver_vec_to_buf)** - 3rd argument\n    and return value\n\n  - **[`driver_alloc`](erl_driver.md#driver_alloc)** - 1st argument\n\n  - **[`driver_realloc`](erl_driver.md#driver_realloc)** - 2nd argument\n\n  - **[`driver_alloc_binary`](erl_driver.md#driver_alloc_binary)** - 1st\n    argument\n\n  - **[`driver_realloc_binary`](erl_driver.md#driver_realloc_binary)** - 2nd\n    argument\n\n  - **[`driver_enq`](erl_driver.md#driver_enq)** - 3rd argument\n\n  - **[`driver_pushq`](erl_driver.md#driver_pushq)** - 3rd argument\n\n  - **[`driver_deq`](erl_driver.md#driver_deq)** - 2nd argument and return value\n\n  - **[`driver_sizeq`](erl_driver.md#driver_sizeq)** - Return value\n\n  - **[`driver_enq_bin`](erl_driver.md#driver_enq_bin)** - 3rd and 4th arguments\n\n  - **[`driver_pushq_bin`](erl_driver.md#driver_pushq_bin)** - 3rd and 4th\n    arguments\n\n  - **[`driver_enqv`](erl_driver.md#driver_enqv)** - 3rd argument\n\n  - **[`driver_pushqv`](erl_driver.md#driver_pushqv)** - 3rd argument\n\n  - **[`driver_peekqv`](erl_driver.md#driver_peekqv)** - Return value\n\n  > #### Note {: .info }\n  >\n  > This is a change from signed to unsigned. This can cause problems for, for\n  > example, loop termination conditions and error conditions if you only change\n  > the types all over the place.","ref":"erl_driver.html#rewrites-for-64-bit-driver-interface"},{"type":"extras","title":"Data Types - erl_driver","doc":"- **`ErlDrvSizeT`{: #ErlDrvSizeT }** - An unsigned integer type to be used as\n  `size_t`.\n\n- **`ErlDrvSSizeT`{: #ErlDrvSSizeT }** - A signed integer type, the size of\n  `ErlDrvSizeT`.\n\n- **`ErlDrvSysInfo`{: #ErlDrvSysInfo }**\n\n  ```c\n  typedef struct ErlDrvSysInfo {\n     int driver_major_version;\n     int driver_minor_version;\n     char *erts_version;\n     char *otp_release;\n     int thread_support;\n     int smp_support;\n     int async_threads;\n     int scheduler_threads;\n     int nif_major_version;\n     int nif_minor_version;\n     int dirty_scheduler_support;\n  } ErlDrvSysInfo;\n  ```\n\n  The `ErlDrvSysInfo` structure is used for storage of information about the\n  Erlang runtime system.\n  [`driver_system_info`](erl_driver.md#driver_system_info) writes the system\n  information when passed a reference to a `ErlDrvSysInfo` structure. The fields\n  in the structure are as follows:\n\n  - **`driver_major_version`** - The value of\n    [`ERL_DRV_EXTENDED_MAJOR_VERSION`](erl_driver.md#version_management) when\n    the runtime system was compiled. This value is the same as the value of\n    [`ERL_DRV_EXTENDED_MAJOR_VERSION`](erl_driver.md#version_management) used\n    when compiling the driver; otherwise the runtime system would have refused\n    to load the driver.\n\n  - **`driver_minor_version`** - The value of\n    [`ERL_DRV_EXTENDED_MINOR_VERSION`](erl_driver.md#version_management) when\n    the runtime system was compiled. This value can differ from the value of\n    [`ERL_DRV_EXTENDED_MINOR_VERSION`](erl_driver.md#version_management) used\n    when compiling the driver.\n\n  - **`erts_version`** - A string containing the version number of the runtime\n    system (the same as returned by\n    [`erlang:system_info(version)`](`m:erlang#system_info_version`)).\n\n  - **`otp_release`** - A string containing the OTP release number (the same as\n    returned by\n    [`erlang:system_info(otp_release)`](`m:erlang#system_info_otp_release`)).\n\n  - **`thread_support`** - A value `!= 0` if the runtime system has thread\n    support; otherwise `0`.\n\n  - **`smp_support`** - A value `!= 0` if the runtime system has SMP support;\n    otherwise `0`.\n\n  - **`async_threads`** - The number of async threads in the async thread pool\n    used by [`driver_async`](erl_driver.md#driver_async) (the same as returned\n    by\n    [`erlang:system_info(thread_pool_size)`](`m:erlang#system_info_thread_pool_size`)).\n\n  - **`scheduler_threads`** - The number of scheduler threads used by the\n    runtime system (the same as returned by\n    [`erlang:system_info(schedulers)`](`m:erlang#system_info_schedulers`)).\n\n  - **`nif_major_version`** - The value of `ERL_NIF_MAJOR_VERSION` when the\n    runtime system was compiled.\n\n  - **`nif_minor_version`** - The value of `ERL_NIF_MINOR_VERSION` when the\n    runtime system was compiled.\n\n  - **`dirty_scheduler_support`** - A value `!= 0` if the runtime system has\n    support for dirty scheduler threads; otherwise `0`.\n\n- **`ErlDrvBinary`{: #ErlDrvBinary }**\n\n  ```text\n  typedef struct ErlDrvBinary {\n     ErlDrvSint orig_size;\n     char orig_bytes[];\n  } ErlDrvBinary;\n  ```\n\n  The `ErlDrvBinary` structure is a binary, as sent between the emulator and the\n  driver. All binaries are reference counted; when `driver_binary_free` is\n  called, the reference count is decremented, when it reaches zero, the binary\n  is deallocated. `orig_size` is the binary size and `orig_bytes` is the buffer.\n  `ErlDrvBinary` has not a fixed size, its size is\n  `orig_size + 2 * sizeof(int)`.\n\n  > #### Note {: .info }\n  >\n  > The `refc` field has been removed. The reference count of an `ErlDrvBinary`\n  > is now stored elsewhere. The reference count of an `ErlDrvBinary` can be\n  > accessed through\n  > [`driver_binary_get_refc`](erl_driver.md#driver_binary_get_refc),\n  > [`driver_binary_inc_refc`](erl_driver.md#driver_binary_inc_refc), and\n  > [`driver_binary_dec_refc`](erl_driver.md#driver_binary_dec_refc).\n\n  Some driver calls, such as `driver_enq_binary`, increment the driver reference\n  count, and others, such as `driver_deq` decrement it.\n\n  Using a driver binary instead of a normal buffer is often faster, as the\n  emulator needs not to copy the data, only the pointer is used.\n\n  A driver binary allocated in the driver, with `driver_alloc_binary`, is to be\n  freed in the driver (unless otherwise stated) with `driver_free_binary`.\n  (Notice that this does not necessarily deallocate it, if the driver is still\n  referred in the emulator, the ref-count will not go to zero.)\n\n  Driver binaries are used in the `driver_output2` and `driver_outputv` calls,\n  and in the queue. Also the driver callback\n  [`outputv`](driver_entry.md#outputv) uses driver binaries.\n\n  If the driver for some reason wants to keep a driver binary around, for\n  example in a static variable, the reference count is to be incremented, and\n  the binary can later be freed in the [`stop`](driver_entry.md#stop) callback,\n  with `driver_free_binary`.\n\n  Notice that as a driver binary is shared by the driver and the emulator. A\n  binary received from the emulator or sent to the emulator must not be changed\n  by the driver.\n\n  Since ERTS 5.5 (Erlang/OTP R11B), `orig_bytes` is guaranteed to be properly\n  aligned for storage of an array of doubles (usually 8-byte aligned).\n\n- **`ErlDrvData`** - A handle to driver-specific data, passed to the driver\n  callbacks. It is a pointer, and is most often type cast to a specific pointer\n  in the driver.\n\n- **`SysIOVec`** - A system I/O vector, as used by `writev` on Unix and\n  `WSASend` on Win32. It is used in `ErlIOVec`.\n\n- **`ErlIOVec`{: #ErlIOVec }**\n\n  ```c\n  typedef struct ErlIOVec {\n    int vsize;\n    ErlDrvSizeT size;\n    SysIOVec* iov;\n    ErlDrvBinary** binv;\n  } ErlIOVec;\n  ```\n\n  The I/O vector used by the emulator and drivers is a list of binaries, with a\n  `SysIOVec` pointing to the buffers of the binaries. It is used in\n  `driver_outputv` and the [`outputv`](driver_entry.md#outputv) driver callback.\n  Also, the driver queue is an `ErlIOVec`.\n\n- **`ErlDrvMonitor`** - When a driver creates a monitor for a process, a\n  `ErlDrvMonitor` is filled in. This is an opaque data type that can be assigned\n  to, but not compared without using the supplied compare function (that is, it\n  behaves like a struct).\n\n  The driver writer is to provide the memory for storing the monitor when\n  calling [`driver_monitor_process`](erl_driver.md#driver_monitor_process). The\n  address of the data is not stored outside of the driver, so `ErlDrvMonitor`\n  can be used as any other data, it can be copied, moved in memory, forgotten,\n  and so on.\n\n- **`ErlDrvNowData`{: #ErlDrvNowData }** - The `ErlDrvNowData` structure holds a\n  time stamp consisting of three values measured from some arbitrary point in\n  the past. The three structure members are:\n\n  - **`megasecs`** - The number of whole megaseconds elapsed since the arbitrary\n    point in time\n\n  - **`secs`** - The number of whole seconds elapsed since the arbitrary point\n    in time\n\n  - **`microsecs`** - The number of whole microseconds elapsed since the\n    arbitrary point in time\n\n- **`ErlDrvPDL`{: #ErlDrvPDL }** - If certain port-specific data must be\n  accessed from other threads than those calling the driver callbacks, a port\n  data lock can be used to synchronize the operations on the data. Currently,\n  the only port-specific data that the emulator associates with the port data\n  lock is the driver queue.\n\n  Normally a driver instance has no port data lock. If the driver instance wants\n  to use a port data lock, it must create the port data lock by calling\n  [`driver_pdl_create`](erl_driver.md#driver_pdl_create).\n\n  > #### Note {: .info }\n  >\n  > Once the port data lock has been created, every access to data associated\n  > with the port data lock must be done while the port data lock is locked. The\n  > port data lock is locked and unlocked by\n  > [`driver_pdl_lock`](erl_driver.md#driver_pdl_lock), and\n  > [`driver_pdl_unlock`](erl_driver.md#driver_pdl_unlock), respectively.\n\n  A port data lock is reference counted, and when the reference count reaches\n  zero, it is destroyed. The emulator at least increments the reference count\n  once when the lock is created and decrements it once the port associated with\n  the lock terminates. The emulator also increments the reference count when an\n  async job is enqueued and decrements it when an async job has been invoked.\n  Also, the driver is responsible for ensuring that the reference count does not\n  reach zero before the last use of the lock by the driver has been made. The\n  reference count can be read, incremented, and decremented by\n  [`driver_pdl_get_refc`](erl_driver.md#driver_pdl_get_refc),\n  [`driver_pdl_inc_refc`](erl_driver.md#driver_pdl_inc_refc), and\n  [`driver_pdl_dec_refc`](erl_driver.md#driver_pdl_dec_refc), respectively.\n\n- **`ErlDrvTid`{: #ErlDrvTid }** - Thread identifier.\n\n  See also [`erl_drv_thread_create`](erl_driver.md#erl_drv_thread_create),\n  [`erl_drv_thread_exit`](erl_driver.md#erl_drv_thread_exit),\n  [`erl_drv_thread_join`](erl_driver.md#erl_drv_thread_join),\n  [`erl_drv_thread_self`](erl_driver.md#erl_drv_thread_self), and\n  [`erl_drv_equal_tids`](erl_driver.md#erl_drv_equal_tids).\n\n- **`ErlDrvThreadOpts`{: #ErlDrvThreadOpts }**\n\n  ```text\n  int suggested_stack_size;\n  ```\n\n  Thread options structure passed to\n  [`erl_drv_thread_create`](erl_driver.md#erl_drv_thread_create). The following\n  field exists:\n\n  - **`suggested_stack_size`** - A suggestion, in kilowords, on how large a\n    stack to use. A value < 0 means default size.\n\n  See also\n  [`erl_drv_thread_opts_create`](erl_driver.md#erl_drv_thread_opts_create),\n  [`erl_drv_thread_opts_destroy`](erl_driver.md#erl_drv_thread_opts_destroy),\n  and [`erl_drv_thread_create`](erl_driver.md#erl_drv_thread_create).\n\n- **`ErlDrvMutex`{: #ErlDrvMutex }** - Mutual exclusion lock. Used for\n  synchronizing access to shared data. Only one thread at a time can lock a\n  mutex.\n\n  See also [`erl_drv_mutex_create`](erl_driver.md#erl_drv_mutex_create),\n  [`erl_drv_mutex_destroy`](erl_driver.md#erl_drv_mutex_destroy),\n  [`erl_drv_mutex_lock`](erl_driver.md#erl_drv_mutex_lock),\n  [`erl_drv_mutex_trylock`](erl_driver.md#erl_drv_mutex_trylock), and\n  [`erl_drv_mutex_unlock`](erl_driver.md#erl_drv_mutex_unlock).\n\n- **`ErlDrvCond`{: #ErlDrvCond }** - Condition variable. Used when threads must\n  wait for a specific condition to appear before continuing execution. Condition\n  variables must be used with associated mutexes.\n\n  See also [`erl_drv_cond_create`](erl_driver.md#erl_drv_cond_create),\n  [`erl_drv_cond_destroy`](erl_driver.md#erl_drv_cond_destroy),\n  [`erl_drv_cond_signal`](erl_driver.md#erl_drv_cond_signal),\n  [`erl_drv_cond_broadcast`](erl_driver.md#erl_drv_cond_broadcast), and\n  [`erl_drv_cond_wait`](erl_driver.md#erl_drv_cond_wait).\n\n- **`ErlDrvRWLock`{: #ErlDrvRWLock }** - Read/write lock. Used to allow multiple\n  threads to read shared data while only allowing one thread to write the same\n  data. Multiple threads can read lock an rwlock at the same time, while only\n  one thread can read/write lock an rwlock at a time.\n\n  See also [`erl_drv_rwlock_create`](erl_driver.md#erl_drv_rwlock_create),\n  [`erl_drv_rwlock_destroy`](erl_driver.md#erl_drv_rwlock_destroy),\n  [`erl_drv_rwlock_rlock`](erl_driver.md#erl_drv_rwlock_rlock),\n  [`erl_drv_rwlock_tryrlock`](erl_driver.md#erl_drv_rwlock_tryrlock),\n  [`erl_drv_rwlock_runlock`](erl_driver.md#erl_drv_rwlock_runlock),\n  [`erl_drv_rwlock_rwlock`](erl_driver.md#erl_drv_rwlock_rwlock),\n  [`erl_drv_rwlock_tryrwlock`](erl_driver.md#erl_drv_rwlock_tryrwlock), and\n  [`erl_drv_rwlock_rwunlock`](erl_driver.md#erl_drv_rwlock_rwunlock).\n\n- **`ErlDrvTSDKey`{: #ErlDrvTSDKey }** - Key that thread-specific data can be\n  associated with.\n\n  See also [`erl_drv_tsd_key_create`](erl_driver.md#erl_drv_tsd_key_create),\n  [`erl_drv_tsd_key_destroy`](erl_driver.md#erl_drv_tsd_key_destroy),\n  [`erl_drv_tsd_set`](erl_driver.md#erl_drv_tsd_set), and\n  [`erl_drv_tsd_get`](erl_driver.md#erl_drv_tsd_get).\n\n- **`ErlDrvTime`{: #ErlDrvTime }** - A signed 64-bit integer type for time\n  representation.\n\n- **`ErlDrvTimeUnit`{: #ErlDrvTimeUnit }** - An enumeration of time units\n  supported by the driver API:\n\n  - **`ERL_DRV_SEC`** - Seconds\n\n  - **`ERL_DRV_MSEC`** - Milliseconds\n\n  - **`ERL_DRV_USEC`** - Microseconds\n\n  - **`ERL_DRV_NSEC`** - Nanoseconds","ref":"erl_driver.html#data-types"},{"type":"extras","title":"add_driver_entry() - erl_driver","doc":"```c\nvoid add_driver_entry(ErlDrvEntry\n        *de);\n```\n\nAdds a driver entry to the list of drivers known by Erlang. The\n[`init`](driver_entry.md#init) function of parameter `de` is called.\n\n> #### Note {: .info }\n>\n> To use this function for adding drivers residing in dynamically loaded code is\n> dangerous. If the driver code for the added driver resides in the same\n> dynamically loaded module (that is, `.so` file) as a normal dynamically loaded\n> driver (loaded with the `erl_ddll` interface), the caller is to call\n> [`driver_lock_driver`](erl_driver.md#driver_lock_driver) before adding driver\n> entries.\n>\n> _Use of this function is generally deprecated._","ref":"erl_driver.html#add_driver_entry"},{"type":"extras","title":"driver_alloc() - erl_driver","doc":"```c\nvoid * driver_alloc(ErlDrvSizeT size);\n```\n\nAllocates a memory block of the size specified in `size`, and returns it. This\nfails only on out of memory, in which case `NULL` is returned. (This is most\noften a wrapper for `malloc`).\n\nMemory allocated must be explicitly freed with a corresponding call to\n[`driver_free`](erl_driver.md#driver_free) (unless otherwise stated).\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_alloc"},{"type":"extras","title":"driver_alloc_binary() - erl_driver","doc":"```c\nErlDrvBinary * driver_alloc_binary(ErlDrvSizeT size);\n```\n\nAllocates a driver binary with a memory block of at least `size` bytes, and\nreturns a pointer to it, or `NULL` on failure (out of memory). When a driver\nbinary has been sent to the emulator, it must not be changed. Every allocated\nbinary is to be freed by a corresponding call to\n[`driver_free_binary`](erl_driver.md#driver_free_binary) (unless otherwise\nstated).\n\nNotice that a driver binary has an internal reference counter. This means that\ncalling `driver_free_binary`, it may not actually dispose of it. If it is sent\nto the emulator, it can be referenced there.\n\nThe driver binary has a field, `orig_bytes`, which marks the start of the data\nin the binary.\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_alloc_binary"},{"type":"extras","title":"driver_async() - erl_driver","doc":"```c\nlong driver_async(ErlDrvPort port, unsigned\n        int* key, void (*async_invoke)(void*), void* async_data, void\n        (*async_free)(void*));\n```\n\nPerforms an asynchronous call. The function `async_invoke` is invoked in a\nthread separate from the emulator thread. This enables the driver to perform\ntime-consuming, blocking operations without blocking the emulator.\n\nThe async thread pool size can be set with command-line argument\n[`+A`](erl_cmd.md#async_thread_pool_size) in [`erl(1)`](erl_cmd.md). If an async\nthread pool is unavailable, the call is made synchronously in the thread calling\n`driver_async`. The current number of async threads in the async thread pool can\nbe retrieved through [`driver_system_info`](erl_driver.md#driver_system_info).\n\nIf a thread pool is available, a thread is used. If argument `key` is `NULL`,\nthe threads from the pool are used in a round-robin way, each call to\n`driver_async` uses the next thread in the pool. With argument `key` set, this\nbehavior is changed. The two same values of `*key` always get the same thread.\n\nTo ensure that a driver instance always uses the same thread, the following call\ncan be used:\n\n```text\nunsigned int myKey = driver_async_port_key(myPort);\n\nr = driver_async(myPort, &myKey, myData, myFunc);\n```\n\nIt is enough to initialize `myKey` once for each driver instance.\n\nIf a thread is already working, the calls are queued up and executed in order.\nUsing the same thread for each driver instance ensures that the calls are made\nin sequence.\n\nThe `async_data` is the argument to the functions `async_invoke` and\n`async_free`. It is typically a pointer to a structure containing a pipe or\nevent that can be used to signal that the async operation completed. The data is\nto be freed in `async_free`.\n\nWhen the async operation is done, [`ready_async`](driver_entry.md#ready_async)\ndriver entry function is called. If `ready_async` is `NULL` in the driver entry,\nthe `async_free` function is called instead.\n\nThe return value is `-1` if the `driver_async` call fails.\n\n> #### Note {: .info }\n>\n> As from ERTS 5.5.4.3 the default stack size for threads in the async-thread\n> pool is 16 kilowords, that is, 64 kilobyte on 32-bit architectures. This small\n> default size has been chosen because the amount of async-threads can be quite\n> large. The default stack size is enough for drivers delivered with Erlang/OTP,\n> but is possibly not sufficiently large for other dynamically linked-in drivers\n> that use the `driver_async` functionality. A suggested stack size for threads\n> in the async-thread pool can be configured through command-line argument\n> [`+a`](erl_cmd.md#async_thread_stack_size) in [`erl(1)`](erl_cmd.md).","ref":"erl_driver.html#driver_async"},{"type":"extras","title":"driver_async_port_key() - erl_driver","doc":"```c\nunsigned int driver_async_port_key(ErlDrvPort port);\n```\n\nCalculates a key for later use in [`driver_async`](erl_driver.md#driver_async).\nThe keys are evenly distributed so that a fair mapping between port IDs and\nasync thread IDs is achieved.\n\n> #### Note {: .info }\n>\n> Before Erlang/OTP R16, the port ID could be used as a key with proper casting,\n> but after the rewrite of the port subsystem, this is no longer the case. With\n> this function, you can achieve the same distribution based on port IDs as\n> before Erlang/OTP R16.\n\nAvailable since OTP R16B02","ref":"erl_driver.html#driver_async_port_key"},{"type":"extras","title":"driver_binary_dec_refc() - erl_driver","doc":"```c\nlong driver_binary_dec_refc(ErlDrvBinary *bin);\n```\n\nDecrements the reference count on `bin` and returns the reference count reached\nafter the decrement.\n\nThis function is thread-safe.\n\n> #### Note {: .info }\n>\n> The reference count of driver binary is normally to be decremented by calling\n> [`driver_free_binary`](erl_driver.md#driver_free_binary).\n>\n> `driver_binary_dec_refc` does _not_ free the binary if the reference count\n> reaches zero. _Only_ use `driver_binary_dec_refc` when you are sure _not_ to\n> reach a reference count of zero.","ref":"erl_driver.html#driver_binary_dec_refc"},{"type":"extras","title":"driver_binary_get_refc() - erl_driver","doc":"```c\nlong driver_binary_get_refc(ErlDrvBinary *bin);\n```\n\nReturns the current reference count on `bin`.\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_binary_get_refc"},{"type":"extras","title":"driver_binary_inc_refc() - erl_driver","doc":"```c\nlong driver_binary_inc_refc(ErlDrvBinary *bin);\n```\n\nIncrements the reference count on `bin` and returns the reference count reached\nafter the increment.\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_binary_inc_refc"},{"type":"extras","title":"driver_caller() - erl_driver","doc":"```c\nErlDrvTermData driver_caller(ErlDrvPort\n        port);\n```\n\nReturns the process ID of the process that made the current call to the driver.\nThe process ID can be used with\n[`driver_send_term`](erl_driver.md#driver_send_term) to send back data to the\ncaller. `driver_caller` only returns valid data when currently executing in one\nof the following driver callbacks:\n\n- **[`start`](driver_entry.md#start)** - Called from `erlang:open_port/2`.\n\n- **[`output`](driver_entry.md#output)** - Called from `erlang:send/2` and\n  `erlang:port_command/2`.\n\n- **[`outputv`](driver_entry.md#outputv)** - Called from `erlang:send/2` and\n  `erlang:port_command/2`.\n\n- **[`control`](driver_entry.md#control)** - Called from\n  `erlang:port_control/3`.\n\n- **[`call`](driver_entry.md#call)** - Called from `erlang:port_call/3`.\n\nNotice that this function is _not_ thread-safe.","ref":"erl_driver.html#driver_caller"},{"type":"extras","title":"driver_cancel_timer() - erl_driver","doc":"```c\nint driver_cancel_timer(ErlDrvPort port);\n```\n\nCancels a timer set with [`driver_set_timer`](erl_driver.md#driver_set_timer).\n\nThe return value is `0`.","ref":"erl_driver.html#driver_cancel_timer"},{"type":"extras","title":"driver_compare_monitors() - erl_driver","doc":"```c\nint driver_compare_monitors(const ErlDrvMonitor\n        *monitor1, const ErlDrvMonitor *monitor2);\n```\n\nCompares two `ErlDrvMonitor`s. Can also be used to imply some artificial order\non monitors, for whatever reason.\n\nReturns `0` if `monitor1` and `monitor2` are equal, < `0` if `monitor1` <\n`monitor2`, and > `0` if `monitor1` > `monitor2`.","ref":"erl_driver.html#driver_compare_monitors"},{"type":"extras","title":"driver_connected() - erl_driver","doc":"```c\nErlDrvTermData driver_connected(ErlDrvPort\n        port);\n```\n\nReturns the port owner process.\n\nNotice that this function is _not_ thread-safe.","ref":"erl_driver.html#driver_connected"},{"type":"extras","title":"driver_create_port() - erl_driver","doc":"```c\nErlDrvPort driver_create_port(ErlDrvPort port,\n        ErlDrvTermData owner_pid, char* name,\n        ErlDrvData drv_data);\n```\n\nCreates a new port executing the same driver code as the port creating the new\nport.\n\n- **`port`** - The port handle of the port (driver instance) creating the new\n  port.\n\n- **`owner_pid`** - The process ID of the Erlang process to become owner of the\n  new port. This process will be linked to the new port. You usually want to use\n  `driver_caller(port)` as `owner_pid`.\n\n- **`name`** - The port name of the new port. You usually want to use the same\n  port name as the driver name ([ `driver_name`](driver_entry.md#driver_name)\n  field of the [`driver_entry`](driver_entry.md)).\n\n- **`drv_data`** - The driver-defined handle that is passed in later calls to\n  driver callbacks. Notice that the\n  [driver start callback](driver_entry.md#start) is not called for this new\n  driver instance. The driver-defined handle is normally created in the\n  [driver start callback](driver_entry.md#start) when a port is created through\n  `erlang:open_port/2`.\n\nThe caller of `driver_create_port` is allowed to manipulate the newly created\nport when `driver_create_port` has returned. When\n[port level locking](erl_driver.md#smp_support) is used, the creating port is\nonly allowed to manipulate the newly created port until the current driver\ncallback, which was called by the emulator, returns.","ref":"erl_driver.html#driver_create_port"},{"type":"extras","title":"driver_demonitor_process() - erl_driver","doc":"```c\nint driver_demonitor_process(ErlDrvPort port,\n        const ErlDrvMonitor *monitor);\n```\n\nCancels a monitor created earlier.\n\nReturns `0` if a monitor was removed and > 0 if the monitor no longer exists.","ref":"erl_driver.html#driver_demonitor_process"},{"type":"extras","title":"driver_deq() - erl_driver","doc":"```c\nErlDrvSizeT driver_deq(ErlDrvPort port,\n        ErlDrvSizeT size);\n```\n\nDequeues data by moving the head pointer forward in the driver queue by `size`\nbytes. The data in the queue is deallocated.\n\nReturns the number of bytes remaining in the queue on success, otherwise `-1`.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.","ref":"erl_driver.html#driver_deq"},{"type":"extras","title":"driver_enq() - erl_driver","doc":"```c\nint driver_enq(ErlDrvPort port, char* buf,\n        ErlDrvSizeT len);\n```\n\nEnqueues data in the driver queue. The data in `buf` is copied (`len` bytes) and\nplaced at the end of the driver queue. The driver queue is normally used in a\nFIFO way.\n\nThe driver queue is available to queue output from the emulator to the driver\n(data from the driver to the emulator is queued by the emulator in normal Erlang\nmessage queues). This can be useful if the driver must wait for slow devices,\nand so on, and wants to yield back to the emulator. The driver queue is\nimplemented as an `ErlIOVec`.\n\nWhen the queue contains data, the driver does not close until the queue is\nempty.\n\nThe return value is `0`.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.","ref":"erl_driver.html#driver_enq"},{"type":"extras","title":"driver_enq_bin() - erl_driver","doc":"```c\nint driver_enq_bin(ErlDrvPort port,\n        ErlDrvBinary *bin, ErlDrvSizeT offset, ErlDrvSizeT len);\n```\n\nEnqueues a driver binary in the driver queue. The data in `bin` at `offset` with\nlength `len` is placed at the end of the queue. This function is most often\nfaster than [`driver_enq`](erl_driver.md#driver_enq), because no data must be\ncopied.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.\n\nThe return value is `0`.","ref":"erl_driver.html#driver_enq_bin"},{"type":"extras","title":"driver_enqv() - erl_driver","doc":"```c\nint driver_enqv(ErlDrvPort port, ErlIOVec *ev,\n        ErlDrvSizeT skip);\n```\n\nEnqueues the data in `ev`, skipping the first `skip` bytes of it, at the end of\nthe driver queue. It is faster than [`driver_enq`](erl_driver.md#driver_enq),\nbecause no data must be copied.\n\nThe return value is `0`.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.","ref":"erl_driver.html#driver_enqv"},{"type":"extras","title":"driver_failure() - erl_driver","doc":"","ref":"erl_driver.html#driver_failure"},{"type":"extras","title":"driver_failure_atom() - erl_driver","doc":"","ref":"erl_driver.html#driver_failure_atom"},{"type":"extras","title":"driver_failure_posix() - erl_driver","doc":"```c\nint driver_failure(ErlDrvPort port, int\n        error);\n```\n\n```c\nint driver_failure_atom(ErlDrvPort port, char\n        *string);\n```\n\n```c\nint driver_failure_posix(ErlDrvPort port, int\n        error);\n```\n\nSignals to Erlang that the driver has encountered an error and is to be closed.\nThe port is closed and the tuple `{'EXIT', error, Err}` is sent to the port\nowner process, where error is an error atom (`driver_failure_atom` and\n`driver_failure_posix`) or an integer (`driver_failure`).\n\nThe driver is to fail only when in severe error situations, when the driver\ncannot possibly keep open, for example, buffer allocation gets out of memory.\nFor normal errors it is more appropriate to send error codes with\n[`driver_output`](erl_driver.md#driver_output).\n\nThe return value is `0`.","ref":"erl_driver.html#driver_failure_posix"},{"type":"extras","title":"driver_failure_eof() - erl_driver","doc":"```c\nint driver_failure_eof(ErlDrvPort\n        port);\n```\n\nSignals to Erlang that the driver has encountered an EOF and is to be closed,\nunless the port was opened with option `eof`, in which case `eof` is sent to the\nport. Otherwise the port is closed and an `'EXIT'` message is sent to the port\nowner process.\n\nThe return value is `0`.","ref":"erl_driver.html#driver_failure_eof"},{"type":"extras","title":"driver_free() - erl_driver","doc":"```c\nvoid driver_free(void *ptr);\n```\n\nFrees the memory pointed to by `ptr`. The memory is to have been allocated with\n`driver_alloc`. All allocated memory is to be deallocated, only once. There is\nno garbage collection in drivers.\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_free"},{"type":"extras","title":"driver_free_binary() - erl_driver","doc":"```c\nvoid driver_free_binary(ErlDrvBinary *bin);\n```\n\nFrees a driver binary `bin`, allocated previously with\n[`driver_alloc_binary`](erl_driver.md#driver_alloc_binary). As binaries in\nErlang are reference counted, the binary can still be around.\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_free_binary"},{"type":"extras","title":"driver_get_monitored_process() - erl_driver","doc":"```c\nErlDrvTermData driver_get_monitored_process(ErlDrvPort port, const\n        ErlDrvMonitor *monitor);\n```\n\nReturns the process ID associated with a living monitor. It can be used in the\n[`process_exit`](driver_entry.md#process_exit) callback to get the process\nidentification for the exiting process.\n\nReturns `driver_term_nil` if the monitor no longer exists.","ref":"erl_driver.html#driver_get_monitored_process"},{"type":"extras","title":"driver_get_now() - erl_driver","doc":"```c\nint driver_get_now(ErlDrvNowData *now);\n```\n\n> #### Warning {: .warning }\n>\n> _This function is deprecated. Do not use it._ Use\n> [`erl_drv_monotonic_time`](erl_driver.md#erl_drv_monotonic_time) (perhaps in\n> combination with [`erl_drv_time_offset`](erl_driver.md#erl_drv_time_offset))\n> instead.\n\nReads a time stamp into the memory pointed to by parameter `now`. For\ninformation about specific fields, see\n[`ErlDrvNowData`](erl_driver.md#ErlDrvNowData).\n\nThe return value is `0`, unless the `now` pointer is invalid, in which case it\nis < `0`.","ref":"erl_driver.html#driver_get_now"},{"type":"extras","title":"driver_lock_driver() - erl_driver","doc":"```c\nint driver_lock_driver(ErlDrvPort\n        port);\n```\n\nLocks the driver used by the port `port` in memory for the rest of the emulator\nprocess' lifetime. After this call, the driver behaves as one of Erlang's\nstatically linked-in drivers.","ref":"erl_driver.html#driver_lock_driver"},{"type":"extras","title":"driver_mk_atom() - erl_driver","doc":"```c\nErlDrvTermData driver_mk_atom(char*\n        string);\n```\n\nReturns an atom given a name `string`. The atom is created and does not change,\nso the return value can be saved and reused, which is faster than looking up the\natom several times.\n\nNotice that this function is _not_ thread-safe.","ref":"erl_driver.html#driver_mk_atom"},{"type":"extras","title":"driver_mk_port() - erl_driver","doc":"```c\nErlDrvTermData driver_mk_port(ErlDrvPort\n        port);\n```\n\nConverts a port handle to the Erlang term format, usable in\n[`erl_drv_output_term`](erl_driver.md#erl_drv_output_term) and\n[`erl_drv_send_term`](erl_driver.md#erl_drv_send_term).\n\nNotice that this function is _not_ thread-safe.","ref":"erl_driver.html#driver_mk_port"},{"type":"extras","title":"driver_monitor_process() - erl_driver","doc":"```c\nint driver_monitor_process(ErlDrvPort port,\n        ErlDrvTermData process, ErlDrvMonitor *monitor);\n```\n\nStarts monitoring a process from a driver. When a process is monitored, a\nprocess exit results in a call to the provided\n[`process_exit`](driver_entry.md#process_exit) callback in the\n[`ErlDrvEntry`](driver_entry.md) structure. The `ErlDrvMonitor` structure is\nfilled in, for later removal or compare.\n\nParameter `process` is to be the return value of an earlier call to\n[`driver_caller`](erl_driver.md#driver_caller) or\n[`driver_connected`](erl_driver.md#driver_connected) call.\n\nReturns `0` on success, < 0 if no callback is provided, and > 0 if the process\nis no longer alive.","ref":"erl_driver.html#driver_monitor_process"},{"type":"extras","title":"driver_output() - erl_driver","doc":"```c\nint driver_output(ErlDrvPort port, char *buf,\n        ErlDrvSizeT len);\n```\n\nSends data from the driver up to the emulator. The data is received as terms or\nbinary data, depending on how the driver port was opened.\n\nThe data is queued in the port owner process' message queue. Notice that this\ndoes not yield to the emulator (as the driver and the emulator run in the same\nthread).\n\nParameter `buf` points to the data to send, and `len` is the number of bytes.\n\nThe return value for all output functions is `0` for normal use. If the driver\nis used for distribution, it can fail and return `-1`.","ref":"erl_driver.html#driver_output"},{"type":"extras","title":"driver_output_binary() - erl_driver","doc":"```c\nint driver_output_binary(ErlDrvPort port, char\n        *hbuf, ErlDrvSizeT hlen, ErlDrvBinary* bin, ErlDrvSizeT offset,\n        ErlDrvSizeT len);\n```\n\nSends data to a port owner process from a driver binary. It has a header buffer\n(`hbuf` and `hlen`) just like [`driver_output2`](erl_driver.md#driver_output2).\nParameter `hbuf` can be `NULL`.\n\nParameter `offset` is an offset into the binary and `len` is the number of bytes\nto send.\n\nDriver binaries are created with\n[`driver_alloc_binary`](erl_driver.md#driver_alloc_binary).\n\nThe data in the header is sent as a list and the binary as an Erlang binary in\nthe tail of the list.\n\nFor example, if `hlen` is `2`, the port owner process receives\n`[H1, H2 | < >]`.\n\nThe return value is `0` for normal use.\n\nNotice that, using the binary syntax in Erlang, the driver application can match\nthe header directly from the binary, so the header can be put in the binary, and\n`hlen` can be set to `0`.","ref":"erl_driver.html#driver_output_binary"},{"type":"extras","title":"driver_output_term() - erl_driver","doc":"```c\nint driver_output_term(ErlDrvPort port,\n        ErlDrvTermData* term, int n);\n```\n\n> #### Warning {: .warning }\n>\n> _This function is deprecated._ Use\n> [`erl_drv_output_term`](erl_driver.md#erl_drv_send_term)instead.\n\nParameters `term` and `n` work as in\n[`erl_drv_output_term`](erl_driver.md#erl_drv_output_term).\n\nNotice that this function is _not_ thread-safe.","ref":"erl_driver.html#driver_output_term"},{"type":"extras","title":"driver_output2() - erl_driver","doc":"```c\nint driver_output2(ErlDrvPort port, char *hbuf,\n        ErlDrvSizeT hlen, char *buf, ErlDrvSizeT len);\n```\n\nFirst sends `hbuf` (length in `hlen`) data as a list, regardless of port\nsettings. Then sends `buf` as a binary or list. For example, if `hlen` is `3`,\nthe port owner process receives `[H1, H2, H3 | T]`.\n\nThe point of sending data as a list header, is to facilitate matching on the\ndata received.\n\nThe return value is `0` for normal use.","ref":"erl_driver.html#driver_output2"},{"type":"extras","title":"driver_outputv() - erl_driver","doc":"```c\nint driver_outputv(ErlDrvPort port, char* hbuf,\n        ErlDrvSizeT hlen, ErlIOVec *ev, ErlDrvSizeT skip);\n```\n\nSends data from an I/O vector, `ev`, to the port owner process. It has a header\nbuffer (`hbuf` and `hlen`), just like\n[`driver_output2`](erl_driver.md#driver_output2).\n\nParameter `skip` is a number of bytes to skip of the `ev` vector from the head.\n\nYou get vectors of `ErlIOVec` type from the driver queue (see below), and the\n[`outputv`](driver_entry.md#outputv) driver entry function. You can also make\nthem yourself, if you want to send several `ErlDrvBinary` buffers at once. Often\nit is faster to use [`driver_output`](erl_driver.md#driver_output) or .\n\nFor example, if `hlen` is `2` and `ev` points to an array of three binaries, the\nport owner process receives `[H1, H2, < >, < > | < >]`.\n\nThe return value is `0` for normal use.\n\nThe comment for `driver_output_binary` also applies for `driver_outputv`.","ref":"erl_driver.html#driver_outputv"},{"type":"extras","title":"driver_pdl_create() - erl_driver","doc":"```c\nErlDrvPDL driver_pdl_create(ErlDrvPort port);\n```\n\nCreates a port data lock associated with the `port`.\n\n> #### Note {: .info }\n>\n> Once a port data lock has been created, it must be locked during all\n> operations on the driver queue of the `port`.\n\nReturns a newly created port data lock on success, otherwise `NULL`. The\nfunction fails if `port` is invalid or if a port data lock already has been\nassociated with the `port`.","ref":"erl_driver.html#driver_pdl_create"},{"type":"extras","title":"driver_pdl_dec_refc() - erl_driver","doc":"```c\nlong driver_pdl_dec_refc(ErlDrvPDL\n        pdl);\n```\n\nDecrements the reference count of the port data lock passed as argument (`pdl`).\n\nThe current reference count after the decrement has been performed is returned.\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_pdl_dec_refc"},{"type":"extras","title":"driver_pdl_get_refc() - erl_driver","doc":"```c\nlong driver_pdl_get_refc(ErlDrvPDL pdl);\n```\n\nReturns the current reference count of the port data lock passed as argument\n(`pdl`).\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_pdl_get_refc"},{"type":"extras","title":"driver_pdl_inc_refc() - erl_driver","doc":"```c\nlong driver_pdl_inc_refc(ErlDrvPDL pdl);\n```\n\nIncrements the reference count of the port data lock passed as argument (`pdl`).\n\nThe current reference count after the increment has been performed is returned.\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_pdl_inc_refc"},{"type":"extras","title":"driver_pdl_lock() - erl_driver","doc":"```c\nvoid driver_pdl_lock(ErlDrvPDL pdl);\n```\n\nLocks the port data lock passed as argument (`pdl`).\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_pdl_lock"},{"type":"extras","title":"driver_pdl_unlock() - erl_driver","doc":"```c\nvoid driver_pdl_unlock(ErlDrvPDL pdl);\n```\n\nUnlocks the port data lock passed as argument (`pdl`).\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_pdl_unlock"},{"type":"extras","title":"driver_peekq() - erl_driver","doc":"```c\nSysIOVec * driver_peekq(ErlDrvPort port, int\n        *vlen);\n```\n\nRetrieves the driver queue as a pointer to an array of `SysIOVec`s. It also\nreturns the number of elements in `vlen`. This is one of two ways to get data\nout of the queue.\n\nNothing is removed from the queue by this function, that must be done with\n[`driver_deq`](erl_driver.md#driver_deq).\n\nThe returned array is suitable to use with the Unix system call `writev`.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.","ref":"erl_driver.html#driver_peekq"},{"type":"extras","title":"driver_peekqv() - erl_driver","doc":"```c\nErlDrvSizeT driver_peekqv(ErlDrvPort port,\n        ErlIOVec *ev);\n```\n\nRetrieves the driver queue into a supplied `ErlIOVec` `ev`. It also returns the\nqueue size. This is one of two ways to get data out of the queue.\n\nIf `ev` is `NULL`, all ones that is `-1` type cast to `ErlDrvSizeT` are\nreturned.\n\nNothing is removed from the queue by this function, that must be done with\n[`driver_deq`](erl_driver.md#driver_deq).\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.\n\nAvailable since OTP R15B","ref":"erl_driver.html#driver_peekqv"},{"type":"extras","title":"driver_pushq() - erl_driver","doc":"```c\nint driver_pushq(ErlDrvPort port, char* buf,\n        ErlDrvSizeT len);\n```\n\nPuts data at the head of the driver queue. The data in `buf` is copied (`len`\nbytes) and placed at the beginning of the queue.\n\nThe return value is `0`.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.","ref":"erl_driver.html#driver_pushq"},{"type":"extras","title":"driver_pushq_bin() - erl_driver","doc":"```c\nint driver_pushq_bin(ErlDrvPort port,\n        ErlDrvBinary *bin, ErlDrvSizeT offset, ErlDrvSizeT len);\n```\n\nPuts data in the binary `bin`, at `offset` with length `len` at the head of the\ndriver queue. It is most often faster than\n[`driver_pushq`](erl_driver.md#driver_pushq), because no data must be copied.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.\n\nThe return value is `0`.","ref":"erl_driver.html#driver_pushq_bin"},{"type":"extras","title":"driver_pushqv() - erl_driver","doc":"```c\nint driver_pushqv(ErlDrvPort port, ErlIOVec\n        *ev, ErlDrvSizeT skip);\n```\n\nPuts the data in `ev`, skipping the first `skip` bytes of it, at the head of the\ndriver queue. It is faster than [`driver_pushq`](erl_driver.md#driver_pushq),\nbecause no data must be copied.\n\nThe return value is `0`.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.","ref":"erl_driver.html#driver_pushqv"},{"type":"extras","title":"driver_read_timer() - erl_driver","doc":"```c\nint driver_read_timer(ErlDrvPort port, unsigned\n        long *time_left);\n```\n\nReads the current time of a timer, and places the result in `time_left`. This is\nthe time in milliseconds, before the time-out occurs.\n\nThe return value is `0`.","ref":"erl_driver.html#driver_read_timer"},{"type":"extras","title":"driver_realloc() - erl_driver","doc":"```c\nvoid * driver_realloc(void *ptr, ErlDrvSizeT size);\n```\n\nResizes a memory block, either in place, or by allocating a new block, copying\nthe data, and freeing the old block. A pointer is returned to the reallocated\nmemory. On failure (out of memory), `NULL` is returned. (This is most often a\nwrapper for `realloc`.)\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_realloc"},{"type":"extras","title":"driver_realloc_binary() - erl_driver","doc":"```c\nErlDrvBinary * driver_realloc_binary(ErlDrvBinary *bin, ErlDrvSizeT size);\n```\n\nResizes a driver binary, while keeping the data.\n\nReturns the resized driver binary on success. Returns `NULL` on failure (out of\nmemory).\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_realloc_binary"},{"type":"extras","title":"driver_select() - erl_driver","doc":"```c\nint driver_select(ErlDrvPort port, ErlDrvEvent\n        event, int mode, int on);\n```\n\nThis function is used by drivers to provide the emulator with events to check\nfor. This enables the emulator to call the driver when something has occurred\nasynchronously.\n\nParameter `event` identifies an OS-specific event object. On Unix systems, the\nfunctions `select`/`poll` are used. The event object must be a socket or pipe\n(or other object that `select`/`poll` can use). On Windows, the Win32 API\nfunction `WaitForMultipleObjects` is used. This places other restrictions on the\nevent object; see the Win32 SDK documentation.\n\nParameter `on` is to be `1` for setting events and `0` for clearing them.\n\nParameter `mode` is a bitwise OR combination of `ERL_DRV_READ`, `ERL_DRV_WRITE`,\nand `ERL_DRV_USE`. The first two specify whether to wait for read events and/or\nwrite events. A fired read event calls\n[`ready_input`](driver_entry.md#ready_input) and a fired write event calls\n[`ready_output`](driver_entry.md#ready_output).\n\n> #### Note {: .info }\n>\n> Some OS (Windows) do not differentiate between read and write events. The\n> callback for a fired event then only depends on the value of `mode`.\n\n`ERL_DRV_USE` specifies if we are using the event object or if we want to close\nit. It is not safe to clear all events and then close the event object after\n`driver_select` has returned. Another thread can still be using the event object\ninternally. To safely close an event object, call `driver_select` with\n`ERL_DRV_USE` and `on==0`, which clears all events and then either calls\n[`stop_select`](driver_entry.md#stop_select) or schedules it to be called when\nit is safe to close the event object. `ERL_DRV_USE` is to be set together with\nthe first event for an event object. It is harmless to set `ERL_DRV_USE` even if\nit already has been done. Clearing all events but keeping `ERL_DRV_USE` set\nindicates that we are using the event object and probably will set events for it\nagain.\n\n> #### Note {: .info }\n>\n> `ERL_DRV_USE` was added in Erlang/OTP R13. Old drivers still work as before,\n> but it is recommended to update them to use `ERL_DRV_USE` and `stop_select` to\n> ensure that event objects are closed in a safe way.\n\nThe return value is `0`, unless `ready_input`/`ready_output` is `NULL`, in which\ncase it is `-1`.","ref":"erl_driver.html#driver_select"},{"type":"extras","title":"driver_send_term() - erl_driver","doc":"```c\nint driver_send_term(ErlDrvPort port,\n        ErlDrvTermData receiver, ErlDrvTermData* term, int n);\n```\n\n> #### Warning {: .warning }\n>\n> _This function is deprecated._ Use\n> [`erl_drv_send_term`](erl_driver.md#erl_drv_send_term) instead.\n\n> #### Note {: .info }\n>\n> The parameters of this function cannot be properly checked by the runtime\n> system when executed by arbitrary threads. This can cause the function not to\n> fail when it should.\n\nParameters `term` and `n` work as in\n[`erl_drv_output_term`](erl_driver.md#erl_drv_output_term).\n\nThis function is thread-safe.","ref":"erl_driver.html#driver_send_term"},{"type":"extras","title":"driver_set_timer() - erl_driver","doc":"```c\nint driver_set_timer(ErlDrvPort port, unsigned\n        long time);\n```\n\nSets a timer on the driver, which will count down and call the driver when it is\ntimed out. Parameter `time` is the time in milliseconds before the timer\nexpires.\n\nWhen the timer reaches `0` and expires, the driver entry function\n[`timeout`](driver_entry.md#timeout) is called.\n\nNotice that only one timer exists on each driver instance; setting a new timer\nreplaces an older one.\n\nReturn value is `0`, unless the `timeout` driver function is `NULL`, in which\ncase it is `-1`.","ref":"erl_driver.html#driver_set_timer"},{"type":"extras","title":"driver_sizeq() - erl_driver","doc":"```c\nErlDrvSizeT driver_sizeq(ErlDrvPort port);\n```\n\nReturns the number of bytes currently in the driver queue.\n\nThis function can be called from any thread if a\n[port data lock](erl_driver.md#ErlDrvPDL) associated with the `port` is locked\nby the calling thread during the call.","ref":"erl_driver.html#driver_sizeq"},{"type":"extras","title":"driver_system_info() - erl_driver","doc":"```c\nvoid driver_system_info(ErlDrvSysInfo\n        *sys_info_ptr, size_t size);\n```\n\nWrites information about the Erlang runtime system into the\n[`ErlDrvSysInfo`](erl_driver.md#ErlDrvSysInfo) structure referred to by the\nfirst argument. The second argument is to be the size of the\n[`ErlDrvSysInfo`](erl_driver.md#ErlDrvSysInfo) structure, that is,\n`sizeof(ErlDrvSysInfo)`.\n\nFor information about specific fields, see\n[`ErlDrvSysInfo`](erl_driver.md#ErlDrvSysInfo).","ref":"erl_driver.html#driver_system_info"},{"type":"extras","title":"driver_vec_to_buf() - erl_driver","doc":"```c\nErlDrvSizeT driver_vec_to_buf(ErlIOVec *ev,\n        char *buf, ErlDrvSizeT len);\n```\n\nCollects several segments of data, referenced by `ev`, by copying them in order\nto the buffer `buf`, of the size `len`.\n\nIf the data is to be sent from the driver to the port owner process, it is\nfaster to use [`driver_outputv`](erl_driver.md#driver_outputv).\n\nThe return value is the space left in the buffer, that is, if `ev` contains less\nthan `len` bytes it is the difference, and if `ev` contains `len` bytes or more,\nit is `0`. This is faster if there is more than one header byte, as the binary\nsyntax can construct integers directly from the binary.","ref":"erl_driver.html#driver_vec_to_buf"},{"type":"extras","title":"erl_drv_busy_msgq_limits() - erl_driver","doc":"```c\nvoid erl_drv_busy_msgq_limits(ErlDrvPort port,\n        ErlDrvSizeT *low, ErlDrvSizeT *high);\n```\n\nSets and gets limits that will be used for controlling the busy state of the\nport message queue.\n\nThe port message queue is set into a busy state when the amount of command data\nqueued on the message queue reaches the `high` limit. The port message queue is\nset into a not busy state when the amount of command data queued on the message\nqueue falls below the `low` limit. Command data is in this context data passed\nto the port using either `Port ! {Owner, {command, Data}}` or\n`port_command/[2,3]`. Notice that these limits only concerns command data that\nhave not yet reached the port. The [busy port](erl_driver.md#set_busy_port)\nfeature can be used for data that has reached the port.\n\nValid limits are values in the range\n`[ERL_DRV_BUSY_MSGQ_LIM_MIN, ERL_DRV_BUSY_MSGQ_LIM_MAX]`. Limits are\nautomatically adjusted to be sane. That is, the system adjusts values so that\nthe low limit used is lower than or equal to the high limit used. By default the\nhigh limit is 8 kB and the low limit is 4 kB.\n\nBy passing a pointer to an integer variable containing the value\n`ERL_DRV_BUSY_MSGQ_READ_ONLY`, the currently used limit is read and written back\nto the integer variable. A new limit can be set by passing a pointer to an\ninteger variable containing a valid limit. The passed value is written to the\ninternal limit. The internal limit is then adjusted. After this the adjusted\nlimit is written back to the integer variable from which the new value was read.\nValues are in bytes.\n\nThe busy message queue feature can be disabled either by setting the\n`ERL_DRV_FLAG_NO_BUSY_MSGQ` [driver flag](driver_entry.md#driver_flags) in the\n[`driver_entry`](driver_entry.md) used by the driver, or by calling this\nfunction with `ERL_DRV_BUSY_MSGQ_DISABLED` as a limit (either low or high). When\nthis feature has been disabled, it cannot be enabled again. When reading the\nlimits, both are `ERL_DRV_BUSY_MSGQ_DISABLED` if this feature has been disabled.\n\nProcesses sending command data to the port are suspended if either the port is\nbusy or if the port message queue is busy. Suspended processes are resumed when\nneither the port or the port message queue is busy.\n\nFor information about busy port functionality, see\n[`set_busy_port`](erl_driver.md#set_busy_port).\n\nAvailable since OTP R16B","ref":"erl_driver.html#erl_drv_busy_msgq_limits"},{"type":"extras","title":"erl_drv_cond_broadcast() - erl_driver","doc":"```c\nvoid erl_drv_cond_broadcast(ErlDrvCond\n        *cnd);\n```\n\nBroadcasts on a condition variable. That is, if other threads are waiting on the\ncondition variable being broadcast on, _all_ of them are woken.\n\n`cnd` is a pointer to a condition variable to broadcast on.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_cond_broadcast"},{"type":"extras","title":"erl_drv_cond_create() - erl_driver","doc":"```c\nErlDrvCond * erl_drv_cond_create(char\n        *name);\n```\n\nCreates a condition variable and returns a pointer to it.\n\n`name` is a string identifying the created condition variable. It is used to\nidentify the condition variable in planned future debug functionality.\n\nReturns `NULL` on failure. The driver creating the condition variable is\nresponsible for destroying it before the driver is unloaded.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_cond_create"},{"type":"extras","title":"erl_drv_cond_destroy() - erl_driver","doc":"```c\nvoid erl_drv_cond_destroy(ErlDrvCond\n        *cnd);\n```\n\nDestroys a condition variable previously created by\n[`erl_drv_cond_create`](erl_driver.md#erl_drv_cond_create).\n\n`cnd` is a pointer to a condition variable to destroy.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_cond_destroy"},{"type":"extras","title":"erl_drv_cond_name() - erl_driver","doc":"```c\nchar * erl_drv_cond_name(ErlDrvCond\n        *cnd);\n```\n\nReturns a pointer to the name of the condition.\n\n`cnd` is a pointer to an initialized condition.\n\n> #### Note {: .info }\n>\n> This function is intended for debugging purposes only.\n\nAvailable since OTP R16B02","ref":"erl_driver.html#erl_drv_cond_name"},{"type":"extras","title":"erl_drv_cond_signal() - erl_driver","doc":"```c\nvoid erl_drv_cond_signal(ErlDrvCond\n        *cnd);\n```\n\nSignals on a condition variable. That is, if other threads are waiting on the\ncondition variable being signaled, _one_ of them is woken.\n\n`cnd` is a pointer to a condition variable to signal on.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_cond_signal"},{"type":"extras","title":"erl_drv_cond_wait() - erl_driver","doc":"```c\nvoid erl_drv_cond_wait(ErlDrvCond *cnd,\n        ErlDrvMutex *mtx);\n```\n\nWaits on a condition variable. The calling thread is blocked until another\nthread wakes it by signaling or broadcasting on the condition variable. Before\nthe calling thread is blocked, it unlocks the mutex passed as argument. When the\ncalling thread is woken, it locks the same mutex before returning. That is, the\nmutex currently must be locked by the calling thread when calling this function.\n\n`cnd` is a pointer to a condition variable to wait on. `mtx` is a pointer to a\nmutex to unlock while waiting.\n\n> #### Note {: .info }\n>\n> `erl_drv_cond_wait` can return even if no one has signaled or broadcast on the\n> condition variable. Code calling `erl_drv_cond_wait` is always to be prepared\n> for `erl_drv_cond_wait` returning even if the condition that the thread was\n> waiting for has not occurred. That is, when returning from\n> `erl_drv_cond_wait`, always check if the condition has occurred, and if not\n> call `erl_drv_cond_wait` again.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_cond_wait"},{"type":"extras","title":"erl_drv_consume_timeslice() - erl_driver","doc":"```c\nint erl_drv_consume_timeslice(ErlDrvPort port,\n        int percent);\n```\n\nGives the runtime system a hint about how much CPU time the current driver\ncallback call has consumed since the last hint, or since the the start of the\ncallback if no previous hint has been given.\n\n- **`port`** - Port handle of the executing port.\n\n- **`percent`** - Approximate consumed fraction of a full time-slice in percent.\n\nThe time is specified as a fraction, in percent, of a full time-slice that a\nport is allowed to execute before it is to surrender the CPU to other runnable\nports or processes. Valid range is `[1, 100]`. The scheduling time-slice is not\nan exact entity, but can usually be approximated to about 1 millisecond.\n\nNotice that it is up to the runtime system to determine if and how to use this\ninformation. Implementations on some platforms can use other means to determine\nthe consumed fraction of the time-slice. Lengthy driver callbacks should,\nregardless of this, frequently call this function to determine if it is allowed\nto continue execution or not.\n\nThis function returns a non-zero value if the time-slice has been exhausted, and\nzero if the callback is allowed to continue execution. If a non-zero value is\nreturned, the driver callback is to return as soon as possible in order for the\nport to be able to yield.\n\nThis function is provided to better support co-operative scheduling, improve\nsystem responsiveness, and to make it easier to prevent misbehaviors of the VM\nbecause of a port monopolizing a scheduler thread. It can be used when dividing\nlengthy work into some repeated driver callback calls, without the need to use\nthreads.\n\nSee also the important [warning](erl_driver.md#WARNING) text at the beginning of\nthis manual page.\n\nAvailable since OTP R16B","ref":"erl_driver.html#erl_drv_consume_timeslice"},{"type":"extras","title":"erl_drv_convert_time_unit() - erl_driver","doc":"```c\nErlDrvTime erl_drv_convert_time_unit(ErlDrvTime\n        val, ErlDrvTimeUnit from, ErlDrvTimeUnit to);\n```\n\nConverts the `val` value of time unit `from` to the corresponding value of time\nunit `to`. The result is rounded using the floor function.\n\n- **`val`** - Value to convert time unit for.\n\n- **`from`** - Time unit of `val`.\n\n- **`to`** - Time unit of returned value.\n\nReturns `ERL_DRV_TIME_ERROR` if called with an invalid time unit argument.\n\nSee also [`ErlDrvTime`](erl_driver.md#ErlDrvTime) and\n[`ErlDrvTimeUnit`](erl_driver.md#ErlDrvTimeUnit).\n\nAvailable since OTP 18.3","ref":"erl_driver.html#erl_drv_convert_time_unit"},{"type":"extras","title":"erl_drv_equal_tids() - erl_driver","doc":"```c\nint erl_drv_equal_tids(ErlDrvTid tid1,\n        ErlDrvTid tid2);\n```\n\nCompares two thread identifiers, `tid1` and `tid2`, for equality.\n\nReturns `0` it they are not equal, and a value not equal to `0` if they are\nequal.\n\n> #### Note {: .info }\n>\n> A thread identifier can be reused very quickly after a thread has terminated.\n> Therefore, if a thread corresponding to one of the involved thread identifiers\n> has terminated since the thread identifier was saved, the result of\n> `erl_drv_equal_tids` does possibly not give the expected result.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_equal_tids"},{"type":"extras","title":"erl_drv_getenv() - erl_driver","doc":"```c\nint erl_drv_getenv(const char *key, char\n        *value, size_t *value_size);\n```\n\nRetrieves the value of an environment variable.\n\n- **`key`** - A `NULL`\\-terminated string containing the name of the environment\n  variable.\n\n- **`value`** - A pointer to an output buffer.\n\n- **`value_size`** - A pointer to an integer. The integer is used both for\n  passing input and output sizes (see below).\n\nWhen this function is called, `*value_size` is to contain the size of the\n`value` buffer.\n\nOn success, `0` is returned, the value of the environment variable has been\nwritten to the `value` buffer, and `*value_size` contains the string length\n(excluding the terminating `NULL` character) of the value written to the `value`\nbuffer.\n\nOn failure, that is, no such environment variable was found, a value < `0` is\nreturned. When the size of the `value` buffer is too small, a value > `0` is\nreturned and `*value_size` has been set to the buffer size needed.\n\n> #### Warning {: .warning }\n>\n> This function reads the emulated environment used by `os:getenv/1` and not the\n> environment used by libc's `getenv(3)` or similar. Drivers that _require_ that\n> these are in sync will need to do so themselves, but keep in mind that they\n> are segregated for a reason; `getenv(3)` and its friends are _not thread-safe_\n> and may cause unrelated code to misbehave or crash the emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_getenv"},{"type":"extras","title":"erl_drv_init_ack() - erl_driver","doc":"```c\nvoid erl_drv_init_ack(ErlDrvPort port,\n        ErlDrvData res);\n```\n\nAcknowledges the start of the port.\n\n- **`port`** - The port handle of the port (driver instance) doing the\n  acknowledgment.\n\n- **`res`** - The result of the port initialization. Can be the same values as\n  the return value of [`start`](driver_entry.md#start), that is, any of the\n  error codes or the `ErlDrvData` that is to be used for this port.\n\nWhen this function is called the initiating `erlang:open_port` call is returned\nas if the [`start`](driver_entry.md#start) function had just been called. It can\nonly be used when flag\n[`ERL_DRV_FLAG_USE_INIT_ACK`](driver_entry.md#driver_flags) has been set on the\nlinked-in driver.\n\nAvailable since OTP 19.0","ref":"erl_driver.html#erl_drv_init_ack"},{"type":"extras","title":"erl_drv_monotonic_time() - erl_driver","doc":"```c\nErlDrvTime erl_drv_monotonic_time(ErlDrvTimeUnit time_unit);\n```\n\nReturns [Erlang monotonic time](time_correction.md#erlang-monotonic-time).\nNotice that negative values are not uncommon.\n\n`time_unit` is time unit of returned value.\n\nReturns `ERL_DRV_TIME_ERROR` if called with an invalid time unit argument, or if\ncalled from a thread that is not a scheduler thread.\n\nSee also [`ErlDrvTime`](erl_driver.md#ErlDrvTime) and\n[`ErlDrvTimeUnit`](erl_driver.md#ErlDrvTimeUnit).\n\nAvailable since OTP 18.3","ref":"erl_driver.html#erl_drv_monotonic_time"},{"type":"extras","title":"erl_drv_mutex_create() - erl_driver","doc":"```c\nErlDrvMutex * erl_drv_mutex_create(char\n        *name);\n```\n\nCreates a mutex and returns a pointer to it.\n\n`name` is a string identifying the created mutex. It is used to identify the\nmutex in debug functionality (see note).\n\nReturns `NULL` on failure. The driver creating the mutex is responsible for\ndestroying it before the driver is unloaded.\n\nThis function is thread-safe.\n\n> #### Note {: .info #lock_checker }\n>\n> One such debug functionality is the _lock checker_, which can detect locking\n> order violations and thereby potential deadlock bugs. For the lock checker to\n> work the `name` should be on the format `\"App.Type\"` or\n> `\"App.Type[Instance]\"`, where App is the name of the application, Type is the\n> name of the lock type and Instance is optional information about each lock\n> instance. \"App.Type\" should be a unique name for the lock checker to detect\n> lock order violations between locks of different types. The Instance\n> information is currently ignored.\n>\n> For example, if we have mutexes of types \"myapp.xtable\" and \"myapp.xitem\" then\n> the lock checker will make sure either \"myapp.xtable\" locks are never locked\n> after \"myapp.xitem\" locks or vice versa.","ref":"erl_driver.html#erl_drv_mutex_create"},{"type":"extras","title":"erl_drv_mutex_destroy() - erl_driver","doc":"```c\nvoid erl_drv_mutex_destroy(ErlDrvMutex\n        *mtx);\n```\n\nDestroys a mutex previously created by\n[`erl_drv_mutex_create`](erl_driver.md#erl_drv_mutex_create). The mutex must be\nin an unlocked state before it is destroyed.\n\n`mtx` is a pointer to a mutex to destroy.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_mutex_destroy"},{"type":"extras","title":"erl_drv_mutex_lock() - erl_driver","doc":"```c\nvoid erl_drv_mutex_lock(ErlDrvMutex\n        *mtx);\n```\n\nLocks a mutex. The calling thread is blocked until the mutex has been locked. A\nthread that has currently locked the mutex _cannot_ lock the same mutex again.\n\n`mtx` is a pointer to a mutex to lock.\n\n> #### Warning {: .warning }\n>\n> If you leave a mutex locked in an emulator thread when you let the thread out\n> of your control, you will _very likely_ deadlock the whole emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_mutex_lock"},{"type":"extras","title":"erl_drv_mutex_name() - erl_driver","doc":"```c\nchar * erl_drv_mutex_name(ErlDrvMutex\n        *mtx);\n```\n\nReturns a pointer to the mutex name.\n\n`mtx` is a pointer to an initialized mutex.\n\n> #### Note {: .info }\n>\n> This function is intended for debugging purposes only.\n\nAvailable since OTP R16B02","ref":"erl_driver.html#erl_drv_mutex_name"},{"type":"extras","title":"erl_drv_mutex_trylock() - erl_driver","doc":"```c\nint erl_drv_mutex_trylock(ErlDrvMutex\n        *mtx);\n```\n\nTries to lock a mutex. A thread that has currently locked the mutex _cannot_ try\nto lock the same mutex again.\n\n`mtx` is a pointer to a mutex to try to lock.\n\nReturns `0` on success, otherwise `EBUSY`.\n\n> #### Warning {: .warning }\n>\n> If you leave a mutex locked in an emulator thread when you let the thread out\n> of your control, you will _very likely_ deadlock the whole emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_mutex_trylock"},{"type":"extras","title":"erl_drv_mutex_unlock() - erl_driver","doc":"```c\nvoid erl_drv_mutex_unlock(ErlDrvMutex\n        *mtx);\n```\n\nUnlocks a mutex. The mutex currently must be locked by the calling thread.\n\n`mtx` is a pointer to a mutex to unlock.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_mutex_unlock"},{"type":"extras","title":"erl_drv_output_term() - erl_driver","doc":"```c\nint erl_drv_output_term(ErlDrvTermData port,\n        ErlDrvTermData* term, int n);\n```\n\nSends data in the special driver term format to the port owner process. This is\na fast way to deliver term data from a driver. It needs no binary conversion, so\nthe port owner process receives data as normal Erlang terms. The\n[`erl_drv_send_term`](erl_driver.md#erl_drv_send_term) functions can be used for\nsending to any process on the local node.\n\n> #### Note {: .info }\n>\n> Parameter `port` is _not_ an ordinary port handle, but a port handle converted\n> using [`driver_mk_port`](erl_driver.md#driver_mk_port).\n\nParameter `term` points to an array of `ErlDrvTermData` with `n` elements. This\narray contains terms described in the driver term format. Every term consists of\n1-4 elements in the array. The first term has a term type and then arguments.\nParameter `port` specifies the sending port.\n\nTuples, maps, and lists (except strings, see below) are built in reverse polish\nnotation, so that to build a tuple, the elements are specified first, and then\nthe tuple term, with a count. Likewise for lists and maps.\n\n- A tuple must be specified with the number of elements. (The elements precede\n  the `ERL_DRV_TUPLE` term.)\n- A map must be specified with the number of key-value pairs `N`. The key-value\n  pairs must precede the `ERL_DRV_MAP` in this order:\n  `key1,value1,key2,value2,...,keyN,valueN`. Duplicate keys are not allowed.\n- A list must be specified with the number of elements, including the tail,\n  which is the last term preceding `ERL_DRV_LIST`.\n\nThe special term `ERL_DRV_STRING_CONS` is used to \"splice\" in a string in a\nlist, a string specified this way is not a list in itself, but the elements are\nelements of the surrounding list.\n\n```text\nTerm type            Arguments\n---------            ---------\nERL_DRV_NIL\nERL_DRV_ATOM         ErlDrvTermData atom (from driver_mk_atom(char *string))\nERL_DRV_INT          ErlDrvSInt integer\nERL_DRV_UINT         ErlDrvUInt integer\nERL_DRV_INT64        ErlDrvSInt64 *integer_ptr\nERL_DRV_UINT64       ErlDrvUInt64 *integer_ptr\nERL_DRV_PORT         ErlDrvTermData port (from driver_mk_port(ErlDrvPort port))\nERL_DRV_BINARY       ErlDrvBinary *bin, ErlDrvUInt len, ErlDrvUInt offset\nERL_DRV_BUF2BINARY   char *buf, ErlDrvUInt len\nERL_DRV_STRING       char *str, int len\nERL_DRV_TUPLE        int sz\nERL_DRV_LIST         int sz\nERL_DRV_PID          ErlDrvTermData pid (from driver_connected(ErlDrvPort port)\n                     or driver_caller(ErlDrvPort port))\nERL_DRV_STRING_CONS  char *str, int len\nERL_DRV_FLOAT        double *dbl\nERL_DRV_EXT2TERM     char *buf, ErlDrvUInt len\nERL_DRV_MAP          int sz\n```\n\nThe unsigned integer data type `ErlDrvUInt` and the signed integer data type\n`ErlDrvSInt` are 64 bits wide on a 64-bit runtime system and 32 bits wide on a\n32-bit runtime system. They were introduced in ERTS 5.6 and replaced some of the\n`int` arguments in the list above.\n\nThe unsigned integer data type `ErlDrvUInt64` and the signed integer data type\n`ErlDrvSInt64` are always 64 bits wide. They were introduced in ERTS 5.7.4.\n\nTo build the tuple `{tcp, Port, [100 | Binary]}`, the following call can be\nmade.\n\n```text\nErlDrvBinary* bin = ...\nErlDrvPort port = ...\nErlDrvTermData spec[] = {\n    ERL_DRV_ATOM, driver_mk_atom(\"tcp\"),\n    ERL_DRV_PORT, driver_mk_port(drvport),\n        ERL_DRV_INT, 100,\n        ERL_DRV_BINARY, bin, 50, 0,\n        ERL_DRV_LIST, 2,\n    ERL_DRV_TUPLE, 3,\n};\nerl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));\n```\n\nHere `bin` is a driver binary of length at least 50 and `drvport` is a port\nhandle. Notice that `ERL_DRV_LIST` comes after the elements of the list,\nlikewise `ERL_DRV_TUPLE`.\n\nThe `ERL_DRV_STRING_CONS` term is a way to construct strings. It works\ndifferently from how `ERL_DRV_STRING` works. `ERL_DRV_STRING_CONS` builds a\nstring list in reverse order (as opposed to how `ERL_DRV_LIST` works),\nconcatenating the strings added to a list. The tail must be specified before\n`ERL_DRV_STRING_CONS`.\n\n`ERL_DRV_STRING` constructs a string, and ends it. (So it is the same as\n`ERL_DRV_NIL` followed by `ERL_DRV_STRING_CONS`.)\n\n```c\n/* to send [x, \"abc\", y] to the port: */\nErlDrvTermData spec[] = {\n    ERL_DRV_ATOM, driver_mk_atom(\"x\"),\n    ERL_DRV_STRING, (ErlDrvTermData)\"abc\", 3,\n    ERL_DRV_ATOM, driver_mk_atom(\"y\"),\n    ERL_DRV_NIL,\n    ERL_DRV_LIST, 4\n};\nerl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));\n```\n\n```c\n/* to send \"abc123\" to the port: */\nErlDrvTermData spec[] = {\n    ERL_DRV_NIL,        /* with STRING_CONS, the tail comes first */\n    ERL_DRV_STRING_CONS, (ErlDrvTermData)\"123\", 3,\n    ERL_DRV_STRING_CONS, (ErlDrvTermData)\"abc\", 3,\n};\nerl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));\n```\n\n[](){: #ERL_DRV_EXT2TERM }\n\nThe `ERL_DRV_EXT2TERM` term type is used for passing\na term encoded with the [external format](erl_ext_dist.md), that is, a term that\nhas been encoded by [`erlang:term_to_binary()`](`erlang:term_to_binary/2`),\n[`erl_interface:ei(3)`](`e:erl_interface:ei.md`), and so on. For example, if\n`binp` is a pointer to an `ErlDrvBinary` that contains term `{17, 4711}` encoded\nwith the [external format](erl_ext_dist.md), and you want to wrap it in a\ntwo-tuple with the tag `my_tag`, that is, `{my_tag, {17, 4711}}`, you can do as\nfollows:\n\n```text\nErlDrvTermData spec[] = {\n        ERL_DRV_ATOM, driver_mk_atom(\"my_tag\"),\n        ERL_DRV_EXT2TERM, (ErlDrvTermData) binp->orig_bytes, binp->orig_size\n    ERL_DRV_TUPLE, 2,\n};\nerl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));\n```\n\nTo build the map `#{key1 => 100, key2 => {200, 300}}`, the following call can be\nmade.\n\n```text\nErlDrvPort port = ...\nErlDrvTermData spec[] = {\n    ERL_DRV_ATOM, driver_mk_atom(\"key1\"),\n        ERL_DRV_INT, 100,\n    ERL_DRV_ATOM, driver_mk_atom(\"key2\"),\n        ERL_DRV_INT, 200,\n        ERL_DRV_INT, 300,\n    ERL_DRV_TUPLE, 2,\n    ERL_DRV_MAP, 2\n};\nerl_drv_output_term(driver_mk_port(drvport), spec, sizeof(spec) / sizeof(spec[0]));\n```\n\nIf you want to pass a binary and do not already have the content of the binary\nin an `ErlDrvBinary`, you can benefit from using `ERL_DRV_BUF2BINARY` instead of\ncreating an `ErlDrvBinary` through\n[`driver_alloc_binary`](erl_driver.md#driver_alloc_binary) and then pass the\nbinary through `ERL_DRV_BINARY`. The runtime system often allocates binaries\nsmarter if `ERL_DRV_BUF2BINARY` is used. However, if the content of the binary\nto pass already resides in an `ErlDrvBinary`, it is normally better to pass the\nbinary using `ERL_DRV_BINARY` and the `ErlDrvBinary` in question.\n\nThe `ERL_DRV_UINT`, `ERL_DRV_BUF2BINARY`, and `ERL_DRV_EXT2TERM` term types were\nintroduced in ERTS 5.6.\n\nThis function is thread-safe.\n\nAvailable since OTP R16B","ref":"erl_driver.html#erl_drv_output_term"},{"type":"extras","title":"erl_drv_putenv() - erl_driver","doc":"```c\nint erl_drv_putenv(const char *key, char\n        *value);\n```\n\nSets the value of an environment variable.\n\n`key` is a `NULL`\\-terminated string containing the name of the environment\nvariable.\n\n`value` is a `NULL`\\-terminated string containing the new value of the\nenvironment variable.\n\nReturns `0` on success, otherwise a value `!= 0`.\n\n> #### Note {: .info }\n>\n> The result of passing the empty string (`\"\"`) as a value is\n> platform-dependent. On some platforms the variable value is set to the empty\n> string, on others the environment variable is removed.\n\n> #### Warning {: .warning }\n>\n> This function modifies the emulated environment used by `os:putenv/2` and not\n> the environment used by libc's `putenv(3)` or similar. Drivers that _require_\n> that these are in sync will need to do so themselves, but keep in mind that\n> they are segregated for a reason; `putenv(3)` and its friends are _not\n> thread-safe_ and may cause unrelated code to misbehave or crash the emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_putenv"},{"type":"extras","title":"erl_drv_rwlock_create() - erl_driver","doc":"```c\nErlDrvRWLock * erl_drv_rwlock_create(char\n        *name);\n```\n\nCreates an rwlock and returns a pointer to it.\n\n`name` is a string identifying the created rwlock. It is used to identify the\nrwlock in debug functionality (see note about the\n[lock checker](erl_driver.md#lock_checker)).\n\nReturns `NULL` on failure. The driver creating the rwlock is responsible for\ndestroying it before the driver is unloaded.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_create"},{"type":"extras","title":"erl_drv_rwlock_destroy() - erl_driver","doc":"```c\nvoid erl_drv_rwlock_destroy(ErlDrvRWLock\n        *rwlck);\n```\n\nDestroys an rwlock previously created by\n[`erl_drv_rwlock_create`](erl_driver.md#erl_drv_rwlock_create). The rwlock must\nbe in an unlocked state before it is destroyed.\n\n`rwlck` is a pointer to an rwlock to destroy.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_destroy"},{"type":"extras","title":"erl_drv_rwlock_name() - erl_driver","doc":"```c\nchar * erl_drv_rwlock_name(ErlDrvRWLock\n        *rwlck);\n```\n\nReturns a pointer to the name of the rwlock.\n\n`rwlck` is a pointer to an initialized rwlock.\n\n> #### Note {: .info }\n>\n> This function is intended for debugging purposes only.\n\nAvailable since OTP R16B02","ref":"erl_driver.html#erl_drv_rwlock_name"},{"type":"extras","title":"erl_drv_rwlock_rlock() - erl_driver","doc":"```c\nvoid erl_drv_rwlock_rlock(ErlDrvRWLock\n        *rwlck);\n```\n\nRead locks an rwlock. The calling thread is blocked until the rwlock has been\nread locked. A thread that currently has read or read/write locked the rwlock\n_cannot_ lock the same rwlock again.\n\n`rwlck` is a pointer to the rwlock to read lock.\n\n> #### Warning {: .warning }\n>\n> If you leave an rwlock locked in an emulator thread when you let the thread\n> out of your control, you will _very likely_ deadlock the whole emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_rlock"},{"type":"extras","title":"erl_drv_rwlock_runlock() - erl_driver","doc":"```c\nvoid erl_drv_rwlock_runlock(ErlDrvRWLock\n        *rwlck);\n```\n\nRead unlocks an rwlock. The rwlock currently must be read locked by the calling\nthread.\n\n`rwlck` is a pointer to an rwlock to read unlock.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_runlock"},{"type":"extras","title":"erl_drv_rwlock_rwlock() - erl_driver","doc":"```c\nvoid erl_drv_rwlock_rwlock(ErlDrvRWLock\n        *rwlck);\n```\n\nRead/write locks an rwlock. The calling thread is blocked until the rwlock has\nbeen read/write locked. A thread that currently has read or read/write locked\nthe rwlock _cannot_ lock the same rwlock again.\n\n`rwlck` is a pointer to an rwlock to read/write lock.\n\n> #### Warning {: .warning }\n>\n> If you leave an rwlock locked in an emulator thread when you let the thread\n> out of your control, you will _very likely_ deadlock the whole emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_rwlock"},{"type":"extras","title":"erl_drv_rwlock_rwunlock() - erl_driver","doc":"```c\nvoid erl_drv_rwlock_rwunlock(ErlDrvRWLock\n        *rwlck);\n```\n\nRead/write unlocks an rwlock. The rwlock currently must be read/write locked by\nthe calling thread.\n\n`rwlck` is a pointer to an rwlock to read/write unlock.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_rwunlock"},{"type":"extras","title":"erl_drv_rwlock_tryrlock() - erl_driver","doc":"```c\nint erl_drv_rwlock_tryrlock(ErlDrvRWLock\n        *rwlck);\n```\n\nTries to read lock an rwlock.\n\n`rwlck` is a pointer to an rwlock to try to read lock.\n\nReturns `0` on success, otherwise `EBUSY`. A thread that currently has read or\nread/write locked the rwlock _cannot_ try to lock the same rwlock again.\n\n> #### Warning {: .warning }\n>\n> If you leave an rwlock locked in an emulator thread when you let the thread\n> out of your control, you will _very likely_ deadlock the whole emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_tryrlock"},{"type":"extras","title":"erl_drv_rwlock_tryrwlock() - erl_driver","doc":"```c\nint erl_drv_rwlock_tryrwlock(ErlDrvRWLock\n        *rwlck);\n```\n\nTries to read/write lock an rwlock. A thread that currently has read or\nread/write locked the rwlock _cannot_ try to lock the same rwlock again.\n\n`rwlck`is pointer to an rwlock to try to read/write lock.\n\nReturns `0` on success, otherwise `EBUSY`.\n\n> #### Warning {: .warning }\n>\n> If you leave an rwlock locked in an emulator thread when you let the thread\n> out of your control, you will _very likely_ deadlock the whole emulator.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_rwlock_tryrwlock"},{"type":"extras","title":"erl_drv_send_term() - erl_driver","doc":"```c\nint erl_drv_send_term(ErlDrvTermData port,\n        ErlDrvTermData receiver, ErlDrvTermData* term, int n);\n```\n\nThis function is the only way for a driver to send data to _other_ processes\nthan the port owner process. Parameter `receiver` specifies the process to\nreceive the data.\n\n> #### Note {: .info }\n>\n> Parameter `port` is _not_ an ordinary port handle, but a port handle converted\n> using [`driver_mk_port`](erl_driver.md#driver_mk_port).\n\nParameters `port`, `term`, and `n` work as in\n[`erl_drv_output_term`](erl_driver.md#erl_drv_output_term).\n\nThis function is thread-safe.\n\nAvailable since OTP R16B","ref":"erl_driver.html#erl_drv_send_term"},{"type":"extras","title":"erl_drv_set_os_pid() - erl_driver","doc":"```c\nvoid erl_drv_set_os_pid(ErlDrvPort port,\n        ErlDrvSInt pid);\n```\n\nSets the `os_pid` seen when doing `erlang:port_info/2` on this port.\n\n`port` is the port handle of the port (driver instance) to set the pid on.\n`pid`is the pid to set.\n\nAvailable since OTP 19.0","ref":"erl_driver.html#erl_drv_set_os_pid"},{"type":"extras","title":"erl_drv_thread_create() - erl_driver","doc":"```c\nint erl_drv_thread_create(char *name, ErlDrvTid\n        *tid, void * (*func)(void *), void *arg, ErlDrvThreadOpts\n        *opts);\n```\n\nCreates a new thread.\n\n- **`name`** - A string identifying the created thread. It is used to identify\n  the thread in planned future debug functionality.\n\n- **`tid`** - A pointer to a thread identifier variable.\n\n- **`func`** - A pointer to a function to execute in the created thread.\n\n- **`arg`** - A pointer to argument to the `func` function.\n\n- **`opts`** - A pointer to thread options to use or `NULL`.\n\nReturns `0` on success, otherwise an `errno` value is returned to indicate the\nerror. The newly created thread begins executing in the function pointed to by\n`func`, and `func` is passed `arg` as argument. When `erl_drv_thread_create`\nreturns, the thread identifier of the newly created thread is available in\n`*tid`. `opts` can be either a `NULL` pointer, or a pointer to an\n[`ErlDrvThreadOpts`](erl_driver.md#ErlDrvThreadOpts) structure. If `opts` is a\n`NULL` pointer, default options are used, otherwise the passed options are used.\n\n> #### Warning {: .warning }\n>\n> You are not allowed to allocate the\n> [`ErlDrvThreadOpts`](erl_driver.md#ErlDrvThreadOpts) structure by yourself. It\n> must be allocated and initialized by\n> [`erl_drv_thread_opts_create`](erl_driver.md#erl_drv_thread_opts_create).\n\nThe created thread terminates either when `func` returns or if\n[`erl_drv_thread_exit`](erl_driver.md#erl_drv_thread_exit) is called by the\nthread. The exit value of the thread is either returned from `func` or passed as\nargument to [`erl_drv_thread_exit`](erl_driver.md#erl_drv_thread_exit). The\ndriver creating the thread is responsible for joining the thread, through\n[`erl_drv_thread_join`](erl_driver.md#erl_drv_thread_join), before the driver is\nunloaded. \"Detached\" threads cannot be created, that is, threads that do not\nneed to be joined.\n\n> #### Warning {: .warning }\n>\n> All created threads must be joined by the driver before it is unloaded. If the\n> driver fails to join all threads created before it is unloaded, the runtime\n> system most likely crashes when the driver code is unloaded.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_thread_create"},{"type":"extras","title":"erl_drv_thread_exit() - erl_driver","doc":"```c\nvoid erl_drv_thread_exit(void\n        *exit_value);\n```\n\nTerminates the calling thread with the exit value passed as argument.\n`exit_value` is a pointer to an exit value or `NULL`.\n\nYou are only allowed to terminate threads created with\n[`erl_drv_thread_create`](erl_driver.md#erl_drv_thread_create).\n\nThe exit value can later be retrieved by another thread through\n[`erl_drv_thread_join`](erl_driver.md#erl_drv_thread_join).\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_thread_exit"},{"type":"extras","title":"erl_drv_thread_join() - erl_driver","doc":"```c\nint erl_drv_thread_join(ErlDrvTid tid, void\n        **exit_value);\n```\n\nJoins the calling thread with another thread, that is, the calling thread is\nblocked until the thread identified by `tid` has terminated.\n\n`tid` is the thread identifier of the thread to join. `exit_value` is a pointer\nto a pointer to an exit value, or `NULL`.\n\nReturns `0` on success, otherwise an `errno` value is returned to indicate the\nerror.\n\nA thread can only be joined once. The behavior of joining more than once is\nundefined, an emulator crash is likely. If `exit_value == NULL`, the exit value\nof the terminated thread is ignored, otherwise the exit value of the terminated\nthread is stored at `*exit_value`.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_thread_join"},{"type":"extras","title":"erl_drv_thread_name() - erl_driver","doc":"```c\nchar * erl_drv_thread_name(ErlDrvTid\n        tid);\n```\n\nReturns a pointer to the name of the thread.\n\n`tid` is a thread identifier.\n\n> #### Note {: .info }\n>\n> This function is intended for debugging purposes only.\n\nAvailable since OTP R16B02","ref":"erl_driver.html#erl_drv_thread_name"},{"type":"extras","title":"erl_drv_thread_opts_create() - erl_driver","doc":"```c\nErlDrvThreadOpts * erl_drv_thread_opts_create(char *name);\n```\n\nAllocates and initializes a thread option structure.\n\n`name` is a string identifying the created thread options. It is used to\nidentify the thread options in planned future debug functionality.\n\nReturns `NULL` on failure. A thread option structure is used for passing options\nto [`erl_drv_thread_create`](erl_driver.md#erl_drv_thread_create). If the\nstructure is not modified before it is passed to\n[`erl_drv_thread_create`](erl_driver.md#erl_drv_thread_create), the default\nvalues are used.\n\n> #### Warning {: .warning }\n>\n> You are not allowed to allocate the\n> [`ErlDrvThreadOpts`](erl_driver.md#ErlDrvThreadOpts) structure by yourself. It\n> must be allocated and initialized by `erl_drv_thread_opts_create`.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_thread_opts_create"},{"type":"extras","title":"erl_drv_thread_opts_destroy() - erl_driver","doc":"```c\nvoid erl_drv_thread_opts_destroy(ErlDrvThreadOpts *opts);\n```\n\nDestroys thread options previously created by\n[`erl_drv_thread_opts_create`](erl_driver.md#erl_drv_thread_opts_create).\n\n`opts` is a pointer to thread options to destroy.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_thread_opts_destroy"},{"type":"extras","title":"erl_drv_thread_self() - erl_driver","doc":"```c\nErlDrvTid erl_drv_thread_self(void);\n```\n\nReturns the thread identifier of the calling thread.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_thread_self"},{"type":"extras","title":"erl_drv_time_offset() - erl_driver","doc":"```c\nErlDrvTime erl_drv_time_offset(ErlDrvTimeUnit\n        time_unit);\n```\n\nReturns the current time offset between\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time) and\n[Erlang system time](time_correction.md#erlang-system-time) converted into the\n`time_unit` passed as argument.\n\n`time_unit` is time unit of returned value.\n\nReturns `ERL_DRV_TIME_ERROR` if called with an invalid time unit argument, or if\ncalled from a thread that is not a scheduler thread.\n\nSee also [`ErlDrvTime`](erl_driver.md#ErlDrvTime) and\n[`ErlDrvTimeUnit`](erl_driver.md#ErlDrvTimeUnit).\n\nAvailable since OTP 18.3","ref":"erl_driver.html#erl_drv_time_offset"},{"type":"extras","title":"erl_drv_tsd_get() - erl_driver","doc":"```c\nvoid * erl_drv_tsd_get(ErlDrvTSDKey\n        key);\n```\n\nReturns the thread-specific data associated with `key` for the calling thread.\n\n`key` is a thread-specific data key.\n\nReturns `NULL` if no data has been associated with `key` for the calling thread.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_tsd_get"},{"type":"extras","title":"erl_drv_tsd_key_create() - erl_driver","doc":"```c\nint erl_drv_tsd_key_create(char *name,\n        ErlDrvTSDKey *key);\n```\n\nCreates a thread-specific data key.\n\n`name` is a string identifying the created key. It is used to identify the key\nin planned future debug functionality.\n\n`key` is a pointer to a thread-specific data key variable.\n\nReturns `0` on success, otherwise an `errno` value is returned to indicate the\nerror. The driver creating the key is responsible for destroying it before the\ndriver is unloaded.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_tsd_key_create"},{"type":"extras","title":"erl_drv_tsd_key_destroy() - erl_driver","doc":"```c\nvoid erl_drv_tsd_key_destroy(ErlDrvTSDKey\n        key);\n```\n\nDestroys a thread-specific data key previously created by\n[`erl_drv_tsd_key_create`](erl_driver.md#erl_drv_tsd_key_create). All\nthread-specific data using this key in all threads must be cleared (see\n[`erl_drv_tsd_set`](erl_driver.md#erl_drv_tsd_set)) before the call to\n`erl_drv_tsd_key_destroy`.\n\n`key` is a thread-specific data key to destroy.\n\n> #### Warning {: .warning }\n>\n> A destroyed key is very likely to be reused soon. Therefore, if you fail to\n> clear the thread-specific data using this key in a thread before destroying\n> the key, you will _very likely_ get unexpected errors in other parts of the\n> system.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_tsd_key_destroy"},{"type":"extras","title":"erl_drv_tsd_set() - erl_driver","doc":"```c\nvoid erl_drv_tsd_set(ErlDrvTSDKey key, void\n        *data);\n```\n\nSets thread-specific data associated with `key` for the calling thread. You are\nonly allowed to set thread-specific data for threads while they are fully under\nyour control. For example, if you set thread-specific data in a thread calling a\ndriver callback function, it must be cleared, that is, set to `NULL`, before\nreturning from the driver callback function.\n\n`key` is a thread-specific data key.\n\n`data` is a pointer to data to associate with `key` in the calling thread.\n\n> #### Warning {: .warning }\n>\n> If you fail to clear thread-specific data in an emulator thread before letting\n> it out of your control, you might never be able to clear this data with later\n> unexpected errors in other parts of the system as a result.\n\nThis function is thread-safe.","ref":"erl_driver.html#erl_drv_tsd_set"},{"type":"extras","title":"erl_errno_id() - erl_driver","doc":"```c\nchar * erl_errno_id(int error);\n```\n\nReturns the atom name of the Erlang error, given the error number in `error`.\nThe error atoms are `einval`, `enoent`, and so on. It can be used to make error\nterms from the driver.","ref":"erl_driver.html#erl_errno_id"},{"type":"extras","title":"remove_driver_entry() - erl_driver","doc":"```c\nint remove_driver_entry(ErlDrvEntry\n        *de);\n```\n\nRemoves a driver entry `de` previously added with\n[`add_driver_entry`](erl_driver.md#add_driver_entry).\n\nDriver entries added by the `erl_ddll` Erlang interface cannot be removed by\nusing this interface.","ref":"erl_driver.html#remove_driver_entry"},{"type":"extras","title":"set_busy_port() - erl_driver","doc":"```c\nvoid set_busy_port(ErlDrvPort port, int\n        on);\n```\n\nSets and unsets the busy state of the port. If `on` is non-zero, the port is set\nto busy. If it is zero, the port is set to not busy. You typically want to\ncombine this feature with the\n[busy port message queue](erl_driver.md#erl_drv_busy_msgq_limits) functionality.\n\nProcesses sending command data to the port are suspended if either the port or\nthe port message queue is busy. Suspended processes are resumed when neither the\nport or the port message queue is busy. Command data is in this context data\npassed to the port using either `Port ! {Owner, {command, Data}}` or\n`port_command/[2,3]`.\n\nIf the [ERL_DRV_FLAG_SOFT_BUSY](driver_entry.md#driver_flags) has been set in\nthe [`driver_entry`](driver_entry.md), data can be forced into the driver\nthrough [`erlang:port_command(Port, Data, [force])`](`erlang:port_command/3`)\neven if the driver has signaled that it is busy.\n\nFor information about busy port message queue functionality, see\n[`erl_drv_busy_msgq_limits`](erl_driver.md#erl_drv_busy_msgq_limits).","ref":"erl_driver.html#set_busy_port"},{"type":"extras","title":"set_port_control_flags() - erl_driver","doc":"```c\nvoid set_port_control_flags(ErlDrvPort port,\n        int flags);\n```\n\nSets flags for how the [`control`](driver_entry.md#control) driver entry\nfunction will return data to the port owner process. (The `control` function is\ncalled from `erlang:port_control/3`.)\n\nCurrently there are only two meaningful values for `flags`: `0` means that data\nis returned in a list, and `PORT_CONTROL_FLAG_BINARY` means data is returned as\na binary from `control`.","ref":"erl_driver.html#set_port_control_flags"},{"type":"extras","title":"See Also - erl_driver","doc":"[`driver_entry(3)`](driver_entry.md), `m:erlang`, `m:erl_ddll`, section\n[How to Implement an Alternative Carrier for the Erlang Distribution](alt_dist.md)\nin the User's Guide","ref":"erl_driver.html#see-also"},{"type":"extras","title":"erl_nif","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# erl_nif\n\nAPI functions for an Erlang NIF library.","ref":"erl_nif.html"},{"type":"extras","title":"Description - erl_nif","doc":"A NIF library contains native implementation of some functions of an Erlang\nmodule. The native implemented functions (NIFs) are called like any other\nfunctions without any difference to the caller. A NIF library is built as a\ndynamically linked library file and loaded in runtime by calling\n`erlang:load_nif/2`.\n\n> #### Warning {: .warning }\n>\n> [](){: #WARNING } _Use this functionality with extreme care._\n>\n> A native function is executed as a direct extension of the native code of the\n> VM. Execution is not made in a safe environment. The VM _cannot_ provide the\n> same services as provided when executing Erlang code, such as pre-emptive\n> scheduling or memory protection. If the native function does not behave well,\n> the whole VM will misbehave.\n>\n> - A native function that crashes will crash the whole VM.\n> - An erroneously implemented native function can cause a VM internal state\n>   inconsistency, which can cause a crash of the VM, or miscellaneous\n>   misbehaviors of the VM at any point after the call to the native function.\n> - A native function doing [lengthy work](erl_nif.md#lengthy_work) before\n>   returning degrades responsiveness of the VM, and can cause miscellaneous\n>   strange behaviors. Such strange behaviors include, but are not limited to,\n>   extreme memory usage, and bad load balancing between schedulers. Strange\n>   behaviors that can occur because of lengthy work can also vary between\n>   Erlang/OTP releases.","ref":"erl_nif.html#description"},{"type":"extras","title":"Example - erl_nif","doc":"A minimal example of a NIF library can look as follows:\n\n```c\n/* niftest.c */\n#include  \n\nstatic ERL_NIF_TERM hello(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n{\n    return enif_make_string(env, \"Hello world!\", ERL_NIF_LATIN1);\n}\n\nstatic ErlNifFunc nif_funcs[] =\n{\n    {\"hello\", 0, hello}\n};\n\nERL_NIF_INIT(niftest,nif_funcs,NULL,NULL,NULL,NULL)\n```\n\nThe Erlang module can look as follows:\n\n```erlang\n-module(niftest).\n\n-export([init/0, hello/0]).\n\n-nifs([hello/0]).\n\n-on_load(init/0).\n\ninit() ->\n      erlang:load_nif(\"./niftest\", 0).\n\nhello() ->\n      erlang:nif_error(\"NIF library not loaded\").\n```\n\nCompile and test can look as follows (on Linux):\n\n```text\n$> gcc -fPIC -shared -o niftest.so niftest.c -I $ERL_ROOT/usr/include/\n$> erl\n\n1> c(niftest).\n{ok,niftest}\n2> niftest:hello().\n\"Hello world!\"\n```\n\nIn the example above the [_`on_load`_](`e:system:code_loading.md#on_load`)\ndirective is used get function `init` called automatically when the module is\nloaded. Function `init` in turn calls `erlang:load_nif/2` which loads the NIF\nlibrary and replaces the `hello` function with its native implementation in C.\nOnce loaded, a NIF library is persistent. It will not be unloaded until the\nmodule instance that it belongs to is purged.\n\nThe [`-nifs()`](`e:system:modules.md#nifs_attribute`) attribute specifies which\nfunctions in the module that are to be replaced by NIFs.\n\nEach NIF must have an implementation in Erlang to be invoked if the function is\ncalled before the NIF library is successfully loaded. A typical such stub\nimplementation is to call [`erlang:nif_error`](`erlang:nif_error/1`) which will\nraise an exception. The Erlang function can also be used as a fallback\nimplementation if the NIF library lacks implementation for some OS or hardware\narchitecture for example.\n\n> #### Note {: .info }\n>\n> A NIF does not have to be exported, it can be local to the module. However,\n> unused local stub functions will be optimized away by the compiler, causing\n> loading of the NIF library to fail.","ref":"erl_nif.html#example"},{"type":"extras","title":"Functionality - erl_nif","doc":"All interaction between NIF code and the Erlang runtime system is performed by\ncalling NIF API functions. Functions exist for the following functionality:\n\n- **Read and write Erlang terms** - Any Erlang terms can be passed to a NIF as\n  function arguments and be returned as function return values. The terms are of\n  C-type [`ERL_NIF_TERM`](erl_nif.md#ERL_NIF_TERM) and can only be read or\n  written using API functions. Most functions to read the content of a term are\n  prefixed `enif_get_` and usually return `true` (or `false`) if the term is of\n  the expected type (or not). The functions to write terms are all prefixed\n  `enif_make_` and usually return the created `ERL_NIF_TERM`. There are also\n  some functions to query terms, like `enif_is_atom`, `enif_is_identical`, and\n  `enif_compare`.\n\n  All terms of type `ERL_NIF_TERM` belong to an environment of type\n  [`ErlNifEnv`](erl_nif.md#ErlNifEnv), except atoms created during loading (by\n  callbacks [`load`](erl_nif.md#load) or [`upgrade`](erl_nif.md#upgrade)). The\n  lifetime of a term is controlled by the lifetime of its environment object.\n  All API functions that read or write terms have the environment that the term\n  belongs to as the first function argument. However, the atoms created during\n  loading can be referred as a term in any `ErlNifEnv`. That is, the best\n  practice it to create all your atoms during loading and store them in\n  static/global variables, for example:\n\n  ```c\n  #include  \n\n  ERL_NIF_TERM world_atom;\n\n  static int load(ErlNifEnv* env, void** priv_data, ERL_NIF_TERM load_info)\n  {\n      world_atom = enif_make_atom(env, \"world\");\n      return 0;\n  }\n\n  static ERL_NIF_TERM hello(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[])\n  {\n      ERL_NIF_TERM hello_string = enif_make_string(env, \"Hello\", ERL_NIF_LATIN1);\n      return enif_make_tuple2(env, hello_string, world_atom);\n  }\n\n  static ErlNifFunc nif_funcs[] = { { \"hello\", 0, hello } };\n\n  ERL_NIF_INIT(niftest, nif_funcs, load, NULL, NULL, NULL)\n  ```\n\n- **Binaries** - Terms of type binary are accessed with the help of struct type\n  [`ErlNifBinary`](erl_nif.md#ErlNifBinary), which contains a pointer (`data`)\n  to the raw binary data and the length (`size`) of the data in bytes. Both\n  `data` and `size` are read-only and are only to be written using calls to API\n  functions. Instances of `ErlNifBinary` are, however, always allocated by the\n  user (usually as local variables).\n\n  The raw data pointed to by `data` is only mutable after a call to\n  [`enif_alloc_binary`](erl_nif.md#enif_alloc_binary) or\n  [`enif_realloc_binary`](erl_nif.md#enif_realloc_binary). All other functions\n  that operate on a binary leave the data as read-only. A mutable binary must in\n  the end either be freed with\n  [`enif_release_binary`](erl_nif.md#enif_release_binary) or made read-only by\n  transferring it to an Erlang term with\n  [`enif_make_binary`](erl_nif.md#enif_make_binary). However, it does not have\n  to occur in the same NIF call. Read-only binaries do not have to be released.\n\n  [`enif_make_new_binary`](erl_nif.md#enif_make_new_binary) can be used as a\n  shortcut to allocate and return a binary in the same NIF call.\n\n  Binaries are sequences of whole bytes. Bitstrings with an arbitrary bit length\n  have no support yet.\n\n- **Resource objects**{: #resource_objects }  \n  The use of resource objects is a safe way to return pointers to native data\n  structures from a NIF. A resource object is only a block of memory allocated\n  with [`enif_alloc_resource`](erl_nif.md#enif_alloc_resource). A handle (\"safe\n  pointer\") to this memory block can then be returned to Erlang by the use of\n  [`enif_make_resource`](erl_nif.md#enif_make_resource). The term returned by\n  `enif_make_resource` is opaque in nature. It can be stored and passed between\n  processes, but the only real end usage is to pass it back as an argument to a\n  NIF. The NIF can then call [`enif_get_resource`](erl_nif.md#enif_get_resource)\n  and get back a pointer to the memory block, which is guaranteed to still be\n  valid. A resource object is not deallocated until the last handle term is\n  garbage collected by the VM and the resource is released with\n  [`enif_release_resource`](erl_nif.md#enif_release_resource) (not necessarily\n  in that order).\n\n  All resource objects are created as instances of some _resource type_. This\n  makes resources from different modules to be distinguishable. A resource type\n  is created by calling\n  [`enif_open_resource_type`](erl_nif.md#enif_open_resource_type) when a library\n  is loaded. Objects of that resource type can then later be allocated and\n  `enif_get_resource` verifies that the resource is of the expected type. A\n  resource type can have a user-supplied destructor function, which is\n  automatically called when resources of that type are released (by either the\n  garbage collector or `enif_release_resource`). Resource types are uniquely\n  identified by a supplied name string and the name of the implementing module.\n\n  [](){: #enif_resource_example } The following is a template example of how to\n  create and return a resource object.\n\n  ```c\n  ERL_NIF_TERM term;\n  MyStruct* obj = enif_alloc_resource(my_resource_type, sizeof(MyStruct));\n\n  /* initialize struct ... */\n\n  term = enif_make_resource(env, obj);\n\n  if (keep_a_reference_of_our_own) {\n      /* store 'obj' in static variable, private data or other resource object */\n  }\n  else {\n      enif_release_resource(obj);\n      /* resource now only owned by \"Erlang\" */\n  }\n  return term;\n  ```\n\n  Notice that once `enif_make_resource` creates the term to return to Erlang,\n  the code can choose to either keep its own native pointer to the allocated\n  struct and release it later, or release it immediately and rely only on the\n  garbage collector to deallocate the resource object eventually when it\n  collects the term.\n\n  Another use of resource objects is to create binary terms with user-defined\n  memory management.\n  [`enif_make_resource_binary`](erl_nif.md#enif_make_resource_binary) creates a\n  binary term that is connected to a resource object. The destructor of the\n  resource is called when the binary is garbage collected, at which time the\n  binary data can be released. An example of this can be a binary term\n  consisting of data from a `mmap`'ed file. The destructor can then do `munmap`\n  to release the memory region.\n\n  Resource types support upgrade in runtime by allowing a loaded NIF library to\n  take over an already existing resource type and by that \"inherit\" all existing\n  objects of that type. The destructor of the new library is thereafter called\n  for the inherited objects and the library with the old destructor function can\n  be safely unloaded. Existing resource objects, of a module that is upgraded,\n  must either be deleted or taken over by the new NIF library. The unloading of\n  a library is postponed as long as there exist resource objects with a\n  destructor function in the library.\n\n- **Module upgrade and static data** - A loaded NIF library is tied to the\n  Erlang module instance that loaded it. If the module is upgraded, the new\n  module instance needs to load its own NIF library (or maybe choose not to).\n  The new module instance can, however, choose to load the exact same NIF\n  library as the old code if it wants to. Sharing the dynamic library means that\n  static data defined by the library is shared as well. To avoid unintentionally\n  shared static data between module instances, each Erlang module version can\n  keep its own private data. This private data can be set when the NIF library\n  is loaded and later retrieved by calling\n  [`enif_priv_data`](erl_nif.md#enif_priv_data).\n\n- **Threads and concurrency** - A NIF is thread-safe without any explicit\n  synchronization as long as it acts as a pure function and only reads the\n  supplied arguments. When you write to a shared state either through static\n  variables or [`enif_priv_data`](erl_nif.md#enif_priv_data), you need to supply\n  your own explicit synchronization. This includes terms in process independent\n  environments that are shared between threads. Resource objects also require\n  synchronization if you treat them as mutable.\n\n  The library initialization callbacks `load` and `upgrade` are thread-safe even\n  for shared state data.\n\n- **Version Management**{: #version_management } -\n  When a NIF library is built, information about the NIF API version is compiled\n  into the library. When a NIF library is loaded, the runtime system verifies\n  that the library is of a compatible version. `erl_nif.h` defines the\n  following:\n\n  - **`ERL_NIF_MAJOR_VERSION`** - Incremented when NIF library incompatible\n    changes are made to the Erlang runtime system. Normally it suffices to\n    recompile the NIF library when the `ERL_NIF_MAJOR_VERSION` has changed, but\n    it can, under rare circumstances, mean that NIF libraries must be slightly\n    modified. If so, this will of course be documented.\n\n  - **`ERL_NIF_MINOR_VERSION`** - Incremented when new features are added. The\n    runtime system uses the minor version to determine what features to use.\n\n  The runtime system normally refuses to load a NIF library if the major\n  versions differ, or if the major versions are equal and the minor version used\n  by the NIF library is greater than the one used by the runtime system. Old NIF\n  libraries with lower major versions are, however, allowed after a bump of the\n  major version during a transition period of two major releases. Such old NIF\n  libraries can however fail if deprecated features are used.\n\n- **Time Measurement**{: #time_measurement } -\n  Support for time measurement in NIF libraries:\n\n  - [`ErlNifTime`](erl_nif.md#ErlNifTime)\n  - [`ErlNifTimeUnit`](erl_nif.md#ErlNifTimeUnit)\n  - [`enif_monotonic_time()`](erl_nif.md#enif_monotonic_time)\n  - [`enif_time_offset()`](erl_nif.md#enif_time_offset)\n  - [`enif_convert_time_unit()`](erl_nif.md#enif_convert_time_unit)\n\n- **I/O Queues**{: #enif_ioq }  \n  The Erlang nif library contains function for easily working with I/O vectors\n  as used by the unix system call `writev`. The I/O Queue is not thread safe, so\n  some other synchronization mechanism has to be used.\n\n  - [`SysIOVec`](erl_nif.md#SysIOVec)\n  - [`ErlNifIOVec`](erl_nif.md#ErlNifIOVec)\n  - [`enif_ioq_create()`](erl_nif.md#enif_ioq_create)\n  - [`enif_ioq_destroy()`](erl_nif.md#enif_ioq_destroy)\n  - [`enif_ioq_enq_binary()`](erl_nif.md#enif_ioq_enq_binary)\n  - [`enif_ioq_enqv()`](erl_nif.md#enif_ioq_enqv)\n  - [`enif_ioq_deq()`](erl_nif.md#enif_ioq_deq)\n  - [`enif_ioq_peek()`](erl_nif.md#enif_ioq_peek)\n  - [`enif_ioq_peek_head()`](erl_nif.md#enif_ioq_peek_head)\n  - [`enif_inspect_iovec()`](erl_nif.md#enif_inspect_iovec)\n  - [`enif_free_iovec()`](erl_nif.md#enif_free_iovec)\n\n  Typical usage when writing to a file descriptor looks like this:\n\n  ```c\n  int writeiovec(ErlNifEnv *env, ERL_NIF_TERM term, ERL_NIF_TERM *tail,\n                 ErlNifIOQueue *q, int fd) {\n\n      ErlNifIOVec vec, *iovec = &vec;\n      SysIOVec *sysiovec;\n      int saved_errno;\n      int iovcnt, n;\n\n      if (!enif_inspect_iovec(env, 64, term, tail, &iovec))\n          return -2;\n\n      if (enif_ioq_size(q) > 0) {\n          /* If the I/O queue contains data we enqueue the iovec and\n             then peek the data to write out of the queue. */\n          if (!enif_ioq_enqv(q, iovec, 0))\n              return -3;\n\n          sysiovec = enif_ioq_peek(q, &iovcnt);\n      } else {\n          /* If the I/O queue is empty we skip the trip through it. */\n          iovcnt = iovec->iovcnt;\n          sysiovec = iovec->iov;\n      }\n\n      /* Attempt to write the data */\n      n = writev(fd, sysiovec, iovcnt);\n      saved_errno = errno;\n\n      if (enif_ioq_size(q) == 0) {\n          /* If the I/O queue was initially empty we enqueue any\n             remaining data into the queue for writing later. */\n          if (n >= 0 && !enif_ioq_enqv(q, iovec, n))\n              return -3;\n      } else {\n          /* Dequeue any data that was written from the queue. */\n          if (n > 0 && !enif_ioq_deq(q, n, NULL))\n              return -4;\n      }\n\n      /* return n, which is either number of bytes written or -1 if\n         some error happened */\n      errno = saved_errno;\n      return n;\n  }\n  ```\n\n- **Long-running NIFs**{: #lengthy_work }  \n  As mentioned in the [warning](erl_nif.md#WARNING) text at the beginning of\n  this manual page, it is of _vital importance_ that a native function returns\n  relatively fast. It is difficult to give an exact maximum amount of time that\n  a native function is allowed to work, but usually a well-behaving native\n  function is to return to its caller within 1 millisecond. This can be achieved\n  using different approaches. If you have full control over the code to execute\n  in the native function, the best approach is to divide the work into multiple\n  chunks of work and call the native function multiple times. This is, however,\n  not always possible, for example when calling third-party libraries.\n\n  The [`enif_consume_timeslice()`](erl_nif.md#enif_consume_timeslice) function\n  can be used to inform the runtime system about the length of the NIF call. It\n  is typically always to be used unless the NIF executes very fast.\n\n  If the NIF call is too lengthy, this must be handled in one of the following\n  ways to avoid degraded responsiveness, scheduler load balancing problems, and\n  other strange behaviors:\n\n  - **Yielding NIF** - If the functionality of a long-running NIF can be split\n    so that its work can be achieved through a series of shorter NIF calls, the\n    application has two options:\n\n    - Make that series of NIF calls from the Erlang level.\n    - Call a NIF that first performs a chunk of the work, then invokes the\n      [`enif_schedule_nif`](erl_nif.md#enif_schedule_nif) function to schedule\n      another NIF call to perform the next chunk. The final call scheduled in\n      this manner can then return the overall result.\n\n    Breaking up a long-running function in this manner enables the VM to regain\n    control between calls to the NIFs.\n\n    This approach is always preferred over the other alternatives described\n    below. This both from a performance perspective and a system characteristics\n    perspective.\n\n  - **Threaded NIF** - This is accomplished by dispatching the work to another\n    thread managed by the NIF library, return from the NIF, and wait for the\n    result. The thread can send the result back to the Erlang process using\n    [`enif_send`](erl_nif.md#enif_send). Information about thread primitives is\n    provided below.\n\n  - **Dirty NIF**{: #dirty_nifs }  \n    A NIF that cannot be split and cannot execute in a millisecond or less is\n    called a \"dirty NIF\", as it performs work that the ordinary schedulers of\n    the Erlang runtime system cannot handle cleanly. Applications that make use\n    of such functions must indicate to the runtime that the functions are dirty\n    so they can be handled specially. This is handled by executing dirty jobs on\n    a separate set of schedulers called dirty schedulers. A dirty NIF executing\n    on a dirty scheduler does not have the same duration restriction as a normal\n    NIF.\n\n    It is important to classify the dirty job correct. An I/O bound job should\n    be classified as such, and a CPU bound job should be classified as such. If\n    you should classify CPU bound jobs as I/O bound jobs, dirty I/O schedulers\n    might starve ordinary schedulers. I/O bound jobs are expected to either\n    block waiting for I/O, and/or spend a limited amount of time moving data.\n\n    To schedule a dirty NIF for execution, the application has two options:\n\n    - Set the appropriate flags value for the dirty NIF in its\n      [`ErlNifFunc`](erl_nif.md#ErlNifFunc) entry.\n    - Call [`enif_schedule_nif`](erl_nif.md#enif_schedule_nif), pass to it a\n      pointer to the dirty NIF to be executed, and indicate with argument\n      `flags` whether it expects the operation to be CPU-bound or I/O-bound.\n\n    A job that alternates between I/O bound and CPU bound can be reclassified\n    and rescheduled using `enif_schedule_nif` so that it executes on the correct\n    type of dirty scheduler at all times. For more information see the\n    documentation of the [erl](erl_cmd.md) command line arguments\n    [`+SDcpu`](erl_cmd.md#%2BSDcpu), and [`+SDio`](erl_cmd.md#%2BSDio).\n\n    While a process executes a dirty NIF, some operations that communicate with\n    it can take a very long time to complete. Suspend or garbage collection of a\n    process executing a dirty NIF cannot be done until the dirty NIF has\n    returned. Thus, other processes waiting for such operations to complete\n    might have to wait for a very long time. Blocking multi-scheduling, that is,\n    calling\n    [`erlang:system_flag(multi_scheduling, block)`](`m:erlang#system_flag_multi_scheduling`),\n    can also take a very long time to complete. This is because all ongoing\n    dirty operations on all dirty schedulers must complete before the block\n    operation can complete.\n\n    Many operations communicating with a process executing a dirty NIF can,\n    however, complete while it executes the dirty NIF. For example, retrieving\n    information about it through [`process_info`](`erlang:process_info/1`),\n    setting its group leader, register/unregister its name, and so on.\n\n    Termination of a process executing a dirty NIF can only be completed up to a\n    certain point while it executes the dirty NIF. All Erlang resources, such as\n    its registered name and its ETS tables, are released. All links and monitors\n    are triggered. The execution of the NIF is, however, _not_ stopped. The NIF\n    can safely continue execution, allocate heap memory, and so on, but it is of\n    course better to stop executing as soon as possible. The NIF can check\n    whether a current process is alive using\n    [`enif_is_current_process_alive`](erl_nif.md#enif_is_current_process_alive).\n    Communication using [`enif_send`](erl_nif.md#enif_send) and\n    [`enif_port_command`](erl_nif.md#enif_port_command) is also dropped when the\n    sending process is not alive. Deallocation of certain internal resources,\n    such as process heap and process control block, is delayed until the dirty\n    NIF has completed.","ref":"erl_nif.html#functionality"},{"type":"extras","title":"Initialization - erl_nif","doc":"- **`ERL_NIF_INIT(MODULE, ErlNifFunc funcs[], load, NULL, upgrade, unload)`**{: #ERL_NIF_INIT } -\n  This is the magic macro to initialize a NIF library. It is\n  to be evaluated in global file scope.\n\n  `MODULE` is the name of the Erlang module as an identifier without string\n  quotations. It is stringified by the macro.\n\n  `funcs` is a static array of function descriptors for all the implemented NIFs\n  in this library.\n\n  `load`, `upgrade` and `unload` are pointers to functions. One of `load` or\n  `upgrade` is called to initialize the library. `unload` is called to release\n  the library. All are described individually below.\n\n  The fourth argument `NULL` is ignored. It was earlier used for the deprecated\n  `reload` callback which is no longer supported since OTP 20.\n\n  If compiling a NIF lib for static inclusion through `--enable-static-nifs`,\n  then the macro `STATIC_ERLANG_NIF_LIBNAME` must be defined as the name of the\n  archive file (excluding file extension .a) without string quotations. It must\n  only contain characters allowed in a C indentifier. The macro must be defined\n  before `erl_nif.h` is included. If the older macro `STATIC_ERLANG_NIF` is\n  instead used, then the name of the archive file must match the name of the\n  module.\n\n  Multiple static NIF libraries can be included in a single archive file by\n  specifying the respective `STATIC_ERLANG_NIF_LIBNAME` values in the configure\n  call separated by colons after the archive file name:\n\n  ```sh\n  ./confgure --enable-static-nifs=/path/to/archive.a:nif_lib1:nif_lib2\n  ```\n\n- __`int (*load)(ErlNifEnv* caller_env, void** priv_data, ERL_NIF_TERM load_info)`__ - \n  `load`{: #load } is called when the NIF library is loaded and no previously\n  loaded library exists for this module.\n\n  `*priv_data` can be set to point to some private data if the library needs to\n  keep a state between NIF calls. `enif_priv_data` returns this pointer.\n  `*priv_data` is initialized to `NULL` when `load` is called.\n\n  `load_info` is the second argument to `erlang:load_nif/2`.\n\n  The library fails to load if `load` returns anything other than `0`. `load`\n  can be `NULL` if initialization is not needed.\n\n- __`int (*upgrade)(ErlNifEnv* caller_env, void** priv_data, void** old_priv_data, ERL_NIF_TERM load_info)`__ - `upgrade`{: #upgrade } is called when the NIF library is loaded and there is\n  old code of this module with a loaded NIF library.\n\n  Works as `load`, except that `*old_priv_data` already contains the value set\n  by the last call to `load` or `upgrade` for the old module instance. `*priv_data`\n  is initialized to `NULL` when `upgrade` is called. It is allowed to write to\n  both `*priv_data` and `*old_priv_data.`\n\n  The library fails to load if `upgrade` returns anything other than `0` or if\n  `upgrade` is `NULL`.\n\n- **`void (*unload)(ErlNifEnv* caller_env, void* priv_data)`**{: #unload } -\n  `unload` is called when the module instance that the NIF library belongs to is\n  purged as old. New code of the same module may or may not exist.","ref":"erl_nif.html#initialization"},{"type":"extras","title":"Data Types - erl_nif","doc":"- **`ERL_NIF_TERM`**{: #ERL_NIF_TERM } - Variables of type `ERL_NIF_TERM` can\n  refer to any Erlang term. This is an opaque type and values of it can only by\n  used either as arguments to API functions or as return values from NIFs. All\n  `ERL_NIF_TERM`s belong to an environment\n  ([`ErlNifEnv`](erl_nif.md#ErlNifEnv)). A term cannot be destructed\n  individually, it is valid until its environment is destructed.\n\n- **`ErlNifEnv`**{: #ErlNifEnv } - `ErlNifEnv` represents an environment that\n  can host Erlang terms. All terms in an environment are valid as long as the\n  environment is valid. `ErlNifEnv` is an opaque type; pointers to it can only\n  be passed on to API functions. Three types of environments exist:\n\n  - **Process bound environment**{: #proc_bound_env }  \n    Passed as the first argument to all NIFs. All function arguments passed to a\n    NIF belong to that environment. The return value from a NIF must also be a\n    term belonging to the same environment.\n\n    A process bound environment contains transient information about the calling\n    Erlang process. The environment is only valid in the thread where it was\n    supplied as argument until the NIF returns. It is thus useless and dangerous\n    to store pointers to process bound environments between NIF calls.\n\n  - **Callback environment**{: #callback_env }  \n    Passed as the first argument to all the non-NIF callback functions\n    ([`load`](erl_nif.md#load), [`upgrade`](erl_nif.md#upgrade),\n    [`unload`](erl_nif.md#unload), [`dtor`](erl_nif.md#ErlNifResourceDtor),\n    [`down`](erl_nif.md#ErlNifResourceDown),\n    [`stop`](erl_nif.md#ErlNifResourceStop) and\n    [`dyncall`](erl_nif.md#ErlNifResourceDynCall)). Works like a process bound\n    environment but with a temporary pseudo process that \"terminates\" when the\n    callback has returned. Terms may be created in this environment but they\n    will only be accessible during the callback.\n\n  - **Process independent environment**{: #proc_indep_env }  \n    Created by calling [`enif_alloc_env`](erl_nif.md#enif_alloc_env). This\n    environment can be used to store terms between NIF calls and to send terms\n    with [`enif_send`](erl_nif.md#enif_send). A process independent environment\n    with all its terms is valid until you explicitly invalidate it with\n    [`enif_free_env`](erl_nif.md#enif_free_env) or `enif_send`.\n\n  All contained terms of a list/tuple/map must belong to the same environment as\n  the list/tuple/map itself. Terms can be copied between environments with\n  [`enif_make_copy`](erl_nif.md#enif_make_copy).\n\n- **`ErlNifFunc`**{: #ErlNifFunc }\n\n  ```c\n  typedef struct {\n      const char* name;\n      unsigned arity;\n      ERL_NIF_TERM (*fptr)(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]);\n      unsigned flags;\n  } ErlNifFunc;\n  ```\n\n  Describes a NIF by its name, arity, and implementation.\n\n  - **`fptr`** - A pointer to the function that implements the NIF.\n\n  - **`argv`** - Contains the function arguments passed to the NIF.\n\n  - **`argc`** - The array length, that is, the function arity. `argv[N-1]` thus\n    denotes the Nth argument to the NIF. Notice that the argument `argc` allows\n    for the same C function to implement several Erlang functions with different\n    arity (but probably with the same name).\n\n  - **`flags`** - Is `0` for a regular NIF (and so its value can be omitted for\n    statically initialized `ErlNifFunc` instances).\n\n    `flags` can be used to indicate that the NIF is a\n    [dirty NIF](erl_nif.md#dirty_nifs) that is to be executed on a dirty\n    scheduler thread.\n\n    If the dirty NIF is expected to be CPU-bound, its `flags` field is to be set\n    to `ERL_NIF_DIRTY_JOB_CPU_BOUND`. If it's expected to be I/O-bound set\n    `flags` to `ERL_NIF_DIRTY_JOB_IO_BOUND`.\n\n- **`ErlNifBinary`**{: #ErlNifBinary }\n\n  ```text\n  typedef struct {\n      size_t size;\n      unsigned char* data;\n  } ErlNifBinary;\n  ```\n\n  `ErlNifBinary` contains transient information about an inspected binary term.\n  `data` is a pointer to a buffer of `size` bytes with the raw content of the\n  binary.\n\n  Notice that `ErlNifBinary` is a semi-opaque type and you are only allowed to\n  read fields `size` and `data`.\n\n- **`ErlNifBinaryToTerm`**{: #ErlNifBinaryToTerm } - An enumeration of the\n  options that can be specified to\n  [`enif_binary_to_term`](erl_nif.md#enif_binary_to_term). For default behavior,\n  use value `0`.\n\n  When receiving data from untrusted sources, use option\n  `ERL_NIF_BIN2TERM_SAFE`.\n\n- **`ErlNifMonitor`**{: #ErlNifMonitor } - This is an opaque data type that\n  identifies a monitor.\n\n  The nif writer is to provide the memory for storing the monitor when calling\n  [`enif_monitor_process`](erl_nif.md#enif_monitor_process). The address of the\n  data is not stored by the runtime system, so `ErlNifMonitor` can be used as\n  any other data, it can be copied, moved in memory, forgotten, and so on. To\n  compare two monitors,\n  [`enif_compare_monitors`](erl_nif.md#enif_compare_monitors) must be used.\n\n- **`ErlNifOnHaltCallback`**{: #ErlNifOnHaltCallback }\n\n  ```text\n  typedef void ErlNifOnHaltCallback(void *priv_data);\n  ```\n\n  The function prototype of an _on halt_ callback function.\n\n  An _on halt_ callback can be installed using\n  [`enif_set_option()`](erl_nif.md#on_halt). Such an installed callback will be\n  called when the runtime system is halting.\n\n- **`ErlNifOnUnloadThreadCallback`**{: #ErlNifOnUnloadThreadCallback }\n\n  ```text\n  typedef void ErlNifOnUnloadThreadCallback(void *priv_data);\n  ```\n\n  The function prototype of an _on_unload_thread_ callback function.\n\n  An _on_unload_thread_ callback can be installed using\n  [`enif_set_option()`](erl_nif.md#on_unload_thread). Such an installed callback\n  will be called by each scheduler thread when this module instance is purged.\n\n- **`ErlNifOption`**{: #ErlNifOption } - An enumeration of the options that can\n  be set using [`enif_set_option()`](erl_nif.md#enif_set_option).\n\n  Currently valid options:\n\n  - **[`ERL_NIF_OPT_DELAY_HALT`](erl_nif.md#delay_halt)** - Enable delay of\n    runtime system halt with flushing enabled until all calls to NIFs in the NIF\n    library have returned.\n\n  - **[`ERL_NIF_OPT_ON_HALT`](erl_nif.md#on_halt)** - Install a callback that\n    will be called when the runtime system halts with flushing enabled.\n\n  - **[`ERL_NIF_OPT_ON_UNLOAD_THREAD`](erl_nif.md#on_unload_thread)** - Install a\n    callback that will be called **by each scheduler thread**\n    when the module instance that the NIF library belongs to is purged as old.\n\n- **`ErlNifPid`**{: #ErlNifPid } - A process identifier (pid). In contrast to\n  pid terms (instances of `ERL_NIF_TERM`), `ErlNifPid`s are self-contained and\n  not bound to any [environment](erl_nif.md#ErlNifEnv). `ErlNifPid` is an opaque\n  type. It can be copied, moved in memory, forgotten, and so on.\n\n- **`ErlNifPort`**{: #ErlNifPort } - A port identifier. In contrast to port ID\n  terms (instances of `ERL_NIF_TERM`), `ErlNifPort`s are self-contained and not\n  bound to any [environment](erl_nif.md#ErlNifEnv). `ErlNifPort` is an opaque\n  type. It can be copied, moved in memory, forgotten, and so on.\n\n- **`ErlNifResourceType`**{: #ErlNifResourceType } - Each instance of\n  `ErlNifResourceType` represents a class of memory-managed resource objects\n  that can be garbage collected. Each resource type has a unique name and a\n  destructor function that is called when objects of its type are released.\n\n- **`ErlNifResourceTypeInit`**{: #ErlNifResourceTypeInit }\n\n  ```c\n  typedef struct {\n      ErlNifResourceDtor* dtor;       // #1 Destructor\n      ErlNifResourceStop* stop;       // #2 Select stop\n      ErlNifResourceDown* down;       // #3 Monitor down\n      int members;\n      ErlNifResourceDynCall* dyncall; // #4 Dynamic call\n  } ErlNifResourceTypeInit;\n  ```\n\n  Initialization structure read by\n  [enif_open_resource_type_x](erl_nif.md#enif_open_resource_type_x) and\n  [enif_init_resource_type](erl_nif.md#enif_init_resource_type).\n\n- **`ErlNifResourceDtor`{: #ErlNifResourceDtor }**\n\n  ```text\n  typedef void ErlNifResourceDtor(ErlNifEnv* caller_env, void* obj);\n  ```\n\n  The function prototype of a resource destructor function.\n\n  The `obj` argument is a pointer to the resource. The only allowed use for the\n  resource in the destructor is to access its user data one final time. The\n  destructor is guaranteed to be the last callback before the resource is\n  deallocated.\n\n- **`ErlNifResourceDown`**{: #ErlNifResourceDown }\n\n  ```c\n  typedef void ErlNifResourceDown(ErlNifEnv* caller_env, void* obj, ErlNifPid* pid, ErlNifMonitor* mon);\n  ```\n\n  The function prototype of a resource down function, called on the behalf of\n  [enif_monitor_process](erl_nif.md#enif_monitor_process). `obj` is the\n  resource, `pid` is the identity of the monitored process that is exiting, and\n  `mon` is the identity of the monitor.\n\n- **`ErlNifResourceStop`**{: #ErlNifResourceStop }\n\n  ```text\n  typedef void ErlNifResourceStop(ErlNifEnv* caller_env, void* obj, ErlNifEvent event, int is_direct_call);\n  ```\n\n  The function prototype of a resource stop function, called on the behalf of\n  [enif_select](erl_nif.md#enif_select). `obj` is the resource, `event` is OS\n  event, `is_direct_call` is true if the call is made directly from\n  `enif_select` or false if it is a scheduled call (potentially from another\n  thread).\n\n- **`ErlNifResourceDynCall`**{: #ErlNifResourceDynCall }\n\n  ```c\n  typedef void ErlNifResourceDynCall(ErlNifEnv* caller_env, void* obj, void* call_data);\n  ```\n\n  The function prototype of a dynamic resource call function, called by\n  [enif_dynamic_resource_call](erl_nif.md#enif_dynamic_resource_call). Argument\n  `obj` is the resource object and `call_data` is the last argument to\n  `enif_dynamic_resource_call` passed through.\n\n- **`ErlNifCharEncoding`**{: #ErlNifCharEncoding }\n\n  ```text\n  typedef enum {\n      ERL_NIF_LATIN1,\n      ERL_NIF_UTF8,\n  }ErlNifCharEncoding;\n  ```\n\n  The character encoding used in strings and atoms. The only supported encodings\n  are `ERL_NIF_LATIN1` for ISO Latin-1 (8-bit ASCII) and `ERL_NIF_UTF8` for\n  UTF-8.\n\n- **`ErlNifSysInfo`**{: #ErlNifSysInfo } - Used by\n  [`enif_system_info`](erl_nif.md#enif_system_info) to return information about\n  the runtime system. Contains the same content as\n  [`ErlDrvSysInfo`](erl_driver.md#ErlDrvSysInfo).\n\n- **`ErlNifSInt64`**{: #ErlNifSInt64 } - A native signed 64-bit integer type.\n\n- **`ErlNifUInt64`**{: #ErlNifUInt64 } - A native unsigned 64-bit integer type.\n\n- **`ErlNifTime`**{: #ErlNifTime } - A signed 64-bit integer type for\n  representation of time.\n\n- **`ErlNifTimeUnit`**{: #ErlNifTimeUnit } - An enumeration of time units\n  supported by the NIF API:\n\n  - **`ERL_NIF_SEC`** - Seconds\n\n  - **`ERL_NIF_MSEC`** - Milliseconds\n\n  - **`ERL_NIF_USEC`** - Microseconds\n\n  - **`ERL_NIF_NSEC`** - Nanoseconds\n\n- **`ErlNifUniqueInteger`**{: #ErlNifUniqueInteger } - An enumeration of the\n  properties that can be requested from\n  [`enif_make_unique_integer`](erl_nif.md#enif_make_unique_integer). For default\n  properties, use value `0`.\n\n  - **`ERL_NIF_UNIQUE_POSITIVE`** - Return only positive integers.\n\n  - **`ERL_NIF_UNIQUE_MONOTONIC`** - Return only\n    [strictly monotonically increasing](time_correction.md#strictly-monotonically-increasing)\n    integer corresponding to creation time.\n\n- **`ErlNifHash`**{: #ErlNifHash } - An enumeration of the supported hash types\n  that can be generated using [`enif_hash`](erl_nif.md#enif_hash).\n\n  - **`ERL_NIF_INTERNAL_HASH`** - Non-portable hash function that only\n    guarantees the same hash for the same term within one Erlang VM instance.\n\n    It takes 32-bit salt values and generates hashes within `0..2^32-1`.\n\n  - **`ERL_NIF_PHASH2`** - Portable hash function that gives the same hash for\n    the same Erlang term regardless of machine architecture and ERTS version.\n\n    _It ignores salt values_ and generates hashes within `0..2^27-1`.\n\n    Slower than `ERL_NIF_INTERNAL_HASH.` It corresponds to `erlang:phash2/1`.\n\n- **`SysIOVec`**{: #SysIOVec } - A system I/O vector, as used by `writev` on\n  Unix and `WSASend` on Win32. It is used in `ErlNifIOVec` and by\n  [`enif_ioq_peek`](erl_nif.md#enif_ioq_peek).\n\n- **`ErlNifIOVec`**{: #ErlNifIOVec }\n\n  ```c\n  typedef struct {\n    int iovcnt;\n    size_t size;\n    SysIOVec* iov;\n  } ErlNifIOVec;\n  ```\n\n  An I/O vector containing `iovcnt` `SysIOVec`s pointing to the data. It is used\n  by [`enif_inspect_iovec`](erl_nif.md#enif_inspect_iovec) and\n  [`enif_ioq_enqv`](erl_nif.md#enif_ioq_enqv).\n\n- **`ErlNifIOQueueOpts`**{: #ErlNifIOQueueOpts } - Options to configure a\n  `ErlNifIOQueue`.\n  - **ERL_NIF_IOQ_NORMAL** - Create a normal I/O Queue","ref":"erl_nif.html#data-types"},{"type":"extras","title":"enif_alloc() - erl_nif","doc":"```c\nvoid * enif_alloc(\n        size_t size);\n```\n\nAllocates memory of `size` bytes.\n\nReturns `NULL` if the allocation fails.\n\nThe returned pointer is suitably aligned for any built-in type that fit in the\nallocated memory.","ref":"erl_nif.html#enif_alloc"},{"type":"extras","title":"enif_alloc_binary() - erl_nif","doc":"```c\nint enif_alloc_binary(\n        size_t size,\n        ErlNifBinary* bin);\n```\n\nAllocates a new binary of size `size` bytes. Initializes the structure pointed\nto by `bin` to refer to the allocated binary. The binary must either be released\nby [`enif_release_binary`](erl_nif.md#enif_release_binary) or ownership\ntransferred to an Erlang term with\n[`enif_make_binary`](erl_nif.md#enif_make_binary). An allocated (and owned)\n`ErlNifBinary` can be kept between NIF calls.\n\nIf you do not need to reallocate or keep the data alive across NIF calls,\nconsider using [`enif_make_new_binary`](erl_nif.md#enif_make_new_binary) instead\nas it will allocate small binaries on the process heap when possible.\n\nReturns `true` on success, or `false` if allocation fails.","ref":"erl_nif.html#enif_alloc_binary"},{"type":"extras","title":"enif_alloc_env() - erl_nif","doc":"```c\nErlNifEnv * enif_alloc_env();\n```\n\nAllocates a new [process independent environment](erl_nif.md#proc_indep_env).\nThe environment can be used to hold terms that are not bound to any process.\nSuch terms can later be copied to a process environment with\n[`enif_make_copy`](erl_nif.md#enif_make_copy) or be sent to a process as a\nmessage with [`enif_send`](erl_nif.md#enif_send).\n\nReturns pointer to the new environment.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_alloc_env"},{"type":"extras","title":"enif_alloc_resource() - erl_nif","doc":"```c\nvoid * enif_alloc_resource(\n        ErlNifResourceType* type,\n        unsigned size);\n```\n\nAllocates a memory-managed resource object of type `type` and size `size` bytes.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_alloc_resource"},{"type":"extras","title":"enif_binary_to_term() - erl_nif","doc":"```c\nsize_t enif_binary_to_term(\n        ErlNifEnv *env,\n        const unsigned char* data,\n        size_t size,\n        ERL_NIF_TERM *term,\n        unsigned int opts);\n```\n\nCreates a term that is the result of decoding the binary data at `data`, which\nmust be encoded according to the Erlang external term format. No more than\n`size` bytes are read from `data`. Argument `opts` corresponds to the second\nargument to `erlang:binary_to_term/2` and must be either `0` or\n`ERL_NIF_BIN2TERM_SAFE`.\n\nOn success, stores the resulting term at `*term` and returns the number of bytes\nread. Returns `0` if decoding fails or if `opts` is invalid.\n\nSee also [`ErlNifBinaryToTerm`](erl_nif.md#ErlNifBinaryToTerm),\n`erlang:binary_to_term/2`, and\n[`enif_term_to_binary`](erl_nif.md#enif_term_to_binary).\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_binary_to_term"},{"type":"extras","title":"enif_clear_env() - erl_nif","doc":"```c\nvoid enif_clear_env(ErlNifEnv* env);\n```\n\nFrees all terms in an environment and clears it for reuse. The environment must\nhave been allocated with [`enif_alloc_env`](erl_nif.md#enif_alloc_env).\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_clear_env"},{"type":"extras","title":"enif_compare() - erl_nif","doc":"```c\nint enif_compare(\n        ERL_NIF_TERM lhs,\n        ERL_NIF_TERM rhs);\n```\n\nReturns an integer < `0` if `lhs` < `rhs`, `0` if `lhs` = `rhs`, and > `0` if\n`lhs` > `rhs`. Corresponds to the Erlang operators `==`, `/=`, `=<`, `<`, `>=`,\nand `>` (but _not_ `=:=` or `=/=`).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_compare"},{"type":"extras","title":"enif_compare_monitors() - erl_nif","doc":"```c\nint enif_compare_monitors(\n        const ErlNifMonitor *monitor1,\n        const ErlNifMonitor *monitor2);\n```\n\nCompares two [`ErlNifMonitor`](erl_nif.md#ErlNifMonitor)s. Can also be used to\nimply some artificial order on monitors, for whatever reason.\n\nReturns `0` if `monitor1` and `monitor2` are equal, < `0` if `monitor1` <\n`monitor2`, and > `0` if `monitor1` > `monitor2`.\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_compare_monitors"},{"type":"extras","title":"enif_compare_pids() - erl_nif","doc":"```c\nint enif_compare_pids(\n        const ErlNifPid *pid1,\n        const ErlNifPid *pid2);\n```\n\nCompares two [`ErlNifPid` ](erl_nif.md#ErlNifPid)s according to term order.\n\nReturns `0` if `pid1` and `pid2` are equal, < `0` if `pid1` < `pid2`, and > `0`\nif `pid1` > `pid2`.\n\nAvailable since OTP 22.0","ref":"erl_nif.html#enif_compare_pids"},{"type":"extras","title":"enif_cond_broadcast() - erl_nif","doc":"```c\nvoid enif_cond_broadcast(\n        ErlNifCond *cnd);\n```\n\nSame as [`erl_drv_cond_broadcast`](erl_driver.md#erl_drv_cond_broadcast).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_cond_broadcast"},{"type":"extras","title":"enif_cond_create() - erl_nif","doc":"```c\nErlNifCond * enif_cond_create(\n        char *name);\n```\n\nSame as [`erl_drv_cond_create`](erl_driver.md#erl_drv_cond_create).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_cond_create"},{"type":"extras","title":"enif_cond_destroy() - erl_nif","doc":"```c\nvoid enif_cond_destroy(\n        ErlNifCond *cnd);\n```\n\nSame as [`erl_drv_cond_destroy`](erl_driver.md#erl_drv_cond_destroy).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_cond_destroy"},{"type":"extras","title":"enif_cond_name() - erl_nif","doc":"```c\nchar* enif_cond_name(\n        ErlNifCond* cnd);\n```\n\nSame as [`erl_drv_cond_name`](erl_driver.md#erl_drv_cond_name).\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_cond_name"},{"type":"extras","title":"enif_cond_signal() - erl_nif","doc":"```c\nvoid enif_cond_signal(\n        ErlNifCond *cnd);\n```\n\nSame as [`erl_drv_cond_signal`](erl_driver.md#erl_drv_cond_signal).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_cond_signal"},{"type":"extras","title":"enif_cond_wait() - erl_nif","doc":"```c\nvoid enif_cond_wait(\n        ErlNifCond *cnd,\n        ErlNifMutex *mtx);\n```\n\nSame as [`erl_drv_cond_wait`](erl_driver.md#erl_drv_cond_wait).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_cond_wait"},{"type":"extras","title":"enif_consume_timeslice() - erl_nif","doc":"```c\nint enif_consume_timeslice(\n        ErlNifEnv *env,\n        int percent);\n```\n\nGives the runtime system a hint about how much CPU time the current NIF call has\nconsumed since the last hint, or since the start of the NIF if no previous hint\nhas been specified. The time is specified as a percent of the timeslice that a\nprocess is allowed to execute Erlang code until it can be suspended to give time\nfor other runnable processes. The scheduling timeslice is not an exact entity,\nbut can usually be approximated to about 1 millisecond.\n\nNotice that it is up to the runtime system to determine if and how to use this\ninformation. Implementations on some platforms can use other means to determine\nconsumed CPU time. Lengthy NIFs should regardless of this frequently call\n`enif_consume_timeslice` to determine if it is allowed to continue execution.\n\nArgument `percent` must be an integer between 1 and 100. This function must only\nbe called from a NIF-calling thread, and argument `env` must be the environment\nof the calling process.\n\nReturns `1` if the timeslice is exhausted, otherwise `0`. If `1` is returned,\nthe NIF is to return as soon as possible in order for the process to yield.\n\nThis function is provided to better support co-operative scheduling, improve\nsystem responsiveness, and make it easier to prevent misbehaviors of the VM\nbecause of a NIF monopolizing a scheduler thread. It can be used to divide\n[length work](erl_nif.md#lengthy_work) into a number of repeated NIF calls\nwithout the need to create threads.\n\nSee also the [warning](erl_nif.md#WARNING) text at the beginning of this manual\npage.\n\nAvailable since OTP R16B","ref":"erl_nif.html#enif_consume_timeslice"},{"type":"extras","title":"enif_convert_time_unit() - erl_nif","doc":"```c\nErlNifTime enif_convert_time_unit(\n        ErlNifTime val,\n        ErlNifTimeUnit from,\n        ErlNifTimeUnit to);\n```\n\nConverts the `val` value of time unit `from` to the corresponding value of time\nunit `to`. The result is rounded using the floor function.\n\n- **`val`** - Value to convert time unit for.\n\n- **`from`** - Time unit of `val`.\n\n- **`to`** - Time unit of returned value.\n\nReturns `ERL_NIF_TIME_ERROR` if called with an invalid time unit argument.\n\nSee also [`ErlNifTime`](erl_nif.md#ErlNifTime) and\n[`ErlNifTimeUnit`](erl_nif.md#ErlNifTimeUnit).\n\nAvailable since OTP 18.3","ref":"erl_nif.html#enif_convert_time_unit"},{"type":"extras","title":"enif_cpu_time() - erl_nif","doc":"```c\nERL_NIF_TERM enif_cpu_time(\n        ErlNifEnv *env);\n```\n\nReturns the CPU time in the same format as\n[`erlang:timestamp()`](`erlang:timestamp/0`). The CPU time is the time the\ncurrent logical CPU has spent executing since some arbitrary point in the past.\nIf the OS does not support fetching this value, `enif_cpu_time` invokes\n[`enif_make_badarg`](erl_nif.md#enif_make_badarg).\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_cpu_time"},{"type":"extras","title":"enif_demonitor_process() - erl_nif","doc":"```c\nint enif_demonitor_process(\n        ErlNifEnv* caller_env,\n        void* obj,\n        const ErlNifMonitor* mon);\n```\n\nCancels a monitor created earlier with\n[`enif_monitor_process`](erl_nif.md#enif_monitor_process). Argument `obj` is a\npointer to the resource holding the monitor and `*mon` identifies the monitor.\n\nArgument `caller_env` is the environment of the calling thread\n([process bound](erl_nif.md#proc_bound_env) or\n[callback](erl_nif.md#callback_env) environment) or `NULL` if calling from a\ncustom thread not spawned by ERTS.\n\nReturns `0` if the monitor was successfully identified and removed. Returns a\nnon-zero value if the monitor could not be identified, which means it was either\n\n- never created for this resource\n- already cancelled\n- already triggered\n- just about to be triggered by a concurrent thread\n\nThis function is thread-safe.\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_demonitor_process"},{"type":"extras","title":"enif_dynamic_resource_call() - erl_nif","doc":"```c\nint enif_dynamic_resource_call(\n        ErlNifEnv* caller_env,\n        ERL_NIF_TERM rt_module,\n        ERL_NIF_TERM rt_name,\n        ERL_NIF_TERM resource,\n        void* call_data);\n```\n\nCall code of a resource type implemented by another NIF module. The atoms\n`rt_module` and `rt_name` identifies the resource type to be called. Argument\n`resource` identifies a resource object of that type.\n\nThe callback [`dyncall`](erl_nif.md#ErlNifResourceDynCall) of the identified\nresource type will be called with a pointer to the resource objects `obj` and\nthe argument `call_data` passed through. The `call_data` argument is typically a\npointer to a struct used to passed both arguments to the `dyncall` function as\nwell as results back to the caller.\n\nReturns 0 if the `dyncall` callback function was called. Returns a non-zero\nvalue if no call was made, which happens if `rt_module` and `rt_name` did not\nidentify a resource type with a `dyncall` callback or if `resource` was not a\nresource object of that type.\n\nAvailable since OTP 24.0","ref":"erl_nif.html#enif_dynamic_resource_call"},{"type":"extras","title":"enif_equal_tids() - erl_nif","doc":"```c\nint enif_equal_tids(\n        ErlNifTid tid1,\n        ErlNifTid tid2);\n```\n\nSame as [`erl_drv_equal_tids`](erl_driver.md#erl_drv_equal_tids).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_equal_tids"},{"type":"extras","title":"enif_fprintf() - erl_nif","doc":"```c\nint enif_fprintf(\n        FILE *stream,\n        const char *format,\n        ...);\n```\n\nSimilar to `fprintf` but this format string also accepts `\"%T\"`, which formats\nErlang terms of type [`ERL_NIF_TERM`](erl_nif.md#ERL_NIF_TERM).\n\nThis function is primarily intended for debugging purpose. It is not recommended\nto print very large terms with `%T`. The function may change `errno`, even if\nsuccessful.\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_fprintf"},{"type":"extras","title":"enif_free() - erl_nif","doc":"```c\nvoid enif_free(\n        void* ptr);\n```\n\nFrees memory allocated by [`enif_alloc`](erl_nif.md#enif_alloc).","ref":"erl_nif.html#enif_free"},{"type":"extras","title":"enif_free_env() - erl_nif","doc":"```c\nvoid enif_free_env(\n        ErlNifEnv* env);\n```\n\nFrees an environment allocated with\n[`enif_alloc_env`](erl_nif.md#enif_alloc_env). All terms created in the\nenvironment are freed as well.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_free_env"},{"type":"extras","title":"enif_free_iovec() - erl_nif","doc":"```c\nvoid enif_free_iovec(\n        ErlNifIOVec* iov);\n```\n\nFrees an io vector returned from\n[`enif_inspect_iovec`](erl_nif.md#enif_inspect_iovec). This is needed only if a\n`NULL` environment is passed to\n[`enif_inspect_iovec`](erl_nif.md#enif_inspect_iovec).\n\n```c\nErlNifIOVec *iovec = NULL;\nsize_t max_elements = 128;\nERL_NIF_TERM tail;\nif (!enif_inspect_iovec(NULL, max_elements, term, &tail, &iovec))\n  return 0;\n\n// Do things with the iovec\n\n/* Free the iovector, possibly in another thread or nif function call */\nenif_free_iovec(iovec);\n```\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_free_iovec"},{"type":"extras","title":"enif_get_atom() - erl_nif","doc":"```c\nint enif_get_atom(\n        ErlNifEnv *env,\n        ERL_NIF_TERM term,\n        char *buf,\n        unsigned size,\n        ErlNifCharEncoding encoding);\n```\n\nWrites a `NULL`\\-terminated string in the buffer pointed to by `buf` of size\n`size` bytes, consisting of the string representation of the atom `term` with\n[encoding](erl_nif.md#ErlNifCharEncoding).\n\nReturns the number of bytes written (including terminating `NULL` character) or\n`0` if `term` is not an atom with maximum length of `size-1` bytes in\n`encoding`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_get_atom"},{"type":"extras","title":"enif_get_atom_length() - erl_nif","doc":"```c\nint enif_get_atom_length(\n        ErlNifEnv *env,\n        ERL_NIF_TERM term,\n        unsigned *len,\n        ErlNifCharEncoding encoding);\n```\n\nSets `*len` to the length (number of bytes excluding terminating `NULL`\ncharacter) of the atom `term` with [encoding](erl_nif.md#ErlNifCharEncoding).\n\nReturns `true` on success, or `false` if `term` is not an atom or if the atom\ncannot be encoded using `encoding`.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_get_atom_length"},{"type":"extras","title":"enif_get_double() - erl_nif","doc":"```c\nint enif_get_double(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        double* dp);\n```\n\nSets `*dp` to the floating-point value of `term`.\n\nReturns `true` on success, or `false` if `term` is not a float.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_get_double"},{"type":"extras","title":"enif_get_int() - erl_nif","doc":"```c\nint enif_get_int(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        int* ip);\n```\n\nSets `*ip` to the integer value of `term`.\n\nReturns `true` on success, or `false` if `term` is not an integer or is outside\nthe bounds of type `int`.","ref":"erl_nif.html#enif_get_int"},{"type":"extras","title":"enif_get_int64() - erl_nif","doc":"```c\nint enif_get_int64(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        ErlNifSInt64* ip);\n```\n\nSets `*ip` to the integer value of `term`.\n\nReturns `true` on success, or `false` if `term` is not an integer or is outside\nthe bounds of a signed 64-bit integer.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_get_int64"},{"type":"extras","title":"enif_get_local_pid() - erl_nif","doc":"```c\nint enif_get_local_pid(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        ErlNifPid* pid);\n```\n\nIf `term` is the pid of a node local process, this function initializes the pid\nvariable `*pid` from it and returns `true`. Otherwise returns `false`. No check\nis done to see if the process is alive.\n\n> #### Note {: .info }\n>\n> `enif_get_local_pid` will return false if argument `term` is the atom\n> [`undefined`](erl_nif.md#enif_make_pid).\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_get_local_pid"},{"type":"extras","title":"enif_get_local_port() - erl_nif","doc":"```c\nint enif_get_local_port(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        ErlNifPort* port_id);\n```\n\nIf `term` identifies a node local port, this function initializes the port\nvariable `*port_id` from it and returns `true`. Otherwise returns `false`. No\ncheck is done to see if the port is alive.\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_get_local_port"},{"type":"extras","title":"enif_get_list_cell() - erl_nif","doc":"```c\nint enif_get_list_cell(\n        ErlNifEnv* env,\n        ERL_NIF_TERM list,\n        ERL_NIF_TERM* head,\n        ERL_NIF_TERM* tail);\n```\n\nSets `*head` and `*tail` from list `list`.\n\nReturns `true` on success, or `false` if it is not a list or the list is empty.","ref":"erl_nif.html#enif_get_list_cell"},{"type":"extras","title":"enif_get_list_length() - erl_nif","doc":"```c\nint enif_get_list_length(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        unsigned* len);\n```\n\nSets `*len` to the length of list `term`.\n\nReturns `true` on success, or `false` if `term` is not a proper list.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_get_list_length"},{"type":"extras","title":"enif_get_long() - erl_nif","doc":"```c\nint enif_get_long(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        long int* ip);\n```\n\nSets `*ip` to the long integer value of `term`.\n\nReturns `true` on success, or `false` if `term` is not an integer or is outside\nthe bounds of type `long int`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_get_long"},{"type":"extras","title":"enif_get_map_size() - erl_nif","doc":"```c\nint enif_get_map_size(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        size_t *size);\n```\n\nSets `*size` to the number of key-value pairs in the map `term`.\n\nReturns `true` on success, or `false` if `term` is not a map.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_get_map_size"},{"type":"extras","title":"enif_get_map_value() - erl_nif","doc":"```c\nint enif_get_map_value(\n        ErlNifEnv* env,\n        ERL_NIF_TERM map,\n        ERL_NIF_TERM key,\n        ERL_NIF_TERM* value);\n```\n\nSets `*value` to the value associated with `key` in the map `map`.\n\nReturns `true` on success, or `false` if `map` is not a map or if `map` does not\ncontain `key`.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_get_map_value"},{"type":"extras","title":"enif_get_resource() - erl_nif","doc":"```c\nint enif_get_resource(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        ErlNifResourceType* type,\n        void** objp);\n```\n\nSets `*objp` to point to the resource object referred to by `term`.\n\nReturns `true` on success, or `false` if `term` is not a handle to a resource\nobject of type `type`.\n\n`enif_get_resource` does not add a reference to the resource object. However,\nthe pointer received in `*objp` is guaranteed to be valid at least as long as\nthe resource handle `term` is valid.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_get_resource"},{"type":"extras","title":"enif_get_string() - erl_nif","doc":"```c\nint enif_get_string(\n        ErlNifEnv* env,\n        ERL_NIF_TERM list,\n        char* buf,\n        unsigned size,\n        ErlNifCharEncoding encoding);\n```\n\nWrites a `NULL`\\-terminated string in the buffer pointed to by `buf` with size\n`size`, consisting of the characters in the string `list`. The characters are\nwritten using [encoding](erl_nif.md#ErlNifCharEncoding).\n\nReturns one of the following:\n\n- The number of bytes written (including terminating `NULL` character)\n- `-size` if the string was truncated because of buffer space\n- `0` if `list` is not a string that can be encoded with `encoding` or if `size`\n  was < `1`.\n\nThe written string is always `NULL`\\-terminated, unless buffer `size` is < `1`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_get_string"},{"type":"extras","title":"enif_get_string_length() - erl_nif","doc":"```c\nint enif_get_string_length(\n        ErlNifEnv *env,\n        ERL_NIF_TERM list,\n        unsigned *len,\n        ErlNifCharEncoding encoding);\n```\n\nSets `*len` to the length (number of bytes excluding terminating `NULL`\ncharacter) of the string `list` with [encoding](erl_nif.md#ErlNifCharEncoding).\n\nReturns `true` on success, or `false` if `list` is not a string that can be\nencoded with `encoding`.\n\nAvailable since OTP 26.0","ref":"erl_nif.html#enif_get_string_length"},{"type":"extras","title":"enif_get_tuple() - erl_nif","doc":"```c\nint enif_get_tuple(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        int* arity,\n        const ERL_NIF_TERM** array);\n```\n\nIf `term` is a tuple, this function sets `*array` to point to an array\ncontaining the elements of the tuple, and sets `*arity` to the number of\nelements. Notice that the array is read-only and `(*array)[N-1]` is the Nth\nelement of the tuple. `*array` is undefined if the arity of the tuple is zero.\n\nReturns `true` on success, or `false` if `term` is not a tuple.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_get_tuple"},{"type":"extras","title":"enif_get_uint() - erl_nif","doc":"```c\nint enif_get_uint(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        unsigned int* ip);\n```\n\nSets `*ip` to the unsigned integer value of `term`.\n\nReturns `true` on success, or `false` if `term` is not an unsigned integer or is\noutside the bounds of type `unsigned int`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_get_uint"},{"type":"extras","title":"enif_get_uint64() - erl_nif","doc":"```c\nint enif_get_uint64(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        ErlNifUInt64* ip);\n```\n\nSets `*ip` to the unsigned integer value of `term`.\n\nReturns `true` on success, or `false` if `term` is not an unsigned integer or is\noutside the bounds of an unsigned 64-bit integer.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_get_uint64"},{"type":"extras","title":"enif_get_ulong() - erl_nif","doc":"```c\nint enif_get_ulong(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        unsigned long* ip);\n```\n\nSets `*ip` to the unsigned long integer value of `term`.\n\nReturns `true` on success, or `false` if `term` is not an unsigned integer or is\noutside the bounds of type `unsigned long`.","ref":"erl_nif.html#enif_get_ulong"},{"type":"extras","title":"enif_getenv() - erl_nif","doc":"```c\nint enif_getenv(\n        const char* key,\n        char* value,\n        size_t *value_size);\n```\n\nSame as [`erl_drv_getenv`](erl_driver.md#erl_drv_getenv).\n\nAvailable since OTP 18.2","ref":"erl_nif.html#enif_getenv"},{"type":"extras","title":"enif_has_pending_exception() - erl_nif","doc":"```c\nint enif_has_pending_exception(\n        ErlNifEnv* env,\n        ERL_NIF_TERM* reason);\n```\n\nReturns `true` if a pending exception is associated with the environment `env`.\nIf `reason` is a `NULL` pointer, ignore it. Otherwise, if a pending exception\nassociated with `env` exists, set `*reason` to the value of the exception term.\nFor example, if [`enif_make_badarg`](erl_nif.md#enif_make_badarg) is called to\nset a pending `badarg` exception, a later call to\n`enif_has_pending_exception(env, &reason)` sets `*reason` to the atom `badarg`,\nthen return `true`.\n\nSee also [`enif_make_badarg`](erl_nif.md#enif_make_badarg) and\n[`enif_raise_exception`](erl_nif.md#enif_raise_exception).\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_has_pending_exception"},{"type":"extras","title":"enif_hash() - erl_nif","doc":"```c\nErlNifUInt64 enif_hash(\n        ErlNifHash type,\n        ERL_NIF_TERM term,\n        ErlNifUInt64 salt);\n```\n\nHashes `term` according to the specified [`ErlNifHash`](erl_nif.md#ErlNifHash)\n`type`.\n\nRanges of taken salt (if any) and returned value depend on the hash type.\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_hash"},{"type":"extras","title":"enif_inspect_binary() - erl_nif","doc":"```c\nint enif_inspect_binary(\n        ErlNifEnv* env,\n        ERL_NIF_TERM bin_term,\n        ErlNifBinary* bin);\n```\n\nInitializes the structure pointed to by `bin` with information about binary term\n`bin_term`.\n\nReturns `true` on success, or `false` if `bin_term` is not a binary.","ref":"erl_nif.html#enif_inspect_binary"},{"type":"extras","title":"enif_inspect_iolist_as_binary() - erl_nif","doc":"```c\nint enif_inspect_iolist_as_binary(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term,\n        ErlNifBinary* bin);\n```\n\nInitializes the structure pointed to by `bin` with a continuous buffer with the\nsame byte content as `iolist`. As with `inspect_binary`, the data pointed to by\n`bin` is transient and does not need to be released.\n\nReturns `true` on success, or `false` if `iolist` is not an iolist.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_inspect_iolist_as_binary"},{"type":"extras","title":"enif_inspect_iovec() - erl_nif","doc":"```c\nint enif_inspect_iovec(\n        ErlNifEnv* env,\n        size_t max_elements,\n        ERL_NIF_TERM iovec_term,\n        ERL_NIF_TERM* tail,\n        ErlNifIOVec** iovec);\n```\n\nFills `iovec` with the list of binaries provided in `iovec_term`. The number of\nelements handled in the call is limited to `max_elements`, and `tail` is set to\nthe remainder of the list. Note that the output may be longer than\n`max_elements` on some platforms.\n\nTo create a list of binaries from an arbitrary iolist, use\n`erlang:iolist_to_iovec/1`.\n\nWhen calling this function, `iovec` should contain a pointer to `NULL` or a\nErlNifIOVec structure that should be used if possible. e.g.\n\n```c\n/* Don't use a pre-allocated structure */\nErlNifIOVec *iovec = NULL;\nenif_inspect_iovec(env, max_elements, term, &tail, &iovec);\n\n/* Use a stack-allocated vector as an optimization for vectors with few elements */\nErlNifIOVec vec, *iovec = &vec;\nenif_inspect_iovec(env, max_elements, term, &tail, &iovec);\n```\n\nThe contents of the `iovec` is valid until the called nif function returns. If\nthe `iovec` should be valid after the nif call returns, it is possible to call\nthis function with a `NULL` environment. If no environment is given the `iovec`\nowns the data in the vector and it has to be explicitly freed using\n[`enif_free_iovec` ](erl_nif.md#enif_free_iovec).\n\nReturns `true` on success, or `false` if `iovec_term` not an iovec.\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_inspect_iovec"},{"type":"extras","title":"enif_ioq_create() - erl_nif","doc":"```c\nErlNifIOQueue * enif_ioq_create(\n        ErlNifIOQueueOpts opts);\n```\n\nCreate a new I/O Queue that can be used to store data. `opts` has to be set to\n`ERL_NIF_IOQ_NORMAL`.\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_ioq_create"},{"type":"extras","title":"enif_ioq_destroy() - erl_nif","doc":"```c\nvoid enif_ioq_destroy(\n        ErlNifIOQueue *q);\n```\n\nDestroy the I/O queue and free all of it's contents\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_ioq_destroy"},{"type":"extras","title":"enif_ioq_deq() - erl_nif","doc":"```c\nint enif_ioq_deq(\n        ErlNifIOQueue *q,\n        size_t count,\n        size_t *size);\n```\n\nDequeue `count` bytes from the I/O queue. If `size` is not `NULL`, the new size\nof the queue is placed there.\n\nReturns `true` on success, or `false` if the I/O does not contain `count` bytes.\nOn failure the queue is left un-altered.\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_ioq_deq"},{"type":"extras","title":"enif_ioq_enq_binary() - erl_nif","doc":"```c\nint enif_ioq_enq_binary(\n        ErlNifIOQueue *q,\n        ErlNifBinary *bin,\n        size_t skip);\n```\n\nEnqueue the `bin` into `q` skipping the first `skip` bytes.\n\nReturns `true` on success, or `false` if `skip` is greater than the size of\n`bin`. Any ownership of the binary data is transferred to the queue and `bin` is\nto be considered read-only for the rest of the NIF call and then as released.\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_ioq_enq_binary"},{"type":"extras","title":"enif_ioq_enqv() - erl_nif","doc":"```c\nint enif_ioq_enqv(\n        ErlNifIOQueue *q,\n        ErlNifIOVec *iovec,\n        size_t skip);\n```\n\nEnqueue the `iovec` into `q` skipping the first `skip` bytes.\n\nReturns `true` on success, or `false` if `skip` is greater than the size of\n`iovec`.\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_ioq_enqv"},{"type":"extras","title":"enif_ioq_peek() - erl_nif","doc":"```c\nSysIOVec * enif_ioq_peek(\n        ErlNifIOQueue *q,\n        int *iovlen);\n```\n\nGet the I/O queue as a pointer to an array of `SysIOVec`s. It also returns the\nnumber of elements in `iovlen`.\n\nNothing is removed from the queue by this function, that must be done with\n[`enif_ioq_deq`](erl_nif.md#enif_ioq_deq).\n\nThe returned array is suitable to use with the Unix system call `writev`.\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_ioq_peek"},{"type":"extras","title":"enif_ioq_peek_head() - erl_nif","doc":"```c\nint enif_ioq_peek_head(\n        ErlNifEnv *env,\n        ErlNifIOQueue *q,\n        size_t *size,\n        ERL_NIF_TERM *bin_term);\n```\n\nGet the head of the IO Queue as a binary term.\n\nIf `size` is not `NULL`, the size of the head is placed there.\n\nNothing is removed from the queue by this function, that must be done with\n[`enif_ioq_deq`](erl_nif.md#enif_ioq_deq).\n\nReturns `true` on success, or `false` if the queue is empty.\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_ioq_peek_head"},{"type":"extras","title":"enif_ioq_size() - erl_nif","doc":"```c\nsize_t enif_ioq_size(\n        ErlNifIOQueue *q);\n```\n\nGet the size of `q`.\n\nAvailable since OTP 20.1","ref":"erl_nif.html#enif_ioq_size"},{"type":"extras","title":"enif_is_atom() - erl_nif","doc":"```c\nint enif_is_atom(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is an atom.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_is_atom"},{"type":"extras","title":"enif_is_binary() - erl_nif","doc":"```c\nint enif_is_binary(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a binary.","ref":"erl_nif.html#enif_is_binary"},{"type":"extras","title":"enif_is_current_process_alive() - erl_nif","doc":"```c\nint enif_is_current_process_alive(\n        ErlNifEnv* env);\n```\n\nReturns `true` if the currently executing process is currently alive, otherwise\n`false`.\n\nThis function can only be used from a NIF-calling thread, and with an\nenvironment corresponding to currently executing processes.\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_is_current_process_alive"},{"type":"extras","title":"enif_is_empty_list() - erl_nif","doc":"```c\nint enif_is_empty_list(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is an empty list.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_is_empty_list"},{"type":"extras","title":"enif_is_exception() - erl_nif","doc":"```c\nint enif_is_exception(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturn true if `term` is an exception.\n\nAvailable since OTP R14B03","ref":"erl_nif.html#enif_is_exception"},{"type":"extras","title":"enif_is_fun() - erl_nif","doc":"```c\nint enif_is_fun(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a fun.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_is_fun"},{"type":"extras","title":"enif_is_identical() - erl_nif","doc":"```c\nint enif_is_identical(\n        ERL_NIF_TERM lhs,\n        ERL_NIF_TERM rhs);\n```\n\nReturns `true` if the two terms are identical. Corresponds to the Erlang\noperators `=:=` and `=/=`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_is_identical"},{"type":"extras","title":"enif_is_list() - erl_nif","doc":"```c\nint enif_is_list(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a list.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_is_list"},{"type":"extras","title":"enif_is_map() - erl_nif","doc":"```c\nint enif_is_map(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a map, otherwise `false`.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_is_map"},{"type":"extras","title":"enif_is_number() - erl_nif","doc":"```c\nint enif_is_number(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a number.\n\nAvailable since OTP R15B","ref":"erl_nif.html#enif_is_number"},{"type":"extras","title":"enif_is_pid() - erl_nif","doc":"```c\nint enif_is_pid(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a pid.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_is_pid"},{"type":"extras","title":"enif_is_pid_undefined() - erl_nif","doc":"```c\nint enif_is_pid_undefined(\n        const ErlNifPid* pid);\n```\n\nReturns `true` if `pid` has been set as undefined by\n[`enif_set_pid_undefined` ](erl_nif.md#enif_set_pid_undefined).\n\nAvailable since OTP 22.0","ref":"erl_nif.html#enif_is_pid_undefined"},{"type":"extras","title":"enif_is_port() - erl_nif","doc":"```c\nint enif_is_port(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a port.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_is_port"},{"type":"extras","title":"enif_is_port_alive() - erl_nif","doc":"```c\nint enif_is_port_alive(\n        ErlNifEnv* env,\n        ErlNifPort *port_id);\n```\n\nReturns `true` if `port_id` is alive.\n\nThis function is thread-safe.\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_is_port_alive"},{"type":"extras","title":"enif_is_process_alive() - erl_nif","doc":"```c\nint enif_is_process_alive(\n        ErlNifEnv* env,\n        ErlNifPid *pid);\n```\n\nReturns `true` if `pid` is alive.\n\nThis function is thread-safe.\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_is_process_alive"},{"type":"extras","title":"enif_is_ref() - erl_nif","doc":"```c\nint enif_is_ref(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a reference.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_is_ref"},{"type":"extras","title":"enif_is_tuple() - erl_nif","doc":"```c\nint enif_is_tuple(\n        ErlNifEnv* env,\n        ERL_NIF_TERM term);\n```\n\nReturns `true` if `term` is a tuple.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_is_tuple"},{"type":"extras","title":"enif_keep_resource() - erl_nif","doc":"```c\nint enif_keep_resource(\n        void* obj);\n```\n\nAdds a reference to resource object `obj` obtained from\n[`enif_alloc_resource`](erl_nif.md#enif_alloc_resource). Each call to\n`enif_keep_resource` for an object must be balanced by a call to\n[`enif_release_resource`](erl_nif.md#enif_release_resource) before the object is\ndestructed.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_keep_resource"},{"type":"extras","title":"enif_make_atom() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_atom(\n        ErlNifEnv *env,\n        const char *name);\n```\n\nCreates an atom term from the `NULL`\\-terminated C-string `name` with ISO\nLatin-1 encoding. If the length of `name` exceeds the maximum length allowed for\nan atom (255 characters), `enif_make_atom` invokes\n[`enif_make_badarg`](erl_nif.md#enif_make_badarg).","ref":"erl_nif.html#enif_make_atom"},{"type":"extras","title":"enif_make_atom_len() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_atom_len(\n        ErlNifEnv *env,\n        const char *name,\n        size_t len);\n```\n\nCreate an atom term from the string `name` with length `len` and ISO Latin-1\nencoding. `NULL` characters are treated as any other characters. If `len`\nexceeds the maximum length allowed for an atom (255 characters),\n`enif_make_atom` invokes [`enif_make_badarg` ](erl_nif.md#enif_make_badarg).\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_atom_len"},{"type":"extras","title":"enif_make_badarg() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_badarg(\n        ErlNifEnv* env);\n```\n\nMakes a `badarg` exception to be returned from a NIF, and associates it with\nenvironment `env`. Once a NIF or any function it calls invokes\n`enif_make_badarg`, the runtime ensures that a `badarg` exception is raised when\nthe NIF returns, even if the NIF attempts to return a non-exception term\ninstead.\n\nThe return value from `enif_make_badarg` can be used only as the return value\nfrom the NIF that invoked it (directly or indirectly) or be passed to\n[`enif_is_exception`](erl_nif.md#enif_is_exception), but not to any other NIF\nAPI function.\n\nSee also [`enif_has_pending_exception`](erl_nif.md#enif_has_pending_exception)\nand [`enif_raise_exception`](erl_nif.md#enif_raise_exception).\n\n> #### Note {: .info }\n>\n> Before ERTS 7.0 (Erlang/OTP 18), the return value from `enif_make_badarg` had\n> to be returned from the NIF. This requirement is now lifted as the return\n> value from the NIF is ignored if `enif_make_badarg` has been invoked.","ref":"erl_nif.html#enif_make_badarg"},{"type":"extras","title":"enif_make_binary() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_binary(\n        ErlNifEnv* env,\n        ErlNifBinary* bin);\n```\n\nMakes a binary term from `bin`. Any ownership of the binary data is transferred\nto the created term and `bin` is to be considered read-only for the rest of the\nNIF call and then as released.","ref":"erl_nif.html#enif_make_binary"},{"type":"extras","title":"enif_make_copy() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_copy(\n        ErlNifEnv* dst_env,\n        ERL_NIF_TERM src_term);\n```\n\nMakes a copy of term `src_term`. The copy is created in environment `dst_env`.\nThe source term can be located in any environment.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_copy"},{"type":"extras","title":"enif_make_double() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_double(\n        ErlNifEnv* env,\n        double d);\n```\n\nCreates a floating-point term from a `double`. If argument `double` is not\nfinite or is NaN, `enif_make_double` invokes\n[`enif_make_badarg`](erl_nif.md#enif_make_badarg).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_double"},{"type":"extras","title":"enif_make_existing_atom() - erl_nif","doc":"```c\nint enif_make_existing_atom(\n        ErlNifEnv *env,\n        const char *name,\n        ERL_NIF_TERM *atom,\n        ErlNifCharEncoding encoding);\n```\n\nTries to create the term of an already existing atom from the `NULL`\\-terminated\nC-string `name` with [encoding](erl_nif.md#ErlNifCharEncoding).\n\nIf the atom already exists, this function stores the term in `*atom` and returns\n`true`, otherwise returns `false`. It also returns `false` if the string `name`\nexceeds the maximum length allowed for an atom (255 characters) or if `name` is\nnot correctly encoded.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_existing_atom"},{"type":"extras","title":"enif_make_existing_atom_len() - erl_nif","doc":"```c\nint enif_make_existing_atom_len(\n        ErlNifEnv *env,\n        const char *name,\n        size_t len,\n        ERL_NIF_TERM *atom,\n        ErlNifCharEncoding encoding);\n```\n\nTries to create the term of an already existing atom from the string `name` with\nlength `len` bytes and [encoding](erl_nif.md#ErlNifCharEncoding). `NULL`\ncharacters are treated as any other characters.\n\nIf the atom already exists, this function stores the term in `*atom` and returns\n`true`, otherwise returns `false`. It also returns `false` if the string `name`\nexceeds the maximum length allowed for an atom (255 characters) or if `name` is\nnot correctly encoded.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_existing_atom_len"},{"type":"extras","title":"enif_make_int() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_int(\n        ErlNifEnv* env,\n        int i);\n```\n\nCreates an integer term.","ref":"erl_nif.html#enif_make_int"},{"type":"extras","title":"enif_make_int64() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_int64(\n        ErlNifEnv* env,\n        ErlNifSInt64 i);\n```\n\nCreates an integer term from a signed 64-bit integer.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_int64"},{"type":"extras","title":"enif_make_list() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_list(\n        ErlNifEnv* env,\n        unsigned cnt,\n        ...);\n```\n\nCreates an ordinary list term of length `cnt`. Expects `cnt` number of arguments\n(after `cnt`) of type `ERL_NIF_TERM` as the elements of the list.\n\nReturns an empty list if `cnt` is 0.","ref":"erl_nif.html#enif_make_list"},{"type":"extras","title":"enif_make_list1() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list1"},{"type":"extras","title":"enif_make_list2() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list2"},{"type":"extras","title":"enif_make_list3() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list3"},{"type":"extras","title":"enif_make_list4() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list4"},{"type":"extras","title":"enif_make_list5() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list5"},{"type":"extras","title":"enif_make_list6() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list6"},{"type":"extras","title":"enif_make_list7() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list7"},{"type":"extras","title":"enif_make_list8() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_list8"},{"type":"extras","title":"enif_make_list9() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_list1(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1);\n```\n\n```c\nERL_NIF_TERM enif_make_list2(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2);\n```\n\n```c\nERL_NIF_TERM enif_make_list3(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3);\n```\n\n```c\nERL_NIF_TERM enif_make_list4(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4);\n```\n\n```c\nERL_NIF_TERM enif_make_list5(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5);\n```\n\n```c\nERL_NIF_TERM enif_make_list6(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6);\n```\n\n```c\nERL_NIF_TERM enif_make_list7(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7);\n```\n\n```c\nERL_NIF_TERM enif_make_list8(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8);\n```\n\n```c\nERL_NIF_TERM enif_make_list9(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9);\n```\n\nCreates an ordinary list term with length indicated by the function name. Prefer\nthese functions (macros) over the variadic `enif_make_list` to get a\ncompile-time error if the number of arguments does not match.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_list9"},{"type":"extras","title":"enif_make_list_cell() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_list_cell(\n        ErlNifEnv* env,\n        ERL_NIF_TERM head,\n        ERL_NIF_TERM tail);\n```\n\nCreates a list cell `[head | tail]`.","ref":"erl_nif.html#enif_make_list_cell"},{"type":"extras","title":"enif_make_list_from_array() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_list_from_array(\n        ErlNifEnv* env,\n        const ERL_NIF_TERM arr[],\n        unsigned cnt);\n```\n\nCreates an ordinary list containing the elements of array `arr` of length `cnt`.\n\nReturns an empty list if `cnt` is 0.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_list_from_array"},{"type":"extras","title":"enif_make_long() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_long(\n        ErlNifEnv* env,\n        long int i);\n```\n\nCreates an integer term from a `long int`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_long"},{"type":"extras","title":"enif_make_map_put() - erl_nif","doc":"```c\nint enif_make_map_put(\n        ErlNifEnv* env,\n        ERL_NIF_TERM map_in,\n        ERL_NIF_TERM key,\n        ERL_NIF_TERM value,\n        ERL_NIF_TERM* map_out);\n```\n\nMakes a copy of map `map_in` and inserts `key` with `value`. If `key` already\nexists in `map_in`, the old associated value is replaced by `value`.\n\nIf successful, this function sets `*map_out` to the new map and returns `true`.\nReturns `false` if `map_in` is not a map.\n\nThe `map_in` term must belong to environment `env`.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_make_map_put"},{"type":"extras","title":"enif_make_map_remove() - erl_nif","doc":"```c\nint enif_make_map_remove(\n        ErlNifEnv* env,\n        ERL_NIF_TERM map_in,\n        ERL_NIF_TERM key,\n        ERL_NIF_TERM* map_out);\n```\n\nIf map `map_in` contains `key`, this function makes a copy of `map_in` in\n`*map_out`, and removes `key` and the associated value. If map `map_in` does not\ncontain `key`, `*map_out` is set to `map_in`.\n\nReturns `true` on success, or `false` if `map_in` is not a map.\n\nThe `map_in` term must belong to environment `env`.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_make_map_remove"},{"type":"extras","title":"enif_make_map_update() - erl_nif","doc":"```c\nint enif_make_map_update(\n        ErlNifEnv* env,\n        ERL_NIF_TERM map_in,\n        ERL_NIF_TERM key,\n        ERL_NIF_TERM new_value,\n        ERL_NIF_TERM* map_out);\n```\n\nMakes a copy of map `map_in` and replace the old associated value for `key` with\n`new_value`.\n\nIf successful, this function sets `*map_out` to the new map and returns `true`.\nReturns `false` if `map_in` is not a map or if it does not contain `key`.\n\nThe `map_in` term must belong to environment `env`.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_make_map_update"},{"type":"extras","title":"enif_make_map_from_arrays() - erl_nif","doc":"```c\nint enif_make_map_from_arrays(\n        ErlNifEnv* env,\n        ERL_NIF_TERM keys[],\n        ERL_NIF_TERM values[],\n        size_t cnt,\n        ERL_NIF_TERM *map_out);\n```\n\nMakes a map term from the given keys and values.\n\nIf successful, this function sets `*map_out` to the new map and returns `true`.\nReturns `false` there are any duplicate keys.\n\nAll keys and values must belong to `env`.\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_make_map_from_arrays"},{"type":"extras","title":"enif_make_monitor_term() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_monitor_term(\n        ErlNifEnv* env,\n        const ErlNifMonitor* mon);\n```\n\nCreates a term identifying the given monitor received from\n[`enif_monitor_process` ](erl_nif.md#enif_monitor_process).\n\nThis function is primarily intended for debugging purpose.\n\nAvailable since OTP 22.0","ref":"erl_nif.html#enif_make_monitor_term"},{"type":"extras","title":"enif_make_new_atom() - erl_nif","doc":"```c\nint enif_make_new_atom(\n        ErlNifEnv *env,\n        const char *name,\n        ERL_NIF_TERM *atom,\n        ErlNifCharEncoding encoding);\n```\n\nCreates an atom term from the `NULL`\\-terminated C-string `name` with\n[encoding](erl_nif.md#ErlNifCharEncoding).\n\nIf successful, `true` is returned and the atom term is stored in `*atom`.\n\nOtherwise, `false` is returned if the length of `name` exceeds the maximum\nlength allowed for an atom (255 characters) or if `name` is not correctly\nencoded.\n\nAvailable since OTP 26.0","ref":"erl_nif.html#enif_make_new_atom"},{"type":"extras","title":"enif_make_new_atom_len() - erl_nif","doc":"```c\nint enif_make_new_atom_len(\n        ErlNifEnv *env,\n        const char *name,\n        size_t len,\n        ERL_NIF_TERM *atom,\n        ErlNifCharEncoding encoding);\n```\n\nCreate an atom term from string `name` with length `len` bytes and\n[encoding](erl_nif.md#ErlNifCharEncoding).\n\nIf successful, `true` is returned and atom term is stored in `*atom`.\n\nOtherwise, `false` is returned if the string exceeds the maximum length allowed\nfor an atom (255 characters) or if the string is not correctly encoded.\n\nAvailable since OTP 26.0","ref":"erl_nif.html#enif_make_new_atom_len"},{"type":"extras","title":"enif_make_new_binary() - erl_nif","doc":"```c\nunsigned char * enif_make_new_binary(\n\t ErlNifEnv* env,\n\t size_t size,\n\t ERL_NIF_TERM* termp);\n```\n\nAllocates a binary of size `size` bytes and creates an owning term. The binary\ndata is mutable until the calling NIF returns. This is a quick way to create a\nnew binary without having to use [`ErlNifBinary`](erl_nif.md#ErlNifBinary). The\ndrawbacks are that the binary cannot be kept between NIF calls and it cannot be\nreallocated.\n\nReturns a pointer to the raw binary data and sets `*termp` to the binary term.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_new_binary"},{"type":"extras","title":"enif_make_new_map() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_new_map(\n        ErlNifEnv* env);\n```\n\nMakes an empty map term.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_make_new_map"},{"type":"extras","title":"enif_make_pid() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_pid(\n        ErlNifEnv* env,\n        const ErlNifPid* pid);\n```\n\nMakes a pid term or the atom [`undefined`](erl_nif.md#enif_set_pid_undefined)\nfrom `*pid`.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_pid"},{"type":"extras","title":"enif_make_ref() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_ref(\n        ErlNifEnv* env);\n```\n\nCreates a reference like `erlang:make_ref/0`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_ref"},{"type":"extras","title":"enif_make_resource() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_resource(\n        ErlNifEnv* env,\n        void* obj);\n```\n\nCreates an opaque handle to a memory-managed resource object obtained by\n[`enif_alloc_resource`](erl_nif.md#enif_alloc_resource). No ownership transfer\nis done, as the resource object still needs to be released by\n[`enif_release_resource`](erl_nif.md#enif_release_resource). However, notice\nthat the call to `enif_release_resource` can occur immediately after obtaining\nthe term from `enif_make_resource`, in which case the resource object is\ndeallocated when the term is garbage collected. For more details, see the\n[example of creating and returning a resource object](erl_nif.md#enif_resource_example)\nin the User's Guide.\n\n> #### Note {: .info }\n>\n> Since ERTS 9.0 (OTP-20.0), resource terms have a defined behavior when\n> compared and serialized through `term_to_binary` or passed between nodes.\n>\n> - Two resource terms will compare equal if and only if they would yield the\n>   same resource object pointer when passed to\n>   [`enif_get_resource`](erl_nif.md#enif_get_resource).\n> - A resource term can be serialized with `term_to_binary` and later be fully\n>   recreated if the resource object is still alive when `binary_to_term` is\n>   called. A _stale_ resource term will be returned from `binary_to_term` if\n>   the resource object has been deallocated.\n>   [`enif_get_resource`](erl_nif.md#enif_get_resource) will return false for\n>   stale resource terms.\n>\n>   The same principles of serialization apply when passing resource terms in\n>   messages to remote nodes and back again. A resource term will act stale on\n>   all nodes except the node where its resource object is still alive in\n>   memory.\n>\n> Before ERTS 9.0 (OTP-20.0), all resource terms did compare equal to each other\n> and to empty binaries (`<<>>`). If serialized, they would be recreated as\n> plain empty binaries.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_resource"},{"type":"extras","title":"enif_make_resource_binary() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_resource_binary(\n        ErlNifEnv* env,\n        void* obj,\n        const void* data,\n        size_t size);\n```\n\nCreates a binary term that is memory-managed by a resource object `obj` obtained\nby [`enif_alloc_resource`](erl_nif.md#enif_alloc_resource). The returned binary\nterm consists of `size` bytes pointed to by `data`. This raw binary data must be\nkept readable and unchanged until the destructor of the resource is called. The\nbinary data can be stored external to the resource object, in which case the\ndestructor is responsible for releasing the data.\n\nSeveral binary terms can be managed by the same resource object. The destructor\nis not called until the last binary is garbage collected. This can be useful to\nreturn different parts of a larger binary buffer.\n\nAs with [`enif_make_resource`](erl_nif.md#enif_make_resource), no ownership\ntransfer is done. The resource still needs to be released with\n[`enif_release_resource`](erl_nif.md#enif_release_resource).\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_resource_binary"},{"type":"extras","title":"enif_make_reverse_list() - erl_nif","doc":"```c\nint enif_make_reverse_list(\n        ErlNifEnv* env,\n        ERL_NIF_TERM list_in,\n        ERL_NIF_TERM *list_out);\n```\n\nSets `*list_out` to the reverse list of the list `list_in` and returns `true`,\nor returns `false` if `list_in` is not a list.\n\nThis function is only to be used on short lists, as a copy is created of the\nlist, which is not released until after the NIF returns.\n\nThe `list_in` term must belong to environment `env`.\n\nAvailable since OTP R15B","ref":"erl_nif.html#enif_make_reverse_list"},{"type":"extras","title":"enif_make_string() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_string(\n        ErlNifEnv *env,\n        const char *string,\n        ErlNifCharEncoding encoding);\n```\n\nCreates a list containing the characters of the `NULL`\\-terminated string\n`string` with [encoding](erl_nif.md#ErlNifCharEncoding).","ref":"erl_nif.html#enif_make_string"},{"type":"extras","title":"enif_make_string_len() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_string_len(\n        ErlNifEnv *env,\n        const char *string,\n        size_t len,\n        ErlNifCharEncoding encoding);\n```\n\nCreates a list containing the characters of the string `string` with length\n`len` and [encoding](erl_nif.md#ErlNifCharEncoding). `NULL` characters are\ntreated as any other characters.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_string_len"},{"type":"extras","title":"enif_make_sub_binary() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_sub_binary(\n        ErlNifEnv* env,\n        ERL_NIF_TERM bin_term,\n        size_t pos,\n        size_t size);\n```\n\nMakes a subbinary of binary `bin_term`, starting at zero-based position `pos`\nwith a length of `size` bytes. `bin_term` must be a binary or bitstring.\n`pos+size` must be less or equal to the number of whole bytes in `bin_term`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_sub_binary"},{"type":"extras","title":"enif_make_tuple() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_tuple(\n        ErlNifEnv* env,\n        unsigned cnt,\n        ...);\n```\n\nCreates a tuple term of arity `cnt`. Expects `cnt` number of arguments (after\n`cnt`) of type `ERL_NIF_TERM` as the elements of the tuple.","ref":"erl_nif.html#enif_make_tuple"},{"type":"extras","title":"enif_make_tuple1() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple1"},{"type":"extras","title":"enif_make_tuple2() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple2"},{"type":"extras","title":"enif_make_tuple3() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple3"},{"type":"extras","title":"enif_make_tuple4() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple4"},{"type":"extras","title":"enif_make_tuple5() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple5"},{"type":"extras","title":"enif_make_tuple6() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple6"},{"type":"extras","title":"enif_make_tuple7() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple7"},{"type":"extras","title":"enif_make_tuple8() - erl_nif","doc":"","ref":"erl_nif.html#enif_make_tuple8"},{"type":"extras","title":"enif_make_tuple9() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_tuple1(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple2(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple3(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ERL_NIF_TERM e2, ERL_NIF_TERM e3);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple4(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e4);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple5(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e5);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple6(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e6);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple7(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e7);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple8(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e8);\n```\n\n```c\nERL_NIF_TERM enif_make_tuple9(\n        ErlNifEnv* env,\n        ERL_NIF_TERM e1, ..., ERL_NIF_TERM e9);\n```\n\nCreates a tuple term with length indicated by the function name. Prefer these\nfunctions (macros) over the variadic `enif_make_tuple` to get a compile-time\nerror if the number of arguments does not match.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_tuple9"},{"type":"extras","title":"enif_make_tuple_from_array() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_tuple_from_array(\n        ErlNifEnv* env,\n        const ERL_NIF_TERM arr[],\n        unsigned cnt);\n```\n\nCreates a tuple containing the elements of array `arr` of length `cnt`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_tuple_from_array"},{"type":"extras","title":"enif_make_uint() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_uint(\n        ErlNifEnv* env,\n        unsigned int i);\n```\n\nCreates an integer term from an `unsigned int`.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_make_uint"},{"type":"extras","title":"enif_make_uint64() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_uint64(\n        ErlNifEnv* env,\n        ErlNifUInt64 i);\n```\n\nCreates an integer term from an unsigned 64-bit integer.\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_make_uint64"},{"type":"extras","title":"enif_make_ulong() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_ulong(\n        ErlNifEnv* env,\n        unsigned long i);\n```\n\nCreates an integer term from an `unsigned long int`.","ref":"erl_nif.html#enif_make_ulong"},{"type":"extras","title":"enif_make_unique_integer() - erl_nif","doc":"```c\nERL_NIF_TERM enif_make_unique_integer(\n        ErlNifEnv *env,\n        ErlNifUniqueInteger properties);\n```\n\nReturns a unique integer with the same properties as specified by\n`erlang:unique_integer/1`.\n\n`env` is the environment to create the integer in.\n\n`ERL_NIF_UNIQUE_POSITIVE` and `ERL_NIF_UNIQUE_MONOTONIC` can be passed as the\nsecond argument to change the properties of the integer returned. They can be\ncombined by OR:ing the two values together.\n\nSee also [`ErlNifUniqueInteger`](erl_nif.md#ErlNifUniqueInteger).\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_make_unique_integer"},{"type":"extras","title":"enif_map_iterator_create() - erl_nif","doc":"```c\nint enif_map_iterator_create(\n        ErlNifEnv *env,\n        ERL_NIF_TERM map,\n        ErlNifMapIterator *iter,\n        ErlNifMapIteratorEntry entry);\n```\n\nCreates an iterator for the map `map` by initializing the structure pointed to\nby `iter`. Argument `entry` determines the start position of the iterator:\n`ERL_NIF_MAP_ITERATOR_FIRST` or `ERL_NIF_MAP_ITERATOR_LAST`.\n\nReturns `true` on success, or false if `map` is not a map.\n\nA map iterator is only useful during the lifetime of environment `env` that the\n`map` belongs to. The iterator must be destroyed by calling\n[`enif_map_iterator_destroy`](erl_nif.md#enif_map_iterator_destroy):\n\n```c\nERL_NIF_TERM key, value;\nErlNifMapIterator iter;\nenif_map_iterator_create(env, my_map, &iter, ERL_NIF_MAP_ITERATOR_FIRST);\n\nwhile (enif_map_iterator_get_pair(env, &iter, &key, &value)) {\n    do_something(key,value);\n    enif_map_iterator_next(env, &iter);\n}\nenif_map_iterator_destroy(env, &iter);\n```\n\n> #### Note {: .info }\n>\n> The key-value pairs of a map have no defined iteration order. The only\n> guarantee is that the iteration order of a single map instance is preserved\n> during the lifetime of the environment that the map belongs to.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_map_iterator_create"},{"type":"extras","title":"enif_map_iterator_destroy() - erl_nif","doc":"```c\nvoid enif_map_iterator_destroy(\n        ErlNifEnv *env,\n        ErlNifMapIterator *iter);\n```\n\nDestroys a map iterator created by\n[`enif_map_iterator_create`](erl_nif.md#enif_map_iterator_create).\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_map_iterator_destroy"},{"type":"extras","title":"enif_map_iterator_get_pair() - erl_nif","doc":"```c\nint enif_map_iterator_get_pair(\n        ErlNifEnv *env,\n        ErlNifMapIterator *iter,\n        ERL_NIF_TERM *key,\n        ERL_NIF_TERM *value);\n```\n\nGets key and value terms at the current map iterator position.\n\nOn success, sets `*key` and `*value` and returns `true`. Returns `false` if the\niterator is positioned at head (before first entry) or tail (beyond last entry).\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_map_iterator_get_pair"},{"type":"extras","title":"enif_map_iterator_is_head() - erl_nif","doc":"```c\nint enif_map_iterator_is_head(\n        ErlNifEnv *env,\n        ErlNifMapIterator *iter);\n```\n\nReturns `true` if map iterator `iter` is positioned before the first entry.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_map_iterator_is_head"},{"type":"extras","title":"enif_map_iterator_is_tail() - erl_nif","doc":"```c\nint enif_map_iterator_is_tail(\n        ErlNifEnv *env,\n        ErlNifMapIterator *iter);\n```\n\nReturns `true` if map iterator `iter` is positioned after the last entry.\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_map_iterator_is_tail"},{"type":"extras","title":"enif_map_iterator_next() - erl_nif","doc":"```c\nint enif_map_iterator_next(\n        ErlNifEnv *env,\n        ErlNifMapIterator *iter);\n```\n\nIncrements map iterator to point to the next key-value entry.\n\nReturns `true` if the iterator is now positioned at a valid key-value entry, or\n`false` if the iterator is positioned at the tail (beyond the last entry).\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_map_iterator_next"},{"type":"extras","title":"enif_map_iterator_prev() - erl_nif","doc":"```c\nint enif_map_iterator_prev(\n        ErlNifEnv *env,\n        ErlNifMapIterator *iter);\n```\n\nDecrements map iterator to point to the previous key-value entry.\n\nReturns `true` if the iterator is now positioned at a valid key-value entry, or\n`false` if the iterator is positioned at the head (before the first entry).\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_map_iterator_prev"},{"type":"extras","title":"enif_monitor_process() - erl_nif","doc":"```c\nint enif_monitor_process(\n        ErlNifEnv* caller_env,\n        void* obj,\n        const ErlNifPid* target_pid,\n        ErlNifMonitor* mon);\n```\n\nStarts monitoring a process from a resource. When a process is monitored, a\nprocess exit results in a call to the provided\n[`down`](erl_nif.md#ErlNifResourceDown) callback associated with the resource\ntype.\n\nArgument `obj` is pointer to the resource to hold the monitor and `*target_pid`\nidentifies the local process to be monitored.\n\nIf `mon` is not `NULL`, a successful call stores the identity of the monitor in\nthe [`ErlNifMonitor`](erl_nif.md#ErlNifMonitor) struct pointed to by `mon`. This\nidentifier is used to refer to the monitor for later removal with\n[`enif_demonitor_process`](erl_nif.md#enif_demonitor_process) or compare with\n[`enif_compare_monitors`](erl_nif.md#enif_compare_monitors). A monitor is\nautomatically removed when it triggers or when the resource is deallocated.\n\nArgument `caller_env` is the environment of the calling thread\n([process bound](erl_nif.md#proc_bound_env) or\n[callback](erl_nif.md#callback_env) environment) or `NULL` if calling from a\ncustom thread not spawned by ERTS.\n\nReturns `0` on success, < 0 if no `down` callback is provided, and > 0 if the\nprocess is no longer alive or if `target_pid` is\n[undefined](erl_nif.md#enif_set_pid_undefined).\n\nThis function is thread-safe.\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_monitor_process"},{"type":"extras","title":"enif_monotonic_time() - erl_nif","doc":"```c\nErlNifTime enif_monotonic_time(\n        ErlNifTimeUnit time_unit);\n```\n\nReturns the current\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time). Notice that\nit is not uncommon with negative values.\n\n`time_unit` is the time unit of the returned value.\n\nReturns `ERL_NIF_TIME_ERROR` if called with an invalid time unit argument, or if\ncalled from a thread that is not a scheduler thread.\n\nSee also [`ErlNifTime`](erl_nif.md#ErlNifTime) and\n[`ErlNifTimeUnit`](erl_nif.md#ErlNifTimeUnit).\n\nAvailable since OTP 18.3","ref":"erl_nif.html#enif_monotonic_time"},{"type":"extras","title":"enif_mutex_create() - erl_nif","doc":"```c\nErlNifMutex * enif_mutex_create(\n        char *name);\n```\n\nSame as [`erl_drv_mutex_create`](erl_driver.md#erl_drv_mutex_create).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_mutex_create"},{"type":"extras","title":"enif_mutex_destroy() - erl_nif","doc":"```c\nvoid enif_mutex_destroy(\n        ErlNifMutex *mtx);\n```\n\nSame as [`erl_drv_mutex_destroy`](erl_driver.md#erl_drv_mutex_destroy).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_mutex_destroy"},{"type":"extras","title":"enif_mutex_lock() - erl_nif","doc":"```c\nvoid enif_mutex_lock(\n        ErlNifMutex *mtx);\n```\n\nSame as [`erl_drv_mutex_lock`](erl_driver.md#erl_drv_mutex_lock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_mutex_lock"},{"type":"extras","title":"enif_mutex_name() - erl_nif","doc":"```c\nchar* enif_mutex_name(\n        ErlNifMutex* mtx);\n```\n\nSame as [`erl_drv_mutex_name`](erl_driver.md#erl_drv_mutex_name).\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_mutex_name"},{"type":"extras","title":"enif_mutex_trylock() - erl_nif","doc":"```c\nint enif_mutex_trylock(\n        ErlNifMutex *mtx);\n```\n\nSame as [`erl_drv_mutex_trylock`](erl_driver.md#erl_drv_mutex_trylock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_mutex_trylock"},{"type":"extras","title":"enif_mutex_unlock() - erl_nif","doc":"```c\nvoid enif_mutex_unlock(\n        ErlNifMutex *mtx);\n```\n\nSame as [`erl_drv_mutex_unlock`](erl_driver.md#erl_drv_mutex_unlock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_mutex_unlock"},{"type":"extras","title":"enif_now_time() - erl_nif","doc":"```c\nERL_NIF_TERM enif_now_time(\n        ErlNifEnv *env);\n```\n\nReturns an [`erlang:now()`](`erlang:now/0`) time stamp.\n\n_This function is deprecated._\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_now_time"},{"type":"extras","title":"enif_open_resource_type() - erl_nif","doc":"```c\nErlNifResourceType * enif_open_resource_type(\n        ErlNifEnv* env,\n        const char* module_str,\n        const char* name,\n        ErlNifResourceDtor* dtor,\n        ErlNifResourceFlags flags,\n        ErlNifResourceFlags* tried);\n```\n\nCreates or takes over a resource type identified by the string `name` and gives\nit the destructor function pointed to by\n[`dtor`](erl_nif.md#ErlNifResourceDtor). Argument `flags` can have the following\nvalues:\n\n- **`ERL_NIF_RT_CREATE`** - Creates a new resource type that does not already\n  exist.\n\n- **`ERL_NIF_RT_TAKEOVER`** - Opens an existing resource type and takes over\n  ownership of all its instances. The supplied destructor `dtor` is called both\n  for existing instances and new instances not yet created by the calling NIF\n  library.\n\nThe two flag values can be combined with bitwise OR. The resource type name is\nlocal to the calling module. Argument `module_str` is not (yet) used and must be\n`NULL`. `dtor` can be `NULL` if no destructor is needed.\n\nOn success, the function returns a pointer to the resource type and `*tried` is\nset to either `ERL_NIF_RT_CREATE` or `ERL_NIF_RT_TAKEOVER` to indicate what was\ndone. On failure, returns `NULL` and sets `*tried` to `flags`. It is allowed to\nset `tried` to `NULL`.\n\nNotice that `enif_open_resource_type` is only allowed to be called in the two\ncallbacks [`load`](erl_nif.md#load) and [`upgrade`](erl_nif.md#upgrade). The\nresource type is only created or taken over if the calling `load`/`upgrade`\nfunction returns successfully.\n\nSee also [`enif_open_resource_type_x`](erl_nif.md#enif_open_resource_type_x).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_open_resource_type"},{"type":"extras","title":"enif_open_resource_type_x() - erl_nif","doc":"```c\nErlNifResourceType * enif_open_resource_type_x(\n        ErlNifEnv* env,\n        const char* name,\n        const ErlNifResourceTypeInit* init,\n        ErlNifResourceFlags flags,\n        ErlNifResourceFlags* tried);\n```\n\nSame as [`enif_open_resource_type`](erl_nif.md#enif_open_resource_type) except\nit accepts additional callback functions for resource types that are used\ntogether with [`enif_select`](erl_nif.md#enif_select) and\n[`enif_monitor_process`](erl_nif.md#enif_monitor_process).\n\nArgument `init` is a pointer to an\n[`ErlNifResourceTypeInit`](erl_nif.md#ErlNifResourceTypeInit) structure that\ncontains the function pointers for destructor, down and stop callbacks for the\nresource type.\n\n> #### Note {: .info }\n>\n> Only members `dtor`, `down` and `stop` in\n> [`ErlNifResourceTypeInit`](erl_nif.md#ErlNifResourceTypeInit) are read by\n> `enif_open_resource_type_x`. To implement the new `dyncall` callback use\n> [`enif_init_resource_type`](erl_nif.md#enif_init_resource_type).\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_open_resource_type_x"},{"type":"extras","title":"enif_init_resource_type() - erl_nif","doc":"```c\nErlNifResourceType * enif_init_resource_type(\n        ErlNifEnv* env,\n        const char* name,\n        const ErlNifResourceTypeInit* init,\n        ErlNifResourceFlags flags,\n        ErlNifResourceFlags* tried);\n```\n\nSame as [`enif_open_resource_type_x`](erl_nif.md#enif_open_resource_type_x)\nexcept it accepts an additional callback function for resource types that are\nused together with\n[`enif_dynamic_resource_call`](erl_nif.md#enif_dynamic_resource_call).\n\nArgument `init` is a pointer to an\n[`ErlNifResourceTypeInit`](erl_nif.md#ErlNifResourceTypeInit) structure that\ncontains the callback function pointers `dtor`, `down`, `stop` and the new\n`dyncall`. The struct also contains the field `members` that must be set to the\nnumber of initialized callbacks counted from the top of the struct. For example,\nto initialize all callbacks including `dyncall`, `members` should be set to 4.\nAll callbacks are optional and may be set to `NULL`.\n\nAvailable since OTP 24.0","ref":"erl_nif.html#enif_init_resource_type"},{"type":"extras","title":"enif_port_command() - erl_nif","doc":"```c\nint enif_port_command(\n        ErlNifEnv* env, const\n        ErlNifPort* to_port,\n        ErlNifEnv *msg_env,\n        ERL_NIF_TERM msg);\n```\n\nWorks as `erlang:port_command/2`, except that it is always completely\nasynchronous.\n\n- **`env`** - The environment of the calling process. Must not be `NULL`.\n\n- **`*to_port`** - The port ID of the receiving port. The port ID is to refer to\n  a port on the local node.\n\n- **`msg_env`** - The environment of the message term. Can be a process\n  independent environment allocated with\n  [`enif_alloc_env`](erl_nif.md#enif_alloc_env) or `NULL`.\n\n- **`msg`** - The message term to send. The same limitations apply as on the\n  payload to `erlang:port_command/2`.\n\nUsing a `msg_env` of `NULL` is an optimization, which groups together calls to\n`enif_alloc_env`, `enif_make_copy`, `enif_port_command`, and `enif_free_env`\ninto one call. This optimization is only useful when a majority of the terms are\nto be copied from `env` to `msg_env`.\n\nReturns `true` if the command is successfully sent. Returns `false` if the\ncommand fails, for example:\n\n- `*to_port` does not refer to a local port.\n- The currently executing process (that is, the sender) is not alive.\n- `msg` is invalid.\n\nSee also [`enif_get_local_port`](erl_nif.md#enif_get_local_port).\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_port_command"},{"type":"extras","title":"enif_priv_data() - erl_nif","doc":"```c\nvoid * enif_priv_data(\n        ErlNifEnv* env);\n```\n\nReturns the pointer to the private data that was set by\n[`load`](erl_nif.md#load) or [`upgrade`](erl_nif.md#upgrade).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_priv_data"},{"type":"extras","title":"enif_raise_exception() - erl_nif","doc":"```c\nERL_NIF_TERM enif_raise_exception(\n        ErlNifEnv* env,\n        ERL_NIF_TERM reason);\n```\n\nCreates an error exception with the term `reason` to be returned from a NIF, and\nassociates it with environment `env`. Once a NIF or any function it calls\ninvokes `enif_raise_exception`, the runtime ensures that the exception it\ncreates is raised when the NIF returns, even if the NIF attempts to return a\nnon-exception term instead.\n\nThe return value from `enif_raise_exception` can only be used as the return\nvalue from the NIF that invoked it (directly or indirectly) or be passed to\n[`enif_is_exception`](erl_nif.md#enif_is_exception), but not to any other NIF\nAPI function.\n\nSee also [`enif_has_pending_exception`](erl_nif.md#enif_has_pending_exception)\nand [`enif_make_badarg`](erl_nif.md#enif_make_badarg).\n\nAvailable since OTP 18.0","ref":"erl_nif.html#enif_raise_exception"},{"type":"extras","title":"enif_realloc() - erl_nif","doc":"```c\nvoid * enif_realloc(\n        void* ptr,\n        size_t size);\n```\n\nReallocates memory allocated by [`enif_alloc`](erl_nif.md#enif_alloc) to `size`\nbytes.\n\nReturns `NULL` if the reallocation fails.\n\nThe returned pointer is suitably aligned for any built-in type that fit in the\nallocated memory.\n\nAvailable since OTP 20.2","ref":"erl_nif.html#enif_realloc"},{"type":"extras","title":"enif_realloc_binary() - erl_nif","doc":"```c\nint enif_realloc_binary(\n        ErlNifBinary* bin,\n        size_t size);\n```\n\nChanges the size of a binary `bin`. The source binary can be read-only, in which\ncase it is left untouched and a mutable copy is allocated and assigned to\n`*bin`.\n\nReturns `true` on success, or `false` if memory allocation failed.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_realloc_binary"},{"type":"extras","title":"enif_release_binary() - erl_nif","doc":"```c\nvoid enif_release_binary(\n        ErlNifBinary* bin);\n```\n\nReleases a binary obtained from\n[`enif_alloc_binary`](erl_nif.md#enif_alloc_binary).","ref":"erl_nif.html#enif_release_binary"},{"type":"extras","title":"enif_release_resource() - erl_nif","doc":"```c\nvoid enif_release_resource(\n        void* obj);\n```\n\nRemoves a reference to resource object `obj` obtained from\n[`enif_alloc_resource`](erl_nif.md#enif_alloc_resource). The resource object is\ndestructed when the last reference is removed. Each call to\n`enif_release_resource` must correspond to a previous call to\n`enif_alloc_resource` or [`enif_keep_resource`](erl_nif.md#enif_keep_resource).\nReferences made by [`enif_make_resource`](erl_nif.md#enif_make_resource) can\nonly be removed by the garbage collector.\n\nThere are no guarantees exactly when the destructor of an unreferenced resource\nis called. It could be called directly by `enif_release_resource` but it could\nalso be scheduled to be called at a later time possibly by another thread.\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_release_resource"},{"type":"extras","title":"enif_rwlock_create() - erl_nif","doc":"```c\nErlNifRWLock * enif_rwlock_create(\n        char *name);\n```\n\nSame as [`erl_drv_rwlock_create`](erl_driver.md#erl_drv_rwlock_create).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_create"},{"type":"extras","title":"enif_rwlock_destroy() - erl_nif","doc":"```c\nvoid enif_rwlock_destroy(\n        ErlNifRWLock *rwlck);\n```\n\nSame as [`erl_drv_rwlock_destroy`](erl_driver.md#erl_drv_rwlock_destroy).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_destroy"},{"type":"extras","title":"enif_rwlock_name() - erl_nif","doc":"```c\nchar* enif_rwlock_name(\n        ErlNifRWLock* rwlck);\n```\n\nSame as [`erl_drv_rwlock_name`](erl_driver.md#erl_drv_rwlock_name).\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_rwlock_name"},{"type":"extras","title":"enif_rwlock_rlock() - erl_nif","doc":"```c\nvoid enif_rwlock_rlock(\n        ErlNifRWLock *rwlck);\n```\n\nSame as [`erl_drv_rwlock_rlock`](erl_driver.md#erl_drv_rwlock_rlock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_rlock"},{"type":"extras","title":"enif_rwlock_runlock() - erl_nif","doc":"```c\nvoid enif_rwlock_runlock(\n        ErlNifRWLock *rwlck);\n```\n\nSame as [`erl_drv_rwlock_runlock`](erl_driver.md#erl_drv_rwlock_runlock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_runlock"},{"type":"extras","title":"enif_rwlock_rwlock() - erl_nif","doc":"```c\nvoid enif_rwlock_rwlock(\n        ErlNifRWLock *rwlck);\n```\n\nSame as [`erl_drv_rwlock_rwlock`](erl_driver.md#erl_drv_rwlock_rwlock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_rwlock"},{"type":"extras","title":"enif_rwlock_rwunlock() - erl_nif","doc":"```c\nvoid enif_rwlock_rwunlock(\n        ErlNifRWLock *rwlck);\n```\n\nSame as [`erl_drv_rwlock_rwunlock`](erl_driver.md#erl_drv_rwlock_rwunlock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_rwunlock"},{"type":"extras","title":"enif_rwlock_tryrlock() - erl_nif","doc":"```c\nint enif_rwlock_tryrlock(\n        ErlNifRWLock *rwlck);\n```\n\nSame as [`erl_drv_rwlock_tryrlock`](erl_driver.md#erl_drv_rwlock_tryrlock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_tryrlock"},{"type":"extras","title":"enif_rwlock_tryrwlock() - erl_nif","doc":"```c\nint enif_rwlock_tryrwlock(\n        ErlNifRWLock *rwlck);\n```\n\nSame as [`erl_drv_rwlock_tryrwlock`](erl_driver.md#erl_drv_rwlock_tryrwlock).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_rwlock_tryrwlock"},{"type":"extras","title":"enif_schedule_nif() - erl_nif","doc":"```c\nERL_NIF_TERM enif_schedule_nif(\n        ErlNifEnv* caller_env,\n        const char* fun_name,\n        int flags,\n        ERL_NIF_TERM (*fp)(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]),\n        int argc,\n        const ERL_NIF_TERM argv[]);\n```\n\nSchedules NIF `fp` to execute. This function allows an application to break up\nlong-running work into multiple regular NIF calls or to schedule a\n[dirty NIF](erl_nif.md#dirty_nifs) to execute on a dirty scheduler thread.\n\n- **`caller_env`** - Must be [process bound](erl_nif.md#proc_bound_env)\n  environment of the calling NIF.\n\n- **`fun_name`** - Provides a name for the NIF that is scheduled for execution.\n  If it cannot be converted to an atom, `enif_schedule_nif` returns a `badarg`\n  exception.\n\n- **`flags`** - Must be set to `0` for a regular NIF,\n  `ERL_NIF_DIRTY_JOB_CPU_BOUND` if the job is expected to be CPU-bound, or\n  `ERL_NIF_DIRTY_JOB_IO_BOUND` for jobs that will be I/O-bound.\n\n- **`argc` and `argv`** - Can either be the originals passed into the calling\n  NIF, or can be values created by the calling NIF.\n\nThe calling NIF must use the return value of `enif_schedule_nif` as its own\nreturn value.\n\nBe aware that `enif_schedule_nif`, as its name implies, only schedules the NIF\nfor future execution. The calling NIF does not block waiting for the scheduled\nNIF to execute and return. This means that the calling NIF cannot expect to\nreceive the scheduled NIF return value and use it for further operations.\n\nAvailable since OTP 17.3","ref":"erl_nif.html#enif_schedule_nif"},{"type":"extras","title":"enif_select() - erl_nif","doc":"```c\nint enif_select(\n        ErlNifEnv* env,\n        ErlNifEvent event,\n        enum ErlNifSelectFlags mode,\n        void* obj,\n        const ErlNifPid* pid,\n        ERL_NIF_TERM ref);\n```\n\nThis function can be used to receive asynchronous notifications when OS-specific\nevent objects become ready for either read or write operations.\n\nArgument `event` identifies the event object. On Unix systems, the functions\n`select`/`poll` are used. The event object must be a socket, pipe or other file\ndescriptor object that `select`/`poll` can use.\n\nArgument `mode` describes the type of events to wait for. It can be\n`ERL_NIF_SELECT_READ`, `ERL_NIF_SELECT_WRITE` or a bitwise OR combination to\nwait for both. It can also be `ERL_NIF_SELECT_STOP` or `ERL_NIF_SELECT_CANCEL`\nwhich are described further below. When a read or write event is triggered, a\nnotification message like this is sent to the process identified by `pid`:\n\n```text\n{select, Obj, Ref, ready_input | ready_output}\n```\n\n`ready_input` or `ready_output` indicates if the event object is ready for\nreading or writing.\n\n> #### Note {: .info }\n>\n> For complete control over the message format use the newer functions\n> [`enif_select_read`](erl_nif.md#enif_select_read) or\n> [`enif_select_write`](erl_nif.md#enif_select_write) introduced in erts-11.0\n> (OTP-22.0).\n\nArgument `pid` may be `NULL` to indicate the calling process. It must not be set\nas [undefined](erl_nif.md#enif_set_pid_undefined).\n\nArgument `obj` is a resource object obtained from\n[`enif_alloc_resource`](erl_nif.md#enif_alloc_resource). The purpose of the\nresource objects is as a container of the event object to manage its state and\nlifetime. A handle to the resource is received in the notification message as\n`Obj`.\n\nArgument `ref` must be either a reference obtained from `erlang:make_ref/0` or\nthe atom `undefined`. It will be passed as `Ref` in the notifications. If a\nselective `receive` statement is used to wait for the notification then a\nreference created just before the `receive` will exploit a runtime optimization\nthat bypasses all earlier received messages in the queue.\n\nThe notifications are one-shot only. To receive further notifications of the\nsame type (read or write), repeated calls to `enif_select` must be made after\nreceiving each notification.\n\n`ERL_NIF_SELECT_CANCEL` can be used to cancel previously selected events. It\nmust be used in a bitwise OR combination with `ERL_NIF_SELECT_READ` and/or\n`ERL_NIF_SELECT_WRITE` to indicate which type of event to cancel. Arguments\n`pid` and `ref` are ignored when `ERL_NIF_SELECT_CANCEL` is specified. The\nreturn value will tell if the event was actually cancelled or if a notification\nmay already have been sent.\n\nUse `ERL_NIF_SELECT_STOP` as `mode` in order to safely close an event object\nthat has been passed to `enif_select`. The\n[`stop`](erl_nif.md#ErlNifResourceStop) callback of the resource `obj` will be\ncalled when it is safe to close the event object. This safe way of closing event\nobjects must be used even if all notifications have been received (or cancelled)\nand no further calls to `enif_select` have been made. `ERL_NIF_SELECT_STOP` will\nfirst cancel any selected events before it calls or schedules the `stop`\ncallback. Arguments `pid` and `ref` are ignored when `ERL_NIF_SELECT_STOP` is\nspecified.\n\nThe first call to `enif_select` for a specific OS `event` will establish a\nrelation between the event object and the containing resource. All subsequent\ncalls for an `event` must pass its containing resource as argument `obj`. The\nrelation is dissolved when `enif_select` has been called with `mode` as\n`ERL_NIF_SELECT_STOP` and the corresponding `stop` callback has returned. A\nresource can contain several event objects but one event object can only be\ncontained within one resource. A resource will not be destructed until all its\ncontained relations have been dissolved.\n\n> #### Note {: .info }\n>\n> Use [`enif_monitor_process`](erl_nif.md#enif_monitor_process) together with\n> `enif_select` to detect failing Erlang processes and prevent them from causing\n> permanent leakage of resources and their contained OS event objects.\n\nReturns a non-negative value on success where the following bits can be set:\n\n- **`ERL_NIF_SELECT_STOP_CALLED`** - The stop callback was called directly by\n  `enif_select`.\n\n- **`ERL_NIF_SELECT_STOP_SCHEDULED`** - The stop callback was scheduled to run\n  on some other thread or later by this thread.\n\n- **`ERL_NIF_SELECT_READ_CANCELLED`** - A read event was cancelled by\n  `ERL_NIF_SELECT_CANCEL` or `ERL_NIF_SELECT_STOP` and is guaranteed not to\n  generate a `ready_input` notification message.\n\n- **`ERL_NIF_SELECT_WRITE_CANCELLED`** - A write event was cancelled by\n  `ERL_NIF_SELECT_CANCEL` or `ERL_NIF_SELECT_STOP` and is guaranteed not to\n  generate a `ready_output` notification message.\n\nReturns a negative value if the call failed where the following bits can be set:\n\n- **`ERL_NIF_SELECT_INVALID_EVENT`** - Argument `event` is not a valid OS event\n  object.\n\n- **`ERL_NIF_SELECT_FAILED`** - The system call failed to add the event object\n  to the poll set.\n\n> #### Note {: .info }\n>\n> Use bitwise AND to test for specific bits in the return value. New significant\n> bits may be added in future releases to give more detailed information for\n> both failed and successful calls. Do NOT use equality tests like `==`, as that\n> may cause your application to stop working.\n>\n> Example:\n>\n> ```c\n> retval = enif_select(env, fd, ERL_NIF_SELECT_STOP, resource, ref);\n> if (retval < 0) {\n>     /* handle error */\n> }\n> /* Success! */\n> if (retval & ERL_NIF_SELECT_STOP_CALLED) {\n>     /* ... */\n> }\n> ```\n\n> #### Note {: .info }\n>\n> The mode flag `ERL_NIF_SELECT_CANCEL` and the return flags\n> `ERL_NIF_SELECT_READ_CANCELLED` and `ERL_NIF_SELECT_WRITE_CANCELLED` were\n> introduced in erts-11.0 (OTP-22.0).\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_select"},{"type":"extras","title":"enif_select_read() - erl_nif","doc":"Available since OTP 22.0","ref":"erl_nif.html#enif_select_read"},{"type":"extras","title":"enif_select_write() - erl_nif","doc":"```c\nint enif_select_read(\n        ErlNifEnv* env,\n        ErlNifEvent event,\n        void* obj,\n        const ErlNifPid* pid,\n        ERL_NIF_TERM msg,\n        ErlNifEnv* msg_env);\n```\n\n```c\nint enif_select_write(\n        ErlNifEnv* env,\n        ErlNifEvent event,\n        void* obj,\n        const ErlNifPid* pid,\n        ERL_NIF_TERM msg,\n        ErlNifEnv* msg_env);\n```\n\nThese are variants of [enif_select](erl_nif.md#enif_select) where you can supply\nyour own message term `msg` that will be sent to the process instead of the\npredefined tuple `{select,_,_,_}.`\n\nArgument `msg_env` must either be `NULL` or the environment of `msg` allocated\nwith [`enif_alloc_env`](erl_nif.md#enif_alloc_env). If argument `msg_env` is\n`NULL` the term `msg` will be copied, otherwise both `msg` and `msg_env` will be\ninvalidated by a successful call to `enif_select_read` or `enif_select_write`.\nThe environment is then to either be freed with\n[`enif_free_env`](erl_nif.md#enif_free_env) or cleared for reuse with\n[`enif_clear_env`](erl_nif.md#enif_clear_env). An unsuccessful call will leave\n`msg` and `msg_env` still valid.\n\nApart from the message format `enif_select_read` and `enif_select_write` behaves\nexactly the same as [enif_select](erl_nif.md#enif_select) with argument `mode`\nas either `ERL_NIF_SELECT_READ` or `ERL_NIF_SELECT_WRITE`. To cancel or close\nevents use [enif_select](erl_nif.md#enif_select).\n\nAvailable since OTP 22.0","ref":"erl_nif.html#enif_select_write"},{"type":"extras","title":"enif_self() - erl_nif","doc":"```c\nErlNifPid * enif_self(\n        ErlNifEnv* caller_env,\n        ErlNifPid* pid);\n```\n\nInitializes the [`ErlNifPid`](erl_nif.md#ErlNifPid) variable at `*pid` to\nrepresent the calling process.\n\nReturns `pid` if successful, or NULL if `caller_env` is not a\n[process bound environment](erl_nif.md#proc_bound_env).\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_self"},{"type":"extras","title":"enif_send() - erl_nif","doc":"```c\nint enif_send(\n        ErlNifEnv* caller_env,\n        ErlNifPid* to_pid,\n        ErlNifEnv* msg_env,\n        ERL_NIF_TERM msg);\n```\n\nSends a message to a process.\n\n- **`caller_env`** - The environment of the calling thread\n  ([process bound](erl_nif.md#proc_bound_env) or\n  [callback](erl_nif.md#callback_env) environment) or `NULL` if calling from a\n  custom thread not spawned by ERTS.\n\n- **`*to_pid`** - The pid of the receiving process. The pid is to refer to a\n  process on the local node.\n\n- **`msg_env`** - The environment of the message term. Must be a process\n  independent environment allocated with\n  [`enif_alloc_env`](erl_nif.md#enif_alloc_env) or NULL.\n\n- **`msg`** - The message term to send.\n\nReturns `true` if the message is successfully sent. Returns `false` if the send\noperation fails, that is:\n\n- `*to_pid` does not refer to an alive local process.\n- The currently executing process (that is, the sender) is not alive.\n\nThe message environment `msg_env` with all its terms (including `msg`) is\ninvalidated by a successful call to `enif_send`. The environment is to either be\nfreed with [`enif_free_env`](erl_nif.md#enif_free_env) or cleared for reuse with\n[`enif_clear_env`](erl_nif.md#enif_clear_env). An unsuccessful call will leave\n`msg` and `msg_env` still valid.\n\nIf `msg_env` is set to `NULL`, the `msg` term is copied and the original term\nand its environment is still valid after the call.\n\nThis function is thread-safe.\n\n> #### Note {: .info }\n>\n> Passing `msg_env` as `NULL` is only supported as from ERTS 8.0 (Erlang/OTP\n> 19).\n\nAvailable since OTP R14B","ref":"erl_nif.html#enif_send"},{"type":"extras","title":"enif_set_option() - erl_nif","doc":"```c\nint enif_set_option(\n        ErlNifEnv *env,\n        ErlNifOption opt,\n\t...);\n```\n\nSet an option. On success, zero will be returned. On failure, a non zero value\nwill be returned. Currently the following options can be set:\n\n- **[`ERL_NIF_OPT_DELAY_HALT`](erl_nif.md#ErlNifOption)**{: #delay_halt }\n  ```c\n  enif_set_option(env, ERL_NIF_OPT_DELAY_HALT)\n  ```\n\n  Enable delay of\n  runtime system halt with flushing enabled until all calls to NIFs in the NIF\n  library have returned. If the _delay halt_ feature has not been enabled, a\n  halt with flushing enabled may complete even though processes are still\n  executing inside NIFs in the NIF library. Note that by _returning_ we here\n  mean the first point where the NIF returns control back to the runtime system,\n  and _not_ the point where a call to a NIF return a value back to the Erlang\n  code that called the NIF. That is, if you schedule execution of a NIF, using\n  [`enif_schedule_nif()`](erl_nif.md#enif_schedule_nif), from within a NIF while\n  the system is halting, the scheduled NIF call will _not_ be executed even\n  though _delay halt_ has been enabled for the NIF library.\n\n  The runtime system halts when one of the [`erlang:halt()`](`erlang:halt/0`)\n  BIFs are called. By default flushing is enabled, but can be disabled using the\n  `erlang:halt/2` BIF. When flushing has been disabled, the _delay halt_ setting\n  will have no effect. That is, the runtime system will halt without waiting for\n  NIFs to return even if the _delay halt_ setting has been enabled. See the\n  [`{flush, boolean()}`](`m:erlang#halt_flush`) option of `erlang:halt/2` for\n  more information.\n\n  The `ERL_NIF_OPT_DELAY_HALT` option can only be set during loading of a NIF\n  library in a call to `enif_set_option()` inside a NIF library\n  [`load()`](erl_nif.md#load) or [`upgrade()`](erl_nif.md#upgrade) call, and\n  will fail if set somewhere else. The `env` argument _must_ be the callback\n  environment passed to the `load()` or the `upgrade()` call. This option can\n  also only be set once. That is, the _delay halt_ setting cannot be changed\n  once it has been enabled. The _delay halt_ setting is tied to the module\n  instance with which the NIF library instance has been loaded. That is, in case\n  both a new and old version of a module using the NIF library are loaded, they\n  can have the same or different _delay halt_ settings.\n\n  The _delay halt_ feature can be used in combination with an\n  [_on halt_](erl_nif.md#on_halt) callback. The _on halt_ callback is in this\n  case typically used to notify processes blocked in NIFs in the library that it\n  is time to return in order to let the runtime system complete the halting.\n  Such NIFs should be dirty NIFs, since ordinary NIFs should never block for a\n  long time.\n\n- **[`ERL_NIF_OPT_ON_HALT`](erl_nif.md#ErlNifOption)**{: #on_halt }\n  ```c\n  enif_set_option(env, ERL_NIF_OPT_ON_HALT, on_halt)\n  ```\n\n  Install a callback that will be called when the runtime system halts with\n  flushing enabled.\n\n  The runtime system halts when one of the [`erlang:halt()`](`erlang:halt/0`)\n  BIFs are called. By default flushing is enabled, but can be disabled using the\n  `erlang:halt/2` BIF. When flushing has been disabled, the runtime system will\n  halt without calling any _on halt_ callbacks even if such are installed. See\n  the [`{flush, boolean()}`](`m:erlang#halt_flush`) option of `erlang:halt/2`\n  for more information.\n\n  The `ERL_NIF_OPT_ON_HALT` option can only be set during loading of a NIF\n  library in a call to `enif_set_option()` inside a NIF library\n  [`load()`](erl_nif.md#load) or [`upgrade()`](erl_nif.md#upgrade) call, and\n  will fail if called somewhere else. The `env` argument _must_ be the callback\n  environment passed to the `load()` or the `upgrade()` call. The `on_halt`\n  argument should be a function pointer to the callback to install.\n\n  The [`on_halt`](erl_nif.md#ErlNifOnHaltCallback) callback will be tied to the\n  module instance with which the NIF library\n  instance has been loaded. That is, in case both a new and old version of a\n  module using the NIF library are loaded, they can both have different, none,\n  or the same _on halt_ callbacks installed. When unloading the NIF library\n  during a [code purge](`code:purge/1`), an installed _on halt_ callback will be\n  uninstalled. The `ERL_NIF_OPT_ON_HALT` option can also only be set once. That\n  is, the _on halt_ callback cannot be changed or removed once it has been\n  installed by any other means than purging the module instance that loaded the\n  NIF library.\n\n  When the installed _on halt_ callback is called, it will be passed a pointer\n  to `priv_data` as argument. The `priv_data` pointer can be set when loading\n  the NIF library.\n\n  The _on halt_ callback can be used in combination with\n  [_delay of halt_](erl_nif.md#delay_halt) until all calls into the library have\n  returned. The _on halt_ callback is in this case typically used to notify\n  processes blocked in NIFs in the library that it is time to return in order to\n  let the runtime system complete the halting. Such NIFs should be dirty NIFs,\n  since ordinary NIFs should never block for a long time.\n\n- **[`ERL_NIF_OPT_ON_UNLOAD_THREAD`](erl_nif.md#ErlNifOption)**{: #on_unload_thread }\n  ```c\n  enif_set_option(env, ERL_NIF_OPT_ON_UNLOAD_THREAD, on_unload_thread)\n  ```\n\n  Install a callback that will be called **by each scheduler thread** when the\n  module instance that the NIF library belongs to is purged as old. A typical\n  use is to release thread specific data.\n\n  The `ERL_NIF_OPT_ON_UNLOAD_THREAD` option can only be set during loading of a\n  NIF library inside a call to [`load()`](erl_nif.md#load) or\n  [`upgrade()`](erl_nif.md#upgrade) and will fail if called somewhere else. The\n  `env` argument _must_ be the callback environment passed to the `load()` or\n  the `upgrade()` call.\n\n  The [`on_unload_thread`](erl_nif.md#ErlNifOnUnloadThreadCallback) argument\n  should be a function pointer to the callback to install. The\n  _on_unload_thread_ callback will be tied to the module instance with which the\n  NIF library instance has been loaded. That is, in case both a new and old\n  version of a module using the NIF library are loaded, they can both have\n  different, none, or the same _on_unload_thread_ callbacks installed. The\n  `ERL_NIF_OPT_ON_UNLOAD_THREAD` option can only be set once and cannot be\n  changed or removed once it has been installed for a module instance.\n\n  When the installed _on_unload_thread_ callback is called, it will be passed a\n  pointer to `priv_data` as argument. The `priv_data` pointer can be set when\n  loading the NIF library.\n\n  The calls to the _on_unload_thread_ function are made concurrently by the\n  different scheduler threads. There is no synchronization enforced between the\n  threads. However, the single finalizing call to the [`unload()`](erl_nif.md#unload)\n  callback for the module instance will not be made until all calls to\n  _on_unload_thread_ have returned.\n\nAvailable since OTP 26.0","ref":"erl_nif.html#enif_set_option"},{"type":"extras","title":"enif_set_pid_undefined() - erl_nif","doc":"```c\nvoid enif_set_pid_undefined(\n        ErlNifPid* pid);\n```\n\nSets an [`ErlNifPid`](erl_nif.md#ErlNifPid) variable as undefined. See\n[`enif_is_pid_undefined`](erl_nif.md#enif_is_pid_undefined).\n\nAvailable since OTP 22.0","ref":"erl_nif.html#enif_set_pid_undefined"},{"type":"extras","title":"enif_sizeof_resource() - erl_nif","doc":"```c\nunsigned enif_sizeof_resource(\n        void* obj);\n```\n\nGets the byte size of resource object `obj` obtained by\n[`enif_alloc_resource`](erl_nif.md#enif_alloc_resource).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_sizeof_resource"},{"type":"extras","title":"enif_snprintf() - erl_nif","doc":"```c\nint enif_snprintf(\n        char *str,\n        size_t size,\n        const char *format,\n\t...);\n```\n\nSimilar to `snprintf` but this format string also accepts `\"%T\"`, which formats\nErlang terms of type [`ERL_NIF_TERM`](erl_nif.md#ERL_NIF_TERM).\n\nThis function is primarily intended for debugging purpose. It is not recommended\nto print very large terms with `%T`. The function may change `errno`, even if\nsuccessful.\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_snprintf"},{"type":"extras","title":"enif_system_info() - erl_nif","doc":"```c\nvoid enif_system_info(\n        ErlNifSysInfo *sys_info_ptr,\n        size_t size);\n```\n\nSame as [`driver_system_info`](erl_driver.md#driver_system_info).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_system_info"},{"type":"extras","title":"enif_term_to_binary() - erl_nif","doc":"```c\nint enif_term_to_binary(\n        ErlNifEnv *env,\n        ERL_NIF_TERM term,\n        ErlNifBinary *bin);\n```\n\nAllocates a new binary with [`enif_alloc_binary`](erl_nif.md#enif_alloc_binary)\nand stores the result of encoding `term` according to the Erlang external term\nformat.\n\nReturns `true` on success, or `false` if the allocation fails.\n\nSee also `erlang:term_to_binary/1` and\n[`enif_binary_to_term`](erl_nif.md#enif_binary_to_term).\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_term_to_binary"},{"type":"extras","title":"enif_term_type() - erl_nif","doc":"```c\nErlNifTermType enif_term_type(\n        ErlNifEnv *env,\n        ERL_NIF_TERM term);\n```\n\nDetermines the type of the given term. The term must be an ordinary Erlang term\nand not one of the special terms returned by\n[`enif_raise_exception`](erl_nif.md#enif_raise_exception),\n[`enif_schedule_nif`](erl_nif.md#enif_schedule_nif), or similar.\n\nThe following types are defined at the moment:\n\n- **`ERL_NIF_TERM_TYPE_ATOM`**\n\n- **`ERL_NIF_TERM_TYPE_BITSTRING`** - A bitstring or binary\n\n- **`ERL_NIF_TERM_TYPE_FLOAT`**\n\n- **`ERL_NIF_TERM_TYPE_FUN`**\n\n- **`ERL_NIF_TERM_TYPE_INTEGER`**\n\n- **`ERL_NIF_TERM_TYPE_LIST`** - A list, empty or not\n\n- **`ERL_NIF_TERM_TYPE_MAP`**\n\n- **`ERL_NIF_TERM_TYPE_PID`**\n\n- **`ERL_NIF_TERM_TYPE_PORT`**\n\n- **`ERL_NIF_TERM_TYPE_REFERENCE`**\n\n- **`ERL_NIF_TERM_TYPE_TUPLE`**\n\nNote that new types may be added in the future, so the caller must be prepared\nto handle unknown types.\n\nAvailable since OTP 22.0","ref":"erl_nif.html#enif_term_type"},{"type":"extras","title":"enif_thread_create() - erl_nif","doc":"```c\nint enif_thread_create(\n        char *name,\n        ErlNifTid *tid,\n        void * (*func)(void *),\n        void *args,\n        ErlNifThreadOpts *opts);\n```\n\nSame as [`erl_drv_thread_create`](erl_driver.md#erl_drv_thread_create).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_thread_create"},{"type":"extras","title":"enif_thread_exit() - erl_nif","doc":"```c\nvoid enif_thread_exit(\n        void *resp);\n```\n\nSame as [`erl_drv_thread_exit`](erl_driver.md#erl_drv_thread_exit).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_thread_exit"},{"type":"extras","title":"enif_thread_join() - erl_nif","doc":"```c\nint enif_thread_join(\n        ErlNifTid tid,\n        void **respp);\n```\n\nSame as [`erl_drv_thread_join`](erl_driver.md#erl_drv_thread_join).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_thread_join"},{"type":"extras","title":"enif_thread_name() - erl_nif","doc":"```c\nchar* enif_thread_name(\n        ErlNifTid tid);\n```\n\nSame as [`erl_drv_thread_name`](erl_driver.md#erl_drv_thread_name).\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_thread_name"},{"type":"extras","title":"enif_thread_opts_create() - erl_nif","doc":"```c\nErlNifThreadOpts * enif_thread_opts_create(\n        char *name);\n```\n\nSame as\n[`erl_drv_thread_opts_create`](erl_driver.md#erl_drv_thread_opts_create).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_thread_opts_create"},{"type":"extras","title":"enif_thread_opts_destroy() - erl_nif","doc":"```c\nvoid enif_thread_opts_destroy(\n        ErlNifThreadOpts *opts);\n```\n\nSame as\n[`erl_drv_thread_opts_destroy`](erl_driver.md#erl_drv_thread_opts_destroy).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_thread_opts_destroy"},{"type":"extras","title":"enif_thread_self() - erl_nif","doc":"```c\nErlNifTid enif_thread_self(void);\n```\n\nSame as [`erl_drv_thread_self`](erl_driver.md#erl_drv_thread_self).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_thread_self"},{"type":"extras","title":"enif_thread_type() - erl_nif","doc":"```c\nint enif_thread_type(void);\n```\n\nDetermine the type of currently executing thread. A positive value indicates a\nscheduler thread while a negative value or zero indicates another type of\nthread. Currently the following specific types exist (which may be extended in\nthe future):\n\n- **`ERL_NIF_THR_UNDEFINED`** - Undefined thread that is not a scheduler thread.\n\n- **`ERL_NIF_THR_NORMAL_SCHEDULER`** - A normal scheduler thread.\n\n- **`ERL_NIF_THR_DIRTY_CPU_SCHEDULER`** - A dirty CPU scheduler thread.\n\n- **`ERL_NIF_THR_DIRTY_IO_SCHEDULER`** - A dirty I/O scheduler thread.\n\nAvailable since OTP 19.0","ref":"erl_nif.html#enif_thread_type"},{"type":"extras","title":"enif_time_offset() - erl_nif","doc":"```c\nErlNifTime enif_time_offset(\n        ErlNifTimeUnit time_unit);\n```\n\nReturns the current time offset between\n[Erlang monotonic time](time_correction.md#erlang-monotonic-time) and\n[Erlang system time](time_correction.md#erlang-system-time) converted into the\n`time_unit` passed as argument.\n\n`time_unit` is the time unit of the returned value.\n\nReturns `ERL_NIF_TIME_ERROR` if called with an invalid time unit argument or if\ncalled from a thread that is not a scheduler thread.\n\nSee also [`ErlNifTime`](erl_nif.md#ErlNifTime) and\n[`ErlNifTimeUnit`](erl_nif.md#ErlNifTimeUnit).\n\nAvailable since OTP 18.3","ref":"erl_nif.html#enif_time_offset"},{"type":"extras","title":"enif_tsd_get() - erl_nif","doc":"```c\nvoid * enif_tsd_get(\n        ErlNifTSDKey key);\n```\n\nSame as [`erl_drv_tsd_get`](erl_driver.md#erl_drv_tsd_get).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_tsd_get"},{"type":"extras","title":"enif_tsd_key_create() - erl_nif","doc":"```c\nint enif_tsd_key_create(\n        char *name,\n        ErlNifTSDKey *key);\n```\n\nSame as [`erl_drv_tsd_key_create`](erl_driver.md#erl_drv_tsd_key_create).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_tsd_key_create"},{"type":"extras","title":"enif_tsd_key_destroy() - erl_nif","doc":"```c\nvoid enif_tsd_key_destroy(\n        ErlNifTSDKey key);\n```\n\nSame as [`erl_drv_tsd_key_destroy`](erl_driver.md#erl_drv_tsd_key_destroy).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_tsd_key_destroy"},{"type":"extras","title":"enif_tsd_set() - erl_nif","doc":"```c\nvoid enif_tsd_set(\n        ErlNifTSDKey key,\n        void *data);\n```\n\nSame as [`erl_drv_tsd_set`](erl_driver.md#erl_drv_tsd_set).\n\nAvailable since OTP R13B04","ref":"erl_nif.html#enif_tsd_set"},{"type":"extras","title":"enif_vfprintf() - erl_nif","doc":"```c\nint enif_vfprintf(\n        FILE *stream,\n        const char *format,\n        va_list ap);\n```\n\nEquivalent to [`enif_fprintf`](erl_nif.md#enif_fprintf) except that its called\nwith a `va_list` instead of a variable number of arguments.\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_vfprintf"},{"type":"extras","title":"enif_vsnprintf() - erl_nif","doc":"```c\nint enif_vsnprintf(\n        char *str,\n        size_t size,\n        const char *format,\n        va_list ap);\n```\n\nEquivalent to [`enif_snprintf`](erl_nif.md#enif_snprintf) except that its called\nwith a `va_list` instead of a variable number of arguments.\n\nAvailable since OTP 21.0","ref":"erl_nif.html#enif_vsnprintf"},{"type":"extras","title":"enif_whereis_pid() - erl_nif","doc":"```c\nint enif_whereis_pid(\n        ErlNifEnv *caller_env,\n        ERL_NIF_TERM name,\n        ErlNifPid *pid);\n```\n\nLooks up a process by its registered name.\n\n- **`caller_env`** - The environment of the calling thread\n  ([process bound](erl_nif.md#proc_bound_env) or\n  [callback](erl_nif.md#callback_env) environment) or `NULL` if calling from a\n  custom thread not spawned by ERTS.\n\n- **`name`** - The name of a registered process, as an atom.\n\n- **`*pid`** - The [`ErlNifPid`](erl_nif.md#ErlNifPid) in which the resolved\n  process id is stored.\n\nOn success, sets `*pid` to the local process registered with `name` and returns\n`true`. If `name` is not a registered process, or is not an atom, `false` is\nreturned and `*pid` is unchanged.\n\nWorks as `erlang:whereis/1`, but restricted to processes. See\n[`enif_whereis_port`](erl_nif.md#enif_whereis_port) to resolve registered ports.\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_whereis_pid"},{"type":"extras","title":"enif_whereis_port() - erl_nif","doc":"```c\nint enif_whereis_port(\n        ErlNifEnv *caller_env,\n        ERL_NIF_TERM name,\n        ErlNifPort *port);\n```\n\nLooks up a port by its registered name.\n\n- **`caller_env`** - The environment of the calling thread\n  ([process bound](erl_nif.md#proc_bound_env) or\n  [callback](erl_nif.md#callback_env) environment) or `NULL` if calling from a\n  custom thread not spawned by ERTS.\n\n- **`name`** - The name of a registered port, as an atom.\n\n- **`*port`** - The [`ErlNifPort`](erl_nif.md#ErlNifPort) in which the resolved\n  port id is stored.\n\nOn success, sets `*port` to the port registered with `name` and returns `true`.\nIf `name` is not a registered port, or is not an atom, `false` is returned and\n`*port` is unchanged.\n\nWorks as `erlang:whereis/1`, but restricted to ports. See\n[`enif_whereis_pid`](erl_nif.md#enif_whereis_pid) to resolve registered\nprocesses.\n\nAvailable since OTP 20.0","ref":"erl_nif.html#enif_whereis_port"},{"type":"extras","title":"See Also - erl_nif","doc":"`erlang:load_nif/2`\n[NIFs (tutorial)](`e:system:nif.md`)\n[Debugging NIFs and Port Drivers](`e:system:debugging.md`)","ref":"erl_nif.html#see-also"},{"type":"extras","title":"erts_alloc","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2023-2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# erts_alloc\n\nAn Erlang runtime system internal memory allocator library.","ref":"erts_alloc.html"},{"type":"extras","title":"Description - erts_alloc","doc":"`erts_alloc` is an Erlang runtime system internal memory allocator library.\n`erts_alloc` provides the Erlang runtime system with a number of memory\nallocators.","ref":"erts_alloc.html#description"},{"type":"extras","title":"Allocators - erts_alloc","doc":"The following allocators are present:\n\n- **`temp_alloc`** - Allocator used for temporary allocations.\n\n- **`eheap_alloc`** - Allocator used for Erlang heap data, such as Erlang\n  process heaps.\n\n- **`binary_alloc`** - Allocator used for Erlang binary data.\n\n- **`ets_alloc`** - Allocator used for `ets` data.\n\n- **`driver_alloc`** - Allocator used for driver data.\n\n- **`literal_alloc`** - Allocator used for constant terms in Erlang code.\n\n- **`sl_alloc`** - Allocator used for memory blocks that are expected to be\n  short-lived.\n\n- **`ll_alloc`** - Allocator used for memory blocks that are expected to be\n  long-lived, for example, Erlang code.\n\n- **`fix_alloc`** - A fast allocator used for some frequently used fixed size\n  data types.\n\n- **`std_alloc`** - Allocator used for most memory blocks not allocated through\n  any of the other allocators described above.\n\n- **`sys_alloc`** - This is normally the default `malloc` implementation used on\n  the specific OS.\n\n- **`mseg_alloc`** - A memory segment allocator. It is used by other allocators\n  for allocating memory segments and is only available on systems that have the\n  `mmap` system call. Memory segments that are deallocated are kept for a while\n  in a segment cache before they are destroyed. When segments are allocated,\n  cached segments are used if possible instead of creating new segments. This to\n  reduce the number of system calls made.\n\n`sys_alloc`, `literal_alloc` and `temp_alloc` are always enabled and cannot be\ndisabled. `mseg_alloc` is always enabled if it is available and an allocator\nthat uses it is enabled. All other allocators can be\n[enabled or disabled](erts_alloc.md#M_e). By default all allocators are enabled.\nWhen an allocator is disabled, `sys_alloc` is used instead of the disabled\nallocator.\n\nThe main idea with the `erts_alloc` library is to separate memory blocks that\nare used differently into different memory areas, to achieve less memory\nfragmentation. By putting less effort in finding a good fit for memory blocks\nthat are frequently allocated than for those less frequently allocated, a\nperformance gain can be achieved.\n\n[](){: #alloc_util }","ref":"erts_alloc.html#allocators"},{"type":"extras","title":"The alloc_util Framework - erts_alloc","doc":"Internally a framework called `alloc_util` is used for implementing allocators.\n`sys_alloc` and `mseg_alloc` do not use this framework, so the following does\n_not_ apply to them.\n\nAn allocator manages multiple areas, called carriers, in which memory blocks are\nplaced. A carrier is either placed in a separate memory segment (allocated\nthrough `mseg_alloc`), or in the heap segment (allocated through `sys_alloc`).\n\n- Multiblock carriers are used for storage of several blocks.\n- Singleblock carriers are used for storage of one block.\n- Blocks that are larger than the value of the singleblock carrier threshold\n  ([`sbct`](erts_alloc.md#M_sbct)) parameter are placed in singleblock carriers.\n- Blocks that are smaller than the value of parameter `sbct` are placed in\n  multiblock carriers.\n\nNormally an allocator creates a \"main multiblock carrier\". Main multiblock\ncarriers are never deallocated. The size of the main multiblock carrier is\ndetermined by the value of parameter [`mmbcs`](erts_alloc.md#M_mmbcs).\n\n[](){: #mseg_mbc_sizes } Sizes of multiblock carriers allocated through\n`mseg_alloc` are decided based on the following parameters:\n\n- The values of the largest multiblock carrier size\n  ([`lmbcs`](erts_alloc.md#M_lmbcs))\n- The smallest multiblock carrier size ([`smbcs`](erts_alloc.md#M_smbcs))\n- The multiblock carrier growth stages ([`mbcgs`](erts_alloc.md#M_mbcgs))\n\nIf `nc` is the current number of multiblock carriers (the main multiblock\ncarrier excluded) managed by an allocator, the size of the next `mseg_alloc`\nmultiblock carrier allocated by this allocator is roughly\n`smbcs+nc*(lmbcs-smbcs)/mbcgs` when `nc <= mbcgs`, and `lmbcs` when\n`nc > mbcgs`. If the value of parameter `sbct` is larger than the value of\nparameter `lmbcs`, the allocator may have to create multiblock carriers that are\nlarger than the value of parameter `lmbcs`, though. Singleblock carriers\nallocated through `mseg_alloc` are sized to whole pages.\n\nSizes of carriers allocated through `sys_alloc` are decided based on the value\nof the `sys_alloc` carrier size ([`ycs`](erts_alloc.md#Muycs)) parameter. The\nsize of a carrier is the least number of multiples of the value of parameter\n`ycs` satisfying the request.\n\nCoalescing of free blocks are always performed immediately. Boundary tags\n(headers and footers) in free blocks are used, which makes the time complexity\nfor coalescing constant.\n\n[](){: #strategy } The memory allocation strategy used for multiblock carriers\nby an allocator can be configured using parameter [`as`](erts_alloc.md#M_as).\nThe following strategies are available:\n\n- **Best fit** - Strategy: Find the smallest block satisfying the requested\n  block size.\n\n  Implementation: A balanced binary search tree is used. The time complexity is\n  proportional to log N, where N is the number of sizes of free blocks.\n\n- **Address order best fit** - Strategy: Find the smallest block satisfying the\n  requested block size. If multiple blocks are found, choose the one with the\n  lowest address.\n\n  Implementation: A balanced binary search tree is used. The time complexity is\n  proportional to log N, where N is the number of free blocks.\n\n- **Address order first fit** - Strategy: Find the block with the lowest address\n  satisfying the requested block size.\n\n  Implementation: A balanced binary search tree is used. The time complexity is\n  proportional to log N, where N is the number of free blocks.\n\n- **Address order first fit carrier best fit** - Strategy: Find the _carrier_\n  with the lowest address that can satisfy the requested block size, then find a\n  block within that carrier using the \"best fit\" strategy.\n\n  Implementation: Balanced binary search trees are used. The time complexity is\n  proportional to log N, where N is the number of free blocks.\n\n- **Address order first fit carrier address order best fit** - Strategy: Find\n  the _carrier_ with the lowest address that can satisfy the requested block\n  size, then find a block within that carrier using the \"address order best fit\"\n  strategy.\n\n  Implementation: Balanced binary search trees are used. The time complexity is\n  proportional to log N, where N is the number of free blocks.\n\n- **Age order first fit carrier address order first fit** - Strategy: Find the\n  _oldest carrier_ that can satisfy the requested block size, then find a block\n  within that carrier using the \"address order first fit\" strategy.\n\n  Implementation: A balanced binary search tree is used. The time complexity is\n  proportional to log N, where N is the number of free blocks.\n\n- **Age order first fit carrier best fit** - Strategy: Find the _oldest carrier_\n  that can satisfy the requested block size, then find a block within that\n  carrier using the \"best fit\" strategy.\n\n  Implementation: Balanced binary search trees are used. The time complexity is\n  proportional to log N, where N is the number of free blocks.\n\n- **Age order first fit carrier address order best fit** - Strategy: Find the\n  _oldest carrier_ that can satisfy the requested block size, then find a block\n  within that carrier using the \"address order best fit\" strategy.\n\n  Implementation: Balanced binary search trees are used. The time complexity is\n  proportional to log N, where N is the number of free blocks.\n\n- **Good fit** - Strategy: Try to find the best fit, but settle for the best fit\n  found during a limited search.\n\n  Implementation: The implementation uses segregated free lists with a maximum\n  block search depth (in each list) to find a good fit fast. When the maximum\n  block search depth is small (by default 3), this implementation has a time\n  complexity that is constant. The maximum block search depth can be configured\n  using parameter [`mbsd`](erts_alloc.md#M_mbsd).\n\n- **A fit** - Strategy: Do not search for a fit, inspect only one free block to\n  see if it satisfies the request. This strategy is only intended to be used for\n  temporary allocations.\n\n  Implementation: Inspect the first block in a free-list. If it satisfies the\n  request, it is used, otherwise a new carrier is created. The implementation\n  has a time complexity that is constant.\n\n  As from ERTS 5.6.1 the emulator refuses to use this strategy on other\n  allocators than `temp_alloc`. This because it only causes problems for other\n  allocators.\n\nApart from the ordinary allocators described above, some pre-allocators are used\nfor some specific data types. These pre-allocators pre-allocate a fixed amount\nof memory for certain data types when the runtime system starts. As long as\npre-allocated memory is available, it is used. When no pre-allocated memory is\navailable, memory is allocated in ordinary allocators. These pre-allocators are\ntypically much faster than the ordinary allocators, but can only satisfy a\nlimited number of requests.\n\n[](){: #flags }","ref":"erts_alloc.html#the-alloc_util-framework"},{"type":"extras","title":"System Flags Effecting erts_alloc - erts_alloc","doc":"> #### Warning {: .warning }\n>\n> Only use these flags if you are sure what you are doing. Unsuitable settings\n> can cause serious performance degradation and even a system crash at any time\n> during operation.\n\nMemory allocator system flags have the following syntax: `+M    `, where\n` ` is a letter identifying a subsystem, ` ` is a parameter, and ` ` is\nthe value to use. The flags can be passed to the Erlang emulator\n([`erl(1)`](erl_cmd.md)) as command-line arguments.\n\nSystem flags effecting specific allocators have an uppercase letter as ` `.\nThe following letters are used for the allocators:\n\n- `B: binary_alloc`\n- `D: std_alloc`\n- `E: ets_alloc`\n- `F: fix_alloc`\n- `H: eheap_alloc`\n- `I: literal_alloc`\n- `L: ll_alloc`\n- `M: mseg_alloc`\n- `R: driver_alloc`\n- `S: sl_alloc`\n- `T: temp_alloc`\n- `Y: sys_alloc`","ref":"erts_alloc.html#system-flags-effecting-erts_alloc"},{"type":"extras","title":"Flags for Configuration of mseg_alloc - erts_alloc","doc":"- **`+MMamcbf  `{: #MMamcbf }** - Absolute maximum cache bad fit (in\n  kilobytes). A segment in the memory segment cache is not reused if its size\n  exceeds the requested size with more than the value of this parameter.\n  Defaults to `4096`.\n\n- **`+MMrmcbf  `{: #MMrmcbf }** - Relative maximum cache bad fit (in\n  percent). A segment in the memory segment cache is not reused if its size\n  exceeds the requested size with more than relative maximum cache bad fit\n  percent of the requested size. Defaults to `20`.\n\n- **`+MMlp on|off`{: #MMlp }** - Enables the use of large pages, sometimes known\n  as huge pages or super pages, for mapping memory segment allocations. Large\n  pages improve performance by reducing TLB pressure but they can sometimes be\n  costly to allocate or can only be allocated on a best-effort basis.  Currently\n  only affects memory segments allocated in a super carrier. Defaults to `off`.\n\n- **`+MMsco true|false`{: #MMsco }** - Sets [super carrier](erts_alloc.md#MMscs)\n  only flag. Defaults to `true`. When a super carrier is used and this flag is\n  `true`, `mseg_alloc` only creates carriers in the super carrier. Notice that\n  the `alloc_util` framework can create `sys_alloc` carriers, so if you want all\n  carriers to be created in the super carrier, you therefore want to disable use\n  of `sys_alloc` carriers by also passing [`+Musac false`](erts_alloc.md#Musac).\n  When the flag is `false`, `mseg_alloc` tries to create carriers outside of the\n  super carrier when the super carrier is full.\n\n  > #### Note {: .info }\n  >\n  > Setting this flag to `false` is not supported on all systems. The flag is\n  > then ignored.\n\n- **`+MMscrfsd  `{: #MMscrfsd }** - Sets\n  [super carrier](erts_alloc.md#MMscs) reserved free segment descriptors.\n  Defaults to `65536`. This parameter determines the amount of memory to reserve\n  for free segment descriptors used by the super carrier. If the system runs out\n  of reserved memory for free segment descriptors, other memory is used. This\n  can however cause fragmentation issues, so you want to ensure that this never\n  happens. The maximum amount of free segment descriptors used can be retrieved\n  from the `erts_mmap` tuple part of the result from calling\n  [`erlang:system_info({allocator, mseg_alloc})`](`m:erlang#system_info_allocator_tuple`).\n\n- **`+MMscrpm true|false`{: #MMscrpm }** - Sets\n  [super carrier](erts_alloc.md#MMscs) reserve physical memory flag. Defaults to\n  `true`. When this flag is `true`, physical memory is reserved for the whole\n  super carrier at once when it is created. The reservation is after that left\n  unchanged. When this flag is set to `false`, only virtual address space is\n  reserved for the super carrier upon creation. The system attempts to reserve\n  physical memory upon carrier creations in the super carrier, and attempt to\n  unreserve physical memory upon carrier destructions in the super carrier.\n\n  > #### Note {: .info }\n  >\n  > What reservation of physical memory means, highly depends on the operating\n  > system, and how it is configured. For example, different memory overcommit\n  > settings on Linux drastically change the behavior.\n  >\n  > Setting this flag to `false` is possibly not supported on all systems. The\n  > flag is then ignored.\n\n- **`+MMscs  `{: #MMscs }** - Sets super carrier size (in MB).\n  Defaults to `0`, that is, the super carrier is by default disabled. The super\n  carrier is a large continuous area in the virtual address space. `mseg_alloc`\n  always tries to create new carriers in the super carrier if it exists. Notice\n  that the `alloc_util` framework can create `sys_alloc` carriers. For more\n  information, see [`+MMsco`](erts_alloc.md#MMsco).\n\n- **`+MMmcs  `{: #MMmcs }** - Maximum cached segments. The maximum number\n  of memory segments stored in the memory segment cache. Valid range is\n  `[0, 30]`. Defaults to `10`.","ref":"erts_alloc.html#flags-for-configuration-of-mseg_alloc"},{"type":"extras","title":"Flags for Configuration of sys_alloc - erts_alloc","doc":"- **`+MYe true`{: #MYe }** - Enables `sys_alloc`.\n\n  > #### Note {: .info }\n  >\n  > `sys_alloc` cannot be disabled.\n\n- **`+MYtt  `{: #MYtt }** - Trim threshold size (in kilobytes). This is the\n  maximum amount of free memory at the top of the heap (allocated by `sbrk`)\n  that is kept by `malloc` (not released to the operating system). When the\n  amount of free memory at the top of the heap exceeds the trim threshold,\n  `malloc` releases it (by calling `sbrk`). Trim threshold is specified in\n  kilobytes. Defaults to `128`.\n\n  > #### Note {: .info }\n  >\n  > This flag has effect only when the emulator is linked with the GNU C\n  > library, and uses its `malloc` implementation.\n\n- **`+MYtp  `{: #MYtp }** - Top pad size (in kilobytes). This is the amount\n  of extra memory that is allocated by `malloc` when `sbrk` is called to get\n  more memory from the operating system. Defaults to `0`.\n\n  > #### Note {: .info }\n  >\n  > This flag has effect only when the emulator is linked with the GNU C\n  > library, and uses its `malloc` implementation.","ref":"erts_alloc.html#flags-for-configuration-of-sys_alloc"},{"type":"extras","title":"Flags for Configuration of Allocators Based on alloc_util - erts_alloc","doc":"If `u` is used as subsystem identifier (that is, `  = u`), all allocators\nbased on `alloc_util` are effected. If `B`, `D`, `E`, `F`, `H`, `I`, `L`, `R`,\n`S`, `T`, `X` is used as subsystem identifier, only the specific allocator\nidentifier is effected.\n\n- **`+M acul  |de`{: #M_acul }** - Abandon carrier utilization\n  limit. A valid ` ` is an integer in the range `[0, 100]`\n  representing utilization in percent. When a utilization value > 0 is used,\n  allocator instances are allowed to abandon multiblock carriers. If `de`\n  (default enabled) is passed instead of a ` `, a recommended\n  non-zero utilization value is used. The value chosen depends on the allocator\n  type and can be changed between ERTS versions. Defaults to `de`, but this can\n  be changed in the future.\n\n  Carriers are abandoned when memory utilization in the allocator instance falls\n  below the utilization value used. Once a carrier is abandoned, no new\n  allocations are made in it. When an allocator instance gets an increased\n  multiblock carrier need, it first tries to fetch an abandoned carrier from\n  another allocator instance. If no abandoned carrier can be fetched, it creates\n  a new empty carrier. When an abandoned carrier has been fetched, it will\n  function as an ordinary carrier. This feature has special requirements on the\n  [allocation strategy](erts_alloc.md#M_as) used. Only the strategies `aoff`,\n  `aoffcbf`, `aoffcaobf`, `ageffcaoff`m, `ageffcbf` and `ageffcaobf` support\n  abandoned carriers.\n\n  This feature also requires\n  [multiple thread specific instances](erts_alloc.md#M_t) to be enabled. When\n  enabling this feature, multiple thread-specific instances are enabled if not\n  already enabled, and the `aoffcbf` strategy is enabled if the current strategy\n  does not support abandoned carriers. This feature can be enabled on all\n  allocators based on the `alloc_util` framework, except `temp_alloc` (which\n  would be pointless).\n\n- **`+M acfml  `{: #M_acfml }** - Abandon carrier free block min limit.\n  A valid ` ` is a positive integer representing a block size limit. The\n  largest free block in a carrier must be at least `bytes` large, for the\n  carrier to be abandoned. The default is zero but can be changed in the future.\n\n  See also [`acul`](erts_alloc.md#M_acul).\n\n- **`+M acnl  `{: #M_acnl }** - Abandon carrier number limit. A valid\n  ` ` is a positive integer representing max number of abandoned carriers\n  per allocator instance. Defaults to 1000 which will practically disable the\n  limit, but this can be changed in the future.\n\n  See also [`acul`](erts_alloc.md#M_acul).\n\n- **`+M acful  |de`{: #M_acful }** - Abandon carrier free\n  utilization limit. When the utilization of a carrier falls belows this limit\n  erts_alloc instructs the OS that unused memory in the carrier can be re-used\n  for allocation by other OS procesesses. On Unix this is done by calling\n  `madvise(..., ..., MADV_FREE)` on the unused memory region, on Windows it is\n  done by calling `VirtualAlloc(..., ..., MEM_RESET, PAGE_READWRITE)`. Defaults\n  to 0 which means that no memory will be marked as re-usable by the OS.\n\n  A valid ` ` is an integer in the range `[0, 100]` representing\n  utilization in percent. If this value is larger than the `acul` limit it will\n  be lowered to the current `acul` limit. If `de` (default enabled) is passed\n  instead of a ` `, a recommended non-zero utilization value is\n  used. The value chosen depends on the allocator type and can be changed\n  between ERTS versions.\n\n  See also [`acul`](erts_alloc.md#M_acul).\n\n- **`+M as bf|aobf|aoff|aoffcbf|aoffcaobf|ageffcaoff|ageffcbf|ageffcaobf|gf|af`{:\n  #M_as }** - Allocation strategy. The following strategies are valid:\n\n  - `bf` (best fit)\n  - `aobf` (address order best fit)\n  - `aoff` (address order first fit)\n  - `aoffcbf` (address order first fit carrier best fit)\n  - `aoffcaobf` (address order first fit carrier address order best fit)\n  - `ageffcaoff` (age order first fit carrier address order first fit)\n  - `ageffcbf` (age order first fit carrier best fit)\n  - `ageffcaobf` (age order first fit carrier address order best fit)\n  - `gf` (good fit)\n  - `af` (a fit)\n\n  See the description of allocation strategies in section\n  [The alloc_util Framework](erts_alloc.md#strategy).\n\n- **`+M asbcst  `{: #M_asbcst }** - Absolute singleblock carrier shrink\n  threshold (in kilobytes). When a block located in an `mseg_alloc` singleblock\n  carrier is shrunk, the carrier is left unchanged if the amount of unused\n  memory is less than this threshold, otherwise the carrier is shrunk. See also\n  [`rsbcst`](erts_alloc.md#M_rsbcst).\n\n- **`+M atags true|false`{: #M_atags }** - Adds a small tag to each allocated\n  block that contains basic information about what it is and who allocated it.\n  Use the `m:instrument` module to inspect this information.\n\n  The runtime overhead is two words per allocation when enabled. This may change\n  at any time in the future.\n\n  The default is `true` for `binary_alloc` and `driver_alloc`, and `false` for\n  the other allocator types.\n\n- **`+M cp B|D|E|F|H||L|R|S|@|:`{: #M_cp }** - Set carrier pool to use for the\n  allocator. Memory carriers will only migrate between allocator instances that\n  use the same carrier pool. The following carrier pool names exist:\n\n  - **`B`** - Carrier pool associated with `binary_alloc`.\n\n  - **`D`** - Carrier pool associated with `std_alloc`.\n\n  - **`E`** - Carrier pool associated with `ets_alloc`.\n\n  - **`F`** - Carrier pool associated with `fix_alloc`.\n\n  - **`H`** - Carrier pool associated with `eheap_alloc`.\n\n  - **`L`** - Carrier pool associated with `ll_alloc`.\n\n  - **`R`** - Carrier pool associated with `driver_alloc`.\n\n  - **`S`** - Carrier pool associated with `sl_alloc`.\n\n  - **`@`** - Carrier pool associated with the system as a whole.\n\n  Besides passing carrier pool name as value to the parameter, you can also pass\n  `:`. By passing `:` instead of carrier pool name, the allocator will use the\n  carrier pool associated with itself. By passing the command line argument\n  \"`+Mucg :`\", all allocators that have an associated carrier pool will use the\n  carrier pool associated with themselves.\n\n  The association between carrier pool and allocator is very loose. The\n  associations are more or less only there to get names for the amount of\n  carrier pools needed and names of carrier pools that can be easily identified\n  by the `:` value.\n\n  This flag is only valid for allocators that have an associated carrier pool.\n  Besides that, there are no restrictions on carrier pools to use for an\n  allocator.\n\n  Currently each allocator with an associated carrier pool defaults to using its\n  own associated carrier pool.\n\n- **`+M e true|false`{: #M_e }** - Enables allocator ` `.\n\n- **`+M lmbcs  `{: #M_lmbcs }** - Largest (`mseg_alloc`) multiblock\n  carrier size (in kilobytes). See the description on how sizes for `mseg_alloc`\n  multiblock carriers are decided in section\n  [The alloc_util Framework](erts_alloc.md#mseg_mbc_sizes). On 32-bit Unix style\n  OS this limit cannot be set > 64 MB.\n\n- **`+M mbcgs  `{: #M_mbcgs }** - (`mseg_alloc`) multiblock carrier\n  growth stages. See the description on how sizes for `mseg_alloc` multiblock\n  carriers are decided in section\n  [The alloc_util Framework](erts_alloc.md#mseg_mbc_sizes).\n\n- **`+M mbsd  `{: #M_mbsd }** - Maximum block search depth. This flag\n  has effect only if the good fit strategy is selected for allocator ` `. When\n  the good fit strategy is used, free blocks are placed in segregated\n  free-lists. Each free-list contains blocks of sizes in a specific range. The\n  maximum block search depth sets a limit on the maximum number of blocks to\n  inspect in a free-list during a search for suitable block satisfying the\n  request.\n\n- **`+M mmbcs  `{: #M_mmbcs }** - Main multiblock carrier size. Sets the\n  size of the main multiblock carrier for allocator ` `. The main multiblock\n  carrier is allocated through `sys_alloc` and is never deallocated.\n\n- **`+M mmmbc  `{: #M_mmmbc }** - Maximum `mseg_alloc` multiblock\n  carriers. Maximum number of multiblock carriers allocated through `mseg_alloc`\n  by allocator ` `. When this limit is reached, new multiblock carriers are\n  allocated through `sys_alloc`.\n\n- **`+M mmsbc  `{: #M_mmsbc }** - Maximum `mseg_alloc` singleblock\n  carriers. Maximum number of singleblock carriers allocated through\n  `mseg_alloc` by allocator ` `. When this limit is reached, new singleblock\n  carriers are allocated through `sys_alloc`.\n\n- **`+M ramv  `{: #M_ramv }** - Realloc always moves. When enabled,\n  reallocate operations are more or less translated into an allocate, copy, free\n  sequence. This often reduces memory fragmentation, but costs performance.\n\n- **`+M rmbcmt  `{: #M_rmbcmt }** - Relative multiblock carrier move\n  threshold (in percent). When a block located in a multiblock carrier is\n  shrunk, the block is moved if the ratio of the size of the freed memory\n  compared to the previous size is more than this threshold, otherwise the block\n  is shrunk at the current location.\n\n- **`+M rsbcmt  `{: #M_rsbcmt }** - Relative singleblock carrier move\n  threshold (in percent). When a block located in a singleblock carrier is\n  shrunk to a size smaller than the value of parameter\n  [`sbct`](erts_alloc.md#M_sbct), the block is left unchanged in the singleblock\n  carrier if the ratio of unused memory is less than this threshold, otherwise\n  it is moved into a multiblock carrier.\n\n- **`+M rsbcst  `{: #M_rsbcst }** - Relative singleblock carrier shrink\n  threshold (in percent). When a block located in an `mseg_alloc` singleblock\n  carrier is shrunk, the carrier is left unchanged if the ratio of unused memory\n  is less than this threshold, otherwise the carrier is shrunk. See also\n  [`asbcst`](erts_alloc.md#M_asbcst).\n\n- **`+M sbct  `{: #M_sbct }** - Singleblock carrier threshold (in\n  kilobytes). Blocks larger than this threshold are placed in singleblock\n  carriers. Blocks smaller than this threshold are placed in multiblock\n  carriers. On 32-bit Unix style OS this threshold cannot be set > 8 MB.\n\n- **`+M smbcs  `{: #M_smbcs }** - Smallest (`mseg_alloc`) multiblock\n  carrier size (in kilobytes). See the description on how sizes for `mseg_alloc`\n  multiblock carriers are decided in section\n  [The alloc_util Framework](erts_alloc.md#mseg_mbc_sizes).\n\n- **`+M t true|false`{: #M_t }** - Multiple, thread-specific instances of the\n  allocator. Default behavior is `NoSchedulers+1` instances. Each scheduler uses\n  a lock-free instance of its own and other threads use a common instance.\n\n  Before ERTS 5.9 it was possible to configure a smaller number of\n  thread-specific instances than schedulers. This is, however, not possible\n  anymore.","ref":"erts_alloc.html#flags-for-configuration-of-allocators-based-on-alloc_util"},{"type":"extras","title":"Flags for Configuration of alloc_util - erts_alloc","doc":"All allocators based on `alloc_util` are effected.\n\n- **`+Muycs  `{: #Muycs }** - `sys_alloc` carrier size. Carriers allocated\n  through `sys_alloc` are allocated in sizes that are multiples of the\n  `sys_alloc` carrier size. This is not true for main multiblock carriers and\n  carriers allocated during a memory shortage, though.\n\n- **`+Mummc  `{: #Mummc }** - Maximum `mseg_alloc` carriers. Maximum\n  number of carriers placed in separate memory segments. When this limit is\n  reached, new carriers are placed in memory retrieved from `sys_alloc`.\n\n- **`+Musac  `{: #Musac }** - Allow `sys_alloc` carriers. Defaults to\n  `true`. If set to `false`, `sys_alloc` carriers are never created by\n  allocators using the `alloc_util` framework.","ref":"erts_alloc.html#flags-for-configuration-of-alloc_util"},{"type":"extras","title":"Special Flag for literal_alloc - erts_alloc","doc":"- **`+MIscs  `{: #MIscs }** - `literal_alloc` super carrier size (in\n  MB). The amount of _virtual_ address space reserved for literal terms in\n  Erlang code on 64-bit architectures. Defaults to `1024` (that is, 1 GB), which\n  is usually sufficient. The flag is ignored on 32-bit architectures.","ref":"erts_alloc.html#special-flag-for-literal_alloc"},{"type":"extras","title":"Instrumentation Flags - erts_alloc","doc":"- **`+M atags`** - Adds a small tag to each allocated block that contains\n  basic information about what it is and who allocated it. See\n  [`+M atags`](erts_alloc.md#M_atags) for a more complete description.\n\n> #### Note {: .info }\n>\n> When instrumentation of the emulator is enabled, the emulator uses more memory\n> and runs slower.","ref":"erts_alloc.html#instrumentation-flags"},{"type":"extras","title":"Other Flags - erts_alloc","doc":"- **`+Mea min|max|r9c|r10b|r11b|config`{: #Mea }** - Options:\n\n  - **`min`** - Disables all allocators that can be disabled.\n\n  - **`max`** - Enables all allocators (default).\n\n  - **`r9c|r10b|r11b`** - Configures all allocators as they were configured in\n    respective Erlang/OTP release. These will eventually be removed.\n\n- **`+Mlpm all|no`{: #Mlpm }** - Lock physical memory. Defaults to `no`, that\n  is, no physical memory is locked. If set to `all`, all memory mappings made by\n  the runtime system are locked into physical memory. If set to `all`, the\n  runtime system fails to start if this feature is not supported, the user has\n  not got enough privileges, or the user is not allowed to lock enough physical\n  memory. The runtime system also fails with an out of memory condition if the\n  user limit on the amount of locked memory is reached.\n\n- **`+Mdai max| `{: #Mdai }** - Set amount of dirty allocator instances\n  used. Defaults to `0`. That is, by default no instances will be used. The\n  maximum amount of instances equals the amount of dirty CPU schedulers on the\n  system.\n\n  By default, each normal scheduler thread has its own allocator instance for\n  each allocator. All other threads in the system, including dirty schedulers,\n  share one instance for each allocator. By enabling dirty allocator instances,\n  dirty schedulers will get and use their own set of allocator instances. Note\n  that these instances are not exclusive to each dirty scheduler, but instead\n  shared among dirty schedulers. The more instances used the less risk of lock\n  contention on these allocator instances. Memory consumption do however\n  increase with increased amount of dirty allocator instances.","ref":"erts_alloc.html#other-flags"},{"type":"extras","title":"Notes - erts_alloc","doc":"Only some default values have been presented here. For information about the\ncurrently used settings and the current status of the allocators, see\n[`erlang:system_info(allocator)`](`m:erlang#system_info_allocator`) and\n[`erlang:system_info({allocator, Alloc})`](`m:erlang#system_info_allocator_tuple`).\n\n> #### Note {: .info }\n>\n> Most of these flags are highly implementation-dependent and can be changed or\n> removed without prior notice.\n>\n> `erts_alloc` is not obliged to strictly use the settings that have been passed\n> to it (it can even ignore them).","ref":"erts_alloc.html#notes"},{"type":"extras","title":"See Also - erts_alloc","doc":"[`erl(1)`](erl_cmd.md), `m:erlang`, `m:instrument`","ref":"erts_alloc.html#see-also"},{"type":"extras","title":"Automatic Yielding of C Code","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nAutomatic Yielding of C Code\n============================\n\nIntroduction\n------------\n\nErlang [NIFs](http://erlang.org/doc/tutorial/nif.html) and\n[BIFs](http://erlang.org/pipermail/erlang-questions/2009-October/046899.html)\nshould not run for a too long time without yielding (often referred to\nas trapping in the source code of ERTS). The Erlang/OTP system gets\nunresponsive, and some task may get prioritized unfairly if NIFs and\nBIFs occupy scheduler threads for a too long time. Therefore, the most\ncommonly used NIFs and BIFs that may run for a long time can yield.\n\nProblems\n--------\n\nErlang NIFs and BIFs are typically implemented in the C programming\nlanguage. The C programming language does not have built-in support\nfor automatic yielding in the middle of a routine (referred to as\n[coroutine support](https://en.wikipedia.org/wiki/Coroutine) in other\nprogramming languages). Therefore, most NIFs and BIFs implement\nyielding manually. Manual implementation of yielding has the advantage\nof giving the programmer control over what should be saved and when\nyielding should happen. Unfortunately, manual implementation of\nyielding also leads to code with a lot of boilerplate that is more\ndifficult to read than corresponding code that does not\nyield. Furthermore, manual implementation of yielding can be\ntime-consuming and error-prone, especially if the NIF or BIF is\ncomplicated.\n\nSolution\n--------\n\nA source-to-source transformer, called Yielding C Fun (YCF), has been\ncreated to make it easier to implement yielding NIFs and BIFs. YCF is\na tool that takes a set of function names and a C source code file and\ntransforms the functions with the given names in the source code file\ninto yieldable versions that can be used as coroutines. YCF has been\ncreated with yielding NIFs and BIFs in mind and has several features\nthat can be handy when implementing yielding NIFs and BIFs. The reader\nis recommended to look at YCF's documentation for a detailed\ndescription of YCF.\n\nYielding C Fun's Source Code and Documentation\n----------------------------------------------\n\nThe source code of YCF is included in the folder\n`\"$ERL_TOP\"/erts/lib_src/yielding_c_fun/` inside the source tree of\nthe Erlang/OTP system. The documentation of YCF can be found in\n`\"$ERL_TOP\"/erts/lib_src/yielding_c_fun/README.md`. A rendered version\nof YCF documentation can be found\n[here](https://github.com/erlang/otp/blob/master/erts/lib_src/yielding_c_fun/README.md).\n\nYielding C Fun in the Erlang Run-time System\n-------------------------------------------\n\nAt the time of writing, YCF is used for the following in ERTS:\n\n* `ets:insert/2` and`ets:insert_new/2` (when these two functions get a list as their second parameter)\n* `maps:from_keys/2`, `maps:from_list/1`, `maps:keys/1` and `maps:values/1`\n* The functions `erts_qsort_ycf_gen_yielding`,\n  `erts_qsort_ycf_gen_continue` and `erts_qsort_ycf_gen_destroy`\n  implements a general purpose yieldable sorting routine that is used\n  in the implementation of `erlang:term_to_binary/2`\n\nBest Practices for YCF in the ERTS\n-------------------------------------------\n\nFirst of all, before starting to use YCF it is recommended to read\nthrough its documentation in\n[erts/lib_src/yielding_c_fun/README.md](https://github.com/erlang/otp/blob/master/erts/lib_src/yielding_c_fun/README.md)\nto understand what limitations and functionalities YCF has.","ref":"automaticyieldingofccode.html"},{"type":"extras","title":"Mark YCF Transformed Functions - Automatic Yielding of C Code","doc":"It is important that it is easy to see what functions are transformed\nby YCF so that a programmer that edits these function are aware that\nthey have to follow certain restrictions. The convention for making\nthis clear is to have a comment above the function that explains that\nthe function is transformed by YCF (see `maps_values_1_helper` in\n`erl_map.c` for an example). If only the transformed version of the\nfunction is used, the convention is to \"comment out\" the source for the\nfunction by surrounding it with the following `#ifdef` (this way, one\nwill not get warnings about unused functions):\n\n\n```\n#ifdef INCLUDE_YCF_TRANSFORMED_ONLY_FUNCTIONS\nvoid my_fun() {\n    ...\n}\n#endif /* INCLUDE_YCF_TRANSFORMED_ONLY_FUNCTIONS */\n```\n\nWhile editing the function one can define\n`INCLUDE_YCF_TRANSFORMED_ONLY_FUNCTIONS` so that one can see errors\nand warnings in the non-transformed source.","ref":"automaticyieldingofccode.html#mark-ycf-transformed-functions"},{"type":"extras","title":"Where to Place YCF Transformed Functions - Automatic Yielding of C Code","doc":"The convention is to place the non-transformed source for the functions\nthat are transformed by YCF in the source file where they naturally\nbelong. For example, the functions for the map BIFs are placed in\n`erl_map.c` together with the other map-related functions. When\nbuilding, YCF is invoked to generate the transformed versions of the\nfunctions into a header file that is included in the source file that\ncontains the non-transformed version of the function (search for\nYCF in `$ERL_TOP/erts/emulator/Makefile.in` to see examples of how YCF\ncan be invoked).\n\nIf a function `F1` that is transformed by one YCF invocation depends\non a function `F2` that is transformed by another YCF invocation, one\nneeds to tell YCF that `F2` is an YCF transformed function so that\n`F1` can call the transformed version (see the documentation of\n`-fexternal` in [YCF's documentation](https://github.com/erlang/otp/blob/master/erts/lib_src/yielding_c_fun/README.md)\nfor more information about how to do that).","ref":"automaticyieldingofccode.html#where-to-place-ycf-transformed-functions"},{"type":"extras","title":"Reduce Boilerplate Code with erts_ycf_trap_driver - Automatic Yielding of C Code","doc":"The `erts_ycf_trap_driver` is a C function that implements common code\nthat is needed by all BIFs that do their yielding with YCF. It is\nrecommended to use this function when possible. A good way to learn\nhow to use `erts_ycf_trap_driver` is to look at the implementations of\nthe BIFs `maps:from_keys/2`, `maps:from_list/1`, `maps:keys/1` and\n`maps:values/1`.\n\nSome BIFs may not be able to use `erts_ycf_trap_driver` as they need\nto do some custom work after yielding. Examples of that are the BIFs\n`ets:insert/2` and`ets:insert_new/2` that publish the yield state in\nthe ETS table structure so that other threads can help in completing\nthe operation.","ref":"automaticyieldingofccode.html#reduce-boilerplate-code-with-erts_ycf_trap_driver"},{"type":"extras","title":"Testing and Finding Problems in YCF Generated Code - Automatic Yielding of C Code","doc":"A good way to test both code with manual yielding and YCF generated\nyielding is to write test cases that cover the places where the code\ncan yield (yielding points) and setting the yield limit so that it\nyields every time the yielding points are reached. With YCF this can\nbe accomplished by passing a pointer to the value 1 as the\n`ycf_nr_of_reductions` parameter (i.e., the first parameter of the\n`*_ycf_gen_yielding` and `*_ycf_gen_continue` functions).\n\nThe YCF flag `-debug` makes YCF generate code that checks for pointers\nto the C stack when yielding. When such a pointer is found the\nlocation of the found pointer will be printed out and the program will\ncrash. This can save a lot (!) of time when porting already existing C\ncode to yield with YCF. To make the `-debug` option work as intended,\none has to tell YCF where the stack starts before calling the YCF\ngenerated function. The functions `ycf_debug_set_stack_start` and\n`ycf_debug_reset_stack_start` has been created to make this easier\n(see the implementation of `erts_ycf_trap_driver` for how to use these\nfunctions). It is recommended to set up building of ERTS so that debug\nbuilds of ERTS runs with YCF code generated with the `-debug` flag\nwhile production code runs with YCF code that has been generated\nwithout the `-debug` flag.\n\nIt is a good practice to look through the code generated by YCF to try\nto find things that are not correctly transformed. Before doing that\none should format the generated code with an automatic source code\nformatter (the generated code is quite unreadable otherwise). If YCF\ndoes not transform something correctly, it is almost certainly possible\nto fix that by rewriting the code (see the YCF documentation for what\nis supported and what is not supported). For example, if you have a\ninline struct variable declaration (for example,\n`struct {int field1; int field2;} mystructvar;`), YCF will not recognize this\nas a variable declaration but you can fix this by creating a `typedef`\nfor the struct.\n\nYCF's hooks can be useful when debugging code that has been transformed\nby YCF. For examples, the hooks can be used to print the value of a\nvariable when yielding and when resuming after yielding.\n\nUnfortunately, YCF does not handle C code with syntactical errors very\nwell and can crash or produce bad output without giving any useful\nerror message when given syntactically incorrect C code (for example,\na missing parenthesis). Therefore, it is recommended to always check\nthe code with a normal C compiler before transforming it with YCF.","ref":"automaticyieldingofccode.html#testing-and-finding-problems-in-ycf-generated-code"},{"type":"extras","title":"Common Pitfalls - Automatic Yielding of C Code","doc":"* **Pointers to the stack** The stack might be located somewhere else\n  when a yielded function continues to execute so pointers to\n  variables that are located on the stack can be a problem. As\n  mentioned in the previous section, the `-debug` option is a good way\n  to detect such pointers. YCF has functionality to make it easier to\n  port code that has pointers to the stack (see the documentation of\n  `YCF_STACK_ALLOC` in the YCF documentation for more\n  information). Another way to fix pointers to the stack, that\n  sometimes can be convenient, is to use YCF's hooks to set up\n  pointers to the stack correctly when a yielded function resumes.\n\n* **Macros** YCF does not expand macros so variable declarations,\n  return statements, and gotos etc that are \"hidden\" by macros can be\n  a problem. It is therefore smart to check all macros in code that is\n  transformed by YCF so that they do not contain anything that YCF\n  needs to transform.\n\n* **Memory Allocation in Yielding Code** If a process is killed while\n  executing a BIF that is yielded, one has to make sure that memory\n  and other resources that is allocated by the yielded code is\n  freed. This can be done, e.g., by calling the generated\n  `*_ycf_gen_destroy` function from the `dtor` of a magic binary that\n  holds a reference to trap state. YCF's `ON_DESTROY_STATE` and\n  `ON_DESTROY_STATE_OR_RETURN` hooks can be used to free any resources\n  that has been manually allocated inside a yielding function when the\n  function's `*_ycf_gen_destroy` function is executed. The\n  `erts_ycf_trap_driver` takes care of calling the `*_ycf_gen_destroy`\n  function so you do not need to worry about that if you are using\n  `erts_ycf_trap_driver`.","ref":"automaticyieldingofccode.html#common-pitfalls"},{"type":"extras","title":"BeamAsm, the Erlang JIT","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2020-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\n# BeamAsm, the Erlang JIT\n\nBeamAsm provides load-time conversion of Erlang BEAM instructions into\nnative code on x86-64 and aarch64. This allows the loader to eliminate any\ninstruction dispatching overhead and also specialize each instruction on their\nargument types.\n\nBeamAsm does hardly any cross instruction optimizations and the `x` and `y`\nregister arrays work the same as when interpreting BEAM instructions.\nThis allows the Erlang run-time system to be largely unchanged except for\nplaces that need to work with loaded BEAM instructions like code loading,\ntracing, and a few others.\n\nBeamAsm uses [asmjit](https://github.com/asmjit/asmjit) to generate native code\nin run-time. Only small parts of the\n[Assembler API](https://asmjit.com/doc/group__asmjit__assembler.html) of\n[asmjit](https://github.com/asmjit/asmjit) is used. At the moment\n[asmjit](https://github.com/asmjit/asmjit) only supports x86 32/64 bit and\naarch64 assembler.","ref":"beamasm.html"},{"type":"extras","title":"Loading Code - BeamAsm, the Erlang JIT","doc":"The code is loaded very similarly to how it is loaded for the interpreter. Each beam\nfile is parsed and then optimized through the transformations described in\n[beam_makeops](beam_makeops.md#defining-transformation-rules). The transformations\nused in BeamAsm are much simpler than the interpreter's, as most of the\ntransformations for the interpreter are done only to eliminate the instruction\ndispatch overhead.\n\nThen each instruction is encoded using the C++ functions in the\n`jit/$ARCH/instr_*.cpp` files. For example:\n\n    void BeamModuleAssembler::emit_is_nonempty_list(const ArgVal &Fail, const ArgVal &Src) {\n      a.test(getArgRef(Src), imm(_TAG_PRIMARY_MASK - TAG_PRIMARY_LIST));\n      a.jne(labels[Fail.getLabel()]);\n    }\n\n[asmjit](https://github.com/asmjit/asmjit) provides a fairly straightforward\nmapping from a C++ function call to the x86 assembly instruction. The above\ninstruction tests if the value in the `Src` register is a non-empty list and if\nit is not then it jumps to the fail label.\n\nFor comparison, the interpreter has 8 combinations and specializations of\nthis implementation to minimize the instruction dispatch overhead for\ncommon patterns.\n\nThe original register allocation done by the Erlang compiler is used to manage the\nliveness of values and the physical registers are statically allocated to keep\nthe necessary process state. At the moment this is the static register\nallocation on x86-64:\n\n    rbx: ErtsSchedulerRegisters struct (contains x/float registers and some metadata)\n    rbp: Current frame pointer when `perf` support is enabled, otherwise this\n         is an optional save slot for the Erlang stack pointer when executing C\n         code.\n    r12: Active code index\n    r13: Current running process\n    r14: Remaining reductions\n    r15: Erlang heap pointer\n\nNote that all of these are callee save registers under the System V and Windows\nABIs which means that BeamAsm never has to spill any of these when making C\nfunction calls.\n\nThe caller save registers are used as scratch registers within instructions but\nusually do not carry information between them. For some frequent instruction\nsequences such as tuple matching cross instruction optimization *are* done to avoid\nfetching the base address of the tuple in every `get_tuple_element` instruction.","ref":"beamasm.html#loading-code"},{"type":"extras","title":"Reducing code size and load time - BeamAsm, the Erlang JIT","doc":"One of the strengths of the interpreter is that it uses relatively little memory\nfor loaded code. This is because the implementation of each loaded instruction is\nshared and only the arguments to the instructions vary. Using as little memory as\npossible has many advantages; less memory is used, loading time decreases,\nhigher cache hit-rate.\n\nIn BeamAsm we need to achieve something similar since the load-time of a module\nscales almost linearly with the amount of memory it uses. Early BeamAsm prototypes\nused about double the amount of memory for code as the interpreter, while current\nversions use about 10% more. How was this achieved?\n\nIn BeamAsm we heavily use shared code fragments to try to emit as much code as\npossible as global shared fragments instead of duplicating the code unnecessarily.\nFor instance, the return instruction looks something like this:\n\n    Label yield = a.newLabel();\n\n    /* Decrement reduction counter */\n    a.dec(FCALLS);\n    /* If FCALLS < 0, jump to the yield-on-return fragment */\n    a.jl(resolve_fragment(ga->get_dispatch_return()));\n    a.ret();\n\nThe code above is not exactly what is emitted, but close enough. The thing to note\nis that the code for doing the context switch is never emitted. Instead, we jump\nto a global fragment that all return instructions share. This greatly reduces\nthe amount of code that has to be emitted for each module.","ref":"beamasm.html#reducing-code-size-and-load-time"},{"type":"extras","title":"Running Erlang code - BeamAsm, the Erlang JIT","doc":"Running BeamAsm code is very similar to running the interpreter, except that\nnative code is executed instead of interpreted code.\n\nWe had to tweak the way the Erlang stack works in order to execute native\ninstructions on it. While the interpreter uses a stack slot for\nthe current frame's return address (setting it to `[]` when unused), the\nnative code merely reserves enough space for it as the x86 `call` and `ret`\ninstructions bump the stack pointer when executed.\n\nThis only affects the _current stack frame_, and is functionally identical\naside from two caveats:\n\n1. Exceptions must not be thrown when the return address is reserved.\n\n    It's hard to tell where the stack will end up after an exception; the return\n    address won't be on the stack if we crash in the _current stack frame_, but\n    will be if we crash in a function we call. Telling these apart turned out to\n    rather complicated, so we decided to require the return address to be used\n    when an exception is thrown.\n\n    `emit_handle_error` handles this for you, and shared fragments that have been\n    called (rather than jumped to) satisfy this requirement by default.\n\n2. Garbage collection needs to take return addresses into account.\n\n    If we're about to create a term we have to make sure that there's enough\n    space for this term _and_ a potential return address, or else the next\n    `call` will clobber said term. This is taken care of in `emit_gc_test` and\n    you generally don't need to think about it.\n\nIn addition to the above, we ensure that there's always at least `S_REDZONE`\nfree words on the stack so we can make calls to shared fragments or trace\nhandlers even when we lack a stack frame. This is merely a reservation and has\nno effect on how the stack works, and all values stored there must be valid\nErlang terms in case of a garbage collection.","ref":"beamasm.html#running-erlang-code"},{"type":"extras","title":"Frame pointers - BeamAsm, the Erlang JIT","doc":"To aid debuggers and sampling profilers, we support running Erlang code with\nnative frame pointers. At the time of writing, this is only enabled together\nwith `perf` support (`+JPperf true`) to save stack space, but we may add a flag\nto explicitly enable it in the future.\n\nWhen enabled, continuation pointers (CP) have both a return address _and_ a\nframe pointer that points at the previous CP. CPs must form a valid chain at\nall times, and it's illegal to have \"half\" a CP when the stack is inspected.\n\nFrame pointers are pushed when entering an Erlang function and popped before\nleaving it, including on tail calls as the callee will immediately push the\nframe pointer on entry. This has a slight overhead but saves us the headache of\nhaving multiple entry points for each function depending on whether it's tail-\nor body-called, which would get very tricky once breakpoints enter the picture.","ref":"beamasm.html#frame-pointers"},{"type":"extras","title":"Running C code - BeamAsm, the Erlang JIT","doc":"As Erlang stacks can be very small, we have to switch over to a different stack\nwhen we need to execute C code (which may expect a much larger stack). This is\ndone through `emit_enter_runtime` and `emit_leave_runtime`, for example:\n\n    mov_arg(ARG4, NumFree);\n\n    /* Move to the C stack and swap out our current reductions, stack-, and\n     * heap pointer to the process structure. */\n    emit_enter_runtime ();\n\n    a.mov(ARG1, c_p);\n    load_x_reg_array(ARG2);\n    make_move_patch(ARG3, lambdas[Fun.getValue()].patches);\n\n    /* Call `new_fun`, asserting that we're on the C stack. */\n    runtime_call<4>(new_fun);\n\n    /* Move back to the C stack, and read the updated values from the process\n     * structure */\n    emit_leave_runtime ();\n\n    a.mov(getXRef(0), RET);\n\nAll combinations of the `Update` constants are legal, but the ones given to\n`emit_leave_runtime` _must_ be the same as those given to `emit_enter_runtime`.","ref":"beamasm.html#running-c-code"},{"type":"extras","title":"Tracing and NIF Loading - BeamAsm, the Erlang JIT","doc":"To make tracing and NIF loading work there needs to be a way to intercept\nany function call. In the interpreter, this is done by rewriting the loaded\nBEAM code, but this is more complicated in BeamAsm as we want to have a fast\nand compact way to do this. This is solved by emitting the code below at the\nstart of each function (x86 variant below):\n\n      0x0: short jmp 6 (address 0x8)\n      0x2: nop\n      0x3: relative near call to shared breakpoint fragment\n      0x8: actual code for function\n\nWhen code starts to execute it will simply see the `short jmp 6` instruction\nwhich skips the prologue and starts to execute the code directly.\n\nWhen we want to enable a certain breakpoint we set the jmp target to be 1,\nwhich means it will land on the call to the shared breakpoint fragment. This\nfragment checks the current `breakpoint_flag` stored in the ErtsCodeInfo of\nthis function, and then calls `erts_call_nif_early` and\n`erts_generic_breakpoint` accordingly.\n\nNote that the update of the branch and `breakpoint_flag` does not need to be\natomic: it's fine if a process only sees one of these being updated, as the\ncode that sets breakpoints/loads NIFs doesn't rely on the trampoline being\nactive until thread progress has been made.\n\nThe solution for AArch64 is similar.","ref":"beamasm.html#tracing-and-nif-loading"},{"type":"extras","title":"Updating code - BeamAsm, the Erlang JIT","doc":"Because many environments enforce [W^X] it's not always possible to write\ndirectly to the code pages. Because of this we map code twice: once with an\nexecutable page and once with a writable page. Since they're backed by the\nsame memory, writes to the writable page appear magically in the executable\none.\n\nThe `erts_writable_code_ptr` function can be used to get writable pointers\ngiven a module instance, provided that it has been unsealed first:\n\n    for (i = 0; i  curr);\n\n        ci_exec = code_hdr->functions[i];\n        w_ptr = erts_writable_code_ptr(&modp->curr, ci_exec);\n        ci_rw = (ErtsCodeInfo*)w_ptr;\n\n        uninstall_breakpoint(ci_rw, ci_exec);\n        consolidate_bp_data(modp, ci_rw, 1);\n        ASSERT(ci_rw->gen_bp == NULL);\n\n        erts_seal_module(&modp->curr);\n    }\n\nWithout the module instance there's no reliable way to figure out the writable\naddress of a code page, and we rely on _address space layout randomization_\n(ASLR) to make it difficult to guess. On some platforms, security is further\nenhanced by protecting the writable area from writes until the module has been\nunsealed by `erts_unseal_module`.","ref":"beamasm.html#updating-code"},{"type":"extras","title":"Export tracing - BeamAsm, the Erlang JIT","doc":"Unlike the interpreter, we don't execute code inside export entries as that's\nvery annoying to do in the face of [W^X]. When tracing is enabled, we instead\npoint to a fragment that looks at the current export entry and decides what to\ndo.\n\nThis fragment is shared between all export entries, and the export entry to\noperate on is assumed to be in a certain register (`RET` as of writing). This\nmeans that all remote calls _must_ place the export entry in said register,\neven when we don't know beforehand that the call is remote, such as when\ncalling a fun.\n\nThis is pretty easy to do in assembler and the `emit_setup_dispatchable_call`\nhelper handles it nicely for us, but we can't set registers when trapping out\nfrom C code. When trapping to an export entry from C code one must set\n`c_p->current` to the `ErtsCodeMFA` inside the export entry in question, and\nthen set `c_p->i` to `beam_bif_export_trap`.\n\nThe `BIF_TRAP` macros handle this for you, so you generally don't need to\nthink about it.\n\n[W^X]: https://en.wikipedia.org/wiki/W%5EX","ref":"beamasm.html#export-tracing"},{"type":"extras","title":"Description of each file - BeamAsm, the Erlang JIT","doc":"The BeamAsm implementation resides in the `$ERL_TOP/erts/emulator/beam/jit` folder.\nThe files are:\n\n* `asm_load.c`\n    * BeamAsm specific functions for loading code\n* `beam_asm.h`\n    * Header file describing the C -> C++ api\n* `beam_jit_metadata.cpp`\n    * `gdb` and Linux `perf` support for BeamAsm\n* `load.h`\n    * BeamAsm specific header for loading code\n* `$ARCH/beam_asm.hpp`\n    * Header file describing the structs and classes used by BeamAsm.\n* `$ARCH/beam_asm.cpp`\n    * The BeamAsm initialization code\n    * The C -> C++ interface functions.\n* `$ARCH/generators.tab`, `$ARCH/predicates.tab`, `$ARCH/ops.tab`\n    * BeamAsm specific transformations for instructions. See\n      [beam_makeops](beam_makeops.md) for more details.\n* `$ARCH/beam_asm_module.cpp`\n    * The code for the BeamAsm module code generator logic\n* `$ARCH/beam_asm_global.cpp`\n    * Global code fragments that are used by multiple instructions, e.g. error\n      handling code.\n* `$ARCH/instr_*.cpp`\n    * Implementation of individual instructions grouped into files by area\n* `$ARCH/process_main.cpp`\n    * Implementation of the main process loop","ref":"beamasm.html#description-of-each-file"},{"type":"extras","title":"Linux perf support - BeamAsm, the Erlang JIT","doc":"The JIT can provide symbols to the Linux profiler `perf`, making it possible to\nprofile Erlang code with it. Depending on the mode used, `perf` will provide\nfunctionality similar to [eprof](https://erlang.org/doc/man/eprof.html) or\n[fprof](https://erlang.org/doc/man/fprof.html) but with much lower (and\nconfigurable) overhead.\n\nYou can run perf on BeamAsm like this:\n\n    # Start Erlang under perf\n    perf record -- erl +JPperf true\n    # Record a running instance started with `+JPperf true` for 10s\n    perf record --pid $BEAM_PID -- sleep 10\n    # Record a running instance started with `+JPperf true` until interrupted\n    perf record --pid $BEAM_PID\n\nand then look at the results using `perf report` as you normally would with\nperf.\n\nFrame pointers are enabled when the `+JPperf true` option is passed, so you can\nuse `perf record --call-graph=fp` to get more context, making the results\nsimilar to that of `fprof`. This will give you accurate call graphs for pure\nErlang code, but in rare cases it fails to track transitions from Erlang to C\ncode and back. [`perf record --call-graph=lbr`](https://lwn.net/Articles/680985/)\nmay work better in those cases, but it's worse at tracking in general.\n\nFor example, you can run perf to analyze dialyzer building a PLT like this:\n\n     ERL_FLAGS=\"+JPperf true +S 1\" perf record --call-graph=fp \\\n       dialyzer --build_plt -Wunknown --apps compiler crypto erts kernel stdlib \\\n       syntax_tools asn1 edoc et ftp inets mnesia observer public_key \\\n       sasl runtime_tools snmp ssl tftp wx xmerl tools\n\nThe above code is run using `+S 1` to make the perf output easier to understand.\nIf you then run `perf report -f --no-children` you may get something similar to\nthis:\n\n![Linux Perf report: dialyzer PLT build](assets/perf-beamasm.png)\n\nAny Erlang function in the report is prefixed with a `$` and all C functions have\ntheir normal names. Any Erlang function that has the prefix `$global::` refers\nto a global shared fragment.\n\nSo in the above, we can see that we spend the most time doing `eq`, i.e. comparing two terms.\nBy expanding it and looking at its parents we can see that it is the function\n`erl_types:t_is_equal/2` that contributes the most to this value. Go and have a look\nat it in the source code to see if you can figure out why so much time is spent there.\n\nAfter `eq` we see the function `erl_types:t_has_var/1` where we spend almost\n5% of the entire execution in. A while further down you can see `copy_struct_x`\nwhich is the function used to copy terms. If we expand it to view the parents\nwe find that it is mostly `ets:lookup_element/3` that contributes to this time\nvia the Erlang function `dialyzer_plt:ets_table_lookup/2`.","ref":"beamasm.html#linux-perf-support"},{"type":"extras","title":"Flame Graph - BeamAsm, the Erlang JIT","doc":"You can also create a Flame Graph from the perf output. Flame Graphs are basically\njust another way to look at the same data as the `perf report` output, but can\nbe more easily shared with others and manipulated to give a graph tailor-made for\nyour needs. For instance, if we run dialyzer with all schedulers:","ref":"beamasm.html#flame-graph"},{"type":"extras","title":"Run dialyzer with multiple schedulers - BeamAsm, the Erlang JIT","doc":"ERL_FLAGS=\"+JPperf true\" perf record --call-graph=fp \\\n      dialyzer --build_plt -Wunknown --apps compiler crypto erts kernel stdlib \\\n      syntax_tools asn1 edoc et ftp inets mnesia observer public_key \\\n      sasl runtime_tools snmp ssl tftp wx xmerl tools --statistics\n\nAnd then use the scripts found at Brendan Gregg's [CPU Flame Graphs](https://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html)\nweb page as follows:","ref":"beamasm.html#run-dialyzer-with-multiple-schedulers"},{"type":"extras","title":"Collect the results - BeamAsm, the Erlang JIT","doc":"perf script > out.perf","ref":"beamasm.html#collect-the-results"},{"type":"extras","title":"run stackcollapse - BeamAsm, the Erlang JIT","doc":"stackcollapse-perf.pl out.perf > out.folded","ref":"beamasm.html#run-stackcollapse"},{"type":"extras","title":"Create the svg - BeamAsm, the Erlang JIT","doc":"flamegraph.pl out.folded > out.svg\n\nWe get a graph that would look something like this:\n\n![Linux Perf FlameGraph: dialyzer PLT build](assets/perf-beamasm.svg)\n\nYou can view a larger version [here](assets/perf-beamasm.svg). It contains\nthe same information, but it is easier to share with others as it does\nnot need the symbols in the executable.\n\nUsing the same data we can also produce a graph where the scheduler profile data\nhas been merged by using `sed`:","ref":"beamasm.html#create-the-svg"},{"type":"extras","title":"Strip [0-9]+ and/or [0-9]+ from all scheduler names - BeamAsm, the Erlang JIT","doc":"","ref":"beamasm.html#strip-0-9-and-or-0-9-from-all-scheduler-names"},{"type":"extras","title":"scheduler names changed in OTP26, hence two expressions - BeamAsm, the Erlang JIT","doc":"sed -e 's/^[0-9]\\+_//' -e 's/^erts_\\([^_]\\+\\)_[0-9]\\+/erts_\\1/' out.folded > out.folded_sched","ref":"beamasm.html#scheduler-names-changed-in-otp26-hence-two-expressions"},{"type":"extras","title":"Create the svg - BeamAsm, the Erlang JIT","doc":"flamegraph.pl out.folded_sched > out_sched.svg\n\n![Linux Perf FlameGraph: dialyzer PLT build](assets/perf-beamasm-merged.svg)\n\nYou can view a larger version [here](assets/perf-beamasm-merged.svg).\nThere are many different transformations that you can do to make the graph show\nyou what you want.","ref":"beamasm.html#create-the-svg-1"},{"type":"extras","title":"Annotate perf functions - BeamAsm, the Erlang JIT","doc":"If you want to be able to use the `perf annotate` functionality (and in extension\nthe annotate functionality in the `perf report` gui) you need to use a monotonic\nclock when calling `perf record`, i.e. `perf record -k mono`. So for a dialyzer\nrun you would do this:\n\n    ERL_FLAGS=\"+JPperf true +S 1\" perf record -k mono --call-graph=fp \\\n      dialyzer --build_plt -Wunknown --apps compiler crypto erts kernel stdlib \\\n      syntax_tools asn1 edoc et ftp inets mnesia observer public_key \\\n      sasl runtime_tools snmp ssl tftp wx xmerl tools\n\nIn order to use the `perf.data` produced by this record you need to first call\n`perf inject --jit` like this:\n\n    perf inject --jit -i perf.data -o perf.jitted.data\n\nand then you can view an annotated function like this:\n\n    perf annotate -M intel -i perf.jitted.data erl_types:t_has_var/1\n\nor by pressing `a` in the `perf report` ui. Then you get something like this:\n\n![Linux Perf FlameGraph: dialyzer PLT build](assets/beamasm-perf-annotate.png)\n\n`perf annotate` will interleave the listing with the original source code\nwhenever possible. You can use the `+{source,Filename}` or `+absolute_paths`\ncompiler options to tell `perf` where to find the source code.\n\n> *WARNING*: Calling `perf inject --jit` will create a lot of files in `/tmp/`\n> and in `~/.debug/tmp/`. So make sure to cleanup in those directories from time to\n> time or you may run out of inodes.","ref":"beamasm.html#annotate-perf-functions"},{"type":"extras","title":"Inspecting perf data on another host - BeamAsm, the Erlang JIT","doc":"Sometimes it's not possible or desirable to inspect a recording on the target\nmachine, which gets a bit tricky because `perf report` relies on having all\nsymbols available.\n\nTo inspect recordings on another machine, you can use the `perf archive`\ncommand to bundle all the required symbols into an archive. This requires that\nthe recording is made with the `-k mono` flag and that it has been processed\nwith `perf inject --jit`:\n\n    perf inject --jit -i perf.data -o perf.jitted.data\n    perf archive perf.jitted.data\n\nOnce you have the archive, move it together with the processed recording to\nthe host you wish to inspect the recording on, and extract the archive to\n`~/.debug`. You can then use `perf report -i perf.jitted.data` as usual.\n\nIf you get an error message along the lines of:\n\n   perf: 'archive' is not a perf-command. See 'perf --help'.\n\nThen your `perf` version is too old, and you should use\n[this bash script](https://github.com/torvalds/linux/blob/master/tools/perf/perf-archive.sh)\ninstead.","ref":"beamasm.html#inspecting-perf-data-on-another-host"},{"type":"extras","title":"perf tips and tricks - BeamAsm, the Erlang JIT","doc":"You can do a lot of neat things with `perf`. Below is a list of some of the options\nwe have found useful:\n\n* `perf report --no-children`\n    Do not include the accumulation of all children in a call.\n* `perf report  --call-graph callee`\n    Show the callee rather than the caller when expanding a function call.\n* `perf report` gives \"failed to process sample\" and/or \"failed to process type: 68\"\n    This probably means that you are running a bugged version of perf. We have\n    seen this when running Ubuntu 18.04 with kernel version 4. If you update\n    to Ubuntu 20.04 or use Ubuntu 18.04 with kernel version 5 the problem\n    should go away.","ref":"beamasm.html#perf-tips-and-tricks"},{"type":"extras","title":"FAQ - BeamAsm, the Erlang JIT","doc":"","ref":"beamasm.html#faq"},{"type":"extras","title":"How do I know that I'm running a JIT enabled Erlang? - BeamAsm, the Erlang JIT","doc":"You will see a banner containing `[jit]` shell when you start. You can also use\n`erlang:system_info(emu_flavor)` to check the flavor and it should be `jit`.\n\nThere are two major reasons why when building Erlang/OTP you would not get the\nJIT.\n\n* You are not building a 64-bit emulator for x86 or ARM\n* You do not have a C++ compiler that supports C++-17\n\nIf you run `./configure --enable-jit` configure will abort when it discovers that\nyour system cannot build the JIT.","ref":"beamasm.html#how-do-i-know-that-i-m-running-a-jit-enabled-erlang"},{"type":"extras","title":"Is the interpreter still available? - BeamAsm, the Erlang JIT","doc":"Yes, you can still build the interpreter if you want to. In fact, it is what is used\non platforms where BeamAsm does not yet work. You can either completely disable\nBeamAsm by passing `--disable-jit` to configure. Or you can build the\ninterpreter using `make FLAVOR=emu` and then run it using `erl -emu_flavor emu`.\n\nIt is possible to have both the JIT and interpreter available at the same time.","ref":"beamasm.html#is-the-interpreter-still-available"},{"type":"extras","title":"How much of a speedup should I expect from BeamAsm compared to the interpreter? - BeamAsm, the Erlang JIT","doc":"It depends a lot on what your application does. Anything from no difference to up to\nfour times as fast is possible.\n\nBeamAsm tries very hard to not be slower than the interpreter, but there can be cases\nwhen that happens. One such could be very short-lived small scripts. If you come across\nany scenarios when this happens, please open a bug report at\n[the Erlang/OTP bug tracker](https://github.com/erlang/otp/issues).","ref":"beamasm.html#how-much-of-a-speedup-should-i-expect-from-beamasm-compared-to-the-interpreter"},{"type":"extras","title":"Would it be possible to add support for BeamAsm on other CPU architectures? - BeamAsm, the Erlang JIT","doc":"Any new architecture needs support in the assembler as well. Since we use\n[asmjit](https://github.com/asmjit/asmjit) for this, that means we need support\nin [asmjit](https://github.com/asmjit/asmjit). BeamAsm uses relatively few\ninstructions (mostly, `mov`, `jmp`, `cmp`, `sub`, `add`), so it would not need\nto have full support of all instructions.\n\nAnother approach would be to not use [asmjit](https://github.com/asmjit/asmjit)\nfor the new architecture, but instead use something different to assemble code\nduring load-time.","ref":"beamasm.html#would-it-be-possible-to-add-support-for-beamasm-on-other-cpu-architectures"},{"type":"extras","title":"Would it be possible to add support for BeamAsm on another OS? - BeamAsm, the Erlang JIT","doc":"Adding a new OS that runs x86-64 or aarch64 should not need any large changes\nif the OS supports mapping of memory as executable. If the ABI used by the\nOS is not supported changes related to calling C-functions also have to\nbe made.\n\nAs a reference, it took us about 2-3 weeks to implement support for Windows,\nand about three months to finish the aarch64 port.","ref":"beamasm.html#would-it-be-possible-to-add-support-for-beamasm-on-another-os"},{"type":"extras","title":"Carrier Migration","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2013-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nCarrier Migration\n=================\n\nIntroduction\n------------\n\nThe ERTS memory allocators manage memory blocks in two types of raw\nmemory chunks. We call these chunks of raw memory\n*carriers*. Single-block carriers which only contain one large block,\nand multi-block carriers which contain multiple blocks. A carrier is\ntypically created using `mmap()` on unix systems. However, how a\ncarrier is created is of minor importance. An allocator instance\ntypically manages a mixture of single- and multi-block carriers.\n\nProblem\n-------\n\nWhen a carrier is empty, i.e. contains only one large free block, it\nis deallocated. Since multi-block carriers can contain both allocated\nblocks and free blocks at the same time, an allocator instance might\nbe stuck with a large amount of poorly utilized carriers if the memory\nload decreases. After a peak in memory usage it is expected that not\nall memory can be returned since the blocks still allocated are likely\nto be dispersed over multiple carriers. Such poorly utilized carriers\ncan usually be reused if the memory load increases again. However,\nsince each scheduler thread manages its own set of allocator\ninstances, and memory load is not necessarily correlated to CPU load, we\nmight get into a situation where there are lots of poorly utilized\nmulti-block carriers on some allocator instances while we need to\nallocate new multi-block carriers on other allocator instances. In\nscenarios like this, the demand for multi-block carriers in the system\nmight increase at the same time as the actual memory demand in the\nsystem has decreased which is both unwanted and quite unexpected for\nthe end user.\n\nSolution\n--------\n\nIn order to prevent scenarios like this we've implemented support for\nmigration of multi-block carriers between allocator instances.","ref":"carriermigration.html"},{"type":"extras","title":"Management of Free Blocks - Carrier Migration","doc":"In order to be able to remove a carrier from one allocator instance\nand add it to another we need to be able to move references to the\nfree blocks of the carrier between the allocator instances. The\nallocator instance specific data structure referring to the free\nblocks it manages often refers to the same carrier from multiple\nplaces. For example, when the address order best-fit strategy is used\nthis data structure is a binary search tree spanning all carriers that\nthe allocator instance manages. Free blocks in one specific carrier\ncan be referred to from potentially every other carrier that is\nmanaged, and the amount of such references can be huge. That is, the\nwork of removing the free blocks of such a carrier from the search\ntree will be huge. One way of solving this could be not to migrate\ncarriers that contain lots of free blocks, but this would prevent us\nfrom migrating carriers that potentially need to be migrated in order\nto solve the problem we set out to solve.\n\nBy using one data structure of free blocks in each carrier and an\nallocator instance-wide data structure of carriers managed by the\nallocator instance, the work needed in order to remove and add\ncarriers can be kept to a minimum. When migration of carriers is\nenabled on a specific allocator type, we require that an allocation\nstrategy with such an implementation is used. Currently we've\nimplemented this for three different allocation strategies. All of\nthese strategies use a search tree of carriers sorted so that we can\nfind the carrier with the lowest address that can satisfy the\nrequest. Internally in carriers we use yet another search tree that\neither implement address order first fit, address order best fit,\nor best fit. The abbreviations used for these different allocation\nstrategies are `aoff`, and `aoffcaobf`, `aoffcbf`.","ref":"carriermigration.html#management-of-free-blocks"},{"type":"extras","title":"Carrier Pool - Carrier Migration","doc":"In order to migrate carriers between allocator instances we move them\nthrough a pool of carriers. In order for a carrier migration to\ncomplete, one scheduler needs to move the carrier into the pool, and\nanother scheduler needs to take the carrier out of the pool.\n\nThe pool is implemented as a lock-free, circular, double linked,\nlist. The list contains a sentinel which is used as the starting point\nwhen inserting to, or fetching from, the pool. Carriers in the pool are\nelements in this list.\n\nThe list can be modified by all scheduler threads\nsimultaneously. During modifications the double linked list is allowed\nto get a bit \"out of shape\". For example, following the `next` pointer\nto the next element and then following the `prev` pointer does not\nalways take you back to were you started. The following is however\nalways true:\n\n*   Repeatedly following `next` pointers will eventually take you to the\n    sentinel.\n*   Repeatedly following `prev` pointers will eventually take you to the\n    sentinel.\n*   Following a `next` or a `prev` pointer will take you to either an\n    element in the pool, or an element that used to be in the pool.\n\nWhen inserting a new element we search for a place to insert the\nelement by only following `next` pointers, and we always begin by\nskipping the first element encountered. When trying to fetch an\nelement we do the same thing, but instead only follow `prev` pointers.\n\nBy going different directions when inserting and fetching, we avoid\ncontention between threads inserting and threads fetching as much as\npossible. By skipping one element when we begin searching, we preserve\nthe sentinel unmodified as much as possible. This is beneficial since\nall search operations need to read the content of the sentinel. If we\nwere to modify the sentinel, the cache line containing the sentinel\nwould unnecessarily be bounced between processors.\n\nThe `prev` and `next` fields in the elements of the list contain the\nvalue of the pointer, a modification marker, and a deleted\nmarker. Memory operations on these fields are done using atomic memory\noperations. When a thread has set the modification marker in a field,\nno-one except the thread that set the marker is allowed to modify the\nfield. If multiple modification markers need to be set, we always\nbegin with `next` fields followed by `prev` fields in the order\nfollowing the actual pointers. This guarantees that no deadlocks will\noccur.\n\nWhen a carrier is being removed from a pool, we mark it with a thread\nprogress value that needs to be reached before we are allowed to\nmodify the `next` and `prev` fields. That is, until we reach this\nthread progress we are not allowed to insert the carrier into the pool\nagain, and we are not allowed to deallocate the carrier. This ensures\nthat threads inspecting the pool always will be able to traverse the\npool and reach valid elements. Once we have reached the thread\nprogress value that the carrier was tagged with, we know that no\nthreads may have references to it via the pool.","ref":"carriermigration.html#carrier-pool"},{"type":"extras","title":"Migration - Carrier Migration","doc":"Each allocator instance keeps track of the current utilization of its\nmulti-block carriers. When the total utilization falls below the \"abandon\ncarrier utilization limit\" it starts to inspect the utilization of the\ncurrent carrier when deallocations are made. If also the utilization\nof the carrier falls below the \"abandon carrier utilization limit\" it\nunlinks the carrier from its data structure of available free blocks\nand inserts the carrier into the pool.\n\nSince the carrier has been unlinked from the data structure of\navailable free blocks, no more allocations will be made in the\ncarrier.\n\nThe allocator instance that created a carrier is called its *owner*.\nOwnership never changes.\n\nThe allocator instance that has the responsibility to perform deallocations in a\ncarrier is called its *employer*. The employer may also perform allocations if\nthe carrier is not in the pool. Employment may change when a carrier is fetched from\nor inserted into the pool.\n\nDeallocations in a carrier, while it remains in the pool, is always performed\nthe owner. That is, all pooled carriers are employed by their owners.\n\nEach carrier has an atomic word containing a pointer to the employing allocator\ninstance and three bit flags; IN\\_POOL, BUSY and HOMECOMING.\n\nWhen fetching a carrier from the pool, employment may change and further\ndeallocations in the carrier will be redirected to the new\nemployer using the delayed dealloc functionality.\n\nWhen a foreign allocator instance abandons a carrier back into the pool, it will\nalso pass it back to its *owner* using the delayed dealloc queue. When doing\nthis it will set the HOMECOMING bit flag to mark it as \"enqueued\". The owner\nwill later clear the HOMECOMING bit when the carrier is dequeued. This mechanism\nprevents a carrier from being enqueued again before it has been dequeued.\n\nWhen a carrier becomes empty, it will be deallocated. Carrier deallocation is\nalways done by the owner that allocated the carrier. By doing this, the\nunderlying functionality of allocating and deallocating carriers can\nremain simple and doesn't have to bother about multiple threads. In a\nNUMA system we will also not mix carriers originating from multiple\nNUMA nodes.\n\nIf a carrier in the pool becomes empty, it will be withdrawn from the\npool and be deallocated by the owner which already employs it.\n\nIf a carrier employed by a foreign allocator becomes empty, it will be passed\nback to the owner for deallocation using the delayed dealloc functionality.\n\nIn short:\n\n* The allocator instance that created a carrier *owns* it.\n* An empty carrier is always deallocated by its *owner*.\n* *Ownership* never changes.\n* The allocator instance that uses a carrier *employs* it.\n* An *employer* can abandon a carrier into the pool.\n* Pooled carriers are not allocated from.\n* Pooled carriers are always *employed* by their *owner*.\n* *Employment* can only change from *owner* to a foreign allocator\n  when a carrier is fetched from the pool.","ref":"carriermigration.html#migration"},{"type":"extras","title":"Searching the pool - Carrier Migration","doc":"When an allocator instance needs more carrier space, it inspects the pool. If no\ncarrier could be fetched from the pool, it will allocate a new\ncarrier. Regardless of where the allocator instance gets the carrier from, it\njust links in the carrier into its data structure of free blocks.\n\nTo harbor real time characteristics, searching the pool is\nlimited. We only inspect a limited number of carriers. If none of\nthose carriers had a free block large enough to satisfy the allocation\nrequest, the search will fail. A carrier in the pool can also be BUSY\nif another thread is currently doing block deallocation work on the\ncarrier. A BUSY carrier will also be skipped by the search as it cannot\nsatisfy the request. The pool is lock-free and we do not want to\nblock, waiting for the other thread to finish.","ref":"carriermigration.html#searching-the-pool"},{"type":"extras","title":"The bad cluster problem - Carrier Migration","doc":"Before OTP-17.4 the search algorithm had a problem as the search always started\nat the same position in the pool, the sentinel. This could lead to\ncontention from concurrent searching processes. But even worse, it\ncould lead to a \"bad\" state when searches fail with a high rate\nleading to new carriers instead being allocated. These new carriers\nmay later be inserted into the pool due to bad utilization. If the\nfrequency of insertions into the pool is higher than successful\nfetching from the pool, memory will eventually get exhausted.\n\nThis \"bad\" state consists of a cluster of small and/or highly\nfragmented carriers located at the sentinel in the pool. The largest free\nblock in such a \"bad\" carrier is rather small, making it unable to satisfy\nmost allocation requests. As the search always started at the\nsentinel, any such \"bad\" carriers that had been left in the pool would\neventually cluster together at the sentinel. All searches first\nhave to skip past this cluster of \"bad\" carriers to reach a \"good\"\ncarrier. When the cluster gets to the same size as the search limit,\nall searches will essentially fail.\n\nTo counter the \"bad cluster\" problem and also ease the contention, the\nsearch will now always start by first looking at the allocators *own*\ncarriers. That is, carriers that were initially created by the\nallocator itself and later had been abandoned to the pool. If none of\nour own abandoned carrier would do, then the search continues into the\npool, as before, to look for carriers created by other\nallocators. However, if we have at least one abandoned carrier of our\nown that could not satisfy the request, we can use that as entry point\ninto the pool.\n\nThe result is that we prefer carriers created by the thread itself,\nwhich is good for NUMA performance. And we get more entry points when\nsearching the pool, which will ease contention and clustering.","ref":"carriermigration.html#the-bad-cluster-problem"},{"type":"extras","title":"Our own pooled tree - Carrier Migration","doc":"To do the first search among own carriers, every allocator instance\nhas a `pooled_tree` of carriers. This tree is only accessed by the allocator\nitself and can only contain its own carriers. When a carrier is\nabandoned and put in the pool, it is also inserted into `pooled_tree`. This is\neither done direct, if the carrier was already employed by its owner, or by\nfirst passing it back to the owner via the delayed dealloc queue.\n\nWhen we search our `pooled_tree` and find a carrier that is no longer in the\npool, we remove that carrier from `pooled_tree` and mark it as TRAITOR, as it is\nnow employed by a foreign allocator. We will not find any carriers in\n`pooled_tree` that are marked as BUSY by other threads.\n\nIf no carrier in `pooled_tree` had a large enough free block, we search it again\nto find any carrier that may act as an entry point into the shared list of all\npooled carriers. This in order to, if possible, avoid starting at the sentinel\nand thereby ease the \"bad clustering\" problem.\n\nFurthermore, the search for own carriers that are scheduled\nfor deallocation is done as the last search option. The idea is\nthat it is better to reuse a poorly utilized carrier than to\nresurrect an empty carrier that was just about to be released back to\nthe OS.","ref":"carriermigration.html#our-own-pooled-tree"},{"type":"extras","title":"Result - Carrier Migration","doc":"The use of this strategy of abandoning carriers with poor utilization\nand reusing them in allocator instances with an increased carrier\ndemand is extremely effective and completely eliminates the problems\nthat otherwise sometimes occurred when CPU load dropped while memory\nload did not.\n\nWhen using the `aoffcaobf` or `aoff` strategies compared to `gf` or\n`bf`, we loose some performance since we get more modifications in the\ndata structure of free blocks. This performance penalty is however\nreduced using the `aoffcbf` strategy. A trade off between memory\nconsumption and performance is however inevitable, and it is up to\nthe user to decide what is most important.","ref":"carriermigration.html#result"},{"type":"extras","title":"Checking for I/O events","doc":"<!--\n%CopyrightBegin%\n\nSPDX-License-Identifier: Apache-2.0\n\nCopyright Ericsson AB 2025. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n\n# Checking for I/O events\n\nAn I/O event in ERTS is any event triggered by a [file descriptor]\non Unix or any OBJECT HANDLE that can be passed to [WaitForMultipleObjects] on Windows.\nThe check I/O infrastructure is used by linked-in drivers through [driver_select](erl_driver.md#driver_select)\nand by NIFs through [enif_select](erl_nif.md#enif_select).\n\nThe main user of the check I/O subsystem is network communication through\n`m:gen_tcp`, `m:gen_udp`, `m:gen_sctp` and `m:socket` on Unix (on Windows\n`m:socket` used its own internal check I/O implementation based on completion ports).\nIt is also used by various other parts, such as when doing `os:cmd/1` or\nreading from the terminal.\n\nThis document gives an overview of how the check I/O subsystem works.\n\nThe check I/O subsystem consists of a platform specific ([erl_poll](#polling))\nand platform agnostic part ([check_io](#check-i-o)).\n\n[erl_poll] is the basic mechanisms for checking if any events have been signalled\nand allows waiting for a timeout if needed. The implementation of polling is very\nplatform specific and lives in [erts/emulator/sys/common/erl_poll.c] for Unix and\n[erts/emulator/sys/win32/erl_poll.c] for Windows.\n\n[check_io](#check-i-o) is the cross-platform part of the check I/O subsystem\nthat makes sure that [erl_poll] has the correct state and dispatches events to\nthe correct entity. The implementation can be found in [erts/emulator/sys/common/erl_check_io.c].\n\ncheck_io is then used by ports and NIFs to listen to events. Ports are\ncommunicated to through [port signals](PortSignals.md) and are delivered through\nthe [ready_input](driver_entry.md#ready_input) and [ready_output](driver_entry.md#ready_output) callbacks.\n[NIFs](erl_nif.md) get an Erlang message whenever an event is triggered.\n\n[file descriptor]: https://en.wikipedia.org/wiki/File_descriptor\n[erl_poll]: #polling\n[erts/emulator/sys/common/erl_poll.c]: https://github.com/erlang/otp/blob/master/erts/emulator/sys/common/erl_poll.c\n[erts/emulator/sys/win32/erl_poll.c]: https://github.com/erlang/otp/blob/master/erts/emulator/sys/win32/erl_poll.c\n[erts/emulator/sys/common/erl_check_io.c]: https://github.com/erlang/otp/blob/master/erts/emulator/sys/common/erl_check_io.c\n[erts/emulator/beam/erl_port_task.c]: https://github.com/erlang/otp/blob/master/erts/emulator/beam/erl_port_task.c\n[erl_check_io.c]: https://github.com/erlang/otp/blob/master/erts/emulator/sys/common/erl_check_io.c\n[erts/emulator/beam/erl_port_task.c]: https://github.com/erlang/otp/blob/master/erts/emulator/beam/erl_port_task.c\n[WaitForMultipleObjects]: https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-waitformultipleobjects","ref":"checkio.html"},{"type":"extras","title":"Polling - Checking for I/O events","doc":"The polling subsystem basically has two API functions; erts_poll_control and\nerts_poll_wait. erts_poll_control is used to update a ErtsPollSet and\nerts_poll_wait is used to wait for an event in the pollset to be triggered or a\ntimeout to happen (the timeout can be 0 if just checking). Only a single thread\nusually calls erts_poll_wait at the same time, but multiple threads calls\nerts_poll_control at any time.\n\nThe implementation of Unix and Windows are completely different as Windows does\nnot really have a concept of \"polling\" for an event.","ref":"checkio.html#polling"},{"type":"extras","title":"Polling on Unix - Checking for I/O events","doc":"The poll implemention on Unix support a variety of different polling mechanisms.\nAt the writing of this document they are: [epoll] (Linux), [kqueue] (MacOS + *Bsd),\n[/dev/poll] (Solaris), [poll] and [select]. [epoll]+[kqueue]+[/dev/poll] are\nreferred to as \"kernel polling\" methods, as the information about which FDs are currently monitored\nlives in the OS kernel, while [poll]+[select] are \"user polling\" methods as the\ncaller needs to supply all FDs of interest to the kernel everything erts_poll_wait\nis called.\n\nBy default all Unix'es use a \"kernel polling\" method, but has a fallback pollset that\nuses \"user polling\" for FDs that the \"kernel polling\" mechanism does not\nsupport (for example the stdin FD on Linux cannot be monitored by [epoll]).\n\nAs the kernel polling methods have their monitoring information in the kernel\nit is possible to update these in parallel and without waking the thread that\nis currently waiting for events. For user polling a queue of needed updates\nis managed by each pollset and whenever an update is done to that queue the\nthread waiting on events is woken up to update the set of file descriptors it\nis waiting on.\n\nWhen using kernel polling it is possible to have multiple poll threads\n(using the [+IOt](erl_cmd.md#+IOt) flag) that read events from the same pollset.\nThis can be useful for very busy systems with many many FDs that become active alot.\nIf the kernel you are using is not very good at allowing multiple threads to\ncheck in the same pollset (this primarily applied to old versions of Linux),\nthen it is also possible to configure erts to use separate\npollsets for each pollthread ((using the [+IOp](erl_cmd.md#+IOp) flag)).\n\nWhen an event is triggered it is removed from the pollset and needs to be\nre-enabled before any new events are triggered. If [ONESHOT] or equivalent is\navailable then kernel polling uses that flag, otherwise erl_poll will update\nthe pollset as the event is triggered.\n\n[epoll]: https://man7.org/linux/man-pages/man7/epoll.7.html\n[kqueue]: https://man.freebsd.org/cgi/man.cgi?kqueue\n[/dev/poll]: https://docs.oracle.com/cd/E88353_01/html/E37851/poll-4d.html\n[poll]: https://man7.org/linux/man-pages/man2/poll.2.html\n[select]: https://man7.org/linux/man-pages/man2/select.2.html\n[ONESHOT]: https://man7.org/linux/man-pages/man2/epoll_ctl.2.html#:~:text=EPOLLONESHOT","ref":"checkio.html#polling-on-unix"},{"type":"extras","title":"Polling on Windows - Checking for I/O events","doc":"Polling on Windows uses similar mechanism to \"user polling\" on Unix, except\nthat because WaitForMultipleObjects is limited to wait for 64 handles it\nalso needs to manage a thread pool. New threads are created as needed, so\nif the system only ever listens for events on less then 64 handles only 1\nthread will be created, but as the number of concurrent handles grow more\nand more threads will be created.\n\nThe thread pool is never shrunk, so if the system at any point uses 1000\nhandles, there will forever be 16 threads in the thread pool.","ref":"checkio.html#polling-on-windows"},{"type":"extras","title":"Check I/O - Checking for I/O events","doc":"Checking for I/O is done by dedicated polling threads. By default, one\nthread will always be waiting for I/O events using default polling method\nand the \"aux\" thread will be waiting in the fallback pollset if such exists.\n\nWhen an event is triggered it is dispatched to the correct port or process\ndepending on whether it is a driver or nif that has requested the event.\nAs the pollsets use [ONESHOT], the event is disabled until the port/NIF\nregisters a new interest in the event.\n\nWhen you do a driver_select in a linked-in driver, that select will\nbe active until it is disabled. Because of this we need to insert the\nFD back into the pollset when a driver_select event has been handled.\nThis is done by the port re-inserting the FD in the pollset after\na ready_input/ready_output event is called. For NIFs you need to call\nenif_select for each event that you want, so no such mechanism needs\nto exist for NIFs.","ref":"checkio.html#check-i-o"},{"type":"extras","title":"Scheduler pollset - Checking for I/O events","doc":"For very active FDs the fact that we need to re-insert events each time\nthey trigger can lead to quite a lot of overhead. Because of this there\nis an optimization that places FDs that are never deselected into a\nspecial pollset managed that is not checked by the poll threads, but\ninstead checked by the normal schedulers. In this pollset, the FDs no\nlonger use the [ONESHOT] mechanism, instead they trigger as soon as there\nis data. For this to work, and not re-trigger on FDs before the port/nif has\nhandled the event, there is a global counter called erts_port_task_outstanding_io_tasks\nthat is incremented for each FD that is dispatched from the scheduler pollset.\nThat counter is then decremented as the FDs are handled by the ports/processes\nthat have subscribed to the event. When it reaches 0, we know that it is\nsafe to check for new events. This increases the latency for how quickly\nwe check for new events by a bit, but drastically reduces the CPU usage\nfor very active FDs.","ref":"checkio.html#scheduler-pollset"},{"type":"extras","title":"Non-blocking code loading","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2014-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nNon-blocking code loading\n=========================\n\nIntroduction\n------------\n\nBefore OTP R16 when an Erlang code module was loaded, all other\nexecution in the VM were halted while the load operation was carried\nout in single threaded mode. This might not be a big problem for\ninitial loading of modules during VM boot, but it can be a severe\nproblem for availability when upgrading modules or adding new code on\na VM with running payload. This problem grows with the number of cores\nas both the time it takes to wait for all schedulers to stop increases\nas well as the potential amount of halted ongoing work.\n\nIn OTP R16, modules are loaded without blocking the VM.\nErlang processes may continue executing undisturbed in parallel during\nthe entire load operation. The code loading is carried out by a normal\nErlang process that is scheduled like all the others. The load\noperation is completed by making the loaded code visible to all\nprocesses in a consistent way with one single atomic\ninstruction. Non-blocking code loading will improve real-time\ncharacteristics when modules are loaded/upgraded on a running SMP\nsystem.\n\n\nThe Load Phases\n---------------\n\nThe loading of a module is divided into two phases; a *prepare phase*\nand a *finishing phase*. The prepare phase contains reading the BEAM\nfile format and all the preparations of the loaded code that can\neasily be done without interference with the running code. The\nfinishing phase will make the loaded (and prepared) code accessible\nfrom the running code. Old module versions (replaced or deleted) will\nalso be made inaccessible by the finishing phase.\n\nThe prepare phase is designed to allow several \"loader\" processes to\nprepare separate modules in parallel while the finishing phase can\nonly be done by one loader process at a time. A second loader process\ntrying to enter finishing phase will be suspended until the first\nloader is done. This will only block the process, the scheduler is\nfree to schedule other work while the second loader is waiting. (See\n`erts_try_seize_code_load_permission` and\n`erts_release_code_load_permission`).\n\nThe ability to prepare several modules in parallel is not currently\nused as almost all code loading is serialized by the code\\_server\nprocess. The BIF interface is however prepared for this.\n\n      erlang:prepare_loading(Module, Code) -> LoaderState\n      erlang:finish_loading([LoaderState])\n\nThe idea is that `prepare_loading` could be called in parallel for\ndifferent modules and returns a \"magic binary\" containing the internal\nstate of each prepared module. Function `finish_loading` could take a\nlist of such states and do the finishing of all of them in one go.\n\nCurrently we use the legacy BIF `erlang:load_module` which is now\nimplemented in Erlang by calling the above two functions in\nsequence. Function `finish_loading` is limited to only accepts a list\nwith one module state as we do not yet use the multi module loading\nfeature.\n\n\nThe Finishing Sequence\n----------------------\n\nDuring VM execution, code is accessed through a number of data\nstructures. These *code access structures* are\n\n* Export table. One entry for every exported function.\n* Module table. One entry for each loaded module.\n* \"beam\\_catches\". Identifies jump destinations for catch instructions.\n* \"beam\\_ranges\". Map code address to function and line in source file.\n\nThe most frequently used of these structures is the export table that\nis accessed in run time for every executed external function call to\nget the address of the callee. For performance reasons, we want to\naccess all these structures without any overhead from thread\nsynchronization. Earlier this was solved with an emergency break. Stop\nthe entire VM to mutate these code access structures, otherwise treat\nthem as read-only.\n\nThe solution in R16 is instead to *replicate* the code access\nstructures. We have one set of active structures read by the running\ncode. When new code is loaded the active structures are copied, the\ncopy is updated to include the newly loaded module and then a switch\nis made to make the updated copy the new active set. The active set is\nidentified by a single global atomic variable\n`the_active_code_index`. The switch can thus be made by a single\natomic write operation. The running code have to read this atomic\nvariable when using the active access structures, which means one\natomic read operation per external function call for example. The\nperformance penalty from this extra atomic read is however very small\nas it can be done without any memory barriers at all (as described\nbelow). With this solution we also preserve the transactional feature\nof a load operation. Running code will never see the intermediate\nresult of a half loaded module.\n\nThe finishing phase is carried out in the following sequence by the\nBIF `erlang:finish_loading`:\n\n1. Seize exclusive code load permission (suspend process if needed\n   until we get it).\n\n2. Make a full copy of all the active access structures. This copy is\n   called the staging area and is identified by the global atomic\n   variable `the_staging_code_index`.\n\n3. Update all access structures in the staging area to include the\n   newly prepared module.\n\n4. Schedule a thread progress event. That is a time in the future when\n   all schedulers have yielded and executed a full memory barrier.\n\n5. Suspend the loader process.\n\n6. After thread progress, commit the staging area by assigning\n   `the_staging_code_index` to `the_active_code_index`.\n\n7. Release the code load permission allowing other processes to stage\n   new code.\n\n8. Resume the loader process allowing it to return from\n   `erlang:finish_loading`.","ref":"codeloading.html"},{"type":"extras","title":"Thread Progress - Non-blocking code loading","doc":"The waiting for thread progress in 4-6 is necessary in order for\nprocesses to read `the_active_code_index` atomic during normal\nexecution without any expensive memory barriers. When we write a new\nvalue into `the_active_code_index` in step 6, we know that all\nschedulers will see an updated and consistent view of all the new\nactive access structures once they become reachable through\n`the_active_code_index`.\n\nThe total lack of memory barrier when reading `the_active_code_index`\nhas one interesting consequence however. Different processes may see\nthe new code at different point in time depending on when different\ncores happen to refresh their hardware caches. This may sound unsafe\nbut it actually does not matter. The only property we must guarantee\nis that the ability to see the new code must spread with process\ncommunication. After receiving a message that was triggered by new\ncode, the receiver must be guaranteed to also see the new code. This\nwill be guaranteed as all types of process communication involves\nmemory barriers in order for the receiver to be sure to read what the\nsender has written. This implicit memory barrier will then also make\nsure that the receiver reads the new value of `the_active_code_index`\nand thereby also sees the new code. This is true for all kinds of\ninter process communication (TCP, ETS, process name registering,\ntracing, drivers, NIFs, etc) not just Erlang messages.","ref":"codeloading.html#thread-progress"},{"type":"extras","title":"Code Index Reuse - Non-blocking code loading","doc":"To optimize the copy operation in step 2, code access structures are\nreused. In current solution we have three sets of code access\nstructures, identified by a code index of 0, 1 and 2. These indexes\nare used in a round robin fashion. Instead of having to initialize a\ncompletely new copy of all access structures for every load operation\nwe just have to update with the changes that have happened since the\nlast two code load operations. We could get by with only two code\nindexes (0 and 1), but that would require yet another round of waiting\nfor thread progress before step 2 in the `finish_loading` sequence. We\ncannot start reusing a code index as staging area until we know that\nno lingering scheduler thread is still using it as the active code\nindex. With three generations of code indexes, the waiting for thread\nprogress in step 4-6 will give this guarantee for us. Thread progress\nwill wait for all running schedulers to reschedule at least one\ntime. No ongoing execution reading code access structures reached from\nan old value of `the_active_code_index` can exist after a second round\nof thread progress.\n\nThe design choice between two or three generations of code access\nstructures is a trade-off between memory consumption and code loading\nlatency.","ref":"codeloading.html#code-index-reuse"},{"type":"extras","title":"A Consistent Code View - Non-blocking code loading","doc":"Some native BIFs may need to get a consistent snapshot view of the\nactive code. To do this it is important to only read\n`the_active_code_index` one time and then use that index value for all\ncode accessing during the BIF. If a load operation is executed in\nparallel, reading `the_active_code_index` a second time might result\nin a different value, and thereby a different view of the code.","ref":"codeloading.html#a-consistent-code-view"},{"type":"extras","title":"Counting Instructions","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2019-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nCounting Instructions\n=====================\n\nHere is an example that shows how to count how many times each\ninstruction is executed:\n\n    $ (cd erts/emulator && make icount)\n     MAKE\ticount\n    make[1]: Entering directory `/home/uabbgus/otp/erts/emulator'\n      .\n      .\n      .\n    make[1]: Leaving directory `/home/uabbgus/otp/erts/emulator'\n    $ cat t.erl\n    -module(t).\n    -compile([export_all,nowarn_export_all]).\n\n    count() ->\n        erts_debug:ic(fun benchmark/0).\n\n    benchmark() ->\n        %% Run dialyzer.\n        Root = code:root_dir(),\n        Wc1 = filename:join(Root, \"lib/{kernel,stdlib}/ebin/*.beam\"),\n        Wc2 = filename:join(Root, \"erts/preloaded/ebin/*.beam\"),\n        Files = filelib:wildcard(Wc1) ++ filelib:wildcard(Wc2),\n        Opts = [{analysis_type,plt_build},{files,Files},{get_warnings,true}],\n        dialyzer:run(Opts).\n    $ $ERL_TOP/bin/cerl -icount\n    Erlang/OTP 22 [RELEASE CANDIDATE 1] [erts-10.2.4] [source-ac0d451] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [hipe] [instruction-counting]\n\n    Eshell V10.2.4  (abort with ^G)\n    1> c(t).\n    {ok,t}\n    2> t:count().\n               0 badarg_j\n               0 badmatch_x\n               0 bs_add_jsstx\n               0 bs_context_to_binary_x\n                .\n                .\n                .\n       536461394 move_call_last_yfQ\n       552405176 allocate_tt\n       619920327 i_is_eq_exact_immed_frc\n       636419163 is_nonempty_list_allocate_frtt\n       641859278 i_get_tuple_element_xPx\n       678196718 move_return_c\n       786289914 is_tagged_tuple_frAa\n       865826424 i_call_f\n    Total: 20728870321\n    []\n    3>","ref":"countinginstructions.html"},{"type":"extras","title":"Delayed Dealloc","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2013-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nDelayed Dealloc\n===============\n\nProblem\n-------\n\nAn easy way to handle memory allocation in a multi-threaded\nenvironment is to protect the memory allocator with a global lock\nwhich threads performing memory allocations or deallocations have to\nhave locked during the whole operation. This solution of course scales\nvery poorly, due to heavy lock contention. An improved solution of\nthis scheme is to use multiple thread specific instances of such an\nallocator. That is, each thread allocates in its own allocator\ninstance which is protected by a lock. In the general case references\nto memory need to be passed between threads. In the case where a\nthread that needs to deallocate memory that originates from another\nthreads allocator instance a lock conflict is possible. In a system as\nthe Erlang VM where memory allocation/deallocation is frequent and\nreferences to memory also are passed around between threads this\nsolution will also scale poorly due to lock contention.\n\nFunctionality Used to Address This problem\n-----------------------------------------\n\nIn order to reduce contention due to locking of allocator instances we\nintroduced completely lock free instances tied to each scheduler\nthread, and an extra locked instance for other threads. The scheduler\nthreads in the system is expected to do the major part of the\nwork. Other threads may still be needed but should not perform any\nmajor and/or time critical work. The limited amount of contention that\nappears on the locked allocator instance can more or less be\ndisregarded.\n\nSince we still need to be able to pass references to memory between\nscheduler threads we need some way to manage this. An allocator\ninstance belonging to one scheduler thread is only allowed to be\nmanipulated by that scheduler thread. When other threads need to\ndeallocate memory originating from a foreign allocator instance, they\nonly pass the memory block to a \"message box\" containing deallocation\njobs attached to the originating allocator instance. When a scheduler\nthread detects such deallocation job it performs the actual\ndeallocation.\n\nThe \"message box\" is implemented using a lock free single linked list\nthrough the memory blocks to deallocate. The order of the elements in\nthis list is not important. Insertion of new free blocks will be made\nsomewhere near the end of this list. Requiring that the new blocks\nneed to be inserted at the end would cause unnecessary contention when\nlarge amount of memory blocks are inserted simultaneous by multiple\nthreads.\n\nThe data structure referring to this single linked list cover two cache\nlines. One cache line containing information about the head of the\nlist, and one cache line containing information about the tail of the\nlist. This in order to reduce cache line ping ponging of this data\nstructure. The head of the list will only be manipulated by the thread\nowning the allocator instance, and the tail will be manipulated by\nother threads inserting deallocation jobs.","ref":"delayeddealloc.html"},{"type":"extras","title":"Tail - Delayed Dealloc","doc":"In the tail part of the data structure we find a pointer to the last\nelement of the list, or at least something that is near the end of the\nlist. In the uncontended case it will point to the end of the list,\nbut when simultaneous insert operations are performed it will point to\nsomething near the end of the list.\n\nWhen inserting an element one will try to write a pointer to the new\nelement in the next pointer of the element pointed to by the last\npointer. This is done using an atomic compare and swap that expects\nthe next pointer to be `NULL`. If this succeeds the thread performing\nthis operation moves the last pointer to point to the newly inserted\nelement.\n\nIf the atomic compare and swap described above failed, the last\npointer didn't point to the last element. In this case we need to\ninsert the new element somewhere between the element that the last\npointer pointed to and the actual last element. If we do it this way\nthe last pointer will eventually end up at the last element when\nthreads stop adding new elements. When trying to insert somewhere near\nthe end and failing to do so, the inserting thread sometimes moves to\nthe next element and sometimes tries with the same element again. This\nin order to spread the inserted elements during heavy contention. That\nis, we try to spread the modifications of memory to different\nlocations instead of letting all threads continue to try to modify the\nsame location in memory.","ref":"delayeddealloc.html#tail"},{"type":"extras","title":"Head - Delayed Dealloc","doc":"The head contains pointers to beginning of the list (`head.first`), and\nto the first block which other threads may refer to\n(`head.unref_end`). Blocks between these pointers are only referred to\nby the head part of the data structure which is only used by the\nthread owning the allocator instance. When these two pointers are not\nequal the thread owning the allocator instance deallocate block after\nblock until `head.first` reach `head.unref_end`.\n\nWe of course periodically need to move the `head.unref_end` closer to\nthe end in order to be able to continue deallocating memory\nblocks. Since all threads inserting new elements in the linked list\nwill enter the list using the last pointer we can use this\nknowledge. If we call `erts_thr_progress_later()` and wait until we\nhave reached that thread progress we know that no managed threads can\nrefer the elements up to the element pointed to by the last pointer at\nthe time when we called `erts_thr_progress_later()`. This since, all\nmanaged threads must have left the code implementing this at least\nonce, and they always enters into the list via the last pointer. The\n`tail.next` field contains information about next `head.unref_end`\npointer and thread progress that needs to be reached before we can\nmove `head.unref_end`.\n\nUnfortunately not only threads managed by the thread progress\nfunctionality may insert memory blocks. Other threads also needs to be\ntaken care of. Other threads will not be as frequent users of this\nfunctionality as managed threads, so using a less efficient scheme for\nthem is not that big of a problem. In order to handle unmanaged\nthreads we use two reference counters. When an unmanaged thread enters\nthis implementation it increments the reference counter currently\nused, and when it leaves this implementation it decrements the same\nreference counter. When the consumer thread calls\n`erts_thr_progress_later()` in order to determine when it is safe to\nmove `head.unref_end`, it also swaps reference counters for unmanaged\nthreads. The previous current represents outstanding references from\nthe time up to this point. The new current represents future reference\nfollowing this point. When the consumer thread detects that we have\nboth reached the desired thread progress and when the previous current\nreference counter reach zero it is safe to move the `head.unref_end`.\n\nThe reason for using two reference counters is that we need to know\nthat the reference counter eventually will reach zero. If we only used\none reference counter it would potentially be held above zero for ever\nby different unmanaged threads.","ref":"delayeddealloc.html#head"},{"type":"extras","title":"Empty List - Delayed Dealloc","doc":"If no new memory blocks are inserted into the list, it should\neventually be emptied. All pointers to the list however expect to\nalways point to something. This is solved by inserting an empty\n\"marker\" element, which only has to purpose of being there in the\nabsence of other elements. That is when the list is empty it only\ncontains this \"marker\" element.","ref":"delayeddealloc.html#empty-list"},{"type":"extras","title":"Contention - Delayed Dealloc","doc":"When elements are continuously inserted by threads not owning the\nallocator instance, the thread owning the allocator instance will be\nable to work more or less undisturbed by other threads at the head end\nof the list. At the tail end large amounts of simultaneous inserts may\ncause contention, but we reduce such contention by spreading inserts\nof new elements near the end instead of requiring all new elements to\nbe inserted at the end.","ref":"delayeddealloc.html#contention"},{"type":"extras","title":"Schedulers and The Locked Allocator Instance - Delayed Dealloc","doc":"Also the locked allocator instance for use by non-scheduler threads\nhave a message box for deallocation jobs just as all the other\nallocator instances. The reason for this is that other threads may\nallocate memory pass it to a scheduler that then needs to deallocate\nit. We do not want the scheduler to have to wait for the lock on this\nlocked instance. Since also locked instances has message boxes for\ndeallocation jobs, the scheduler can just insert the job and avoid the\nlocking.","ref":"delayeddealloc.html#schedulers-and-the-locked-allocator-instance"},{"type":"extras","title":"A Benchmark Result - Delayed Dealloc","doc":"When running the ehb benchmark, large amount of messages are passed\naround between schedulers. All message passing will in some way or the\nother cause memory allocation and deallocation. Since messages are\npassed between different schedulers we will get contention on the\nallocator instances where messages were allocated. By the introduction\nof the delayed dealloc feature, we got a speedup of between 25-45%,\ndepending on configuration of the benchmark, when running on a\nrelatively new machine with an Intel i7 quad core processor with\nhyper-threading using 8 schedulers.","ref":"delayeddealloc.html#a-benchmark-result"},{"type":"extras","title":"Erlang Garbage Collector","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2017-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\n# Erlang Garbage Collector\n\nErlang manages dynamic memory with a [tracing garbage collector](https://en.wikipedia.org/wiki/Tracing_garbage_collection). More precisely a per process generational semi-space copying collector using Cheney's copy collection algorithm together with a global large object space. (See C. J. Cheney in [References](#references).)","ref":"garbagecollection.html"},{"type":"extras","title":"Overview - Erlang Garbage Collector","doc":"Each Erlang process has its own stack and heap which are allocated in the same memory block and grow towards each other. When the stack and the heap [meet](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/beam_emu.c#L387), the garbage collector is triggered and memory is reclaimed. If not enough memory was reclaimed, the heap will grow.","ref":"garbagecollection.html#overview"},{"type":"extras","title":"Creating Data - Erlang Garbage Collector","doc":"Terms are created on the heap by evaluating expressions. There are two major types of terms: [immediate terms](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L88-L97) which require no heap space (small integers, atoms, pids, port ids etc) and cons or [boxed terms](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_term.h#L106-L120) (tuple, big num, binaries etc) that do require heap space. Immediate terms do not need any heap space because they are embedded into the containing structure.\n\nLet's look at an example that returns a tuple with the newly created data.\n\n\n    data(Foo) ->\n       Cons = [42|Foo],\n       Literal = {text, \"hello world!\"},\n       {tag, Cons, Literal}.\n\nIn this example we first create a new cons cell with an integer and a tuple with some text. Then a tuple of size three wrapping the other values with an atom tag is created and returned.\n\nOn the heap tuples require a word size for each of its elements as well as for the header. Cons cells always require two words. Adding these things together, we get seven words for the tuples and 26 words for the cons cells. The string `\"hello world!\"` is a list of cons cells and thus requires 24 words. The atom `tag` and the integer `42` do not require any additional heap memory since it is an *immediate*. Adding all the terms together, the heap space required in this example should be 33 words.\n\nCompiling this code to beam assembly (`erlc -S`) shows exactly what is happening.\n\n    ...\n    {test_heap,6,1}.\n    {put_list,{integer,42},{x,0},{x,1}}.\n    {put_tuple,3,{x,0}}.\n    {put,{atom,tag}}.\n    {put,{x,1}}.\n    {put,{literal,{text,\"hello world!\"}}}.\n    return.\n\nLooking at the assembler code we can see three things: The heap requirement in this function turns out to be only six words, as seen by the `{test_heap,6,1}` instruction. All the allocations are combined to a single instruction. The bulk of the data `{text, \"hello world!\"}` is a *literal*. Literals, sometimes referred to as constants, are not allocated in the function since they are a part of the module and allocated at load time.\n\nIf there is not enough space available on the heap to satisfy the `test_heap` instructions request for memory, then a garbage collection is initiated. It may happen immediately in the `test_heap` instruction, or it can be delayed until a later time depending on what state the process is in. If the garbage collection is delayed, any memory needed will be allocated in heap fragments. Heap fragments are extra memory blocks that are a part of the young heap, but are not allocated in the contiguous area where terms normally reside. See [The young heap](#the-young-heap) for more details.","ref":"garbagecollection.html#creating-data"},{"type":"extras","title":"The collector - Erlang Garbage Collector","doc":"Erlang has a copying semi-space garbage collector. This means that when doing a garbage collection, the terms are copied from one distinct area, called the *from space*, to a new clean area, called the *to space*. The collector starts by [scanning the root-set](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1980) (stack, registers, etc).\n\n![Garbage collection: initial values](assets/gc-start.png)\n\nIt follows all the pointers from the root-set to the heap and copies each term word by word to the *to space*.\n\nAfter the header word has been copied a [*move marker*](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.h#L45-L46) is destructively placed in it pointing to the term in the *to space*. Any other term that points to the already moved term will [see this move marker](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1125) and copy the referring pointer instead. For example, if the have the following Erlang code:\n\n    foo(Arg) ->\n        T = {test, Arg},\n        {wrapper, T, T, T}.\n\nOnly one copy of T exists on the heap and during the garbage collection only the first time T is encountered will it be copied.\n\n![Garbage collection: root set scan](assets/gc-rootset-scan.png)\n\nAfter [all terms](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1089) referenced by the root-set have been copied, the collector scans the *to space* and copies all terms that these terms reference. When scanning, the collector steps through each term on the *to space* and any term still referencing the *from space* is copied over to the *to space*. Some terms contain non-term data (the payload of a on heap binary for instance). When encountered by the collector, these values are simply skipped.\n\n![Garbage collection: heap scan](assets/gc-heap-scan1.png)\n\nEvery term object we can reach is copied to the *to space* and stored on top of the *scan stop* line, and then the scan stop is moved to the end of the last object.\n\n![Garbage collection: heap scan](assets/gc-heap-stop.png)\n\nWhen *scan stop* marker [catches up](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1103) to the *scan start* marker, the garbage collection is done. At this point we can [deallocate](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1206) the entire *from space* and therefore reclaim the entire young heap.","ref":"garbagecollection.html#the-collector"},{"type":"extras","title":"Generational Garbage Collection - Erlang Garbage Collector","doc":"In addition to the collection algorithm described above, the Erlang garbage collector also provides generational garbage collection. An additional heap, called the old heap, is used where the long lived data is stored. The original heap is called the young heap, or sometimes the allocation heap.\n\nWith this in mind we can look at the Erlang's garbage collection again. During the copy stage anything that should be copied to the young *to space* is instead copied to the old *to space* *if* it is [below the *high-watermark*](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1127).\n\n![Garbage collection: heap scan](assets/gc-watermark.png)\n\nThe [*high-watermark*](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_process.h#L1021) is placed where the previous garbage collection (described in [Overview](#overview)) ended and we have introduced a new area called the old heap. When doing the normal garbage collection pass, any term that is located below the high-watermark is copied to the old *to space* instead of the young.\n\n![Garbage collection: heap scan](assets/gc-watermark-2.png)\n\nIn the next garbage collection, any pointers to the old heap will be ignored and not scanned. This way the garbage collector does not have to scan the long-lived terms.\n\nGenerational garbage collection aims to increase performance at the expense of memory. This is achieved because only the young, smaller, heap is considered in most garbage collections.\n\nThe generational hypothesis predicts that most terms tend to die young (see D. Ungar in [References](#references)), and for an immutable language such as Erlang, young terms die even faster than in other languages. So for most usage patterns the data in the new heap will die very soon after it is allocated. This is good because it limits the amount of data copied to the old heap and also because the garbage collection algorithm used is proportional to the amount of live data on the heap.\n\nOne critical issue to note here is that any term on the young heap can reference terms on the old heap but *no* term on the old heap may refer to a term on the young heap. This is due to the nature of the copy algorithm. Anything referenced by an old heap term is not included in the reference tree, root-set and its followers, and hence is not copied. If it was, the data would be lost, fire and brimstone would rise to cover the earth. Fortunately, this comes naturally for Erlang because the terms are immutable and thus there can be no pointers modified on the old heap to point to the young heap.\n\nTo reclaim data from the old heap, both young and old heaps are included during the collection and copied to a common *to space*. Both the *from space* of the young and old heap are then deallocated and the procedure will start over from the beginning. This type of garbage collection is called a full sweep and is triggered when the size of the area under the high-watermark is larger than the size of the free area of the old heap. It can also be triggered by doing a manual call to [erlang:garbage_collect()](http://erlang.org/doc/man/erlang.html#garbage_collect-0), or by running into the young garbage collection limit set by [spawn\\_opt(fun(),[{fullsweep\\_after, N}\\])](http://erlang.org/doc/man/erlang.html#spawn_opt-4) where N is the number of young garbage collections to do before forcing a garbage collection of both young and old heap.","ref":"garbagecollection.html#generational-garbage-collection"},{"type":"extras","title":"The young heap - Erlang Garbage Collector","doc":"The young heap, or the allocation heap, consists of the stack and heap as described in the Overview. However, it also includes any heap fragments that are attached to the heap. All of the heap fragments are considered to be above the high-watermark and part of the young generation. Heap fragments contain terms that either did not fit on the heap, or were created by another process and then attached to the heap. For instance if the bif `binary_to_term/1` created a term which does not fit on the current heap without doing a garbage collection, it will create a heap-fragment for the term and then schedule a garbage collection for later. Also if a message is sent to the process, the payload may be placed in a heap-fragment and that fragment is added to young heap when the message is matched in a receive clause.\n\nThis procedure differs from how it worked prior to Erlang/OTP 19.0. Before 19.0, only a contiguous memory block where the young heap and stack resided was considered to be part of the young heap. Heap fragments and messages were immediately copied into the young heap before they could be inspected by the Erlang program. The behaviour introduced in 19.0 is superior in many ways - most significantly it reduces the number of necessary copy operations and the root set for garbage collection.","ref":"garbagecollection.html#the-young-heap"},{"type":"extras","title":"Sizing the heap - Erlang Garbage Collector","doc":"As mentioned in the Overview the size of the heap [grows](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L247) to accommodate more data. Heaps grow in two stages, first a [variation of the Fibonacci sequence](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L199-L208) is used starting at 233 words. Then at about 1 mega words the heap only [grows in 20% increments](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L215-L227).\n\nThere are two occasions when the young heap grows:\n\n* if the total size of the heap + message and heap fragments exceeds the current heap size.\n* if after a fullsweep, the total amount of live objects is greater than 75%.\n\nThere are two occasions when the young heap is shrunk:\n\n* if after a young collection, the total amount of live objects is less than 25% of the heap and the young heap is \"big\"\n* if after a fullsweep, the total amount of live objects is less than 25% of the heap.\n\nThe old heap is always one step ahead in the heap growth stages than the young heap.","ref":"garbagecollection.html#sizing-the-heap"},{"type":"extras","title":"Literals - Erlang Garbage Collector","doc":"When garbage collecting a heap (young or old) all literals are left in place and not copied. To figure out if a term should be copied or not when doing a garbage collection the following pseudo code is used:\n\n    if (erts_is_literal(ptr) || (on_old_heap(ptr) && !fullsweep)) {\n      /* literal or non fullsweep - do not copy */\n    } else {\n      copy(ptr);\n    }\n\nThe [`erts_is_literal`](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/global.h#L1452-L1465) check works differently on different architectures and operating systems.\n\nOn 64 bit systems that allow mapping of unreserved virtual memory areas (most operating systems except Windows), an area of size 1 GB (by default) is mapped and then all literals are placed within that area. Then all that has to be done to determine if something is a literal or not is [two quick pointer checks](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_alloc.h#L322-L324). This system relies on the fact that a memory page that has not been touched yet does not take any actual space. So even if 1 GB of virtual memory is mapped, only the memory which is actually needed for literals is allocated in ram. The size of the literal area is configurable through the +MIscs erts\\_alloc option.\n\nOn 32 bit systems, there is not enough virtual memory space to allocate 1 GB for just literals, so instead small 256 KB sized literal regions are created on demand and a card mark bit-array of the entire 32 bit memory space is then used to determine if a term is a literal or not. Since the total memory space is only 32 bits, the card mark bit-array is only 256 words large. On a 64 bit system the same bit-array would have to be 1 tera words large, so this technique is only viable on 32 bit systems. Doing [lookups in the array](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_alloc.h#L316-L319) is a little more expensive then just doing the pointer checks that can be done in 64 bit systems, but not extremely so.\n\nOn 64 bit windows, on which erts\\_alloc cannot do unreserved virtual memory mappings, a [special tag](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_term.h#L59) within the Erlang term object is used to determine if something [is a literal or not](https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/erl_term.h#L248-L252). This is very cheap, however, the tag is only available on 64 bit machines, and it is possible to do a great deal of other nice optimizations with this tag in the future (like for instance a more compact list implementation) so it is not used on operating systems where it is not needed.\n\nThis behaviour is different from how it worked prior to Erlang/OTP 19.0. Before 19.0 the literal check was done by checking if the pointer pointed to the young or old heap block. If it did not, then it was considered a literal. This lead to considerable overhead and strange memory usage scenarios, so it was removed in 19.0.","ref":"garbagecollection.html#literals"},{"type":"extras","title":"Binary heap - Erlang Garbage Collector","doc":"The binary heap works as a large object space for binary terms that are greater than 64 bytes (from now on called off-heap binaries). The binary heap is [reference counted](https://en.wikipedia.org/wiki/Reference_counting) and a pointer to the off-heap binary is stored on the process heap. To keep track of when to decrement the reference counter of the off-heap binary, a linked list (the MSO - mark and sweep object list) containing funs and externals as well as off-heap binaries is woven through the heap. After a garbage collection is done, the [MSO list is swept](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L2299) and any off-heap binary that does not have a [move marker](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L2325) written into the header words has its reference [decremented and is potentially freed](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L2344-L2367).\n\nAll items in the MSO list are ordered by the time they were added to the process heap, so when doing a minor garbage collection, the MSO sweeper only has to sweep until it [encounters an off-heap binary that is on the old heap](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L2369).","ref":"garbagecollection.html#binary-heap"},{"type":"extras","title":"Virtual Binary heap - Erlang Garbage Collector","doc":"Each process has a virtual binary heap associated with it that has the size of all the current off-heap binaries that the process has references to. The virtual binary heap also has a limit and grows and shrinks depending on how off-heap binaries are used by the process. The same growth and shrink mechanisms are used for the binary heap and for the term heap, so first a Fibonacci like series and then 20% growth.\n\nThe virtual binary heap exists in order to [trigger](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/beam_emu.c#L364) garbage collections earlier when potentially there is a very large amount of off-heap binary data that could be reclaimed. This approach does not catch all problems with binary memory not being released soon enough, but it does catch a lot of them.","ref":"garbagecollection.html#virtual-binary-heap"},{"type":"extras","title":"Messages - Erlang Garbage Collector","doc":"Messages can become a part of the process heap at different times. This depends on how the process is configured.\nWe can configure the behaviour of each process using `process_flag(message_queue_data, off_heap | on_heap)` or we can set a default for all processes at start using the option `+hmqd`.\n\nWhat do these different configurations do and when should we use them?\nLet's start by going through what happens when one Erlang process sends a message to another.\nThe sending process needs to do a couple of things:\n\n1. calculate [how large](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L1031) the message to be sent is\n2. [allocate enough space](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L1033) to fit the entire message\n3. [copy](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L1040) the message payload\n4. allocate a message container with some meta data\n5. [insert](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_message.c#L502) the message container in the receiver process' [message queue](https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_process.h#L1042)\n\nThe process flag `message_queue_data`, of the receiver process, controls the message allocating strategy of the sender process in step 2 and also how the message data is treated by the garbage collector.\n\nThe procedure above is different from how it worked prior to 19.0. Before 19.0 there was no configuration option, the behaviour was always very similar to how the `on_heap` option is in 19.0.","ref":"garbagecollection.html#messages"},{"type":"extras","title":"Message allocating strategies - Erlang Garbage Collector","doc":"If set to `on_heap`, the sending process will first attempt to allocate the space for the message directly on the young heap block of the receiving process.\nThis is not always possible as it requires taking the *main lock* of the receiving process. The main lock is also held when the process is executing. The possibility for a lock conflict is thus likely in an intensely collaborating system.\nIf the sending process cannot acquire the main lock, a heap fragment is instead created for the message and the message payload is copied onto that.\nWith the `off_heap` option the sender process always creates heap fragments for messages sent to that process.\n\nThere are a bunch of different tradeoffs that come into play when trying to figure out which of the strategies you want to use.\n\nUsing `off_heap` may seem like a nice way to get a more scalable system as you get very little contention on the main locks, however, allocating a heap fragment is more expensive than allocating on the heap of the receiving process. So if it is very unlikely that contention will occur, it is more efficient to try to allocate the message directly on the receiving process' heap.\n\nUsing `on_heap` will force all messages to be part of on the young heap which will increase the amount of data that the garbage collector has to move. So if a garbage collection is triggered while processing a large amount of messages, they will be copied to the young heap. This in turn will lead to that the messages will quickly be promoted to the old heap and thus increase its size. This may be good or bad depending on exactly what the process does. A large old heap means that the young heap will also be larger, which in turn means that less garbage collections will be triggered while processing the message queue. This will temporarily increase the throughput of the process at the cost of more memory usage. However, if after all the messages have been consumed the process enters a state where a lot less messages are being received. Then it may be a long time before the next fullsweep garbage collection happens and the messages that are on the old heap will be there until that happens. So while `on_heap` is potentially faster than the other modes, it uses more memory for a longer time. This mode is the legacy mode which is almost how the message queue was handled before Erlang/OTP 19.0.\n\nWhich one of these strategies is best depends a lot on what the process is doing and how it interacts with other processes. So, as always, profile the application and see how it behaves with the different options.","ref":"garbagecollection.html#message-allocating-strategies"},{"type":"extras","title":"References - Erlang Garbage Collector","doc":"C. J. Cheney. A nonrecursive list compacting algorithm. Commun. ACM, 13(11):677–678, Nov. 1970.\n\nD. Ungar. Generation scavenging: A non-disruptive high performance storage reclamation algorithm. SIGSOFT Softw. Eng. Notes, 9(3):157–167, Apr. 1984.","ref":"garbagecollection.html#references"},{"type":"extras","title":"Process and Port Tables","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2013-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nProcess and Port Tables\n=======================\n\nProblems\n--------\n\nThe process table is a mapping from process identifiers to process\nstructure pointers. The process structure contains miscellaneous\ninformation about a process, as for example pointers to its heap,\nmessage queue, etc. When the runtime system needs to operate on a\nprocess, it looks up the process structure in the process table using\nthe process identifier. An example of this is when passing a message\nto a process.\n\nThe process table has for a very long time just been an array of\npointers to process structures. Since process identifiers internally\nin the runtime system are 28-bit integers it is quite easy to map a\nprocess identifier to index into the array. The 28-bits were divided\ninto two sets. The least significant set of bits was used as index\ninto the array. The most significant set of bits was only used to be\nable to distinguish between a number of identifiers with which map to\nthe same index in the array. As long as process table sizes of a power\nof two was used we had 2^28 unique process identifiers.\n\nWhen the first SMP support was implemented, the table still was kept\nmore or less the same way, but protected by two types of locks. One\nlock that protected the whole table against modifications and an array\nof locks protecting different parts of the table. The exact locking\nstrategy previously used isn't interesting. What is interesting is\nthat it suffered from heavy lock contention especially when lots of\nmodifications was being made, but also when only performing lookups.\n\nIn order to be able to detect when it is safe to deallocate a\npreviously used process structure, reference counting of the structure\nwas used. Also this was problematic, since simultaneous lookups needed\nto modify the reference counter which also caused contention on the\ncache line where the reference counter was located. This since all\nmodifications needs to be communicated between all involved\nprocessors.\n\nThe port table is very similar to the process table. The major\ndifference, at least in concept, is that it is a mapping from port\nidentifiers to port structures. It had a similar implementation, but\nwith some differences. Instead of being an array of pointers it was an\narray of structures, and instead of being protected by two types of\nlocks it was only protected by one global lock. This table also\nsuffered from lock contention in various situations.\n\nSolution\n--------\n\nThe process table was the major problem to address since processes are\nmuch more frequently used than ports. The first implementation only\nimplemented this for processes, but since the port table is very\nsimilar and very similar problems occur on the port table, the process\ntable implementation was later generalized so that it could also be\nused implementing the port table. For simplicity I will only talk\nabout the process table in the following text, but the same will apply\nto the port table unless otherwise stated.\n\nIf we disregard the locking issues, the original solution is very\nappealing. The mapping from process identifier to index into the array\nis very fast, and this property is something we would like to\nkeep. The vast majority of operations on these tables are lookups so\noptimizing for lookups is what we want to do.","ref":"ptables.html"},{"type":"extras","title":"Lookup - Process and Port Tables","doc":"Using a set of bits in the process identifier as index into an array\nseems hard to beat. By replacing the array of pointers with an array\nof our pointer sized atomic data type, a lookup will consist of the\nfollowing:\n\n1.  Mapping the 28-bit integer to an index into the array.\n\n    More about this mapping later.\n\n2.  Read the pointer using an atomic memory operation at determined\n    index in array.\n\n    On all platforms that we provide atomic memory operations, this is\n    just a `volatile` read, preventing the compiler to use values in\n    registers, forcing the a read from memory.\n\n3.  Depending on use, issue appropriate memory barrier.\n\n    A common barrier used is a barrier with acquire semantics. On\n    x86/x86\\_64 this maps to a compiler barrier preventing the compiler\n    to reorder instructions, but on other hardware often some kind of\n    light weight hardware memory barrier is also needed.\n\n    When comparing with a locked approach, at least one heavy weight\n    memory barrier will be issued when locking the lock on most, if\n    not all, hardware architectures (including x86/x86\\_64), and often\n    some kind of light weight memory barrier will be issued when\n    unlocking the lock. \n\nWhen looking at this very simple solution with very little overhead\nyou might wonder why we didn't implement it this way from the\nbeginning. It all boils down to the read operation of the pointer. We\nneed some way to know that it is safe to access the memory pointed\nto. One way of doing this is to place a reference counter in the\nprocess structure. Increment of the reference counter at lookup needs\nto be done atomically with the lookup. A lock can typically provide\nthis service for us, which was the approach we previously\nused. Another approach could be to co-locate the reference counter\nwith the pointer in the table. The major problem with this approach is\nthe modifications of the reference counter. This since these\nmodification would have to be communicated between all involved\nprocessor cause contention on the cache line containing the reference\ncounter. The new lookup approach above is possible since we can use\nthe \"thread progress\" functionality in order to determine when it is\nsafe to deallocate the process structure. We'll get back to this when\ndescribing deletion in the table.\n\nUsing this new lookup approach we won't modify any memory at all which\nis important. A lookup conceptually only read memory, now this is true\nin the implementation also which is important from a scalability\nperspective. The previous implementation modified the cache line\ncontaining the reference counter two times, and the cache line\ncontaining the corresponding lock two times at each lookup.","ref":"ptables.html#lookup"},{"type":"extras","title":"Modifications of the Table - Process and Port Tables","doc":"A lightweight lookup in the table was the most important feature, but\nwe also wanted to improve modifications of the table. The process\ntable is modified when a new process is spawned, i.e. a new pointer is\ninserted into the table, and when a process terminates, i.e. a pointer\nis deleted in the table.\n\nAssuming that we spawn fewer processes than the maximum amount of\nunique process identifiers in the system, one has always been able to\ndetermine the order of process creation just by comparing process\nidentifiers. If PidX is larger than PidY, then PidX was created after\nPidY assuming both identifiers originates from the same node. However,\nsince we have a quite limited amount of unique identifiers today\n(2^28), this property cannot be relied upon if we create large amount\nof processes. But never the less, this is a property the system always\nhave had.\n\nIf we would have had a huge amount of unique identifiers available, it\nwould have tempting to drop or modify this ordering property as\ndescribed above. The ordering property could for example be based on\nthe scheduler performing the spawn operation. It would have been\npossible to reserve large ranges of identifiers exclusive for each\nscheduler thread which could be used minimizing the need for\ncommunication when allocating identifiers. The amount of identifiers\nwe got to work with today is, however, not even close to be enough for\nsuch an approach.\n\nSince we have a limited amount of unique identifiers, we need to be\ncareful not to waste them. If previously used identifiers are reused\ntoo quick, identifiers originating from terminated processes will\nrefer to newly created processes, and mixups will occur. The\npreviously used approach was quite good at not wasting\nidentifiers. Using a modified version of the same approach also lets\nus keep the ordering property that we have always had.\n\n#### Insert ####\n\nThe original approach is more or less to search for next free index or\nslot in the array. The search starts from the last slot allocated. If\nwe reach the end of the array we increase a \"wrapped counter\" and then\ncontinue the search. The process identifier is constructed by writing\nthe index to the least significant set of bits, and the \"wrapped\ncounter\" to the most significant set of bits. The amount of bits in\neach set of bits is decided at boot time, so that maximum index will\njust fit into the least significant set of bits.\n\nIn the modified lock free version of this approach we more or less do\nit the same way, but with some important modifications trying to avoid\nunnecessary contention when multiple schedulers create processes\nsimultaneously. Since multiple threads might be trying to search for\nthe next free slot at the same time from the same starting point we\nwant subsequent slots to be located in different cache lines. Multiple\nschedulers simultaneously writing new pointers into the table are\ntherefore very likely to write into adjacent slots. If adjacent slots\nare located in the same cache line all modification of this cache line\nneeds to be communicated between all involved processors which will be\nvery expensive and scale very poor. By locating adjacent slots in\ndifferent cache lines only true conflicts will trigger communication\nbetween involved processors, i.e., avoiding false sharing.\n\nA cache line is larger than a pointer, typically 8 or 16 times larger,\nso using one cache line for each slot only containing one pointer\nwould be a waste of space. Each cache line will be able to hold a\nfixed amount of slots. The first slot of the table will be the first\nslot of the first cache line, the second slot of the table will be the\nfirst slot of the second cache line until we reach the end of the\narray. The next slot after that will be the second slot of the first\ncache line, etc, moving forward one cache line internal slot each time\nwe wrap. This way we will be able to fit the same amount of pointers\ninto an array of the same size while always keeping adjacent slots in\ndifferent cache lines.\n\nThe mapping from identifier to slot or index into the array gets a bit\nmore complicated than before. Instead of a `shift` and a bitwise\n`and`, we get two `shift`s, two bitwise `and`s, and an `add` (see\nimplementation of `erts_ptab_data2pix()` in `erl_ptab.h`). However, by\nstoring this information optimized for lookup we only need a `shift`\nand a bitwise `and` on 32-bit platforms. On 64-bit platforms we got\nenough room for the 28-bit identifier in the least significant\nhalfword, and the index in the most significant halfword, in other\nwords, we just need to read the most significant halfword to get the\nindex. That is, this operation is as fast, or faster than before. The\ndownside is that on 32-bit platforms we need to convert this\ninformation into the 28-bit identifier number when printing, or when\nordering identifiers from the same node. These operations are,\nhowever, extremely infrequent compared to lookups.\n\nWhen we insert a new element in the table we do the following:\n\n1.  We begin by reserving space in the table by atomically\n    incrementing a counter of processes in the table. If our increment\n    brings the counter above the maximum size of the table, the\n    operation fail and a `system_limit` exception is raised.\n\n2.  The table contains a 64-bit atomic variable of the last identifier\n    used. Only the least significant bits will be used when actually\n    creating the identifier. This identifier is where the search\n    begin.\n\n3.  We increment last identifier value used. In order determine the\n    slot that corresponds to this identifier we call\n    `erts_ptab_data2pix()` that maps identifier to slot. We read the\n    content of the slot. If the slot is free we try to write a\n    reservation marker using an atomic compare and swap. If this fails\n    we repeat this step until it succeeds. \n\n4.  Change the table variable of last identifier used. Since multiple\n    writes might occur at the same time this value may already have\n    been changed by to an identifier larger that the one we got. In\n    this case we can continue; otherwise, we need to change it to the\n    identifier we got.\n\n5.  We now do some initializations of the process structure that\n    cannot be done before we know the process identifier, and have to\n    be done before we publish the structure in the table. This, for\n    example, includes storing the identifier in the process structure. \n\n6.  Now we can publish the structure in the table by writing the\n    pointer to the process structure in the slot previously reserved\n    in 3.\n\nUsing this approach we keep the properties like identifier ordering,\nand identifier reuse while improving performance and scalability. It\nhas one flaw, though. There is no guarantee that the operation will\nterminate. This can quite easily be fixed though, and will be fixed in\nthe next release. We will get back to this below.\n\n#### Delete ####\n\nWhen a process terminates, we mark the process as terminated in the\nprocess structure, the counter of number of processes in the table is\ndecreased, and the reference to the process structure is removed by\nwriting a `NULL` pointer into the corresponding slot. The scheduler\nthread performing this then schedule a thread progress later job which\nwill do the final cleanup and deallocate the process structure. The\nthread progress functionality will make sure that this job will not\nexecute until it is certain that all managed threads have dropped all\nreferences to the process structure.","ref":"ptables.html#modifications-of-the-table"},{"type":"extras","title":"BIF Iterating Over the Table - Process and Port Tables","doc":"The `erlang:processes/0` and `erlang:ports/0` BIFs iterate over the\ntables and return corresponding identifiers. These BIF should return a\nconsistent snapshot of the table content during some time when the BIF\nis executing. In order to implement this we use locking in a strange\nway. We use an \"inverted rwlock\".\n\nWhen performing lookups in the table we do not need to bother about\nthe locking at all, but when modifying the table we read lock the\nrwlock protecting the table which allows for multiple writers during\nnormal operation. When the BIF that iterates over the table need\naccess to the table it write locks the rwlock and reads content of the\ntable. The BIF do not read the whole table in one go but instead read\nsmall chunks at time only write locking while reading. The actual\nimplementation of the BIFs is out of the scope of this document.\n\nAn out of the box rwlock will typically suffer from contention on the\nsingle cache line containing the state of the rwlock even in the case\nwe are only read locking. Instead of using such an rwlock, we have our\nown implementation of reader optimized rwlocks which keeps track of\nreader threads in separate thread specific cache lines. This in order\nto avoid contention on a single cache line. As long as we only do read\nlock operations, threads only need to read a global cache line and\nmodify its own cache line, and by this minimize communication between\ninvolved processors. The iterating BIFs are normally very infrequently\nused, so in the normal case we will only do read lock operations on\nthe table global rwlock.","ref":"ptables.html#bif-iterating-over-the-table"},{"type":"extras","title":"Future Improvements - Process and Port Tables","doc":"The first improvement is to fix the guarantee so that insert\noperations will be guaranteed to terminate. When the operation starts\nwe verify that there actually exist a free slot that we can use. The\nproblem is that we might not find it since it may move when multiple\nthreads modify the table at the same time as we are trying to find the\nslot. The easy fix is to abort the operation if an empty slot could\nnot be found in a finite number operation, and then restart the\noperation under a write lock. This will be implemented in next\nrelease, but further work should be made trying to find a better\nsolution.\n\nThis and also previous implementation do not work well when the table\nis nearly full. We will both get long search times for free slots, and\nwe will reuse identifiers more frequently since we more frequently\nwrap during the search. These tables works best when the table is much\nlarger than the amount of simultaneous existing processes. One easy\nimprovement is to always have room for more processes than we allow in\nthe table. This will also be implemented in the next release, but this\nshould probably also be worked more on trying to find an even better\nsolution.\n\nIt would also be nice to get rid of the rwlock all together. The use\nof a reader optimized rwlock makes sure we do not any contention on\nthe lock, but unnecessary memory barriers will be issued due to the\nlock. The main issue here is to modify iterating BIFs so that they do\nnot require exclusive access to the table while reading a sequence of\nslots. In principle this should be rather easy, the code can handle\nsequences of variable sizes, so shrinking the sequence size of slots\nto one would solv the problem. This will, however, need some tweeks\nand modifications of not trivial code, but is something that should be\nlooked at in the future.\n\nBy increasing the size of identifiers, at least on 64-bit machines\n(which isn't as easy as it first might seem) we get further room for\nimprovement. Besides the obvious improvement of not reusing\nidentifiers as fast as we currently do, it makes it possible to\nfurther avoid contention when inserting elements in the table. At\nleast if we drop this ordering property, which isn't that useful\nanyway.","ref":"ptables.html#future-improvements"},{"type":"extras","title":"Some Benchmark Results - Process and Port Tables","doc":"In order to test modifications of the process table we ran a couple of\nbenchmarks where lots of processes are spawned and terminated\nsimultaneously, and got a speedup of between 150-200%. Running a\nsimilar benchmark but with ports we got a speedup of about 130%.\n\nThe BIF `erlang:is_process_alive/1` is the closest you can get to a\nprocess table lookup only. The BIF looks up the process corresponding\nto the process identifier passed as argument, and then checks if it is\nalive. By running multiple processes looping over this BIF checking\nthe same process, we get a speedup between 20000-23000%. Conceptually\nthis operation only involve read operations. In the implementation\nused in R16B also only read operation are performed, while the\nprevious implementation need to lock structures in order to read the\ndata, suffering from both lock contention and contention due to\nmodifications of cache lines used by lock internal data structures and\nthe reference counter on the process being looked up.\n\nThe benchmarks were run on a relatively new machine with an Intel i7\nquad core processor with hyper-threading using 8 schedulers. On a\nmachine with more communication overhead and/or larger amount of\nlogical processors the speedups are expected to be even larger.","ref":"ptables.html#some-benchmark-results"},{"type":"extras","title":"Port Signals","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2013-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nPort Signals\n============\n\nProblems\n--------\n\nErlang ports conceptually are very similar to Erlang processes. Erlang\nprocesses execute Erlang code in the virtual machine, while an Erlang\nport execute native code typically used for communication with the\noutside world. For example, when an Erlang process wants to\ncommunicate using TCP over the network, it communicates via an Erlang\nport implementing the TCP socket interface in native code. Both Erlang\nProcesses and Ports communicate using asynchronous signaling. The\nnative code executed by an Erlang port is a collection of callback\nfunctions, called a driver. Each callback more or less implements the\ncode of a signal to, or from the port.\n\nEven though processes and ports conceptually always have been very\nsimilar, the implementations have been very different. Originally,\nmore or less all port signals were handled synchronously at the time\nthey occurred. Very early in the development of the SMP support for\nthe runtime system we recognized that this was a huge problem for\nsignals between ports and the outside world. That is, I/O events to\nand from the outside world, or I/O signals. This was one of the first\nthings that had to be rewritten in order to be able to do I/O in\nparallel at all. The solution was to implement scheduling of these\nsignals. I/O signals corresponding to different ports could then be\nexecuted in parallel on different scheduler threads. Signals from\nprocesses to ports was not as big of a problem as the I/O signals, and\nthe implementation of those was left as they were.\n\nEach port is protected by its own lock to protect against simultaneous\nexecution in multiple threads. Previously when a process, executing on\na scheduler thread, sent a port a signal, it locked the port lock and\nsynchronously executed the code corresponding to the signal. If the\nlock was busy, the scheduler thread blocked waiting until it could\nlock the lock. If multiple processes executing simultaneously on\ndifferent scheduler threads, sent signals to the same port, schedulers\nsuffered from heavy lock contention. Such contention could also occur\nbetween I/O signals for the port executing on one scheduler thread,\nand a signal from a process to the port executing on another scheduler\nthread. Beside the contention issues, we also loose potential work to\nexecute in parallel on different scheduler threads. This since the\nprocess sending the *asynchronous* signal is blocked while the code\nimplementing the signal is executed synchronously.\n\nSolution\n--------\n\nIn order to prevent multiple schedulers from trying to execute signals\nto/from the same port simultaneously, we need to be able to ensure\nthat all signals to/from a port are executed in sequence on one\nscheduler. More or less, the only way to do this is to schedule all\ntypes of signals. Signals corresponding to a port can then be executed\nin sequence by one single scheduler thread. If only one thread tries\nto execute the port, no contention will appear on the port\nlock. Besides getting rid of the contention, processes sending signals\nto the port can also continue execution of their own Erlang code on\nother schedulers at the same time as the signaling code is executing\non another scheduler.\n\nWhen implementing this there are a couple of important properties that\nwe either need, or want to preserve:\n\n*   Signal ordering guarantee. Signals from process `X` to port `Y`,\n    *must* be delivered to `Y` in the same order as sent from `X`.\n\n*   Signal latency. Due to the previous synchronous implementation,\n    latency of signals sent from processes to ports have usually been\n    very low. During contention the latency has of course\n    increased. Users expect latency of these signals to be low, a\n    sudden increase in latency would not be appreciated by our users.\n\n*   Compatible flow control. Ports have for a very long time had the\n    possibility to use the busy port functionality when implementing\n    flow control. One may argue that this functionality fits very bad\n    with the conceptually completely asynchronous signaling, but the\n    functionality has been there for ages and is expected to be\n    there. When a port sets itself into a busy state, `command`\n    signals should not be delivered, and senders of such signals\n    should suspend until the port sets itself in a not busy state.","ref":"portsignals.html"},{"type":"extras","title":"Scheduling of Port Signals - Port Signals","doc":"A run queue has four queues for processes of different priority and\none queue for ports. The scheduler thread associated with the run\nqueue switch evenly between execution of processes and execution of\nports while both processes and ports exist in the queue. This is not\ncompletely true, but not important for this discussion. A port that is\nin a run queue also has a queue of tasks to execute. Each task\ncorresponds to an in- or outgoing signal. When the port is selected\nfor execution each task will be executed in sequence. The run queue\nlocks not only protected the queues of ports, but also the queues of\nport tasks.\n\nSince we go from a state where I/O signals are the only port related\nsignals scheduled, to a state where potentially all port related\nsignals may be scheduled we may drastically increase the load on the\nrun queue lock. The amount of scheduled port tasks very much depend on\nthe Erlang application executing, which we do not control, and we do\nnot want to get increased contention on the run queue locks. We\ntherefore need another approach of protecting the port task queue.\n\n#### Task Queue ####\n\nWe chose a \"semi locked\" approach, with one public locked task queue,\nand a private, lock free, queue like, task data structure. This \"semi\nlocked\" approach is similar to how the message boxes of processes are\nmanaged. The lock is port specific and only used for protection of\nport tasks, so the run queue lock is now needed in more or less the\nsame way for ports as for processes. This ensures that we won't see an\nincreased lock contention on run queue locks due to this rewrite of\nthe port functionality.\n\nWhen an executing port runs out of work to execute in the private task\ndata structure, it moves the public task queue into the private task\ndata structure while holding the lock. Once tasks has been moved to\nthe private data structure no lock protects them. This way the port\ncan continue working on tasks in the private data structure without\nhaving to fight for the lock.\n\nI/O signals may however be aborted. This could be solved by letting\nthe port specific scheduling lock also protect the private task data\nstructure, but then the port very frequently would have to fight with\nothers enqueueing new tasks. In order to handle this while keeping the\nprivate task data structure lock free, we use a similar \"non\naggressive\" approach as we use when handling processes that gets\nsuspended while in the run queue. Instead of removing the aborted port\ntask, we just mark it as aborted using an atomic memory\noperation. When a task is selected for execution, we first verify that\nit has not been aborted. If aborted we, just drop the task.\n\nA task that can be aborted is referred via another data structure from\nother parts of the system, so that a thread that needs to abort the\ntask can reach it. In order to be sure to safely deallocate a task\nthat is no longer used, we first clear this reference and then use the\nthread progress functionality in order to make sure no references can\nexist to the task. Unfortunately, also unmanaged threads might abort\ntasks. This is very infrequent, but might occur. This could be handled\nlocally for each port, but would require extra information in each\nport structure which very infrequently would be used. Instead of\nimplementing this in each port, we implemented general functionality\nthat can be used from unmanaged threads to delay thread progress.\n\nThe private \"queue like\" task data structure could have been an\nordinary queue if it wasn't for the busy port functionality. When the\nport has flagged itself as busy, `command` signals are not allowed to\nbe delivered and need to be blocked. Other signals sent from the same\nsender following a `command` signal that has been blocked also have to\nbe blocked; otherwise, we would violate the ordering guarantee. At the\nsame time, other signals that have no dependencies to blocked\n`command` signals are expected to be delivered.\n\nThe above requirements makes the private task data structure a rather\ncomplex data structure. It has a queue of unprocessed tasks, and a\nbusy queue. The busy queue contains blocked tasks corresponding to\n`command` signals, and tasks with dependencies to such tasks. The busy\nqueue is accompanied by a table over blocked tasks based on sender\nwith a references into last task in the busy queue from a specific\nsender. This since we need check for dependencies when new tasks are\nprocessed in the queue of unprocessed tasks. When a new task is\nprocessed that needs to be blocked it isn't enqueued at the end of the\nbusy queue, but instead directly after the last task with the same\nsender. This in order to easily be able to detect when we have tasks\nthat no longer have any dependencies to tasks corresponding to\n`command` signals which should be moved out of the busy queue. When\nthe port executes, it switches between processing tasks from the busy\nqueue, and processing directly from the unprocessed queue based on its\nbusy state. When processing directly from the unprocessed queue it\nmight, of course, have to move a task into the busy queue instead of\nexecuting it.\n\n#### Busy Port Queue ####\n\nSince it is the port itself which decides when it is time to enter a\nbusy state, it needs to be executing in order to enter the busy\nstate. As a result of `command` signals being scheduled, we may get\ninto a situation where the port gets flooded by a huge amount of\n`command` signals before it even gets a chance to set itself into a\nbusy state. This since it has not been scheduled for execution\nyet. That is, under these circumstances the busy port functionality\nloose the flow control properties it was intended to provide.\n\nIn order to solve this, we introduced a new busy feature, namely \"busy\nport queue\". The port has a limit of `command` data that is allowed to\nbe enqueued in the task queue. When this limit is reached, the port\nwill automatically enter a busy port queue state. When in this state,\nsenders of `command` signals will be suspended, but `command` signals\nwill still be delivered to the port unless it is also in a busy port\nstate. This limit is known as the high limit.\n\nThere is also a low limit. When the amount of queued `command` data\nfalls below this limit and the port is in a busy port queue state, the\nbusy port queue state is automatically disabled. The low limit should\ntypically be significantly lower than the high limit in order to\nprevent frequent oscillation around the busy port queue state.\n\nBy introduction of this new busy state we still can provide the flow\ncontrol. Old driver do not even have to be changed. The limits can,\nhowever, be configured and even disabled by the port. By default the\nhigh limit is 8 KB and the low limit is 4 KB.","ref":"portsignals.html#scheduling-of-port-signals"},{"type":"extras","title":"Preparation of Signal Send - Port Signals","doc":"Previously all operations sending signals to ports began by acquiring\nthe port lock, then performed preparations for sending the signal, and\nthen finally sent the signal. The preparations typically included\ninspecting the state of the port, and preparing the data to pass along\nwith the signal. The preparation of data is frequently quite time\nconsuming, and did not really depend on the port. That is we would\nlike to do this without having the port lock locked.\n\nIn order to improve this, state information was re-organized in the\nport structure, so that we can access it using atomic memory\noperations. This together with the new port table implementation,\nenabled us to lookup the port and inspect the state before acquiring\nthe port lock, which in turn made it possible to perform preparations\nof signal data before acquiring the port lock.","ref":"portsignals.html#preparation-of-signal-send"},{"type":"extras","title":"Preserving Low Latency - Port Signals","doc":"If we disregard the contended cases, we will inevitably get a higher\nlatency when scheduling signals for execution at a later time than by\nexecuting the signal immediately. In order to preserve the low latency\nwe now first check if this is a contended case or not. If it is, we\nschedule the signal for later execution; otherwise, we execute the\nsignal immediately. It is a contended case if other signals already\nare scheduled on the port, or if we fail to acquire the port\nlock. That is we will not block waiting for the lock.\n\nDoing it this way we will preserve the low latency at the expense of\nlost potential parallel execution of the signal and other code in the\nprocess sending the signal. This default behaviour can however be\nchanged on port basis or system wide, forcing scheduling of all\nsignals from processes to ports that are not part of a synchronous\ncommunication. That is, an unconditional request/response pair of\nasynchronous signals. In this case it is no potential for parallelism,\nand by that no point forcing scheduling of the request signal.\n\nThe immediate execution of signals may also cause a scheduler that is\nabout to execute scheduled tasks to block waiting for the port\nlock. This is however more or less the only scenario where a scheduler\nneeds to wait for the port lock. The maximum time it has to wait is\nthe time it takes to execute one signal, since we always schedule\nsignals when contention occurs.","ref":"portsignals.html#preserving-low-latency"},{"type":"extras","title":"Signal Operations - Port Signals","doc":"Besides implementing the functionality enabling the scheduling,\npreparation of signal data without port lock, etc, each operation\nsending signals to ports had to be quite extensively re-written. This\nin order to move all sub-operations that can be done without the lock\nto a place before we have acquired the lock, and also since signals\nnow sometimes are executed immediately and sometimes scheduled for\nexecution at a later time which put different requirements on the data\nto pass along with the signal.","ref":"portsignals.html#signal-operations"},{"type":"extras","title":"Some Benchmark Results - Port Signals","doc":"When running some simple benchmarks where contention only occur due to\nI/O signals contending with signals from one single process we got a\nspeedup of 5-15%. When multiple processes send signals to one single\nport the improvements can be much larger, but the scenario with one\nprocess contending with I/O is the most common one.\n\nThe benchmarks were run on a relatively new machine with an Intel i7\nquad core processor with hyper-threading using 8 schedulers.","ref":"portsignals.html#some-benchmark-results"},{"type":"extras","title":"Process Management Optimizations","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2013-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nProcess Management Optimizations\n================================\n\nProblems\n--------\n\nEarly versions of the SMP support for the runtime system completely\nrelied on locking in order to protect data accesses from multiple\nthreads. In some cases this isn't that problematic, but in some cases\nit really is. It complicates the code, ensuring all locks needed are\nactually held, and ensuring that all locks are acquired in such an\norder that no deadlock occur. Acquiring locks in the right order often\nalso involve releasing locks held, forcing threads to reread data\nalready read. A good recipe for creation of bugs. Trying to use more\nfine-grained locking in order to increase possible parallelism in the\nsystem makes the complexity situation even worse. Having to acquire a\nbunch of locks when doing operations also often cause heavy lock\ncontention which cause poor scalability.\n\nManagement of processes internally in the runtime system suffered from\nthese problems. When changing state on a process, for example from\n`waiting` to `runnable`, a lock on the process needed to be\nlocked. When inserting a process into a run queue also a lock\nprotecting the run queue had to be locked. When migrating a process\nfrom one run queue to another run queue, locks on both run queues and\non the process had to be locked.\n\nThis last example is a quite common case in during normal\noperation. For example, when a scheduler thread runs out of work it\ntries to steal work from another scheduler threads run queue. When\nsearching for a victim to steal from there was a lot of juggling of\nrun queue locks involved, and during the actual theft finalized by\nhaving to lock both run queues and the process. When one scheduler\nruns out of work, often others also do, causing lots of lock\ncontention.\n\nSolution\n--------","ref":"processmanagementoptimizations.html"},{"type":"extras","title":"Process - Process Management Optimizations","doc":"In order to avoid these situations we wanted to be able to do most of\nthe fundamental operations on a process without having to acquire a\nlock on the process. Some examples of such fundamental operations are,\nmoving a process between run queues, detecting if we need to insert it\ninto a run queue or not, detecting if it is alive or not.\n\nAll of this information in the process structure that was needed by\nthese operations was protected by the process `status` lock, but the\ninformation was spread across a number of fields. The fields used was\ntypically state fields that could contain a small number of different\nstates. By reordering this information a bit we could *easily* fit\nthis information into a 32-bit wide field of bit flags (only 12-flags\nwere needed). By moving this information we could remove five 32-bit\nwide fields and one pointer field from the process structure! The move\nalso enabled us to easily read and change the state using atomic\nmemory operations.","ref":"processmanagementoptimizations.html#process"},{"type":"extras","title":"Run Queue - Process Management Optimizations","doc":"As with processes we wanted to be able to do the most fundamental\noperations without having to acquire a lock on it. The most important\nbeing able to determine if we should enqueue a process in a specific\nrun queue or not. This involves being able to read actual load, and\nload balancing information.\n\nThe load balancing functionality is triggered at repeated fixed\nintervals. The load balancing more or less strives to even out run\nqueue lengths over the system. When balancing is triggered,\ninformation about every run queue is gathered, migrations paths and\nrun queue length limits are set up. Migration paths and limits are\nfixed until the next balancing has been done. The most important\ninformation about each run queue is the maximum run queue length since\nlast balancing. All of this information were previously stored in the\nrun queues themselves.\n\nWhen a process has become runnable, for example due to reception of a\nmessage, we need to determine which run queue to enqueue it\nin. Previously this at least involved locking the run queue that the\nprocess currently was assigned to while holding the status lock on the\nprocess. Depending on load we sometimes also had to acquire a lock on\nanother run queue in order to be able to determine if it should be\nmigrated to that run queue or not.\n\nIn order to be able to decide which run queue to use without having to\nlock any run queues, we moved all fixed balancing information out of\nthe run queues into a global memory block. That is, migration paths\nand run queue limits. Information that need to be frequently updated,\nlike for example maximum run queue length, were kept in the run queue,\nbut instead of operating on this information under locks we now use\natomic memory operations when accessing this information. This made it\npossible to first determine which run queue to use, without locking\nany run queues, and when decided, lock the chosen run queue and insert\nthe process.\n\n#### Fixed Balancing Information ####\n\nWhen determining which run queue to choose we need to read the fixed\nbalancing information that we moved out of the run queues. This\ninformation is global, read only between load balancing operations,\nbut will be changed during a load balancing. We do not want to\nintroduce a global lock that needs to be acquired when accessing this\ninformation. A reader optimized rwlock could avoid some of the\noverhead since the data is most frequently read, but it would\nunavoidably cause disruption during load balancing, since this\ninformation is very frequently read. The likelihood of a large\ndisruption due to this also increase as number of schedulers grows.\n\nInstead of using a global lock protecting modifications of this\ninformation, we write a completely new version of it at each load\nbalancing. The new version is written in another memory block than the\nprevious one, and published by issuing a write memory barrier and then\nstoring a pointer to the new memory block in a global variable using\nan atomic write operation.\n\nWhen schedulers need to read this information, they read the pointer\nto currently used information using an atomic read operation, and then\nissue a data dependency read barrier, which on most architectures is a\nno-op. That is, it is very little overhead getting access to this\ninformation.\n\nInstead of allocating and deallocating memory blocks for the different\nversions of the balancing information we keep old memory blocks and\nreuse them when it is safe to do so. In order to be able to determine\nwhen it is safe to reuse a block we use the thread progress\nfunctionality, ensuring that no threads have any references to the\nmemory block when we reuse it.\n\n#### Be Less Aggressive ####\n\nWe implemented a test version using lock free run queues. This\nimplementation did however not perform as good as the version using\none lock per run queue. The reason for this was not investigated\nenough to say why this was. Since the locked version performed better\nwe kept it, at least for now. The lock free version, however, forced\nus to use other solutions, some of them we kept.\n\nPreviously when a process that was in a run queue got suspended, we\nremoved it from the queue straight away. This involved locking the\nprocess, locking the run queue, and then unlinking it from the double\nlinked list implementing the queue. Removing a process from a lock\nfree queue gets really complicated. Instead, of removing it from the\nqueue, we just leave it in the queue and mark it as suspended. When\nlater selected for execution we check if the process is suspended, if\nso just dropped it. During its time in the queue, it might also get\nresumed again, if so execute it when it get selected for execution.\n\nBy keeping this part when reverting back to a locked implementation,\nwe could remove a pointer field in each process structure, and avoid\nunnecessary operations on the process and the queue which might cause\ncontention.","ref":"processmanagementoptimizations.html#run-queue"},{"type":"extras","title":"Combined Modifications - Process Management Optimizations","doc":"By combining the modifications of the process state management and the\nrun queue management, we can do large parts of the work involved when\nmanaging processes with regards to scheduling and migration without\nhaving any locks locked at all. In these situations we previously had\nto have multiple locks locked. This of course caused a lot of rewrites\nacross large parts of the runtime system, but the rewrite both\nsimplified code and eliminated locking at a number of places. The\nmajor benefit is, of course, reduced contention.","ref":"processmanagementoptimizations.html#combined-modifications"},{"type":"extras","title":"A Benchmark Result - Process Management Optimizations","doc":"When running the chameneosredux benchmark, schedulers frequently run\nout of work trying to steal work from each other. That is, either\nsucceeding in migrating, or trying to migrate processes which is a\nscenario which we wanted to optimize. By the introduction of these\nimprovements, we got a speedup of 25-35% when running this benchmark\non a relatively new machine with an Intel i7 quad core processor with\nhyper-threading using 8 schedulers.","ref":"processmanagementoptimizations.html#a-benchmark-result"},{"type":"extras","title":"Super Carrier","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2014-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nSuper Carrier\n=============\n\nA super carrier is large memory area, allocated at VM start, which can\nbe used during runtime to allocate normal carriers from.\n\nThe super carrier feature was introduced in OTP R16B03. It is\nenabled with command line option `+MMscs  `\nand can be configured with other options.\n\nProblem\n-------\n\nThe initial motivation for this feature was customers asking for a way\nto pre-allocate physical memory at VM start for it to use.\n\nOther problems were different experienced limitations of the OS\nimplementation of mmap:\n\n* Increasingly bad performance of mmap/munmap as the number of mmap'ed areas grow.\n* Fragmentation problem between mmap'ed areas.\n\nA third problem was management of low memory in the halfword\nemulator. The implementation used a naive linear search structure to\nhold free segments which would lead to poor performance when\nfragmentation increased.\n\n\nSolution\n--------\n\nAllocate one large continuous area of address space at VM start and\nthen use that area to satisfy our dynamic memory need during\nruntime. In other words: implement our own mmap.","ref":"supercarrier.html"},{"type":"extras","title":"Use cases - Super Carrier","doc":"If command line option +MMscrpm (Reserve Physical Memory) is set to\nfalse, only virtual space is allocated for the super carrier from\nstart. The super carrier then acts as an \"alternative mmap\" implementation\nwithout changing the consumption of physical memory pages. Physical\npages will be reserved on demand when an allocation is done from the super\ncarrier and be unreserved when the memory is released back to the\nsuper carrier.\n\nIf +MMscrpm is set to true, which is default, the initial allocation\nwill reserve physical memory for the entire super carrier. This can be\nused by users that want to ensure a certain *minimum* amount of\nphysical memory for the VM.\n\nHowever, what reservation of physical memory actually means highly\ndepends on the operating system, and how it is configured. For\nexample, different memory overcommit settings on Linux drastically\nchange the behaviour.\n\nA third feature is to have the super carrier limit the *maximum*\namount of memory used by the VM. If +MMsco (Super Carrier Only) is set\nto true, which is default, allocations will only be done from the\nsuper carrier. When the super carrier gets full, the VM will fail due\nto out of memory.\nIf +MMsco is false, allocations will use mmap directly if the super\ncarrier is full.","ref":"supercarrier.html#use-cases"},{"type":"extras","title":"Implementation - Super Carrier","doc":"The entire super carrier implementation is kept in erl\\_mmap.c. The\nname suggest that it can be viewed as our own mmap implementation.\n\nA super carrier needs to satisfy two slightly different kinds of\nallocation requests; multi block carriers (MBC) and single block\ncarriers (SBC). They are both rather large blocks of continuous\nmemory, but MBCs and SBCs have different demands on alignment and\nsize.\n\nSBCs can have arbitrary size and do only need minimum 8-byte\nalignment.\n\nMBCs are more restricted. They can only have a number of fixed\nsizes that are powers of 2. The start address need to have a very\nlarge alignment (currently 256 kb, called \"super alignment\"). This is a\ndesign choice that allows very low overhead per allocated block in the\nMBC.\n\nTo reduce fragmentation within the super carrier, it is good to keep SBCs\nand MBCs apart. MBCs with their uniform alignment and sizes can be\npacked very efficiently together. SBCs without demand for alignment can\nalso be allocated quite efficiently together. But mixing them can lead\nto a lot of memory wasted when we need to create large holes of\npadding to the next alignment limit.\n\nThe super carrier thus contains two areas. One area for MBCs growing from\nthe bottom and up. And one area for SBCs growing from the top and\ndown. Like a process with a heap and a stack growing towards each\nother.","ref":"supercarrier.html#implementation"},{"type":"extras","title":"Data structures - Super Carrier","doc":"The MBC area is called *sa* as in super aligned and the SBC area is\ncalled *sua* as in super un-aligned.\n\nNote that the \"super\" in super alignment and the \"super\" in super\ncarrier has nothing to do with each other. We could have chosen\nanother naming to avoid confusion, such as \"meta\" carrier or \"giant\"\nalignment.\n\n\t+-------+ <---- sua.top\n\t|  sua  |\n\t|       |\n\t|-------| <---- sua.bot\n\t|       |\n\t|       |\n\t|       |\n\t|-------| <---- sa.top\n\t|       |\n\t|  sa   |\n\t|       |\n\t+-------+ <---- sa.bot\n\n\nWhen a carrier is deallocated a free memory segment will be created\ninside the corresponding area, unless the carrier was at the very top\n(in `sa`) or bottom (in `sua`) in which case the area will just shrink\ndown or up.\n\nWe need to keep track of all the free segments in order to reuse them\nfor new carrier allocations. One initial idea was to use the same\nmechanism that is used to keep track of free blocks within MBCs\n(alloc\\_util and the different strategies). However, that would not be\nas straight forward as one can think and can also waste quite a lot of\nmemory as it uses prepended block headers. The granularity of the\nsuper carrier is one memory page (usually 4kb). We want to allocate\nand free entire pages and we don't want to waste an entire page just\nto hold the block header of the following pages.\n\nInstead we store the meta information about all the free segments in a\ndedicated area apart from the `sa` and `sua` areas. Every free segment is\nrepresented by a descriptor struct (`ErtsFreeSegDesc`).\n\n    typedef struct {\n        RBTNode snode;      /* node in 'stree' */\n        RBTNode anode;      /* node in 'atree' */\n        char* start;\n        char* end;\n    }ErtsFreeSegDesc;\n\nTo find the smallest free segment that will satisfy a carrier allocation\n(best fit), the free segments are organized in a tree sorted by\nsize (`stree`). We search in this tree at allocation. If no free segment of\nsufficient size was found, the area (`sa` or `sua`) is instead expanded.\nIf two or more free segments with equal size exist, the one at lowest\naddress is chosen for `sa` and highest address for `sua`.\n\nAt carrier deallocation, we want to coalesce with any adjacent free\nsegments, to form one large free segment. To do that, all free\nsegments are also organized in a tree sorted in address order (`atree`).\n\nSo, in total we keep four trees of free descriptors for the super\ncarrier; two for `sa` and two for `sua`. They all use the same\nred-black-tree implementation that support the different sorting\norders used.\n\nWhen allocating a new MBC we first search after a free segment in `sa`,\nthen try to raise `sa.top`, and then as a fallback try to search after a\nfree segment in `sua`. When an MBC is allocated in `sua`, a larger segment\nis allocated which is then trimmed to obtain the right\nalignment. Allocation search for an SBC is done in reverse order. When\nan SBC is allocated in `sa`, the size is aligned up to super aligned\nsize.","ref":"supercarrier.html#data-structures"},{"type":"extras","title":"The free descriptor area - Super Carrier","doc":"As mentioned above, the descriptors for the free segments are\nallocated in a separate area. This area has a constant configurable\nsize (+MMscrfsd) that defaults to 65536 descriptors. This should be\nmore than enough in most cases. If the descriptors area should fill up,\nnew descriptor areas will be allocated first directly from the OS, and\nthen from `sua` and `sa` in the super carrier, and lastly from the memory\nsegment itself which is being deallocated. Allocating free descriptor\nareas from the super carrier is only a last resort, and should be\navoided, as it creates fragmentation.","ref":"supercarrier.html#the-free-descriptor-area"},{"type":"extras","title":"Halfword emulator - Super Carrier","doc":"The halfword emulator uses the super carrier implementation to manage\nits low memory mappings thar are needed for all term storage. The\nsuper carrier can here not be configured by command line options. One\ncould imagine a second configurable instance of the super carrier used\nby high memory allocation, but that has not been implemented.","ref":"supercarrier.html#halfword-emulator"},{"type":"extras","title":"Thread Progress","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2013-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nThread Progress\n===============\n\nProblems\n--------","ref":"threadprogress.html"},{"type":"extras","title":"Knowing When Threads Have Completed Accesses to a Data Structure - Thread Progress","doc":"When multiple threads access the same data structure you often need to\nknow when all threads have completed their accesses. For example, in\norder to know when it is safe to deallocate the data structure. One\nsimple way to accomplish this is to reference count all accesses to\nthe data structure. The problem with this approach is that the cache\nline where the reference counter is located needs to be communicated\nbetween all involved processors. Such communication can become\nextremely expensive and will scale poorly if the reference counter is\nfrequently accessed. That is, we want to use some other approach of\nkeeping track of threads than reference counting.","ref":"threadprogress.html#knowing-when-threads-have-completed-accesses-to-a-data-structure"},{"type":"extras","title":"Knowing That Modifications of Memory is Consistently Observed - Thread Progress","doc":"Different hardware architectures have different memory models. Some\narchitectures allows very aggressive reordering of memory accesses\nwhile other architectures only reorder a few specific cases. Common to\nall modern hardware is, however, that some type of reordering will\noccur. When using locks to protect all memory accesses made from\nmultiple threads such reorderings will not be visible. The locking\nprimitives will ensure that the memory accesses will be ordered. When\nusing lock free algorithms one do however have to take this reordering\nmade by the hardware into account.\n\nHardware memory barriers or memory fences are instructions that can be\nused to enforce order between memory accesses. Different hardware\narchitectures provide different memory barriers. Lock free algorithms\nneed to use memory barriers in order to ensure that memory accesses\nare not reordered in such ways that the algorithm breaks down. Memory\nbarriers are also expensive instructions, so you typically want to\nminimize the use of these instructions.\n\nFunctionality Used to Address These Problems\n-------------------------------------------\n\nThe \"thread progress\" functionality in the Erlang VM is used to\naddress these problems. The name \"thread progress\" was chosen since we\nwant to use it to determine when all threads in a set of threads have\nmade such progress so that two specific events have taken place for\nall them.\n\nThe set of threads that we are interested in we call managed\nthreads. The managed threads are the only threads that we get any\ninformation about. These threads *have* to frequently report\nprogress. Not all threads in the system are able to frequently report\nprogress. Such threads cannot be allowed in the set of managed threads\nand are called unmanaged threads. An example of unmanaged threads are\nthreads in the async thread pool. Async threads can be blocked for\nvery long times and by this be prevented from frequently reporting\nprogress. Currently only scheduler threads and a couple of other\nthreads are managed threads.","ref":"threadprogress.html#knowing-that-modifications-of-memory-is-consistently-observed"},{"type":"extras","title":"Thread Progress Events - Thread Progress","doc":"Any thread in the system may use the thread progress functionality in\norder to determine when the following events have occurred at least\nonce in all managed threads:\n\n1.  The thread has returned from other code to a known state in the\n    thread progress functionality, which is independent of any other\n    code. \n2.  The thread has executed a full memory barrier.\n\nThese events, of course, need to occur ordered to other memory\noperations. The operation of determining this begins by initiating the\nthread progress operation. The thread that initiated the thread\nprogress operation after this poll for the completion of the\noperation. Both of these events must occur at least once *after* the\nthread progress operation has been initiated, and at least once\n*before* the operation has completed in each managed thread. This is\nordered using communication via memory which makes it possible to draw\nconclusion about the memory state after the thread progress operation\nhas completed. Lets call the progress made from initiation to\ncompletion for \"thread progress\".\n\nAssuming that the thread progress functionality is efficient, a lot of\nalgorithms can both be simplified and made more efficient than using\nthe first approach that comes to mind. A couple of examples follows.\n\nBy being able to determine when the first event above has occurred we\ncan easily know when all managed threads have completed accesses to a\ndata structure. This can be determined the following way. We have an\nimplementation of some functionality `F` using a data structure\n`D`. The reference to `D` is always looked up before `D` is being\naccessed, and the references to `D` is always dropped before we leave\nthe code implementing `F`. If we remove the possibility to look up `D`\nand then wait until the first event has occurred in all managed\nthreads, no managed threads can have any references to the data\nstructure `D`. This could for example have been achieved by using\nreference counting, but the cache line containing the reference\ncounter would in this case be ping ponged between all processors\naccessing `D` at every access.\n\nBy being able to determine when the second event has occurred it is\nquite easy to do complex modifications of memory that needs to be seen\nconsistently by other threads without having to resort to locking. By\ndoing the modifications, then issuing a full memory barrier, then wait\nuntil the second event has occurred in all managed threads, and then\npublish the modifications, we know that all managed threads reading\nthis memory will get a consistent view of the modifications. Managed\nthreads reading this will not have to issue any extra memory barriers\nat all.\n\nImplementation of the Thread Progress Functionality\n---------------------------------------------------","ref":"threadprogress.html#thread-progress-events"},{"type":"extras","title":"Requirement on the Implementation - Thread Progress","doc":"In order to be able to determine when all managed threads have reached\nthe states that we are interested in we need to communicate between\nall involved threads. We of course want to minimize this\ncommunication.\n\nWe also want threads to be able to determine when thread progress has\nbeen made relatively fast. That is we need to have some balance\nbetween communication overhead and time to complete the operation.","ref":"threadprogress.html#requirement-on-the-implementation"},{"type":"extras","title":"API - Thread Progress","doc":"I will only present the most important functions in the API here.\n\n*   `ErtsThrPrgrVal erts_thr_progress_later(void)` - Initiation of the\n    operation. The thread progress value returned can be used testing\n    for completion of the operation.\n*   `int erts_thr_progress_has_reached(ErtsThrPrgrVal val)` - Returns\n    a non zero value when we have reached the thread progress value\n    passed as argument. That is, when a non zero value is returned the\n    operation has completed.\n\nWhen a thread calls `my_val = erts_thr_progress_later()` and waits for\n`erts_thr_progress_has_reached(my_val)` to return a non zero value it\nknows that thread progress has been made.\n\nWhile waiting for `erts_thr_progress_has_reached()` to return a non\nzero value we typically do not want to block waiting, but instead want\nto continue working with other stuff. If we run out of other stuff to\nwork on we typically do want to block waiting until we have reached\nthe thread progress value that we are waiting for. In order to be able\nto do this we provide functionality for waking up a thread when a\ncertain thread progress value has been reached:\n\n*   `void erts_thr_progress_wakeup(ErtsSchedulerData *esdp,\n    ErtsThrPrgrVal val)` - Request wake up. The calling thread will be\n    woken when thread progress has reached val. \n\nManaged threads frequently need to update their thread progress by\ncalling the following functions:\n\n*   `int erts_thr_progress_update(ErtsSchedulerData *esdp)` - Update\n    thread progress. If a non zero value is returned\n    `erts_thr_progress_leader_update()` has to be called without any\n    locks held.\n*   `int erts_thr_progress_leader_update(ErtsSchedulerData *esdp)` -\n    Leader update thread progress.\n\nUnmanaged threads can delay thread progress being made:\n\n*   `ErtsThrPrgrDelayHandle erts_thr_progress_unmanaged_delay(void)` -\n    Delay thread progress.\n*   `void erts_thr_progress_unmanaged_continue(ErtsThrPrgrDelayHandle\n    handle)` - Let thread progress continue.\n\nScheduler threads can schedule an operation to be executed by the\nscheduler itself when thread progress has been made:\n\n* `void erts_schedule_thr_prgr_later_op(void (*funcp)(void *), void\n  *argp, ErtsThrPrgrLaterOp *memp)` - Schedule a call to `funcp`. The\n  call `(*funcp)(argp)` will be executed when thread progress has been\n  made since the call to `erts_schedule_thr_prgr_later_op()` was\n  made.","ref":"threadprogress.html#api"},{"type":"extras","title":"Implementation - Thread Progress","doc":"In order to determine when the events has happened we use a global\ncounter that is incremented when all managed threads have called\n`erts_thr_progress_update()` (or `erts_thr_progress_leader_update()`).\nThis could naively be implemented using a \"thread confirmed\" counter.\nThis would however cause an explosion of communication where all\ninvolved processors would need to communicate with each other at each\nupdate.\n\nInstead of confirming at a global location each thread confirms that\nit accepts in increment of the global counter in its own cache\nline. These confirmation cache lines are located in sequence in an\narray, and each confirmation cache line will only be written by one\nand only one thread. One of the managed threads always have the leader\nresponsibility. This responsibility may jump between threads, but as\nlong as there are some activity in the system always one of them will\nhave the leader responsibility. The thread with the leader\nresponsibility will call `erts_thr_progress_leader_update()` which\nwill check that all other threads have confirmed an increment of the\nglobal counter before doing the increment of the global counter. The\nleader thread is the only thread reading the confirmation cache\nlines.\n\nDoing it this way we will get a communication pattern of information\ngoing from the leader thread out to all other managed threads and then\nback from the other threads to the leader thread. This since only the\nleader thread will write to the global counter and all other threads\nwill only read it, and since each confirmation cache lines will only\nbe written by one specific thread and only read by the leader\nthread. When each managed thread is distributed over different\nprocessors, the communication between processors will be a reflection\nof this communication pattern between threads.\n\nThe value returned from `erts_thr_progress_later()` equals the, by\nthis thread, latest confirmed value plus two. The global value may be\nlatest confirmed value or latest confirmed value minus one. In order\nto be certain that all other managed threads actually will call\n`erts_thr_progress_update()` at least once before we reach the value\nreturned from `erts_thr_progress_later()`, the global counter plus one\nis not enough. This since all other threads may already have confirmed\ncurrent global value plus one at the time when we call\n`erts_thr_progress_later()`. They are however guaranteed not to have\nconfirmed global value plus two at this time.\n\nThe above described implementation more or less minimizes the\ncommunication needed before we can increment the global counter. The\namount of communication in the system due to the thread progress\nfunctionality however also depend on the frequency with which managed\nthreads call `erts_thr_progress_update()`. Today each scheduler thread\ncalls `erts_thr_progress_update()` more or less each time an Erlang\nprocess is scheduled out. One way of further reducing communication\ndue to the thread progress functionality is to only call\n`erts_thr_progress_update()` every second, or third time an Erlang\nprocess is scheduled out, or even less frequently than that. However,\nby doing updates of thread progress less frequently all operations\ndepending on the thread progress functionality will also take a longer\ntime.\n\n#### Delay of Thread Progress by Unmanaged Threads ####\n\nIn order to implement delay of thread progress from unmanaged threads\nwe use two reference counters. One being `current` and one being\n`waiting`. When an unmanaged thread wants to delay thread progress it\nincrements `current` and gets a handle back to the reference counter\nit incremented. When it later wants to enable continuation of thread\nprogress it uses the handle to decrement the reference counter it\npreviously incremented.\n\nWhen the leader threads is about to increment the global thread\nprogress counter it verifies that the `waiting` counter is zero before\ndoing so. If not zero, the leader isn't allowed to increment the\nglobal counter, and needs to wait before it can do this. When it is\nzero, it swaps the `waiting` and `current` counters before increasing\nthe global counter. From now on the new `waiting` counter will\ndecrease, so that it eventually will reach zero, making it possible to\nincrement the global counter the next time. If we only used one\nreference counter it would potentially be held above zero for ever by\ndifferent unmanaged threads.\n\nWhen an unmanaged thread increment the `current` counter it will not\nprevent the next increment of the global counter, but instead the\nincrement after that. This is sufficient since the global counter\nneeds to be incremented two times before thread progress has been\nmade. It is also desirable not to prevent the first increment, since\nthe likelihood increases that the delay is withdrawn before any\nincrement of the global counter is delayed. That is, the operation\nwill cause as little disruption as possible.\n\nHowever, this feature of delaying thread progress from unmanaged\nthreads should preferably be used as little as possible, since heavy\nuse of it will cause contention on the reference counter cache\nlines. The functionality is however very useful in code which normally\nonly executes in managed threads, but which may under some infrequent\ncircumstances be executed in other threads.\n\n#### Overhead ####\n\nThe overhead caused by the thread progress functionality is more or\nless fixed using the same amount of schedulers regardless of the\nnumber of uses of the functionality. Already today quite a lot of\nfunctionality use it, and we plan to use it even more. When rewriting\nold implementations of ERTS internal functionality to use the thread\nprogress functionality, this implies removing communication in the old\nimplementation. Otherwise it is simply no point rewriting the old\nimplementation to use the thread progress functionality. Since the\nthread progress overhead is more or less fixed, the rewrite will cause\na reduction of the total communication in the system.\n\n##### An Example #####\n\nThe main structure of an ETS table was originally managed using\nreference counting. Already a long time ago we replaced this strategy\nsince the reference counter caused contention on each access of the\ntable. The solution used was to schedule \"confirm deletion\" jobs on\neach scheduler in order to know when it was safe to deallocate the\ntable structure of a removed table. These confirm deletion jobs needed\nto be allocated. That is, we had to allocate and deallocate as many\nblocks as schedulers in order to deallocate one block. This of course\nwas a quite an expensive operation, but we only needed to do this once\nwhen removing a table. It was more important to get rid of the\ncontention on the reference counter which was present on every\noperation on the table.\n\nWhen the thread progress functionality had been introduced, we could\nremove the code implementing the \"confirm deletion\" jobs, and then\njust schedule a thread progress later operation which deallocates the\nstructure. Besides simplifying the code a lot, we got an increase of\nmore than 10% of the number of transactions per second handled on a\nmnesia tpcb benchmark executing on a quad core machine.","ref":"threadprogress.html#implementation"},{"type":"extras","title":"Tracing","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2014-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\n# Tracing","ref":"tracing.html"},{"type":"extras","title":"Implementation - Tracing","doc":"","ref":"tracing.html#implementation"},{"type":"extras","title":"Call, return, and exception tracing - Tracing","doc":"Tracing is implemented by setting breakpoints in the traced functions,\nand sending the appropriate trace messages when they're hit.\n\n* Call trace messages are sent immediately.\n* Return tracing pushes a frame to the stack which _returns to_ an\n  instruction that sends a trace message when encountered.\n* Exception tracing also pushes a frame to the stack, but will only send\n  a trace message if we encounter it in stack scanning while throwing an\n  exception.\n\nThis means that one must be careful not to use return or exception tracing\non functions that never return, as each call pushes a frame that will\nnever be removed.\n\nAnother limitation is that since the breakpoint is in the _callee_ and not\nthe _caller_, we're limited to the information we have on function ingress.\nThis means that we can't actually tell who called us: since we're limited\nto inspecting the stack we can only say where we're _going to return to_,\nwhich is not quite the same thing.\n\nAs an illustration, when the `caller` option is enabled all trace messages\nfrom `bar/1`  will say that they were called from `foo/0`, even though it\nwent through a bunch of other functions on the way:\n\n    foo() ->\n        lots(),\n        ok.\n    \n    lots() ->\n        'of'().\n    \n    'of'() ->\n        indirections().\n    \n    indirections() ->\n        bar(10).\n    \n    bar(0) ->\n        done;\n    bar(N) ->\n        bar(N - 1).","ref":"tracing.html#call-return-and-exception-tracing"},{"type":"extras","title":"Export tracing - Tracing","doc":"In the interpreter, breakpoints are set inside the code trampoline for\nexport entries, and their address vector is updated to point to them.\nThis way, only remote calls will hit the breakpoint while local calls to\nthe same function are left alone, but it otherwise acts the same way as\nlocal breakpoints.\n\nThings get a bit more involved in the JIT. See `BeamAsm.md` for more\ndetails.","ref":"tracing.html#export-tracing"},{"type":"extras","title":"Setting breakpoints - Tracing","doc":"","ref":"tracing.html#setting-breakpoints"},{"type":"extras","title":"Introduction - Tracing","doc":"Before OTP R16 when trace settings were changed by `erlang:trace_pattern`,\nall other execution in the VM were halted while the trace operation\nwas carried out in single threaded mode. Similar to code loading, this\ncan impose a severe problem for availability that grows with the\nnumber of cores.\n\nIn OTP R16, breakpoints are set in the code without blocking the VM.\nErlang processes may continue executing undisturbed in parallel during the\nentire operation. The same base technique is used as for code loading. A\nstaging area of breakpoints is prepared and then made active with a single\natomic operation.","ref":"tracing.html#introduction"},{"type":"extras","title":"Redesign of Breakpoint Wheel - Tracing","doc":"To make it easier to manage breakpoints without single threaded mode a\nredesign of the breakpoint mechanism has been made. The old\n\"breakpoint wheel\" data structure was a circular double-linked list of\nbreakpoints for each instrumented function. It was invented before the\nSMP emulator. To support it in the SMP emulator, is was essentially\nexpanded to one breakpoint wheel per scheduler. As more breakpoint\ntypes have been added, the implementation have become messy and hard\nto understand and maintain.\n\nIn the new design the old wheel was dropped and instead replaced by\none struct (`GenericBp`) to hold the data for all types of breakpoints\nfor each instrumented function. A bit-flag field is used to indicate\nwhat different type of break actions that are enabled.","ref":"tracing.html#redesign-of-breakpoint-wheel"},{"type":"extras","title":"Same Same but Different - Tracing","doc":"Even though `trace_pattern` use the same technique as the non-blocking\ncode loading with replicated generations of data structures and an\natomic switch, the implementations are quite separate from each\nother. One initial idea was to use the existing mechanism of code\nloading to do a dummy load operation that would make a copy of the\naffected modules. That copy could then be instrumented with\nbreakpoints before making it reachable with the same atomic switch as\ndone for code loading. This approach seems straight forward but has a\nnumber of shortcomings, one being the large memory footprint when many\nmodules are instrumented. Another problem is how execution will reach\nthe new instrumented code. Normally loaded code can only be reached\nthrough external functions calls. Trace settings must be activated\ninstantaneously without the need of external function calls.\n\nThe chosen solution is instead for tracing to use the technique of\nreplication applied on the data structures for breakpoints. Two\ngenerations of breakpoints are kept and identified by index of 0 and\n1\\. The global atomic variables `erts_active_bp_index` will determine\nwhich generation of breakpoints running code will use.","ref":"tracing.html#same-same-but-different"},{"type":"extras","title":"Atomicity Without Atomic Operations - Tracing","doc":"Not using the code loading generations (or any other code duplication)\nmeans that `trace_pattern` must at some point write to the active beam\ncode in order for running processes to reach the staged breakpoints\nstructures. This can be done with one single atomic write operation\nper instrumented function. The beam instruction words are however read\nwith normal memory loads and not through the atomic API. The only\nguarantee we need is that the written instruction word is seen as\natomic. Either fully written or not at all. This is true for word\naligned write operation on all hardware architectures we use.","ref":"tracing.html#atomicity-without-atomic-operations"},{"type":"extras","title":"Adding a new Breakpoint - Tracing","doc":"This is a simplified sequence describing what `trace_pattern` goes\nthrough when adding a new breakpoint.\n\n1. Seize exclusive code modification permission (suspend process until we get\n   it).\n\n2. Allocate breakpoint structure `GenericBp` including both generations.\n   Set the active area as disabled with a zeroed flagfield. Save the original\n   instruction word in the breakpoint.\n\n3. Write a pointer to the breakpoint at offset `-sizeof(UWord)` from the first\n   instruction `ErtsFuncInfo` header.\n\n4. Set the staging area of the breakpoint as enabled with specified\n   breakpoint data.\n\n5. Wait for thread progress.\n\n6. Write a `op_i_generic_breakpoint` as the first instruction for the function.\n   This instruction will execute the breakpoint that it finds at offset\n   `-sizeof(UWord)`.\n\n7. Wait for thread progress.\n\n8. Commit the breakpoint by switching `erts_active_bp_index`.\n\n9. Wait for thread progress.\n\n10. \"Consolidate\"\n    Prepare for next call to `trace_pattern` by updating the new staging area\n    (the old active) of the breakpoint to be identical to the new active area.\n\n11. Release code modification permission and return from `trace_pattern`.\n\n\nThe code modification permission \"lock\" seized in step 1 is also taken by code\nloading. This ensures that only one process at a time can stage new trace\nsettings, and also prevents concurrent codeloading and make sure we see a\nconsistent view of the beam code during the entire sequence.\n\nBetween step 6 and 8, runninng processes might execute the written\n`op_i_generic_breakpoint` instruction. They will get the breakpoint\nstructure written in step 3, read `erts_active_bp_index` and execute\nthe corresponding part of the breakpoint. Before the switch in step 8\nbecomes visible they will however execute the disabled part of the\nbreakpoint structure and do nothing other than executing the saved\noriginal instruction.\n\nThe consolidation in step 10 will make the new staging area identical\nto the new active area. This will make it simpler for the next call to\n`trace_pattern` that may not affect all existing breakpoints. The staging area\nof all unaffected breakpoints are then ready to become active without any\nvisitation by `trace_pattern`.\n\n###  To Update and Remove Breakpoints\n\nThe above sequence did only describe adding a new breakpoint. We do\nbasically the same sequence to update the settings of an existing\nbreakpoint except step 2,3 and 6 can be skipped as it has already been\ndone.\n\nTo remove a breakpoint some more steps are needed. The idea is to\nfirst stage the breakpoint as disabled, do the switch, wait for thread\nprogress and then remove the disabled breakpoint by restoring the\noriginal beam instruction.\n\nHere is a more complete sequence that contains both adding, updating\nand removing breakpoints.\n\n1. Seize exclusive code modification permission (suspend process until we get\n   it).\n\n2. Allocate new breakpoint structures with a disabled active area and\n   the original beam instruction. Write a pointer to the breakpoint in\n   `ErtsFuncInfo` header at offset `-sizeof(UWord)`.\n\n3. Update the staging area of all affected breakpoints. Disable\n   breakpoints that are to be removed.\n\n4. Wait for thread progress.\n\n5. Write a `op_i_generic_breakpoint` as the first instruction for all\n   functions with new breakpoints.\n\n6. Wait for thread progress.\n\n7. Commit all staged breakpoints by switching `erts_active_bp_index`.\n\n8. Wait for thread progress.\n\n\n9. Uninstall.\n   Restore original beam instruction for disabled breakpoints.\n\n10. Wait for thread progress.\n\n11. Consolidate.\n    Prepare for next call to `trace_pattern` by updating the new\n    staging area (the old active) for all enabled breakpoints.\n\n12. Deallocate disabled breakpoint structures.\n\n13. Release code modification permission and return from `trace_pattern`.","ref":"tracing.html#adding-a-new-breakpoint"},{"type":"extras","title":"All that Waiting for Thread Progress - Tracing","doc":"There are four rounds of waiting for thread progress in the above\nsequence. In the code loading sequence we sacrificed memory overhead\nof three generations to avoid a second round of thread progress. The\nlatency of `trace_pattern` should not be such a big problem for\nhowever, as it is normally not called in a rapid sequence.\n\nThe waiting in step 4 is to make sure all threads will see an updated\nview of the breakpoint structures once they become reachable through\nthe `op_i_generic_breakpoint` instruction written in step 5.\n\nThe waiting in step 6 is to make the activation of the new trace\nsettings \"as atomic as possible\". Different cores might see the new\nvalue of `erts_active_bp_index` at different times as it is read\nwithout any memory barrier. But this is the best we can do without\nmore expensive thread synchronization.\n\nThe waiting in step 8 is to make sure we don't restore the original\nbream instructions for disabled breakpoints until we know that no\nthread is still accessing the old enabled area of a disabled\nbreakpoint.\n\nThe waiting in step 10 is to make sure no lingering thread is still\naccessing disabled breakpoint structures to be deallocated in step\n12.","ref":"tracing.html#all-that-waiting-for-thread-progress"},{"type":"extras","title":"Global Tracing - Tracing","doc":"Call tracing with `global` option only affects external function\ncalls. This was earlier handled by inserting a special trace\ninstruction in export entries without the use of breakpoints. With the\nnew non-blocking tracing we want to avoid special handling for global\ntracing and make use of the staging and atomic switching within the\nbreakpoint mechanism. The solution was to create the same type of\nbreakpoint structure for a global call trace. The difference to local\ntracing is that we insert the `op_i_generic_breakpoint` instruction\n(with its pointer at offset -4) in the export entry rather than in the\ncode.","ref":"tracing.html#global-tracing"},{"type":"extras","title":"Future work - Tracing","doc":"We still go to single threaded mode when new code is loaded for a\nmodule that is traced, or when loading code when there is a default\ntrace pattern set. That is not impossible to fix, but that requires\nmuch closer cooperation between tracing BIFs and the loader BIFs.","ref":"tracing.html#future-work"},{"type":"extras","title":"The beam_makeops script","doc":"<!--\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2017-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n-->\n\nThe beam_makeops script\n=======================\n\nThis document describes the **beam\\_makeops** script.\n\nIntroduction\n------------\n\nThe **beam\\_makeops** Perl script is used at build-time by both the\ncompiler and runtime system.  Given a number of input files (all with\nthe extension `.tab`), it will generate source files used by the\nErlang compiler and by the runtime system to load and execute BEAM\ninstructions.\n\nEssentially those `.tab` files define:\n\n* External generic BEAM instructions.  They are the instructions that\nare known to both the compiler and the runtime system.  Generic\ninstructions are stable between releases.  New generic instructions\nwith high numbers than previous instructions can be added in major\nreleases.  The OTP 20 release has 159 external generic instructions.\n\n* Internal generic instructions.  They are known only to the runtime\nsystem and can be changed at any time without compatibility issues.\nThey are created by transformation rules (described next).\n\n* Rules for transforming one or more generic instructions to other\ngeneric instructions.  The transformation rules allow combining,\nsplitting, and removal of instructions, as well as shuffling operands.\nBecause of the transformation rules, the runtime can have many\ninternal generic instructions that are only known to runtime system.\n\n* Specific BEAM instructions.  The specific instructions are the\ninstructions that are actually executed by the runtime system.  They\ncan be changed at any time without causing compatibility issues.\nThe loader translates generic instructions to specific instructions.\nIn general, for each generic instruction, there exists a family of\nspecific instructions.  The OTP 20 release has 389 specific\ninstructions.\n\n* The implementation of specific instructions for the traditional\nBEAM interpreter. For the [BeamAsm JIT](BeamAsm.md) introduced\nin OTP 24, the implementation of instructions are defined in emitter\nfunctions written in C++.\n\nGeneric instructions have typed operands. Here are a few examples of\noperands for `move/2`:\n\n    {move,{atom,id},{x,5}}.\n    {move,{x,3},{x,0}}.\n    {move,{x,2},{y,1}}.\n\nWhen those instructions are loaded, the loader rewrites them\nto specific instructions:\n\n    move_cx id 5\n    move_xx 3 0\n    move_xy 2 1\n\nCorresponding to each generic instruction, there is a family of\nspecific instructions.  The types that an instance of a specific\ninstruction can handle are encoded in the instruction names.  For\nexample, `move_xy` takes an X register number as the first operand and\na Y register number as the second operand.  `move_cx` takes a tagged\nErlang term as the first operand and an X register number as the\nsecond operand.\n\nAn example: the move instruction\n--------------------------------\n\nUsing the `move` instruction as an example, we will give a quick\ntour to show the main features of **beam\\_makeops**.\n\nIn the `compiler` application, in the file `genop.tab`, there is the\nfollowing line:\n\n    64: move/2\n\nThis is a definition of an external generic BEAM instruction. Most\nimportantly it specifies that the opcode is 64.  It also defines that\nit has two operands.  The BEAM assembler will use the opcode when\ncreating `.beam` files.  The compiler does not really need the arity,\nbut it will use it as an internal sanity check when assembling the\nBEAM code.\n\nLet's have a look at `ops.tab` in `erts/emulator/beam/emu`, where the\nspecific `move` instructions are defined.  Here are a few of them:\n\n    move x x\n    move x y\n    move c x\n\nEach specific instructions is defined by following the name of the\ninstruction with the types for each operand.  An operand type is a\nsingle letter.  For example, `x` means an X register, `y`\nmeans a Y register, and `c` is a \"constant\" (a tagged term such as\nan integer, an atom, or a literal).\n\nNow let's look at the implementation of the `move` instruction.  There\nare multiple files containing implementations of instructions in the\n`erts/emulator/beam/emu` directory.  The `move` instruction is defined\nin `instrs.tab`.  It looks like this:\n\n    move(Src, Dst) {\n        $Dst = $Src;\n    }\n\nThe implementation for an instruction largely follows the C syntax,\nexcept that the variables in the function head don't have any types.\nThe `$` before an identifier denotes a macro expansion.  Thus,\n`$Src` will expand to the code to pick up the source operand for\nthe instruction and `$Dst` to the code for the destination register.\n\nWe will look at the code for each specific instruction in turn.  To\nmake the code easier to understand, let's first look at the memory\nlayout for the instruction `{move,{atom,id},{x,5}}`:\n\n         +--------------------+--------------------+\n    I -> |                 40 |       &&lb_move_cx |\n         +--------------------+--------------------+\n         |                        Tagged atom 'id' |\n         +--------------------+--------------------+\n\nThis example and all other examples in the document assumes a 64-bit\narchitecture, and furthermore that pointers to C code fit in 32 bits.\n\n`I` in the BEAM virtual machine is the instruction pointer.  When BEAM\nexecutes an instruction, `I` points to the first word of the\ninstruction.\n\n`&&lb_move_cx` is the address to C code that implements `move_cx`.  It\nis stored in the lower 32 bits of the word.  In the upper 32 bits is\nthe byte offset to the X register; the register number 5 has been\nmultiplied by the word size size 8.\n\nIn the next word the tagged atom `id` is stored.\n\nWith that background, we can look at the generated code for `move_cx`\nin `beam_hot.h`:\n\n    OpCase(move_cx):\n    {\n      BeamInstr next_pf = BeamCodeAddr(I[2]);\n      xb(BeamExtraData(I[0])) = I[1];\n      I += 2;\n      ASSERT(VALID_INSTR(next_pf));\n      GotoPF(next_pf);\n    }\n\nWe will go through each line in turn.\n\n* `OpCase(move_cx):` defines a label for the instruction.  The\n`OpCase()` macro is defined in `beam_emu.c`.  It will expand this line\nto `lb_move_cx:`.\n\n* `BeamInstr next_pf = BeamCodeAddr(I[2]);` fetches the pointer to\ncode for the next instruction to be executed.  The `BeamCodeAddr()`\nmacro extracts the pointer from the lower 32 bits of the instruction\nword.\n\n* `xb(BeamExtraData(I[0])) = I[1];` is the expansion of `$Dst = $Src`.\n`BeamExtraData()` is a macro that will extract the upper 32 bits from\nthe instruction word.  In this example, it will return 40 which is the\nbyte offset for X register 5.  The `xb()` macro will cast a byte\npointer to an `Eterm` pointer and dereference it.  The `I[1]` on\nthe right-hand side of the `=` fetches an Erlang term (the atom `id` in\nthis case).\n\n* `I += 2` advances the instruction pointer to the next\ninstruction.\n\n* In a debug-compiled emulator, `ASSERT(VALID_INSTR(next_pf));` makes\nsure that `next_pf` is a valid instruction (that is, that it points\nwithin the `process_main()` function in `beam_emu.c`).\n\n* `GotoPF(next_pf);` transfers control to the next instruction.\n\nNow let's look at the implementation of `move_xx`:\n\n    OpCase(move_xx):\n    {\n      Eterm tmp_packed1 = BeamExtraData(I[0]);\n      BeamInstr next_pf = BeamCodeAddr(I[1]);\n      xb((tmp_packed1>>BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&BEAM_TIGHT_MASK);\n      I += 1;\n      ASSERT(VALID_INSTR(next_pf));\n      GotoPF(next_pf);\n    }\n\nWe will go through the lines that are new or have changed compared to\n`move_cx`.\n\n* `Eterm tmp_packed1 = BeamExtraData(I[0]);` picks up both X register\nnumbers packed into the upper 32 bits of the instruction word.\n\n* `BeamInstr next_pf = BeamCodeAddr(I[1]);` pre-fetches the address of\nthe next instruction. Note that because both X registers operands fits\ninto the instruction word, the next instruction is in the very next\nword.\n\n* `xb((tmp_packed1>>BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&BEAM_TIGHT_MASK);`\ncopies the source to the destination.  (For a 64-bit architecture,\n`BEAM_TIGHT_SHIFT` is 16 and `BEAM_TIGHT_MASK` is `0xFFFF`.)\n\n* `I += 1;` advances the instruction pointer to the next instruction.\n\n`move_xy` is almost identical to `move_xx`.  The only difference is\nthe use of the `yb()` macro instead of `xb()` to reference the\ndestination register:\n\n    OpCase(move_xy):\n    {\n      Eterm tmp_packed1 = BeamExtraData(I[0]);\n      BeamInstr next_pf = BeamCodeAddr(I[1]);\n      yb((tmp_packed1>>BEAM_TIGHT_SHIFT)) = xb(tmp_packed1&BEAM_TIGHT_MASK);\n      I += 1;\n      ASSERT(VALID_INSTR(next_pf));\n      GotoPF(next_pf);\n    }","ref":"beam_makeops.html"},{"type":"extras","title":"Transformation rules - The beam_makeops script","doc":"Next let's look at how we can do some optimizations using transformation\nrules.  For simple instructions such as `move/2`, the instruction dispatch\noverhead can be substantial.  A simple optimization is to combine common\ninstructions sequences to a single instruction.  One such common sequence\nis multiple `move` instructions moving X registers to Y registers.\n\nUsing the following rule we can combine two `move` instructions\nto a `move2` instruction:\n\n    move X1=x Y1=y | move X2=x Y2=y => move2 X1 Y1 X2 Y2\n\nThe left-hand side of the arrow (`=>`) is a pattern.  If the pattern\nmatches, the matching instructions will be replaced by the\ninstructions on the right-hand side.  Variables in a pattern must start\nwith an uppercase letter just as in Erlang.  A pattern variable may be\nfollowed `=` and one or more type letters to constrain the match to\none of those types.  The variables that are bound on the left-hand side can\nbe used on the right-hand side.\n\nWe will also need to define a specific instruction and an implementation:\n\n    # In ops.tab\n    move2 x y x y\n\n    // In instrs.tab\n    move2(S1, D1, S2, D2) {\n        Eterm V1, V2;\n        V1 = $S1;\n        V2 = $S2;\n        $D1 = V1;\n        $D2 = V2;\n    }\n\nWhen the loader has found a match and replaced the matched instructions,\nit will match the new instructions against the transformation rules.\nBecause of that, we can define the rule for a `move3/6` instruction\nas follows:\n\n    move2 X1=x Y1=y X2=x Y2=y | move X3=x Y3=y =>\n          move3 X1 Y1 X2 Y2 X3 Y3\n\n(For readability, a long transformation line can be broken after `|`\nand `=>` operators.)\n\nIt would also be possible to define it like this:\n\n    move X1=x Y1=y | move X2=x Y2=y | move X3=x Y3=y =>\n         move3 X1 Y1 X2 Y2 X3 Y3\n\nbut in that case it must be defined before the rule for `move2/4`\nbecause the first matching rule will be applied.\n\nOne must be careful not to create infinite loops.  For example, if we\nfor some reason would want to reverse the operand order for the `move`\ninstruction, we must not do like this:\n\n    move Src Dst => move Dst Src\n\nThe loader would swap the operands forever.  To avoid the loop, we must\nrename the instruction.  For example:\n\n    move Src Dst => assign Dst Src\n\nThis concludes the quick tour of the features of **beam\\_makeops**.\n\nShort overview of instruction loading for the interpreter\n---------------------------------------------------------\n\nTo give some background to the rest of this document, here follows a\nquick overview of how instructions are loaded.\n\n* The loader reads and decodes one instruction at a time from the BEAM\ncode and creates a generic instruction.  Many transformation rules\nmust look at multiple instructions, so the loader will\nkeep multiple generic instructions in a linked list.\n\n* The loader tries to apply transformation rules against the\ngeneric instructions in the linked list.  If a rule matches, the\nmatched instructions will be removed and replaced with new\ngeneric instructions constructed from the right-hand side of the\ntransformation.\n\n* If a transformation rule matched, the loader applies the\ntransformation rules again.\n\n* If no transformation rule match, the loader will begin rewriting\nthe first of generic instructions to a specific instruction.\n\n* First the loader will search for a specific operation where the\ntypes for all operands match the type for the generic instruction.\nThe first matching instruction will be selected.  **beam\\_makeops**\nhas ordered the specific instructions so that instructions with more\nspecific operands comes before instructions with less specific\noperands.  For example, `move_nx` is more specific than `move_cx`.  If\nthe first operand is `[]` (NIL), `move_nx` will be selected.\n\n* Given the opcode for the selected specific instruction, the loader\nlooks up the pointer to the C code for the instruction and stores\nin the code area for the module being loaded.\n\n* The loader translates each operand to a machine word and stores it\nin the code area.  The operand type for the selected specific\ninstruction guides the translation.  For example, if the type is `e`,\nthe value of the operand is an index into an array of external\nfunctions and will be translated to a pointer to the export entry for\nthe function to call.  If the type is `x`, the number of the X\nregister will be multiplied by the word size to produce a byte offset.\n\n* The loader runs the packing engine to pack multiple operands into a\nsingle word.  The packing engine is controlled by a small program,\nwhich is a string where each character is an instruction.  For\nexample, the code to pack the operands for `move_xy` is `\"22#\"` (on a\n64-bit machine).  That program will pack the byte offsets for both\nregisters into the same word as the pointer to C code.\n\nShort overview of instruction loading for BeamAsm\n-------------------------------------------------\n\n* The first steps up to selection of a specific instruction is done\nas described for the interpreter.  The selection of a specific instruction\nis simpler, because in BeamAsm most generic instructions only have\na single corresponding specific instruction.\n\n* The loader calls the *emitter function* for the selected specific\ninstruction.  The emitter function translates the instruction to\nmachine code.\n\nRunning beam_makeops\n--------------------\n\n**beam\\_makeops** is found in `$ERL_TOP/erts/emulator/utils`.  Options\nstart with a hyphen (`-`).  The options are followed by the name of\nthe input files.  By convention, all input files have the extension\n`.tab`, but is not enforced by **beam\\_makeops**.","ref":"beam_makeops.html#transformation-rules"},{"type":"extras","title":"The -outdir option - The beam_makeops script","doc":"The option `-outdir Directory` specifies the output directory for\nthe generated files.  Default is the current working directory.","ref":"beam_makeops.html#the-outdir-option"},{"type":"extras","title":"Running beam_makeops for the compiler - The beam_makeops script","doc":"Give the option `-compiler` to produce output files for the compiler.\nThe following files will be written to the output directory:\n\n* `beam_opcodes.erl` - Used primarily by `beam_asm` and `beam_diasm`.\n\n* `beam_opcode.hrl` - Used by `beam_asm`.  It contains tag definitions\nused for encoding instruction operands.\n\nThe input file should only contain the definition of BEAM\\_FORMAT\\_NUMBER\nand external generic instructions.  (Everything else would be ignored.)","ref":"beam_makeops.html#running-beam_makeops-for-the-compiler"},{"type":"extras","title":"Running beam_makeops for the emulator - The beam_makeops script","doc":"Give the option `-emulator` to produce output files for the emulator.\nThe following output files will be generated in the output directory.\n\n* `beam_opcodes.c` - Defines static data used by the loader\n(`beam_load.c`), providing information about generic and specific\ninstructions, as well as all C code for the transformation rules.\n\n* `beam_opcodes.h` - Miscellaneous preprocessor definitions, mainly\nused by `beam_load.c` but also by `beam_{hot,warm,cold}.h`.\n\nFor the traditional BEAM interpreter, the following files are also\ngenerated:\n\n* `beam_hot.h`, `beam_warm.h`, `beam_cold.h` - Implementation of\ninstructions.  Included inside the `process_main()` function in\n`beam_emu.c`.\n\nFor BeamAsm, the following files are also generated:\n\n* `beamasm_emit.h` - Glue code to call emitter functions.\n\n* `beamasm_protos.h` - Prototypes for all emitter functions.\n\nThe following options can be given:\n\n* `wordsize 32|64` - Defines the word size.  Default is 32.\n\n* `code-model Model` - The code model as given to `-mcmodel` option\nfor GCC.  Default is `unknown`.  If the code model is `small` (and\nthe word size is 64 bits), **beam\\_makeops** will pack operands\ninto the upper 32 bits of the instruction word.\n\n* `DSymbol=0|1` - Defines the value for a symbol.  The symbol can be\nused in `%if` and `%unless` directives.\n\nSyntax of .tab files\n--------------------","ref":"beam_makeops.html#running-beam_makeops-for-the-emulator"},{"type":"extras","title":"Comments - The beam_makeops script","doc":"Any line starting with `#` is a comment and is ignored.\n\nA line with `//` is also a comment.  It is recommended to only\nuse this style of comments in files that define implementations of\ninstructions.\n\nA long transformation line can be broken after the `=>` operator and\nafter `|` operators. Since OTP 25, this is the only way to break transformation\nlines. When reading older source you may see that `\\` was used for this\npurpose, but we removed it since it was only seen together with `=>` and `|`.","ref":"beam_makeops.html#comments"},{"type":"extras","title":"Variable definitions - The beam_makeops script","doc":"A variable definition binds a variable to a Perl variable.  It is only\nmeaningful to add a new definition if **beam\\_makeops** is updated\nat the same time to use the variable.  A variable definition looks this:\n\n*name*=*value*[;]\n\nwhere *name* is the name of a Perl variable in **beam\\_makeops**,\nand *value* is the value to be given to the variable.  The line\ncan optionally end with a `;` (to avoid messing up the\nC indentation mode in Emacs).\n\nHere follows a description of the variables that are defined.\n\n#### BEAM\\_FORMAT\\_NUMBER ####\n\n`genop.tab` has the following definition:\n\n    BEAM_FORMAT_NUMBER=0\n\nIt defines the version of the instruction set (which will be\nincluded in the code header in the BEAM code).  Theoretically,\nthe version could be bumped, and all instructions changed.\nIn practice, we would have two support two instruction sets\nin the runtime system for at least two releases, so it will\nprobably never happen in practice.\n\n#### GC\\_REGEXP ####\n\nIn `macros.tab`, there is a definition of `GC_REGEXP`.\nIt will be described in [a later section](#the-GC_REGEXP-definition).\n\n#### FORBIDDEN\\_TYPES ####\n\nIn `asm/ops.tab`, there is a directive to forbid certain types\nin specific instructions:\n\n    FORBIDDEN_TYPES=hQ\n\nEspecially for BeamAsm, all built-in types may not make sense, so `FORBIDDEN_TYPES`\nmakes it possible to enforce that some types should not be used.\n\nSpecific instructions will be described in [a later section](#defining-specific-instructions).","ref":"beam_makeops.html#variable-definitions"},{"type":"extras","title":"Directives - The beam_makeops script","doc":"There are directives to classify specific instructions depending\non how frequently used they are:\n\n* `%hot` - Implementation will be placed in `beam_hot.h`. Frequently\nexecuted instructions.\n\n* `%warm` - Implementation will be placed in `beam_warm.h`.  Binary\nsyntax instructions.\n\n* `%cold` - Implementation will be placed in `beam_cold.h`. Trace\ninstructions and infrequently used instructions.\n\nDefault is `%hot`.  The directives will be applied to declarations\nof the specific instruction that follow.  Here is an example:\n\n    %cold\n    is_number f? xy\n    %hot\n\n#### Conditional compilation directives ####\n\nThe `%if` directive includes a range of lines if a condition is\ntrue.  For example:\n\n    %if ARCH_64\n    i_bs_get_integer_32 x f? x\n    %endif\n\nThe specific instruction `i_bs_get_integer_32` will only be defined\non a 64-bit machine.\n\nThe condition can be inverted by using `%unless` instead of `%if`:\n\n    %unless NO_FPE_SIGNALS\n    fcheckerror p => i_fcheckerror\n    i_fcheckerror\n    fclearerror\n    %endif\n\nIt is also possible to add an `%else` clause:\n\n    %if ARCH_64\n    BS_SAFE_MUL(A, B, Fail, Dst) {\n        Uint64 res = ($A) * ($B);\n        if (res / $B != $A) {\n            $Fail;\n        }\n        $Dst = res;\n    }\n    %else\n    BS_SAFE_MUL(A, B, Fail, Dst) {\n        Uint64 res = (Uint64)($A) * (Uint64)($B);\n        if ((res >> (8*sizeof(Uint))) != 0) {\n            $Fail;\n        }\n        $Dst = res;\n    }\n    %endif\n\n#### Symbols that are defined in directives ####\n\nThe following symbols are always defined.\n\n* `ARCH_64` - is 1 for a 64-bit machine, and 0 otherwise.\n* `ARCH_32` - is 1 for 32-bit machine, and 0 otherwise.\n\nThe `Makefile` for building the emulator currently defines the\nfollowing symbols by using the `-D` option on the command line for\n**beam\\_makeops**.\n\n* `USE_VM_PROBES` - 1 if the runtime system is compiled to use VM\n  probes (support for dtrace or systemtap), 0 otherwise.","ref":"beam_makeops.html#directives"},{"type":"extras","title":"Defining external generic instructions - The beam_makeops script","doc":"External generic BEAM instructions are known to both the compiler and\nthe runtime system.  They remain stable between releases.  A new major\nrelease may add more external generic instructions, but must not change\nthe semantics for a previously defined instruction.\n\nThe syntax for an external generic instruction is as follows:\n\n*opcode*: [-]*name*/*arity*\n\n*opcode* is an integer greater than or equal to 1.\n\n*name* is an identifier starting with a lowercase letter.  *arity* is\nan integer denoting the number of operands.\n\n*name* can optionally be preceded by `-` to indicate that it has been\nobsoleted.  The compiler is not allowed to generate BEAM files that\nuse obsolete instructions and the loader will refuse to load BEAM\nfiles that use obsolete instructions.\n\nIt only makes sense to define external generic instructions in the\nfile `genop.tab` in `lib/compiler/src`, because the compiler must\nknow about them in order to use them.\n\nNew instructions must be added at the end of the file, with higher\nnumbers than the previous instructions.","ref":"beam_makeops.html#defining-external-generic-instructions"},{"type":"extras","title":"Defining internal generic instructions - The beam_makeops script","doc":"Internal generic instructions are known only to the runtime\nsystem and can be changed at any time without compatibility issues.\n\nThere are two ways to define internal generic instructions:\n\n* Implicitly when a specific instruction is defined.  This is by far\nthe most common way.  Whenever a specific instruction is created,\n**beam\\_makeops** automatically creates an internal generic instruction\nif it does not previously exist.\n\n* Explicitly.  This is necessary only when a generic instruction is\nused in transformations, but does not have any corresponding specific\ninstruction.\n\nThe syntax for an internal generic instruction is as follows:\n\n*name*/*arity*\n\n*name* is an identifier starting with a lowercase letter.  *arity* is\nan integer denoting the number of operands.","ref":"beam_makeops.html#defining-internal-generic-instructions"},{"type":"extras","title":"About generic instructions in general - The beam_makeops script","doc":"Each generic instruction has an opcode.  The opcode is an integer,\ngreater than or equal to 1. For an external generic instruction, it\nmust be explicitly given `genop.tab`, while internal generic\ninstructions are automatically numbered by **beam\\_makeops**.\n\nThe identity of a generic instruction is its name combined with its\narity.  That means that it is allowed to define two distinct generic\ninstructions having the same name but with different arities.  For\nexample:\n\n    move_window/5\n    move_window/6\n\nEach operand of a generic instruction is tagged with its type.  A generic\ninstruction can have one of the following types:\n\n* `x` - X register.\n\n* `y` - Y register.\n\n* `l` - Floating point register number.\n\n* `i` - Tagged literal integer.\n\n* `a` - Tagged literal atom.\n\n* `n` - NIL (`[]`, the empty list).\n\n* `q` - Literal that don't fit in a word, that is an object stored on\nthe heap such as a list or tuple.  Any heap object type is supported,\neven types that don't have real literals such as external references.\n\n* `f` - Non-zero failure label.\n\n* `p` - Zero failure label.\n\n* `u` - Untagged integer that fits in a machine word.  It is used for many\ndifferent purposes, such as the number of live registers in `test_heap/2`,\nas a reference to the export for `call_ext/2`, and as the flags operand for\nbinary syntax instructions.  When the generic instruction is translated to a\nspecific instruction, the type for the operand in the specific operation will\ntell the loader how to treat the operand.\n\n* `o` - Overflow.  If the value for an `u` operand does not fit in a machine\nword, the type of the operand will be changed to `o` (with no associated\nvalue).  Currently only used internally in the loader in the guard constraint\nfunction `binary_too_big()`.\n\n* `v` - Arity value.  Only used internally in the loader.","ref":"beam_makeops.html#about-generic-instructions-in-general"},{"type":"extras","title":"Defining specific instructions - The beam_makeops script","doc":"The specific instructions are known only to the runtime system and\nare the instructions that are actually executed.  They can be changed\nat any time without causing compatibility issues.\n\nA specific instruction can have at most 6 operands if the family of\ninstructions it belongs to has more than one member.  The number of\noperands is unlimited if there is only a single specific instruction\nin a family.\n\nA specific instruction is defined by first giving its name followed by\nthe types for each operand.  For example:\n\n     move x y\n\nInternally, for example in the generated code and in the output from\nthe BEAM disassembler, the instruction `move x y` will be called `move_xy`.\n\nThe name for a specific instruction is an identifier starting with a\nlowercase letter.  A type is a lowercase or uppercase letter.\n\nAll specific instructions with a given name must have the same number\nof operands. That is, the following is **not** allowed:\n\n     move x x\n     move x y x y\n\nHere follows the type letters that more or less directly corresponds\nto the types for generic instructions.\n\n* `x` - X register.  Will be loaded as a byte offset to the X register\nrelative to the base of X register array.  (Can be packed with other\noperands.)\n\n* `y` - Y register.  Will be loaded as a byte offset to the Y register\nrelative to the stack frame. (Can be packed with other operands.)\n\n* `r` - X register 0.  An implicit operand that will not be stored in\nthe loaded code.  (Not used in BeamAsm.)\n\n* `l` - Floating point register number.  (Can be packed with other\noperands.)\n\n* `a` - Tagged atom.\n\n* `n` - NIL or the empty list.  (Will not be stored in the loaded code.)\n\n* `q` - Tagged CONS or BOXED pointer.  That is, a term such as a list\nor tuple.  Any heap object type is supported, even types that don't\nhave real literals such as external references.\n\n* `f` - Failure label (non-zero).  The target for a branch\nor call instruction.\n\n* `p` - The 0 failure label, meaning that an exception should be raised\nif the instruction fails.  (Will not be stored in the loaded code.)\n\n* `c` - Any literal term; that is, immediate literals such as SMALL,\nand CONS or BOXED pointers to literals.  (Can be used where the\noperand in the generic instruction has one of the types `i`, `a`, `n`,\nor `q`.)\n\nThe types that follow do a type test of the operand at runtime; thus,\nthey are generally more expensive in terms of runtime than the types\ndescribed earlier.  However, those operand types are needed to avoid a\ncombinatorial explosion in the number of specific instructions and\noverall code size of `process_main()`.\n\n* `s` - Tagged source: X register, Y register, or a literal term.  The\ntag will be tested at runtime to retrieve the value from an X\nregister, a Y register, or simply use the value as a tagged Erlang\nterm.  (Implementation note: An X register is tagged as a pid, and a Y\nregister as a port.  Therefore the literal term must not contain a\nport or pid.)\n\n* `S` - Tagged source register (X or Y).  The tag will be tested at\nruntime to retrieve the value from an X register or a Y register.  Slightly\ncheaper than `s`.\n\n* `d` - Tagged destination register (X or Y).  The tag will be tested\nat runtime to set up a pointer to the destination register.  If the\ninstruction performs a garbage collection, it must use the\n`$REFRESH_GEN_DEST()` macro to refresh the pointer before storing to\nit (there are more details about that in a later section).\n\n* `j` - A failure label (combination of `f` and `p`).  If the branch target 0,\nan exception will be raised if instruction fails, otherwise control will be\ntransferred to the target address.\n\nThe types that follows are all applied to an operand that has the `u`\ntype.\n\n* `t` - An untagged integer that will fit in 12 bits (0-4096).  It can be\npacked with other operands in a word.  Most often used as the number\nof live registers in instructions such as `test_heap`.\n\n* `I` - An untagged integer that will fit in 32 bits.  It can be\npacked with other operands in a word on a 64-bit system.\n\n* `W` - Untagged integer or pointer.  Not possible to pack with other\noperands.\n\n* `e` - Pointer to an export entry.  Use by call instructions that call\nother modules, such as `call_ext`.\n\n* `L` - A label.  Only used by the `label/1` instruction.\n\n* `b` - Pointer to BIF.  Used in BIF instructions such as `call_bif`.\n\n* `F` - Pointer to a fun entry. Used in `make_fun2` and friends.\n\n* `A` - A tagged arityvalue.  Used in instructions that test the arity\nof a tuple.\n\n* `P` - A byte offset into a tuple.\n\n* `Q` - A byte offset into the stack.  Used for updating the frame\npointer register.  Can be packed with other operands.\n\n* `*` - This operand must be the last operand.  It indicates that a\nvariable number of operands follow.  Its use is mandatory for BeamAsm\nwhen an instruction has a variable number of operands; see [handling a\nvariable number of operands](#handling-a-variable-number-of-operands).\nIt can be used for the interpreter as documentation, but it will have\nno effect on the code generation.\n\nWhen the loader translates a generic instruction a specific\ninstruction, it will choose the most specific instruction that will\nfit the types.  Consider the following two instructions:\n\n    move c x\n    move n x\n\nThe `c` operand can encode any literal value, including NIL.  The\n`n` operand only works for NIL.  If we have the generic instruction\n`{move,nil,{x,1}}`, the loader will translate it to `move_nx 1`\nbecause `move n x` is more specific.  `move_nx` could be slightly\nfaster or smaller (depending on the architecture), because the `[]`\nis not stored explicitly as an operand.\n\n#### Syntactic sugar for specific instructions ####\n\nIt is possible to specify more than one type letter for each operand.\nHere is an example:\n\n    move cxy xy\n\nThis is syntactic sugar for:\n\n    move c x\n    move c y\n    move x x\n    move x y\n    move y x\n    move y y\n\nNote the difference between `move c xy` and `move c d`.  Note that `move c xy`\nis equivalent to the following two definitions:\n\n    move c x\n    move c y\n\nOn the other hand, `move c d` is a single instruction.  At runtime,\nthe `d` operand will be tested to see whether it refers to an X\nregister or a Y register, and a pointer to the register will be set\nup.\n\n#### The '?' type modifier ####\n\nThe character `?` can be added to the end of an operand to indicate\nthat the operand will not be used every time the instruction is executed.\nFor example:\n\n    allocate_heap t I t?\n    is_eq_exact f? x xy\n\nIn `allocate_heap`, the last operand is the number of live registers.\nIt will only be used if there is not enough heap space and a garbage\ncollection must be performed.\n\nIn `is_eq_exact`, the failure address (the first operand) will only be\nused if the two register operands are not equal.\n\nKnowing that an operand is not always used can improve how packing\nis done for some instructions.\n\nFor the `allocate_heap` instruction, without the `?` the packing would\nbe done like this:\n\n         +--------------------+--------------------+\n    I -> |       Stack needed | &&lb_allocate_heap +\n         +--------------------+--------------------+\n         |        Heap needed | Live registers     +\n         +--------------------+--------------------+\n\n\"Stack needed\" and \"Heap needed\" are always used, but they are in\ndifferent words.  Thus, at runtime the `allocate_heap` instruction\nmust read both words from memory even though it will not always use\n\"Live registers\".\n\nWith the `?`, the operands will be packed like this:\n\n         +--------------------+--------------------+\n    I -> |     Live registers | &&lb_allocate_heap +\n         +--------------------+--------------------+\n         |        Heap needed |       Stack needed +\n         +--------------------+--------------------+\n\nNow \"Stack needed\" and \"Heap needed\" are in the same word.","ref":"beam_makeops.html#defining-specific-instructions"},{"type":"extras","title":"Defining transformation rules - The beam_makeops script","doc":"Transformation rules are used to rewrite generic instructions to other\ngeneric instructions.  The transformations rules are applied\nrepeatedly until no rule match.  At that point, the first instruction\nin the resulting instruction sequence will be converted to a specific\ninstruction and added to the code for the module being loaded.  Then\nthe transformation rules for the remaining instructions are run in the\nsame way.\n\nA rule is recognized by its right-pointer arrow: `=>`.  To the left of\nthe arrow is one or more instruction patterns, separated by `|`.  To\nthe right of the arrow is zero or more instructions, separated by `|`.\nIf the instructions from the BEAM code matches the instruction\npatterns on the left-hand side, they will be replaced with\ninstructions on the right-hand side (or removed if there are no\ninstructions on the right).\n\n#### Defining instruction patterns ####\n\nWe will start looking at the patterns on the left-hand side of the arrow.\n\nA pattern for an instruction consists of its name, followed by a pattern\nfor each of its operands.  The operand patterns are separated by spaces.\n\nThe simplest possible pattern is a variable.  Just like in Erlang,\na variable must begin with an uppercase letter.  In constrast to Erlang,\nvariables must **not** be repeated.\n\nVariables that have been bound on the left-hand side can be used on\nthe right-hand side or in predicates.  For example, this rule will rewrite all\n`move` instructions to `assign` instructions with the operands swapped:\n\n    move Src Dst => assign Dst Src\n\nTo help catch issues caused by unused variables (such as GH-8875), they are\nconsidered errors. If you wish to give an operand a name for documentation\npurposes, prefix it with an underscore (`_Foobar`) to mark the variable as\nintentionally unused. Conversely, using a variable marked in this manner is\nalso an error.\n\nIf we only want to match operands of a certain type, we can\nuse a type constraint.  A type constraint consists of one or more\nlowercase letters, each specifying a type.  For example:\n\n    is_integer Fail an => jump Fail\n\nThe second operand pattern, `an`, will match if the second operand is\neither an atom or NIL (the empty list).  In case of a match, the\n`is_integer/2` instruction will be replaced with a `jump/1`\ninstruction.\n\nAn operand pattern can bind a variable and constrain the type at the\nsame time by following the variable with a `=` and the constraint.\nFor example:\n\n    is_eq_exact Fail=f R=xy C=q => i_is_eq_exact_literal Fail R C\n\nHere the `is_eq_exact` instruction is replaced with a specialized instruction\nthat only compares literals, but only if the first operand is a register and\nthe second operand is a literal.\n\n#### Removing instructions ####\n\nThe instructions of the left-hand side of the pattern can be removed\nby using the `_` symbol on the right-hand side of the\ntransformation. For example, a `line` instruction without any actual\nline-number information can be removed like this:\n\n    line n => _\n\n(Before OTP 25, this was instead achieved by leaving the right-hand side\nblank.)\n\n#### Further constraining patterns ####\n\nIn addition to specifying a type letter, the actual value for the type can\nbe specified.  For example:\n\n    move C=c x==1 => move_x1 C\n\nHere the second operand of `move` is constrained to be X register 1.\n\nWhen specifying an atom constraint, the atom is written as it would be\nin the C source code.  That is, it needs an `am_` prefix, and it must\nbe listed in `atom.names`.  For example, redundant `is_boolean` instructions\ncan be removed like this:\n\n    is_boolean Fail=f a==am_true => _\n    is_boolean Fail=f a==am_false => _\n\nThere are several constraints available for testing whether a call is to a BIF\nor a function.\n\nThe constraint `u$is_bif` will test whether the given operand refers to a BIF.\nFor example:\n\n    call_ext u Bif=u$is_bif => call_bif Bif\n    call_ext u Func         => i_call_ext Func\n\nThe `call_ext` instruction can be used to call functions written in\nErlang as well as BIFs (or more properly called SNIFs).  The\n`u$is_bif` constraint will match if the operand refers to a BIF (that\nis, if it is listed in the file `bif.tab`).  Note that `u$is_bif`\nshould only be applied to operands that are known to contain an index\nto the import table chunk in the BEAM file (such operands have the\ntype `b` or `e` in the corresponding specific instruction).  If\napplied to other `u` operands, it will at best return a nonsense\nresult.\n\nThe `u$is_not_bif` constraint matches if the operand does not refer to\na BIF (not listed in `bif.tab`).  For example:\n\n    move S X0=x==0 | line Loc | call_ext_last Ar Func=u$is_not_bif D =>\n         move S X0 | call_ext_last Ar Func D\n\nThe `u$bif:Module:Name/Arity` constraint tests whether the given\noperand refers to a specific BIF.  Note that `Module:Name/Arity`\n**must** be an existing BIF defined in `bif.tab`, or there will\nbe a compilation error.  It is useful when a call to a specific BIF\nshould be replaced with an instruction as in this example:\n\n    gc_bif2 Fail Live u$bif:erlang:splus/2 S1 S2 Dst =>\n         gen_plus Fail Live S1 S2 Dst\n\nHere the call to the GC BIF `'+'/2` will be replaced with the instruction\n`gen_plus/5`.  Note that the same name as used in the C source code must be\nused for the BIF, which in this case is `splus`.  It is defined like this\nin `bit.tab`:\n\n    ubif erlang:'+'/2 splus_2\n\nThe `u$func:Module:Name/Arity` will test whether the given operand is a\na specific function.  Here is an example:\n\n    bif1 Fail u$func:erlang:is_constant/1 Src Dst => too_old_compiler\n\n`is_constant/1` used to be a BIF a long time ago.  The transformation\nreplaces the call with the `too_old_compiler` instruction, which is\nspecially handled in the loader to produce a nicer error message than\nthe default error would be for a missing guard BIF.\n\n#### Type constraints allowed in patterns ####\n\nHere are all type letters that are allowed on the left-hand side of a\ntransformation rule.\n\n* `u` - An untagged integer that fits in a machine word.\n\n* `x` - X register.\n\n* `y` - Y register.\n\n* `l` - Floating point register number.\n\n* `i` - Tagged literal integer.\n\n* `a` - Tagged literal atom.\n\n* `n` - NIL (`[]`, the empty list).\n\n* `q` - Literals that don't fit in a word, such as list or tuples.\n\n* `f` - Non-zero failure label.\n\n* `p` - The zero failure label.\n\n* `j` - Any label.  Equivalent to `fp`.\n\n* `c` - Any literal term.  Equivalent to `ainq`.\n\n* `s` - X register, Y register, or any literal term.  Equivalent to `xyc`.\n\n* `d` - X or Y register.  Equivalent to `xy`.  (In a pattern `d` will\nmatch both source and destination registers.  As an operand in a specific\ninstruction, it must only be used for a destination register.)\n\n* `o` - Overflow.  An untagged integer that does not fit in a machine word.\n\n#### Predicates ####\n\nIf the constraints described so far is not enough, additional\nconstraints can be implemented in C and be called as a guard function\non the left-hand side of the transformation.  If the guard function returns\na non-zero value, the matching of the rule will continue, otherwise\nthe match will fail.  Such guard functions are hereafter called\n*predicates*.\n\nThe most commonly used guard constraints is `equal()`. It can be used\nto remove a redundant `move` instructio like this:\n\n    move R1 R2 | equal(R1, R2) => _\n\nor remove a redundant `is_eq_exact` instruction like this:\n\n    is_eq_exact Lbl Src1 Src2 | equal(Src1, Src2) => _\n\nAt the time of writing, all predicates are defined in files named\n`predicates.tab` in several directories.  In `predicates.tab` directly\nin `$ERL_TOP/erts/emulator/beam`, predicates that are used by both the\ntraditinal emulator and the JIT implementations are contained.\nPredicates only used by the emulator can be found in\n`emu/predicates.tab`.","ref":"beam_makeops.html#defining-transformation-rules"},{"type":"extras","title":"A very brief note on implementation of predicates - The beam_makeops script","doc":"It is outside the scope for this document to describe in detail how\npredicates are implemented because it requires knowledge of the\ninternal loader data structures, but here is quick look at the\nimplementation of a simple predicate called `literal_is_map()`.\n\nHere is first an example how it is used:\n\n   is_map Fail Lit=q | literal_is_map(Lit) => _\n\nIf the `Lit` operand is a literal, then the `literal_is_map()`\npredicate is called to determine whether it is a map literal.\nIf it is, the instruction is not needed and can be removed.\n\n`literal_is_map()` is implemented like this (in `emu/predicates.tab`):\n\n    pred.literal_is_map(Lit) {\n        Eterm term;\n\n        ASSERT(Lit.type == TAG_q);\n        term = beamfile_get_literal(&S->beam, Lit.val);\n        return is_map(term);\n    }\n\nThe `pred.` prefix tells **beam\\_makeops** that this function is a\npredicate.  Without the prefix, it would have been interpreted as the\nimplementation of an instruction (described in **Defining the\nimplementation**).\n\nPredicate functions have a magic variabled called `S`, which is a\npointer to a state struct. In the example,\n`beamfile_get_literal(&S->beam, Lit.val);` is used to retrieve the actual term\nfor the literal.\n\nAt the time of writing, the expanded C code generated by\n**beam\\_makeops** looks like this:\n\n    static int literal_is_map(LoaderState* S, BeamOpArg Lit) {\n      Eterm term;\n\n      ASSERT(Lit.type == TAG_q);\n      term = S->literals[Lit.val].term;\n      return is_map(term);;\n    }\n\n#### Handling instructions with variable number of operands ####\n\nSome instructions, such as `select_val/3`, essentially has a variable\nnumber of operands.  Such instructions have a `{list,[...]}` operand\nas their last operand in the BEAM assembly code.  For example:\n\n    {select_val,{x,0},\n                {f,1},\n                {list,[{atom,b},{f,4},{atom,a},{f,5}]}}.\n\nThe loader will convert a `{list,[...]}` operand to an `u` operand whose\nvalue is the number of elements in the list, followed by each element in\nthe list.  The instruction above would be translated to the following\ngeneric instruction:\n\n    {select_val,{x,0},{f,1},{u,4},{atom,b},{f,4},{atom,a},{f,5}}\n\nTo match a variable number of arguments we need to use the special\noperand type `*` like this:\n\n    select_val Src=aiq Fail=f Size=u List=* =>\n        i_const_select_val Src Fail Size List\n\nThis transformation renames a `select_val/3` instruction\nwith a constant source operand to `i_const_select_val/3`.\n\n#### Constructing new instructions on the right-hand side ####\n\nThe most common operand on the right-hand side is a variable that was\nbound while matching the pattern on the left-hand side.  For example:\n\n    trim N Remaining => i_trim N\n\nAn operand can also be a type letter to construct an operand of that\ntype.  Each type has a default value.  For example, the type `x` has\nthe default value 1023, which is the highest X register.  That makes\n`x` on the right-hand side a convenient shortcut for a temporary X\nregister.  For example:\n\n    is_number Fail Literal=q => move Literal x | is_number Fail x\n\nIf the second operand for `is_number/2` is a literal, it will be moved to\nX register 1023.  Then `is_number/2` will test whether the value stored in\nX register 1023 is a number.\n\nThis kind of transformation is useful when it is rare that an operand can\nbe anything else but a register.  In the case of `is_number/2`, the second\noperand is always a register unless the compiler optimizations have been\ndisabled.\n\nIf the default value is not suitable, the type letter can be followed\nby `=` and a value.  Most types take an integer value.  The value for\nan atom is written the same way as in the C source code.  For example,\nthe atom `false` is written as `am_false`.  The atom must be listed in\n`atom.names`.\n\nHere is an example showing how values can be specified:\n\n    bs_put_utf32 Fail=j Flags=u Src=s =>\n        i_bs_validate_unicode Fail Src |\n        bs_put_integer Fail i=32 u=1 Flags Src\n\n#### Type letters on the right-hand side ####\n\nHere follows all types that are allowed to be used in operands for\ninstructions being constructed on the right-hand side of a\ntransformation rule.\n\n* `u` - Construct an untagged integer.  The default value is 0.\n\n* `x` - X register.  The default value is 1023.  That makes `x` convenient to\nuse as a temporary X register.\n\n* `y` - Y register.  The default value is 0.\n\n* `l` - Floating point register number.  The default value is 0.\n\n* `i` - Tagged literal integer.  The default value is 0.\n\n* `a` - Tagged atom.  The default value is the empty atom (`am_Empty`).\n\n* `p` - Zero failure label.\n\n* `n` - NIL (`[]`, the empty list).\n\n#### Function call on the right-hand side ####\n\nTransformations that are not possible to describe with the rule\nlanguage as described here can be implemented as a generator function\nin C and called from the right-hand side of a transformation.  The left-hand\nside of the transformation will perform the match and bind operands to\nvariables.  The variables can then be passed to a generator function\non the right-hand side.  For example:\n\n    bif2 Fail=j u$bif:erlang:element/2 Index=s Tuple=xy Dst=d =>\n        element(Jump, Index, Tuple, Dst)\n\nThis transformation rule matches a call to the BIF `element/2`.\nThe operands will be captured and the generator function `element()` will\nbe called.\n\nThe `element()` generator will produce one of two instructions\ndepending on `Index`.  If `Index` is an integer in the range from 1 up\nto the maximum tuple size, the instruction `i_fast_element/2` will be\nproduced, otherwise the instruction `i_element/4` will be produced.\nThe corresponding specific instructions are:\n\n    i_fast_element xy j? I d\n    i_element xy j? s d\n\nThe `i_fast_element/2` instruction is faster because the tuple is\nalready an untagged integer.  It also knows that the index is at least\n1, so it does not have to test for that.  The `i_element/4`\ninstruction will have to fetch the index from a register, test that it\nis an integer, and untag the integer.\n\nAt the time of writing, all generators functions were defined in files\nnamed `generators.tab` in several directories (in the same directories\nas the `predicates.tab` files).\n\nIt is outside the scope of this document to describe in detail how\ngenerator functions are written, but here is the implementation of\n`element()`:\n\n    gen.element(Fail, Index, Tuple, Dst) {\n        BeamOp* op;\n\n        $NewBeamOp(S, op);\n\n        if (Index.type == TAG_i && Index.val > 0 &&\n            Index.val <= ERTS_MAX_TUPLE_SIZE &&\n            (Tuple.type == TAG_x || Tuple.type == TAG_y)) {\n            $BeamOpNameArity(op, i_fast_element, 4);\n            op->a[0] = Tuple;\n            op->a[1] = Fail;\n            op->a[2].type = TAG_u;\n            op->a[2].val = Index.val;\n            op->a[3] = Dst;\n        } else {\n            $BeamOpNameArity(op, i_element, 4);\n            op->a[0] = Tuple;\n            op->a[1] = Fail;\n            op->a[2] = Index;\n            op->a[3] = Dst;\n        }\n\n        return op;\n    }\n\nThe `gen.` prefix tells **beam\\_makeops** that this function is a\ngenerator.  Without the prefix, it would have been interpreted as the\nimplementation of an instruction (described in **Defining the\nimplementation**).\n\nGenerator functions have a magic variabled called `S`, which is a\npointer to a state struct.  In the example, `S` is used in the invocation\nof the `NewBeamOp` macro.","ref":"beam_makeops.html#a-very-brief-note-on-implementation-of-predicates"},{"type":"extras","title":"Defining the implementation - The beam_makeops script","doc":"For the traditional BEAM interpreter, the actual implementation of\ninstructions are also defined in `.tab` files processed by\n**beam\\_makeops**.  See [Code generation for\nBeamAsm](#code-generation-for-beamasm) for a brief introduction to\nhow code generation is done for BeamAsm.\n\nFor practical reasons, instruction definitions are stored in several\nfiles, at the time of writing in the following files (in the\n`beam/emu` directory):\n\n    bif_instrs.tab\n    arith_instrs.tab\n    bs_instrs.tab\n    float_instrs.tab\n    instrs.tab\n    map_instrs.tab\n    msg_instrs.tab\n    select_instrs.tab\n    trace_instrs.tab\n\nThere is also a file that only contains macro definitions:\n\n    macros.tab\n\nThe syntax of each file is similar to C code.  In fact, most of\nthe contents *is* C code, interspersed with macro invocations.\n\nTo allow Emacs to auto-indent the code, each file starts with the\nfollowing line:\n\n    // -*- c -*-\n\nTo avoid messing up the indentation, all comments are written\nas C++ style comments (`//`) instead of `#`.  Note that a comment\nmust start at the beginning of a line.\n\nThe meat of an instruction definition file are macro definitions.\nWe have seen this macro definition before:\n\n    move(Src, Dst) {\n        $Dst = $Src;\n    }\n\nA macro definitions must start at the beginning of the line (no spaces\nallowed), the opening curly bracket must be on the same line, and the\nfinishing curly bracket must be at the beginning of a line.  It is\nrecommended that the macro body is properly indented.\n\nAs a convention, the macro arguments in the head all start with an\nuppercase letter.  In the body, the macro arguments can be expanded\nby preceding them with `$`.\n\nA macro definition whose name and arity matches a family of\nspecific instructions is assumed to be the implementation of that\ninstruction.\n\nA macro can also be invoked from within another macro.  For example,\n`move_deallocate_return/2` avoids repeating code by invoking\n`$deallocate_return()` as a macro:\n\n    move_deallocate_return(Src, Deallocate) {\n        x(0) = $Src;\n        $deallocate_return($Deallocate);\n    }\n\nHere is the definition of `deallocate_return/1`:\n\n    deallocate_return(Deallocate) {\n        //| -no_next\n        int words_to_pop = $Deallocate;\n        SET_I((BeamInstr *) cp_val(*E));\n        E = ADD_BYTE_OFFSET(E, words_to_pop);\n        CHECK_TERM(x(0));\n        DispatchReturn;\n    }\n\nThe expanded code for `move_deallocate_return` will look this:\n\n    OpCase(move_deallocate_return_cQ):\n    {\n      x(0) = I[1];\n      do {\n        int words_to_pop = Qb(BeamExtraData(I[0]));\n        SET_I((BeamInstr *) cp_val(*E));\n        E = ADD_BYTE_OFFSET(E, words_to_pop);\n        CHECK_TERM(x(0));\n        DispatchReturn;\n      } while (0);\n    }\n\nWhen expanding macros, **beam\\_makeops** wraps the expansion in a\n`do`/`while` wrapper unless **beam\\_makeops** can clearly see that no\nwrapper is needed.  In this case, the wrapper is needed.\n\nNote that arguments for macros cannot be complex expressions, because\nthe arguments are split on `,`.  For example, the following would\nnot work because **beam\\_makeops** would split the expression into\ntwo arguments:\n\n    $deallocate_return(get_deallocation(y, $Deallocate));\n\n#### Code generation directives ####\n\nWithin macro definitions, `//` comments are in general not treated\nspecially.  They will be copied to the file with the generated code\nalong with the rest of code in the body.\n\nHowever, there is an exception. Within a macro definition, a line that\nstarts with whitespace followed by `//|` is treated specially.  The\nrest of the line is assumed to contain directives to control code\ngeneration.\n\nCurrently, two code generation directives are recognized:\n\n* `-no_prefetch`\n* `-no_next`\n\n##### The -no_prefetch directive #####\n\nTo see what `-no_prefetch` does, let's first look at the default code\ngeneration.  Here is the code generated for `move_cx`:\n\n    OpCase(move_cx):\n    {\n      BeamInstr next_pf = BeamCodeAddr(I[2]);\n      xb(BeamExtraData(I[0])) = I[1];\n      I += 2;\n      ASSERT(VALID_INSTR(next_pf));\n      GotoPF(next_pf);\n    }\n\nNote that the very first thing done is to fetch the address to the\nnext instruction.  The reason is that it usually improves performance.\n\nJust as a demonstration, we can add a `-no_prefetch` directive to\nthe `move/2` instruction:\n\n    move(Src, Dst) {\n        //| -no_prefetch\n        $Dst = $Src;\n    }\n\nWe can see that the prefetch is no longer done:\n\n    OpCase(move_cx):\n    {\n      xb(BeamExtraData(I[0])) = I[1];\n      I += 2;\n      ASSERT(VALID_INSTR(*I));\n      Goto(*I);\n    }\n\nWhen would we want to turn off the prefetch in practice?\n\nIn instructions that will not always execute the next instruction.\nFor example:\n\n    is_atom(Fail, Src) {\n        if (is_not_atom($Src)) {\n            $FAIL($Fail);\n        }\n    }\n\n    // From macros.tab\n    FAIL(Fail) {\n        //| -no_prefetch\n        $SET_I_REL($Fail);\n        Goto(*I);\n    }\n\n`is_atom/2` may either execute the next instruction (if the second\noperand is an atom) or branch to the failure label.\n\nThe generated code looks like this:\n\n    OpCase(is_atom_fx):\n    {\n      if (is_not_atom(xb(I[1]))) {\n        ASSERT(VALID_INSTR(*(I + (fb(BeamExtraData(I[0]))) + 0)));\n        I += fb(BeamExtraData(I[0])) + 0;;\n        Goto(*I);;\n      }\n      I += 2;\n      ASSERT(VALID_INSTR(*I));\n      Goto(*I);\n    }\n\n##### The -no_next directive #####\n\nNext we will look at when the `-no_next` directive can be used.  Here\nis the `jump/1` instruction:\n\n    jump(Fail) {\n        $JUMP($Fail);\n    }\n\n    // From macros.tab\n    JUMP(Fail) {\n        //| -no_next\n        $SET_I_REL($Fail);\n        Goto(*I);\n    }\n\nThe generated code looks like this:\n\n    OpCase(jump_f):\n    {\n      ASSERT(VALID_INSTR(*(I + (fb(BeamExtraData(I[0]))) + 0)));\n      I += fb(BeamExtraData(I[0])) + 0;;\n      Goto(*I);;\n    }\n\nIf we remove the `-no_next` directive, the code would look like this:\n\n    OpCase(jump_f):\n    {\n      BeamInstr next_pf = BeamCodeAddr(I[1]);\n      ASSERT(VALID_INSTR(*(I + (fb(BeamExtraData(I[0]))) + 0)));\n      I += fb(BeamExtraData(I[0])) + 0;;\n      Goto(*I);;\n      I += 1;\n      ASSERT(VALID_INSTR(next_pf));\n      GotoPF(next_pf);\n    }\n\nIn the end, the C compiler will probably optimize this code to the\nsame native code as the first version, but the first version is certainly\nmuch easier to read for human readers.\n\n#### Macros in the macros.tab file ####\n\nThe file `macros.tab` contains many useful macros.  When implementing\nnew instructions it is good practice to look through `macros.tab` to\nsee if any of existing macros can be used rather than re-inventing\nthe wheel.\n\nWe will describe a few of the most useful macros here.\n\n[](){: #the-GC_REGEXP-definition }\n\n##### The GC_REGEXP definition #####\n\nThe following line defines a regular expression that will recognize\na call to a function that does a garbage collection:\n\n     GC_REGEXP=erts_garbage_collect|erts_gc|GcBifFunction;\n\nThe purpose is that **beam\\_makeops** can verify that an instruction\nthat does a garbage collection and has an `d` operand uses the\n`$REFRESH_GEN_DEST()` macro.\n\nIf you need to define a new function that does garbage collection,\nyou should give it the prefix `erts_gc_`.  If that is not possible\nyou should update the regular expression so that it will match your\nnew function.\n\n##### FAIL(Fail) #####\n\nBranch to `$Fail`.  Will suppress prefetch (`-no_prefetch`).  Typical use:\n\n    is_nonempty_list(Fail, Src) {\n        if (is_not_list($Src)) {\n            $FAIL($Fail);\n        }\n    }\n\n##### JUMP(Fail) #####\n\nBranch to `$Fail`.  Suppresses generation of dispatch of the next\ninstruction (`-no_next`).  Typical use:\n\n    jump(Fail) {\n        $JUMP($Fail);\n    }\n\n##### GC_TEST(NeedStack, NeedHeap, Live) #####\n\n`$GC_TEST(NeedStack, NeedHeap, Live)` tests that given amount of\nstack space and heap space is available.  If not it will do a\ngarbage collection.  Typical use:\n\n    test_heap(Nh, Live) {\n        $GC_TEST(0, $Nh, $Live);\n    }\n\n##### AH(NeedStack, NeedHeap, Live) #####\n\n`AH(NeedStack, NeedHeap, Live)` allocates a stack frame and\noptionally additional heap space.\n\n#### Pre-defined macros and variables ####\n\n**beam\\_makeops** defines several built-in macros and pre-bound variables.\n\n##### The NEXT_INSTRUCTION pre-bound variable #####\n\nThe NEXT\\_INSTRUCTION is a pre-bound variable that is available in\nall instructions.  It expands to the address of the next instruction.\n\nHere is an example:\n\n    i_call(CallDest) {\n        //| -no_next\n        $SAVE_CONTINUATION_POINTER($NEXT_INSTRUCTION);\n        $DISPATCH_REL($CallDest);\n    }\n\nWhen calling a function, the return address is first stored in `E[0]`\n(using the `$SAVE_CONTINUATION_POINTER()` macro), and then control is\ntransferred to the callee.  Here is the generated code:\n\n    OpCase(i_call_f):\n    {\n        ASSERT(VALID_INSTR(*(I+2)));\n        *E = (BeamInstr) (I+2);;\n\n        /* ... dispatch code intentionally left out ... */\n    }\n\nWe can see that that `$NEXT_INSTRUCTION` has been expanded to `I+2`.\nThat makes sense since the size of the `i_call_f/1` instruction is\ntwo words.\n\n##### The IP_ADJUSTMENT pre-bound variable #####\n\n`$IP_ADJUSTMENT` is usually 0.  In a few combined instructions\n(described below) it can be non-zero.  It is used like this\nin `macros.tab`:\n\n    SET_I_REL(Offset) {\n        ASSERT(VALID_INSTR(*(I + ($Offset) + $IP_ADJUSTMENT)));\n        I += $Offset + $IP_ADJUSTMENT;\n    }\n\nAvoid using `IP_ADJUSTMENT` directly.  Use `SET_I_REL()` or\none of the macros that invoke such as `FAIL()` or `JUMP()`\ndefined in `macros.tab`.\n\n#### Pre-defined macro functions ####\n\n##### The IF() macro #####\n\n`$IF(Expr, IfTrue, IfFalse)` evaluates `Expr`, which must be a valid\nPerl expression (which for simple numeric expressions have the same\nsyntax as C).  If `Expr` evaluates to 0, the entire `IF()` expression will be\nreplaced with `IfFalse`, otherwise it will be replaced with `IfTrue`.\n\nSee the description of `OPERAND_POSITION()` for an example.\n\n##### The OPERAND\\_POSITION() macro #####\n\n`$OPERAND_POSITION(Expr)` returns the position for `Expr`, if\n`Expr` is an operand that is not packed.  The first operand is\nat position 1.\n\nReturns 0 otherwise.\n\nThis macro could be used like this in order to share code:\n\n    FAIL(Fail) {\n        //| -no_prefetch\n        $IF($OPERAND_POSITION($Fail) == 1 && $IP_ADJUSTMENT == 0,\n            goto common_jump,\n            $DO_JUMP($Fail));\n    }\n\n    DO_JUMP(Fail) {\n        $SET_I_REL($Fail);\n        Goto(*I));\n    }\n\n    // In beam_emu.c:\n    common_jump:\n       I += I[1];\n       Goto(*I));\n\n\n#### The $REFRESH\\_GEN\\_DEST() macro ####\n\nWhen a specific instruction has a `d` operand, early during execution\nof the instruction, a pointer will be initialized to point to the X or\nY register in question.\n\nIf there is a garbage collection before the result is stored,\nthe stack will move and if the `d` operand referred to a Y\nregister, the pointer will no longer be valid.  (Y registers are\nstored on the stack.)\n\nIn those circumstances, `$REFRESH_GEN_DEST()` must be invoked\nto set up the pointer again. **beam\\_makeops** will notice\nif there is a call to a function that does a garbage collection and\n`$REFRESH_GEN_DEST()` is not called.\n\nHere is a complete example.  The `new_map` instruction is defined\nlike this:\n\n    new_map d t I\n\nIt is implemented like this:\n\n    new_map(Dst, Live, N) {\n        Eterm res;\n\n        HEAVY_SWAPOUT;\n        res = erts_gc_new_map(c_p, reg, $Live, $N, $NEXT_INSTRUCTION);\n        HEAVY_SWAPIN;\n        $REFRESH_GEN_DEST();\n        $Dst = res;\n        $NEXT($NEXT_INSTRUCTION+$N);\n    }\n\nIf we have forgotten the `$REFRESH_GEN_DEST()` there would be a message\nsimilar to this:\n\n    pointer to destination register is invalid after GC -- use $REFRESH_GEN_DEST()\n    ... from the body of new_map at beam/map_instrs.tab(30)\n\n#### Variable number of operands ####\n\nHere follows an example of how to handle an instruction with a variable number\nof operands for the interpreter.  Here is the instruction definition in `emu/ops.tab`:\n\n    put_tuple2 xy I *\n\nFor the interpreter, the `*` is optional, because it does not effect code generation\nin any way. However, it is recommended to include it to make it clear for human readers\nthat there is a variable number of operands.\n\nUse the `$NEXT_INSTRUCTION` macro to obtain a pointer to the first of the variable\noperands.\n\nHere is the implementation:\n\n    put_tuple2(Dst, Arity) {\n\tEterm* hp = HTOP;\n\tEterm arity = $Arity;\n\tEterm* dst_ptr = &($Dst);\n\n\t//| -no_next\n\tASSERT(arity != 0);\n\t*hp++ = make_arityval(arity);\n\n\t/*\n\t * The $NEXT_INSTRUCTION macro points just beyond the fixed\n\t * operands. In this case it points to the descriptor of\n\t * the first element to be put into the tuple.\n\t */\n\tI = $NEXT_INSTRUCTION;\n\tdo {\n\t    Eterm term = *I++;\n\t    switch (loader_tag(term)) {\n\t    case LOADER_X_REG:\n\t\t*hp++ = x(loader_x_reg_index(term));\n\t\tbreak;\n\t    case LOADER_Y_REG:\n\t\t*hp++ = y(loader_y_reg_index(term));\n\t\tbreak;\n\t    default:\n\t\t*hp++ = term;\n\t\tbreak;\n\t    }\n\t} while (--arity != 0);\n\t*dst_ptr = make_tuple(HTOP);\n\tHTOP = hp;\n\tASSERT(VALID_INSTR(* (Eterm *)I));\n\tGoto(*I);\n    }\n\n\n#### Combined instructions ####\n\n**Problem**: For frequently executed instructions we want to use\n\"fast\" operands types such as `x` and `y`, as opposed to `s` or `S`.\nTo avoid an explosion in code size, we want to share most of the\nimplementation between the instructions.  Here are the specific\ninstructions for `i_increment/5`:\n\n    i_increment r W t d\n    i_increment x W t d\n    i_increment y W t d\n\nThe `i_increment` instruction is implemented like this:\n\n    i_increment(Source, IncrementVal, Live, Dst) {\n        Eterm increment_reg_source = $Source;\n        Eterm increment_val = $IncrementVal;\n        Uint live;\n        Eterm result;\n\n        if (ERTS_LIKELY(is_small(increment_reg_val))) {\n            Sint i = signed_val(increment_reg_val) + increment_val;\n            if (ERTS_LIKELY(IS_SSMALL(i))) {\n                $Dst = make_small(i);\n                $NEXT0();\n            }\n        }\n        live = $Live;\n        HEAVY_SWAPOUT;\n        reg[live] = increment_reg_val;\n        reg[live+1] = make_small(increment_val);\n        result = erts_gc_mixed_plus(c_p, reg, live);\n        HEAVY_SWAPIN;\n        ERTS_HOLE_CHECK(c_p);\n        if (ERTS_LIKELY(is_value(result))) {\n            $REFRESH_GEN_DEST();\n            $Dst = result;\n            $NEXT0();\n        }\n        ASSERT(c_p->freason != BADMATCH || is_value(c_p->fvalue));\n        goto find_func_info;\n    }\n\nThere will be three almost identical copies of the code.  Given the\nsize of the code, that could be too high cost to pay.\n\nTo avoid the three copies of the code, we could use only one specific\ninstruction:\n\n    i_increment S W t d\n\n(The same implementation as above will work.)\n\nThat reduces the code size, but is slower because `S` means that\nthere will be extra code to test whether the operand refers to an X\nregister or a Y register.\n\n**Solution**: We can use \"combined instructions\".  Combined\ninstructions are combined from instruction fragments.  The\nbulk of the code can be shared.\n\nHere we will show how `i_increment` can be implemented as a combined\ninstruction.  We will show each individual fragment first, and then\nshow how to connect them together.  First we will need a variable that\nwe can store the value fetched from the register in:\n\n    increment.head() {\n        Eterm increment_reg_val;\n    }\n\nThe name `increment` is the name of the group that the fragment\nbelongs to.  Note that it does not need to have the same\nname as the instruction.  The group name is followed by `.` and\nthe name of the fragment.  The name `head` is pre-defined.\nThe code in it will be placed at the beginning of a block, so\nthat all fragments in the group can access it.\n\nNext we define the fragment that will pick up the value from the\nregister from the first operand:\n\n    increment.fetch(Src) {\n        increment_reg_val = $Src;\n    }\n\nWe call this fragment `fetch`.  This fragment will be duplicated three\ntimes, one for each value of the first operand (`r`, `x`, and `y`).\n\nNext we define the main part of the code that do the actual incrementing.\n\n    increment.execute(IncrementVal, Live, Dst) {\n        Eterm increment_val = $IncrementVal;\n        Uint live;\n        Eterm result;\n\n        if (ERTS_LIKELY(is_small(increment_reg_val))) {\n            Sint i = signed_val(increment_reg_val) + increment_val;\n            if (ERTS_LIKELY(IS_SSMALL(i))) {\n                $Dst = make_small(i);\n                $NEXT0();\n            }\n        }\n        live = $Live;\n        HEAVY_SWAPOUT;\n        reg[live] = increment_reg_val;\n        reg[live+1] = make_small(increment_val);\n        result = erts_gc_mixed_plus(c_p, reg, live);\n        HEAVY_SWAPIN;\n        ERTS_HOLE_CHECK(c_p);\n        if (ERTS_LIKELY(is_value(result))) {\n            $REFRESH_GEN_DEST();\n            $Dst = result;\n            $NEXT0();\n        }\n        ASSERT(c_p->freason != BADMATCH || is_value(c_p->fvalue));\n        goto find_func_info;\n    }\n\nWe call this fragment `execute`.  It will handle the three remaining\noperands (`W t d`).  There will only be one copy of this fragment.\n\nNow that we have defined the fragments, we need to inform\n**beam\\_makeops** how they should be connected:\n\n    i_increment := increment.fetch.execute;\n\nTo the left of the `:=` is the name of the specific instruction that\nshould be implemented by the fragments, in this case `i_increment`.\nTo the right of `:=` is the name of the group with the fragments,\nfollowed by a `.`.  Then the name of the fragments in the group are\nlisted in the order they should be executed.  Note that the `head`\nfragment is not listed.\n\nThe line ends in `;` (to avoid messing up the indentation in Emacs).\n\n(Note that in practice the `:=` line is usually placed before the\nfragments.)\n\nThe generated code looks like this:\n\n    {\n      Eterm increment_reg_val;\n      OpCase(i_increment_rWtd):\n      {\n        increment_reg_val = r(0);\n      }\n      goto increment__execute;\n\n      OpCase(i_increment_xWtd):\n      {\n        increment_reg_val = xb(BeamExtraData(I[0]));\n      }\n      goto increment__execute;\n\n      OpCase(i_increment_yWtd):\n      {\n        increment_reg_val = yb(BeamExtraData(I[0]));\n      }\n      goto increment__execute;\n\n      increment__execute:\n      {\n        // Here follows the code from increment.execute()\n        .\n        .\n        .\n    }\n\n##### Some notes about combined instructions #####\n\nThe operands that are different must be at\nthe beginning of the instruction.  All operands in the last\nfragment must have the same operands in all variants of\nthe specific instruction.\n\nAs an example, the following specific instructions cannot be\nimplemented as a combined instruction:\n\n    i_times j? t x x d\n    i_times j? t x y d\n    i_times j? t s s d\n\nWe would have to change the order of the operands so that the\ntwo operands that are different are placed first:\n\n    i_times x x j? t d\n    i_times x y j? t d\n    i_times s s j? t d\n\nWe can then define:\n\n    i_times := times.fetch.execute;\n\n    times.head {\n        Eterm op1, op2;\n    }\n\n    times.fetch(Src1, Src2) {\n        op1 = $Src1;\n        op2 = $Src2;\n    }\n\n    times.execute(Fail, Live, Dst) {\n        // Multiply op1 and op2.\n        .\n        .\n        .\n    }\n\nSeveral instructions can share a group.  As an example, the following\ninstructions have different names, but in the end they all create a\nbinary.  The last two operands are common for all of them:\n\n    i_bs_init_fail       xy j? t? x\n    i_bs_init_fail_heap s I j? t? x\n    i_bs_init                W t? x\n    i_bs_init_heap         W I t? x\n\nThe instructions are defined like this (formatted with extra\nspaces for clarity):\n\n    i_bs_init_fail_heap := bs_init . fail_heap . verify . execute;\n    i_bs_init_fail      := bs_init . fail      . verify . execute;\n    i_bs_init           := bs_init .           .  plain . execute;\n    i_bs_init_heap      := bs_init .               heap . execute;\n\nNote that the first two instruction have three fragments, while the\nother two only have two fragments.  Here are the fragments:\n\n    bs_init_bits.head() {\n        Eterm num_bits_term;\n        Uint num_bits;\n        Uint alloc;\n    }\n\n    bs_init_bits.plain(NumBits) {\n        num_bits = $NumBits;\n        alloc = 0;\n    }\n\n    bs_init_bits.heap(NumBits, Alloc) {\n        num_bits = $NumBits;\n        alloc = $Alloc;\n    }\n\n    bs_init_bits.fail(NumBitsTerm) {\n        num_bits_term = $NumBitsTerm;\n        alloc = 0;\n    }\n\n    bs_init_bits.fail_heap(NumBitsTerm, Alloc) {\n        num_bits_term = $NumBitsTerm;\n        alloc = $Alloc;\n    }\n\n    bs_init_bits.verify(Fail) {\n        // Verify the num_bits_term, fail using $FAIL\n        // if there is a problem.\n\t.\n\t.\n\t.\n    }\n\n    bs_init_bits.execute(Live, Dst) {\n       // Long complicated code to a create a binary.\n       .\n       .\n       .\n    }\n\nThe full definitions of those instructions can be found in `bs_instrs.tab`.\nThe generated code can be found in `beam_warm.h`.","ref":"beam_makeops.html#defining-the-implementation"},{"type":"extras","title":"Code generation for BeamAsm - The beam_makeops script","doc":"For the BeamAsm runtime system, the implementation of each instruction is defined\nby emitter functions written in C++ that emit the assembly code for each instruction.\nThere is one emitter function for each family of specific instructions.\n\nTake for example the `move` instruction. In `beam/asm/ops.tab` there is a\nsingle specific instruction for `move` defined like this:\n\n    move s d\n\nThe implementation is found in `beam/asm/instr_common.cpp`:\n\n    void BeamModuleAssembler::emit_move(const ArgVal &Src, const ArgVal &Dst) {\n        mov_arg(Dst, Src);\n    }\n\nThe `mov_arg()` helper function will handle all combinations of source and destination\noperands.  For example, the instruction `{move,{x,1},{y,1}}` will be translated like this:\n\n    mov rdi, qword [rbx+8]\n    mov qword [rsp+8], rdi\n\nwhile `{move,{integer,42},{x,0}}` will be translated like this:\n\n    mov qword [rbx], 687\n\nIt is possible to define more than one specific instruction, but there will still be\nonly one emitter function. For example:\n\n    fload S l\n    fload q l\n\nBy defining `fload` like this, the source operand must be a X register, Y register, or\na literal.  If not, the loading will be aborted.  If the instruction instead had been\ndefined like this:\n\n    fload s l\n\nattempting to load an invalid instruction such as `{fload,{atom,clearly_bad},{fr,0}}`\nwould cause a crash (either at load time or when the instruction was executed).\n\nRegardless on how many specific instructions there are in the family,\nonly a single `emit_fload()` function is allowed:\n\n    void BeamModuleAssembler::emit_fload(const ArgVal &Src, const ArgVal &Dst) {\n        .\n        .\n        .\n    }\n\n[](){: #handling-a-variable-number-of-operands }\n\n#### Handling a variable number of operands ####\n\nHere follows an example of how an instruction with a variable number\nof operands could be handled.  One such instructions is\n`select_val/3`. Here is an example how it can look like in BEAM code:\n\n    {select_val,{x,0},\n                {f,1},\n                {list,[{atom,b},{f,4},{atom,a},{f,5}]}}.\n\nThe loader will convert a `{list,[...]}` operand to an `u` operand whose\nvalue is the number of elements in the list, followed by each element in\nthe list.  The instruction above would be translated to the following\ninstruction:\n\n    {select_val,{x,0},{f,1},{u,4},{atom,b},{f,4},{atom,a},{f,5}}\n\nA definition of a specific instruction for that instruction would look\nlike this:\n\n    select_val s f I *\n\nThe `*` as the last operand will make sure that the variable operands\nare passed in as a `Span` of `ArgVal` (will be `std::span` in C++20 onwards).\nHere is the emitter function:\n\n    void BeamModuleAssembler::emit_select_val(const ArgVal &Src,\n                                              const ArgVal &Fail,\n                                              const ArgVal &Size,\n                                              const Span  &args) {\n        ASSERT(Size.getValue() == args.size());\n           .\n           .\n           .\n    }","ref":"beam_makeops.html#code-generation-for-beamasm"}],"proglang":"erlang","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.38.1"}}