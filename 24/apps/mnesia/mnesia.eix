%% 
%% Search data file for mnesia 4.20.4.4
%% generated maj 10, 2024
%% 
{"mnesia.html", {function, {"mnesia", "mnesia"}},
[
  {"abort", "abort(Reason :: term())", "abort-1"},
  {"activate_checkpoint", "activate_checkpoint(Args :: [Arg])", "activate_checkpoint-1"},
  {"activity", "activity(Kind, Fun)", "activity-2"},
  {"activity", "activity(Kind, Fun, Args :: [Arg :: term()], Mod)", "activity-4"},
  {"add_table_copy", "add_table_copy(Tab, N, ST)", "add_table_copy-3"},
  {"add_table_index", "add_table_index(Tab, I)", "add_table_index-2"},
  {"all_keys", "all_keys(Tab :: table())", "all_keys-1"},
  {"async_dirty", "async_dirty(Fun)", "async_dirty-1"},
  {"async_dirty", "async_dirty(Fun, Args :: [Arg :: term()])", "async_dirty-2"},
  {"backup", "backup(Dest :: term())", "backup-1"},
  {"backup", "backup(Dest :: term(), Mod :: module())", "backup-2"},
  {"backup_checkpoint", "backup_checkpoint(Name, Dest)", "backup_checkpoint-2"},
  {"backup_checkpoint", "backup_checkpoint(Name, Dest, Mod)", "backup_checkpoint-3"},
  {"change_config", "change_config(Config, Value)", "change_config-2"},
  {"change_table_access_mode", "change_table_access_mode(Tab :: table(), Mode)", "change_table_access_mode-2"},
  {"change_table_copy_type", "change_table_copy_type(Tab :: table(),Node :: node(),To :: storage_type())", "change_table_copy_type-3"},
  {"change_table_load_order", "change_table_load_order(Tab :: table(), Order)", "change_table_load_order-2"},
  {"change_table_majority", "change_table_majority(Tab :: table(), M :: boolean())", "change_table_majority-2"},
  {"clear_table", "clear_table(Tab :: table())", "clear_table-1"},
  {"create_schema", "create_schema(Ns :: [node()])", "create_schema-1"},
  {"create_table", "create_table(Name :: table(), Arg :: [create_option()])", "create_table-2"},
  {"deactivate_checkpoint", "deactivate_checkpoint(Name :: term())", "deactivate_checkpoint-1"},
  {"del_table_copy", "del_table_copy(Tab :: table(), N :: node())", "del_table_copy-2"},
  {"del_table_index", "del_table_index(Tab, I)", "del_table_index-2"},
  {"delete", "delete(Oid :: {Tab :: table(), Key :: term()})", "delete-1"},
  {"delete", "delete(Tab :: table(), Key :: term(), LockKind :: write_locks())", "delete-3"},
  {"delete_object", "delete_object(Rec :: tuple())", "delete_object-1"},
  {"delete_object", "delete_object(Tab :: table(),Rec :: tuple(),LockKind :: write_locks())", "delete_object-3"},
  {"delete_schema", "delete_schema(Ns :: [node()])", "delete_schema-1"},
  {"delete_table", "delete_table(Tab :: table())", "delete_table-1"},
  {"dirty_all_keys", "dirty_all_keys(Tab :: table())", "dirty_all_keys-1"},
  {"dirty_delete", "dirty_delete(Oid :: {Tab :: table(), Key :: term()})", "dirty_delete-1"},
  {"dirty_delete", "dirty_delete(Tab :: table(), Key :: term())", "dirty_delete-2"},
  {"dirty_delete_object", "dirty_delete_object(Record :: tuple())", "dirty_delete_object-1"},
  {"dirty_delete_object", "dirty_delete_object(Tab :: table(), Record :: tuple())", "dirty_delete_object-2"},
  {"dirty_first", "dirty_first(Tab :: table())", "dirty_first-1"},
  {"dirty_index_match_object", "dirty_index_match_object(Pattern, Attr)", "dirty_index_match_object-2"},
  {"dirty_index_match_object", "dirty_index_match_object(Tab, Pattern, Attr)", "dirty_index_match_object-3"},
  {"dirty_index_read", "dirty_index_read(Tab, Key, Attr)", "dirty_index_read-3"},
  {"dirty_last", "dirty_last(Tab :: table())", "dirty_last-1"},
  {"dirty_match_object", "dirty_match_object(Pattern :: tuple())", "dirty_match_object-1"},
  {"dirty_match_object", "dirty_match_object(Tab, Pattern)", "dirty_match_object-2"},
  {"dirty_next", "dirty_next(Tab :: table(), Key :: term())", "dirty_next-2"},
  {"dirty_prev", "dirty_prev(Tab :: table(), Key :: term())", "dirty_prev-2"},
  {"dirty_read", "dirty_read(Oid :: {Tab :: table(), Key :: term()})", "dirty_read-1"},
  {"dirty_read", "dirty_read(Tab :: table(), Key :: term())", "dirty_read-2"},
  {"dirty_select", "dirty_select(Tab, Spec)", "dirty_select-2"},
  {"dirty_update_counter", "dirty_update_counter(Counter :: {Tab :: table(), Key :: term()},Incr :: integer())", "dirty_update_counter-2"},
  {"dirty_update_counter", "dirty_update_counter(Tab :: table(),Key :: term(),Incr :: integer())", "dirty_update_counter-3"},
  {"dirty_write", "dirty_write(Record :: tuple())", "dirty_write-1"},
  {"dirty_write", "dirty_write(Tab :: table(), Record :: tuple())", "dirty_write-2"},
  {"dump_log", "dump_log()", "dump_log-0"},
  {"dump_tables", "dump_tables(Tabs :: [Tab :: table()])", "dump_tables-1"},
  {"dump_to_textfile", "dump_to_textfile(File :: file:filename())", "dump_to_textfile-1"},
  {"error_description", "error_description(Error :: term())", "error_description-1"},
  {"ets", "ets(Fun)", "ets-1"},
  {"ets", "ets(Fun, Args :: [Arg :: term()])", "ets-2"},
  {"first", "first(Tab :: table())", "first-1"},
  {"foldl", "foldl(Fun, Acc0, Tab :: table())", "foldl-3"},
  {"foldr", "foldr(Fun, Acc0, Tab :: table())", "foldr-3"},
  {"force_load_table", "force_load_table(Tab :: table())", "force_load_table-1"},
  {"index_match_object", "index_match_object(Pattern, Attr)", "index_match_object-2"},
  {"index_match_object", "index_match_object(Tab, Pattern, Attr, LockKind)", "index_match_object-4"},
  {"index_read", "index_read(Tab, Key, Attr)", "index_read-3"},
  {"info", "info()", "info-0"},
  {"install_fallback", "install_fallback(Src :: term())", "install_fallback-1"},
  {"install_fallback", "install_fallback(Src :: term(), Mod :: module() | [Opt])", "install_fallback-2"},
  {"is_transaction", "is_transaction()", "is_transaction-0"},
  {"last", "last(Tab :: table())", "last-1"},
  {"load_textfile", "load_textfile(File :: file:filename())", "load_textfile-1"},
  {"lock", "lock(LockItem, LockKind)", "lock-2"},
  {"match_object", "match_object(Pattern :: tuple())", "match_object-1"},
  {"match_object", "match_object(Tab, Pattern, LockKind)", "match_object-3"},
  {"move_table_copy", "move_table_copy(Tab :: table(), From :: node(), To :: node())", "move_table_copy-3"},
  {"next", "next(Tab :: table(), Key :: term())", "next-2"},
  {"prev", "prev(Tab :: table(), Key :: term())", "prev-2"},
  {"read", "read(Oid :: {Tab :: table(), Key :: term()})", "read-1"},
  {"read", "read(Tab :: table(), Key :: term())", "read-2"},
  {"read", "read(Tab :: table(), Key :: term(), LockKind :: lock_kind())", "read-3"},
  {"read_lock_table", "read_lock_table(Tab :: table())", "read_lock_table-1"},
  {"report_event", "report_event(Event :: term())", "report_event-1"},
  {"restore", "restore(Src :: term(), Args :: [Arg])", "restore-2"},
  {"s_delete", "s_delete(Oid :: {Tab :: table(), Key :: term()})", "s_delete-1"},
  {"s_delete_object", "s_delete_object(Rec :: tuple())", "s_delete_object-1"},
  {"s_write", "s_write(Record :: tuple())", "s_write-1"},
  {"schema", "schema()", "schema-0"},
  {"schema", "schema(Tab :: table())", "schema-1"},
  {"select", "select(Tab, Spec)", "select-2"},
  {"select", "select(Tab, Spec, LockKind)", "select-3"},
  {"select", "select(Tab, Spec, N, LockKind)", "select-4"},
  {"select", "select(Cont)", "select-1"},
  {"set_debug_level", "set_debug_level(Level :: debug_level())", "set_debug_level-1"},
  {"set_master_nodes", "set_master_nodes(Ns :: [node()])", "set_master_nodes-1"},
  {"set_master_nodes", "set_master_nodes(Tab :: table(), Ns :: [node()])", "set_master_nodes-2"},
  {"snmp_close_table", "snmp_close_table(Tab :: table())", "snmp_close_table-1"},
  {"snmp_get_mnesia_key", "snmp_get_mnesia_key(Tab :: table(), RowIndex :: [integer()])", "snmp_get_mnesia_key-2"},
  {"snmp_get_next_index", "snmp_get_next_index(Tab :: table(), RowIndex :: [integer()])", "snmp_get_next_index-2"},
  {"snmp_get_row", "snmp_get_row(Tab :: table(), RowIndex :: [integer()])", "snmp_get_row-2"},
  {"snmp_open_table", "snmp_open_table(Tab :: table(), Snmp :: snmp_struct())", "snmp_open_table-2"},
  {"start", "start()", "start-0"},
  {"stop", "stop()", "stop-0"},
  {"subscribe", "subscribe(What)", "subscribe-1"},
  {"sync_dirty", "sync_dirty(Fun)", "sync_dirty-1"},
  {"sync_dirty", "sync_dirty(Fun, Args :: [Arg :: term()])", "sync_dirty-2"},
  {"sync_log", "sync_log()", "sync_log-0"},
  {"sync_transaction", "sync_transaction(Fun)", "sync_transaction-1"},
  {"sync_transaction", "sync_transaction(Fun, Retries)", "sync_transaction-2"},
  {"sync_transaction", "sync_transaction(Fun, Args :: [Arg :: term()])", "sync_transaction-2"},
  {"sync_transaction", "sync_transaction(Fun, Args :: [Arg :: term()], Retries)", "sync_transaction-3"},
  {"system_info", "system_info(Iterm :: term())", "system_info-1"},
  {"table", "table(Tab :: table())", "table-1"},
  {"table", "table(Tab :: table(), Options)", "table-2"},
  {"table_info", "table_info(Tab :: table(), Item :: term())", "table_info-2"},
  {"transaction", "transaction(Fun)", "transaction-1"},
  {"transaction", "transaction(Fun, Retries)", "transaction-2"},
  {"transaction", "transaction(Fun, Args :: [Arg :: term()])", "transaction-2"},
  {"transaction", "transaction(Fun, Args :: [Arg :: term()], Retries)", "transaction-3"},
  {"transform_table", "transform_table(Tab :: table(), Fun, NewA :: [Attr], RecName)", "transform_table-4"},
  {"transform_table", "transform_table(Tab :: table(), Fun, NewA :: [Attr])", "transform_table-3"},
  {"traverse_backup", "traverse_backup(Src :: term(), Dest :: term(), Fun, Acc)", "traverse_backup-4"},
  {"traverse_backup", "traverse_backup(Src :: term(),SrcMod :: module(),Dest :: term(),DestMod :: module(),Fun, Acc)", "traverse_backup-6"},
  {"uninstall_fallback", "uninstall_fallback()", "uninstall_fallback-0"},
  {"uninstall_fallback", "uninstall_fallback(Args)", "uninstall_fallback-1"},
  {"unsubscribe", "unsubscribe(What)", "unsubscribe-1"},
  {"wait_for_tables", "wait_for_tables(Tabs :: [Tab :: table()], TMO :: timeout())", "wait_for_tables-2"},
  {"wread", "wread(Oid :: {Tab :: table(), Key :: term()})", "wread-1"},
  {"write", "write(Record :: tuple())", "write-1"},
  {"write", "write(Tab :: table(),Record :: tuple(),LockKind :: write_locks())", "write-3"},
  {"write_lock_table", "write_lock_table(Tab :: table())", "write_lock_table-1"}
]}.
{"mnesia.html", {module, "mnesia"}, ["mnesia"]}.
{"mnesia_frag_hash.html", {function, {"mnesia", "mnesia_frag_hash"}},
[
  {"init_state", "init_state(Tab, State)", "init_state-2"},
  {"add_frag", "add_frag(State)", "add_frag-1"},
  {"del_frag", "del_frag(State)", "del_frag-1"},
  {"key_to_frag_number", "key_to_frag_number(State, Key)", "key_to_frag_number-2"},
  {"match_spec_to_frag_numbers", "match_spec_to_frag_numbers(State, MatchSpec)", "match_spec_to_frag_numbers-2"}
]}.
{"mnesia_frag_hash.html", {module, "mnesia"}, ["mnesia_frag_hash"]}.
{"mnesia_registry.html", {function, {"mnesia", "mnesia_registry"}},
[
  {"create_table", "create_table(Tab)", "create_table-1"},
  {"create_table", "create_table(Tab, TabDef)", "create_table-2"}
]}.
{"mnesia_registry.html", {module, "mnesia"}, ["mnesia_registry"]}.
{notused, application, ["mnesia"]}.
