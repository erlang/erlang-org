%% 
%% Search data file for erl_interface 5.2.2.1
%% generated maj 10, 2024
%% 
{"ei.html", {function, {"erl_interface", "ei"}}, [
  {"ei_cmp_pids", "ei_cmp_pids(erlang_pid *a, erlang_pid *b)", "ei_cmp_pids"},
  {"ei_cmp_ports", "ei_cmp_ports(erlang_port *a, erlang_port *b)", "ei_cmp_ports"},
  {"ei_cmp_refs", "ei_cmp_refs(erlang_ref *a, erlang_ref *b)", "ei_cmp_refs"},
  {"ei_decode_atom", "ei_decode_atom(const char *buf, int *index, char *p)", "ei_decode_atom"},
  {"ei_decode_atom_as", "ei_decode_atom_as(const char *buf, int *index, char *p, int plen, erlang_char_encoding want, erlang_char_encoding* was, erlang_char_encoding* result)", "ei_decode_atom_as"},
  {"ei_decode_bignum", "ei_decode_bignum(const char *buf, int *index, mpz_t obj)", "ei_decode_bignum"},
  {"ei_decode_binary", "ei_decode_binary(const char *buf, int *index, void *p, long *len)", "ei_decode_binary"},
  {"ei_decode_bitstring", "ei_decode_bitstring(const char *buf, int *index, const char **pp, unsigned int *bitoffsp, size_t *nbitsp)", "ei_decode_bitstring"},
  {"ei_decode_boolean", "ei_decode_boolean(const char *buf, int *index, int *p)", "ei_decode_boolean"},
  {"ei_decode_char", "ei_decode_char(const char *buf, int *index, char *p)", "ei_decode_char"},
  {"ei_decode_double", "ei_decode_double(const char *buf, int *index, double *p)", "ei_decode_double"},
  {"ei_decode_ei_term", "ei_decode_ei_term(const char* buf, int* index, ei_term* term)", "ei_decode_ei_term"},
  {"ei_decode_fun", "ei_decode_fun(const char *buf, int *index, erlang_fun *p)", "ei_decode_fun"},
  {"free_fun", "free_fun(erlang_fun* f)", "free_fun"},
  {"ei_decode_iodata", "ei_decode_iodata(const char *buf, int *index, int *size, char *outbuf)", "ei_decode_iodata"},
  {"ei_decode_list_header", "ei_decode_list_header(const char *buf, int *index, int *arity)", "ei_decode_list_header"},
  {"ei_decode_long", "ei_decode_long(const char *buf, int *index, long *p)", "ei_decode_long"},
  {"ei_decode_longlong", "ei_decode_longlong(const char *buf, int *index, long long *p)", "ei_decode_longlong"},
  {"ei_decode_map_header", "ei_decode_map_header(const char *buf, int *index, int *arity)", "ei_decode_map_header"},
  {"ei_decode_pid", "ei_decode_pid(const char *buf, int *index, erlang_pid *p)", "ei_decode_pid"},
  {"ei_decode_port", "ei_decode_port(const char *buf, int *index, erlang_port *p)", "ei_decode_port"},
  {"ei_decode_ref", "ei_decode_ref(const char *buf, int *index, erlang_ref *p)", "ei_decode_ref"},
  {"ei_decode_string", "ei_decode_string(const char *buf, int *index, char *p)", "ei_decode_string"},
  {"ei_decode_trace", "ei_decode_trace(const char *buf, int *index, erlang_trace *p)", "ei_decode_trace"},
  {"ei_decode_tuple_header", "ei_decode_tuple_header(const char *buf, int *index, int *arity)", "ei_decode_tuple_header"},
  {"ei_decode_ulong", "ei_decode_ulong(const char *buf, int *index, unsigned long *p)", "ei_decode_ulong"},
  {"ei_decode_ulonglong", "ei_decode_ulonglong(const char *buf, int *index, unsigned long long *p)", "ei_decode_ulonglong"},
  {"ei_decode_version", "ei_decode_version(const char *buf, int *index, int *version)", "ei_decode_version"},
  {"ei_encode_atom", "ei_encode_atom(char *buf, int *index, const char *p)", "ei_encode_atom"},
  {"ei_encode_atom_len", "ei_encode_atom_len(char *buf, int *index, const char *p, int len)", "ei_encode_atom_len"},
  {"ei_x_encode_atom", "ei_x_encode_atom(ei_x_buff* x, const char *p)", "ei_x_encode_atom"},
  {"ei_x_encode_atom_len", "ei_x_encode_atom_len(ei_x_buff* x, const char *p, int len)", "ei_x_encode_atom_len"},
  {"ei_encode_atom_as", "ei_encode_atom_as(char *buf, int *index, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)", "ei_encode_atom_as"},
  {"ei_encode_atom_len_as", "ei_encode_atom_len_as(char *buf, int *index, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)", "ei_encode_atom_len_as"},
  {"ei_x_encode_atom_as", "ei_x_encode_atom_as(ei_x_buff* x, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)", "ei_x_encode_atom_as"},
  {"ei_x_encode_atom_len_as", "ei_x_encode_atom_len_as(ei_x_buff* x, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)", "ei_x_encode_atom_len_as"},
  {"ei_encode_bignum", "ei_encode_bignum(char *buf, int *index, mpz_t obj)", "ei_encode_bignum"},
  {"ei_x_encode_bignum", "ei_x_encode_bignum(ei_x_buff *x, mpz_t obj)", "ei_x_encode_bignum"},
  {"ei_encode_binary", "ei_encode_binary(char *buf, int *index, const void *p, long len)", "ei_encode_binary"},
  {"ei_x_encode_binary", "ei_x_encode_binary(ei_x_buff* x, const void *p, long len)", "ei_x_encode_binary"},
  {"ei_encode_bitstring", "ei_encode_bitstring(char *buf, int *index, const char *p, size_t bitoffs, size_t nbits)", "ei_encode_bitstring"},
  {"ei_x_encode_bitstring", "ei_x_encode_bitstring(ei_x_buff* x, const char *p, size_t bitoffs, size_t nbits)", "ei_x_encode_bitstring"},
  {"ei_encode_boolean", "ei_encode_boolean(char *buf, int *index, int p)", "ei_encode_boolean"},
  {"ei_x_encode_boolean", "ei_x_encode_boolean(ei_x_buff* x, int p)", "ei_x_encode_boolean"},
  {"ei_encode_char", "ei_encode_char(char *buf, int *index, char p)", "ei_encode_char"},
  {"ei_x_encode_char", "ei_x_encode_char(ei_x_buff* x, char p)", "ei_x_encode_char"},
  {"ei_encode_double", "ei_encode_double(char *buf, int *index, double p)", "ei_encode_double"},
  {"ei_x_encode_double", "ei_x_encode_double(ei_x_buff* x, double p)", "ei_x_encode_double"},
  {"ei_encode_empty_list", "ei_encode_empty_list(char* buf, int* index)", "ei_encode_empty_list"},
  {"ei_x_encode_empty_list", "ei_x_encode_empty_list(ei_x_buff* x)", "ei_x_encode_empty_list"},
  {"ei_encode_fun", "ei_encode_fun(char *buf, int *index, const erlang_fun *p)", "ei_encode_fun"},
  {"ei_x_encode_fun", "ei_x_encode_fun(ei_x_buff* x, const erlang_fun* fun)", "ei_x_encode_fun"},
  {"ei_encode_list_header", "ei_encode_list_header(char *buf, int *index, int arity)", "ei_encode_list_header"},
  {"ei_x_encode_list_header", "ei_x_encode_list_header(ei_x_buff* x, int arity)", "ei_x_encode_list_header"},
  {"ei_encode_long", "ei_encode_long(char *buf, int *index, long p)", "ei_encode_long"},
  {"ei_x_encode_long", "ei_x_encode_long(ei_x_buff* x, long p)", "ei_x_encode_long"},
  {"ei_encode_longlong", "ei_encode_longlong(char *buf, int *index, long long p)", "ei_encode_longlong"},
  {"ei_x_encode_longlong", "ei_x_encode_longlong(ei_x_buff* x, long long p)", "ei_x_encode_longlong"},
  {"ei_encode_map_header", "ei_encode_map_header(char *buf, int *index, int arity)", "ei_encode_map_header"},
  {"ei_x_encode_map_header", "ei_x_encode_map_header(ei_x_buff* x, int arity)", "ei_x_encode_map_header"},
  {"ei_encode_pid", "ei_encode_pid(char *buf, int *index, const erlang_pid *p)", "ei_encode_pid"},
  {"ei_x_encode_pid", "ei_x_encode_pid(ei_x_buff* x, const erlang_pid *p)", "ei_x_encode_pid"},
  {"ei_encode_port", "ei_encode_port(char *buf, int *index, const erlang_port *p)", "ei_encode_port"},
  {"ei_x_encode_port", "ei_x_encode_port(ei_x_buff* x, const erlang_port *p)", "ei_x_encode_port"},
  {"ei_encode_ref", "ei_encode_ref(char *buf, int *index, const erlang_ref *p)", "ei_encode_ref"},
  {"ei_x_encode_ref", "ei_x_encode_ref(ei_x_buff* x, const erlang_ref *p)", "ei_x_encode_ref"},
  {"ei_encode_string", "ei_encode_string(char *buf, int *index, const char *p)", "ei_encode_string"},
  {"ei_encode_string_len", "ei_encode_string_len(char *buf, int *index, const char *p, int len)", "ei_encode_string_len"},
  {"ei_x_encode_string", "ei_x_encode_string(ei_x_buff* x, const char *p)", "ei_x_encode_string"},
  {"ei_x_encode_string_len", "ei_x_encode_string_len(ei_x_buff* x, const char* s, int len)", "ei_x_encode_string_len"},
  {"ei_encode_trace", "ei_encode_trace(char *buf, int *index, const erlang_trace *p)", "ei_encode_trace"},
  {"ei_x_encode_trace", "ei_x_encode_trace(ei_x_buff* x, const erlang_trace *p)", "ei_x_encode_trace"},
  {"ei_encode_tuple_header", "ei_encode_tuple_header(char *buf, int *index, int arity)", "ei_encode_tuple_header"},
  {"ei_x_encode_tuple_header", "ei_x_encode_tuple_header(ei_x_buff* x, int arity)", "ei_x_encode_tuple_header"},
  {"ei_encode_ulong", "ei_encode_ulong(char *buf, int *index, unsigned long p)", "ei_encode_ulong"},
  {"ei_x_encode_ulong", "ei_x_encode_ulong(ei_x_buff* x, unsigned long p)", "ei_x_encode_ulong"},
  {"ei_encode_ulonglong", "ei_encode_ulonglong(char *buf, int *index, unsigned long long p)", "ei_encode_ulonglong"},
  {"ei_x_encode_ulonglong", "ei_x_encode_ulonglong(ei_x_buff* x, unsigned long long p)", "ei_x_encode_ulonglong"},
  {"ei_encode_version", "ei_encode_version(char *buf, int *index)", "ei_encode_version"},
  {"ei_x_encode_version", "ei_x_encode_version(ei_x_buff* x)", "ei_x_encode_version"},
  {"ei_get_type", "ei_get_type(const char *buf, const int *index, int *type, int *size)", "ei_get_type"},
  {"ei_init", "ei_init(void)", "ei_init"},
  {"ei_print_term", "ei_print_term(FILE* fp, const char* buf, int* index)", "ei_print_term"},
  {"ei_s_print_term", "ei_s_print_term(char** s, const char* buf, int* index)", "ei_s_print_term"},
  {"ei_set_compat_rel", "ei_set_compat_rel(unsigned release_number)", "ei_set_compat_rel"},
  {"ei_skip_term", "ei_skip_term(const char* buf, int* index)", "ei_skip_term"},
  {"ei_x_append", "ei_x_append(ei_x_buff* x, const ei_x_buff* x2)", "ei_x_append"},
  {"ei_x_append_buf", "ei_x_append_buf(ei_x_buff* x, const char* buf, int len)", "ei_x_append_buf"},
  {"ei_x_format", "ei_x_format(ei_x_buff* x, const char* fmt, ...)", "ei_x_format"},
  {"ei_x_format_wo_ver", "ei_x_format_wo_ver(ei_x_buff* x, const char *fmt, ... )", "ei_x_format_wo_ver"},
  {"ei_x_free", "ei_x_free(ei_x_buff* x)", "ei_x_free"},
  {"ei_x_new", "ei_x_new(ei_x_buff* x)", "ei_x_new"},
  {"ei_x_new_with_version", "ei_x_new_with_version(ei_x_buff* x)", "ei_x_new_with_version"}
]}.
{"ei.html", {clib, "erl_interface"}, ["ei"]}.
{"ei_connect.html", {function, {"erl_interface", "ei_connect"}}, [
  {"ei_gethostbyaddr", "ei_gethostbyaddr(const char *addr, int len, int type)", "ei_gethostbyaddr"},
  {"ei_gethostbyaddr_r", "ei_gethostbyaddr_r(const char *addr, int length, int type, struct hostent *hostp, char *buffer, int buflen, int *h_errnop)", "ei_gethostbyaddr_r"},
  {"ei_gethostbyname", "ei_gethostbyname(const char *name)", "ei_gethostbyname"},
  {"ei_gethostbyname_r", "ei_gethostbyname_r(const char *name, struct hostent *hostp, char *buffer, int buflen, int *h_errnop)", "ei_gethostbyname_r"},
  {"ei_accept", "ei_accept(ei_cnode *ec, int listensock, ErlConnect *conp)", "ei_accept"},
  {"ei_accept_tmo", "ei_accept_tmo(ei_cnode *ec, int listensock, ErlConnect *conp, unsigned timeout_ms)", "ei_accept_tmo"},
  {"ei_close_connection", "ei_close_connection(int fd)", "ei_close_connection"},
  {"ei_connect", "ei_connect(ei_cnode* ec, char *nodename)", "ei_connect"},
  {"ei_xconnect", "ei_xconnect(ei_cnode* ec, Erl_IpAddr adr, char *alivename)", "ei_xconnect"},
  {"ei_connect_host_port", "ei_connect_host_port(ei_cnode* ec, char *hostname, int port)", "ei_connect_host_port"},
  {"ei_xconnect_host_port", "ei_xconnect_host_port(ei_cnode* ec, Erl_IpAddr adr, int port)", "ei_xconnect_host_port"},
  {"ei_connect_init", "ei_connect_init(ei_cnode* ec, const char* this_node_name, const char *cookie, short creation)", "ei_connect_init"},
  {"ei_connect_init_ussi", "ei_connect_init_ussi(ei_cnode* ec, const char* this_node_name, const char *cookie, short creation, ei_socket_callbacks *cbs, int cbs_sz, void *setup_context)", "ei_connect_init_ussi"},
  {"ei_connect_xinit", "ei_connect_xinit(ei_cnode* ec, const char *thishostname, const char *thisalivename, const char *thisnodename, Erl_IpAddr thisipaddr, const char *cookie, short creation)", "ei_connect_xinit"},
  {"ei_connect_xinit_ussi", "ei_connect_xinit_ussi(ei_cnode* ec, const char *thishostname, const char *thisalivename, const char *thisnodename, Erl_IpAddr thisipaddr, const char *cookie, short creation, ei_socket_callbacks *cbs, int cbs_sz, void *setup_context)", "ei_connect_xinit_ussi"},
  {"ei_connect_tmo", "ei_connect_tmo(ei_cnode* ec, char *nodename, unsigned timeout_ms)", "ei_connect_tmo"},
  {"ei_xconnect_tmo", "ei_xconnect_tmo(ei_cnode* ec, Erl_IpAddr adr, char *alivename, unsigned timeout_ms)", "ei_xconnect_tmo"},
  {"ei_connect_host_port_tmo", "ei_connect_host_port_tmo(ei_cnode* ec, char *hostname, int port, unsigned ms)", "ei_connect_host_port_tmo"},
  {"ei_xconnect_host_port_tmo", "ei_xconnect_host_port_tmo(ei_cnode* ec, Erl_IpAddr adr, int port, unsigned ms)", "ei_xconnect_host_port_tmo"},
  {"ei_get_tracelevel", "ei_get_tracelevel(void)", "ei_get_tracelevel"},
  {"ei_set_tracelevel", "ei_set_tracelevel(int level)", "ei_set_tracelevel"},
  {"ei_listen", "ei_listen(ei_cnode *ec, int *port, int backlog)", "ei_listen"},
  {"ei_xlisten", "ei_xlisten(ei_cnode *ec, Erl_IpAddr adr, int *port, int backlog)", "ei_xlisten"},
  {"ei_make_pid", "ei_make_pid(ei_cnode *ec, erlang_pid *pid)", "ei_make_pid"},
  {"ei_make_ref", "ei_make_ref(ei_cnode *ec, erlang_ref *ref)", "ei_make_ref"},
  {"ei_publish", "ei_publish(ei_cnode *ec, int port)", "ei_publish"},
  {"ei_publish_tmo", "ei_publish_tmo(ei_cnode *ec, int port, unsigned timeout_ms)", "ei_publish_tmo"},
  {"ei_receive", "ei_receive(int fd, unsigned char* bufp, int bufsize)", "ei_receive"},
  {"ei_receive_encoded", "ei_receive_encoded(int fd, char **mbufp, int *bufsz, erlang_msg *msg, int *msglen)", "ei_receive_encoded"},
  {"ei_receive_encoded_tmo", "ei_receive_encoded_tmo(int fd, char **mbufp, int *bufsz, erlang_msg *msg, int *msglen, unsigned timeout_ms)", "ei_receive_encoded_tmo"},
  {"ei_receive_msg", "ei_receive_msg(int fd, erlang_msg* msg, ei_x_buff* x)", "ei_receive_msg"},
  {"ei_xreceive_msg", "ei_xreceive_msg(int fd, erlang_msg* msg, ei_x_buff* x)", "ei_xreceive_msg"},
  {"ei_receive_msg_tmo", "ei_receive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned imeout_ms)", "ei_receive_msg_tmo"},
  {"ei_xreceive_msg_tmo", "ei_xreceive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned timeout_ms)", "ei_xreceive_msg_tmo"},
  {"ei_receive_tmo", "ei_receive_tmo(int fd, unsigned char* bufp, int bufsize, unsigned timeout_ms)", "ei_receive_tmo"},
  {"ei_reg_send", "ei_reg_send(ei_cnode* ec, int fd, char* server_name, char* buf, int len)", "ei_reg_send"},
  {"ei_reg_send_tmo", "ei_reg_send_tmo(ei_cnode* ec, int fd, char* server_name, char* buf, int len, unsigned timeout_ms)", "ei_reg_send_tmo"},
  {"ei_rpc", "ei_rpc(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen, ei_x_buff *x)", "ei_rpc"},
  {"ei_rpc_to", "ei_rpc_to(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen)", "ei_rpc_to"},
  {"ei_xrpc_to", "ei_xrpc_to(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen, int flags)", "ei_xrpc_to"},
  {"ei_rpc_from", "ei_rpc_from(ei_cnode *ec, int fd, int timeout, erlang_msg *msg, ei_x_buff *x)", "ei_rpc_from"},
  {"ei_self", "ei_self(ei_cnode *ec)", "ei_self"},
  {"ei_send", "ei_send(int fd, erlang_pid* to, char* buf, int len)", "ei_send"},
  {"ei_send_encoded", "ei_send_encoded(int fd, erlang_pid* to, char* buf, int len)", "ei_send_encoded"},
  {"ei_send_encoded_tmo", "ei_send_encoded_tmo(int fd, erlang_pid* to, char* buf, int len, unsigned timeout_ms)", "ei_send_encoded_tmo"},
  {"ei_send_reg_encoded", "ei_send_reg_encoded(int fd, const erlang_pid *from, const char *to, const char *buf, int len)", "ei_send_reg_encoded"},
  {"ei_send_reg_encoded_tmo", "ei_send_reg_encoded_tmo(int fd, const erlang_pid *from, const char *to, const char *buf, int len, unsigned timeout_ms)", "ei_send_reg_encoded_tmo"},
  {"ei_send_tmo", "ei_send_tmo(int fd, erlang_pid* to, char* buf, int len, unsigned timeout_ms)", "ei_send_tmo"},
  {"ei_thisnodename", "ei_thisnodename(ei_cnode *ec)", "ei_thisnodename"},
  {"ei_thishostname", "ei_thishostname(ei_cnode *ec)", "ei_thishostname"},
  {"ei_thisalivename", "ei_thisalivename(ei_cnode *ec)", "ei_thisalivename"},
  {"ei_unpublish", "ei_unpublish(ei_cnode *ec)", "ei_unpublish"},
  {"ei_unpublish_tmo", "ei_unpublish_tmo(ei_cnode *ec, unsigned timeout_ms)", "ei_unpublish_tmo"}
]}.
{"ei_connect.html", {clib, "erl_interface"}, ["ei_connect"]}.
{"ei_global.html", {function, {"erl_interface", "ei_global"}}, [
  {"ei_global_names", "ei_global_names(ec,fd,count)", "ei_global_names"},
  {"ei_global_register", "ei_global_register(fd,name,pid)", "ei_global_register"},
  {"ei_global_unregister", "ei_global_unregister(ec,fd,name)", "ei_global_unregister"},
  {"ei_global_whereis", "ei_global_whereis(ec,fd,name,pid,node)", "ei_global_whereis"}
]}.
{"ei_global.html", {clib, "erl_interface"}, ["ei_global"]}.
{"erl_call.html", {command, "erl_interface"}, ["erl_call"]}.
{notused, application, ["erl_interface"]}.
