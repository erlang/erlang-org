searchData={"items":[{"type":"module","title":"erl_tar","doc":"Unix 'tar' utility for reading and writing tar archives.\n\nThis module archives and extract files to and from a tar file. This module\nsupports reading most common tar formats, namely v7, STAR, USTAR, and PAX, as\nwell as some of GNU tar's extensions to the USTAR format (sparse files most\nnotably). It produces tar archives in USTAR format, unless the files being\narchived require PAX format due to restrictions in USTAR (such as unicode\nmetadata, filename length, and more). As such, `erl_tar` supports tar archives\nproduced by most all modern tar utilities, and produces tarballs which should be\nsimilarly portable.\n\nBy convention, the name of a tar file is to end in \"`.tar`\". To abide to the\nconvention, add \"`.tar`\" to the name.\n\nTar files can be created in one operation using function `create/2` or\n`create/3`.\n\nAlternatively, for more control, use functions `open/2`, [`add/3,4`](`add/3`),\nand `close/1`.\n\nTo extract all files from a tar file, use function `extract/1`. To extract only\nsome files or to be able to specify some more options, use function `extract/2`.\n\nTo return a list of the files in a tar file, use function `table/1` or\n`table/2`. To print a list of files to the Erlang shell, use function `t/1` or\n`tt/1`.\n\nTo convert an error term returned from one of the functions above to a readable\nmessage, use function `format_error/1`.","ref":"erl_tar.html"},{"type":"module","title":"Unicode Support - erl_tar","doc":"If `file:native_name_encoding/0` returns `utf8`, path names are encoded in UTF-8\nwhen creating tar files, and path names are assumed to be encoded in UTF-8 when\nextracting tar files.\n\nIf `file:native_name_encoding/0` returns `latin1`, no translation of path names\nis done.\n\nUnicode metadata stored in PAX headers is preserved","ref":"erl_tar.html#module-unicode-support"},{"type":"module","title":"Other Storage Media - erl_tar","doc":"The `m:ftp` module normally accesses the tar file on disk using the `m:file`\nmodule. When other needs arise, you can define your own low-level Erlang\nfunctions to perform the writing and reading on the storage media; use function\n`init/3`.\n\nAn example of this is the SFTP support in `ssh_sftp:open_tar/3`. This function\nopens a tar file on a remote machine using an SFTP channel.","ref":"erl_tar.html#module-other-storage-media"},{"type":"module","title":"Limitations - erl_tar","doc":"- If you must remain compatible with the USTAR tar format, you must ensure file\n  paths being stored are less than 255 bytes in total, with a maximum filename\n  component length of 100 bytes. USTAR uses a header field (prefix) in addition\n  to the name field, and splits file paths longer than 100 bytes into two parts.\n  This split is done on a directory boundary, and is done in such a way to make\n  the best use of the space available in those two fields, but in practice this\n  will often mean that you have less than 255 bytes for a path. `erl_tar` will\n  automatically upgrade the format to PAX to handle longer filenames, so this is\n  only an issue if you need to extract the archive with an older implementation\n  of `erl_tar` or `tar` which does not support PAX. In this case, the PAX\n  headers will be extracted as regular files, and you will need to apply them\n  manually.\n- Like the above, if you must remain USTAR compatible, you must also ensure than\n  paths for symbolic/hard links are no more than 100 bytes, otherwise PAX\n  headers will be used.","ref":"erl_tar.html#module-limitations"},{"type":"function","title":"erl_tar.add/3","doc":"Equivalent to `add/4`.\n\nIf `Name` is `t:name_in_archive/0`, then [`add(TarDescriptor, Name, Name, Options)`](`add/4`) is called.\n\nIf `Name` is a two tuple then [`add(TarDescriptor, NameInArchive, Name, Options)`](`add/4`) is called.","ref":"erl_tar.html#add/3"},{"type":"function","title":"erl_tar.add/4","doc":"Adds a file to a tar file that has been opened for writing by\n[`open/1`](`open/2`).\n\n`NameInArchive` is the name under which the file becomes stored in the tar file.\nThe file gets this name when it is extracted from the tar file.\n\nOptions:\n\n- **`dereference`** - By default, symbolic links are stored as symbolic links in\n  the tar file. To override the default and store the file that the symbolic\n  link points to into the tar file, use option `dereference`.\n\n- **`verbose`** - Prints an informational message about the added file.\n\n- **`{chunks,ChunkSize}`** - Reads data in parts from the file. This is intended\n  for memory-limited machines that, for example, builds a tar file on a remote\n  machine over SFTP, see `ssh_sftp:open_tar/3`.\n\n- **`{atime,non_neg_integer()}`** - Sets the last time, as\n  [POSIX time](`e:erts:time_correction.md#posix-time`), when the file was read.\n  See also `file:read_file_info/1`.\n\n- **`{mtime,non_neg_integer()}`** - Sets the last time, as\n  [POSIX time](`e:erts:time_correction.md#posix-time`), when the file was\n  written. See also `file:read_file_info/1`.\n\n- **`{ctime,non_neg_integer()}`** - Sets the time, as\n  [POSIX time](`e:erts:time_correction.md#posix-time`), when the file was\n  created. See also `file:read_file_info/1`.\n\n- **`{uid,non_neg_integer()}`** - Sets the file owner. `file:read_file_info/1`.\n\n- **`{gid,non_neg_integer()}`** - Sets the group that the file owner belongs to.\n  `file:read_file_info/1`.","ref":"erl_tar.html#add/4"},{"type":"type","title":"erl_tar.add_opt/0","doc":"","ref":"erl_tar.html#t:add_opt/0"},{"type":"function","title":"erl_tar.close/1","doc":"Closes a tar file opened by `open/2`.","ref":"erl_tar.html#close/1"},{"type":"function","title":"erl_tar.create/2","doc":"Creates a tar file and archives the files whose names are specified in\n`FileList` into it. The files can either be read from disk or be specified as\nbinaries.","ref":"erl_tar.html#create/2"},{"type":"function","title":"erl_tar.create/3","doc":"Creates a tar file and archives the files whose names are specified in\n`FileList` into it. The files can either be read from disk or be specified as\nbinaries.\n\nThe options in `OptionList` modify the defaults as follows:\n\n- **`compressed`** - The entire tar file is compressed, as if it has been run\n  through the `gzip` program. To abide to the convention that a compressed tar\n  file is to end in \"`.tar.gz`\" or \"`.tgz`\", add the appropriate extension.\n\n- **`cooked`** - By default, function [`open/2`](`open/2`) opens the tar file in\n  `raw` mode, which is faster but does not allow a remote (Erlang) file server\n  to be used. Adding `cooked` to the mode list overrides the default and opens\n  the tar file without option `raw`.\n\n- **`dereference`** - By default, symbolic links are stored as symbolic links in\n  the tar file. To override the default and store the file that the symbolic\n  link points to into the tar file, use option `dereference`.\n\n- **`verbose`** - Prints an informational message about each added file.","ref":"erl_tar.html#create/3"},{"type":"type","title":"erl_tar.create_opt/0","doc":"","ref":"erl_tar.html#t:create_opt/0"},{"type":"function","title":"erl_tar.extract/1","doc":"Extracts all files from a tar archive.\n\nIf argument `Name` is specified as `{binary,Binary}`, the contents of the binary\nis assumed to be a tar archive.\n\nIf argument `Name` is specified as `{file,Fd}`, `Fd` is assumed to be a file\ndescriptor returned from function `file:open/2`.\n\nOtherwise, `Name` is to be a filename.\n\n> #### Note {: .info }\n>\n> Leading slashes in tar member names will be removed before writing the file.\n> That is, absolute paths will be turned into relative paths. There will be an\n> info message written to the error logger when paths are changed in this way.\n\n> #### Warning {: .warning }\n>\n> The `compressed` and `cooked` flags are invalid when passing a file descriptor\n> with `{file,Fd}`. The file is assumed to have been opened with the appropriate\n> flags.","ref":"erl_tar.html#extract/1"},{"type":"function","title":"erl_tar.extract/2","doc":"Extracts files from a tar archive.\n\nIf argument `Name` is specified as `{binary,Binary}`, the contents of the binary\nis assumed to be a tar archive.\n\nIf argument `Name` is specified as `{file,Fd}`, `Fd` is assumed to be a file\ndescriptor returned from function `file:open/2`.\n\nOtherwise, `Name` is to be a filename.\n\nThe following options modify the defaults for the extraction as follows:\n\n- **`{cwd,Cwd}`** - Files with relative filenames are by default extracted to\n  the current working directory. With this option, files are instead extracted\n  into directory `Cwd`.\n\n- **`{files,FileList}`** - By default, all files are extracted from the tar\n  file. With this option, only those files are extracted whose names are\n  included in `FileList`.\n\n- **`compressed`** - With this option, the file is uncompressed while\n  extracting. If the tar file is not compressed, this option is ignored.\n\n- **`cooked`** - By default, function [`open/2`](`open/2`) function opens the\n  tar file in `raw` mode, which is faster but does not allow a remote (Erlang)\n  file server to be used. Adding `cooked` to the mode list overrides the default\n  and opens the tar file without option `raw`.\n\n- **`memory`** - Instead of extracting to a directory, this option gives the\n  result as a list of tuples `{Filename, Binary}`, where `Binary` is a binary\n  containing the extracted data of the file named `Filename` in the tar file.\n\n- **`keep_old_files`** - By default, all existing files with the same name as\n  files in the tar file are overwritten. With this option, existing files are\n  not overwriten.\n\n- **`verbose`** - Prints an informational message for each extracted file.\n\n> #### Warning {: .warning }\n>\n> The `compressed` and `cooked` flags are invalid when passing a file descriptor\n> with `{file,Fd}`. The file is assumed to have been opened with the appropriate\n> flags.","ref":"erl_tar.html#extract/2"},{"type":"type","title":"erl_tar.extract_opt/0","doc":"","ref":"erl_tar.html#t:extract_opt/0"},{"type":"type","title":"erl_tar.file_op/0","doc":"","ref":"erl_tar.html#t:file_op/0"},{"type":"type","title":"erl_tar.filelist/0","doc":"","ref":"erl_tar.html#t:filelist/0"},{"type":"function","title":"erl_tar.format_error/1","doc":"Converts an error reason term to a human-readable error message string.","ref":"erl_tar.html#format_error/1"},{"type":"type","title":"erl_tar.gid/0","doc":"","ref":"erl_tar.html#t:gid/0"},{"type":"function","title":"erl_tar.init/3","doc":"The `Fun` is the definition of what to do when the different storage operations\nfunctions are to be called from the higher tar handling functions (such as\n[`add/3`](`add/3`), [`add/4`](`add/4`), and [`close/1`](`close/1`)).\n\nThe `Fun` is called when the tar function wants to do a low-level operation,\nlike writing a block to a file. The `Fun` is called as\n`Fun(Op, {UserData,Parameters...})`, where `Op` is the operation name,\n`UserData` is the term passed as the first argument to `init/1` and\n`Parameters...` are the data added by the tar function to be passed down to the\nstorage handling function.\n\nParameter `UserData` is typically the result of opening a low-level structure\nlike a file descriptor or an SFTP channel id. The different `Fun` clauses\noperate on that very term.\n\nThe following are the fun clauses parameter lists:\n\n- **`(write, {UserData,DataToWrite})`** - Writes term `DataToWrite` using\n  `UserData`.\n\n- **`(close, UserData)`** - Closes the access.\n\n- **`(read2, {UserData,Size})`** - Reads using `UserData` but only `Size` bytes.\n  Notice that there is only an arity-2 read function, not an arity-1 function.\n\n- **`(position,{UserData,Position})`** - Sets the position of `UserData` as\n  defined for files in `file:position/2`\n\n_Example:_\n\nThe following is a complete `Fun` parameter for reading and writing on files\nusing the `m:file` module:\n\n```erlang\nExampleFun =\n   fun(write, {Fd,Data}) ->  file:write(Fd, Data);\n      (position, {Fd,Pos}) -> file:position(Fd, Pos);\n      (read2, {Fd,Size}) -> file:read(Fd, Size);\n      (close, Fd) -> file:close(Fd)\n   end\n```\n\nHere `Fd` was specified to function [`init/3`](`init/3`) as:\n\n```erlang\n{ok,Fd} = file:open(Name, ...).\n{ok,TarDesc} = erl_tar:init(Fd, [write], ExampleFun),\n```\n\n`TarDesc` is then used:\n\n```erlang\nerl_tar:add(TarDesc, SomeValueIwantToAdd, FileNameInTarFile),\n...,\nerl_tar:close(TarDesc)\n```\n\nWhen the `erl_tar` core wants to, for example, write a piece of `Data`, it would\ncall `ExampleFun(write, {UserData,Data})`.\n\n> #### Note {: .info }\n>\n> This example with the `file` module operations is not necessary to use\n> directly, as that is what function `open/2` in principle does.\n\n> #### Warning {: .warning }\n>\n> The `TarDescriptor` term is not a file descriptor. You are advised not to rely\n> on the specific contents of this term, as it can change in future Erlang/OTP\n> releases when more features are added to this module.","ref":"erl_tar.html#init/3"},{"type":"type","title":"erl_tar.mode/0","doc":"","ref":"erl_tar.html#t:mode/0"},{"type":"type","title":"erl_tar.name_in_archive/0","doc":"","ref":"erl_tar.html#t:name_in_archive/0"},{"type":"function","title":"erl_tar.open/2","doc":"Creates a tar file for writing (any existing file with the same name is\ntruncated).\n\nBy convention, the name of a tar file is to end in \"`.tar`\". To abide to the\nconvention, add \"`.tar`\" to the name.\n\nExcept for the `write` atom, the following atoms can be added to `OpenModeList`:\n\n- **`compressed`** - The entire tar file is compressed, as if it has been run\n  through the `gzip` program. To abide to the convention that a compressed tar\n  file is to end in \"`.tar.gz`\" or \"`.tgz`\", add the appropriate extension.\n\n- **`cooked`** - By default, the tar file is opened in `raw` mode, which is\n  faster but does not allow a remote (Erlang) file server to be used. Adding\n  `cooked` to the mode list overrides the default and opens the tar file without\n  option `raw`.\n\nTo add one file at the time into an opened tar file, use function\n[`add/3,4`](`add/3`). When you are finished adding files, use function `close/1`\nto close the tar file.\n\n> #### Warning {: .warning }\n>\n> The `compressed` and `cooked` flags are invalid when passing a file descriptor\n> with `{file,Fd}`. The file must already be opened with the appropriate flags.\n\n> #### Warning {: .warning }\n>\n> The `TarDescriptor` term is not a file descriptor. You are advised not to rely\n> on the specific contents of this term, as it can change in future Erlang/OTP\n> releases when more features are added to this module.","ref":"erl_tar.html#open/2"},{"type":"type","title":"erl_tar.open_type/0","doc":"","ref":"erl_tar.html#t:open_type/0"},{"type":"function","title":"erl_tar.t/1","doc":"Prints the names of all files in the tar file `Name` to the Erlang shell\n(similar to \"`tar t`\").","ref":"erl_tar.html#t/1"},{"type":"function","title":"erl_tar.table/1","doc":"","ref":"erl_tar.html#table/1"},{"type":"function","title":"erl_tar.table/2","doc":"Retrieves the names of all files in the tar file `Name`.","ref":"erl_tar.html#table/2"},{"type":"opaque","title":"erl_tar.tar_descriptor/0","doc":"","ref":"erl_tar.html#t:tar_descriptor/0"},{"type":"type","title":"erl_tar.tar_entry/0","doc":"","ref":"erl_tar.html#t:tar_entry/0"},{"type":"type","title":"erl_tar.tar_time/0","doc":"","ref":"erl_tar.html#t:tar_time/0"},{"type":"function","title":"erl_tar.tt/1","doc":"Prints names and information about all files in the tar file `Name` to the\nErlang shell (similar to \"`tar tv`\").","ref":"erl_tar.html#tt/1"},{"type":"type","title":"erl_tar.typeflag/0","doc":"","ref":"erl_tar.html#t:typeflag/0"},{"type":"type","title":"erl_tar.uid/0","doc":"","ref":"erl_tar.html#t:uid/0"},{"type":"type","title":"erl_tar.user_data/0","doc":"","ref":"erl_tar.html#t:user_data/0"},{"type":"module","title":"rand","doc":"Pseudo random number generation\n\nThis module provides pseudo random number generation and implements\na number of base generator algorithms.  Most are provided through\na [plug-in framework](#plug-in-framework) that adds\nfeatures to the base generators.\n\nAt the end of this module documentation there are some\n[niche algorithms](#niche-algorithms) that don't use\nthis module's normal [plug-in framework](#plug-in-framework).\nThey may be useful for special purposes like short generation time\nwhen quality is not essential, for seeding other generators, and such.\n\n[](){: #plug-in-framework } Plug-in framework\n---------------------------------------------\n\nThe [plug-in framework](#plug-in-framework-api) implements\na common [API](#plug-in-framework-api) to, and enhancements\nof the base generators:\n\n* Operating on a generator state in the\n  [process dictionary](#generator-state).\n* [Automatic](#generator-state) [seeding](`seed/1`).\n* Manual [seeding support](`seed/2`) to avoid common pitfalls.\n* Generating [integers](`t:integer/0`) in any range, with\n  [uniform distribution](`uniform/1`), without noticable bias.\n* Generating [integers](`t:integer/0`) in any range, larger than\n  the base generator's, with [uniform distribution](`uniform/1`).\n* Generating [floating-point numbers](`t:float/0`) with\n  [uniform distribution](`uniform/0`).\n* Generating [floating-point numbers](`t:float/0`) with\n  [normal distribution](`normal/0`).\n* Generating any number of [bytes](`bytes/1`).\n\nThe base generator algorithms implements the\n[Xoroshiro and Xorshift algorithms](http://xorshift.di.unimi.it)\nby Sebastiano Vigna.  During an iteration they generate a large integer\n(at least 58-bit) and operate on a state of several large integers.\n\nTo create numbers with normal distribution the\n[Ziggurat Method by Marsaglia and Tsang](http://www.jstatsoft.org/v05/i08)\nis used on the output from a base generator.\n\nFor most algorithms, jump functions are provided for generating\nnon-overlapping sequences. A jump function perform a calculation\nequivalent to a large number of repeated state iterations,\nbut execute in a time roughly equivalent to one regular iteration\nper generator bit.\n\n[](){: #algorithms } The following algorithms are provided:\n\n- **`exsss`**, the [_default algorithm_](#default-algorithm)\n  *(Since OTP 22.0)*  \n  Xorshift116\\*\\*, 58 bits precision and period of 2^116-1\n\n  Jump function: equivalent to 2^64 calls\n\n  This is the Xorshift116 generator combined with the StarStar scrambler from\n  the 2018 paper by David Blackman and Sebastiano Vigna:\n  [Scrambled Linear Pseudorandom Number Generators](http://vigna.di.unimi.it/ftp/papers/ScrambledLinear.pdf)\n\n  The generator doesn't use 58-bit rotates so it is faster than the\n  Xoroshiro116 generator, and when combined with the StarStar scrambler\n  it doesn't have any weak low bits like `exrop` (Xoroshiro116+).\n\n  Alas, this combination is about 10% slower than `exrop`, but despite that\n  it is the [_default algorithm_](#default-algorithm) thanks to\n  its statistical qualities.\n\n- **`exro928ss`** *(Since OTP 22.0)*  \n  Xoroshiro928\\*\\*, 58 bits precision and a period of 2^928-1\n\n  Jump function: equivalent to 2^512 calls\n\n  This is a 58 bit version of Xoroshiro1024\\*\\*, from the 2018 paper by\n  David Blackman and Sebastiano Vigna:\n  [Scrambled Linear Pseudorandom Number Generators](http://vigna.di.unimi.it/ftp/papers/ScrambledLinear.pdf)\n  that on a 64 bit Erlang system executes only about 40% slower than the\n  [*default `exsss` algorithm*](#default-algorithm)\n  but with much longer period and better statistical properties,\n  but on the flip side a larger state.\n\n  Many thanks to Sebastiano Vigna for his help with the 58 bit adaption.\n\n- **`exrop`** *(Since OTP 20.0)*  \n  Xoroshiro116+, 58 bits precision and period of 2^116-1\n\n  Jump function: equivalent to 2^64 calls\n\n- **`exs1024s`** *(Since OTP 20.0)*  \n  Xorshift1024\\*, 64 bits precision and a period of 2^1024-1\n\n  Jump function: equivalent to 2^512 calls\n\n- **`exsp`** *(Since OTP 20.0)*  \n  Xorshift116+, 58 bits precision and period of 2^116-1\n\n  Jump function: equivalent to 2^64 calls\n\n  This is a corrected version of a previous\n  [_default algorithm_](#default-algorithm) (`exsplus`, _deprecated_),\n  that was superseded by Xoroshiro116+ (`exrop`).  Since this algorithm\n  doesn't use rotate it executes a little (say < 15%) faster than `exrop`\n  (that has to do a 58 bit rotate, for which there is no native instruction).\n  See the [algorithms' homepage](http://xorshift.di.unimi.it).\n\n[](){: #default-algorithm }\n#### Default Algorithm\n\nThe current _default algorithm_ is\n[`exsss` (Xorshift116\\*\\*)](#algorithms). If a specific algorithm is\nrequired, ensure to always use `seed/1` to initialize the state.\n\nWhich algorithm that is the default may change between Erlang/OTP releases,\nand is selected to be one with high speed, small state and \"good enough\"\nstatistical properties.\n\n#### Old Algorithms\n\nUndocumented (old) algorithms are deprecated but still implemented so old code\nrelying on them will produce the same pseudo random sequences as before.\n\n> #### Note {: .info }\n>\n> There were a number of problems in the implementation of\n> the now undocumented algorithms, which is why they are deprecated.\n> The new algorithms are a bit slower but do not have these problems:\n>\n> Uniform integer ranges had a skew in the probability distribution\n> that was not noticable for small ranges but for large ranges\n> less than the generator's precision the probability to produce\n> a low number could be twice the probability for a high.\n>\n> Uniform integer ranges larger than or equal to the generator's precision\n> used a floating point fallback that only calculated with 52 bits\n> which is smaller than the requested range and therefore all numbers\n> in the requested range weren't even possible to produce.\n>\n> Uniform floats had a non-uniform density so small values for example\n> less than 0.5 had got smaller intervals decreasing as the generated value\n> approached 0.0 although still uniformly distributed for sufficiently large\n> subranges. The new algorithms produces uniformly distributed floats\n> on the form `N * 2.0^(-53)` hence they are equally spaced.\n\n[](){: #generator-state }\n#### Generator State\n\nEvery time a random number is generated, a state is used to calculate it,\nproducing a new state. The state can either be implicit\nor be an explicit argument and return value.\n\nThe functions with implicit state operates on a state stored\nin the process dictionary under the key `rand_seed`.  If that key\ndoesn't exist when the function is called, `seed/1` is called automatically\nwith the [_default algorithm_](#default-algorithm) and creates\na reasonably unpredictable seed.\n\nThe functions with explicit state don't use the process dictionary.\n\n#### _Examples_\n\nSimple use; create and seed the\n[_default algorithm_](#default-algorithm) with a non-fixed seed,\nif not already done, and generate two uniformly distibuted\nfloating point numbers.\n\n```erlang\nR0 = rand:uniform(),\nR1 = rand:uniform(),\n```\n\nUse a specified algorithm:\n\n```erlang\n_ = rand:seed(exro928ss),\nR2 = rand:uniform(),\n```\n\nUse a specified algorithm with a fixed seed:\n\n```erlang\n_ = rand:seed(exro928ss, {123, 123534, 345345}),\nR3 = rand:uniform(),\n```\n\nUse the functional API with a non-fixed seed:\n\n```erlang\nS0 = rand:seed_s(exsss),\n{R4, S1} = rand:uniform_s(S0),\n```\n\nGenerate a textbook basic form Box-Muller standard normal distribution number:\n\n```erlang\nR5 = rand:uniform_real(),\nR6 = rand:uniform(),\nSND0 = math:sqrt(-2 * math:log(R5)) * math:cos(math:pi() * R6)\n```\n\nGenerate a standard normal distribution number:\n\n```erlang\n{SND1, S2} = rand:normal_s(S1),\n```\n\nGenerate a normal distribution number with with mean -3 and variance 0.5:\n\n```erlang\n{ND0, S3} = rand:normal_s(-3, 0.5, S2),\n```\n\n#### Quality of the Generated Numbers\n\n> #### Note {: .info }\n>\n> The builtin random number generator algorithms are not cryptographically\n> strong. If a cryptographically strong random number generator is needed,\n> use something like `crypto:rand_seed/0`.\n\nFor all these generators except `exro928ss` and `exsss` the lowest bit(s)\nhave got a slightly less random behaviour than all other bits.\n1 bit for `exrop` (and `exsp`), and 3 bits for `exs1024s`. See for example\nthis explanation in the\n[Xoroshiro128+](http://xoroshiro.di.unimi.it/xoroshiro128plus.c)\ngenerator source code:\n\n> Beside passing BigCrush, this generator passes the PractRand test suite\n> up to (and included) 16TB, with the exception of binary rank tests,\n> which fail due to the lowest bit being an LFSR; all other bits pass all\n> tests. We suggest to use a sign test to extract a random Boolean value.\n\nIf this is a problem; to generate a boolean with these algorithms,\nuse something like this:\n\n```erlang\n(rand:uniform(256) > 128) % -> boolean()\n```\n\n```erlang\n((rand:uniform(256) - 1) bsr 7) % -> 0 | 1\n```\n\nFor a general range, with `N = 1` for `exrop`, and `N = 3` for `exs1024s`:\n\n```erlang\n(((rand:uniform(Range bsl N) - 1) bsr N) + 1)\n```\n\nThe floating point generating functions in this module waste the lowest bits\nwhen converting from an integer so they avoid this snag.\n\n\n[](){: #niche-algorithms } Niche algorithms\n-------------------------------------------\n\nThe [niche algorithms API](#niche-algorithms-api) contains\nspecial purpose algorithms that don't use the\n[plug-in framework](#plug-in-framework), mainly for performance reasons.\n\nSince these algorithms lack the plug-in framework support, generating numbers\nin a range other than the base generator's range may become a problem.\n\nThere are at least four ways to do this, assuming the `Range` is less than\nthe generator's range:\n\n[](){: #modulo-method }\n- **Modulo**  \n  To generate a number `V` in the range `0..Range-1`:\n\n  > Generate a number `X`.  \n  > Use `V = X rem Range` as your value.\n\n  This method uses `rem`, that is, the remainder of an integer division,\n  which is a slow operation.\n\n  Low bits from the generator propagate straight through to\n  the generated value, so if the generator has got weaknesses\n  in the low bits this method propagates them too.\n\n  If `Range` is not a divisor of the generator range, the generated numbers\n  have a bias.  Example:\n\n  Say the generator generates a byte, that is, the generator range\n  is `0..255`, and the desired range is `0..99` (`Range = 100`).\n  Then there are 3 generator outputs that produce the value `0`,\n  these are; `0`, `100` and `200`.\n  But there are only 2 generator outputs that produce the value `99`,\n  which are; `99` and `199`. So the probability for a value `V` in `0..55`\n  is 3/2 times the probability for the other values `56..99`.\n\n  If `Range` is much smaller than the generator range, then this bias\n  gets hard to detect. The rule of thumb is that if `Range` is smaller\n  than the square root of the generator range, the bias is small enough.\n  Example:\n\n  A byte generator when `Range = 20`. There are 12 (`256 div 20`)\n  possibilities to generate the highest numbers and one more to generate\n  a number `V < 16` (`256 rem 20`). So the probability is 13/12\n  for a low number versus a high. To detect that difference with\n  some confidence you would need to generate a lot more numbers\n  than the generator range, `256` in this small example.\n\n[](){: #truncated-multiplication-method }\n- **Truncated multiplication**  \n  To generate a number `V` in the range `0..Range-1`, when you have\n  a generator with a power of 2 range (`0..2^Bits-1`):\n\n  > Generate a number `X`.  \n  > Use `V = X * Range bsr Bits` as your value.\n\n  If the multiplication `X * Range` creates a bignum\n  this method becomes very slow.\n\n  High bits from the generator propagate through to the generated value,\n  so if the generator has got weaknesses in the high bits this method\n  propagates them too.\n\n  If `Range` is not a divisor of the generator range, the generated numbers\n  have a bias, pretty much as for the [Modulo](#modulo-method) method above.\n\n[](){: #shift-or-mask-method }\n- **Shift or mask**  \n  To generate a number in a power of 2 range (`0..2^RBits-1`),\n  when you have a generator with a power of 2 range (`0..2^Bits`):\n\n  > Generate a number `X`.  \n  > Use `V = X band ((1 bsl RBits)-1)` or `V = X bsr (Bits-RBits)`\n  > as your value.\n\n  Masking with `band` preserves the low bits, and right shifting\n  with `bsr` preserves the high, so if the generator has got weaknesses\n  in high or low bits; choose the right operator.\n\n  If the generator has got a range that is not a power of 2\n  and this method is used anyway, it introduces bias in the same way\n  as for the [Modulo](#modulo-method) method above.\n\n[](){: #rejection-method }\n- **Rejection**  \n\n  > Generate a number `X`.  \n  > If `X` is in the range, use it as your value,\n  > otherwise reject it and repeat.\n\n  In theory it is not certain that this method will ever complete,\n  but in practice you ensure that the probability of rejection is low.\n  Then the probability for yet another iteration decreases exponentially\n  so the expected mean number of iterations will often be between 1 and 2.\n  Also, since the base generator is a full length generator,\n  a value that will break the loop must eventually be generated.\n\n  These methods can be combined, such as using\n  the [Modulo](#modulo-method) method and only if the generator value\n  would create bias use [Rejection](#rejection-method).\n  Or using [Shift or mask](#shift-or-mask-method) to reduce the size\n  of a generator value so that\n  [Truncated multiplication](#truncated-multiplication-method)\n  will not create a bignum.\n\n  The recommended way to generate a floating point number\n  (IEEE 745 Double, that has got a 53-bit mantissa) in the range\n  `0..1`, that is `0.0 =< V < 1.0` is to generate a 53-bit number `X`\n  and then use `V = X * (1.0/((1 bsl 53)))` as your value.\n  This will create a value on the form N*2^-53 with equal probability\n  for every possible N for the range.","ref":"rand.html"},{"type":"type","title":"rand.alg/0","doc":"","ref":"rand.html#t:alg/0"},{"type":"type","title":"rand.alg_handler/0","doc":"","ref":"rand.html#t:alg_handler/0"},{"type":"type","title":"rand.alg_state/0","doc":"","ref":"rand.html#t:alg_state/0"},{"type":"type","title":"rand.builtin_alg/0","doc":"","ref":"rand.html#t:builtin_alg/0"},{"type":"function","title":"rand.bytes/1","doc":"Generate random bytes as a `t:binary()`,\nusing the state in the process dictionary.\n\nLike `bytes_s/2` but operates on the state stored in\nthe process dictionary.  Returns the generated [`Bytes`](`t:binary/0`).","ref":"rand.html#bytes/1"},{"type":"function","title":"rand.bytes_s/2","doc":"Generate random bytes as a `t:binary()`.\n\nFor a specified integer `N >= 0`, generates a `t:binary/0`\nwith that number of random bytes.\n\nThe selected algorithm is used to generate as many random numbers\nas required to compose the `t:binary/0`.  Returns the generated\n[`Bytes`](`t:binary/0`) and a [`NewState`](`t:state/0`).","ref":"rand.html#bytes_s/2"},{"type":"type","title":"rand.dummy_state/0","doc":"Algorithm specific internal state","ref":"rand.html#t:dummy_state/0"},{"type":"function","title":"rand.export_seed/0","doc":"Export the seed value.\n\nReturns the random number state in an external format.\nTo be used with `seed/1`.","ref":"rand.html#export_seed/0"},{"type":"function","title":"rand.export_seed_s/1","doc":"Export the seed value.\n\nReturns the random number generator state in an external format.\nTo be used with `seed/1`.","ref":"rand.html#export_seed_s/1"},{"type":"type","title":"rand.export_state/0","doc":"Algorithm-dependent state that can be printed or saved to file.","ref":"rand.html#t:export_state/0"},{"type":"opaque","title":"rand.exro928_state/0","doc":"Algorithm specific internal state","ref":"rand.html#t:exro928_state/0"},{"type":"opaque","title":"rand.exrop_state/0","doc":"Algorithm specific internal state","ref":"rand.html#t:exrop_state/0"},{"type":"opaque","title":"rand.exs64_state/0","doc":"Algorithm specific internal state","ref":"rand.html#t:exs64_state/0"},{"type":"opaque","title":"rand.exs1024_state/0","doc":"Algorithm specific internal state","ref":"rand.html#t:exs1024_state/0"},{"type":"function","title":"rand.exsp_jump/1","doc":"Jump the generator state forward.\n\nPerforms a [`State`](`t:state/0`) jump calculation\nthat is equvalent to a 2^64 state iterations.\n\nReturns the [`NewState`](`t:state/0`).\n\nThis feature can be used to create many non-overlapping\nrandom number sequences from one start state.\n\nSee the description of jump functions at the top of this module description.\n\nSee `exsp_next/1` about why this internal implementation function\nhas been exposed.","ref":"rand.html#exsp_jump/1"},{"type":"function","title":"rand.exsp_next/1","doc":"Generate an Xorshift116+ random integer and new algorithm state.\n\nFrom the specified [`AlgState`](`t:exsplus_state/0`),\ngenerates a random 58-bit integer [`X`](`t:uint58/0`)\nand a new algorithm state [`NewAlgState`](`t:exsplus_state/0`),\naccording to the Xorshift116+ algorithm.\n\nThis is an API function exposing the internal implementation of the\n[`exsp`](#algorithms) algorithm that enables using it without the\noverhead of the plug-in framework, which might be useful for time critial\napplications. On a typical 64 bit Erlang VM this approach executes\nin just above 30% (1/3) of the time for the default algorithm through\nthis module's normal plug-in framework.\n\nTo seed this generator use [`{_, AlgState} = rand:seed_s(exsp)`](`seed_s/1`)\nor [`{_, AlgState} = rand:seed_s(exsp, Seed)`](`seed_s/1`)\nwith a specific [`Seed`](`t:seed/0`).\n\n> #### Note {: .info }\n>\n> This function offers no help in generating a number on a selected range,\n> nor in generating floating point numbers.  It is easy to accidentally\n> mess up the statistical properties of this generator or to loose\n> the performance advantage when doing either.\n> See the recepies at the start of this\n> [Niche algorithms API](#niche-algorithms-api) description.\n>\n> Note also the caveat about weak low bits that this generator suffers from.\n>\n> The generator is exported in this form primarily for performance reasons.","ref":"rand.html#exsp_next/1"},{"type":"opaque","title":"rand.exsplus_state/0","doc":"Algorithm specific internal state","ref":"rand.html#t:exsplus_state/0"},{"type":"function","title":"rand.jump/0","doc":"Jump the generator state forward.\n\nLike `jump/1` but operates on the state stored in\nthe process dictionary.  Returns the [`NewState`](`t:state/0`).","ref":"rand.html#jump/0"},{"type":"function","title":"rand.jump/1","doc":"Jump the generator state forward.\n\nPerforms an algorithm specific [`State`](`t:state/0`) jump calculation\nthat is equvalent to a large number of state iterations.\nSee this module's [algorithms list](#algorithms).\n\nReturns the [`NewState`](`t:state/0`).\n\nThis feature can be used to create many non-overlapping\nrandom number sequences from one start state.\n\nThis function raises a `not_implemented` error exception if there is\nno jump function implemented for the [`State`](`t:state/0`)'s algorithm.","ref":"rand.html#jump/1"},{"type":"function","title":"rand.mwc59/1","doc":"Generate a new MWC59 state.\n\nFrom the specified generator state [`CX0`](`t:mwc59_state/0`) generate\na new state [`CX1`](`t:mwc59_state/0`), according to a Multiply With Carry\ngenerator, which is an efficient implementation of\na Multiplicative Congruential Generator with a power of 2 multiplier\nand a prime modulus.\n\nThis generator uses the multiplier `2^32` and the modulus\n`16#7fa6502 * 2^32 - 1`, which have been selected, in collaboration with\nSebastiano Vigna, to avoid bignum operations and still get\ngood statistical quality. It has been named \"MWC59\" and can be written as:\n\n```erlang\nC = CX0 bsr 32\nX = CX0 band ((1 bsl 32)-1))\nCX1 = 16#7fa6502 * X + C\n```\n\nBecause the generator uses a multiplier that is a power of 2 it gets\nstatistical flaws for collision tests and birthday spacings tests\nin 2 and 3 dimensions, and these caveats apply even when looking\nonly at the MWC \"digit\", that is the low 32 bits (the multiplier)\nof the generator state.  The higher bits of the state are worse.\n\nThe quality of the output value improves much by using a scrambler,\ninstead of just taking the low bits.\nFunction [`mwc59_value32`](`mwc59_value32/1`) is a fast scrambler\nthat returns a decent 32-bit number. The slightly slower\n[`mwc59_value`](`mwc59_value/1`) scrambler returns 59 bits of\nvery good quality, and [`mwc59_float`](`mwc59_float/1`) returns\na `t:float/0` of very good quality.\n\nThe low bits of the base generator are surprisingly good, so the lowest\n16 bits actually pass fairly strict PRNG tests, despite the generator's\nweaknesses that lie in the high bits of the 32-bit MWC \"digit\".\nIt is recommended to use `rem` on the the generator state, or bit mask\nextracting the lowest bits to produce numbers in a range 16 bits or less.\nSee the recepies at the start of this\n[Niche algorithms API](#niche-algorithms-api) description.\n\nOn a typical 64 bit Erlang VM this generator executes in below 8% (1/13)\nof the time for the default algorithm in the\n[plug-in framework API](#plug-in-framework-api) of this module.\nWith the [`mwc59_value32`](`mwc59_value32/1`) scrambler the total time\nbecomes 16% (1/6), and with [`mwc59_value`](`mwc59_value/1`)\nit becomes 20% (1/5) of the time for the default algorithm.\nWith [`mwc59_float`](`mwc59_float/1`) the total time\nis 60% of the time for the default algorithm generating a `t:float/0`.\n\n> #### Note {: .info }\n>\n> This generator is a niche generator for high speed applications.\n> It has a much shorter period than the default generator, which in itself\n> is a quality concern, although when used with the value scramblers\n> it passes strict PRNG tests.  The generator is much faster than\n> `exsp_next/1` but with a bit lower quality and much shorter period.","ref":"rand.html#mwc59/1"},{"type":"function","title":"rand.mwc59_float/1","doc":"Calculate a scrambled `t:float/0` from a [MWC59 state](`t:mwc59_state/0`).\n\nReturns a value `V ::` `t:float/0` from a generator state `CX`,\nin the range `0.0 =< V < 1.0` like for example `uniform_s/1`.\n\nThe generator state is scrambled as with\n[`mwc59_value/1`](`mwc59_value/1`) before converted to a `t:float/0`.","ref":"rand.html#mwc59_float/1"},{"type":"function","title":"rand.mwc59_seed/0","doc":"Create a [MWC59 generator state](`t:mwc59_state/0`).\n\nLike `mwc59_seed/1` but it hashes the default seed value\nof [`seed_s(atom())`](`seed_s/1`).","ref":"rand.html#mwc59_seed/0"},{"type":"function","title":"rand.mwc59_seed/1","doc":"Create a [MWC59 generator state](`t:mwc59_state/0`).\n\nReturns a generator state [`CX`](`t:mwc59_state/0`).\nThe 58-bit seed value `S` is hashed to create the generator state,\nto avoid that similar seeds create similar sequences.","ref":"rand.html#mwc59_seed/1"},{"type":"type","title":"rand.mwc59_state/0","doc":"`1 .. (16#1ffb072 bsl 29) - 2`","ref":"rand.html#t:mwc59_state/0"},{"type":"function","title":"rand.mwc59_value32/1","doc":"Calculate a 32-bit scrambled value from a [MWC59 state](`t:mwc59_state/0`).\n\nReturns a 32-bit value [`V`](`t:integer/0`) from a generator state `CX`.\nThe generator state is scrambled using an 8-bit xorshift which masks\nthe statistical imperfecions of the base generator [`mwc59`](`mwc59/1`)\nenough to produce numbers of decent quality. Still some problems\nin 2- and 3-dimensional birthday spacing and collision tests show through.\n\nWhen using this scrambler it is in general better to use the high bits of the\nvalue than the low. The lowest 8 bits are of good quality and are passed\nright through from the base generator. They are combined with the next 8\nin the xorshift making the low 16 good quality, but in the range\n16..31 bits there are weaker bits that should not become high bits\nof the generated values.\n\nTherefore it is in general safer to shift out low bits. See the recepies\nat the start of this [Niche algorithms API](#niche-algorithms-api)\ndescription.\n\nFor a non power of 2 range less than about 16 bits (to not get\ntoo much bias and to avoid bignums) truncated multiplication can be used,\nthat is: `(Range*V) bsr 32`, which is much faster than using `rem`.","ref":"rand.html#mwc59_value32/1"},{"type":"function","title":"rand.mwc59_value/1","doc":"Calculate a 59-bit scrambled value from a [MWC59 state](`t:mwc59_state/0`).\n\nReturns a 59-bit value [`V`](`t:integer/0`) from a generator state `CX`.\nThe generator state is scrambled using an 4-bit followed by a 27-bit xorshift,\nwhich masks the statistical imperfecions of the [MWC59](`mwc59/1`)\nbase generator enough that all 59 bits are of very good quality.\n\nBe careful to not accidentaly create a bignum when handling the value `V`.\n\nIt is in general general better to use the high bits from this scrambler than\nthe low. See the recepies at the start of this\n[Niche algorithms API](#niche-algorithms-api) description.\n\nFor a non power of 2 range less than about 29 bits (to not get\ntoo much bias and to avoid bignums) truncated multiplication can be used,\nwhich is much faster than using `rem`. Example for range 1'000'000'000;\nthe range is 30 bits, we use 29 bits from the generator,\nadding up to 59 bits, which is not a bignum (on a 64-bit VM ):\n`(1000000000 * (V bsr (59-29))) bsr 29`.","ref":"rand.html#mwc59_value/1"},{"type":"function","title":"rand.normal/0","doc":"Generate a random number with standard normal distribution.\n\nLike `normal_s/1` but operates on the state stored in\nthe process dictionary.  Returns the generated number `X`.","ref":"rand.html#normal/0"},{"type":"function","title":"rand.normal/2","doc":"Generate a random number with specified normal distribution 𝒩 *(μ, σ²)*.\n\nLike `normal_s/3` but operates on the state stored in\nthe process dictionary.  Returns the generated number `X`.","ref":"rand.html#normal/2"},{"type":"function","title":"rand.normal_s/1","doc":"Generate a random number with standard normal distribution.\n\nFrom the specified `State`, generates a random number `X ::` `t:float/0`,\nwith standard normal distribution, that is with mean value `0.0`\nand variance `1.0`.\n\nReturns the generated number [`X`](`t:float/0`)\nand the [`NewState`](`t:state/0`).","ref":"rand.html#normal_s/1"},{"type":"function","title":"rand.normal_s/3","doc":"Generate a random number with specified normal distribution 𝒩 *(μ, σ²)*.\n\nFrom the specified `State`, generates a random number `X ::` `t:float/0`,\nwith normal distribution 𝒩 *(μ, σ²)*, that is 𝒩 (Mean, Variance)\nwhere `Variance >= 0.0`.\n\nReturns [`X`](`t:float/0`) and the [`NewState`](`t:state/0`).","ref":"rand.html#normal_s/3"},{"type":"type","title":"rand.seed/0","doc":"Generator seed value.\n\nA list of integers sets the generator's internal state directly, after\nalgorithm-dependent checks of the value and masking to the proper word size.\nThe number of integers must be equal to the number of state words\nin the generator.\n\nA single integer is used as the initial state for a SplitMix64 generator.\nThe sequential output values of that is then used for setting\nthe generator's internal state after masking to the proper word size\nand if needed avoiding zero values.\n\nA traditional 3-tuple of integers seed is passed through algorithm-dependent\nhashing functions to create the generator's initial state.","ref":"rand.html#t:seed/0"},{"type":"function","title":"rand.seed/1","doc":"Seed the random number generator and select algorithm.\n\nThe same as [`seed_s(Alg_or_State)`](`seed_s/1`),\nbut also stores the generated state in the process dictionary.\n\nThe argument `default` is an alias for the\n[_default algorithm_](#default-algorithm)\nthat has been implemented *(Since OTP 24.0)*.","ref":"rand.html#seed/1"},{"type":"function","title":"rand.seed/2","doc":"Seed the random number generator and select algorithm.\n\nThe same as [`seed_s(Alg, Seed)`](`seed_s/2`),\nbut also stores the generated state in the process dictionary.\n\n`Alg = default` is an alias for the\n[_default algorithm_](#default-algorithm)\nthat has been implemented *(Since OTP 24.0)*.","ref":"rand.html#seed/2"},{"type":"function","title":"rand.seed_s/1","doc":"Seed the random number generator and select algorithm.\n\nWith the argument `Alg`, select that algorithm and seed random number\ngeneration with reasonably unpredictable time dependent data.\n\n`Alg = default` is an alias for the\n[_default algorithm_](#default-algorithm)\n*(Since OTP 24.0)*.\n\nWith the argument `State`, re-creates the state and returns it.\nSee also `export_seed/0`.","ref":"rand.html#seed_s/1"},{"type":"function","title":"rand.seed_s/2","doc":"Seed the random number generator and select algorithm.\n\nCreates and returns a generator state for the specified algorithm\nfrom the specified `t:seed/0` integers.\n\n`Alg = default` is an alias for the [_default algorithm_](#default-algorithm)\nthat has been implemented *since OTP 24.0*.","ref":"rand.html#seed_s/2"},{"type":"function","title":"rand.splitmix64_next/1","doc":"Generate a SplitMix64 random 64-bit integer and new algorithm state.\n\nFrom the specified `AlgState` generates a random 64-bit integer\n[`X`](`t:uint64/0`) and a new generator state\n[`NewAlgState`](`t:splitmix64_state/0`),\naccording to the SplitMix64 algorithm.\n\nThis generator is used internally in the `rand` module for seeding other\ngenerators since it is of a quite different breed which reduces\nthe probability for creating an accidentally bad seed.","ref":"rand.html#splitmix64_next/1"},{"type":"type","title":"rand.splitmix64_state/0","doc":"Algorithm specific state","ref":"rand.html#t:splitmix64_state/0"},{"type":"type","title":"rand.state/0","doc":"Algorithm-dependent state.","ref":"rand.html#t:state/0"},{"type":"type","title":"rand.uint58/0","doc":"`0 .. (2^58 - 1)`","ref":"rand.html#t:uint58/0"},{"type":"type","title":"rand.uint64/0","doc":"`0 .. (2^64 - 1)`","ref":"rand.html#t:uint64/0"},{"type":"function","title":"rand.uniform/0","doc":"Generate a uniformly distributed random number `0.0 =< X < 1.0`,\nusing the state in the process dictionary.\n\nLike `uniform_s/1` but operates on the state stored in\nthe process dictionary.  Returns the generated number `X`.","ref":"rand.html#uniform/0"},{"type":"function","title":"rand.uniform/1","doc":"Generate a uniformly distributed random integer `1 =< X =< N`,\nusing the state in the process dictionary.\n\nLike `uniform_s/2` but operates on the state stored in\nthe process dictionary.  Returns the generated number `X`.","ref":"rand.html#uniform/1"},{"type":"function","title":"rand.uniform_real/0","doc":"Generate a uniformly distributed random number `0.0 < X < 1.0`,\nusing the state in the process dictionary.\n\nLike `uniform_real_s/1` but operates on the state stored in\nthe process dictionary.  Returns the generated number `X`.\n\nSee `uniform_real_s/1`.","ref":"rand.html#uniform_real/0"},{"type":"function","title":"rand.uniform_real_s/1","doc":"Generate a uniformly distributed random number `0.0 < X < 1.0`.\n\nFrom the specified state, generates a random float, uniformly distributed\nin the value range `DBL_MIN =  #### Note {: .info }\n>\n> The generated numbers from this function has got better granularity\n> for small numbers than the regular `uniform_s/1` because all bits\n> in the mantissa are random. This property, in combination with the fact\n> that exactly zero is never returned is useful for algorithms doing\n> for example `1.0 / X` or `math:log(X)`.\n\nThe concept implicates that the probability to get exactly zero is extremely\nlow; so low that this function in fact never returns `0.0`.\nThe smallest number that it might return is `DBL_MIN`,\nwhich is `2.0^(-1022)`.\n\nThe value range stated at the top of this function description is\ntechnically correct, but `0.0 =< X < 1.0` is a better description\nof the generated numbers' statistical distribution, and that\nthis function never returns exactly `0.0` is impossible to observe.\n\nFor all sub ranges `N*2.0^(-53) =< X < (N+1)*2.0^(-53)` where\n`0 =< integer(N) < 2.0^53`, the probability to generate a number\nin the range is the same.  Compare with the numbers\ngenerated by `uniform_s/1`.\n\nHaving to generate extra random bits for occasional small numbers\ncosts a little performance. This function is about 20% slower\nthan the regular `uniform_s/1`","ref":"rand.html#uniform_real_s/1"},{"type":"function","title":"rand.uniform_s/1","doc":"Generate a uniformly distributed random number `0.0 =< X < 1.0`.\n\nFrom the specified `State`, generates a random number `X ::` `t:float/0`,\nuniformly distributed in the value range `0.0 =  #### Warning {: .warning }\n>\n> This function may return exactly `0.0` which can be fatal for certain\n> applications. If that is undesired you can use `(1.0 - rand:uniform())`\n> to get the interval `0.0 < X =< 1.0`, or instead use `uniform_real/0`.\n>\n> If neither endpoint is desired you can achieve the range\n> `0.0 < X < 1.0` using test and re-try like this:\n>\n> ```erlang\n> my_uniform() ->\n>     case rand:uniform() of\n>         X when 0.0   X;\n>         _ -> my_uniform()\n>     end.\n> ```","ref":"rand.html#uniform_s/1"},{"type":"function","title":"rand.uniform_s/2","doc":"Generate a uniformly distributed random integer `1 =< X =< N`.\n\nFrom the specified `State`, generates a random number `X ::` `t:integer/0`,\nuniformly distributed in the specified range `1 =< X =< N`.\nReturns the number `X` and the updated `NewState`.","ref":"rand.html#uniform_s/2"},{"type":"module","title":"random","doc":"Pseudo-random number generation.\n\nThis module provides a random number generator. The method is attributed to B.A.\nWichmann and I.D. Hill in 'An efficient and portable pseudo-random number\ngenerator', Journal of Applied Statistics. AS183. 1982. Also Byte March 1987.\n\nThe algorithm is a modification of the version attributed to Richard A. O'Keefe\nin the standard Prolog library.\n\nEvery time a random number is requested, a state is used to calculate it, and a\nnew state is produced. The state can either be implicit (kept in the process\ndictionary) or be an explicit argument and return value. In this implementation,\nthe state (the type `t:ran/0`) consists of a tuple of three integers.\n\n> #### Note {: .info }\n>\n> This random number generator is not cryptographically strong. If a strong\n> cryptographic random number generator is needed, use one of functions in the\n> `m:crypto` module, for example, [`crypto:strong_rand_bytes/1`](`m:crypto`).\n\n> #### Note {: .info }\n>\n> The improved `m:rand` module is to be used instead of this module.","ref":"random.html"},{"type":"module","title":"Note - random","doc":"Some of the functions use the process dictionary variable `random_seed` to\nremember the current seed.\n\nIf a process calls `uniform/0` or `uniform/1` without setting a seed first,\n`seed/0` is called automatically.\n\nThe implementation changed in Erlang/OTP R15. Upgrading to R15 breaks\napplications that expect a specific output for a specified seed. The output is\nstill deterministic number series, but different compared to releases older than\nR15. Seed `{0,0,0}` does, for example, no longer produce a flawed series of only\nzeros.","ref":"random.html#module-note"},{"type":"type","title":"random.ran/0","doc":"The state.","ref":"random.html#t:ran/0"},{"type":"function","title":"random.seed0/0","doc":"Returns the default state.","ref":"random.html#seed0/0"},{"type":"function","title":"random.seed/0","doc":"Seeds random number generation with default (fixed) values in the process\ndictionary and returns the old state.","ref":"random.html#seed/0"},{"type":"function","title":"random.seed/1","doc":"[`seed({A1, A2, A3})`](`seed/1`) is equivalent to\n[`seed(A1, A2, A3)`](`seed/3`).","ref":"random.html#seed/1"},{"type":"function","title":"random.seed/3","doc":"Seeds random number generation with integer values in the process dictionary and\nreturns the old state.\n\nThe following is an easy way of obtaining a unique value to seed with:\n\n```erlang\nrandom:seed(erlang:phash2([node()]),\n            erlang:monotonic_time(),\n            erlang:unique_integer())\n```\n\nFor details, see `erlang:phash2/1`, `erlang:node/0`, `erlang:monotonic_time/0`,\nand `erlang:unique_integer/0`.","ref":"random.html#seed/3"},{"type":"function","title":"random.uniform/0","doc":"Returns a random float uniformly distributed between `0.0` and `1.0`, updating\nthe state in the process dictionary.","ref":"random.html#uniform/0"},{"type":"function","title":"random.uniform/1","doc":"Returns, for a specified integer `N >= 1`, a random integer uniformly\ndistributed between `1` and `N`, updating the state in the process dictionary.","ref":"random.html#uniform/1"},{"type":"function","title":"random.uniform_s/1","doc":"Returns, for a specified state, a random float uniformly distributed between\n`0.0` and `1.0`, and a new state.","ref":"random.html#uniform_s/1"},{"type":"function","title":"random.uniform_s/2","doc":"Returns, for a specified integer `N >= 1` and a state, a random integer\nuniformly distributed between `1` and `N`, and a new state.","ref":"random.html#uniform_s/2"},{"type":"module","title":"zip","doc":"Utility for reading and creating 'zip' archives.\n\nThis module archives and extracts files to and from a zip archive. The zip\nformat is specified by the \"ZIP Appnote.txt\" file, available on the PKWARE web\nsite [www.pkware.com](http://www.pkware.com).\n\nThe zip module supports zip archive versions up to 6.1. However,\npassword-protection is not supported.\n\nBy convention, the name of a zip file is to end with `.zip`. To abide to the\nconvention, add `.zip` to the filename.\n\n- To create zip archives, use function `zip/2` or `zip/3`. They are\n  also available as [`create/2,3`](`create/3`), to resemble the `m:erl_tar` module.\n- To extract files from a zip archive, use function `unzip/1` or `unzip/2`. They\n  are also available as [`extract/1,2`](`extract/1`), to resemble the `m:erl_tar` module.\n- To fold a function over all files in a zip archive, use function `foldl/3`.\n- To return a list of the files in a zip archive, use function `list_dir/1` or\n  `list_dir/2`. They are also available as [`table/1,2`](`table/1`), to resemble the\n  `m:erl_tar` module.\n- To print a list of files to the Erlang shell, use function `t/1` or `tt/1`.\n- Sometimes it is desirable to open a zip archive, and to unzip files from it\n  file by file, without having to reopen the archive. This can be done by\n  functions [`zip_open/1,2`](`zip_open/1`), [`zip_get/1,2`](`zip_get/1`),\n  `zip_list_dir/1`, and `zip_close/1`.\n- The ZIP extensions 0x5355 \"extended timestamps\" and 0x7875 \"UID+GID handling\"\n  are supported. Both extensions are by default enabled when creating an archive,\n  but only \"extended timestamps\" are enabled when extracting. Use the `t:extra/0`\n  option to change how these extensions are used.","ref":"zip.html"},{"type":"module","title":"Limitations - zip","doc":"- Password-protected and encrypted archives are not supported.\n- Only the DEFLATE (zlib-compression) and the STORE (uncompressed data) zip\n  methods are supported.\n- Comments for individual files are not supported when creating zip archives.\n  The zip archive comment for the whole zip archive is supported.\n- Changing a zip archive is not supported. To add or remove a file from an\n  archive, the whole archive must be recreated.","ref":"zip.html#module-limitations"},{"type":"function","title":"zip.create/2","doc":"","ref":"zip.html#create/2"},{"type":"function","title":"zip.create/3","doc":"","ref":"zip.html#create/3"},{"type":"type","title":"zip.create_option/0","doc":"These options are described in [`create/3`](`m:zip#zip_options`).","ref":"zip.html#t:create_option/0"},{"type":"type","title":"zip.extension/0","doc":"A filename extension, for example \".txt\".","ref":"zip.html#t:extension/0"},{"type":"type","title":"zip.extension_spec/0","doc":"","ref":"zip.html#t:extension_spec/0"},{"type":"type","title":"zip.extra/0","doc":"The possible extra extension that can be used.\n\n- **`extended_timestamp`** - enables the 0x5455 \"extended timestamps\" zip extension\n  that embeds POSIX timestamps for access and modification times for each file in the\n  archive. This makes the timestamps to be in UTC instead of local time and also increases\n  the time resolution from 2 seconds to 1 second.\n- **`uid_gid`** - enables 0x7875 \"UNIX 3rd generation\" zip extension that embeds the\n  UID and GID for each file into the archive.","ref":"zip.html#t:extra/0"},{"type":"function","title":"zip.extract/1","doc":"","ref":"zip.html#extract/1"},{"type":"function","title":"zip.extract/2","doc":"","ref":"zip.html#extract/2"},{"type":"type","title":"zip.filename/0","doc":"The name of a zip file.","ref":"zip.html#t:filename/0"},{"type":"function","title":"zip.foldl/3","doc":"Calls `Fun(FileInArchive, GetInfo, GetBin, AccIn)` on successive files in the\n`Archive`, starting with `AccIn == Acc0`.\n\n`FileInArchive` is the name that the file has in the archive.\n\n`GetInfo` is a fun that returns information about the file.\n\n`GetBin` returns the file contents.\n\nBoth `GetInfo` and `GetBin` must be called within the `Fun`. Their behavior is\nundefined if they are called outside the context of `Fun`.\n\nThe `Fun` must return a new accumulator, which is passed to the next call.\n[`foldl/3`](`foldl/3`) returns the final accumulator value. `Acc0` is returned\nif the archive is empty. It is not necessary to iterate over all files in the\narchive. The iteration can be ended prematurely in a controlled manner by\nthrowing an exception.\n\n_Example:_\n\n```erlang\n> Name = \"dummy.zip\".\n\"dummy.zip\"\n> {ok, {Name, Bin}} = zip:create(Name, [{\"foo\", <<\"FOO\">>}, {\"bar\", <<\"BAR\">>}], [memory]).\n{ok,{\"dummy.zip\",\n     <<80,75,3,4,20,0,0,0,0,0,74,152,97,60,171,39,212,26,3,0,\n       0,0,3,0,0,...>>}}\n> {ok, FileSpec} = zip:foldl(fun(N, I, B, Acc) -> [{N, B(), I()} | Acc] end, [], {Name, Bin}).\n{ok,[{\"bar\",<<\"BAR\">>,\n      {file_info,3,regular,read_write,\n                 {{2010,3,1},{19,2,10}},\n                 {{2010,3,1},{19,2,10}},\n                 {{2010,3,1},{19,2,10}},\n                 54,1,0,0,0,0,0}},\n     {\"foo\",<<\"FOO\">>,\n      {file_info,3,regular,read_write,\n                 {{2010,3,1},{19,2,10}},\n                 {{2010,3,1},{19,2,10}},\n                 {{2010,3,1},{19,2,10}},\n                 54,1,0,0,0,0,0}}]}\n> {ok, {Name, Bin}} = zip:create(Name, lists:reverse(FileSpec), [memory]).\n{ok,{\"dummy.zip\",\n     <<80,75,3,4,20,0,0,0,0,0,74,152,97,60,171,39,212,26,3,0,\n       0,0,3,0,0,...>>}}\n> catch zip:foldl(fun(\"foo\", _, B, _) -> throw(B()); (_,_,_,Acc) -> Acc end, [], {Name, Bin}).\n<<\"FOO\">>\n```","ref":"zip.html#foldl/3"},{"type":"opaque","title":"zip.handle/0","doc":"As returned by `zip_open/2`.","ref":"zip.html#t:handle/0"},{"type":"function","title":"zip.list_dir/1","doc":"","ref":"zip.html#list_dir/1"},{"type":"function","title":"zip.list_dir/2","doc":"Retrieves all filenames in the zip archive `Archive`.\n\nThe result value is the tuple `{ok, List}`, where `List` contains the zip\narchive comment as the first element.\n\nOne option is available:\n\n- **`cooked`** - By default, this function opens the zip file in `raw` mode,\n  which is faster but does not allow a remote (Erlang) file server to be used.\n  Adding `cooked` to the mode list overrides the default and opens the zip file\n  without option `raw`.\n\n- **`skip_directories`** - By default empty directories within zip archives are\n  listed. With option `skip_directories` set, empty directories are no longer\n  listed.\n\n- **`{extra, Extras}`** - The zip \"extra\" features to respect. The supported\n  \"extra\" features are \"extended timestamps\" and \"UID and GID\" handling.\n  By default only \"extended timestamps\" is enabled when listing files.\n  See `t:extra/0` for more details.","ref":"zip.html#list_dir/2"},{"type":"function","title":"zip.t/1","doc":"Prints all filenames in the zip archive `Archive` to the Erlang shell. (Similar\nto `tar t`.)","ref":"zip.html#t/1"},{"type":"function","title":"zip.table/1","doc":"","ref":"zip.html#table/1"},{"type":"function","title":"zip.table/2","doc":"","ref":"zip.html#table/2"},{"type":"function","title":"zip.tt/1","doc":"Prints filenames and information about all files in the zip archive `Archive` to\nthe Erlang shell. (Similar to `tar tv`.)","ref":"zip.html#tt/1"},{"type":"function","title":"zip.unzip/1","doc":"","ref":"zip.html#unzip/1"},{"type":"function","title":"zip.unzip/2","doc":"Extracts all files from a zip archive.\n\nIf argument `Archive` is specified as a `t:binary/0`, the contents of the binary is\nassumed to be a zip archive, otherwise a filename.\n\nOptions:\n\n- **`{file_list, FileList}`** - By default, all files are extracted from the zip\n  archive. With option `{file_list, FileList}`, function [`unzip/2`](`unzip/2`)\n  only extracts the files whose names are included in `FileList`. The full\n  paths, including the names of all subdirectories within the zip archive, must\n  be specified.\n\n- **`cooked`** - By default, this function opens the zip file in `raw` mode,\n  which is faster but does not allow a remote (Erlang) file server to be used.\n  Adding `cooked` to the mode list overrides the default and opens the zip file\n  without option `raw`. The same applies for the files extracted.\n\n- **`keep_old_files`** - By default, all files with the same name as files in\n  the zip archive are overwritten. With option `keep_old_files` set, function\n  [`unzip/2`](`unzip/2`) does not overwrite existing files. Notice that even\n  with option `memory` specified, which means that no files are overwritten,\n  existing files are excluded from the result.\n\n- **`skip_directories`** - By default empty directories within zip archives are\n  extracted. With option `skip_directories` set, empty directories are no longer\n  created.\n\n- **`{extra, Extras}`** - The zip \"extra\" features to respect. The supported\n  \"extra\" features are \"extended timestamps\" and \"UID and GID\" handling.\n  By default only \"extended timestamps\" is enabled when unzipping.\n  See `t:extra/0` for more details.\n\n- **`verbose`** - Prints an informational message for each extracted file.\n\n- **`memory`** - Instead of extracting to the current directory, the result is\n  given as a list of tuples `{Filename, Binary}`, where `Binary` is a binary\n  containing the extracted data of file `Filename` in the zip archive.\n\n- **`{cwd, CWD}`** - Uses the specified directory as current directory. It is\n  prepended to filenames when extracting them from the zip archive. (Acting like\n  `file:set_cwd/1` in Kernel, but without changing the global `cwd` property.)","ref":"zip.html#unzip/2"},{"type":"function","title":"zip.zip/2","doc":"","ref":"zip.html#zip/2"},{"type":"function","title":"zip.zip/3","doc":"Creates a zip archive containing the files specified in `FileList`.\n\n`FileList` is a list of files, with paths relative to the current directory,\nwhich are stored with this path in the archive. File system operations are\nperformed to read the file metadata and, when compression is enabled, to stream\nthe file contents without loading whole files into memory. Files can also be\nspecified as binaries to create an archive directly from data. In such cases, no\nmetadata or file system reads are performed.\n\nFiles are compressed using the DEFLATE compression, as described in the\n\"Appnote.txt\" file. However, files are stored without compression if they are\nalready compressed. [`zip/2`](`zip/2`) and [`zip/3`](`zip/3`) check the file\nextension to determine if the file is to be stored without compression. Files\nwith the following extensions are not compressed: `.Z`, `.zip`, `.zoo`, `.arc`,\n`.lzh`, `.arj`.\n\nIt is possible to override the default behavior and control what types of files\nthat are to be compressed by using options `{compress, What}` and\n`{uncompress, What}`. It is also possible to use many `compress` and\n`uncompress` options.\n\nTo trigger file compression, its extension must match with the `compress`\ncondition and must not match the `uncompress` condition. For example, if\n`compress` is set to `[\"gif\", \"jpg\"]` and `uncompress` is set to `[\"jpg\"]`, only\nfiles with extension `\"gif\"` are compressed.\n\n[](){: #zip_options }\n\nOptions:\n\n- **`cooked`** - By default, this function opens the zip file in mode `raw`,\n  which is faster but does not allow a remote (Erlang) file server to be used.\n  Adding `cooked` to the mode list overrides the default and opens the zip file\n  without the `raw` option. The same applies for the files added.\n\n- **`verbose`** - Prints an informational message about each added file.\n\n- **`memory`** - The output is not to a file, but instead as a tuple\n  `{FileName, binary()}`. The binary is a full zip archive with header and can\n  be extracted with, for example, `unzip/2`.\n\n- **`{comment, Comment}`** - Adds a comment to the zip archive.\n\n- **`{cwd, CWD}`** - Uses the specified directory as current work directory\n  (`cwd`). This is prepended to filenames when adding them, although not in the\n  zip archive (acting like `file:set_cwd/1` in Kernel, but without changing the\n  global `cwd` property.).\n\n- **`{extra, Extras}`** - The zip \"extra\" features to respect. The supported\n  \"extra\" features are \"extended timestamps\" and \"UID and GID\" handling.\n  By default both these \"extra\" features are enabled.\n  See `t:extra/0` for more details.\n\n- **`{compress, What}`** - Controls what types of files to be compressed.\n  Defaults to `all`. The following values of `What` are allowed:\n\n  - **`all`** - All files are compressed (as long as they pass the `uncompress`\n    condition).\n\n  - **`[Extension]`** - Only files with exactly these extensions are compressed.\n\n  - **`{add,[Extension]}`** - Adds these extensions to the list of compress\n    extensions.\n\n  - **`{del,[Extension]}`** - Deletes these extensions from the list of compress\n    extensions.\n\n- **`{uncompress, What}`** - Controls what types of files to be uncompressed.\n  Defaults to `[\".Z\", \".zip\", \".zoo\", \".arc\", \".lzh\", \".arj\"]`. The following\n  values of `What` are allowed:\n\n  - **`all`** - No files are compressed.\n\n  - **`[Extension]`** - Files with these extensions are uncompressed.\n\n  - **`{add,[Extension]}`** - Adds these extensions to the list of uncompress\n    extensions.\n\n  - **`{del,[Extension]}`** - Deletes these extensions from the list of\n    uncompress extensions.","ref":"zip.html#zip/3"},{"type":"function","title":"zip.zip_close/1","doc":"Closes a zip archive, previously opened with [`zip_open/1,2`](`zip_open/1`). All\nresources are closed, and the handle is not to be used after closing.","ref":"zip.html#zip_close/1"},{"type":"type","title":"zip.zip_comment/0","doc":"The record `zip_comment` only contains the archive comment for a zip archive.","ref":"zip.html#t:zip_comment/0"},{"type":"type","title":"zip.zip_file/0","doc":"The record `zip_file` contains the following fields:\n\n- **`name`** - The filename\n\n- **`info`** - File information as in `file:read_file_info/1` in Kernel.\n  `mtime`, `atime` and `ctime` are expected to be\n  in [`local time`](`erlang:localtime/0`) if represented using `t:calendar:datetime/0`,\n  or in [OS system time](`e:erts:time_correction.md#os-system-time`) if represented by an integer.\n\n- **`comment`** - The comment for the file in the zip archive\n\n- **`offset`** - The file offset in the zip archive (used internally)\n\n- **`comp_size`** - The size of the compressed file (the size of the\n  uncompressed file is found in `info`)","ref":"zip.html#t:zip_file/0"},{"type":"function","title":"zip.zip_get/1","doc":"","ref":"zip.html#zip_get/1"},{"type":"function","title":"zip.zip_get/2","doc":"Extracts one or all files from an open archive.\n\nThe files are unzipped to memory or to file, depending on the options specified\nto function [`zip_open/1,2`](`zip_open/1`) when opening the archive.","ref":"zip.html#zip_get/2"},{"type":"function","title":"zip.zip_get_crc32/2","doc":"Extracts one crc32 checksum from an open archive.","ref":"zip.html#zip_get_crc32/2"},{"type":"function","title":"zip.zip_list_dir/1","doc":"Returns the file list of an open zip archive. The first returned element is the\nzip archive comment.","ref":"zip.html#zip_list_dir/1"},{"type":"function","title":"zip.zip_open/1","doc":"","ref":"zip.html#zip_open/1"},{"type":"function","title":"zip.zip_open/2","doc":"Opens a zip archive, and reads and saves its directory. This means that later\nreading files from the archive is faster than unzipping files one at a time with\n[`unzip/1,2`](`unzip/1`).\n\nThe options are equivalent to those in `unzip/2`.\n\nThe archive must be closed with `zip_close/1`.\n\nThe `ZipHandle` is closed if the process that originally opened the archive\ndies.","ref":"zip.html#zip_open/2"},{"type":"module","title":"beam_lib","doc":"This module provides an interface to files created by the BEAM Compiler (\"BEAM\nfiles\").\n\nThe format used, a variant of \"EA IFF 1985\" Standard for Interchange Format Files,\ndivides data into chunks.\n\nChunk data can be returned as binaries or as compound terms. Compound terms are\nreturned when chunks are referenced by names (atoms) rather than identifiers\n(strings). The recognized names and the corresponding identifiers are as\nfollows:\n\n- `atoms (\"Atom\")`\n- `attributes (\"Attr\")`\n- `compile_info (\"CInf\")`\n- `debug_info (\"Dbgi\")`\n- `exports (\"ExpT\")`\n- `imports (\"ImpT\")`\n- `indexed_imports (\"ImpT\")`\n- `labeled_exports (\"ExpT\")`\n- `labeled_locals (\"LocT\")`\n- `locals (\"LocT\")`\n- `documentation (\"Docs\")`\n\n[](){: #debug_info }","ref":"beam_lib.html"},{"type":"module","title":"Debug Information/Abstract Code - beam_lib","doc":"Option `debug_info` can be specified to the Compiler (see\n[`compile`](`m:compile#debug_info`)) to have debug information, such as\n[Erlang Abstract Format](`e:erts:absform.md`), stored in the `debug_info` chunk.\nTools such as Debugger and Xref require the debug information to be included.\n\n> #### Warning {: .warning }\n>\n> Source code can be reconstructed from the debug information. To prevent this,\n> use encrypted debug information (see below).\n\nThe debug information can also be removed from BEAM files using `strip/1`,\n`strip_files/1`, and/or `strip_release/1`.","ref":"beam_lib.html#module-debug-information-abstract-code"},{"type":"module","title":"Reconstruct Source Code - beam_lib","doc":"The following example shows how to reconstruct Erlang source code from the debug\ninformation in a BEAM file `Beam`:\n\n```erlang\n{ok,{_,[{abstract_code,{_,AC}}]}} = beam_lib:chunks(Beam,[abstract_code]).\nio:fwrite(\"~s~n\", [erl_prettypr:format(erl_syntax:form_list(AC))]).\n```","ref":"beam_lib.html#module-reconstruct-source-code"},{"type":"module","title":"Encrypted Debug Information - beam_lib","doc":"The debug information can be encrypted to keep the source code secret, but still\nbe able to use tools such as Debugger or Xref.\n\nTo use encrypted debug information, a key must be provided to the compiler and\n`beam_lib`. The key is specified as a string. It is recommended that the string\ncontains at least 32 characters and that both upper and lower case letters as\nwell as digits and special characters are used.\n\nThe default type (and currently the only type) of crypto algorithm is\n`des3_cbc`, three rounds of DES. The key string is scrambled using\n`erlang:md5/1` to generate the keys used for `des3_cbc`.\n\n> #### Note {: .info }\n>\n> As far as we know by the time of writing, it is infeasible to break `des3_cbc`\n> encryption without any knowledge of the key. Therefore, as long as the key is\n> kept safe and is unguessable, the encrypted debug information _should_ be safe\n> from intruders.\n\nThe key can be provided in the following two ways:\n\n1. Use Compiler option `{debug_info_key,Key}`, see\n   [`compile`](`m:compile#debug_info_key`) and function `crypto_key_fun/1` to\n   register a fun that returns the key whenever `beam_lib` must decrypt the\n   debug information.\n\nIf no such fun is registered, `beam_lib` instead searches for an `.erlang.crypt`\nfile, see the next section.\n\n1. Store the key in a text file named `.erlang.crypt`.\n\nIn this case, Compiler option `encrypt_debug_info` can be used, see\n[`compile`](`m:compile#encrypt_debug_info`).\n\n## .erlang.crypt\n\n`beam_lib` searches for `.erlang.crypt` in the current directory, then the\n[user's home directory](`m:init#home`) and then\n[`filename:basedir(user_config, \"erlang\")`](`m:filename#user_config`). If the\nfile is found and contains a key, `beam_lib` implicitly creates a crypto key fun\nand registers it.\n\nFile `.erlang.crypt` is to contain a single list of tuples:\n\n```erlang\n{debug_info, Mode, Module, Key}\n```\n\n`Mode` is the type of crypto algorithm; currently, the only allowed value is\n`des3_cbc`. `Module` is either an atom, in which case `Key` is only used for the\nmodule `Module`, or `[]`, in which case `Key` is used for all modules. `Key` is\nthe non-empty key string.\n\n`Key` in the first tuple where both `Mode` and `Module` match is used.\n\nThe following is an example of an `.erlang.crypt` file that returns the same key\nfor all modules:\n\n```erlang\n[{debug_info, des3_cbc, [], \"%>7}|pc/DM6Cga*68$Mw]L#&_Gejr]G^\"}].\n```\n\nThe following is a slightly more complicated example of an `.erlang.crypt`\nproviding one key for module `t` and another key for all other modules:\n\n```erlang\n[{debug_info, des3_cbc, t, \"My KEY\"},\n {debug_info, des3_cbc, [], \"%>7}|pc/DM6Cga*68$Mw]L#&_Gejr]G^\"}].\n```\n\n> #### Note {: .info }\n>\n> Do not use any of the keys in these examples. Use your own keys.","ref":"beam_lib.html#module-encrypted-debug-information"},{"type":"type","title":"beam_lib.abst_code/0","doc":"It is not checked that the forms conform to the abstract format indicated by\n`AbstVersion`. `no_abstract_code` means that chunk `\"Abst\"` is present, but\nempty.\n\nFor modules compiled with OTP 20 onwards, the `abst_code` chunk is automatically\ncomputed from the `debug_info` chunk.","ref":"beam_lib.html#t:abst_code/0"},{"type":"function","title":"beam_lib.all_chunks/1","doc":"Reads chunk data for all chunks.","ref":"beam_lib.html#all_chunks/1"},{"type":"type","title":"beam_lib.attrib_entry/0","doc":"","ref":"beam_lib.html#t:attrib_entry/0"},{"type":"type","title":"beam_lib.beam/0","doc":"Each of the functions described below accept either the filename (as a string)\nor a binary containing the BEAM module.","ref":"beam_lib.html#t:beam/0"},{"type":"function","title":"beam_lib.build_module/1","doc":"Builds a BEAM module (as a binary) from a list of chunks.","ref":"beam_lib.html#build_module/1"},{"type":"type","title":"beam_lib.chnk_rsn/0","doc":"","ref":"beam_lib.html#t:chnk_rsn/0"},{"type":"type","title":"beam_lib.chunkdata/0","doc":"The list of attributes is sorted on `Attribute` (in `t:attrib_entry/0`) and each\nattribute name occurs once in the list. The attribute values occur in the same\norder as in the file. The lists of functions are also sorted.","ref":"beam_lib.html#t:chunkdata/0"},{"type":"type","title":"beam_lib.chunkid/0","doc":"`\"Attr\" | \"CInf\" | \"Dbgi\" | \"ExpT\" | \"ImpT\" | \"LocT\" | \"AtU8\" | \"Docs\"`","ref":"beam_lib.html#t:chunkid/0"},{"type":"type","title":"beam_lib.chunkname/0","doc":"","ref":"beam_lib.html#t:chunkname/0"},{"type":"type","title":"beam_lib.chunkref/0","doc":"","ref":"beam_lib.html#t:chunkref/0"},{"type":"function","title":"beam_lib.chunks/2","doc":"Reads chunk data for selected chunks references. The order of the returned list\nof chunk data is determined by the order of the list of chunks references.","ref":"beam_lib.html#chunks/2"},{"type":"function","title":"beam_lib.chunks/3","doc":"Reads chunk data for selected chunks references. The order of the returned list\nof chunk data is determined by the order of the list of chunks references.\n\nBy default, if any requested chunk is missing in `Beam`, an `error` tuple is\nreturned. However, if option `allow_missing_chunks` is specified, a result is\nreturned even if chunks are missing. In the result list, any missing chunks are\nrepresented as `{ChunkRef,missing_chunk}`. Notice however that if chunk `\"Atom\"`\nis missing, that is considered a fatal error and the return value is an `error`\ntuple.","ref":"beam_lib.html#chunks/3"},{"type":"function","title":"beam_lib.clear_crypto_key_fun/0","doc":"Unregisters the crypto key fun and terminates the process holding it, started by\n`crypto_key_fun/1`.\n\nReturns either `{ok, undefined}` if no crypto key fun is registered, or\n`{ok, Term}`, where `Term` is the return value from `CryptoKeyFun(clear)`, see\n[`crypto_key_fun/1`](`crypto_key_fun/1`).","ref":"beam_lib.html#clear_crypto_key_fun/0"},{"type":"function","title":"beam_lib.cmp/2","doc":"Compares the contents of two BEAM files.\n\nIf the module names are the same, and all chunks except for chunk `\"CInf\"`\n(the chunk containing the compilation information that is returned by\n`Module:module_info(compile)`) have the same contents in both files, `ok` is\nreturned. Otherwise an error message is returned.","ref":"beam_lib.html#cmp/2"},{"type":"function","title":"beam_lib.cmp_dirs/2","doc":"Compares the BEAM files in two directories.\n\nOnly files with extension `\".beam\"` are compared. BEAM files that exist only in\ndirectory `Dir1` (`Dir2`) are returned in `Only1` (`Only2`). BEAM files that\nexist in both directories but are considered different by [`cmp/2`](`cmp/2`) are\n returned as pairs \\{`Filename1`, `Filename2`\\}, where `Filename1` (`Filename2`)\nexists in directory `Dir1` (`Dir2`).","ref":"beam_lib.html#cmp_dirs/2"},{"type":"type","title":"beam_lib.cmp_rsn/0","doc":"","ref":"beam_lib.html#t:cmp_rsn/0"},{"type":"type","title":"beam_lib.compinfo_entry/0","doc":"","ref":"beam_lib.html#t:compinfo_entry/0"},{"type":"type","title":"beam_lib.crypto_fun/0","doc":"","ref":"beam_lib.html#t:crypto_fun/0"},{"type":"type","title":"beam_lib.crypto_fun_arg/0","doc":"","ref":"beam_lib.html#t:crypto_fun_arg/0"},{"type":"function","title":"beam_lib.crypto_key_fun/1","doc":"Registers an unary fun that is called if `beam_lib` must read an `debug_info`\nchunk that has been encrypted. The fun is held in a process that is started by\nthe function.\n\nIf a fun is already registered when attempting to register a fun,\n`{error, exists}` is returned.\n\nThe fun must handle the following arguments:\n\n```erlang\nCryptoKeyFun(init) -> ok | {ok, NewCryptoKeyFun} | {error, Term}\n```\n\nCalled when the fun is registered, in the process that holds the fun. Here the\ncrypto key fun can do any necessary initializations. If `{ok, NewCryptoKeyFun}`\nis returned, `NewCryptoKeyFun` is registered instead of `CryptoKeyFun`. If\n`{error, Term}` is returned, the registration is aborted and\n[`crypto_key_fun/1`](`crypto_key_fun/1`) also returns `{error, Term}`.\n\n```erlang\nCryptoKeyFun({debug_info, Mode, Module, Filename}) -> Key\n```\n\nCalled when the key is needed for module `Module` in the file named `Filename`.\n`Mode` is the type of crypto algorithm; currently, the only possible value is\n`des3_cbc`. The call is to fail (raise an exception) if no key is available.\n\n```text\nCryptoKeyFun(clear) -> term()\n```\n\nCalled before the fun is unregistered. Here any cleaning up can be done. The\nreturn value is not important, but is passed back to the caller of\n`clear_crypto_key_fun/0` as part of its return value.","ref":"beam_lib.html#crypto_key_fun/1"},{"type":"type","title":"beam_lib.dataB/0","doc":"","ref":"beam_lib.html#t:dataB/0"},{"type":"type","title":"beam_lib.debug_info/0","doc":"The format stored in the `debug_info` chunk.\n\nTo retrieve particular code representation from the backend,\n`Backend:debug_info(Format, Module, Data, Opts)` must be invoked. `Format` is an\natom, such as `erlang_v1` for the Erlang Abstract Format or `core_v1` for Core\nErlang. `Module` is the module represented by the beam file and `Data` is the\nvalue stored in the debug info chunk. `Opts` is any list of values supported by\nthe `Backend`. `Backend:debug_info/4` must return `{ok, Code}` or\n`{error, Term}`.\n\nDevelopers must always invoke the `debug_info/4` function and never rely on the\n`Data` stored in the `debug_info` chunk, as it is opaque and may change at any\nmoment. `no_debug_info` means that chunk `\"Dbgi\"` is present, but empty.","ref":"beam_lib.html#t:debug_info/0"},{"type":"function","title":"beam_lib.diff_dirs/2","doc":"Compares the BEAM files in two directories as `cmp_dirs/2`, but the names of\nfiles that exist in only one directory or are different are presented on\nstandard output.","ref":"beam_lib.html#diff_dirs/2"},{"type":"type","title":"beam_lib.docs/0","doc":"[EEP-48 documentation format](`e:kernel:eep48_chapter.md#the-docs-format`)","ref":"beam_lib.html#t:docs/0"},{"type":"function","title":"beam_lib.format_error/1","doc":"For a specified error returned by any function in this module, this function\nreturns a descriptive string of the error in English. For file errors, function\n[`file:format_error(Posix)`](`file:format_error/1`) is to be called.","ref":"beam_lib.html#format_error/1"},{"type":"type","title":"beam_lib.forms/0","doc":"","ref":"beam_lib.html#t:forms/0"},{"type":"type","title":"beam_lib.index/0","doc":"","ref":"beam_lib.html#t:index/0"},{"type":"function","title":"beam_lib.info/1","doc":"Returns a list containing some information about a BEAM file as tuples\n`{Item, Info}`:\n\n- **`{file, Filename} | {binary, Binary}`** - The name (string) of the BEAM\n  file, or the binary from which the information was extracted.\n\n- **`{module, Module}`** - The name (atom) of the module.\n\n- **`{chunks, [{ChunkId, Pos, Size}]}`** - For each chunk, the identifier\n  (string) and the position and size of the chunk data, in bytes.","ref":"beam_lib.html#info/1"},{"type":"type","title":"beam_lib.info_rsn/0","doc":"","ref":"beam_lib.html#t:info_rsn/0"},{"type":"type","title":"beam_lib.label/0","doc":"","ref":"beam_lib.html#t:label/0"},{"type":"type","title":"beam_lib.labeled_entry/0","doc":"","ref":"beam_lib.html#t:labeled_entry/0"},{"type":"function","title":"beam_lib.md5/1","doc":"Calculates an MD5 redundancy check for the code of the module (compilation date\nand other attributes are not included).","ref":"beam_lib.html#md5/1"},{"type":"type","title":"beam_lib.mode/0","doc":"","ref":"beam_lib.html#t:mode/0"},{"type":"function","title":"beam_lib.strip/1","doc":"Removes all chunks from a BEAM file except those used by the loader.\n\nIn particular, the debug information (chunk `debug_info` and `abstract_code`) is\nremoved.","ref":"beam_lib.html#strip/1"},{"type":"function","title":"beam_lib.strip/2","doc":"Removes all chunks from a BEAM file except those used by the loader or mentioned\nin `AdditionalChunks`.\n\nIn particular, the debug information (chunk `debug_info` and `abstract_code`) is removed.","ref":"beam_lib.html#strip/2"},{"type":"function","title":"beam_lib.strip_files/1","doc":"Removes all chunks except those used by the loader from `Files`.\n\nIn particular, the debug information (chunk `debug_info` and `abstract_code`) is\nremoved. The returned list contains one element for each specified filename, in\nthe same order as in `Files`.","ref":"beam_lib.html#strip_files/1"},{"type":"function","title":"beam_lib.strip_files/2","doc":"Removes all chunks except those used by the loader or mentioned in\n`AdditionalChunks` from `Files`.\n\nIn particular, the debug information (chunk `debug_info` and `abstract_code`) is\nremoved. The returned list contains one element for each specified filename,\nin the same order as in `Files`.","ref":"beam_lib.html#strip_files/2"},{"type":"function","title":"beam_lib.strip_release/1","doc":"Removes all chunks except those used by the loader from the BEAM files of a\nrelease.\n\n`Dir` is to be the installation root directory. For example, the current OTP\nrelease can be stripped with the call `beam_lib:strip_release(code:root_dir())`.","ref":"beam_lib.html#strip_release/1"},{"type":"function","title":"beam_lib.strip_release/2","doc":"Removes all chunks except those used by the loader or mentioned in\n`AdditionalChunks`.\n\n`Dir` is to be the installation root directory. For example, the current OTP\nrelease can be stripped with the call `beam_lib:strip_release(code:root_dir(),[documentation])`.","ref":"beam_lib.html#strip_release/2"},{"type":"function","title":"beam_lib.version/1","doc":"Returns the module version or versions. A version is defined by module attribute\n`-vsn(Vsn)`.\n\nIf this attribute is not specified, the version defaults to the\nchecksum of the module. Notice that if version `Vsn` is not a list, it is made\ninto one, that is `{ok,{Module,[Vsn]}}` is returned. If there are many `-vsn`\nmodule attributes, the result is the concatenated list of versions.\n\n_Examples:_\n\n```erlang\n1> beam_lib:version(a). % -vsn(1).\n{ok,{a,[1]}}\n2> beam_lib:version(b). % -vsn([1]).\n{ok,{b,[1]}}\n3> beam_lib:version(c). % -vsn([1]). -vsn(2).\n{ok,{c,[1,2]}}\n4> beam_lib:version(d). % no -vsn attribute\n{ok,{d,[275613208176997377698094100858909383631]}}\n```","ref":"beam_lib.html#version/1"},{"type":"module","title":"epp","doc":"An Erlang code preprocessor.\n\nThe Erlang code preprocessor includes functions that are used by the `m:compile`\nmodule to preprocess macros and include files before the parsing takes place.\n\nThe Erlang source file _encoding_{: #encoding } is selected by a comment in one\nof the first two lines of the source file. The first string matching the regular\nexpression `coding\\s*[:=]\\s*([-a-zA-Z0-9])+` selects the encoding. If the\nmatching string is not a valid encoding, it is ignored. The valid encodings are\n`Latin-1` and `UTF-8`, where the case of the characters can be chosen freely.\n\n_Examples:_\n\n```erlang\n%% coding: utf-8\n```\n\n```erlang\n%% For this file we have chosen encoding = Latin-1\n```\n\n```erlang\n%% -*- coding: latin-1 -*-\n```","ref":"epp.html"},{"type":"module","title":"Error Information - epp","doc":"`ErrorInfo` is the standard `ErrorInfo` structure that is returned from all I/O\nmodules. The format is as follows:\n\n```erlang\n{ErrorLine, Module, ErrorDescriptor}\n```\n\nA string describing the error is obtained with the following call:\n\n```erlang\nModule:format_error(ErrorDescriptor)\n```","ref":"epp.html#module-error-information"},{"type":"module","title":"See Also - epp","doc":"`m:erl_parse`","ref":"epp.html#module-see-also"},{"type":"function","title":"epp.close/1","doc":"Closes the preprocessing of a file.","ref":"epp.html#close/1"},{"type":"function","title":"epp.default_encoding/0","doc":"Returns the default encoding of Erlang source files.","ref":"epp.html#default_encoding/0"},{"type":"function","title":"epp.encoding_to_string/1","doc":"Returns a string representation of an encoding. The string is recognized by\n[`read_encoding/1,2`](`read_encoding/1`),\n[`read_encoding_from_binary/1,2`](`read_encoding_from_binary/1`), and\n[`set_encoding/1,2`](`set_encoding/1`) as a valid encoding.","ref":"epp.html#encoding_to_string/1"},{"type":"type","title":"epp.epp_handle/0","doc":"Handle to the `epp` server.","ref":"epp.html#t:epp_handle/0"},{"type":"function","title":"epp.format_error/1","doc":"Takes an `ErrorDescriptor` and returns a string that describes the error or\nwarning. This function is usually called implicitly when processing an\n`ErrorInfo` structure (see section [Error Information](`m:epp#module-error-information`)).","ref":"epp.html#format_error/1"},{"type":"type","title":"epp.macros/0","doc":"","ref":"epp.html#t:macros/0"},{"type":"function","title":"epp.open/1","doc":"Opens a file for preprocessing.\n\nIf you want to change the file name of the implicit -file() attributes inserted\nduring preprocessing, you can do with `{source_name, SourceName}`. If unset it\nwill default to the name of the opened file.\n\nSetting `{deterministic, Enabled}` will additionally reduce the file name of the\nimplicit -file() attributes inserted during preprocessing to only the basename\nof the path.\n\nIf `extra` is specified in `Options`, the return value is `{ok, Epp, Extra}`\ninstead of `{ok, Epp}`.\n\nThe option `location` is forwarded to the Erlang token scanner, see\n[`erl_scan:tokens/3,4`](`erl_scan:tokens/3`).\n\nThe `{compiler_internal,term()}` option is forwarded to the Erlang token\nscanner, see [`{compiler_internal,term()}`](`m:erl_scan#compiler_interal`).","ref":"epp.html#open/1"},{"type":"function","title":"epp.open/2","doc":"Equivalent to `epp:open([{name, FileName}, {includes, IncludePath}])`.","ref":"epp.html#open/2"},{"type":"function","title":"epp.open/3","doc":"Equivalent to\n`epp:open([{name, FileName}, {includes, IncludePath}, {macros, PredefMacros}])`.","ref":"epp.html#open/3"},{"type":"function","title":"epp.parse_erl_form/1","doc":"Returns the next Erlang form from the opened Erlang source file. Tuple\n`{eof, Location}` is returned at the end of the file. The first form corresponds\nto an implicit attribute `-file(File,1).`, where `File` is the file name.","ref":"epp.html#parse_erl_form/1"},{"type":"function","title":"epp.parse_file/2","doc":"Preprocesses and parses an Erlang source file. Notice that tuple\n`{eof, Location}` returned at the end of the file is included as a \"form\".\n\nIf you want to change the file name of the implicit -file() attributes inserted\nduring preprocessing, you can do with `{source_name, SourceName}`. If unset it\nwill default to the name of the opened file.\n\nIf `extra` is specified in `Options`, the return value is `{ok, [Form], Extra}`\ninstead of `{ok, [Form]}`.\n\nThe option `location` is forwarded to the Erlang token scanner, see\n[`erl_scan:tokens/3,4`](`erl_scan:tokens/3`).\n\nThe `{compiler_internal,term()}` option is forwarded to the Erlang token\nscanner, see [`{compiler_internal,term()}`](`m:erl_scan#compiler_interal`).","ref":"epp.html#parse_file/2"},{"type":"function","title":"epp.parse_file/3","doc":"Equivalent to\n`epp:parse_file(FileName, [{includes, IncludePath}, {macros, PredefMacros}])`.","ref":"epp.html#parse_file/3"},{"type":"function","title":"epp.read_encoding/1","doc":"","ref":"epp.html#read_encoding/1"},{"type":"function","title":"epp.read_encoding/2","doc":"Read the [encoding](`m:epp#encoding`) from a file. Returns the read encoding, or\n`none` if no valid encoding is found.\n\nOption `in_comment_only` is `true` by default, which is correct for Erlang\nsource files. If set to `false`, the encoding string does not necessarily have\nto occur in a comment.","ref":"epp.html#read_encoding/2"},{"type":"function","title":"epp.read_encoding_from_binary/1","doc":"","ref":"epp.html#read_encoding_from_binary/1"},{"type":"function","title":"epp.read_encoding_from_binary/2","doc":"Read the [encoding](`m:epp#encoding`) from a binary. Returns the read encoding,\nor `none` if no valid encoding is found.\n\nOption `in_comment_only` is `true` by default, which is correct for Erlang\nsource files. If set to `false`, the encoding string does not necessarily have\nto occur in a comment.","ref":"epp.html#read_encoding_from_binary/2"},{"type":"function","title":"epp.scan_erl_form/1","doc":"Returns the raw tokens of the next Erlang form from the opened Erlang source\nfile. A tuple `{eof, Line}` is returned at the end of the file. The first form\ncorresponds to an implicit attribute `-file(File,1).`, where `File` is the file\nname.","ref":"epp.html#scan_erl_form/1"},{"type":"function","title":"epp.scan_file/2","doc":"Preprocesses an Erlang source file returning a list of the lists of raw tokens\nof each form. Notice that the tuple `{eof, Line}` returned at the end of the\nfile is included as a \"form\", and any failures to scan a form are included in\nthe list as tuples `{error, ErrorInfo}`.","ref":"epp.html#scan_file/2"},{"type":"function","title":"epp.set_encoding/1","doc":"Reads the [encoding](`m:epp#encoding`) from an I/O device and sets the encoding\nof the device accordingly. The position of the I/O device referenced by `File`\nis not affected. If no valid encoding can be read from the I/O device, the\nencoding of the I/O device is set to the default encoding.\n\nReturns the read encoding, or `none` if no valid encoding is found.","ref":"epp.html#set_encoding/1"},{"type":"function","title":"epp.set_encoding/2","doc":"Reads the [encoding](`m:epp#encoding`) from an I/O device and sets the encoding\nof the device accordingly. The position of the I/O device referenced by `File`\nis not affected. If no valid encoding can be read from the I/O device, the\nencoding of the I/O device is set to the [encoding](`m:epp#encoding`) specified\nby `Default`.\n\nReturns the read encoding, or `none` if no valid encoding is found.","ref":"epp.html#set_encoding/2"},{"type":"type","title":"epp.source_encoding/0","doc":"","ref":"epp.html#t:source_encoding/0"},{"type":"type","title":"epp.warning_info/0","doc":"","ref":"epp.html#t:warning_info/0"},{"type":"module","title":"erl_anno","doc":"Abstract datatype for the annotations of the Erlang Compiler.\n\nThis module provides an abstract type that is used by the Erlang Compiler and\nits helper modules for holding data such as column, line number, and text. The\ndata type is a collection of _annotations_{: #annotations } as described in the\nfollowing.\n\nThe Erlang Token Scanner returns tokens with a subset of the following\nannotations, depending on the options:\n\n- **`column`** - The column where the token begins.\n\n- **`location`** - The line and column where the token begins, or just the line\n  if the column is unknown.\n\n- **`text`** - The token's text.\n\nFrom this, the following annotation is derived:\n\n- **`line`** - The line where the token begins.\n\nThis module also supports the following annotations, which are used by various\nmodules:\n\n- **`file`** - A filename.\n\n- **`generated`** - A Boolean indicating if the abstract code is\n  compiler-generated. The Erlang Compiler does not emit warnings for such code.\n\n- **`record`** - A Boolean indicating if the origin of the abstract code is a\n  record. Used by [Dialyzer](`m:dialyzer`) to assign types to tuple elements.\n\nThe functions [`column()`](`erl_scan:column/1`),\n[`end_location()`](`erl_scan:end_location/1`), [`line()`](`erl_scan:line/1`),\n[`location()`](`erl_scan:location/1`), and [`text()`](`erl_scan:text/1`) in the\n`erl_scan` module can be used for inspecting annotations in tokens.\n\nThe functions [`anno_from_term()`](`erl_parse:anno_from_term/1`),\n[`anno_to_term()`](`erl_parse:anno_to_term/1`),\n[`fold_anno()`](`erl_parse:fold_anno/3`),\n[`map_anno()`](`erl_parse:map_anno/2`),\n[`mapfold_anno()`](`erl_parse:mapfold_anno/3`), and\n[`new_anno()`](`erl_parse:new_anno/1`), in the `erl_parse` module can be used\nfor manipulating annotations in abstract code.","ref":"erl_anno.html"},{"type":"module","title":"See Also - erl_anno","doc":"`m:erl_parse`, `m:erl_scan`","ref":"erl_anno.html#module-see-also"},{"type":"opaque","title":"erl_anno.anno/0","doc":"A collection of annotations.","ref":"erl_anno.html#t:anno/0"},{"type":"type","title":"erl_anno.anno_term/0","doc":"The term representing a collection of annotations. It is either a `t:location/0`\nor a list of key-value pairs.","ref":"erl_anno.html#t:anno_term/0"},{"type":"type","title":"erl_anno.column/0","doc":"","ref":"erl_anno.html#t:column/0"},{"type":"function","title":"erl_anno.column/1","doc":"Returns the column of the annotations Anno.","ref":"erl_anno.html#column/1"},{"type":"function","title":"erl_anno.end_location/1","doc":"Returns the end location of the text of the annotations Anno. If there is no\ntext, `undefined` is returned.","ref":"erl_anno.html#end_location/1"},{"type":"function","title":"erl_anno.file/1","doc":"Returns the filename of the annotations Anno. If there is no filename,\n`undefined` is returned.","ref":"erl_anno.html#file/1"},{"type":"type","title":"erl_anno.filename/0","doc":"","ref":"erl_anno.html#t:filename/0"},{"type":"function","title":"erl_anno.from_term/1","doc":"Returns annotations with representation Term.\n\nSee also [to_term()](`to_term/1`).","ref":"erl_anno.html#from_term/1"},{"type":"type","title":"erl_anno.generated/0","doc":"","ref":"erl_anno.html#t:generated/0"},{"type":"function","title":"erl_anno.generated/1","doc":"Returns `true` if annotations Anno is marked as generated. The default is to\nreturn `false`.","ref":"erl_anno.html#generated/1"},{"type":"function","title":"erl_anno.is_anno/1","doc":"Returns `true` if Term is a collection of annotations, otherwise `false`.","ref":"erl_anno.html#is_anno/1"},{"type":"type","title":"erl_anno.line/0","doc":"","ref":"erl_anno.html#t:line/0"},{"type":"function","title":"erl_anno.line/1","doc":"Returns the line of the annotations Anno.","ref":"erl_anno.html#line/1"},{"type":"type","title":"erl_anno.location/0","doc":"","ref":"erl_anno.html#t:location/0"},{"type":"function","title":"erl_anno.location/1","doc":"Returns the location of the annotations Anno.","ref":"erl_anno.html#location/1"},{"type":"function","title":"erl_anno.new/1","doc":"Creates a new collection of annotations given a location.","ref":"erl_anno.html#new/1"},{"type":"type","title":"erl_anno.record/0","doc":"","ref":"erl_anno.html#t:record/0"},{"type":"function","title":"erl_anno.set_file/2","doc":"Modifies the filename of the annotations Anno.","ref":"erl_anno.html#set_file/2"},{"type":"function","title":"erl_anno.set_generated/2","doc":"Modifies the generated marker of the annotations Anno.","ref":"erl_anno.html#set_generated/2"},{"type":"function","title":"erl_anno.set_line/2","doc":"Modifies the line of the annotations Anno.","ref":"erl_anno.html#set_line/2"},{"type":"function","title":"erl_anno.set_location/2","doc":"Modifies the location of the annotations Anno.","ref":"erl_anno.html#set_location/2"},{"type":"function","title":"erl_anno.set_record/2","doc":"Modifies the record marker of the annotations Anno.","ref":"erl_anno.html#set_record/2"},{"type":"function","title":"erl_anno.set_text/2","doc":"Modifies the text of the annotations Anno.","ref":"erl_anno.html#set_text/2"},{"type":"type","title":"erl_anno.text/0","doc":"","ref":"erl_anno.html#t:text/0"},{"type":"function","title":"erl_anno.text/1","doc":"Returns the text of the annotations Anno. If there is no text, `undefined` is\nreturned.","ref":"erl_anno.html#text/1"},{"type":"function","title":"erl_anno.to_term/1","doc":"Returns the term representing the annotations Anno.\n\nSee also [from_term()](`from_term/1`).","ref":"erl_anno.html#to_term/1"},{"type":"module","title":"erl_eval","doc":"The Erlang meta interpreter.\n\nThis module provides an interpreter for Erlang expressions. The expressions are\nin the abstract syntax as returned by `m:erl_parse`, the Erlang parser, or\n`m:io`.","ref":"erl_eval.html"},{"type":"module","title":"Local Function Handler - erl_eval","doc":"During evaluation of a function, no calls can be made to local functions. An\nundefined function error would be generated. However, the optional argument\n`LocalFunctionHandler` can be used to define a function that is called when\nthere is a call to a local function. The argument can have the following\nformats:\n\n- **`{value,Func}`** - This defines a local function handler that is called\n  with:\n\n  ```erlang\n  Func(Name, Arguments)\n  ```\n\n  `Name` is the name of the local function (an atom) and `Arguments` is a list\n  of the _evaluated_ arguments. The function handler returns the value of the\n  local function. In this case, the current bindings cannot be accessed. To\n  signal an error, the function handler calls [`exit/1`](`exit/1`) with a\n  suitable exit value.\n\n- **`{eval,Func}`** - This defines a local function handler that is called with:\n\n  ```erlang\n  Func(Name, Arguments, Bindings)\n  ```\n\n  `Name` is the name of the local function (an atom), `Arguments` is a list of\n  the _unevaluated_ arguments, and `Bindings` are the current variable bindings.\n  The function handler returns:\n\n  ```erlang\n  {value,Value,NewBindings}\n  ```\n\n  `Value` is the value of the local function and `NewBindings` are the updated\n  variable bindings. In this case, the function handler must itself evaluate all\n  the function arguments and manage the bindings. To signal an error, the\n  function handler calls [`exit/1`](`exit/1`) with a suitable exit value.\n\n- **`none`** - There is no local function handler.","ref":"erl_eval.html#module-local-function-handler"},{"type":"module","title":"Non-Local Function Handler - erl_eval","doc":"The optional argument `NonLocalFunctionHandler` can be used to define a function\nthat is called in the following cases:\n\n- A functional object (fun) is called.\n- A built-in function is called.\n- A function is called using the `M:F` syntax, where `M` and `F` are atoms or\n  expressions.\n- An operator `Op/A` is called (this is handled as a call to function\n  `erlang:Op/A`).\n\nExceptions are calls to `erlang:apply/2,3`; neither of the function handlers are\ncalled for such calls. The argument can have the following formats:\n\n- **`{value,Func}`** - This defines a non-local function handler. The function\n  may be called with two arguments:\n\n  ```erlang\n  Func(FuncSpec, Arguments)\n  ```\n\n  or three arguments:\n\n  ```erlang\n  Func(Anno, FuncSpec, Arguments)\n  ```\n\n  `Anno` is the [`erl_anno:anno()`](`t:erl_anno:anno/0`) of the node, `FuncSpec`\n  is the name of the function on the form `{Module,Function}` or a fun, and\n  `Arguments` is a list of the _evaluated_ arguments. The function handler\n  returns the value of the function. To signal an error, the function handler\n  calls [`exit/1`](`exit/1`) with a suitable exit value.\n\n- **`none`** - There is no non-local function handler.\n\n> #### Note {: .info }\n>\n> For calls such as `erlang:apply(Fun, Args)` or\n> `erlang:apply(Module, Function, Args)`, the call of the non-local function\n> handler corresponding to the call to `erlang:apply/2,3` itself\n> (`Func({erlang, apply}, [Fun, Args])` or\n> `Func({erlang, apply}, [Module, Function, Args])`) never takes place.\n>\n> The non-local function handler _is_ however called with the evaluated\n> arguments of the call to `erlang:apply/2,3`: `Func(Fun, Args)` or\n> `Func({Module, Function}, Args)` (assuming that `{Module, Function}` is not\n> `{erlang, apply}`).\n>\n> Calls to functions defined by evaluating fun expressions `\"fun ... end\"` are\n> also hidden from non-local function handlers.\n\nThe non-local function handler argument is probably not used as frequently as\nthe local function handler argument. A possible use is to call\n[`exit/1`](`exit/1`) on calls to functions that for some reason are not allowed\nto be called.","ref":"erl_eval.html#module-non-local-function-handler"},{"type":"function","title":"erl_eval.add_binding/3","doc":"Adds binding `Name=Value` to `BindingStruct`. Returns an updated binding\nstructure.","ref":"erl_eval.html#add_binding/3"},{"type":"function","title":"erl_eval.binding/2","doc":"Returns the binding of `Name` in `BindingStruct`.","ref":"erl_eval.html#binding/2"},{"type":"type","title":"erl_eval.binding_struct/0","doc":"A binding structure. It is either a `map` or an `orddict`. `erl_eval` will\nalways return the same type as the one given.","ref":"erl_eval.html#t:binding_struct/0"},{"type":"type","title":"erl_eval.bindings/0","doc":"","ref":"erl_eval.html#t:bindings/0"},{"type":"function","title":"erl_eval.bindings/1","doc":"Returns the list of bindings contained in the binding structure.","ref":"erl_eval.html#bindings/1"},{"type":"function","title":"erl_eval.del_binding/2","doc":"Removes the binding of `Name` in `BindingStruct`. Returns an updated binding\nstructure.","ref":"erl_eval.html#del_binding/2"},{"type":"function","title":"erl_eval.expr/2","doc":"","ref":"erl_eval.html#expr/2"},{"type":"function","title":"erl_eval.expr/3","doc":"","ref":"erl_eval.html#expr/3"},{"type":"function","title":"erl_eval.expr/4","doc":"","ref":"erl_eval.html#expr/4"},{"type":"function","title":"erl_eval.expr/5","doc":"Evaluates `Expression` with the set of bindings `Bindings`. `Expression` is an\nexpression in abstract syntax.\n\nFor an explanation of when and how to use arguments `LocalFunctionHandler` and\n`NonLocalFunctionHandler`, see sections\n[Local Function Handler](`m:erl_eval#module-local-function-handler`) and\n[Non-Local Function Handler](`m:erl_eval#module-non-local-function-handler`) in this\nmodule.\n\nReturns `{value, Value, NewBindings}` by default. If `ReturnFormat` is `value`,\nonly `Value` is returned.","ref":"erl_eval.html#expr/5"},{"type":"function","title":"erl_eval.expr_list/2","doc":"","ref":"erl_eval.html#expr_list/2"},{"type":"function","title":"erl_eval.expr_list/3","doc":"","ref":"erl_eval.html#expr_list/3"},{"type":"function","title":"erl_eval.expr_list/4","doc":"Evaluates a list of expressions in parallel, using the same initial bindings for\neach expression. Attempts are made to merge the bindings returned from each\nevaluation.\n\nThis function is useful in `LocalFunctionHandler`, see section\n[Local Function Handler](`m:erl_eval#module-local-function-handler`) in this module.\n\nReturns `{ValueList, NewBindings}`.","ref":"erl_eval.html#expr_list/4"},{"type":"type","title":"erl_eval.expression/0","doc":"","ref":"erl_eval.html#t:expression/0"},{"type":"type","title":"erl_eval.expression_list/0","doc":"","ref":"erl_eval.html#t:expression_list/0"},{"type":"type","title":"erl_eval.expressions/0","doc":"As returned by `erl_parse:parse_exprs/1` or `io:parse_erl_exprs/2`.","ref":"erl_eval.html#t:expressions/0"},{"type":"function","title":"erl_eval.exprs/2","doc":"","ref":"erl_eval.html#exprs/2"},{"type":"function","title":"erl_eval.exprs/3","doc":"","ref":"erl_eval.html#exprs/3"},{"type":"function","title":"erl_eval.exprs/4","doc":"Evaluates `Expressions` with the set of bindings `Bindings`, where `Expressions`\nis a sequence of expressions (in abstract syntax) of a type that can be returned\nby `io:parse_erl_exprs/2`.\n\nFor an explanation of when and how to use arguments\n`LocalFunctionHandler` and `NonLocalFunctionHandler`, see sections\n[Local Function Handler](`m:erl_eval#module-local-function-handler`) and\n[Non-Local Function Handler](`m:erl_eval#module-non-local-function-handler`) in this\nmodule.\n\nReturns `{value, Value, NewBindings}`","ref":"erl_eval.html#exprs/4"},{"type":"type","title":"erl_eval.func_spec/0","doc":"","ref":"erl_eval.html#t:func_spec/0"},{"type":"type","title":"erl_eval.lfun_eval_handler/0","doc":"","ref":"erl_eval.html#t:lfun_eval_handler/0"},{"type":"type","title":"erl_eval.lfun_value_handler/0","doc":"","ref":"erl_eval.html#t:lfun_value_handler/0"},{"type":"type","title":"erl_eval.local_function_handler/0","doc":"Further described in section\n[Local Function Handler](`m:erl_eval#module-local-function-handler`) in this module","ref":"erl_eval.html#t:local_function_handler/0"},{"type":"type","title":"erl_eval.name/0","doc":"","ref":"erl_eval.html#t:name/0"},{"type":"function","title":"erl_eval.new_bindings/0","doc":"Returns an empty binding structure.","ref":"erl_eval.html#new_bindings/0"},{"type":"type","title":"erl_eval.nlfun_handler/0","doc":"","ref":"erl_eval.html#t:nlfun_handler/0"},{"type":"type","title":"erl_eval.non_local_function_handler/0","doc":"Further described in section\n[Non-Local Function Handler](`m:erl_eval#module-non-local-function-handler`) in this\nmodule.","ref":"erl_eval.html#t:non_local_function_handler/0"},{"type":"type","title":"erl_eval.value/0","doc":"","ref":"erl_eval.html#t:value/0"},{"type":"module","title":"erl_expand_records","doc":"This module expands records in a module.","ref":"erl_expand_records.html"},{"type":"module","title":"See Also - erl_expand_records","doc":"Section [The Abstract Format](`e:erts:absform.md`) in ERTS User's Guide.","ref":"erl_expand_records.html#module-see-also"},{"type":"function","title":"erl_expand_records.module/2","doc":"Expands all records in a module to use explicit tuple operations and adds\nexplicit module names to calls to BIFs and imported functions. The returned\nmodule has no references to records, attributes, or code.","ref":"erl_expand_records.html#module/2"},{"type":"module","title":"erl_features","doc":"This module contains functions for supporting features that can be\nenabled/disabled in Erlang.\n\nIt should be considered as mostly for internal use, although there are some\nfunctions that might be useful when writing tools.","ref":"erl_features.html"},{"type":"function","title":"erl_features.all/0","doc":"Return a list of all known features. This list will include features that have\nbeen removed (status `rejected`) and features that are no longer configurable\n(status `permanent`).","ref":"erl_features.html#all/0"},{"type":"function","title":"erl_features.configurable/0","doc":"Return a list of all configurable features, that is, features with status\n`experimental` or `approved`. These are the features that can be enabled or\ndisabled.","ref":"erl_features.html#configurable/0"},{"type":"function","title":"erl_features.enabled/0","doc":"Return a list of the features that are currently enabled. Note that the set of\nenabled is set during startup and can then not be changed.","ref":"erl_features.html#enabled/0"},{"type":"type","title":"erl_features.feature/0","doc":"","ref":"erl_features.html#t:feature/0"},{"type":"function","title":"erl_features.info/1","doc":"Return a map containing information about the given feature.","ref":"erl_features.html#info/1"},{"type":"type","title":"erl_features.release/0","doc":"","ref":"erl_features.html#t:release/0"},{"type":"type","title":"erl_features.status/0","doc":"","ref":"erl_features.html#t:status/0"},{"type":"type","title":"erl_features.type/0","doc":"","ref":"erl_features.html#t:type/0"},{"type":"function","title":"erl_features.used/1","doc":"Return the list of features enabled when compiling the module. The module need\nnot be loaded, but is found if it exists in the loadpath. If not all features\nused by the module are enabled in the runtime, loading the module is not\nallowed.","ref":"erl_features.html#used/1"},{"type":"module","title":"erl_id_trans","doc":"This module performs an identity parse transformation of Erlang code.\n\nIt is included as an example for users who wants to write their own\nparse transformers. If option `{parse_transform,Module}` is passed\nto the compiler, a user-written function `parse_transform/2`\nis called by the compiler before the code is checked for errors.\n\nBefore the function `parse_transform/2` is called, the Erlang\nCompiler checks if the parse transformation can handle abstract code\nwith column numbers: If the function `parse_transform_info/0`\nis implemented and returns a map where the key `error_location` is\nassociated with the value `line`, the compiler removes\ncolumn numbers from the abstract code before calling the parse\ntransform. Otherwise, the compiler passes the abstract code on\nwithout modification.","ref":"erl_id_trans.html"},{"type":"module","title":"Parse Transformations - erl_id_trans","doc":"Parse transformations are used if a programmer wants to use\nErlang syntax, but with different semantics. The original Erlang\ncode is then transformed into other Erlang code.\n\n> #### Note {: .info }\n>\n> Programmers are strongly advised not to engage in parse\n> transformations. No support is offered for problems encountered.\n>","ref":"erl_id_trans.html#module-parse-transformations"},{"type":"module","title":"See Also - erl_id_trans","doc":"`m:erl_parse` and `m:compile`.","ref":"erl_id_trans.html#module-see-also"},{"type":"function","title":"erl_id_trans.parse_transform/2","doc":"Performs an identity transformation on Erlang forms, as an example.","ref":"erl_id_trans.html#parse_transform/2"},{"type":"function","title":"erl_id_trans.parse_transform_info/0","doc":"Returns information about the parse transform itself.","ref":"erl_id_trans.html#parse_transform_info/0"},{"type":"module","title":"erl_internal","doc":"Internal Erlang definitions.\n\nThis module defines Erlang BIFs, guard tests, and operators. This module is only\nof interest to programmers who manipulate Erlang code.","ref":"erl_internal.html"},{"type":"function","title":"erl_internal.add_predefined_functions/1","doc":"Adds to `Forms` the code for the standard pre-defined functions (such as\n`module_info/0`) that are to be included in every module.","ref":"erl_internal.html#add_predefined_functions/1"},{"type":"function","title":"erl_internal.arith_op/2","doc":"Returns `true` if `OpName/Arity` is an arithmetic operator, otherwise `false`.","ref":"erl_internal.html#arith_op/2"},{"type":"function","title":"erl_internal.bif/2","doc":"Returns `true` if `Name/Arity` is an Erlang BIF that is automatically recognized\nby the compiler, otherwise `false`.","ref":"erl_internal.html#bif/2"},{"type":"function","title":"erl_internal.bool_op/2","doc":"Returns `true` if `OpName/Arity` is a Boolean operator, otherwise `false`.","ref":"erl_internal.html#bool_op/2"},{"type":"function","title":"erl_internal.comp_op/2","doc":"Returns `true` if `OpName/Arity` is a comparison operator, otherwise `false`.","ref":"erl_internal.html#comp_op/2"},{"type":"function","title":"erl_internal.guard_bif/2","doc":"Returns `true` if `Name/Arity` is an Erlang BIF that is allowed in guards,\notherwise `false`.","ref":"erl_internal.html#guard_bif/2"},{"type":"function","title":"erl_internal.list_op/2","doc":"Returns `true` if `OpName/Arity` is a list operator, otherwise `false`.","ref":"erl_internal.html#list_op/2"},{"type":"function","title":"erl_internal.op_type/2","doc":"Returns the `Type` of operator that `OpName/Arity` belongs to, or generates a\n`function_clause` error if it is not an operator.","ref":"erl_internal.html#op_type/2"},{"type":"function","title":"erl_internal.send_op/2","doc":"Returns `true` if `OpName/Arity` is a send operator, otherwise `false`.","ref":"erl_internal.html#send_op/2"},{"type":"function","title":"erl_internal.type_test/2","doc":"Returns `true` if `Name/Arity` is a valid Erlang type test, otherwise `false`.","ref":"erl_internal.html#type_test/2"},{"type":"module","title":"erl_lint","doc":"The Erlang code linter.\n\nThis module is used to check Erlang code for illegal syntax and other bugs. It\nalso warns against coding practices that are not recommended.\n\nThe errors detected include:\n\n- Redefined and undefined functions\n- Unbound and unsafe variables\n- Illegal record use\n\nThe warnings detected include:\n\n- Unused functions and imports\n- Unused variables\n- Variables imported into matches\n- Variables exported from `if`/`case`/`receive`\n- Variables shadowed in funs and list comprehensions\n\nSome of the warnings are optional, and can be turned on by specifying the\nappropriate option, described below.\n\nThe functions in this module are invoked automatically by the Erlang compiler.\nThere is no reason to invoke these functions separately unless you have written\nyour own Erlang compiler.","ref":"erl_lint.html"},{"type":"module","title":"Error Information - erl_lint","doc":"`ErrorInfo` is the standard `ErrorInfo` structure that is returned from all I/O\nmodules. The format is as follows:\n\n```erlang\n{ErrorLine, Module, ErrorDescriptor}\n```\n\nA string describing the error is obtained with the following call:\n\n```erlang\nModule:format_error(ErrorDescriptor)\n```","ref":"erl_lint.html#module-error-information"},{"type":"module","title":"See Also - erl_lint","doc":"`m:epp`, `m:erl_parse`","ref":"erl_lint.html#module-see-also"},{"type":"type","title":"erl_lint.error_description/0","doc":"","ref":"erl_lint.html#t:error_description/0"},{"type":"type","title":"erl_lint.error_info/0","doc":"","ref":"erl_lint.html#t:error_info/0"},{"type":"type","title":"erl_lint.fa/0","doc":"","ref":"erl_lint.html#t:fa/0"},{"type":"function","title":"erl_lint.format_error/1","doc":"Takes an `ErrorDescriptor` and returns a string that describes the error or\nwarning. This function is usually called implicitly when processing an\n`ErrorInfo` structure (see section [Error Information](`m:erl_lint#module-error-information`)).","ref":"erl_lint.html#format_error/1"},{"type":"type","title":"erl_lint.fun_used_vars/0","doc":"","ref":"erl_lint.html#t:fun_used_vars/0"},{"type":"function","title":"erl_lint.is_guard_test/1","doc":"Tests if `Expr` is a legal guard test. `Expr` is an Erlang term representing the\nabstract form for the expression.\n[`erl_parse:parse_exprs(Tokens)`](`erl_parse:parse_exprs/1`) can be used to\ngenerate a list of `Expr`.","ref":"erl_lint.html#is_guard_test/1"},{"type":"function","title":"erl_lint.module/1","doc":"","ref":"erl_lint.html#module/1"},{"type":"function","title":"erl_lint.module/2","doc":"","ref":"erl_lint.html#module/2"},{"type":"function","title":"erl_lint.module/3","doc":"Checks all the forms in a module for errors. It returns:\n\n- **`{ok,Warnings}`** - There are no errors in the module.\n\n- **`{error,Errors,Warnings}`** - There are errors in the module.\n\nAs this module is of interest only to the maintainers of the compiler, and to\navoid the same description in two places, the elements of `Options` that control\nthe warnings are only described in the [`compile`](`m:compile#erl_lint_options`)\nmodule.\n\n`AbsForms` of a module, which comes from a file that is read through `epp`, the\nErlang preprocessor, can come from many files. This means that any references to\nerrors must include the filename, see the `m:epp` module or parser (see the\n`m:erl_parse` module). The returned errors and warnings have the following\nformat:\n\n```text\n[{SourceFile,[ErrorInfo]}]\n```\n\nThe errors and warnings are listed in the order in which they are encountered in\nthe forms. The errors from one file can therefore be split into different\nentries in the list of errors.","ref":"erl_lint.html#module/3"},{"type":"module","title":"erl_parse","doc":"This module is the basic Erlang parser that converts tokens into the abstract\nform of either forms (that is, top-level constructs), expressions, or terms.\n\nThe Abstract Format is described in the ERTS User's Guide. Notice that a token\nlist must end with the dot token to be acceptable to the parse functions\n(see the `m:erl_scan`) module.","ref":"erl_parse.html"},{"type":"module","title":"Error Information - erl_parse","doc":"ErrorInfo is the standard ErrorInfo structure that is returned from all I/O modules.\nThe format is as follows:\n\n```\n{ErrorLine, Module, ErrorDescriptor}\n```\n\nA string describing the error is obtained with the following call:\n\n```\nModule:format_error(ErrorDescriptor)\n```","ref":"erl_parse.html#module-error-information"},{"type":"module","title":"See Also - erl_parse","doc":"`m:erl_anno`, `m:erl_scan`, `m:io`, section [The Abstract Format](`e:erts:absform`)\nin the ERTS User's Guide.","ref":"erl_parse.html#module-see-also"},{"type":"function","title":"erl_parse.abstract/1","doc":"Converts the Erlang data structure `Data` into an abstract form of type\n`AbsTerm`. This function is the inverse of `normalise/1`.\n\n`erl_parse:abstract(T)` is equivalent to `erl_parse:abstract(T, 0)`.","ref":"erl_parse.html#abstract/1"},{"type":"function","title":"erl_parse.abstract/2","doc":"Converts the Erlang data structure `Data` into an abstract form of type\n`AbsTerm`.\n\nEach node of `AbsTerm` is assigned an annotation, see `m:erl_anno`. The\nannotation contains the location given by option `location` or by option `line`.\nOption `location` overrides option `line`. If neither option `location` nor\noption `line` is given, `0` is used as location.\n\nOption `Encoding` is used for selecting which integer lists to be considered as\nstrings. The default is to use the encoding returned by function\n`epp:default_encoding/0`. Value `none` means that no integer lists are\nconsidered as strings. `encoding_func()` is called with one integer of a list at\na time; if it returns `true` for every integer, the list is considered a string.","ref":"erl_parse.html#abstract/2"},{"type":"type","title":"erl_parse.abstract_clause/0","doc":"Abstract form of an Erlang clause.","ref":"erl_parse.html#t:abstract_clause/0"},{"type":"type","title":"erl_parse.abstract_expr/0","doc":"Abstract form of an Erlang expression.","ref":"erl_parse.html#t:abstract_expr/0"},{"type":"type","title":"erl_parse.abstract_form/0","doc":"Abstract form of an Erlang form.","ref":"erl_parse.html#t:abstract_form/0"},{"type":"type","title":"erl_parse.abstract_type/0","doc":"Abstract form of an Erlang type.","ref":"erl_parse.html#t:abstract_type/0"},{"type":"type","title":"erl_parse.af_anno/0","doc":"","ref":"erl_parse.html#t:af_anno/0"},{"type":"type","title":"erl_parse.af_annotated_type/0","doc":"","ref":"erl_parse.html#t:af_annotated_type/0"},{"type":"type","title":"erl_parse.af_args/0","doc":"","ref":"erl_parse.html#t:af_args/0"},{"type":"type","title":"erl_parse.af_assoc/1","doc":"","ref":"erl_parse.html#t:af_assoc/1"},{"type":"type","title":"erl_parse.af_assoc_exact/1","doc":"","ref":"erl_parse.html#t:af_assoc_exact/1"},{"type":"type","title":"erl_parse.af_assoc_type/0","doc":"","ref":"erl_parse.html#t:af_assoc_type/0"},{"type":"type","title":"erl_parse.af_atom/0","doc":"","ref":"erl_parse.html#t:af_atom/0"},{"type":"type","title":"erl_parse.af_behavior/0","doc":"","ref":"erl_parse.html#t:af_behavior/0"},{"type":"type","title":"erl_parse.af_behaviour/0","doc":"","ref":"erl_parse.html#t:af_behaviour/0"},{"type":"type","title":"erl_parse.af_bin/1","doc":"","ref":"erl_parse.html#t:af_bin/1"},{"type":"type","title":"erl_parse.af_binary_comprehension/0","doc":"","ref":"erl_parse.html#t:af_binary_comprehension/0"},{"type":"type","title":"erl_parse.af_binary_op/1","doc":"","ref":"erl_parse.html#t:af_binary_op/1"},{"type":"type","title":"erl_parse.af_binelement/1","doc":"Abstract representation of an element of a bitstring.","ref":"erl_parse.html#t:af_binelement/1"},{"type":"type","title":"erl_parse.af_binelement_size/0","doc":"","ref":"erl_parse.html#t:af_binelement_size/0"},{"type":"type","title":"erl_parse.af_bitstring_type/0","doc":"","ref":"erl_parse.html#t:af_bitstring_type/0"},{"type":"type","title":"erl_parse.af_block/0","doc":"","ref":"erl_parse.html#t:af_block/0"},{"type":"type","title":"erl_parse.af_body/0","doc":"","ref":"erl_parse.html#t:af_body/0"},{"type":"type","title":"erl_parse.af_case/0","doc":"","ref":"erl_parse.html#t:af_case/0"},{"type":"type","title":"erl_parse.af_catch/0","doc":"","ref":"erl_parse.html#t:af_catch/0"},{"type":"type","title":"erl_parse.af_character/0","doc":"","ref":"erl_parse.html#t:af_character/0"},{"type":"type","title":"erl_parse.af_clause/0","doc":"","ref":"erl_parse.html#t:af_clause/0"},{"type":"type","title":"erl_parse.af_clause_seq/0","doc":"","ref":"erl_parse.html#t:af_clause_seq/0"},{"type":"type","title":"erl_parse.af_compile/0","doc":"","ref":"erl_parse.html#t:af_compile/0"},{"type":"type","title":"erl_parse.af_cons/1","doc":"","ref":"erl_parse.html#t:af_cons/1"},{"type":"type","title":"erl_parse.af_constrained_function_type/0","doc":"","ref":"erl_parse.html#t:af_constrained_function_type/0"},{"type":"type","title":"erl_parse.af_constraint/0","doc":"","ref":"erl_parse.html#t:af_constraint/0"},{"type":"type","title":"erl_parse.af_empty_list_type/0","doc":"","ref":"erl_parse.html#t:af_empty_list_type/0"},{"type":"type","title":"erl_parse.af_export/0","doc":"","ref":"erl_parse.html#t:af_export/0"},{"type":"type","title":"erl_parse.af_export_type/0","doc":"","ref":"erl_parse.html#t:af_export_type/0"},{"type":"type","title":"erl_parse.af_fa_list/0","doc":"","ref":"erl_parse.html#t:af_fa_list/0"},{"type":"type","title":"erl_parse.af_field/0","doc":"","ref":"erl_parse.html#t:af_field/0"},{"type":"type","title":"erl_parse.af_field_decl/0","doc":"Abstract representation of a record field.","ref":"erl_parse.html#t:af_field_decl/0"},{"type":"type","title":"erl_parse.af_field_name/0","doc":"","ref":"erl_parse.html#t:af_field_name/0"},{"type":"type","title":"erl_parse.af_file/0","doc":"","ref":"erl_parse.html#t:af_file/0"},{"type":"type","title":"erl_parse.af_filter/0","doc":"","ref":"erl_parse.html#t:af_filter/0"},{"type":"type","title":"erl_parse.af_float/0","doc":"","ref":"erl_parse.html#t:af_float/0"},{"type":"type","title":"erl_parse.af_fun/0","doc":"","ref":"erl_parse.html#t:af_fun/0"},{"type":"type","title":"erl_parse.af_fun_type/0","doc":"","ref":"erl_parse.html#t:af_fun_type/0"},{"type":"type","title":"erl_parse.af_function_constraint/0","doc":"","ref":"erl_parse.html#t:af_function_constraint/0"},{"type":"type","title":"erl_parse.af_function_decl/0","doc":"","ref":"erl_parse.html#t:af_function_decl/0"},{"type":"type","title":"erl_parse.af_function_spec/0","doc":"","ref":"erl_parse.html#t:af_function_spec/0"},{"type":"type","title":"erl_parse.af_function_type/0","doc":"","ref":"erl_parse.html#t:af_function_type/0"},{"type":"type","title":"erl_parse.af_function_type_list/0","doc":"","ref":"erl_parse.html#t:af_function_type_list/0"},{"type":"type","title":"erl_parse.af_generator/0","doc":"Abstract representation of a generator or a bitstring generator.","ref":"erl_parse.html#t:af_generator/0"},{"type":"type","title":"erl_parse.af_guard/0","doc":"","ref":"erl_parse.html#t:af_guard/0"},{"type":"type","title":"erl_parse.af_guard_call/0","doc":"","ref":"erl_parse.html#t:af_guard_call/0"},{"type":"type","title":"erl_parse.af_guard_seq/0","doc":"","ref":"erl_parse.html#t:af_guard_seq/0"},{"type":"type","title":"erl_parse.af_guard_test/0","doc":"","ref":"erl_parse.html#t:af_guard_test/0"},{"type":"type","title":"erl_parse.af_if/0","doc":"","ref":"erl_parse.html#t:af_if/0"},{"type":"type","title":"erl_parse.af_import/0","doc":"","ref":"erl_parse.html#t:af_import/0"},{"type":"type","title":"erl_parse.af_integer/0","doc":"","ref":"erl_parse.html#t:af_integer/0"},{"type":"type","title":"erl_parse.af_integer_range_type/0","doc":"","ref":"erl_parse.html#t:af_integer_range_type/0"},{"type":"type","title":"erl_parse.af_list_comprehension/0","doc":"","ref":"erl_parse.html#t:af_list_comprehension/0"},{"type":"type","title":"erl_parse.af_lit_atom/1","doc":"","ref":"erl_parse.html#t:af_lit_atom/1"},{"type":"type","title":"erl_parse.af_literal/0","doc":"","ref":"erl_parse.html#t:af_literal/0"},{"type":"type","title":"erl_parse.af_local_call/0","doc":"","ref":"erl_parse.html#t:af_local_call/0"},{"type":"type","title":"erl_parse.af_local_fun/0","doc":"","ref":"erl_parse.html#t:af_local_fun/0"},{"type":"type","title":"erl_parse.af_local_function/0","doc":"","ref":"erl_parse.html#t:af_local_function/0"},{"type":"type","title":"erl_parse.af_map_comprehension/0","doc":"","ref":"erl_parse.html#t:af_map_comprehension/0"},{"type":"type","title":"erl_parse.af_map_creation/1","doc":"","ref":"erl_parse.html#t:af_map_creation/1"},{"type":"type","title":"erl_parse.af_map_pattern/0","doc":"","ref":"erl_parse.html#t:af_map_pattern/0"},{"type":"type","title":"erl_parse.af_map_type/0","doc":"","ref":"erl_parse.html#t:af_map_type/0"},{"type":"type","title":"erl_parse.af_map_update/1","doc":"","ref":"erl_parse.html#t:af_map_update/1"},{"type":"type","title":"erl_parse.af_match/1","doc":"","ref":"erl_parse.html#t:af_match/1"},{"type":"type","title":"erl_parse.af_maybe/0","doc":"","ref":"erl_parse.html#t:af_maybe/0"},{"type":"type","title":"erl_parse.af_maybe_else/0","doc":"","ref":"erl_parse.html#t:af_maybe_else/0"},{"type":"type","title":"erl_parse.af_maybe_match/0","doc":"","ref":"erl_parse.html#t:af_maybe_match/0"},{"type":"type","title":"erl_parse.af_module/0","doc":"","ref":"erl_parse.html#t:af_module/0"},{"type":"type","title":"erl_parse.af_named_fun/0","doc":"","ref":"erl_parse.html#t:af_named_fun/0"},{"type":"type","title":"erl_parse.af_nil/0","doc":"","ref":"erl_parse.html#t:af_nil/0"},{"type":"type","title":"erl_parse.af_pattern/0","doc":"","ref":"erl_parse.html#t:af_pattern/0"},{"type":"type","title":"erl_parse.af_predefined_type/0","doc":"","ref":"erl_parse.html#t:af_predefined_type/0"},{"type":"type","title":"erl_parse.af_qualifier/0","doc":"","ref":"erl_parse.html#t:af_qualifier/0"},{"type":"type","title":"erl_parse.af_qualifier_seq/0","doc":"","ref":"erl_parse.html#t:af_qualifier_seq/0"},{"type":"type","title":"erl_parse.af_receive/0","doc":"","ref":"erl_parse.html#t:af_receive/0"},{"type":"type","title":"erl_parse.af_record_creation/1","doc":"","ref":"erl_parse.html#t:af_record_creation/1"},{"type":"type","title":"erl_parse.af_record_decl/0","doc":"","ref":"erl_parse.html#t:af_record_decl/0"},{"type":"type","title":"erl_parse.af_record_field/1","doc":"","ref":"erl_parse.html#t:af_record_field/1"},{"type":"type","title":"erl_parse.af_record_field_access/1","doc":"","ref":"erl_parse.html#t:af_record_field_access/1"},{"type":"type","title":"erl_parse.af_record_field_type/0","doc":"","ref":"erl_parse.html#t:af_record_field_type/0"},{"type":"type","title":"erl_parse.af_record_index/0","doc":"","ref":"erl_parse.html#t:af_record_index/0"},{"type":"type","title":"erl_parse.af_record_type/0","doc":"","ref":"erl_parse.html#t:af_record_type/0"},{"type":"type","title":"erl_parse.af_record_update/1","doc":"","ref":"erl_parse.html#t:af_record_update/1"},{"type":"type","title":"erl_parse.af_remote_call/0","doc":"","ref":"erl_parse.html#t:af_remote_call/0"},{"type":"type","title":"erl_parse.af_remote_fun/0","doc":"","ref":"erl_parse.html#t:af_remote_fun/0"},{"type":"type","title":"erl_parse.af_remote_function/0","doc":"Abstract representation of a remote function call.","ref":"erl_parse.html#t:af_remote_function/0"},{"type":"type","title":"erl_parse.af_remote_guard_call/0","doc":"","ref":"erl_parse.html#t:af_remote_guard_call/0"},{"type":"type","title":"erl_parse.af_remote_type/0","doc":"","ref":"erl_parse.html#t:af_remote_type/0"},{"type":"type","title":"erl_parse.af_singleton_integer_type/0","doc":"","ref":"erl_parse.html#t:af_singleton_integer_type/0"},{"type":"type","title":"erl_parse.af_string/0","doc":"","ref":"erl_parse.html#t:af_string/0"},{"type":"type","title":"erl_parse.af_ta_list/0","doc":"","ref":"erl_parse.html#t:af_ta_list/0"},{"type":"type","title":"erl_parse.af_template/0","doc":"","ref":"erl_parse.html#t:af_template/0"},{"type":"type","title":"erl_parse.af_try/0","doc":"","ref":"erl_parse.html#t:af_try/0"},{"type":"type","title":"erl_parse.af_tuple/1","doc":"","ref":"erl_parse.html#t:af_tuple/1"},{"type":"type","title":"erl_parse.af_tuple_type/0","doc":"","ref":"erl_parse.html#t:af_tuple_type/0"},{"type":"type","title":"erl_parse.af_type_decl/0","doc":"","ref":"erl_parse.html#t:af_type_decl/0"},{"type":"type","title":"erl_parse.af_type_union/0","doc":"","ref":"erl_parse.html#t:af_type_union/0"},{"type":"type","title":"erl_parse.af_type_variable/0","doc":"","ref":"erl_parse.html#t:af_type_variable/0"},{"type":"type","title":"erl_parse.af_typed_field/0","doc":"","ref":"erl_parse.html#t:af_typed_field/0"},{"type":"type","title":"erl_parse.af_unary_op/1","doc":"","ref":"erl_parse.html#t:af_unary_op/1"},{"type":"type","title":"erl_parse.af_user_defined_type/0","doc":"","ref":"erl_parse.html#t:af_user_defined_type/0"},{"type":"type","title":"erl_parse.af_variable/0","doc":"","ref":"erl_parse.html#t:af_variable/0"},{"type":"type","title":"erl_parse.af_wild_attribute/0","doc":"","ref":"erl_parse.html#t:af_wild_attribute/0"},{"type":"type","title":"erl_parse.anno/0","doc":"","ref":"erl_parse.html#t:anno/0"},{"type":"function","title":"erl_parse.anno_from_term/1","doc":"Assumes that `Term` is a term with the same structure as a `erl_parse` tree, but\nwith terms, say `T`, where a `erl_parse` tree has collections of annotations.\n\nReturns a `erl_parse` tree where each term `T` is replaced by the value returned\nby [`erl_anno:from_term(T)`](`erl_anno:from_term/1`). The term `Term` is\ntraversed in a depth-first, left-to-right fashion.","ref":"erl_parse.html#anno_from_term/1"},{"type":"function","title":"erl_parse.anno_to_term/1","doc":"Returns a term where each collection of annotations `Anno` of the nodes of the\n`erl_parse` tree `Abstr` is replaced by the term returned by\n[`erl_anno:to_term(Anno)`](`erl_anno:to_term/1`). The `erl_parse` tree is\ntraversed in a depth-first, left-to-right fashion.","ref":"erl_parse.html#anno_to_term/1"},{"type":"type","title":"erl_parse.behaviour/0","doc":"","ref":"erl_parse.html#t:behaviour/0"},{"type":"type","title":"erl_parse.binary_op/0","doc":"","ref":"erl_parse.html#t:binary_op/0"},{"type":"type","title":"erl_parse.encoding_func/0","doc":"","ref":"erl_parse.html#t:encoding_func/0"},{"type":"type","title":"erl_parse.endianness/0","doc":"","ref":"erl_parse.html#t:endianness/0"},{"type":"type","title":"erl_parse.erl_parse_tree/0","doc":"","ref":"erl_parse.html#t:erl_parse_tree/0"},{"type":"type","title":"erl_parse.error_description/0","doc":"","ref":"erl_parse.html#t:error_description/0"},{"type":"type","title":"erl_parse.error_info/0","doc":"","ref":"erl_parse.html#t:error_info/0"},{"type":"function","title":"erl_parse.fold_anno/3","doc":"Updates an accumulator by applying `Fun` on each collection of annotations of\nthe `erl_parse` tree `Abstr`.\n\nThe first call to `Fun` has `AccIn` as argument, the returned accumulator\n`AccOut` is passed to the next call, and so on. The\nfinal value of the accumulator is returned. The `erl_parse` tree is traversed in\na depth-first, left-to-right fashion.","ref":"erl_parse.html#fold_anno/3"},{"type":"type","title":"erl_parse.form_info/0","doc":"Tuples `{error, error_info()}` and `{warning, error_info()}`, denoting\nsyntactically incorrect forms and warnings, and `{eof, line()}`, denoting an\nend-of-stream encountered before a complete form had been parsed.","ref":"erl_parse.html#t:form_info/0"},{"type":"function","title":"erl_parse.format_error/1","doc":"Uses an ErrorDescriptor and returns a string that describes the error.\n\nThis function is usually called implicitly when an ErrorInfo structure is\nprocessed (see section [Error Information](#module-error-information)).","ref":"erl_parse.html#format_error/1"},{"type":"type","title":"erl_parse.fun_name/0","doc":"","ref":"erl_parse.html#t:fun_name/0"},{"type":"type","title":"erl_parse.function_name/0","doc":"","ref":"erl_parse.html#t:function_name/0"},{"type":"function","title":"erl_parse.map_anno/2","doc":"Modifies the `erl_parse` tree `Abstr` by applying `Fun` on each collection of\nannotations of the nodes of the `erl_parse` tree. The `erl_parse` tree is\ntraversed in a depth-first, left-to-right fashion.","ref":"erl_parse.html#map_anno/2"},{"type":"function","title":"erl_parse.mapfold_anno/3","doc":"Modifies the `erl_parse` tree `Abstr` by applying `Fun` on each collection of\nannotations of the nodes of the `erl_parse` tree, while at the same time\nupdating an accumulator.\n\nThe first call to `Fun` has `AccIn` as second argument,\nthe returned accumulator `AccOut` is passed to the next call, and so on. The\nmodified `erl_parse` tree and the final value of the accumulator are returned.\nThe `erl_parse` tree is traversed in a depth-first, left-to-right fashion.","ref":"erl_parse.html#mapfold_anno/3"},{"type":"function","title":"erl_parse.new_anno/1","doc":"Assumes that `Term` is a term with the same structure as a `erl_parse` tree, but\nwith [locations](`t:erl_anno:location/0`) where a `erl_parse` tree has\ncollections of annotations.\n\nReturns a `erl_parse` tree where each location `L`\nis replaced by the value returned by [`erl_anno:new(L)`](`erl_anno:new/1`). The\nterm `Term` is traversed in a depth-first, left-to-right fashion.","ref":"erl_parse.html#new_anno/1"},{"type":"function","title":"erl_parse.normalise/1","doc":"Converts the abstract form `AbsTerm` of a term into a conventional Erlang data\nstructure (that is, the term itself). This function is the inverse of\n`abstract/1`.","ref":"erl_parse.html#normalise/1"},{"type":"function","title":"erl_parse.parse_exprs/1","doc":"Parses `Tokens` as if it was a list of expressions.\n\nReturns one of the following:\n\n- **`{ok, ExprList}`** - The parsing was successful. `ExprList` is a list of the\n  abstract forms of the parsed expressions.\n\n- **`{error, ErrorInfo}`** - An error occurred.","ref":"erl_parse.html#parse_exprs/1"},{"type":"function","title":"erl_parse.parse_form/1","doc":"Parses `Tokens` as if it was a form.\n\nReturns one of the following:\n\n- **`{ok, AbsForm}`** - The parsing was successful. `AbsForm` is the abstract\n  form of the parsed form.\n\n- **`{error, ErrorInfo}`** - An error occurred.","ref":"erl_parse.html#parse_form/1"},{"type":"function","title":"erl_parse.parse_term/1","doc":"Parses `Tokens` as if it was a term.\n\nReturns one of the following:\n\n- **`{ok, Term}`** - The parsing was successful. `Term` is the Erlang term\n  corresponding to the token list.\n\n- **`{error, ErrorInfo}`** - An error occurred.","ref":"erl_parse.html#parse_term/1"},{"type":"type","title":"erl_parse.record_name/0","doc":"","ref":"erl_parse.html#t:record_name/0"},{"type":"type","title":"erl_parse.signedness/0","doc":"","ref":"erl_parse.html#t:signedness/0"},{"type":"type","title":"erl_parse.spec_attr/0","doc":"","ref":"erl_parse.html#t:spec_attr/0"},{"type":"type","title":"erl_parse.token/0","doc":"","ref":"erl_parse.html#t:token/0"},{"type":"function","title":"erl_parse.tokens/1","doc":"","ref":"erl_parse.html#tokens/1"},{"type":"function","title":"erl_parse.tokens/2","doc":"Generates a list of tokens representing the abstract form `AbsTerm` of an\nexpression. Optionally, `MoreTokens` is appended.","ref":"erl_parse.html#tokens/2"},{"type":"type","title":"erl_parse.type/0","doc":"","ref":"erl_parse.html#t:type/0"},{"type":"type","title":"erl_parse.type_attr/0","doc":"","ref":"erl_parse.html#t:type_attr/0"},{"type":"type","title":"erl_parse.type_name/0","doc":"","ref":"erl_parse.html#t:type_name/0"},{"type":"type","title":"erl_parse.type_specifier/0","doc":"","ref":"erl_parse.html#t:type_specifier/0"},{"type":"type","title":"erl_parse.type_specifier_list/0","doc":"","ref":"erl_parse.html#t:type_specifier_list/0"},{"type":"type","title":"erl_parse.unary_op/0","doc":"","ref":"erl_parse.html#t:unary_op/0"},{"type":"type","title":"erl_parse.unit/0","doc":"","ref":"erl_parse.html#t:unit/0"},{"type":"module","title":"erl_pp","doc":"The Erlang pretty printer.\n\nThe functions in this module are used to generate aesthetically attractive\nrepresentations of abstract forms, which are suitable for printing. All\nfunctions return (possibly deep) lists of characters and generate an error if\nthe form is wrong.\n\nAll functions can have an optional argument, which specifies a hook that is\ncalled if an attempt is made to print an unknown form.\n\nNote that if the functions in this module are used to convert abstract code back\nto Erlang source code, the enclosing function should first be processed by\n`legalize_vars/1` in order to ensure that the output is semantically equivalent\nto the abstract code.","ref":"erl_pp.html"},{"type":"module","title":"Known Limitations - erl_pp","doc":"It is not possible to have hook functions for unknown forms at other places than\nexpressions.","ref":"erl_pp.html#module-known-limitations"},{"type":"module","title":"See Also - erl_pp","doc":"`m:erl_eval`, `m:erl_parse`, `m:io`","ref":"erl_pp.html#module-see-also"},{"type":"function","title":"erl_pp.attribute/1","doc":"","ref":"erl_pp.html#attribute/1"},{"type":"function","title":"erl_pp.attribute/2","doc":"Same as [`form/1,2`](`form/1`), but only for attribute `Attribute`.","ref":"erl_pp.html#attribute/2"},{"type":"function","title":"erl_pp.expr/1","doc":"","ref":"erl_pp.html#expr/1"},{"type":"function","title":"erl_pp.expr/2","doc":"","ref":"erl_pp.html#expr/2"},{"type":"function","title":"erl_pp.expr/3","doc":"","ref":"erl_pp.html#expr/3"},{"type":"function","title":"erl_pp.expr/4","doc":"Prints one expression.\n\nIt is useful for implementing hooks (see section\n[Known Limitations](`m:erl_pp#module-known-limitations`)).","ref":"erl_pp.html#expr/4"},{"type":"function","title":"erl_pp.exprs/1","doc":"","ref":"erl_pp.html#exprs/1"},{"type":"function","title":"erl_pp.exprs/2","doc":"","ref":"erl_pp.html#exprs/2"},{"type":"function","title":"erl_pp.exprs/3","doc":"Same as [`form/1,2`](`form/1`), but only for the sequence of expressions in\n`Expressions`.","ref":"erl_pp.html#exprs/3"},{"type":"function","title":"erl_pp.form/1","doc":"","ref":"erl_pp.html#form/1"},{"type":"function","title":"erl_pp.form/2","doc":"Pretty prints a `Form`, which is an abstract form of a type that is returned by\n`erl_parse:parse_form/1`.","ref":"erl_pp.html#form/2"},{"type":"function","title":"erl_pp.function/1","doc":"","ref":"erl_pp.html#function/1"},{"type":"function","title":"erl_pp.function/2","doc":"Same as [`form/1,2`](`form/1`), but only for function `Function`.","ref":"erl_pp.html#function/2"},{"type":"function","title":"erl_pp.guard/1","doc":"","ref":"erl_pp.html#guard/1"},{"type":"function","title":"erl_pp.guard/2","doc":"Same as [`form/1,2`](`form/1`), but only for the guard test `Guard`.","ref":"erl_pp.html#guard/2"},{"type":"type","title":"erl_pp.hook_function/0","doc":"Optional argument `HookFunction`{: #hook_function }, shown in the functions\ndescribed in this module, defines a function that is called when an unknown form\noccurs where there is to be a valid expression. If `HookFunction` is equal to\n`none`, there is no hook function.\n\nThe called hook function is to return a (possibly deep) list of characters.\nFunction `expr/4` is useful in a hook.\n\nIf `CurrentIndentation` is negative, there are no line breaks and only a space\nis used as a separator.","ref":"erl_pp.html#t:hook_function/0"},{"type":"function","title":"erl_pp.legalize_vars/1","doc":"The Erlang compiler will, when expanding records to tuples, introduce new\nvariables in the abstract representation. As the expansion is done on the\nabstract representation, the compiler can safely name the new variables with\nnames that are not syntactically valid in Erlang source code (the name starts\nwith a lowercase letter), thus ensuring the uniqueness of the new names.\n\nThe above strategy leads to problems if a user wants to convert the abstract\nrepresentation, using the functions of this module back to Erlang source code.\nTypically, pattern variables are output as atoms thus changing the sematics of\nthe program. To solve this problem [`legalize_vars/1`](`legalize_vars/1`), when\nrun on the abstract representation of a function, will return an equivalent\nfunction where all variables will have syntactically valid names.","ref":"erl_pp.html#legalize_vars/1"},{"type":"type","title":"erl_pp.option/0","doc":"The option `quote_singleton_atom_types` is used to add quotes to all singleton\natom types.\n\nThe option `linewidth` controls the maximum line width for formatted lines\n(defaults to 72 characters).\n\nThe option `indent` controls the indention for formatted lines (defaults to 4\nspaces).","ref":"erl_pp.html#t:option/0"},{"type":"type","title":"erl_pp.options/0","doc":"","ref":"erl_pp.html#t:options/0"},{"type":"module","title":"erl_scan","doc":"The Erlang token scanner.\n\nThis module contains functions for tokenizing (scanning) characters into Erlang\ntokens.","ref":"erl_scan.html"},{"type":"module","title":"Error Information - erl_scan","doc":"`ErrorInfo` is the standard `ErrorInfo` structure that is returned from all I/O\nmodules. The format is as follows:\n\n```erlang\n{ErrorLocation, Module, ErrorDescriptor}\n```\n\nA string describing the error is obtained with the following call:\n\n```erlang\nModule:format_error(ErrorDescriptor)\n```","ref":"erl_scan.html#module-error-information"},{"type":"module","title":"Notes - erl_scan","doc":"The continuation of the first call to the re-entrant input functions must be\n`[]`. For a complete description of how the re-entrant input scheme works, see\nArmstrong, Virding and Williams: 'Concurrent Programming in Erlang', Chapter 13.","ref":"erl_scan.html#module-notes"},{"type":"module","title":"See Also - erl_scan","doc":"`m:erl_anno`, `m:erl_parse`, `m:io`","ref":"erl_scan.html#module-see-also"},{"type":"type","title":"erl_scan.category/0","doc":"","ref":"erl_scan.html#t:category/0"},{"type":"function","title":"erl_scan.category/1","doc":"Returns the category of `Token`.","ref":"erl_scan.html#category/1"},{"type":"type","title":"erl_scan.char_spec/0","doc":"","ref":"erl_scan.html#t:char_spec/0"},{"type":"function","title":"erl_scan.column/1","doc":"Returns the column of `Token`'s collection of annotations.","ref":"erl_scan.html#column/1"},{"type":"function","title":"erl_scan.end_location/1","doc":"Returns the end location of the text of `Token`'s collection of annotations. If\nthere is no text, `undefined` is returned.","ref":"erl_scan.html#end_location/1"},{"type":"type","title":"erl_scan.error_description/0","doc":"","ref":"erl_scan.html#t:error_description/0"},{"type":"type","title":"erl_scan.error_info/0","doc":"","ref":"erl_scan.html#t:error_info/0"},{"type":"function","title":"erl_scan.format_error/1","doc":"Uses an `ErrorDescriptor` and returns a string that describes the error or\nwarning. This function is usually called implicitly when an `ErrorInfo`\nstructure is processed (see section\n[Error Information](`m:erl_scan#module-error-information`)).","ref":"erl_scan.html#format_error/1"},{"type":"function","title":"erl_scan.line/1","doc":"Returns the line of `Token`'s collection of annotations.","ref":"erl_scan.html#line/1"},{"type":"function","title":"erl_scan.location/1","doc":"Returns the location of `Token`'s collection of annotations.","ref":"erl_scan.html#location/1"},{"type":"type","title":"erl_scan.option/0","doc":"","ref":"erl_scan.html#t:option/0"},{"type":"type","title":"erl_scan.options/0","doc":"","ref":"erl_scan.html#t:options/0"},{"type":"function","title":"erl_scan.reserved_word/1","doc":"Returns `true` if `Atom` is an Erlang reserved word, otherwise `false`.","ref":"erl_scan.html#reserved_word/1"},{"type":"type","title":"erl_scan.resword_fun/0","doc":"","ref":"erl_scan.html#t:resword_fun/0"},{"type":"opaque","title":"erl_scan.return_cont/0","doc":"","ref":"erl_scan.html#t:return_cont/0"},{"type":"function","title":"erl_scan.string/1","doc":"","ref":"erl_scan.html#string/1"},{"type":"function","title":"erl_scan.string/2","doc":"","ref":"erl_scan.html#string/2"},{"type":"function","title":"erl_scan.string/3","doc":"Takes the list of characters `String` and tries to scan (tokenize) them.\n\nReturns one of the following:\n\n- **`{ok, Tokens, EndLocation}`** - `Tokens` are the Erlang tokens from\n  `String`. `EndLocation` is the first location after the last token.\n\n- **`{error, ErrorInfo, ErrorLocation}`** - An error occurred. `ErrorLocation`\n  is the first location after the erroneous token.\n\n`StartLocation` indicates the initial location when scanning starts. If\n`StartLocation` is a line, `Anno`, `EndLocation`, and `ErrorLocation` are lines.\nIf `StartLocation` is a pair of a line and a column, `Anno` takes the form of an\nopaque compound data type, and `EndLocation` and `ErrorLocation` are pairs of a\nline and a column. The _token annotations_ contain information about the column\nand the line where the token begins, as well as the text of the token (if option\n`text` is specified), all of which can be accessed by calling `column/1`,\n`line/1`, `location/1`, and `text/1`.\n\nA _token_ is a tuple containing information about syntactic category, the token\nannotations, and the terminal symbol. For punctuation characters (such as `;`\nand `|`) and reserved words, the category and the symbol coincide, and the token\nis represented by a two-tuple. Three-tuples have one of the following forms:\n\n- `{atom, Anno, atom()}`\n- `{char, Anno, char()}`\n- `{comment, Anno, string()}`\n- `{float, Anno, float()}`\n- `{integer, Anno, integer()}`\n- `{var, Anno, atom()}`\n- `{white_space, Anno, string()}`\n\nValid options:\n\n- **`{reserved_word_fun, reserved_word_fun()}`** - A callback function that is\n  called when the scanner has found an unquoted atom. If the function returns\n  `true`, the unquoted atom itself becomes the category of the token. If the\n  function returns `false`, `atom` becomes the category of the unquoted atom.\n\n- **`return_comments`** - Return comment tokens.\n\n- **`return_white_spaces`** - Return white space tokens. By convention, a\n  newline character, if present, is always the first character of the text\n  (there cannot be more than one newline in a white space token).\n\n- **`return`** - Short for `[return_comments, return_white_spaces]`.\n\n- **`text`{: #text }** - Include the token text in the token annotation. The\n  text is the part of the input corresponding to the token. See also\n  [`text_fun`](`m:erl_scan#text_fun`).\n\n- **`{text_fun, text_fun()}`{: #text_fun }** - A callback function used to\n  determine whether the full text for the token shall be included in the token\n  annotation. Arguments of the function are the category of the token and the\n  full token string. This is only used when [`text`](`m:erl_scan#text`) is not\n  present. If neither are present the text will not be saved in the token\n  annotation.\n\n- **`{compiler_internal, term()}`{: #compiler_interal }** - Pass\n  compiler-internal options to the scanner. The set of internal options\n  understood by the scanner should be considered experimental and can thus be\n  changed at any time without prior warning.\n\n  The following options are currently understood:\n\n  - **`ssa_checks`** - Tokenizes source code annotations used for encoding tests\n    on the BEAM SSA code produced by the compiler.","ref":"erl_scan.html#string/3"},{"type":"type","title":"erl_scan.symbol/0","doc":"","ref":"erl_scan.html#t:symbol/0"},{"type":"function","title":"erl_scan.symbol/1","doc":"Returns the symbol of `Token`.","ref":"erl_scan.html#symbol/1"},{"type":"function","title":"erl_scan.text/1","doc":"Returns the text of `Token`'s collection of annotations. If there is no text,\n`undefined` is returned.","ref":"erl_scan.html#text/1"},{"type":"type","title":"erl_scan.text_fun/0","doc":"","ref":"erl_scan.html#t:text_fun/0"},{"type":"type","title":"erl_scan.token/0","doc":"","ref":"erl_scan.html#t:token/0"},{"type":"type","title":"erl_scan.tokens/0","doc":"","ref":"erl_scan.html#t:tokens/0"},{"type":"function","title":"erl_scan.tokens/3","doc":"","ref":"erl_scan.html#tokens/3"},{"type":"function","title":"erl_scan.tokens/4","doc":"This is the re-entrant scanner, which scans characters until either a _dot_ ('.'\nfollowed by a white space) or `eof` is reached.\n\nIt returns:\n\n- **`{done, Result, LeftOverChars}`** - Indicates that there is sufficient input\n  data to get a result. `Result` is:\n\n  - **`{ok, Tokens, EndLocation}`** - The scanning was successful. `Tokens` is\n    the list of tokens including _dot_.\n\n  - **`{eof, EndLocation}`** - End of file was encountered before any more\n    tokens.\n\n  - **`{error, ErrorInfo, EndLocation}`** - An error occurred. `LeftOverChars`\n    is the remaining characters of the input data, starting from `EndLocation`.\n\n- **`{more, Continuation1}`** - More data is required for building a term.\n  `Continuation1` must be passed in a new call to `tokens/3,4` when more data is\n  available.\n\nThe `CharSpec` `eof` signals end of file. `LeftOverChars` then takes the value\n`eof` as well.\n\nFor a description of the options, see `string/3`.","ref":"erl_scan.html#tokens/4"},{"type":"type","title":"erl_scan.tokens_result/0","doc":"","ref":"erl_scan.html#t:tokens_result/0"},{"type":"module","title":"ms_transform","doc":"A parse transformation that translates fun syntax into match specifications.\n\nThis module provides the parse transformation that makes calls to `m:ets` and\n`dbg:fun2ms/1` translate into literal match specifications. It also provides the\nback end for the same functions when called from the Erlang shell.\n\nThe translation from funs to match specifications is accessed through the two\n\"pseudo functions\" `ets:fun2ms/1` and `dbg:fun2ms/1`.\n\nAs everyone trying to use [`ets:select/2`](`ets:select/1`) or `m:dbg` seems to\nend up reading this manual page, this description is an introduction to the\nconcept of match specifications.\n\nRead the whole manual page if it is the first time you are using the\ntransformations.\n\nMatch specifications are used more or less as filters. They resemble usual\nErlang matching in a list comprehension or in a fun used with `lists:foldl/3`,\nand so on. However, the syntax of pure match specifications is awkward, as they\nare made up purely by Erlang terms, and the language has no syntax to make the\nmatch specifications more readable.\n\nAs the execution and structure of the match specifications are like that of a\nfun, it is more straightforward to write it using the familiar fun syntax and to\nhave that translated into a match specification automatically. A real fun is\nclearly more powerful than the match specifications allow, but bearing the match\nspecifications in mind, and what they can do, it is still more convenient to\nwrite it all as a fun. This module contains the code that translates the fun\nsyntax into match specification terms.","ref":"ms_transform.html"},{"type":"module","title":"Example 1 - ms_transform","doc":"Using `ets:select/2` and a match specification, one can filter out rows of a\ntable and construct a list of tuples containing relevant parts of the data in\nthese rows. One can use `ets:foldl/3` instead, but the `ets:select/2` call is\nfar more efficient. Without the translation provided by `ms_transform`, one must\nstruggle with writing match specifications terms to accommodate this.\n\nConsider a simple table of employees:\n\n```erlang\n-record(emp, {empno,     %Employee number as a string, the key\n              surname,   %Surname of the employee\n              givenname, %Given name of employee\n              dept,      %Department, one of {dev,sales,prod,adm}\n              empyear}). %Year the employee was employed\n```\n\nWe create the table using:\n\n```text\nets:new(emp_tab, [{keypos,#emp.empno},named_table,ordered_set]).\n```\n\nWe fill the table with randomly chosen data:\n\n```erlang\n[{emp,\"011103\",\"Black\",\"Alfred\",sales,2000},\n {emp,\"041231\",\"Doe\",\"John\",prod,2001},\n {emp,\"052341\",\"Smith\",\"John\",dev,1997},\n {emp,\"076324\",\"Smith\",\"Ella\",sales,1995},\n {emp,\"122334\",\"Weston\",\"Anna\",prod,2002},\n {emp,\"535216\",\"Chalker\",\"Samuel\",adm,1998},\n {emp,\"789789\",\"Harrysson\",\"Joe\",adm,1996},\n {emp,\"963721\",\"Scott\",\"Juliana\",dev,2003},\n {emp,\"989891\",\"Brown\",\"Gabriel\",prod,1999}]\n```\n\nAssuming that we want the employee numbers of everyone in the sales department,\nthere are several ways.\n\n`ets:match/2` can be used:\n\n```erlang\n1> ets:match(emp_tab, {'_', '$1', '_', '_', sales, '_'}).\n[[\"011103\"],[\"076324\"]]\n```\n\n`ets:match/2` uses a simpler type of match specification, but it is still\nunreadable, and one has little control over the returned result. It is always a\nlist of lists.\n\n`ets:foldl/3` or `ets:foldr/3` can be used to avoid the nested lists:\n\n```erlang\nets:foldr(fun(#emp{empno = E, dept = sales},Acc) -> [E | Acc];\n             (_,Acc) -> Acc\n          end,\n          [],\n          emp_tab).\n```\n\nThe result is `[\"011103\",\"076324\"]`. The fun is straightforward, so the only\nproblem is that all the data from the table must be transferred from the table\nto the calling process for filtering. That is inefficient compared to the\n`ets:match/2` call where the filtering can be done \"inside\" the emulator and\nonly the result is transferred to the process.\n\nConsider a \"pure\" `ets:select/2` call that does what `ets:foldr` does:\n\n```erlang\nets:select(emp_tab, [{#emp{empno = '$1', dept = sales, _='_'},[],['$1']}]).\n```\n\nAlthough the record syntax is used, it is still hard to read and even harder to\nwrite. The first element of the tuple,\n`#emp{empno = '$1', dept = sales, _='_'}`, tells what to match. Elements not\nmatching this are not returned, as in the `ets:match/2` example. The second\nelement, the empty list, is a list of guard expressions, which we do not need.\nThe third element is the list of expressions constructing the return value (in\nETS this is almost always a list containing one single term). In our case `'$1'`\nis bound to the employee number in the head (first element of the tuple), and\nhence the employee number is returned. The result is `[\"011103\",\"076324\"]`, as\nin the `ets:foldr/3` example, but the result is retrieved much more efficiently\nin terms of execution speed and memory consumption.\n\nUsing `ets:fun2ms/1`, we can combine the ease of use of the `ets:foldr/3` and\nthe efficiency of the pure `ets:select/2` example:\n\n```erlang\n-include_lib(\"stdlib/include/ms_transform.hrl\").\n\nets:select(emp_tab, ets:fun2ms(\n                      fun(#emp{empno = E, dept = sales}) ->\n                              E\n                      end)).\n```\n\nThis example requires no special knowledge of match specifications to\nunderstand. The head of the fun matches what you want to filter out and the body\nreturns what you want returned. As long as the fun can be kept within the limits\nof the match specifications, there is no need to transfer all table data to the\nprocess for filtering as in the `ets:foldr/3` example. It is easier to read than\nthe `ets:foldr/3` example, as the select call in itself discards anything that\ndoes not match, while the fun of the `ets:foldr/3` call needs to handle both the\nelements matching and the ones not matching.\n\nIn the `ets:fun2ms/1` example above, it is needed to include `ms_transform.hrl`\nin the source code, as this is what triggers the parse transformation of the\n`ets:fun2ms/1` call to a valid match specification. This also implies that the\ntransformation is done at compile time (except when called from the shell) and\ntherefore takes no resources in runtime. That is, although you use the more\nintuitive fun syntax, it gets as efficient in runtime as writing match\nspecifications by hand.","ref":"ms_transform.html#module-example-1"},{"type":"module","title":"Example 2 - ms_transform","doc":"Assume that we want to get all the employee numbers of employees hired before\nyear 2000. Using `ets:match/2` is not an alternative here, as relational\noperators cannot be expressed there. Once again, `ets:foldr/3` can do it\n(slowly, but correct):\n\n```erlang\nets:foldr(fun(#emp{empno = E, empyear = Y},Acc) when Y < 2000 -> [E | Acc];\n                  (_,Acc) -> Acc\n          end,\n          [],\n          emp_tab).\n```\n\nThe result is `[\"052341\",\"076324\",\"535216\",\"789789\",\"989891\"]`, as expected. The\nequivalent expression using a handwritten match specification would look like\nthis:\n\n```erlang\nets:select(emp_tab, [{#emp{empno = '$1', empyear = '$2', _='_'},\n                     [{'<', '$2', 2000}],\n                     ['$1']}]).\n```\n\nThis gives the same result. `[{'<', '$2', 2000}]` is in the guard part and\ntherefore discards anything that does not have an `empyear` (bound to `'$2'` in\nthe head) less than 2000, as the guard in the `foldr/3` example.\n\nWe write it using `ets:fun2ms/1`:\n\n```erlang\n-include_lib(\"stdlib/include/ms_transform.hrl\").\n\nets:select(emp_tab, ets:fun2ms(\n                      fun(#emp{empno = E, empyear = Y}) when Y < 2000 ->\n                           E\n                      end)).\n```","ref":"ms_transform.html#module-example-2"},{"type":"module","title":"Example 3 - ms_transform","doc":"Assume that we want the whole object matching instead of only one element. One\nalternative is to assign a variable to every part of the record and build it up\nonce again in the body of the fun, but the following is easier:\n\n```erlang\nets:select(emp_tab, ets:fun2ms(\n                      fun(Obj = #emp{empno = E, empyear = Y})\n                         when Y < 2000 ->\n                              Obj\n                      end)).\n```\n\nAs in ordinary Erlang matching, you can bind a variable to the whole matched\nobject using a \"match inside the match\", that is, a `=`. Unfortunately in funs\ntranslated to match specifications, it is allowed only at the \"top-level\", that\nis, matching the _whole_ object arriving to be matched into a separate variable.\nIf you are used to writing match specifications by hand, we mention that\nvariable A is simply translated into '$\\_'. Alternatively, pseudo function\n`object/0` also returns the whole matched object, see section\n[Warnings and Restrictions](`m:ms_transform#warnings_and_restrictions`).","ref":"ms_transform.html#module-example-3"},{"type":"module","title":"Example 4 - ms_transform","doc":"This example concerns the body of the fun. Assume that all employee numbers\nbeginning with zero (`0`) must be changed to begin with one (`1`) instead, and\nthat we want to create the list `[{ , }]`:\n\n```erlang\nets:select(emp_tab, ets:fun2ms(\n                      fun(#emp{empno = [$0 | Rest] }) ->\n                              {[$0|Rest],[$1|Rest]}\n                      end)).\n```\n\nThis query hits the feature of partially bound keys in table type `ordered_set`,\nso that not the whole table needs to be searched, only the part containing keys\nbeginning with `0` is looked into.","ref":"ms_transform.html#module-example-4"},{"type":"module","title":"Example 5 - ms_transform","doc":"The fun can have many clauses. Assume that we want to do the following:\n\n- If an employee started before 1997, return the tuple\n  `{inventory,  }`.\n- If an employee started 1997 or later, but before 2001, return\n  `{rookie,  }`.\n- For all other employees, return `{newbie,  }`, except for\n  those named `Smith` as they would be affronted by anything other than the tag\n  `guru` and that is also what is returned for their numbers:\n  `{guru,  }`.\n\nThis is accomplished as follows:\n\n```erlang\nets:select(emp_tab, ets:fun2ms(\n                      fun(#emp{empno = E, surname = \"Smith\" }) ->\n                              {guru,E};\n                         (#emp{empno = E, empyear = Y}) when Y < 1997  ->\n                              {inventory, E};\n                         (#emp{empno = E, empyear = Y}) when Y > 2001  ->\n                              {newbie, E};\n                         (#emp{empno = E, empyear = Y}) -> % 1997 -- 2001\n                              {rookie, E}\n                      end)).\n```\n\nThe result is as follows:\n\n```erlang\n[{rookie,\"011103\"},\n {rookie,\"041231\"},\n {guru,\"052341\"},\n {guru,\"076324\"},\n {newbie,\"122334\"},\n {rookie,\"535216\"},\n {inventory,\"789789\"},\n {newbie,\"963721\"},\n {rookie,\"989891\"}]\n```","ref":"ms_transform.html#module-example-5"},{"type":"module","title":"Useful BIFs - ms_transform","doc":"What more can you do? A simple answer is: see the documentation of\n[match specifications](`e:erts:match_spec.md`) in ERTS User's Guide. However,\nthe following is a brief overview of the most useful \"built-in functions\" that\nyou can use when the fun is to be translated into a match specification by\n`ets:fun2ms/1`. It is not possible to call other functions than those allowed in\nmatch specifications. No \"usual\" Erlang code can be executed by the fun that is\ntranslated by `ets:fun2ms/1`. The fun is limited exactly to the power of the\nmatch specifications, which is unfortunate, but the price one must pay for the\nexecution speed of `ets:select/2` compared to `ets:foldl/foldr`.\n\nThe head of the fun is a head matching (or mismatching) _one_ parameter, one\nobject of the table we select from. The object is always a single variable (can\nbe `_`) or a tuple, as ETS, Dets, and Mnesia tables include that. The match\nspecification returned by `ets:fun2ms/1` can be used with `dets:select/2` and\n`mnesia:select/2`, and with `ets:select/2`. The use of `=` in the head is\nallowed (and encouraged) at the top-level.\n\nThe guard section can contain any guard expression of Erlang. The following is a\nlist of BIFs and expressions:\n\n- Type tests: `is_atom`, `is_float`, `is_integer`, `is_list`, `is_number`,\n  `is_pid`, `is_port`, `is_reference`, `is_tuple`, `is_binary`, `is_function`,\n  `is_record`\n- Boolean operators: `not`, `and`, `or`, `andalso`, `orelse`\n- Relational operators: `>`, `>=`, `<`, `=<`, `=:=`, `==`, `=/=`, `/=`\n- Arithmetic: `+`, `-`, `*`, `div`, `rem`\n- Bitwise operators: `band`, `bor`, `bxor`, `bnot`, `bsl`, `bsr`\n- The guard BIFs: `abs`, `element`, `hd`, `length`, `node`, `round`, `size`,\n  `byte_size`, `tl`, `trunc`, `binary_part`, `self`\n\nContrary to the fact with \"handwritten\" match specifications, the `is_record`\nguard works as in ordinary Erlang code.\n\nSemicolons (`;`) in guards are allowed, the result is (as expected) one \"match\nspecification clause\" for each semicolon-separated part of the guard. The\nsemantics is identical to the Erlang semantics.\n\nThe body of the fun is used to construct the resulting value. When selecting\nfrom tables, one usually construct a suiting term here, using ordinary Erlang\nterm construction, like tuple parentheses, list brackets, and variables matched\nout in the head, possibly with the occasional constant. Whatever expressions are\nallowed in guards are also allowed here, but no special functions exist except\n`object` and `bindings` (see further down), which returns the whole matched\nobject and all known variable bindings, respectively.\n\nThe `dbg` variants of match specifications have an imperative approach to the\nmatch specification body, the ETS dialect has not. The fun body for\n`ets:fun2ms/1` returns the result without side effects. As matching (`=`) in the\nbody of the match specifications is not allowed (for performance reasons) the\nonly thing left, more or less, is term construction.","ref":"ms_transform.html#module-useful-bifs"},{"type":"module","title":"Example with dbg - ms_transform","doc":"This section describes the slightly different match specifications translated by\n`dbg:fun2ms/1`.\n\nThe same reasons for using the parse transformation apply to `dbg`, maybe even\nmore, as filtering using Erlang code is not a good idea when tracing (except\nafterwards, if you trace to file). The concept is similar to that of\n`ets:fun2ms/1` except that you usually use it directly from the shell (which can\nalso be done with `ets:fun2ms/1`).\n\nThe following is an example module to trace on:\n\n```erlang\n-module(toy).\n\n-export([start/1, store/2, retrieve/1]).\n\nstart(Args) ->\n    toy_table = ets:new(toy_table, Args).\n\nstore(Key, Value) ->\n    ets:insert(toy_table, {Key,Value}).\n\nretrieve(Key) ->\n    [{Key, Value}] = ets:lookup(toy_table, Key),\n    Value.\n```\n\nDuring model testing, the first test results in `{badmatch,16}` in\n`{toy,start,1}`, why?\n\nWe suspect the `ets:new/2` call, as we match hard on the return value, but want\nonly the particular `new/2` call with `toy_table` as first parameter. So we\nstart a default tracer on the node:\n\n```text\n1> dbg:tracer().\n{ok,<0.88.0>}\n```\n\nWe turn on call tracing for all processes, we want to make a pretty restrictive\ntrace pattern, so there is no need to call trace only a few processes (usually\nit is not):\n\n```text\n2> dbg:p(all,call).\n{ok,[{matched,nonode@nohost,25}]}\n```\n\nWe specify the filter, we want to view calls that resemble\n`ets:new(toy_table,  )`:\n\n```erlang\n3> dbg:tp(ets,new,dbg:fun2ms(fun([toy_table,_]) -> true end)).\n{ok,[{matched,nonode@nohost,1},{saved,1}]}\n```\n\nAs can be seen, the fun used with `dbg:fun2ms/1` takes a single list as\nparameter instead of a single tuple. The list matches a list of the parameters\nto the traced function. A single variable can also be used. The body of the fun\nexpresses, in a more imperative way, actions to be taken if the fun head (and\nthe guards) matches. `true` is returned here, only because the body of a fun\ncannot be empty. The return value is discarded.\n\nThe following trace output is received during test:\n\n```erlang\n(<0.86.0>) call ets:new(toy_table, [ordered_set])\n```\n\nAssume that we have not found the problem yet, and want to see what `ets:new/2`\nreturns. We use a slightly different trace pattern:\n\n```erlang\n4> dbg:tp(ets,new,dbg:fun2ms(fun([toy_table,_]) -> return_trace() end)).\n```\n\nThe following trace output is received during test:\n\n```erlang\n(<0.86.0>) call ets:new(toy_table,[ordered_set])\n(<0.86.0>) returned from ets:new/2 -> 24\n```\n\nThe call to `return_trace` results in a trace message when the function returns.\nIt applies only to the specific function call triggering the match specification\n(and matching the head/guards of the match specification). This is by far the\nmost common call in the body of a `dbg` match specification.\n\nThe test now fails with `{badmatch,24}` because the atom `toy_table` does not\nmatch the number returned for an unnamed table. So, the problem is found, the\ntable is to be named, and the arguments supplied by the test program do not\ninclude `named_table`. We rewrite the start function:\n\n```erlang\nstart(Args) ->\n    toy_table = ets:new(toy_table, [named_table|Args]).\n```\n\nWith the same tracing turned on, the following trace output is received:\n\n```erlang\n(<0.86.0>) call ets:new(toy_table,[named_table,ordered_set])\n(<0.86.0>) returned from ets:new/2 -> toy_table\n```\n\nAssume that the module now passes all testing and goes into the system. After a\nwhile, it is found that table `toy_table` grows while the system is running and\nthat there are many elements with atoms as keys. We expected only integer keys\nand so does the rest of the system, but clearly not the entire system. We turn\non call tracing and try to see calls to the module with an atom as the key:\n\n```erlang\n1> dbg:tracer().\n{ok,<0.88.0>}\n2> dbg:p(all,call).\n{ok,[{matched,nonode@nohost,25}]}\n3> dbg:tpl(toy,store,dbg:fun2ms(fun([A,_]) when is_atom(A) -> true end)).\n{ok,[{matched,nonode@nohost,1},{saved,1}]}\n```\n\nWe use `dbg:tpl/3` to ensure to catch local calls (assume that the module has\ngrown since the smaller version and we are unsure if this inserting of atoms is\nnot done locally). When in doubt, always use local call tracing.\n\nAssume that nothing happens when tracing in this way. The function is never\ncalled with these parameters. We conclude that someone else (some other module)\nis doing it and realize that we must trace on `ets:insert/2` and want to see the\ncalling function. The calling function can be retrieved using the match\nspecification function `caller`. To get it into the trace message, the match\nspecification function `message` must be used. The filter call looks like this\n(looking for calls to `ets:insert/2`):\n\n```erlang\n4> dbg:tpl(ets,insert,dbg:fun2ms(fun([toy_table,{A,_}]) when is_atom(A) ->\n                                    message(caller())\n                                  end)).\n{ok,[{matched,nonode@nohost,1},{saved,2}]}\n```\n\nThe caller is now displayed in the \"additional message\" part of the trace\noutput, and the following is displayed after a while:\n\n```erlang\n(<0.86.0>) call ets:insert(toy_table,{garbage,can}) ({evil_mod,evil_fun,2})\n```\n\nYou have realized that function `evil_fun` of the `evil_mod` module, with arity\n`2`, is causing all this trouble.\n\nThis example illustrates the most used calls in match specifications for `dbg`.\nThe other, more esoteric, calls are listed and explained in\n[Match specifications in Erlang](`e:erts:match_spec.md`) in ERTS User's Guide,\nas they are beyond the scope of this description.","ref":"ms_transform.html#module-example-with-dbg"},{"type":"module","title":"Warnings and Restrictions - ms_transform","doc":"[](){: #warnings_and_restrictions }\n\nThe following warnings and restrictions apply to the funs used in with\n`ets:fun2ms/1` and `dbg:fun2ms/1`.\n\n> #### Warning {: .warning }\n>\n> To use the pseudo functions triggering the translation, ensure to include the\n> header file `ms_transform.hrl` in the source code. Failure to do so possibly\n> results in runtime errors rather than compile time, as the expression can be\n> valid as a plain Erlang program without translation.\n\n> #### Warning {: .warning }\n>\n> The fun must be literally constructed inside the parameter list to the pseudo\n> functions. The fun cannot be bound to a variable first and then passed to\n> `ets:fun2ms/1` or `dbg:fun2ms/1`. For example, `ets:fun2ms(fun(A) -> A end)`\n> works, but not `F = fun(A) -> A end, ets:fun2ms(F)`. The latter results in a\n> compile-time error if the header is included, otherwise a runtime error.\n\nMany restrictions apply to the fun that is translated into a match\nspecification. To put it simple: you cannot use anything in the fun that you\ncannot use in a match specification. This means that, among others, the\nfollowing restrictions apply to the fun itself:\n\n- Functions written in Erlang cannot be called, neither can local functions,\n  global functions, or real funs.\n- Everything that is written as a function call is translated into a match\n  specification call to a built-in function, so that the call\n  [`is_list(X)`](`is_list/1`) is translated to `{'is_list', '$1'}` (`'$1'` is\n  only an example, the numbering can vary). If one tries to call a function that\n  is not a match specification built-in, it causes an error.\n- Variables occurring in the head of the fun are replaced by match specification\n  variables in the order of occurrence, so that fragment `fun({A,B,C})` is\n  replaced by `{'$1', '$2', '$3'}`, and so on. Every occurrence of such a\n  variable in the match specification is replaced by a match specification\n  variable in the same way, so that the fun\n  `fun({A,B}) when is_atom(A) -> B end` is translated into\n  `[{{'$1','$2'},[{is_atom,'$1'}],['$2']}]`.\n- Variables that are not included in the head are imported from the environment\n  and made into match specification `const` expressions. Example from the shell:\n\n  ```erlang\n  1> X = 25.\n  25\n  2> ets:fun2ms(fun({A,B}) when A > X -> B end).\n  [{{'$1','$2'},[{'>','$1',{const,25}}],['$2']}]\n  ```\n\n- Matching with `=` cannot be used in the body. It can only be used on the\n  top-level in the head of the fun. Example from the shell again:\n\n  ```erlang\n  1> ets:fun2ms(fun({A,[B|C]} = D) when A > B -> D end).\n  [{{'$1',['$2'|'$3']},[{'>','$1','$2'}],['$_']}]\n  2> ets:fun2ms(fun({A,[B|C]=D}) when A > B -> D end).\n  Error: fun with head matching ('=' in head) cannot be translated into\n  match_spec\n  {error,transform_error}\n  3> ets:fun2ms(fun({A,[B|C]}) when A > B -> D = [B|C], D end).\n  Error: fun with body matching ('=' in body) is illegal as match_spec\n  {error,transform_error}\n  ```\n\n  All variables are bound in the head of a match specification, so the\n  translator cannot allow multiple bindings. The special case when matching is\n  done on the top-level makes the variable bind to `'$_'` in the resulting match\n  specification. It is to allow a more natural access to the whole matched\n  object. Pseudo function `object()` can be used instead, see below.\n\n  The following expressions are translated equally:\n\n  ```erlang\n  ets:fun2ms(fun({a,_} = A) -> A end).\n  ets:fun2ms(fun({a,_}) -> object() end).\n  ```\n\n- The special match specification variables `'$_'` and `'$*'` can be accessed\n  through the pseudo functions `object()` (for `'$_'`) and `bindings()` (for\n  `'$*'`). As an example, one can translate the following `ets:match_object/2`\n  call to a `ets:select/2` call:\n\n  ```erlang\n  ets:match_object(Table, {'$1',test,'$2'}).\n  ```\n\n  This is the same as:\n\n  ```erlang\n  ets:select(Table, ets:fun2ms(fun({A,test,B}) -> object() end)).\n  ```\n\n  In this simple case, the former expression is probably preferable in terms of\n  readability.\n\n  The `ets:select/2` call conceptually looks like this in the resulting code:\n\n  ```erlang\n  ets:select(Table, [{{'$1',test,'$2'},[],['$_']}]).\n  ```\n\n  Matching on the top-level of the fun head can be a more natural way to access\n  `'$_'`, see above.\n\n- Term constructions/literals are translated as much as is needed to get them\n  into valid match specification. This way tuples are made into match\n  specification tuple constructions (a one element tuple containing the tuple)\n  and constant expressions are used when importing variables from the\n  environment. Records are also translated into plain tuple constructions, calls\n  to element, and so on. The guard test [`is_record/2`](`is_record/2`) is\n  translated into match specification code using the three parameter version\n  that is built into match specification, so that\n  [`is_record(A,t)`](`is_record/2`) is translated into `{is_record,'$1',t,5}` if\n  the record size of record type `t` is 5.\n- Language constructions such as `case`, `if`, and `catch` that are not present\n  in match specifications are not allowed.\n- If header file `ms_transform.hrl` is not included, the fun is not translated,\n  which can result in a _runtime error_ (depending on whether the fun is valid\n  in a pure Erlang context).\n\n  Ensure that the header is included when using `ets` and `dbg:fun2ms/1` in\n  compiled code.\n\n- If pseudo function triggering the translation is `ets:fun2ms/1`, the head of\n  the fun must contain a single variable or a single tuple. If the pseudo\n  function is `dbg:fun2ms/1`, the head of the fun must contain a single variable\n  or a single list.\n\nThe translation from funs to match specifications is done at compile time, so\nruntime performance is not affected by using these pseudo functions.\n\nFor more information about match specifications, see the\n[Match specifications in Erlang](`e:erts:match_spec.md`) in ERTS User's Guide.","ref":"ms_transform.html#module-warnings-and-restrictions"},{"type":"function","title":"ms_transform.format_error/1","doc":"Takes an error code returned by one of the other functions in the module and\ncreates a textual description of the error.","ref":"ms_transform.html#format_error/1"},{"type":"function","title":"ms_transform.parse_transform/2","doc":"Implements the transformation at compile time. This function is called by the\ncompiler to do the source code transformation if and when header file\n`ms_transform.hrl` is included in the source code.\n\nFor information about how to use this parse transformation, see `m:ets` and\n`dbg:fun2ms/1`.\n\nFor a description of match specifications, see section\n[Match Specification in Erlang](`e:erts:match_spec.md`) in ERTS User's Guide.","ref":"ms_transform.html#parse_transform/2"},{"type":"function","title":"ms_transform.transform_from_shell/3","doc":"Implements the transformation when the `fun2ms/1` functions are called from the\nshell. In this case, the abstract form is for one single fun (parsed by the\nErlang shell). All imported variables are to be in the key-value list passed as\n`BoundEnvironment`. The result is a term, normalized, that is, not in abstract\nformat.","ref":"ms_transform.html#transform_from_shell/3"},{"type":"module","title":"array","doc":"Functional, extendible arrays.\n\nArrays can have fixed size, or can grow automatically as needed. A default value\nis used for entries that have not been explicitly set.\n\nArrays uses _zero_-based indexing. This is a deliberate design choice and\ndiffers from other Erlang data structures, for example, tuples.\n\nUnless specified by the user when the array is created, the default value is the\natom `undefined`. There is no difference between an unset entry and an entry\nthat has been explicitly set to the same value as the default one (compare\n`reset/2`). If you need to differentiate between unset and set entries, ensure\nthat the default value cannot be confused with the values of set entries.\n\nThe array never shrinks automatically. If an index `I` has been used to set an\nentry successfully, all indices in the range `[0,I]` stay accessible unless the\narray size is explicitly changed by calling `resize/2`.\n\n_Examples:_\n\nCreate a fixed-size array with entries 0-9 set to `undefined`:\n\n```\nA0 = array:new(10).\n10 = array:size(A0).\n```\n\nCreate an extendible array and set entry 17 to `true`, causing the array to grow\nautomatically:\n\n```\nA1 = array:set(17, true, array:new()).\n18 = array:size(A1).\n```\n\nRead back a stored value:\n\n```\ntrue = array:get(17, A1).\n```\n\nAccessing an unset entry returns default value:\n\n```\nundefined = array:get(3, A1)\n```\n\nAccessing an entry beyond the last set entry also returns the default value, if\nthe array does not have fixed size:\n\n```\nundefined = array:get(18, A1).\n```\n\n\"Sparse\" functions ignore default-valued entries:\n\n```\nA2 = array:set(4, false, A1).\n[{4, false}, {17, true}] = array:sparse_to_orddict(A2).\n```\n\nAn extendible array can be made fixed-size later:\n\n```\nA3 = array:fix(A2).\n```\n\nA fixed-size array does not grow automatically and does not allow accesses\nbeyond the last set entry:\n\n```\n{'EXIT',{badarg,_}} = (catch array:set(18, true, A3)).\n{'EXIT',{badarg,_}} = (catch array:get(18, A3)).\n```","ref":"array.html"},{"type":"type","title":"array.array/0","doc":"","ref":"array.html#t:array/0"},{"type":"opaque","title":"array.array/1","doc":"A functional, extendible array. The representation is not documented and is\nsubject to change without notice. Notice that arrays cannot be directly compared\nfor equality.","ref":"array.html#t:array/1"},{"type":"type","title":"array.array_indx/0","doc":"","ref":"array.html#t:array_indx/0"},{"type":"type","title":"array.array_opt/0","doc":"","ref":"array.html#t:array_opt/0"},{"type":"type","title":"array.array_opts/0","doc":"","ref":"array.html#t:array_opts/0"},{"type":"function","title":"array.default/1","doc":"Gets the value used for uninitialized entries.\n\nSee also `new/2`.","ref":"array.html#default/1"},{"type":"function","title":"array.fix/1","doc":"Fixes the array size. This prevents it from growing automatically upon\ninsertion.\n\nSee also `set/3` and `relax/1`.","ref":"array.html#fix/1"},{"type":"function","title":"array.foldl/3","doc":"Folds the array elements using the specified function and initial accumulator\nvalue. The elements are visited in order from the lowest index to the highest.\n\nIf `Function` is not a function, the call fails with reason `badarg`.\n\nSee also `foldr/3`, `map/2`, `sparse_foldl/3`.","ref":"array.html#foldl/3"},{"type":"function","title":"array.foldr/3","doc":"Folds the array elements right-to-left using the specified function and initial\naccumulator value. The elements are visited in order from the highest index to\nthe lowest.\n\nIf `Function` is not a function, the call fails with reason `badarg`.\n\nSee also `foldl/3`, `map/2`.","ref":"array.html#foldr/3"},{"type":"function","title":"array.from_list/1","doc":"Equivalent to [`from_list(List, undefined)`](`from_list/2`).","ref":"array.html#from_list/1"},{"type":"function","title":"array.from_list/2","doc":"Converts a list to an extendible array. `Default` is used as the value for\nuninitialized entries of the array.\n\nIf `List` is not a proper list, the call fails with reason `badarg`.\n\nSee also `new/2`, `to_list/1`.","ref":"array.html#from_list/2"},{"type":"function","title":"array.from_orddict/1","doc":"Equivalent to [`from_orddict(Orddict, undefined)`](`from_orddict/2`).","ref":"array.html#from_orddict/1"},{"type":"function","title":"array.from_orddict/2","doc":"Converts an ordered list of pairs `{Index, Value}` to a corresponding extendible\narray. `Default` is used as the value for uninitialized entries of the array.\n\nIf `Orddict` is not a proper, ordered list of pairs whose first elements are\nnon-negative integers, the call fails with reason `badarg`.\n\nSee also `new/2`, `to_orddict/1`.","ref":"array.html#from_orddict/2"},{"type":"function","title":"array.get/2","doc":"Gets the value of entry `I`.\n\nIf `I` is not a non-negative integer, or if the array has fixed size and `I` is\nlarger than the maximum index, the call fails with reason `badarg`.\n\nIf the array does not have fixed size, the default value for any index `I`\ngreater than `size(Array)-1` is returned.\n\nSee also `set/3`.","ref":"array.html#get/2"},{"type":"type","title":"array.indx_pair/1","doc":"","ref":"array.html#t:indx_pair/1"},{"type":"type","title":"array.indx_pairs/1","doc":"","ref":"array.html#t:indx_pairs/1"},{"type":"function","title":"array.is_array/1","doc":"Returns `true` if `X` is an array, otherwise `false`.\n\nNotice that the check is only shallow, as there is no guarantee that `X` is a\nwell-formed array representation even if this function returns `true`.","ref":"array.html#is_array/1"},{"type":"function","title":"array.is_fix/1","doc":"Checks if the array has fixed size. Returns `true` if the array is fixed,\notherwise `false`.\n\nSee also `fix/1`.","ref":"array.html#is_fix/1"},{"type":"function","title":"array.map/2","doc":"Maps the specified function onto each array element. The elements are visited in\norder from the lowest index to the highest.\n\nIf `Function` is not a function, the call fails with reason `badarg`.\n\nSee also `foldl/3`, `foldr/3`, `sparse_map/2`.","ref":"array.html#map/2"},{"type":"function","title":"array.new/0","doc":"Creates a new, extendible array with initial size zero.\n\nSee also `new/1`, `new/2`.","ref":"array.html#new/0"},{"type":"function","title":"array.new/1","doc":"Creates a new array according to the specified options. By default, the array is\nextendible and has initial size zero. Array indices start at `0`.\n\n`Options` is a single term or a list of terms, selected from the following:\n\n- **`N::integer() >= 0` or `{size, N::integer() >= 0}`** - Specifies the initial\n  array size; this also implies `{fixed, true}`. If `N` is not a non-negative\n  integer, the call fails with reason `badarg`.\n\n- **`fixed` or `{fixed, true}`** - Creates a fixed-size array. See also `fix/1`.\n\n- **`{fixed, false}`** - Creates an extendible (non-fixed-size) array.\n\n- **`{default, Value}`** - Sets the default value for the array to `Value`.\n\nOptions are processed in the order they occur in the list, that is, later\noptions have higher precedence.\n\nThe default value is used as the value of uninitialized entries, and cannot be\nchanged once the array has been created.\n\n_Examples:_\n\n```\narray:new(100)\n```\n\ncreates a fixed-size array of size 100.\n\n```\narray:new({default,0})\n```\n\ncreates an empty, extendible array whose default value is `0`.\n\n```\narray:new([{size,10},{fixed,false},{default,-1}])\n```\n\ncreates an extendible array with initial size 10 whose default value is `-1`.\n\nSee also `fix/1`, `from_list/2`, `get/2`, `new/0`, `new/2`, `set/3`.","ref":"array.html#new/1"},{"type":"function","title":"array.new/2","doc":"Creates a new array according to the specified size and options.\n\nIf `Size` is not a non-negative integer, the call fails with reason `badarg`.\nBy default, the array has fixed size. Notice that any size specifications in\n`Options` override parameter `Size`.\n\nIf `Options` is a list, this is equivalent to\n[`new([{size, Size} | Options])`](`new/1`), otherwise it is equivalent to\n[`new([{size, Size} | [Options]])`](`new/1`). However, using this function\ndirectly is more efficient.\n\n_Example:_\n\n```\narray:new(100, {default,0})\n```\n\ncreates a fixed-size array of size 100, whose default value is `0`.\n\nSee also `new/1`.","ref":"array.html#new/2"},{"type":"function","title":"array.relax/1","doc":"Makes the array resizable. (Reverses the effects of `fix/1`.)\n\nSee also `fix/1`.","ref":"array.html#relax/1"},{"type":"function","title":"array.reset/2","doc":"Resets entry `I` to the default value for the array. If the value of entry `I`\nis the default value, the array is returned unchanged.\n\nReset never changes the array size. Shrinking can be done explicitly by calling\n`resize/2`.\n\nIf `I` is not a non-negative integer, or if the array has fixed size and `I` is\nlarger than the maximum index, the call fails with reason `badarg`; compare\n`set/3`\n\nSee also `new/2`, `set/3`.","ref":"array.html#reset/2"},{"type":"function","title":"array.resize/1","doc":"Changes the array size to that reported by `sparse_size/1`. If the specified\narray has fixed size, also the resulting array has fixed size.\n\nSee also `resize/2`, `sparse_size/1`.","ref":"array.html#resize/1"},{"type":"function","title":"array.resize/2","doc":"Change the array size.\n\nIf `Size` is not a non-negative integer, the call fails with reason `badarg`. If\nthe specified array has fixed size, also the resulting array has fixed size.","ref":"array.html#resize/2"},{"type":"function","title":"array.set/3","doc":"Sets entry `I` of the array to `Value`.\n\nIf `I` is not a non-negative integer, or if the array has fixed size and `I` is\nlarger than the maximum index, the call fails with reason `badarg`.\n\nIf the array does not have fixed size, and `I` is greater than `size(Array)-1`,\nthe array grows to size `I+1`.\n\nSee also `get/2`, `reset/2`.","ref":"array.html#set/3"},{"type":"function","title":"array.size/1","doc":"Gets the number of entries in the array. Entries are numbered from `0` to\n`size(Array)-1`. Hence, this is also the index of the first entry that is\nguaranteed to not have been previously set.\n\nSee also `set/3`, `sparse_size/1`.","ref":"array.html#size/1"},{"type":"function","title":"array.sparse_foldl/3","doc":"Folds the array elements using the specified function and initial accumulator\nvalue, skipping default-valued entries. The elements are visited in order from\nthe lowest index to the highest.\n\nIf `Function` is not a function, the call fails with reason `badarg`.\n\nSee also `foldl/3`, `sparse_foldr/3`.","ref":"array.html#sparse_foldl/3"},{"type":"function","title":"array.sparse_foldr/3","doc":"Folds the array elements right-to-left using the specified function and initial\naccumulator value, skipping default-valued entries. The elements are visited in\norder from the highest index to the lowest.\n\nIf `Function` is not a function, the call fails with reason `badarg`.\n\nSee also `foldr/3`, `sparse_foldl/3`.","ref":"array.html#sparse_foldr/3"},{"type":"function","title":"array.sparse_map/2","doc":"Maps the specified function onto each array element, skipping default-valued\nentries. The elements are visited in order from the lowest index to the highest.\n\nIf `Function` is not a function, the call fails with reason `badarg`.\n\nSee also `map/2`.","ref":"array.html#sparse_map/2"},{"type":"function","title":"array.sparse_size/1","doc":"Gets the number of entries in the array up until the last non-default-valued\nentry. That is, returns `I+1` if `I` is the last non-default-valued entry in the\narray, or zero if no such entry exists.\n\nSee also `resize/1`, `size/1`.","ref":"array.html#sparse_size/1"},{"type":"function","title":"array.sparse_to_list/1","doc":"Converts the array to a list, skipping default-valued entries.\n\nSee also `to_list/1`.","ref":"array.html#sparse_to_list/1"},{"type":"function","title":"array.sparse_to_orddict/1","doc":"Converts the array to an ordered list of pairs `{Index, Value}`, skipping\ndefault-valued entries.\n\nSee also `to_orddict/1`.","ref":"array.html#sparse_to_orddict/1"},{"type":"function","title":"array.to_list/1","doc":"Converts the array to a list.\n\nSee also `from_list/2`, `sparse_to_list/1`.","ref":"array.html#to_list/1"},{"type":"function","title":"array.to_orddict/1","doc":"Converts the array to an ordered list of pairs `{Index, Value}`.\n\nSee also `from_orddict/2`, `sparse_to_orddict/1`.","ref":"array.html#to_orddict/1"},{"type":"module","title":"dets","doc":"A disk-based term storage.\n\nThis module provides a term storage on file. The stored terms, in this module\ncalled _objects_, are tuples such that one element is defined to be the key. A\nDets _table_ is a collection of objects with the key at the same position stored\non a file.\n\nThis module is used by the Mnesia application, and is provided \"as is\" for users\nwho are interested in efficient storage of Erlang terms on disk only. Many\napplications only need to store some terms in a file. Mnesia adds transactions,\nqueries, and distribution. The size of Dets files cannot exceed 2 GB. If larger\ntables are needed, table fragmentation in Mnesia can be used.\n\nThree types of Dets tables exist:\n\n- `set`. A table of this type has at most one object with a given key. If an\n  object with a key already present in the table is inserted, the existing\n  object is overwritten by the new object.\n- `bag`. A table of this type has zero or more different objects with a given\n  key.\n- `duplicate_bag`. A table of this type has zero or more possibly matching\n  objects with a given key.\n\nDets tables must be opened before they can be updated or read, and when finished\nthey must be properly closed. If a table is not properly closed, Dets\nautomatically repairs the table. This can take a substantial time if the table\nis large. A Dets table is closed when the process which opened the table\nterminates. If many Erlang processes (users) open the same Dets table, they\nshare the table. The table is properly closed when all users have either\nterminated or closed the table. Dets tables are not properly closed if the\nErlang runtime system terminates abnormally.\n\n> #### Note {: .info }\n>\n> A `^C` command abnormally terminates an Erlang runtime system in a Unix\n> environment with a break-handler.\n\nAs all operations performed by Dets are disk operations, it is important to\nrealize that a single look-up operation involves a series of disk seek and read\noperations. The Dets functions are therefore much slower than the corresponding\n`m:ets` functions, although Dets exports a similar interface.\n\nDets organizes data as a linear hash list and the hash list grows gracefully as\nmore data is inserted into the table. Space management on the file is performed\nby what is called a buddy system. The current implementation keeps the entire\nbuddy system in RAM, which implies that if the table gets heavily fragmented,\nquite some memory can be used up. The only way to defragment a table is to close\nit and then open it again with option `repair` set to `force`.\n\nNotice that type `ordered_set` in Ets is not yet provided by Dets, neither is\nthe limited support for concurrent updates that makes a sequence of `first` and\n`next` calls safe to use on fixed ETS tables. Both these features may be\nprovided by Dets in a future release of Erlang/OTP. Until then, the Mnesia\napplication (or some user-implemented method for locking) must be used to\nimplement safe concurrency. Currently, no Erlang/OTP library has support for\nordered disk-based term storage.\n\nAll Dets functions return `{error, Reason}` if an error occurs (`first/1` and\n`next/2` are exceptions, they exit the process with the error tuple). If badly\nformed arguments are specified, all functions exit the process with a `badarg`\nmessage.","ref":"dets.html"},{"type":"module","title":"See Also - dets","doc":"`m:ets`, `m:mnesia`, `m:qlc`","ref":"dets.html#module-see-also"},{"type":"type","title":"dets.access/0","doc":"","ref":"dets.html#t:access/0"},{"type":"function","title":"dets.all/0","doc":"Returns a list of the names of all open tables on this node.","ref":"dets.html#all/0"},{"type":"type","title":"dets.auto_save/0","doc":"","ref":"dets.html#t:auto_save/0"},{"type":"function","title":"dets.bchunk/2","doc":"Returns a list of objects stored in a table. The exact representation of the\nreturned objects is not public.\n\nThe lists of data can be used for initializing a table by specifying value\n`bchunk` to option `format` of function `init_table/3`. The Mnesia application\nuses this function for copying open tables.\n\nUnless the table is protected using [`safe_fixtable/2`](`safe_fixtable/2`),\ncalls to [`bchunk/2`](`bchunk/2`) do possibly not work as expected if concurrent\nupdates are made to the table.\n\nThe first time [`bchunk/2`](`bchunk/2`) is called, an initial continuation, the\natom `start`, must be provided.\n\n[`bchunk/2`](`bchunk/2`) returns a tuple `{Continuation2, Data}`, where `Data`\nis a list of objects. `Continuation2` is another continuation that is to be\npassed on to a subsequent call to [`bchunk/2`](`bchunk/2`). With a series of\ncalls to [`bchunk/2`](`bchunk/2`), all table objects can be extracted.\n\n[`bchunk/2`](`bchunk/2`) returns `'$end_of_table'` when all objects are\nreturned, or `{error, Reason}` if an error occurs.","ref":"dets.html#bchunk/2"},{"type":"opaque","title":"dets.bindings_cont/0","doc":"Opaque continuation used by `match/1` and `match/3`.","ref":"dets.html#t:bindings_cont/0"},{"type":"function","title":"dets.close/1","doc":"Closes a table. Only processes that have opened a table are allowed to close it.\n\nAll open tables must be closed before the system is stopped. If an attempt is\nmade to open a table that is not properly closed, Dets automatically tries to\nrepair it.","ref":"dets.html#close/1"},{"type":"opaque","title":"dets.cont/0","doc":"Opaque continuation used by `bchunk/2`.","ref":"dets.html#t:cont/0"},{"type":"function","title":"dets.delete/2","doc":"Deletes all objects with key `Key` from table `Name`.","ref":"dets.html#delete/2"},{"type":"function","title":"dets.delete_all_objects/1","doc":"Deletes all objects from a table in almost constant time. However, if the table\nif fixed, [`delete_all_objects(T)`](`delete_all_objects/1`) is equivalent to\n[`match_delete(T, '_')`](`match_delete/2`).","ref":"dets.html#delete_all_objects/1"},{"type":"function","title":"dets.delete_object/2","doc":"Deletes all instances of a specified object from a table. If a table is of type\n`bag` or `duplicate_bag`, this function can be used to delete only some of the\nobjects with a specified key.","ref":"dets.html#delete_object/2"},{"type":"function","title":"dets.first/1","doc":"Returns the first key stored in table `Name` according to the internal order of\nthe table, or `'$end_of_table'` if the table is empty.\n\nUnless the table is protected using [`safe_fixtable/2`](`safe_fixtable/2`),\nsubsequent calls to `next/2` do possibly not work as expected if concurrent\nupdates are made to the table.\n\nIf an error occurs, the process is exited with an error tuple `{error, Reason}`.\nThe error tuple is not returned, as it cannot be distinguished from a key.\n\nThere are two reasons why [`first/1`](`first/1`) and [`next/2`](`next/2`) are\nnot to be used: they are not efficient, and they prevent the use of key\n`'$end_of_table'`, as this atom is used to indicate the end of the table. If\npossible, use functions [`match`](`match/1`),\n[`match_object`](`match_object/1`), and [`select`](`select/1`) for traversing\ntables.","ref":"dets.html#first/1"},{"type":"function","title":"dets.foldl/3","doc":"","ref":"dets.html#foldl/3"},{"type":"function","title":"dets.foldr/3","doc":"Calls `Function` on successive elements of table `Name` together with an extra\nargument `AccIn`. The table elements are traversed in unspecified order.\n`Function` must return a new accumulator that is passed to the next call. `Acc0`\nis returned if the table is empty.","ref":"dets.html#foldr/3"},{"type":"function","title":"dets.from_ets/2","doc":"Deletes all objects of table `Name` and then inserts all the objects of the ETS\ntable `EtsTab`. The objects are inserted in unspecified order. As\n`ets:safe_fixtable/2` is called, the ETS table must be public or owned by the\ncalling process.","ref":"dets.html#from_ets/2"},{"type":"function","title":"dets.info/1","doc":"Returns information about table `Name` as a list of tuples:\n\n- `{file_size, integer() >= 0}}` \\- The file size, in bytes.\n- `{filename,` `t:file:name/0` `}` \\- The name of the file where objects are\n  stored.\n- `{keypos,` `t:keypos/0` `}` \\- The key position.\n- `{size, integer() >= 0}` \\- The number of objects stored in the table.\n- `{type,` `t:type/0` `}` \\- The table type.","ref":"dets.html#info/1"},{"type":"function","title":"dets.info/2","doc":"Returns the information associated with `Item` for table `Name`. In addition to\nthe `{Item, Value}` pairs defined for `info/1`, the following items are allowed:\n\n- `{access,` `t:access/0` `}` \\- The access mode.\n- `{auto_save,` `t:auto_save/0` `}` \\- The autosave interval.\n- `{bchunk_format, binary()}` \\- An opaque binary describing the format of the\n  objects returned by [`bchunk/2`](`bchunk/2`). The binary can be used as\n  argument to\n  [`is_compatible_bchunk_format/2`](`is_compatible_bchunk_format/2`).\n- `{hash, Hash}` \\- Describes which BIF is used to calculate the hash values of\n  the objects stored in the Dets table. Possible values of `Hash`:\n\n  - `phash` \\- Implies that the `erlang:phash/2` BIF is used.\n  - `phash2` \\- Implies that the `erlang:phash2/1` BIF is used.\n\n- `{memory, integer() >= 0}` \\- The file size, in bytes. The same value is\n  associated with item `file_size`.\n- `{no_keys, integer >= 0()}` \\- The number of different keys stored in the\n  table.\n- `{no_objects, integer >= 0()}` \\- The number of objects stored in the table.\n- `{no_slots, {Min, Used, Max}}` \\- The number of slots of the table. `Min` is\n  the minimum number of slots, `Used` is the number of currently used slots, and\n  `Max` is the maximum number of slots.\n- `{owner, pid()}` \\- The pid of the process that handles requests to the Dets\n  table.\n- `{ram_file, boolean()}` \\- Whether the table is kept in RAM.\n- `{safe_fixed_monotonic_time, SafeFixed}` \\- If the table is fixed, `SafeFixed`\n  is a tuple `{FixedAtTime, [{Pid,RefCount}]}`. `FixedAtTime` is the time when\n  the table was first fixed, and `Pid` is the pid of the process that fixes the\n  table `RefCount` times. There can be any number of processes in the list. If\n  the table is not fixed, `SafeFixed` is the atom `false`.\n\n  `FixedAtTime` corresponds to the result returned by `erlang:monotonic_time/0`\n  at the time of fixation. The use of `safe_fixed_monotonic_time` is\n  [time warp safe](`e:erts:time_correction.md#time-warp-safe-code`).\n\n- `{safe_fixed, SafeFixed}` \\- The same as\n  `{safe_fixed_monotonic_time, SafeFixed}` except the format and value of\n  `FixedAtTime`.\n\n  `FixedAtTime` corresponds to the result returned by `erlang:timestamp/0` at\n  the time of fixation. Notice that when the system uses single or multi\n  [time warp modes](`e:erts:time_correction.md#time-warp-modes`), this can\n  produce strange results. This is because the use of `safe_fixed` is not\n  [time warp safe](`e:erts:time_correction.md#time-warp-safe-code`). Time warp\n  safe code must use `safe_fixed_monotonic_time` instead.","ref":"dets.html#info/2"},{"type":"function","title":"dets.init_table/2","doc":"","ref":"dets.html#init_table/2"},{"type":"function","title":"dets.init_table/3","doc":"Replaces the existing objects of table `Name` with objects created by calling\nthe input function `InitFun`.\n\nThe reason for using this function rather than calling [`insert/2`](`insert/2`)\nis that of efficiency. Notice that the input functions are called by the process\nthat handles requests to the Dets table, not by the calling process.\n\nWhen called with argument `read`, function `InitFun` is assumed to return\n`end_of_input` when there is no more input, or `{Objects, Fun}`, where `Objects`\nis a list of objects and `Fun` is a new input function. Any other value `Value`\nis returned as an error `{error, {init_fun, Value}}`. Each input function is\ncalled exactly once, and if an error occurs, the last function is called with\nargument `close`, the reply of which is ignored.\n\nIf the table type is `set` and more than one object exists with a given key, one\nof the objects is chosen. This is not necessarily the last object with the given\nkey in the sequence of objects returned by the input functions. Avoid duplicate\nkeys, otherwise the file becomes unnecessarily fragmented. This holds also for\nduplicated objects stored in tables of type `bag`.\n\nIt is important that the table has a sufficient number of slots for the objects.\nIf not, the hash list starts to grow when [`init_table/2`](`init_table/2`)\nreturns, which significantly slows down access to the table for a period of\ntime. The minimum number of slots is set by the [`open_file/2`](`open_file/2`)\noption `min_no_slots` and returned by the [`info/2`](`info/2`) item `no_slots`.\nSee also option `min_no_slots` below.\n\nArgument `Options` is a list of `{Key, Val}` tuples, where the following values\nare allowed:\n\n- `{min_no_slots, no_slots()}` \\- Specifies the estimated number of different\n  keys to be stored in the table. The [`open_file/2`](`open_file/2`) option with\n  the same name is ignored, unless the table is created, in which case\n  performance can be enhanced by supplying an estimate when initializing the\n  table.\n- `{format, Format}` \\- Specifies the format of the objects returned by function\n  `InitFun`. If `Format` is `term` (the default), `InitFun` is assumed to return\n  a list of tuples. If `Format` is `bchunk`, `InitFun` is assumed to return\n  `Data` as returned by `bchunk/2`. This option overrides option `min_no_slots`.","ref":"dets.html#init_table/3"},{"type":"function","title":"dets.insert/2","doc":"Inserts one or more objects into the table `Name`. If there already exists an\nobject with a key matching the key of some of the given objects and the table\ntype is `set`, the old object will be replaced.","ref":"dets.html#insert/2"},{"type":"function","title":"dets.insert_new/2","doc":"Inserts one or more objects into table `Name`. If there already exists some\nobject with a key matching the key of any of the specified objects, the table is\nnot updated and `false` is returned. Otherwise the objects are inserted and\n`true` returned.","ref":"dets.html#insert_new/2"},{"type":"function","title":"dets.is_compatible_bchunk_format/2","doc":"Returns `true` if it would be possible to initialize table `Name`, using\n`init_table/3` with option `{format, bchunk}`, with objects read with `bchunk/2`\nfrom some table `T`, such that calling [`info(T, bchunk_format)`](`info/2`)\nreturns `BchunkFormat`.","ref":"dets.html#is_compatible_bchunk_format/2"},{"type":"function","title":"dets.is_dets_file/1","doc":"Returns `true` if file `Filename` is a Dets table, otherwise `false`.","ref":"dets.html#is_dets_file/1"},{"type":"type","title":"dets.keypos/0","doc":"","ref":"dets.html#t:keypos/0"},{"type":"function","title":"dets.lookup/2","doc":"Returns a list of all objects with key `Key` stored in table `Name`, for\nexample:\n\n```erlang\n2> dets:open_file(abc, [{type, bag}]).\n{ok,abc}\n3> dets:insert(abc, {1,2,3}).\nok\n4> dets:insert(abc, {1,3,4}).\nok\n5> dets:lookup(abc, 1).\n[{1,2,3},{1,3,4}]\n```\n\nIf the table type is `set`, the function returns either the empty list or a list\nwith one object, as there cannot be more than one object with a given key. If\nthe table type is `bag` or `duplicate_bag`, the function returns a list of\narbitrary length.\n\nNotice that the order of objects returned is unspecified. In particular, the\norder in which objects were inserted is not reflected.","ref":"dets.html#lookup/2"},{"type":"function","title":"dets.match/1","doc":"Matches some objects stored in a table and returns a non-empty list of the\nbindings matching a specified pattern in some unspecified order. The table, the\npattern, and the number of objects that are matched are all defined by\n`Continuation`, which has been returned by a previous call to\n[`match/1`](`match/1`) or [`match/3`](`match/3`).\n\nWhen all table objects are matched, `'$end_of_table'` is returned.","ref":"dets.html#match/1"},{"type":"function","title":"dets.match/2","doc":"Returns for each object of table `Name` that matches `Pattern` a list of\nbindings in some unspecified order. For a description of patterns, see\n`ets:match/2`. If the keypos'th element of `Pattern` is unbound, all table\nobjects are matched. If the keypos'th element is bound, only the objects with\nthe correct key are matched.","ref":"dets.html#match/2"},{"type":"function","title":"dets.match/3","doc":"Matches some or all objects of table `Name` and returns a non-empty list of the\nbindings that match `Pattern` in some unspecified order. For a description of\npatterns, see `ets:match/2`.\n\nA tuple of the bindings and a continuation is returned, unless the table is\nempty, in which case `'$end_of_table'` is returned. The continuation is to be\nused when matching further objects by calling `match/1`.\n\nIf the keypos'th element of `Pattern` is bound, all table objects are matched.\nIf the keypos'th element is unbound, all table objects are matched, `N` objects\nat a time, until at least one object matches or the end of the table is reached.\nThe default, indicated by giving `N` the value `default`, is to let the number\nof objects vary depending on the sizes of the objects. All objects with the same\nkey are always matched at the same time, which implies that more than N objects\ncan sometimes be matched.\n\nThe table is always to be protected using `safe_fixtable/2` before calling\n[`match/3`](`match/3`), otherwise errors can occur when calling\n[`match/1`](`match/1`).","ref":"dets.html#match/3"},{"type":"function","title":"dets.match_delete/2","doc":"Deletes all objects that match `Pattern` from table `Name`. For a description of\npatterns, see `ets:match/2`.\n\nIf the keypos'th element of `Pattern` is bound, only the objects with the\ncorrect key are matched.","ref":"dets.html#match_delete/2"},{"type":"function","title":"dets.match_object/1","doc":"Returns a non-empty list of some objects stored in a table that match a given\npattern in some unspecified order. The table, the pattern, and the number of\nobjects that are matched are all defined by `Continuation`, which has been\nreturned by a previous call to [`match_object/1`](`match_object/1`) or\n[`match_object/3`](`match_object/3`).\n\nWhen all table objects are matched, `'$end_of_table'` is returned.","ref":"dets.html#match_object/1"},{"type":"function","title":"dets.match_object/2","doc":"Returns a list of all objects of table `Name` that match `Pattern` in some\nunspecified order. For a description of patterns, see `ets:match/2`.\n\nIf the keypos'th element of `Pattern` is unbound, all table objects are matched.\nIf the keypos'th element of `Pattern` is bound, only the objects with the\ncorrect key are matched.\n\nUsing the `match_object` functions for traversing all table objects is more\nefficient than calling [`first/1`](`first/1`) and [`next/2`](`next/2`) or\n[`slot/2`](`slot/2`).","ref":"dets.html#match_object/2"},{"type":"function","title":"dets.match_object/3","doc":"Matches some or all objects stored in table `Name` and returns a non-empty list\nof the objects that match `Pattern` in some unspecified order. For a description\nof patterns, see `ets:match/2`.\n\nA list of objects and a continuation is returned, unless the table is empty, in\nwhich case `'$end_of_table'` is returned. The continuation is to be used when\nmatching further objects by calling `match_object/1`.\n\nIf the keypos'th element of `Pattern` is bound, all table objects are matched.\nIf the keypos'th element is unbound, all table objects are matched, `N` objects\nat a time, until at least one object matches or the end of the table is reached.\nThe default, indicated by giving `N` the value `default`, is to let the number\nof objects vary depending on the sizes of the objects. All matching objects with\nthe same key are always returned in the same reply, which implies that more than\nN objects can sometimes be returned.\n\nThe table is always to be protected using `safe_fixtable/2` before calling\n[`match_object/3`](`match_object/3`), otherwise errors can occur when calling\n[`match_object/1`](`match_object/1`).","ref":"dets.html#match_object/3"},{"type":"type","title":"dets.match_spec/0","doc":"Match specifications, see section\n[Match Specification in Erlang](`e:erts:match_spec.md`) in ERTS User's Guide and\nthe `m:ms_transform` module.","ref":"dets.html#t:match_spec/0"},{"type":"function","title":"dets.member/2","doc":"Works like `lookup/2`, but does not return the objects. Returns `true` if one or\nmore table elements has key `Key`, otherwise `false`.","ref":"dets.html#member/2"},{"type":"function","title":"dets.next/2","doc":"Returns either the key following `Key1` in table `Name` according to the\ninternal order of the table, or `'$end_of_table'` if there is no next key.\n\nIf an error occurs, the process is exited with an error tuple `{error, Reason}`.\n\nTo find the first key in the table, use `first/1`.","ref":"dets.html#next/2"},{"type":"type","title":"dets.no_slots/0","doc":"","ref":"dets.html#t:no_slots/0"},{"type":"type","title":"dets.object/0","doc":"","ref":"dets.html#t:object/0"},{"type":"opaque","title":"dets.object_cont/0","doc":"Opaque continuation used by `match_object/1` and `match_object/3`.","ref":"dets.html#t:object_cont/0"},{"type":"function","title":"dets.open_file/1","doc":"Opens an existing table. If the table is not properly closed, it is repaired.\nThe returned reference is to be used as the table name. This function is most\nuseful for debugging purposes.","ref":"dets.html#open_file/1"},{"type":"function","title":"dets.open_file/2","doc":"Opens a table. An empty Dets table is created if no file exists.\n\nThe atom `Name` is the table name. The table name must be provided in all\nsubsequent operations on the table. The name can be used by other processes as\nwell, and many processes can share one table.\n\nIf two processes open the same table by giving the same name and arguments, the\ntable has two users. If one user closes the table, it remains open until the\nsecond user closes it.\n\nArgument `Args` is a list of `{Key, Val}` tuples, where the following values are\nallowed:\n\n- `{access,` `t:access/0` `}` \\- Existing tables can be opened in read-only mode.\n  A table that is opened in read-only mode is not subjected to the automatic\n  file reparation algorithm if it is later opened after a crash. Defaults to\n  `read_write`.\n- `{auto_save,` `t:auto_save/0` `}` \\- The autosave interval. If the interval is\n  an integer `Time`, the table is flushed to disk whenever it is not accessed\n  for `Time` milliseconds. A table that has been flushed requires no reparation\n  when reopened after an uncontrolled emulator halt. If the interval is the atom\n  `infinity`, autosave is disabled. Defaults to 180000 (3 minutes).\n- `{estimated_no_objects,` `t:no_slots/0` `}` \\- Equivalent to option\n  `min_no_slots`.\n- `{file,` `t:file:name/0` `}` \\- The name of the file to be opened. Defaults to\n  the table name.\n- `{max_no_slots,` `t:no_slots/0` `}` \\- The maximum number of slots to be used.\n  Defaults to 32 M, which is the maximal value. Notice that a higher value can\n  increase the table fragmentation, and a smaller value can decrease the\n  fragmentation, at the expense of execution time.\n- `{min_no_slots,` `t:no_slots/0` `}` \\- Application performance can be enhanced\n  with this flag by specifying, when the table is created, the estimated number\n  of different keys to be stored in the table. Defaults to 256, which is the\n  minimum value.\n- `{keypos,` `t:keypos/0` `}` \\- The position of the element of each object to be\n  used as key. Defaults to 1. The ability to explicitly state the key position\n  is most convenient when we want to store Erlang records in which the first\n  position of the record is the name of the record type.\n- `{ram_file, boolean()}` \\- Whether the table is to be kept in RAM. Keeping the\n  table in RAM can sound like an anomaly, but can enhance the performance of\n  applications that open a table, insert a set of objects, and then close the\n  table. When the table is closed, its contents are written to the disk file.\n  Defaults to `false`.\n- `{repair, Value}` \\- `Value` can be either a `t:boolean/0` or the atom\n  `force`. The flag specifies if the Dets server is to invoke the automatic file\n  reparation algorithm. Defaults to `true`. If `false` is specified, no attempt\n  is made to repair the file, and `{error, {needs_repair, FileName}}` is\n  returned if the table must be repaired.\n\n  Value `force` means that a reparation is made even if the table is properly\n  closed. This is a seldom needed option.\n\n  Option `repair` is ignored if the table is already open.\n\n- `{type,` `t:type/0` `}` \\- The table type. Defaults to `set`.","ref":"dets.html#open_file/2"},{"type":"type","title":"dets.pattern/0","doc":"For a description of patterns, see `ets:match/2`.","ref":"dets.html#t:pattern/0"},{"type":"function","title":"dets.pid2name/1","doc":"Returns the table name given the pid of a process that handles requests to a\ntable, or `undefined` if there is no such table.\n\nThis function is meant to be used for debugging only.","ref":"dets.html#pid2name/1"},{"type":"function","title":"dets.repair_continuation/2","doc":"This function can be used to restore an opaque continuation returned by\n`select/3` or `select/1` if the continuation has passed through external term\nformat (been sent between nodes or stored on disk).\n\nThe reason for this function is that continuation terms contain compiled match\nspecifications and therefore are invalidated if converted to external term\nformat. Given that the original match specification is kept intact, the\ncontinuation can be restored, meaning it can once again be used in subsequent\n[`select/1`](`select/1`) calls even though it has been stored on disk or on\nanother node.\n\nFor more information and examples, see the `m:ets` module.\n\n> #### Note {: .info }\n>\n> This function is rarely needed in application code. It is used by application\n> Mnesia to provide distributed [`select/3`](`select/3`) and\n> [`select/1`](`select/1`) sequences. A normal application would either use\n> Mnesia or keep the continuation from being converted to external format.\n>\n> The reason for not having an external representation of compiled match\n> specifications is performance. It can be subject to change in future releases,\n> while this interface remains for backward compatibility.","ref":"dets.html#repair_continuation/2"},{"type":"function","title":"dets.safe_fixtable/2","doc":"If `Fix` is `true`, table `Name` is fixed (once more) by the calling process,\notherwise the table is released. The table is also released when a fixing\nprocess terminates.\n\nIf many processes fix a table, the table remains fixed until all processes have\nreleased it or terminated. A reference counter is kept on a per process basis,\nand N consecutive fixes require N releases to release the table.\n\nIt is not guaranteed that calls to [`first/1`](`first/1`), [`next/2`](`next/2`),\nor select and match functions work as expected even if the table is fixed; the\nlimited support for concurrency provided by the `m:ets` module is not yet\nprovided by Dets. Fixing a table currently only disables resizing of the hash\nlist of the table.\n\nIf objects have been added while the table was fixed, the hash list starts to\ngrow when the table is released, which significantly slows down access to the\ntable for a period of time.","ref":"dets.html#safe_fixtable/2"},{"type":"function","title":"dets.select/1","doc":"Applies a match specification to some objects stored in a table and returns a\nnon-empty list of the results. The table, the match specification, and the\nnumber of objects that are matched are all defined by `Continuation`, which is\nreturned by a previous call to `select/1` or `select/3`.\n\nWhen all objects of the table have been matched, `'$end_of_table'` is returned.","ref":"dets.html#select/1"},{"type":"function","title":"dets.select/2","doc":"Returns the results of applying match specification `MatchSpec` to all or some\nobjects stored in table `Name`. The order of the objects is not specified. For a\ndescription of match specifications, see the\n[ERTS User's Guide](`e:erts:match_spec.md`).\n\nIf the keypos'th element of `MatchSpec` is unbound, the match specification is\napplied to all objects of the table. If the keypos'th element is bound, the\nmatch specification is applied to the objects with the correct key(s) only.\n\nUsing the `select` functions for traversing all objects of a table is more\nefficient than calling [`first/1`](`first/1`) and [`next/2`](`next/2`) or\n[`slot/2`](`slot/2`).","ref":"dets.html#select/2"},{"type":"function","title":"dets.select/3","doc":"Returns the results of applying match specification `MatchSpec` to some or all\nobjects stored in table `Name`. The order of the objects is not specified. For a\ndescription of match specifications, see the\n[ERTS User's Guide](`e:erts:match_spec.md`).\n\nA tuple of the results of applying the match specification and a continuation is\nreturned, unless the table is empty, in which case `'$end_of_table'` is\nreturned. The continuation is to be used when matching more objects by calling\n`select/1`.\n\nIf the keypos'th element of `MatchSpec` is bound, the match specification is\napplied to all objects of the table with the correct key(s). If the keypos'th\nelement of `MatchSpec` is unbound, the match specification is applied to all\nobjects of the table, `N` objects at a time, until at least one object matches\nor the end of the table is reached. The default, indicated by giving `N` the\nvalue `default`, is to let the number of objects vary depending on the sizes of\nthe objects. All objects with the same key are always handled at the same time,\nwhich implies that the match specification can be applied to more than N\nobjects.\n\nThe table is always to be protected using `safe_fixtable/2` before calling\n[`select/3`](`select/3`), otherwise errors can occur when calling\n[`select/1`](`select/1`).","ref":"dets.html#select/3"},{"type":"opaque","title":"dets.select_cont/0","doc":"Opaque continuation used by `select/1` and `select/3`.","ref":"dets.html#t:select_cont/0"},{"type":"function","title":"dets.select_delete/2","doc":"Deletes each object from table `Name` such that applying match specification\n`MatchSpec` to the object returns value `true`. For a description of match\nspecifications, see the [ERTS User's Guide](`e:erts:match_spec.md`). Returns the\nnumber of deleted objects.\n\nIf the keypos'th element of `MatchSpec` is bound, the match specification is\napplied to the objects with the correct key(s) only.","ref":"dets.html#select_delete/2"},{"type":"function","title":"dets.slot/2","doc":"The objects of a table are distributed among slots, starting with slot `0` and\nending with slot `n`. Returns the list of objects associated with slot `I`. If\n`I` > `n`, `'$end_of_table'` is returned.","ref":"dets.html#slot/2"},{"type":"function","title":"dets.sync/1","doc":"Ensures that all updates made to table `Name` are written to disk. This also\napplies to tables that have been opened with flag `ram_file` set to `true`. In\nthis case, the contents of the RAM file are flushed to disk.\n\nNotice that the space management data structures kept in RAM, the buddy system,\nis also written to the disk. This can take some time if the table is fragmented.","ref":"dets.html#sync/1"},{"type":"type","title":"dets.tab_name/0","doc":"","ref":"dets.html#t:tab_name/0"},{"type":"function","title":"dets.table/1","doc":"","ref":"dets.html#table/1"},{"type":"function","title":"dets.table/2","doc":"Returns a Query List Comprehension (QLC) query handle. The `m:qlc` module\nprovides a query language aimed mainly for Mnesia, but ETS tables, Dets tables,\nand lists are also recognized by `qlc` as sources of data. Calling\n[`dets:table/1,2`](`table/1`) is the means to make Dets table `Name` usable to\n`qlc`.\n\nWhen there are only simple restrictions on the key position, `qlc` uses\n[`dets:lookup/2`](`lookup/2`) to look up the keys. When that is not possible,\nthe whole table is traversed. Option `traverse` determines how this is done:\n\n- `first_next` \\- The table is traversed one key at a time by calling\n  `dets:first/1` and `dets:next/2`.\n- `select` \\- The table is traversed by calling [`dets:select/3`](`select/3`)\n  and [`dets:select/1`](`select/1`). Option `n_objects` determines the number of\n  objects returned (the third argument of [`select/3`](`select/3`)). The match\n  specification (the second argument of [`select/3`](`select/3`)) is assembled\n  by `qlc`:\n\n  - Simple filters are translated into equivalent match specifications.\n  - More complicated filters must be applied to all objects returned by\n    [`select/3`](`select/3`) given a match specification that matches all\n    objects.\n\n- `{select,` `t:match_spec/0` `}` \\- As for `select`, the table is traversed by\n  calling `dets:select/3` and `dets:select/1`. The difference is that the match\n  specification is specified explicitly. This is how to state match\n  specifications that cannot easily be expressed within the syntax provided by\n  `qlc`.\n\nThe following example uses an explicit match specification to traverse the\ntable:\n\n```erlang\n1> dets:open_file(t, []),\nok = dets:insert(t, [{1,a},{2,b},{3,c},{4,d}]),\nMS = ets:fun2ms(fun({X,Y}) when (X > 1) or (X < 5) -> {Y} end),\nQH1 = dets:table(t, [{traverse, {select, MS}}]).\n```\n\nAn example with implicit match specification:\n\n```erlang\n2> QH2 = qlc:q([{Y} || {X,Y} <- dets:table(t), (X > 1) or (X < 5)]).\n```\n\nThe latter example is equivalent to the former, which can be verified using\nfunction `qlc:info/1`:\n\n```erlang\n3> qlc:info(QH1) =:= qlc:info(QH2).\ntrue\n```\n\n`qlc:info/1` returns information about a query handle. In this case identical\ninformation is returned for the two query handles.","ref":"dets.html#table/2"},{"type":"function","title":"dets.to_ets/2","doc":"Inserts the objects of the Dets table `Name` into the ETS table `EtsTab`. The\norder in which the objects are inserted is not specified. The existing objects\nof the ETS table are kept unless overwritten.","ref":"dets.html#to_ets/2"},{"type":"function","title":"dets.traverse/2","doc":"Applies `Fun` to each object stored in table `Name` in some unspecified order.\nDifferent actions are taken depending on the return value of `Fun`. The\nfollowing `Fun` return values are allowed:\n\n- **`continue`** - Continue to perform the traversal. For example, the following\n  function can be used to print the contents of a table:\n\n  ```erlang\n  fun(X) -> io:format(\"~p~n\", [X]), continue end.\n  ```\n\n- **`{continue, Val}`** - Continue the traversal and accumulate `Val`. The\n  following function is supplied to collect all objects of a table in a list:\n\n  ```text\n  fun(X) -> {continue, X} end.\n  ```\n\n- **`{done, Value}`** - Terminate the traversal and return `[Value | Acc]`.\n\nAny other value `OtherValue` returned by `Fun` terminates the traversal and is\nreturned immediately.","ref":"dets.html#traverse/2"},{"type":"type","title":"dets.type/0","doc":"","ref":"dets.html#t:type/0"},{"type":"function","title":"dets.update_counter/3","doc":"Updates the object with key `Key` stored in table `Name` of type `set` by adding\n`Incr` to the element at the `Pos`:th position. The new counter value is\nreturned. If no position is specified, the element directly following the key is\nupdated.\n\nThis functions provides a way of updating a counter, without having to look up\nan object, update the object by incrementing an element, and insert the\nresulting object into the table again.","ref":"dets.html#update_counter/3"},{"type":"module","title":"dict","doc":"A Key-value dictionary.\n\nThe representation of a dictionary is not defined.\n\nThis module provides the same interface as the `m:orddict` module. One\ndifference is that while this module considers two keys as different if they do\nnot match (`=:=`), `orddict` considers two keys as different if and only if they\ndo not compare equal (`==`).","ref":"dict.html"},{"type":"module","title":"Notes - dict","doc":"[](){: #notes }\n\nFunctions `append` and `append_list` are included so that keyed values can be\nstored in a list _accumulator_, for example:\n\n```erlang\n> D0 = dict:new(),\n  D1 = dict:store(files, [], D0),\n  D2 = dict:append(files, f1, D1),\n  D3 = dict:append(files, f2, D2),\n  D4 = dict:append(files, f3, D3),\n  dict:fetch(files, D4).\n[f1,f2,f3]\n```\n\nThis saves the trouble of first fetching a keyed value, appending a new value to\nthe list of stored values, and storing the result.\n\nFunction `fetch` is to be used if the key is known to be in the dictionary,\notherwise function `find`.","ref":"dict.html#module-notes"},{"type":"module","title":"See Also - dict","doc":"`m:gb_trees`, `m:orddict`","ref":"dict.html#module-see-also"},{"type":"function","title":"dict.append/3","doc":"Appends a new `Value` to the current list of values associated with `Key`.\n\nSee also section [Notes](`m:dict#module-notes`).","ref":"dict.html#append/3"},{"type":"function","title":"dict.append_list/3","doc":"Appends a list of values `ValList` to the current list of values associated with\n`Key`. An exception is generated if the initial value associated with `Key` is\nnot a list of values.\n\nSee also section [Notes](`m:dict#module-notes`).","ref":"dict.html#append_list/3"},{"type":"type","title":"dict.dict/0","doc":"","ref":"dict.html#t:dict/0"},{"type":"opaque","title":"dict.dict/2","doc":"Dictionary as returned by `new/0`.","ref":"dict.html#t:dict/2"},{"type":"function","title":"dict.erase/2","doc":"Erases all items with a given key from a dictionary.","ref":"dict.html#erase/2"},{"type":"function","title":"dict.fetch/2","doc":"Returns the value associated with `Key` in dictionary `Dict`. This function\nassumes that `Key` is present in dictionary `Dict`, and an exception is\ngenerated if `Key` is not in the dictionary.\n\nSee also section [Notes](`m:dict#module-notes`).","ref":"dict.html#fetch/2"},{"type":"function","title":"dict.fetch_keys/1","doc":"Returns a list of all keys in dictionary `Dict`.","ref":"dict.html#fetch_keys/1"},{"type":"function","title":"dict.filter/2","doc":"`Dict2` is a dictionary of all keys and values in `Dict1` for which\n`Pred(Key, Value)` is `true`.","ref":"dict.html#filter/2"},{"type":"function","title":"dict.find/2","doc":"Searches for a key in dictionary `Dict`. Returns `{ok, Value}`, where `Value` is\nthe value associated with `Key`, or `error` if the key is not present in the\ndictionary.\n\nSee also section [Notes](`m:dict#module-notes`).","ref":"dict.html#find/2"},{"type":"function","title":"dict.fold/3","doc":"Calls `Fun` on successive keys and values of dictionary `Dict` together with an\nextra argument `Acc` (short for accumulator). `Fun` must return a new\naccumulator that is passed to the next call. `Acc0` is returned if the\ndictionary is empty. The evaluation order is undefined.","ref":"dict.html#fold/3"},{"type":"function","title":"dict.from_list/1","doc":"Converts the `Key`-`Value` list `List` to dictionary `Dict`.","ref":"dict.html#from_list/1"},{"type":"function","title":"dict.is_empty/1","doc":"Returns `true` if dictionary `Dict` has no elements, otherwise `false`.","ref":"dict.html#is_empty/1"},{"type":"function","title":"dict.is_key/2","doc":"Tests if `Key` is contained in dictionary `Dict`.","ref":"dict.html#is_key/2"},{"type":"function","title":"dict.map/2","doc":"Calls `Fun` on successive keys and values of dictionary `Dict1` to return a new\nvalue for each key. The evaluation order is undefined.","ref":"dict.html#map/2"},{"type":"function","title":"dict.merge/3","doc":"Merges two dictionaries, `Dict1` and `Dict2`, to create a new dictionary. All\nthe `Key`-`Value` pairs from both dictionaries are included in the new\ndictionary. If a key occurs in both dictionaries, `Fun` is called with the key\nand both values to return a new value. `merge` can be defined as follows, but is\nfaster:\n\n```erlang\nmerge(Fun, D1, D2) ->\n    fold(fun (K, V1, D) ->\n                 update(K, fun (V2) -> Fun(K, V1, V2) end, V1, D)\n         end, D2, D1).\n```","ref":"dict.html#merge/3"},{"type":"function","title":"dict.new/0","doc":"Creates a new dictionary.","ref":"dict.html#new/0"},{"type":"function","title":"dict.size/1","doc":"Returns the number of elements in dictionary `Dict`.","ref":"dict.html#size/1"},{"type":"function","title":"dict.store/3","doc":"Stores a `Key`-`Value` pair in dictionary `Dict2`. If `Key` already exists in\n`Dict1`, the associated value is replaced by `Value`.","ref":"dict.html#store/3"},{"type":"function","title":"dict.take/2","doc":"This function returns value from dictionary and a new dictionary without this\nvalue. Returns `error` if the key is not present in the dictionary.","ref":"dict.html#take/2"},{"type":"function","title":"dict.to_list/1","doc":"Converts dictionary `Dict` to a list representation.","ref":"dict.html#to_list/1"},{"type":"function","title":"dict.update/3","doc":"Updates a value in a dictionary by calling `Fun` on the value to get a new\nvalue. An exception is generated if `Key` is not present in the dictionary.","ref":"dict.html#update/3"},{"type":"function","title":"dict.update/4","doc":"Updates a value in a dictionary by calling `Fun` on the value to get a new\nvalue. If `Key` is not present in the dictionary, `Initial` is stored as the\nfirst value. For example, [`append/3`](`append/3`) can be defined as:\n\n```erlang\nappend(Key, Val, D) ->\n    update(Key, fun (Old) -> Old ++ [Val] end, [Val], D).\n```","ref":"dict.html#update/4"},{"type":"function","title":"dict.update_counter/3","doc":"Adds `Increment` to the value associated with `Key` and stores this value. If\n`Key` is not present in the dictionary, `Increment` is stored as the first\nvalue.\n\nThis can be defined as follows, but is faster:\n\n```erlang\nupdate_counter(Key, Incr, D) ->\n    update(Key, fun (Old) -> Old + Incr end, Incr, D).\n```","ref":"dict.html#update_counter/3"},{"type":"module","title":"digraph","doc":"This module provides a version of labeled directed graphs (\"digraphs\").\n\nThe digraphs managed by this module are stored in [ETS tables](`m:ets`). That\nimplies the following:\n\n- Only the process that created the digraph is allowed to update it.\n- Digraphs will not be garbage collected. The ETS tables used for a digraph will\n  only be deleted when `delete/1` is called or the process that created the\n  digraph terminates.\n- A digraph is a mutable data structure.\n\nWhat makes the graphs provided here non-proper directed graphs is that multiple\nedges between vertices are allowed. However, the customary definition of\ndirected graphs is used here.\n\n- A _directed graph_{: #digraph } (or just \"digraph\") is a pair (V, E) of a\n  finite set V of _vertices_{: #vertex } and a finite set E of _directed\n  edges_{: #edge } (or just \"edges\"). The set of edges E is a subset of V × V\n  (the Cartesian product of V with itself).\n\n  In this module, V is allowed to be empty. The so obtained unique digraph is\n  called the _empty digraph_{: #empty_digraph }. Both vertices and edges are\n  represented by unique Erlang terms.\n\n- Digraphs can be annotated with more information. Such information can be\n  attached to the vertices and to the edges of the digraph. An annotated digraph\n  is called a _labeled digraph_, and the information attached to a vertex or an\n  edge is called a _label_{: #label }. Labels are Erlang terms.\n- An edge e = (v, w) is said to _emanate_{: #emanate } from vertex v and to be\n  _incident_{: #incident } on vertex w.\n- The _out-degree_{: #out_degree } of a vertex is the number of edges emanating\n  from that vertex.\n- The _in-degree_{: #in_degree } of a vertex is the number of edges incident on\n  that vertex.\n- If an edge is emanating from v and incident on w, then w is said to be an\n  _out-neighbor_{: #out_neighbour } of v, and v is said to be an _in-neighbor_{:\n  #in_neighbour } of w.\n- A _path_{: #path } P from v\\[1] to v\\[k] in a digraph (V, E) is a non-empty\n  sequence v\\[1], v\\[2], ..., v\\[k] of vertices in V such that there is an edge\n  (v\\[i],v\\[i+1]) in E for 1 <= i < k.\n- The _length_{: #length } of path P is k-1.\n- Path P is _simple_{: #simple_path } if all vertices are distinct, except that\n  the first and the last vertices can be the same.\n- Path P is a _cycle_{: #cycle } if the length of P is not zero and v\\[1] =\n  v\\[k].\n- A _loop_{: #loop } is a cycle of length one.\n- A _simple cycle_{: #simple_cycle } is a path that is both a cycle and simple.\n- An _acyclic digraph_{: #acyclic_digraph } is a digraph without cycles.","ref":"digraph.html"},{"type":"module","title":"See Also - digraph","doc":"`m:digraph_utils`, `m:ets`","ref":"digraph.html#module-see-also"},{"type":"function","title":"digraph.add_edge/3","doc":"","ref":"digraph.html#add_edge/3"},{"type":"function","title":"digraph.add_edge/4","doc":"Equivalent to [`add_edge(G, E, V1, V2, Label)`](`add_edge/5`), where `E` is a created edge.\n\nThe created edge is represented by term `['$e' | N]`, where `N` is an integer >= 0.\n\nSee `t:add_edge_err_rsn/0` for details on possible errors.","ref":"digraph.html#add_edge/4"},{"type":"function","title":"digraph.add_edge/5","doc":"Creates (or modifies) an edge with the identifier\n`E` of digraph `G`, using `Label` as the (new) [label](`m:digraph#label`) of the\nedge. The edge is [emanating](`m:digraph#emanate`) from `V1` and\n[incident](`m:digraph#incident`) on `V2`. Returns `E`.\n\nSee `t:add_edge_err_rsn/0` for details on possible errors.","ref":"digraph.html#add_edge/5"},{"type":"type","title":"digraph.add_edge_err_rsn/0","doc":"The error reason for when an edge could not be added to a graph.\n\nIf the edge would create a cycle in an\n[acyclic digraph](`m:digraph#acyclic_digraph`), `{error, {bad_edge, Path}}` is\nreturned. If `G` already has an edge with value `E` connecting a different pair\nof vertices, `{error, {bad_edge, [V1, V2]}}` is returned. If either of `V1` or\n`V2` is not a vertex of digraph `G`, `{error, {bad_vertex, `V`}}` is returned,\nV = `V1` or V = `V2`.","ref":"digraph.html#t:add_edge_err_rsn/0"},{"type":"function","title":"digraph.add_vertex/1","doc":"Creates a vertex using the empty list as label, and returns the created vertex.\n\nThe created vertex is represented by term `['$v' | N]`, where `N` is an integer >= 0.","ref":"digraph.html#add_vertex/1"},{"type":"function","title":"digraph.add_vertex/2","doc":"","ref":"digraph.html#add_vertex/2"},{"type":"function","title":"digraph.add_vertex/3","doc":"Creates (or modifies) vertex `V` of digraph `G`, using `Label` as the (new)\n[label](`m:digraph#label`) of the vertex. Returns the new vertex `V`.","ref":"digraph.html#add_vertex/3"},{"type":"type","title":"digraph.d_cyclicity/0","doc":"","ref":"digraph.html#t:d_cyclicity/0"},{"type":"type","title":"digraph.d_protection/0","doc":"","ref":"digraph.html#t:d_protection/0"},{"type":"type","title":"digraph.d_type/0","doc":"","ref":"digraph.html#t:d_type/0"},{"type":"function","title":"digraph.del_edge/2","doc":"Deletes edge `E` from digraph `G`.","ref":"digraph.html#del_edge/2"},{"type":"function","title":"digraph.del_edges/2","doc":"Deletes the edges in list `Edges` from digraph `G`.","ref":"digraph.html#del_edges/2"},{"type":"function","title":"digraph.del_path/3","doc":"Deletes edges from digraph `G` until there are no [paths](`m:digraph#path`) from\nvertex `V1` to vertex `V2`.\n\nA sketch of the procedure employed:\n\n- Find an arbitrary [simple path](`m:digraph#simple_path`)\n  v\\[1], v\\[2], ..., v\\[k] from `V1` to `V2` in `G`.\n- Remove all edges of `G` [emanating](`m:digraph#emanate`) from v\\[i] and\n  [incident](`m:digraph#incident`) to v\\[i+1] for 1 <= i < k (including multiple\n  edges).\n- Repeat until there is no path between `V1` and `V2`.","ref":"digraph.html#del_path/3"},{"type":"function","title":"digraph.del_vertex/2","doc":"Deletes vertex `V` from digraph `G`. Any edges [emanating](`m:digraph#emanate`)\nfrom `V` or [incident](`m:digraph#incident`) on `V` are also deleted.","ref":"digraph.html#del_vertex/2"},{"type":"function","title":"digraph.del_vertices/2","doc":"Deletes the vertices in list `Vertices` from digraph `G`.","ref":"digraph.html#del_vertices/2"},{"type":"function","title":"digraph.delete/1","doc":"Deletes digraph `G`. This call is important as digraphs are implemented with\nETS. There is no garbage collection of ETS tables. However, the digraph is\ndeleted if the process that created the digraph terminates.","ref":"digraph.html#delete/1"},{"type":"type","title":"digraph.edge/0","doc":"Serves as the identifier or \"name\" of an edge. This is distinct from an edge\n\"label\" which attaches ancillary information to the edge rather than identifying\nthe edge itself.","ref":"digraph.html#t:edge/0"},{"type":"function","title":"digraph.edge/2","doc":"Returns `{E, V1, V2, Label}`, where `Label` is the [label](`m:digraph#label`) of\nedge `E` [emanating](`m:digraph#emanate`) from `V1` and\n[incident](`m:digraph#incident`) on `V2` of digraph `G`. If no edge `E` of\ndigraph `G` exists, `false` is returned.","ref":"digraph.html#edge/2"},{"type":"function","title":"digraph.edges/1","doc":"Returns a list of all edges of digraph `G`, in some unspecified order.","ref":"digraph.html#edges/1"},{"type":"function","title":"digraph.edges/2","doc":"Returns a list of all edges [emanating](`m:digraph#emanate`) from or\n[incident](`m:digraph#incident`) on `V` of digraph `G`, in some unspecified\norder.","ref":"digraph.html#edges/2"},{"type":"function","title":"digraph.get_cycle/2","doc":"If a [simple cycle](`m:digraph#simple_cycle`) of length two or more exists\nthrough vertex `V`, the cycle is returned as a list `[V, ..., V]` of vertices.\nIf a [loop](`m:digraph#loop`) through `V` exists, the loop is returned as a list\n`[V]`. If no cycles through `V` exist, `false` is returned.\n\n`get_path/3` is used for finding a simple cycle through `V`.","ref":"digraph.html#get_cycle/2"},{"type":"function","title":"digraph.get_path/3","doc":"Tries to find a [simple path](`m:digraph#simple_path`) from vertex `V1` to\nvertex `V2` of digraph `G`. Returns the path as a list `[V1, ..., V2]` of\nvertices, or `false` if no simple path from `V1` to `V2` of length one or more\nexists.\n\nDigraph `G` is traversed in a depth-first manner, and the first found path is\nreturned.","ref":"digraph.html#get_path/3"},{"type":"function","title":"digraph.get_short_cycle/2","doc":"Tries to find an as short as possible [simple cycle](`m:digraph#simple_cycle`)\nthrough vertex `V` of digraph `G`. Returns the cycle as a list `[V, ..., V]` of\nvertices, or `false` if no simple cycle through `V` exists. Notice that a\n[loop](`m:digraph#loop`) through `V` is returned as list `[V, V]`.\n\n`get_short_path/3` is used for finding a simple cycle through `V`.","ref":"digraph.html#get_short_cycle/2"},{"type":"function","title":"digraph.get_short_path/3","doc":"Tries to find an as short as possible [simple path](`m:digraph#simple_path`)\nfrom vertex `V1` to vertex `V2` of digraph `G`. Returns the path as a list\n`[V1, ..., V2]` of vertices, or `false` if no simple path from `V1` to `V2` of\nlength one or more exists.\n\nDigraph `G` is traversed in a breadth-first manner, and the first found path is\nreturned.","ref":"digraph.html#get_short_path/3"},{"type":"opaque","title":"digraph.graph/0","doc":"A digraph as returned by [`new/0,1`](`new/0`).","ref":"digraph.html#t:graph/0"},{"type":"function","title":"digraph.in_degree/2","doc":"Returns the [in-degree](`m:digraph#in_degree`) of vertex `V` of digraph `G`.","ref":"digraph.html#in_degree/2"},{"type":"function","title":"digraph.in_edges/2","doc":"Returns a list of all edges [incident](`m:digraph#incident`) on `V` of digraph\n`G`, in some unspecified order.","ref":"digraph.html#in_edges/2"},{"type":"function","title":"digraph.in_neighbours/2","doc":"Returns a list of all [in-neighbors](`m:digraph#in_neighbour`) of `V` of digraph\n`G`, in some unspecified order.","ref":"digraph.html#in_neighbours/2"},{"type":"function","title":"digraph.info/1","doc":"Returns a list of `{Tag, Value}` pairs describing digraph `G`. The following\npairs are returned:\n\n- `{cyclicity, Cyclicity}`, where `Cyclicity` is `cyclic` or `acyclic`,\n  according to the options given to `new`.\n- `{memory, NoWords}`, where `NoWords` is the number of words allocated to the\n  ETS tables.\n- `{protection, Protection}`, where `Protection` is `protected` or `private`,\n  according to the options given to `new`.","ref":"digraph.html#info/1"},{"type":"type","title":"digraph.label/0","doc":"","ref":"digraph.html#t:label/0"},{"type":"function","title":"digraph.new/0","doc":"","ref":"digraph.html#new/0"},{"type":"function","title":"digraph.new/1","doc":"Returns an [empty digraph](`m:digraph#empty_digraph`) with properties according\nto the options in `Type`:\n\n- **`cyclic`** - Allows [cycles](`m:digraph#cycle`) in the digraph (default).\n\n- **`acyclic`** - The digraph is to be kept\n  [acyclic](`m:digraph#acyclic_digraph`).\n\n- **`protected`** - Other processes can read the digraph (default).\n\n- **`private`** - The digraph can be read and modified by the creating process\n  only.\n\nIf an unrecognized type option `T` is specified or `Type` is not a proper list,\na `badarg` exception is raised.","ref":"digraph.html#new/1"},{"type":"function","title":"digraph.no_edges/1","doc":"Returns the number of edges of digraph `G`.","ref":"digraph.html#no_edges/1"},{"type":"function","title":"digraph.no_vertices/1","doc":"Returns the number of vertices of digraph `G`.","ref":"digraph.html#no_vertices/1"},{"type":"function","title":"digraph.out_degree/2","doc":"Returns the [out-degree](`m:digraph#out_degree`) of vertex `V` of digraph `G`.","ref":"digraph.html#out_degree/2"},{"type":"function","title":"digraph.out_edges/2","doc":"Returns a list of all edges [emanating](`m:digraph#emanate`) from `V` of digraph\n`G`, in some unspecified order.","ref":"digraph.html#out_edges/2"},{"type":"function","title":"digraph.out_neighbours/2","doc":"Returns a list of all [out-neighbors](`m:digraph#out_neighbour`) of `V` of\ndigraph `G`, in some unspecified order.","ref":"digraph.html#out_neighbours/2"},{"type":"type","title":"digraph.vertex/0","doc":"","ref":"digraph.html#t:vertex/0"},{"type":"function","title":"digraph.vertex/2","doc":"Returns `{V, Label}`, where `Label` is the [label](`m:digraph#label`) of the\nvertex `V` of digraph `G`, or `false` if no vertex `V` of digraph `G` exists.","ref":"digraph.html#vertex/2"},{"type":"function","title":"digraph.vertices/1","doc":"Returns a list of all vertices of digraph `G`, in some unspecified order.","ref":"digraph.html#vertices/1"},{"type":"module","title":"digraph_utils","doc":"This module provides algorithms based on depth-first traversal of directed\ngraphs.\n\nFor basic functions on directed graphs, see the `m:digraph` module.\n\n- A _directed graph_{: #digraph } (or just \"digraph\") is a pair (V, E) of a\n  finite set V of _vertices_{: #vertex } and a finite set E of _directed\n  edges_{: #edge } (or just \"edges\"). The set of edges E is a subset of V × V\n  (the Cartesian product of V with itself).\n- Digraphs can be annotated with more information. Such information can be\n  attached to the vertices and to the edges of the digraph. An annotated digraph\n  is called a _labeled digraph_, and the information attached to a vertex or an\n  edge is called a _label_{: #label }.\n- An edge e = (v, w) is said to _emanate_{: #emanate } from vertex v and to be\n  _incident_{: #incident } on vertex w.\n- If an edge is emanating from v and incident on w, then w is said to be an\n  _out-neighbor_{: #out_neighbour } of v, and v is said to be an _in-neighbor_{:\n  #in_neighbour } of w.\n- A _path_{: #path } P from v\\[1] to v\\[k] in a digraph (V, E) is a non-empty\n  sequence v\\[1], v\\[2], ..., v\\[k] of vertices in V such that there is an edge\n  (v\\[i],v\\[i+1]) in E for 1 <= i < k.\n- The _length_{: #length } of path P is k-1.\n- Path P is a _cycle_{: #cycle } if the length of P is not zero and v\\[1] =\n  v\\[k].\n- A _loop_{: #loop } is a cycle of length one.\n- An _acyclic digraph_{: #acyclic_digraph } is a digraph without cycles.\n- A _depth-first traversal_{: #depth_first_traversal } of a directed digraph can\n  be viewed as a process that visits all vertices of the digraph. Initially, all\n  vertices are marked as unvisited. The traversal starts with an arbitrarily\n  chosen vertex, which is marked as visited, and follows an edge to an unmarked\n  vertex, marking that vertex. The search then proceeds from that vertex in the\n  same fashion, until there is no edge leading to an unvisited vertex. At that\n  point the process backtracks, and the traversal continues as long as there are\n  unexamined edges. If unvisited vertices remain when all edges from the first\n  vertex have been examined, some so far unvisited vertex is chosen, and the\n  process is repeated.\n- A _partial ordering_{: #partial_ordering } of a set S is a transitive,\n  antisymmetric, and reflexive relation between the objects of S.\n- The problem of _topological sorting_{: #topsort } is to find a total ordering\n  of S that is a superset of the partial ordering. A digraph G = (V, E) is\n  equivalent to a relation E on V (we neglect that the version of directed\n  graphs provided by the `digraph` module allows multiple edges between\n  vertices). If the digraph has no cycles of length two or more, the reflexive\n  and transitive closure of E is a partial ordering.\n- A _subgraph_{: #subgraph } G' of G is a digraph whose vertices and edges form\n  subsets of the vertices and edges of G.\n- G' is _maximal_ with respect to a property P if all other subgraphs that\n  include the vertices of G' do not have property P.\n- A _strongly connected component_{: #strong_components } is a maximal subgraph\n  such that there is a path between each pair of vertices.\n- A _connected component_{: #components } is a maximal subgraph such that there\n  is a path between each pair of vertices, considering all edges undirected.\n- An _arborescence_{: #arborescence } is an acyclic digraph with a vertex V, the\n  _root_{: #root }, such that there is a unique path from V to every other\n  vertex of G.\n- A _tree_{: #tree } is an acyclic non-empty digraph such that there is a unique\n  path between every pair of vertices, considering all edges undirected.","ref":"digraph_utils.html"},{"type":"module","title":"See Also - digraph_utils","doc":"`m:digraph`","ref":"digraph_utils.html#module-see-also"},{"type":"function","title":"digraph_utils.arborescence_root/1","doc":"Returns `{yes, Root}` if `Root` is the [root](`m:digraph_utils#root`) of the\narborescence `Digraph`, otherwise `no`.","ref":"digraph_utils.html#arborescence_root/1"},{"type":"function","title":"digraph_utils.components/1","doc":"Returns a list of [connected components](`m:digraph_utils#components`). Each\ncomponent is represented by its vertices. The order of the vertices and the\norder of the components are arbitrary. Each vertex of digraph `Digraph` occurs\nin exactly one component.","ref":"digraph_utils.html#components/1"},{"type":"function","title":"digraph_utils.condensation/1","doc":"Creates a digraph where the vertices are the\n[strongly connected components](`m:digraph_utils#strong_components`) of\n`Digraph` as returned by `strong_components/1`. If X and Y are two different\nstrongly connected components, and vertices x and y exist in X and Y,\nrespectively, such that there is an edge [emanating](`m:digraph_utils#emanate`)\nfrom x and [incident](`m:digraph_utils#incident`) on y, then an edge emanating\nfrom X and incident on Y is created.\n\nThe created digraph has the same type as `Digraph`. All vertices and edges have\nthe default [label](`m:digraph_utils#label`) `[]`.\n\nEach [cycle](`m:digraph_utils#cycle`) is included in some strongly connected\ncomponent, which implies that a\n[topological ordering](`m:digraph_utils#topsort`) of the created digraph always\nexists.","ref":"digraph_utils.html#condensation/1"},{"type":"function","title":"digraph_utils.cyclic_strong_components/1","doc":"Returns a list of\n[strongly connected components](`m:digraph_utils#strong_components`). Each\nstrongly component is represented by its vertices. The order of the vertices and\nthe order of the components are arbitrary. Only vertices that are included in\nsome [cycle](`m:digraph_utils#cycle`) in `Digraph` are returned, otherwise the\nreturned list is equal to that returned by `strong_components/1`.","ref":"digraph_utils.html#cyclic_strong_components/1"},{"type":"function","title":"digraph_utils.is_acyclic/1","doc":"Returns `true` if and only if digraph `Digraph` is\n[acyclic](`m:digraph_utils#acyclic_digraph`).","ref":"digraph_utils.html#is_acyclic/1"},{"type":"function","title":"digraph_utils.is_arborescence/1","doc":"Returns `true` if and only if digraph `Digraph` is an\n[arborescence](`m:digraph_utils#arborescence`).","ref":"digraph_utils.html#is_arborescence/1"},{"type":"function","title":"digraph_utils.is_tree/1","doc":"Returns `true` if and only if digraph `Digraph` is a\n[tree](`m:digraph_utils#tree`).","ref":"digraph_utils.html#is_tree/1"},{"type":"function","title":"digraph_utils.loop_vertices/1","doc":"Returns a list of all vertices of `Digraph` that are included in some\n[loop](`m:digraph_utils#loop`).","ref":"digraph_utils.html#loop_vertices/1"},{"type":"function","title":"digraph_utils.postorder/1","doc":"Returns all vertices of digraph `Digraph`. The order is given by a\n[depth-first traversal](`m:digraph_utils#depth_first_traversal`) of the digraph,\ncollecting visited vertices in postorder. More precisely, the vertices visited\nwhile searching from an arbitrarily chosen vertex are collected in postorder,\nand all those collected vertices are placed before the subsequently visited\nvertices.","ref":"digraph_utils.html#postorder/1"},{"type":"function","title":"digraph_utils.preorder/1","doc":"Returns all vertices of digraph `Digraph`. The order is given by a\n[depth-first traversal](`m:digraph_utils#depth_first_traversal`) of the digraph,\ncollecting visited vertices in preorder.","ref":"digraph_utils.html#preorder/1"},{"type":"function","title":"digraph_utils.reachable/2","doc":"Returns an unsorted list of digraph vertices such that for each vertex in the\nlist, there is a [path](`m:digraph_utils#path`) in `Digraph` from some vertex of\n`Vertices` to the vertex. In particular, as paths can have length zero, the\nvertices of `Vertices` are included in the returned list.","ref":"digraph_utils.html#reachable/2"},{"type":"function","title":"digraph_utils.reachable_neighbours/2","doc":"Returns an unsorted list of digraph vertices such that for each vertex in the\nlist, there is a [path](`m:digraph_utils#path`) in `Digraph` of length one or\nmore from some vertex of `Vertices` to the vertex. As a consequence, only those\nvertices of `Vertices` that are included in some\n[cycle](`m:digraph_utils#cycle`) are returned.","ref":"digraph_utils.html#reachable_neighbours/2"},{"type":"function","title":"digraph_utils.reaching/2","doc":"Returns an unsorted list of digraph vertices such that for each vertex in the\nlist, there is a [path](`m:digraph_utils#path`) from the vertex to some vertex\nof `Vertices`. In particular, as paths can have length zero, the vertices of\n`Vertices` are included in the returned list.","ref":"digraph_utils.html#reaching/2"},{"type":"function","title":"digraph_utils.reaching_neighbours/2","doc":"Returns an unsorted list of digraph vertices such that for each vertex in the\nlist, there is a [path](`m:digraph_utils#path`) of length one or more from the\nvertex to some vertex of `Vertices`. Therefore only those vertices of `Vertices`\nthat are included in some [cycle](`m:digraph_utils#cycle`) are returned.","ref":"digraph_utils.html#reaching_neighbours/2"},{"type":"function","title":"digraph_utils.strong_components/1","doc":"Returns a list of\n[strongly connected components](`m:digraph_utils#strong_components`). Each\nstrongly component is represented by its vertices. The order of the vertices and\nthe order of the components are arbitrary. Each vertex of digraph `Digraph`\noccurs in exactly one strong component.","ref":"digraph_utils.html#strong_components/1"},{"type":"function","title":"digraph_utils.subgraph/2","doc":"","ref":"digraph_utils.html#subgraph/2"},{"type":"function","title":"digraph_utils.subgraph/3","doc":"Creates a maximal [subgraph](`m:digraph_utils#subgraph`) of `Digraph` having as\nvertices those vertices of `Digraph` that are mentioned in `Vertices`.\n\nIf the value of option `type` is `inherit`, which is the default, the type of\n`Digraph` is used for the subgraph as well. Otherwise the option value of `type`\nis used as argument to `digraph:new/1`.\n\nIf the value of option `keep_labels` is `true`, which is the default, the\n[labels](`m:digraph_utils#label`) of vertices and edges of `Digraph` are used\nfor the subgraph as well. If the value is `false`, default label `[]` is used\nfor the vertices and edges of the subgroup.\n\n[`subgraph(Digraph, Vertices)`](`subgraph/2`) is equivalent to\n[`subgraph(Digraph, Vertices, [])`](`subgraph/3`).\n\nIf any of the arguments are invalid, a `badarg` exception is raised.","ref":"digraph_utils.html#subgraph/3"},{"type":"function","title":"digraph_utils.topsort/1","doc":"Returns a [topological ordering](`m:digraph_utils#topsort`) of the vertices of\ndigraph `Digraph` if such an ordering exists, otherwise `false`. For each vertex\nin the returned list, no [out-neighbors](`m:digraph_utils#out_neighbour`) occur\nearlier in the list.","ref":"digraph_utils.html#topsort/1"},{"type":"module","title":"ets","doc":"Built-in term storage.\n\nThis module is an interface to the Erlang built-in term storage BIFs. These\nprovide the ability to store very large quantities of data in an Erlang runtime\nsystem, and to have constant access time to the data. (In the case of\n`ordered_set`, see below, access time is proportional to the logarithm of the\nnumber of stored objects.)\n\nData is organized as a set of dynamic tables, which can store tuples. Each table\nis created by a process. When the process terminates, the table is automatically\ndestroyed. Every table has access rights set at creation.\n\nTables are divided into four different types, `set`, `ordered_set`, `bag`, and\n`duplicate_bag`. A `set` or `ordered_set` table can only have one object\nassociated with each key. A `bag` or `duplicate_bag` table can have many objects\nassociated with each key.\n\nInsert and lookup times in tables of type `set` are constant, regardless of the\ntable size. For table types `bag` and `duplicate_bag` time is proportional to\nthe number of objects with the same key. Even seemingly unrelated keys may\ninflict linear search to be skipped past while looking for the key of interest\n(due to hash collision).\n\n> #### Warning {: .warning }\n>\n> For tables of type `bag` and `duplicate_bag`, avoid inserting an extensive\n> amount of objects with the same key. It will hurt insert and lookup\n> performance as well as real time characteristics of the runtime environment\n> (hash bucket linear search do not yield).\n\nThe `ordered_set` table type uses a binary search tree. Insert and lookup times\nare proportional to the logarithm of the number of objects in the table.\n\n[](){: #max_ets_tables }\n\n> #### Note {: .info }\n>\n> The number of tables stored at one Erlang node _used_ to be limited. This is\n> no longer the case (except by memory usage). The previous default limit was\n> about 1400 tables and could be increased by setting the environment variable\n> `ERL_MAX_ETS_TABLES` or the command line option\n> [`+e`](`e:erts:erl_cmd.md#%2Be`) before starting the Erlang runtime system.\n> This hard limit has been removed, but it is currently useful to set the\n> `ERL_MAX_ETS_TABLES` anyway. It should be set to an approximate of the maximum\n> amount of tables used since an internal table for named tables is sized using\n> this value. If large amounts of named tables are used and `ERL_MAX_ETS_TABLES`\n> hasn't been increased, the performance of named table lookup will degrade.\n\nNotice that there is no automatic garbage collection for tables. Even if there\nare no references to a table from any process, it is not automatically destroyed\nunless the owner process terminates. To destroy a table explicitly, use function\n`delete/1`. The default owner is the process that created the table. To transfer\ntable ownership at process termination, use option [`heir`](`m:ets#heir`) or\ncall `give_away/3`.\n\nSome implementation details:\n\n- In the current implementation, every object insert and look-up operation\n  results in a copy of the object.\n- `'$end_of_table'` is not to be used as a key, as this atom is used to mark the\n  end of the table when using functions `first/1` and `next/2`.\n\nNotice the subtle difference between _matching_ and _comparing equal_, which is\ndemonstrated by table types `set` and `ordered_set`:\n\n- Two Erlang terms `match` if they are of the same type and have the same value,\n  so that `1` matches `1`, but not `1.0` (as `1.0` is a `t:float/0` and not an\n  `t:integer/0`).\n- Two Erlang terms _compare equal_ if they either are of the same type and\n  value, or if both are numeric types and extend to the same value, so that `1`\n  compares equal to both `1` and `1.0`.\n- The `ordered_set` works on the _Erlang term order_ and no defined order exists\n  between an `t:integer/0` and a `t:float/0` that extends to the same value.\n  Hence the key `1` and the key `1.0` are regarded as equal in an `ordered_set`\n  table.\n\n[](){: #ets_failures }","ref":"ets.html"},{"type":"module","title":"Failures - ets","doc":"Functions in this module fail by raising an error exception with error reason:\n\n- **`badarg`** - If any argument has the wrong format.\n\n- **`badarg`** - If the table identifier is invalid.\n\n- **`badarg`** - If the operation is denied because of table access rights\n  ([protected](`m:ets#protected`) or [private](`m:ets#private`)).\n\n- **`system_limit`** - Modification of a value causes it to not be representable\n  internally in the VM. For example, incrementation of a counter past the\n  largest integer representable.\n\n- **`system_limit`** - If a match specification passed as argument has excessive\n  nesting which causes scheduler stack exhaustion for the scheduler that the\n  calling process is executing on.\n  [Scheduler stack size](`e:erts:erl_cmd.md#sched_thread_stack_size`) can be\n  configured when starting the runtime system.\n\n[](){: #concurrency }","ref":"ets.html#module-failures"},{"type":"module","title":"Concurrency - ets","doc":"This module provides some limited support for concurrent access. All updates to\nsingle objects are guaranteed to be both _atomic_ and _isolated_. This means\nthat an updating operation to a single object either succeeds or fails\ncompletely without any effect (atomicity) and that no intermediate results of\nthe update can be seen by other processes (isolation). Some functions that\nupdate many objects state that they even guarantee atomicity and isolation for\nthe entire operation. In database terms the isolation level can be seen as\n\"serializable\", as if all isolated operations are carried out serially, one\nafter the other in a strict order.\n\n[](){: #traversal }","ref":"ets.html#module-concurrency"},{"type":"module","title":"Table traversal - ets","doc":"There are different ways to traverse through the objects of a table.\n\n- _Single-step_ traversal one key at at time, using `first/1`, `next/2`,\n  `last/1` and `prev/2`.\n- _Single-step_ traversal one key at at time, but using `first_lookup/1`,\n  `next_lookup/2`, `last_lookup/1` and `prev_lookup/2`. This is more efficient\n  when you also need to lookup the objects for the keys.\n- Search with simple _match patterns_, using [`match/1/2/3`](`match/1`),\n  `match_delete/2` and [`match_object/1/2/3`](`match_object/1`).\n- Search with more powerful _match specifications_, using\n  [`select/1/2/3`](`select/1`), `select_count/2`, `select_delete/2`,\n  `select_replace/2` and [`select_reverse/1/2/3`](`select_reverse/1`).\n- _Table conversions_, using [`tab2file/2/3`](`tab2file/2`) and `tab2list/1`.\n\nNo table traversal will guarantee a consistent snapshot of the entire table if\nthe table is also updated by concurrent processes during the traversal. The\nresult of each concurrently updated object may be seen (or not) depending on if\nit has happened when the traversal visits that part of the table. The only way\nto guarantee a full consistent table snapshot (if you really need that) is to\ndisallow concurrent updates during the entire traversal.\n\nMoreover, traversals not done in a _safe_ way, on tables where keys are inserted\nor deleted during the traversal, may yield the following undesired effects:\n\n- Any key may be missed.\n- Any key may be found more than once.\n- The traversal may fail with `badarg` exception if keys are deleted.\n\nA table traversal is _safe_ if either\n\n- the table is of type `ordered_set`.\n- the entire table traversal is done within one ETS function call.\n- function `safe_fixtable/2` is used to keep the table fixated during the entire\n  traversal.\n\n> #### Note {: .info }\n>\n> Even though the access of a single object is always guaranteed to be\n> [atomic and isolated](`m:ets#module-concurrency`), each traversal through a table to\n> find the next key is not done with such guarantees. This is often not a\n> problem, but may cause rare subtle \"unexpected\" effects if a concurrent\n> process inserts objects during a traversal. For example, consider one process\n> doing\n>\n> ```erlang\n> ets:new(t, [ordered_set, named_table]),\n> ets:insert(t, {1}),\n> ets:insert(t, {2}),\n> ets:insert(t, {3}),\n> ```\n>\n> A concurrent call to `ets:first(t)`, done by another process, may then in rare\n> cases return `2` even though `2` has never existed in the table ordered as the\n> first key. In the same way, a concurrent call to `ets:next(t, 1)` may return\n> `3` even though `3` never existed in the table ordered directly after `1`.\n>\n> Effects like this are improbable but possible. The probability will further be\n> reduced (if not vanish) if table option\n> [`write_concurrency`](`m:ets#new_2_write_concurrency`) is not enabled. This\n> can also only be a potential concern for `ordered_set` where the traversal\n> order is defined.\n\nTraversals using `match` and `select` functions may not need to scan the entire\ntable depending on how the key is specified. A match pattern with a _fully bound\nkey_ (without any match variables) will optimize the operation to a single key\nlookup without any table traversal at all. For `ordered_set` a _partially bound\nkey_ will limit the traversal to only scan a subset of the table based on term\norder. A partially bound key is either a list or a tuple with a prefix that is\nfully bound. Example:\n\n```erlang\n1> T = ets:new(t,[ordered_set]), ets:insert(T, {\"555-1234\", \"John Smith\"}).\ntrue\n2> %% Efficient search of all with area code 555\n2> ets:match(T,{[$5,$5,$5,$- |'$1'],'$2'}).\n[[\"1234\",\"John Smith\"]]\n```\n\n[](){: #match_spec }","ref":"ets.html#module-table-traversal"},{"type":"module","title":"Match Specifications - ets","doc":"Some of the functions use a _match specification_, `match_spec`. For a brief\nexplanation, see `select/2`. For a detailed description, see section\n[Match Specifications in Erlang](`e:erts:match_spec.md`) in ERTS User's Guide.\n\nA match specifications with excessive nesting will cause a\n[`system_limit`](`m:ets#ets_failures`) error exception to be raised.","ref":"ets.html#module-match-specifications"},{"type":"function","title":"ets.all/0","doc":"Returns a list of all tables at the node. Named tables are specified by their\nnames, unnamed tables are specified by their table identifiers.\n\nThere is no guarantee of consistency in the returned list. Tables created or\ndeleted by other processes \"during\" the `ets:all()` call either are or are not\nincluded in the list. Only tables created/deleted _before_ `ets:all()` is called\nare guaranteed to be included/excluded.","ref":"ets.html#all/0"},{"type":"type","title":"ets.comp_match_spec/0","doc":"","ref":"ets.html#t:comp_match_spec/0"},{"type":"opaque","title":"ets.compiled_match_spec/0","doc":"A compiled match specification.","ref":"ets.html#t:compiled_match_spec/0"},{"type":"type","title":"ets.continuation/0","doc":"Opaque continuation used by [`select/1,3`](`select/1`),\n[`select_reverse/1,3`](`select_reverse/1`), [`match/1,3`](`match/1`), and\n[`match_object/1,3`](`match_object/1`).","ref":"ets.html#t:continuation/0"},{"type":"function","title":"ets.delete/1","doc":"Deletes the entire table `Table`.","ref":"ets.html#delete/1"},{"type":"function","title":"ets.delete/2","doc":"Deletes all objects with key `Key` from table `Table`. This function succeeds\neven if no objects with key `Key` exist.","ref":"ets.html#delete/2"},{"type":"function","title":"ets.delete_all_objects/1","doc":"Delete all objects in the ETS table `Table`. The operation is guaranteed to be\n[atomic and isolated](`m:ets#module-concurrency`).","ref":"ets.html#delete_all_objects/1"},{"type":"function","title":"ets.delete_object/2","doc":"Delete the exact object `Object` from the ETS table, leaving objects with the\nsame key but other differences (useful for type `bag`). In a `duplicate_bag`\ntable, all instances of the object are deleted.","ref":"ets.html#delete_object/2"},{"type":"function","title":"ets.file2tab/1","doc":"Reads a file produced by `tab2file/2` or `tab2file/3` and creates the\ncorresponding table `Table`.\n\nEquivalent to [`file2tab(Filename, [])`](`file2tab/2`).","ref":"ets.html#file2tab/1"},{"type":"function","title":"ets.file2tab/2","doc":"Reads a file produced by `tab2file/2` or `tab2file/3` and creates the\ncorresponding table `Table`.\n\nThe only supported option is `{verify,boolean()}`. If verification is turned on\n(by specifying `{verify,true}`), the function uses whatever information is\npresent in the file to assert that the information is not damaged. How this is\ndone depends on which `extended_info` was written using `tab2file/3`.\n\nIf no `extended_info` is present in the file and `{verify,true}` is specified,\nthe number of objects written is compared to the size of the original table when\nthe dump was started. This can make verification fail if the table was `public`\nand objects were added or removed while the table was dumped to file. To avoid\nthis problem, either do not verify files dumped while updated simultaneously or\nuse option `{extended_info, [object_count]}` to `tab2file/3`, which extends the\ninformation in the file with the number of objects written.\n\nIf verification is turned on and the file was written with option\n`{extended_info, [md5sum]}`, reading the file is slower and consumes radically\nmore CPU time than otherwise.\n\n`{verify,false}` is the default.","ref":"ets.html#file2tab/2"},{"type":"function","title":"ets.first/1","doc":"Returns the first key `Key` in table `Table`. For an `ordered_set` table, the\nfirst key in Erlang term order is returned. For other table types, the first key\naccording to the internal order of the table is returned. If the table is empty,\n`'$end_of_table'` is returned.\n\nTo find subsequent keys in the table, use `next/2`.","ref":"ets.html#first/1"},{"type":"function","title":"ets.first_lookup/1","doc":"Similar to `first/1` except that it returns the object(s) along with the key\nstored in the table. This is equivalent to doing `first/1` followed by a\n`lookup/2`. If the table is empty, `'$end_of_table'` is returned.\n\nTo find subsequent objects in the table, use `next_lookup/2`.","ref":"ets.html#first_lookup/1"},{"type":"function","title":"ets.foldl/3","doc":"`Acc0` is returned if the table is empty. This function is similar to\n`lists:foldl/3`. The table elements are traversed in an unspecified order,\nexcept for `ordered_set` tables, where they are traversed first to last.\n\nIf `Function` inserts objects into the table, or another process inserts objects\ninto the table, those objects _can_ (depending on key ordering) be included in\nthe traversal.","ref":"ets.html#foldl/3"},{"type":"function","title":"ets.foldr/3","doc":"`Acc0` is returned if the table is empty. This function is similar to\n`lists:foldr/3`. The table elements are traversed in an unspecified order,\nexcept for `ordered_set` tables, where they are traversed last to first.\n\nIf `Function` inserts objects into the table, or another process inserts objects\ninto the table, those objects _can_ (depending on key ordering) be included in\nthe traversal.","ref":"ets.html#foldr/3"},{"type":"function","title":"ets.from_dets/2","doc":"Fills an already created ETS table with the objects in the already opened Dets\ntable `DetsTab`. Existing objects in the ETS table are kept unless overwritten.\n\nIf any of the tables does not exist or the Dets table is not open, a `badarg`\nexception is raised.","ref":"ets.html#from_dets/2"},{"type":"function","title":"ets.fun2ms/1","doc":"Pseudo function that by a `parse_transform` translates `LiteralFun` typed as\nparameter in the function call to a [match specification](`m:ets#match_spec`).\nWith \"literal\" is meant that the fun must textually be written as the parameter\nof the function, it cannot be held in a variable that in turn is passed to the\nfunction.\n\nThe parse transform is provided in the `ms_transform` module and the source\n_must_ include file `ms_transform.hrl` in STDLIB for this pseudo function to\nwork. Failing to include the hrl file in the source results in a runtime error,\nnot a compile time error. The include file is easiest included by adding line\n`-include_lib(\"stdlib/include/ms_transform.hrl\").` to the source file.\n\nThe fun is very restricted, it can take only a single parameter (the object to\nmatch): a sole variable or a tuple. It must use the `is_` guard tests. Language\nconstructs that have no representation in a match specification (`if`, `case`,\n`receive`, and so on) are not allowed.\n\nThe return value is the resulting match specification.\n\n_Example:_\n\n```erlang\n1> ets:fun2ms(fun({M,N}) when N > 3 -> M end).\n[{{'$1','$2'},[{'>','$2',3}],['$1']}]\n```\n\nVariables from the environment can be imported, so that the following works:\n\n```erlang\n2> X=3.\n3\n3> ets:fun2ms(fun({M,N}) when N > X -> M end).\n[{{'$1','$2'},[{'>','$2',{const,3}}],['$1']}]\n```\n\nThe imported variables are replaced by match specification `const` expressions,\nwhich is consistent with the static scoping for Erlang funs. However, local or\nglobal function calls cannot be in the guard or body of the fun. Calls to\nbuilt-in match specification functions is of course allowed:\n\n```erlang\n4> ets:fun2ms(fun({M,N}) when N > X, my_fun(M) -> M end).\nError: fun containing local Erlang function calls\n('my_fun' called in guard) cannot be translated into match_spec\n{error,transform_error}\n5> ets:fun2ms(fun({M,N}) when N > X, is_atom(M) -> M end).\n[{{'$1','$2'},[{'>','$2',{const,3}},{is_atom,'$1'}],['$1']}]\n```\n\nAs shown by the example, the function can be called from the shell also. The fun\nmust be literally in the call when used from the shell as well.\n\n> #### Warning {: .warning }\n>\n> If the `parse_transform` is not applied to a module that calls this pseudo\n> function, the call fails in runtime (with a `badarg`). The `ets` module\n> exports a function with this name, but it is never to be called except when\n> using the function in the shell. If the `parse_transform` is properly applied\n> by including header file `ms_transform.hrl`, compiled code never calls the\n> function, but the function call is replaced by a literal match specification.\n\nFor more information, see [`ms_transform`](`m:ms_transform`).","ref":"ets.html#fun2ms/1"},{"type":"function","title":"ets.give_away/3","doc":"Make process `Pid` the new owner of table `Table`. If successful, message\n`{'ETS-TRANSFER',Table,FromPid,GiftData}` is sent to the new owner.\n\nThe process `Pid` must be alive, local, and not already the owner of the table.\nThe calling process must be the table owner.\n\nNotice that this function does not affect option [`heir`](`m:ets#heir`) of the\ntable. A table owner can, for example, set `heir` to itself, give the table\naway, and then get it back if the receiver terminates.","ref":"ets.html#give_away/3"},{"type":"function","title":"ets.i/0","doc":"Displays information about all ETS tables on a terminal.","ref":"ets.html#i/0"},{"type":"function","title":"ets.i/1","doc":"Browses table `Table` on a terminal.","ref":"ets.html#i/1"},{"type":"function","title":"ets.info/1","doc":"Returns information about table `Table` as a list of tuples. If `Table` has the\ncorrect type for a table identifier, but does not refer to an existing ETS\ntable, `undefined` is returned. If `Table` is not of the correct type, a\n`badarg` exception is raised.\n\n- **`{compressed, boolean()}`** - Indicates if the table is compressed.\n\n- **`{decentralized_counters, boolean()}`** - Indicates whether the table uses\n  `decentralized_counters`.\n\n- **`{heir, pid() | none}`** - The pid of the heir of the table, or `none` if no\n  heir is set.\n\n- **`{id,`[ `tid()`](`t:tid/0`)`}`** - The table identifier.\n\n- **`{keypos, integer() >= 1}`** - The key position.\n\n- **`{memory, integer() >= 0}`** - The number of words allocated to the table.\n\n- **`{name, atom()}`** - The table name.\n\n- **`{named_table, boolean()}`** - Indicates if the table is named.\n\n- **`{node, node()}`** - The node where the table is stored. This field is no\n  longer meaningful, as tables cannot be accessed from other nodes.\n\n- **`{owner, pid()}`** - The pid of the owner of the table.\n\n- **`{protection,` [`access()`](`t:table_access/0`)`}`** - The table access\n  rights.\n\n- **`{size, integer() >= 0}`** - The number of objects inserted in the table.\n\n- **`{type,` [`type()`](`t:table_type/0`)`}`** - The table type.\n\n- **`{read_concurrency, boolean()}`** - Indicates whether the table uses\n  `read_concurrency` or not.\n\n- **`{write_concurrency, WriteConcurrencyAlternative}`** - Indicates which\n  `write_concurrency` option the table uses.\n\n> #### Note {: .info }\n>\n> The execution time of this function is affected by the\n> [`decentralized_counters`](`m:ets#new_2_decentralized_counters`) table option.\n> The execution time is much longer when the `decentralized_counters` option is\n> set to `true` than when the `decentralized_counters` option is set to `false`.","ref":"ets.html#info/1"},{"type":"function","title":"ets.info/2","doc":"Returns the information associated with `Item` for table `Table`, or returns\n`undefined` if `Table` does not refer an existing ETS table. If `Table` is not\nof the correct type, or if `Item` is not one of the allowed values, a `badarg`\nexception is raised.\n\nIn addition to the `{Item,Value}` pairs defined for `info/1`, the following\nitems are allowed:\n\n- `Item=binary, Value=BinInfo`\n\n  `BinInfo` is a list containing miscellaneous information about binaries kept\n  by the table. This `Item` can be changed or removed without prior notice. In\n  the current implementation `BinInfo` is a list of tuples\n  `{BinaryId,BinarySize,BinaryRefcCount}`.\n\n- `Item=fixed, Value=boolean()`\n\n  Indicates if the table is fixed by any process.\n\n- [](){: #info_2_safe_fixed_monotonic_time }\n\n  `Item=safe_fixed|safe_fixed_monotonic_time, Value={FixationTime,Info}|false`\n\n  If the table is fixed using `safe_fixtable/2`, the call returns a tuple where\n  `FixationTime` is the last time when the table changed from unfixed to fixed.\n\n  The format and value of `FixationTime` depends on `Item`:\n\n  - **`safe_fixed`** - `FixationTime` corresponds to the result returned by\n    `erlang:timestamp/0` at the time of fixation. Notice that when the system\n    uses single or multi\n    [time warp modes](`e:erts:time_correction.md#time-warp-modes`) this can\n    produce strange results, as the use of `safe_fixed` is not\n    [time warp safe](`e:erts:time_correction.md#time-warp-safe-code`). Time warp\n    safe code must use `safe_fixed_monotonic_time` instead.\n\n  - **`safe_fixed_monotonic_time`** - `FixationTime` corresponds to the result\n    returned by `erlang:monotonic_time/0` at the time of fixation. The use of\n    `safe_fixed_monotonic_time` is\n    [time warp safe](`e:erts:time_correction.md#time-warp-safe-code`).\n\n  `Info` is a possibly empty lists of tuples `{Pid,RefCount}`, one tuple for\n  every process the table is fixed by now. `RefCount` is the value of the\n  reference counter and it keeps track of how many times the table has been\n  fixed by the process.\n\n  Table fixations are not limited to `safe_fixtable/2`. Temporary fixations may\n  also be done by for example [traversing functions](`m:ets#traversal`) like\n  `select` and `match`. Such table fixations are automatically released before\n  the corresponding functions returns, but they may be seen by a concurrent call\n  to `ets:info(T,safe_fixed|safe_fixed_monotonic_time)`.\n\n  If the table is not fixed at all, the call returns `false`.\n\n- `Item=stats, Value=tuple()`\n\n  Returns internal statistics about tables on an internal format used by OTP\n  test suites. Not for production use.\n\n> #### Note {: .info }\n>\n> The execution time of this function is affected by the\n> [`decentralized_counters`](`m:ets#new_2_decentralized_counters`) table option\n> when the second argument of the function is `size` or `memory`. The execution\n> time is much longer when the `decentralized_counters` option is set to `true`\n> than when the `decentralized_counters` option is set to `false`.","ref":"ets.html#info/2"},{"type":"function","title":"ets.init_table/2","doc":"Replaces the existing objects of table `Table` with objects created by calling\nthe input function `InitFun`, see below. This function is provided for\ncompatibility with the `dets` module, it is not more efficient than filling a\ntable by using `insert/2`.\n\nWhen called with argument `read`, the function `InitFun` is assumed to return\n`end_of_input` when there is no more input, or `{Objects, Fun}`, where `Objects`\nis a list of objects and `Fun` is a new input function. Any other value `Value`\nis returned as an error `{error, {init_fun, Value}}`. Each input function is\ncalled exactly once, and if an error occur, the last function is called with\nargument `close`, the reply of which is ignored.\n\nIf the table type is `set` and more than one object exists with a given key, one\nof the objects is chosen. This is not necessarily the last object with the given\nkey in the sequence of objects returned by the input functions. This holds also\nfor duplicated objects stored in tables of type `bag`.","ref":"ets.html#init_table/2"},{"type":"function","title":"ets.insert/2","doc":"Inserts the object or all of the objects in list `ObjectOrObjects` into table\n`Table`.\n\n- If the table type is `set` and the key of the inserted objects _matches_ the\n  key of any object in the table, the old object is replaced.\n- If the table type is `ordered_set` and the key of the inserted object\n  _compares equal_ to the key of any object in the table, the old object is\n  replaced.\n- If the table type is `bag` and the object _matches_ any whole object in the\n  table, the object is not inserted.\n- If the list contains more than one object with _matching_ keys and the table\n  type is `set`, one is inserted, which one is not defined. The same holds for\n  table type `ordered_set` if the keys _compare equal_.\n\nThe entire operation is guaranteed to be\n[atomic and isolated](`m:ets#module-concurrency`), even when a list of objects is\ninserted.\n\n[](){: #insert_list_order }\n\nFor `bag` and `duplicate_bag`, objects in the list with identical keys will be\ninserted in list order (from head to tail). That is, a subsequent call to\n[`lookup(T,Key)`](`lookup/2`) will return them in that inserted order.\n\n> #### Note {: .info }\n>\n> For `bag` the insertion order of indentical keys described above was\n> accidentally reverted in OTP 23.0 and later fixed in OTP 25.3. That is, from\n> OTP 23.0 up until OTP 25.3 the objects in a list are inserted in reverse order\n> (from tail to head).\n>\n> For `duplicate_bag` the same faulty reverse insertion exist from OTP 23.0\n> until OTP 25.3. However, it is unpredictable and may or may not happen. A\n> longer list will increase the probabiliy of the insertion being done in\n> reverse.","ref":"ets.html#insert/2"},{"type":"function","title":"ets.insert_new/2","doc":"Same as `insert/2` except that instead of overwriting objects with the same key\n(for `set` or `ordered_set`) or adding more objects with keys already existing\nin the table (for `bag` and `duplicate_bag`), `false` is returned.\n\nIf `ObjectOrObjects` is a list, the function checks _every_ key before inserting\nanything. Nothing is inserted unless _all_ keys present in the list are absent\nfrom the table. Like [`insert/2`](`insert/2`), the entire operation is\nguaranteed to be [atomic and isolated](`m:ets#module-concurrency`).","ref":"ets.html#insert_new/2"},{"type":"function","title":"ets.is_compiled_ms/1","doc":"Checks if a term represent a valid compiled\n[match specification](`m:ets#match_spec`). A compiled match specification is\nonly valid on the Erlang node where it was compiled by calling\n`match_spec_compile/1`.\n\n> #### Note {: .info }\n>\n> Before STDLIB 3.4 (OTP 20.0) compiled match specifications did not have an\n> external representation. If passed through\n> [`binary_to_term(term_to_binary(CMS))`](`binary_to_term/1`) or sent to another\n> node and back, the result was always an empty binary `<<>>`.\n>\n> After STDLIB 3.4 (OTP 20.0) compiled match specifications have an external\n> representation as a node specific reference to the original compiled match\n> specification. If passed through\n> [`binary_to_term(term_to_binary(CMS))`](`binary_to_term/1`) or sent to another\n> node and back, the result _may or may not_ be a valid compiled match\n> specification depending on if the original compiled match specification was\n> still alive.","ref":"ets.html#is_compiled_ms/1"},{"type":"function","title":"ets.last/1","doc":"Returns the last key `Key` according to Erlang term order in table `Table` of\ntype `ordered_set`. For other table types, the function is synonymous to\n`first/1`. If the table is empty, `'$end_of_table'` is returned.\n\nTo find preceding keys in the table, use `prev/2`.","ref":"ets.html#last/1"},{"type":"function","title":"ets.last_lookup/1","doc":"Similar to `last/1` except that it returns the object(s) along with the key\nstored in the table. This is equivalent to doing `last/1` followed by a\n`lookup/2`. If the table is empty, `'$end_of_table'` is returned.\n\nTo find preceding objects in the table, use `prev_lookup/2`.","ref":"ets.html#last_lookup/1"},{"type":"function","title":"ets.lookup/2","doc":"Returns a list of all objects with key `Key` in table `Table`.\n\n- For tables of type `set`, `bag`, or `duplicate_bag`, an object is returned\n  only if the specified key _matches_ the key of the object in the table.\n- For tables of type `ordered_set`, an object is returned if the specified key\n  _compares equal_ to the key of an object in the table.\n\nThe difference is the same as between `=:=` and `==`.\n\nAs an example, one can insert an object with `t:integer/0` `1` as a key in an\n`ordered_set` and get the object returned as a result of doing a\n[`lookup/2`](`lookup/2`) with `t:float/0` `1.0` as the key to search for.\n\nFor tables of type `set` or `ordered_set`, the function returns either the empty\nlist or a list with one element, as there cannot be more than one object with\nthe same key. For tables of type `bag` or `duplicate_bag`, the function returns\na list of arbitrary length.\n\nNotice that the sequential order of object insertions is preserved; the first\nobject inserted with the specified key is the first in the resulting list, and\nso on. See also the note about\n[list insertion order](`m:ets#insert_list_order`).","ref":"ets.html#lookup/2"},{"type":"function","title":"ets.lookup_element/3","doc":"For a table `Table` of type `set` or `ordered_set`, the function returns the\n`Pos`:th element of the object with key `Key`.\n\nFor tables of type `bag` or `duplicate_bag`, the functions returns a list with\nthe `Pos`:th element of every object with key `Key`.\n\nIf no object with key `Key` exists, the function exits with reason `badarg`.\n\nIf `Pos` is larger than the size of the tuple, the function exits with reason\n`badarg`.\n\nThe difference between `set`, `bag`, and `duplicate_bag` on one hand, and\n`ordered_set` on the other, regarding the fact that `ordered_set` view keys as\nequal when they _compare equal_ whereas the other table types regard them equal\nonly when they _match_, holds for [`lookup_element/3`](`lookup_element/3`).","ref":"ets.html#lookup_element/3"},{"type":"function","title":"ets.lookup_element/4","doc":"For a table `Table` of type `set` or `ordered_set`, the function returns the\n`Pos`:th element of the object with key `Key`.\n\nFor tables of type `bag` or `duplicate_bag`, the functions returns a list with\nthe `Pos`:th element of every object with key `Key`.\n\nIf no object with key `Key` exists, the function returns `Default`.\n\nIf `Pos` is larger than the size of any tuple with a matching key, the function\nexits with reason `badarg`.\n\nThe difference between `set`, `bag`, and `duplicate_bag` on one hand, and\n`ordered_set` on the other, regarding the fact that `ordered_set` view keys as\nequal when they _compare equal_ whereas the other table types regard them equal\nonly when they _match_, holds for [`lookup_element/4`](`lookup_element/4`).","ref":"ets.html#lookup_element/4"},{"type":"function","title":"ets.match/1","doc":"Continues a match started with `match/3`. The next chunk of the size specified\nin the initial [`match/3`](`match/3`) call is returned together with a new\n`Continuation`, which can be used in subsequent calls to this function.\n\nWhen there are no more objects in the table, `'$end_of_table'` is returned.","ref":"ets.html#match/1"},{"type":"function","title":"ets.match/2","doc":"Matches the objects in table `Table` against pattern `Pattern`.\n\nA pattern is a term that can contain:\n\n- Bound parts (Erlang terms)\n- `'_'` that matches any Erlang term\n- Pattern variables `'$N'`, where `N`=0,1,...\n\nThe function returns a list with one element for each matching object, where\neach element is an ordered list of pattern variable bindings, for example:\n\n```erlang\n6> ets:match(T, '$1'). % Matches every object in table\n[[{rufsen,dog,7}],[{brunte,horse,5}],[{ludde,dog,5}]]\n7> ets:match(T, {'_',dog,'$1'}).\n[[7],[5]]\n8> ets:match(T, {'_',cow,'$1'}).\n[]\n```\n\nIf the key is specified in the pattern, the match is very efficient. If the key\nis not specified, that is, if it is a variable or an underscore, the entire\ntable must be searched. The search time can be substantial if the table is very\nlarge.\n\nFor tables of type `ordered_set`, the result is in the same order as in a\n`first`/`next` traversal.","ref":"ets.html#match/2"},{"type":"function","title":"ets.match/3","doc":"Works like `match/2`, but returns only a limited (`Limit`) number of matching\nobjects. Term `Continuation` can then be used in subsequent calls to `match/1`\nto get the next chunk of matching objects. This is a space-efficient way to work\non objects in a table, which is faster than traversing the table object by\nobject using `first/1` and `next/2`.\n\nIf the table is empty, `'$end_of_table'` is returned.\n\nUse `safe_fixtable/2` to guarantee [safe traversal](`m:ets#traversal`) for\nsubsequent calls to `match/1`.","ref":"ets.html#match/3"},{"type":"function","title":"ets.match_delete/2","doc":"Deletes all objects that match pattern `Pattern` from table `Table`. For a\ndescription of patterns, see `match/2`.","ref":"ets.html#match_delete/2"},{"type":"function","title":"ets.match_object/1","doc":"Continues a match started with `match_object/3`. The next chunk of the size\nspecified in the initial [`match_object/3`](`match_object/3`) call is returned\ntogether with a new `Continuation`, which can be used in subsequent calls to\nthis function.\n\nWhen there are no more objects in the table, `'$end_of_table'` is returned.","ref":"ets.html#match_object/1"},{"type":"function","title":"ets.match_object/2","doc":"Matches the objects in table `Table` against pattern `Pattern`. For a\ndescription of patterns, see `match/2`. The function returns a list of all\nobjects that match the pattern.\n\nIf the key is specified in the pattern, the match is very efficient. If the key\nis not specified, that is, if it is a variable or an underscore, the entire\ntable must be searched. The search time can be substantial if the table is very\nlarge.\n\nFor tables of type `ordered_set`, the result is in the same order as in a\n`first`/`next` traversal.","ref":"ets.html#match_object/2"},{"type":"function","title":"ets.match_object/3","doc":"Works like `match_object/2`, but only returns a limited (`Limit`) number of\nmatching objects. Term `Continuation` can then be used in subsequent calls to\n`match_object/1` to get the next chunk of matching objects. This is a\nspace-efficient way to work on objects in a table, which is faster than\ntraversing the table object by object using `first/1` and `next/2`.\n\nIf the table is empty, `'$end_of_table'` is returned.\n\nUse `safe_fixtable/2` to guarantee [safe traversal](`m:ets#traversal`) for\nsubsequent calls to `match_object/1`.","ref":"ets.html#match_object/3"},{"type":"type","title":"ets.match_pattern/0","doc":"","ref":"ets.html#t:match_pattern/0"},{"type":"type","title":"ets.match_spec/0","doc":"A match specification, see [Match Specifications](`m:ets#match_spec`).","ref":"ets.html#t:match_spec/0"},{"type":"function","title":"ets.match_spec_compile/1","doc":"Transforms a [match specification](`m:ets#match_spec`) into an internal\nrepresentation that can be used in subsequent calls to `match_spec_run/2`. The\ninternal representation is opaque. To check the validity of a compiled match\nspecification, use `is_compiled_ms/1`.\n\nIf term `MatchSpec` does not represent a valid match specification, a `badarg`\nexception is raised.\n\n> #### Note {: .info }\n>\n> This function has limited use in normal code. It is used by the `m:dets`\n> module to perform the `dets:select/1` operations.","ref":"ets.html#match_spec_compile/1"},{"type":"function","title":"ets.match_spec_run/2","doc":"Executes the matching specified in a compiled\n[match specification](`m:ets#match_spec`) on a list of terms. Term\n`CompiledMatchSpec` is to be the result of a call to `match_spec_compile/1` and\nis hence the internal representation of the match specification one wants to\nuse.\n\nThe matching is executed on each element in `List` and the function returns a\nlist containing all results. If an element in `List` does not match, nothing is\nreturned for that element. The length of the result list is therefore equal or\nless than the length of parameter `List`.\n\n_Example:_\n\nThe following two calls give the same result (but certainly not the same\nexecution time):\n\n```erlang\nTable = ets:new...\nMatchSpec = ...\n% The following call...\nets:match_spec_run(ets:tab2list(Table),\n                   ets:match_spec_compile(MatchSpec)),\n% ...gives the same result as the more common (and more efficient)\nets:select(Table, MatchSpec),\n```\n\n> #### Note {: .info }\n>\n> This function has limited use in normal code. It is used by the `m:dets`\n> module to perform the `dets:select/1` operations and by Mnesia during\n> transactions.","ref":"ets.html#match_spec_run/2"},{"type":"function","title":"ets.member/2","doc":"Works like `lookup/2`, but does not return the objects. Returns `true` if one or\nmore elements in the table has key `Key`, otherwise `false`.","ref":"ets.html#member/2"},{"type":"function","title":"ets.new/2","doc":"Creates a new table and returns a table identifier that can be used in\nsubsequent operations. The table identifier can be sent to other processes so\nthat a table can be shared between different processes within a node.\n\nParameter `Options` is a list of options that specifies table type, access\nrights, key position, and whether the table is named. Default values are used\nfor omitted options. This means that not specifying any options (`[]`) is the\nsame as specifying\n`[set, protected, {keypos,1}, {heir,none}, {write_concurrency,false}, {read_concurrency,false}, {decentralized_counters,false}]`.\n\n- **`set`** - The table is a `set` table: one key, one object, no order among\n  objects. This is the default table type.\n\n- **`ordered_set`** - The table is a `ordered_set` table: one key, one object,\n  ordered in Erlang term order, which is the order implied by the  \n  operators. Tables of this type have a somewhat different behavior in some\n  situations than tables of other types. Most notably, the `ordered_set` tables\n  regard keys as equal when they _compare equal_, not only when they match. This\n  means that to an `ordered_set` table, `t:integer/0` `1` and `t:float/0` `1.0`\n  are regarded as equal. This also means that the key used to lookup an element\n  does not necessarily _match_ the key in the returned elements, if\n  `t:float/0`'s and `t:integer/0`'s are mixed in keys of a table.\n\n- **`bag`** - The table is a `bag` table, which can have many objects, but only\n  one instance of each object, per key.\n\n- **`duplicate_bag`** - The table is a `duplicate_bag` table, which can have\n  many objects, including multiple copies of the same object, per key.\n\n- **`public`** - Any process can read or write to the table.\n\n  [](){: #protected }\n\n- **`protected`** - The owner process can read and write to the table. Other\n  processes can only read the table. This is the default setting for the access\n  rights.\n\n  [](){: #private }\n\n- **`private`** - Only the owner process can read or write to the table.\n\n- **`named_table`** - If this option is present, the table is registered under\n  its `Name` which can then be used instead of the table identifier in\n  subsequent operations.\n\n  The function will also return the `Name` instead of the table identifier. To\n  get the table identifier of a named table, use `whereis/1`.\n\n- **`{keypos,Pos}`** - Specifies which element in the stored tuples to use as\n  key. By default, it is the first element, that is, `Pos=1`. However, this is\n  not always appropriate. In particular, we do not want the first element to be\n  the key if we want to store Erlang records in a table.\n\n  Notice that any tuple stored in the table must have at least `Pos` number of\n  elements.\n\n  [](){: #heir }\n\n- **`{heir,Pid,HeirData} | {heir,none}`** - Set a process as heir. The heir\n  inherits the table if the owner terminates. Message\n  `{'ETS-TRANSFER',tid(),FromPid,HeirData}` is sent to the heir when that\n  occurs. The heir must be a local process. Default heir is `none`, which\n  destroys the table when the owner terminates.\n\n  [](){: #new_2_write_concurrency }\n\n- **`{write_concurrency,WriteConcurrencyAlternative}`** - Performance tuning.\n  Defaults to `false`, in which case an operation that mutates (writes to) the\n  table obtains exclusive access, blocking any concurrent access of the same\n  table until finished. If set to `true`, the table is optimized for concurrent\n  write access. Different objects of the same table can be mutated (and read) by\n  concurrent processes. This is achieved to some degree at the expense of memory\n  consumption and the performance of sequential access and concurrent reading.\n\n  The `auto` alternative for the `write_concurrency` option is similar to the\n  `true` option but automatically adjusts the synchronization granularity during\n  runtime depending on how the table is used. This is the recommended\n  `write_concurrency` option when using Erlang/OTP 25 and above as it performs\n  well in most scenarios.\n\n  The `write_concurrency` option can be combined with the options\n  [`read_concurrency`](`m:ets#new_2_read_concurrency`) and\n  [`decentralized_counters`](`m:ets#new_2_decentralized_counters`). You\n  typically want to combine `write_concurrency` with `read_concurrency` when\n  large concurrent read bursts and large concurrent write bursts are common; for\n  more information, see option\n  [`read_concurrency`](`m:ets#new_2_read_concurrency`). It is almost always a\n  good idea to combine the `write_concurrency` option with the\n  [`decentralized_counters`](`m:ets#new_2_decentralized_counters`) option.\n\n  Notice that this option does not change any guarantees about\n  [atomicity and isolation](`m:ets#module-concurrency`). Functions that makes such\n  promises over many objects (like `insert/2`) gain less (or nothing) from this\n  option.\n\n  The memory consumption inflicted by both `write_concurrency` and\n  `read_concurrency` is a constant overhead per table for `set`, `bag` and\n  `duplicate_bag` when the `true` alternative for the `write_concurrency` option\n  is not used. For all tables with the `auto` alternative and `ordered_set`\n  tables with `true` alternative the memory overhead depends on the amount of\n  actual detected concurrency during runtime. The memory overhead can be\n  especially large when both `write_concurrency` and `read_concurrency` are\n  combined.\n\n  > #### Note {: .info }\n  >\n  > Prior to stdlib-3.7 (OTP-22.0) `write_concurrency` had no effect on\n  > `ordered_set`.\n\n  > #### Note {: .info }\n  >\n  > The `auto` alternative for the `write_concurrency` option is only available\n  > in OTP-25.0 and above.\n\n  [](){: #new_2_read_concurrency }\n\n- **`{read_concurrency,boolean()}`**(Since OTP R14B)  \n  Performance tuning. Defaults to `false`. When set to `true`, the table is\n  optimized for concurrent read operations. When this option is enabled read\n  operations become much cheaper; especially on systems with multiple physical\n  processors. However, switching between read and write operations becomes more\n  expensive.\n\n  You typically want to enable this option when concurrent read operations are\n  much more frequent than write operations, or when concurrent reads and writes\n  comes in large read and write bursts (that is, many reads not interrupted by\n  writes, and many writes not interrupted by reads).\n\n  You typically do _not_ want to enable this option when the common access\n  pattern is a few read operations interleaved with a few write operations\n  repeatedly. In this case, you would get a performance degradation by enabling\n  this option.\n\n  Option `read_concurrency` can be combined with option\n  [`write_concurrency`](`m:ets#new_2_write_concurrency`). You typically want to\n  combine these when large concurrent read bursts and large concurrent write\n  bursts are common.\n\n  [](){: #new_2_decentralized_counters }\n\n- **`{decentralized_counters,boolean()}`**(Since OTP 23.0)  \n  Performance tuning. Defaults to `true` for all tables with the\n  `write_concurrency` option set to `auto`. For tables of type `ordered_set` the\n  option also defaults to true when the `write_concurrency` option is set to\n  `true`. The option defaults to `false` for all other configurations. This\n  option has no effect if the `write_concurrency` option is set to `false`.\n\n  When this option is set to `true`, the table is optimized for frequent\n  concurrent calls to operations that modify the tables size and/or its memory\n  consumption (e.g., `insert/2` and `delete/2`). The drawback is that calls to\n  `info/1` and `info/2` with `size` or `memory` as the second argument can get\n  much slower when the `decentralized_counters` option is turned on.\n\n  When this option is enabled the counters for the table size and memory\n  consumption are distributed over several cache lines and the scheduling\n  threads are mapped to one of those cache lines. The `erl` option\n  [`+dcg`](`e:erts:erl_cmd.md#%2Bdcg`) can be used to control the number of\n  cache lines that the counters are distributed over.\n\n  [](){: #new_2_compressed }\n\n- **`compressed`**(Since OTP R14B01)  \n  If this option is present, the table data is stored in a more compact format\n  to consume less memory. However, it will make table operations slower.\n  Especially operations that need to inspect entire objects, such as `match` and\n  `select`, get much slower. The key element is not compressed.","ref":"ets.html#new/2"},{"type":"function","title":"ets.next/2","doc":"Returns the next key `Key2`, following key `Key1` in table `Table`. For table\ntype `ordered_set`, the next key in Erlang term order is returned. For other\ntable types, the next key according to the internal order of the table is\nreturned. If no next key exists, `'$end_of_table'` is returned.\n\nTo find the first key in the table, use `first/1`.\n\nUnless a table of type `set`, `bag`, or `duplicate_bag` is fixated using\n`safe_fixtable/2`, a call to [`next/2`](`next/2`) will fail if `Key1` no longer\nexists in the table. For table type `ordered_set`, the function always returns\nthe next key after `Key1` in term order, regardless whether `Key1` ever existed\nin the table.","ref":"ets.html#next/2"},{"type":"function","title":"ets.next_lookup/2","doc":"Similar to `next/2` except that it returns the object(s) along with the key\nstored in the table. This is equivalent to doing `next/2` followed by a\n`lookup/2`. If no next key exists, `'$end_of_table'` is returned.\n\nIt can be interleaved with `next/2` during traversal.","ref":"ets.html#next_lookup/2"},{"type":"function","title":"ets.prev/2","doc":"Returns the previous key `Key2`, preceding key `Key1` according to Erlang term\norder in table `Table` of type `ordered_set`. For other table types, the\nfunction is synonymous to `next/2`. If no previous key exists, `'$end_of_table'`\nis returned.\n\nTo find the last key in an `ordered_set` table, use `last/1`.","ref":"ets.html#prev/2"},{"type":"function","title":"ets.prev_lookup/2","doc":"Similar to `prev/2` except that it returns the object(s) along with the key\nstored in the table. This is equivalent to doing `prev/2` followed by a\n`lookup/2`. If no previous key exists, `'$end_of_table'` is returned.\n\nIt can be interleaved with `prev/2` during traversal.","ref":"ets.html#prev_lookup/2"},{"type":"function","title":"ets.rename/2","doc":"Renames the named table `Table` to the new name `Name`. Afterwards, the old name\ncannot be used to access the table. Renaming an unnamed table has no effect.","ref":"ets.html#rename/2"},{"type":"function","title":"ets.repair_continuation/2","doc":"Restores an opaque continuation returned by `select/3` or `select/1` if the\ncontinuation has passed through external term format (been sent between nodes or\nstored on disk).\n\nThe reason for this function is that continuation terms contain compiled match\nspecifications and may therefore be invalidated if converted to external term\nformat. Given that the original match specification is kept intact, the\ncontinuation can be restored, meaning it can once again be used in subsequent\n[`select/1`](`select/1`) calls even though it has been stored on disk or on\nanother node.\n\n_Examples:_\n\nThe following sequence of calls may fail:\n\n```erlang\nT=ets:new(x,[]),\n...\nMS = ets:fun2ms(fun({N,_}=A) when (N rem 10) =:= 0 -> A end),\n{_,C} = ets:select(T, MS, 10),\nMaybeBroken = binary_to_term(term_to_binary(C)),\nets:select(MaybeBroken).\n```\n\nThe following sequence works, as the call to\n[`repair_continuation/2`](`repair_continuation/2`) reestablishes the\n`MaybeBroken` continuation.\n\n```erlang\nT=ets:new(x,[]),\n...\nMS = ets:fun2ms(fun({N,_}=A) when (N rem 10) =:= 0 -> A end),\n{_,C} = ets:select(T,MS,10),\nMaybeBroken = binary_to_term(term_to_binary(C)),\nets:select(ets:repair_continuation(MaybeBroken,MS)).\n```\n\n> #### Note {: .info }\n>\n> This function is rarely needed in application code. It is used by Mnesia to\n> provide distributed [`select/3`](`select/3`) and [`select/1`](`select/1`)\n> sequences. A normal application would either use Mnesia or keep the\n> continuation from being converted to external format.\n>\n> The actual behavior of compiled match specifications when recreated from\n> external format has changed and may change in future releases, but this\n> interface remains for backward compatibility. See `is_compiled_ms/1`.","ref":"ets.html#repair_continuation/2"},{"type":"function","title":"ets.safe_fixtable/2","doc":"Fixes a table of type `set`, `bag`, or `duplicate_bag` for\n[safe traversal](`m:ets#traversal`) using `first/1` & `next/2`, `match/3` &\n`match/1`, `match_object/3` & `match_object/1`, or `select/3` & `select/1`.\n\nA process fixes a table by calling\n[`safe_fixtable(Table, true)`](`safe_fixtable/2`). The table remains fixed until\nthe process releases it by calling\n[`safe_fixtable(Table, false)`](`safe_fixtable/2`), or until the process\nterminates.\n\nIf many processes fix a table, the table remains fixed until all processes have\nreleased it (or terminated). A reference counter is kept on a per process basis,\nand N consecutive fixes requires N releases to release the table.\n\nWhen a table is fixed, a sequence of `first/1` and `next/2` calls are guaranteed\nto succeed even if keys are removed during the traversal. The keys for objects\ninserted or deleted during a traversal may or may not be returned by\n[`next/2`](`next/2`) depending on the ordering of keys within the table and if\nthe key exists at the time [`next/2`](`next/2`) is called.\n\n_Example:_\n\n```erlang\nclean_all_with_value(Table,X) ->\n    safe_fixtable(Table,true),\n    clean_all_with_value(Table,X,ets:first(Table)),\n    safe_fixtable(Table,false).\n\nclean_all_with_value(Table,X,'$end_of_table') ->\n    true;\nclean_all_with_value(Table,X,Key) ->\n    case ets:lookup(Table,Key) of\n        [{Key,X}] ->\n            ets:delete(Table,Key);\n        _ ->\n            true\n    end,\n    clean_all_with_value(Table,X,ets:next(Table,Key)).\n```\n\nNotice that deleted objects are not freed from a fixed table until it has been\nreleased. If a process fixes a table but never releases it, the memory used by\nthe deleted objects is never freed. The performance of operations on the table\nalso degrades significantly.\n\nTo retrieve information about which processes have fixed which tables, use\n[`info(Table, safe_fixed_monotonic_time)`](`m:ets#info_2_safe_fixed_monotonic_time`).\nA system with many processes fixing tables can need a monitor that sends alarms\nwhen tables have been fixed for too long.\n\nNotice that [`safe_fixtable/2`](`safe_fixtable/2`) is not necessary for table\ntype `ordered_set` and for traversals done by a single ETS function call, like\n`select/2`.","ref":"ets.html#safe_fixtable/2"},{"type":"function","title":"ets.select/1","doc":"Continues a match started with `select/3`. The next chunk of the size specified\nin the initial [`select/3`](`select/3`) call is returned together with a new\n`Continuation`, which can be used in subsequent calls to this function.\n\nWhen there are no more objects in the table, `'$end_of_table'` is returned.","ref":"ets.html#select/1"},{"type":"function","title":"ets.select/2","doc":"Matches the objects in table `Table` using a\n[match specification](`m:ets#match_spec`). This is a more general call than\n`match/2` and `match_object/2` calls. In its simplest form, the match\nspecification is as follows:\n\n```text\nMatchSpec = [MatchFunction]\nMatchFunction = {MatchHead, [Guard], [Result]}\nMatchHead = \"Pattern as in ets:match\"\nGuard = {\"Guardtest name\", ...}\nResult = \"Term construct\"\n```\n\nThis means that the match specification is always a list of one or more tuples\n(of arity 3). The first element of the tuple is to be a pattern as described in\n`match/2`. The second element of the tuple is to be a list of 0 or more guard\ntests (described below). The third element of the tuple is to be a list\ncontaining a description of the value to return. In almost all normal cases, the\nlist contains exactly one term that fully describes the value to return for each\nobject.\n\nThe return value is constructed using the \"match variables\" bound in `MatchHead`\nor using the special match variables `'$_'` (the whole matching object) and\n`'$$'` (all match variables in a list), so that the following\n[`match/2`](`match/2`) expression:\n\n```text\nets:match(Table,{'$1','$2','$3'})\n```\n\nis exactly equivalent to:\n\n```text\nets:select(Table,[{{'$1','$2','$3'},[],['$$']}])\n```\n\nAnd that the following [`match_object/2`](`match_object/2`) call:\n\n```text\nets:match_object(Table,{'$1','$2','$1'})\n```\n\nis exactly equivalent to\n\n```text\nets:select(Table,[{{'$1','$2','$1'},[],['$_']}])\n```\n\nComposite terms can be constructed in the `Result` part either by simply writing\na list, so that the following code:\n\n```text\nets:select(Table,[{{'$1','$2','$3'},[],['$$']}])\n```\n\ngives the same output as:\n\n```text\nets:select(Table,[{{'$1','$2','$3'},[],[['$1','$2','$3']]}])\n```\n\nThat is, all the bound variables in the match head as a list. If tuples are to\nbe constructed, one has to write a tuple of arity 1 where the single element in\nthe tuple is the tuple one wants to construct (as an ordinary tuple can be\nmistaken for a `Guard`).\n\nTherefore the following call:\n\n```text\nets:select(Table,[{{'$1','$2','$1'},[],['$_']}])\n```\n\ngives the same output as:\n\n```erlang\nets:select(Table,[{{'$1','$2','$1'},[],[{{'$1','$2','$3'}}]}])\n```\n\nThis syntax is equivalent to the syntax used in the trace patterns (see the\n`m:dbg`) module in Runtime_Tools.\n\nThe `Guard`s are constructed as tuples, where the first element is the test name\nand the remaining elements are the test parameters. To check for a specific type\n(say a list) of the element bound to the match variable `'$1'`, one would write\nthe test as `{is_list, '$1'}`. If the test fails, the object in the table does\nnot match and the next `MatchFunction` (if any) is tried. Most guard tests\npresent in Erlang can be used, but only the new versions prefixed `is_` are\nallowed (`is_float`, `is_atom`, and so on).\n\nThe `Guard` section can also contain logic and arithmetic operations, which are\nwritten with the same syntax as the guard tests (prefix notation), so that the\nfollowing guard test written in Erlang:\n\n```text\nis_integer(X), is_integer(Y), X + Y < 4711\n```\n\nis expressed as follows (`X` replaced with `'$1'` and `Y` with `'$2'`):\n\n```text\n[{is_integer, '$1'}, {is_integer, '$2'}, {'<', {'+', '$1', '$2'}, 4711}]\n```\n\nFor tables of type `ordered_set`, objects are visited in the same order as in a\n`first`/`next` traversal. This means that the match specification is executed\nagainst objects with keys in the `first`/`next` order and the corresponding\nresult list is in the order of that execution.","ref":"ets.html#select/2"},{"type":"function","title":"ets.select/3","doc":"Works like `select/2`, but only returns a limited (`Limit`) number of matching\nobjects. Term `Continuation` can then be used in subsequent calls to `select/1`\nto get the next chunk of matching objects. This is a space-efficient way to work\non objects in a table, which is still faster than traversing the table object by\nobject using `first/1` and `next/2`.\n\nIf the table is empty, `'$end_of_table'` is returned.\n\nUse `safe_fixtable/2` to guarantee [safe traversal](`m:ets#traversal`) for\nsubsequent calls to `select/1`.","ref":"ets.html#select/3"},{"type":"function","title":"ets.select_count/2","doc":"Matches the objects in table `Table` using a\n[match specification](`m:ets#match_spec`). If and only if the match specification\nreturns `true` for an object, that object is considered a match and is counted.\nFor any other result from the match specification the object is not considered a\nmatch and is therefore not counted.\n\nThe function returns the number of objects matched.","ref":"ets.html#select_count/2"},{"type":"function","title":"ets.select_delete/2","doc":"Matches the objects in table `Table` using a\n[match specification](`m:ets#match_spec`). If and only if the match\nspecification returns `true` for an object, that object is removed from the\ntable. For any other result from the match specification the object is\nretained. This is a more general function than `match_delete/2`.\n\nThe function returns the number of objects deleted from the table.\n\n> #### Note {: .info }\n>\n> The match specification has to return the atom `true` if the object is to be\n> deleted. No other return value gets the object deleted. So one cannot use the\n> same match specification for looking up elements as for deleting them.","ref":"ets.html#select_delete/2"},{"type":"function","title":"ets.select_replace/2","doc":"Matches the objects in the table `Table` using a\n[match specification](`m:ets#match_spec`). For each matched object, the existing\nobject is replaced with the match specification result.\n\nThe match-and-replace operation for each individual object is guaranteed to be\n[atomic and isolated](`m:ets#module-concurrency`). The `select_replace` table traversal\nas a whole, like all other select functions, does not give such guarantees.\n\nThe match specification must be guaranteed to _retain the key_ of any matched\nobject. If not, `select_replace` will fail with `badarg` without updating any\nobjects.\n\nFor the moment, due to performance and semantic constraints, tables of type\n`bag` are not yet supported.\n\nThe function returns the total number of replaced objects.\n\n_Example_\n\nFor all 2-tuples with a list in second position, add atom `'marker'` first in\nthe list:\n\n```erlang\n1> T = ets:new(x,[]), ets:insert(T, {key, [1, 2, 3]}).\ntrue\n2> MS = ets:fun2ms(fun({K, L}) when is_list(L) -> {K, [marker | L]} end).\n[{{'$1','$2'},[{is_list,'$2'}],[{{'$1',[marker|'$2']}}]}]\n3> ets:select_replace(T, MS).\n1\n4> ets:tab2list(T).\n[{key,[marker,1,2,3]}]\n```\n\nA generic single object compare-and-swap operation:\n\n```erlang\n[Old] = ets:lookup(T, Key),\nNew = update_object(Old),\nSuccess = (1 =:= ets:select_replace(T, [{Old, [], [{const, New}]}])),\n```","ref":"ets.html#select_replace/2"},{"type":"function","title":"ets.select_reverse/1","doc":"Continues a match started with `select_reverse/3`. For tables of type\n`ordered_set`, the traversal of the table continues to objects with keys earlier\nin the Erlang term order. The returned list also contains objects with keys in\nreverse order. For all other table types, the behavior is exactly that of\n`select/1`.\n\n_Example:_\n\n```erlang\n1> T = ets:new(x,[ordered_set]).\n2> [ ets:insert(T,{N}) || N <- lists:seq(1,10) ].\n...\n3> {R0,C0} = ets:select_reverse(T,[{'_',[],['$_']}],4).\n...\n4> R0.\n[{10},{9},{8},{7}]\n5> {R1,C1} = ets:select_reverse(C0).\n...\n6> R1.\n[{6},{5},{4},{3}]\n7> {R2,C2} = ets:select_reverse(C1).\n...\n8> R2.\n[{2},{1}]\n9> '$end_of_table' = ets:select_reverse(C2).\n...\n```","ref":"ets.html#select_reverse/1"},{"type":"function","title":"ets.select_reverse/2","doc":"Works like `select/2`, but returns the list in reverse order for table type\n`ordered_set`. For all other table types, the return value is identical to that\nof [`select/2`](`select/2`).","ref":"ets.html#select_reverse/2"},{"type":"function","title":"ets.select_reverse/3","doc":"Works like `select/3`, but for table type `ordered_set` traversing is done\nstarting at the last object in Erlang term order and moves to the first. For all\nother table types, the return value is identical to that of\n[`select/3`](`select/3`).\n\nNotice that this is _not_ equivalent to reversing the result list of a\n[`select/3`](`select/3`) call, as the result list is not only reversed, but also\ncontains the last `Limit` matching objects in the table, not the first.","ref":"ets.html#select_reverse/3"},{"type":"function","title":"ets.setopts/2","doc":"Sets table options. The only allowed option to be set after the table has been\ncreated is [`heir`](`m:ets#heir`). The calling process must be the table owner.","ref":"ets.html#setopts/2"},{"type":"function","title":"ets.slot/2","doc":"This function is mostly for debugging purposes, normally `first`/`next` or\n`last`/`prev` are to be used instead.\n\nReturns all objects in slot `I` of table `Table`. A table can be traversed by\nrepeatedly calling the function, starting with the first slot `I=0` and ending\nwhen `'$end_of_table'` is returned. If argument `I` is out of range, the\nfunction fails with reason `badarg`.\n\nUnless a table of type `set`, `bag`, or `duplicate_bag` is protected using\n`safe_fixtable/2`, a traversal can fail if concurrent updates are made to the\ntable. For table type `ordered_set`, the function returns a list containing\nobject `I` in Erlang term order.","ref":"ets.html#slot/2"},{"type":"function","title":"ets.tab2file/2","doc":"Dumps table `Table` to file `Filename`.\n\nEquivalent to [`tab2file(Table, Filename,[])`](`tab2file/3`)","ref":"ets.html#tab2file/2"},{"type":"function","title":"ets.tab2file/3","doc":"Dumps table `Table` to file `Filename`.\n\nWhen dumping the table, some information about the table is dumped to a header\nat the beginning of the dump. This information contains data about the table\ntype, name, protection, size, version, and if it is a named table. It also\ncontains notes about what extended information is added to the file, which can\nbe a count of the objects in the file or a MD5 sum of the header and records in\nthe file.\n\nThe size field in the header might not correspond to the number of records in\nthe file if the table is public and records are added or removed from the table\nduring dumping. Public tables updated during dump, and that one wants to verify\nwhen reading, needs at least one field of extended information for the read\nverification process to be reliable later.\n\nOption `extended_info` specifies what extra information is written to the table\ndump:\n\n- **`object_count`** - The number of objects written to the file is noted in the\n  file footer, so file truncation can be verified even if the file was updated\n  during dump.\n\n- **`md5sum`** - The header and objects in the file are checksummed using the\n  built-in MD5 functions. The MD5 sum of all objects is written in the file\n  footer, so that verification while reading detects the slightest bitflip in\n  the file data. Using this costs a fair amount of CPU time.\n\nWhenever option `extended_info` is used, it results in a file not readable by\nversions of ETS before that in STDLIB 1.15.1\n\nIf option `sync` is set to `true`, it ensures that the content of the file is\nwritten to the disk before `tab2file` returns. Defaults to `{sync, false}`.","ref":"ets.html#tab2file/3"},{"type":"function","title":"ets.tab2list/1","doc":"Returns a list of all objects in table `Table`.","ref":"ets.html#tab2list/1"},{"type":"type","title":"ets.tab/0","doc":"","ref":"ets.html#t:tab/0"},{"type":"function","title":"ets.tabfile_info/1","doc":"Returns information about the table dumped to file by `tab2file/2` or\n`tab2file/3`.\n\nThe following items are returned:\n\n- **`name`** - The name of the dumped table. If the table was a named table, a\n  table with the same name cannot exist when the table is loaded from file with\n  `file2tab/2`. If the table is not saved as a named table, this field has no\n  significance when loading the table from file.\n\n- **`type`** - The ETS type of the dumped table (that is, `set`, `bag`,\n  `duplicate_bag`, or `ordered_set`). This type is used when loading the table\n  again.\n\n- **`protection`** - The protection of the dumped table (that is, `private`,\n  `protected`, or `public`). A table loaded from the file gets the same\n  protection.\n\n- **`named_table`** - `true` if the table was a named table when dumped to file,\n  otherwise `false`. Notice that when a named table is loaded from a file, there\n  cannot exist a table in the system with the same name.\n\n- **`keypos`** - The `keypos` of the table dumped to file, which is used when\n  loading the table again.\n\n- **`size`** - The number of objects in the table when the table dump to file\n  started. For a `public` table, this number does not need to correspond to the\n  number of objects saved to the file, as objects can have been added or deleted\n  by another process during table dump.\n\n- **`extended_info`** - The extended information written in the file footer to\n  allow stronger verification during table loading from file, as specified to\n  `tab2file/3`. Notice that this function only tells _which_ information is\n  present, not the values in the file footer. The value is a list containing one\n  or more of the atoms `object_count` and `md5sum`.\n\n- **`version`** - A tuple `{Major,Minor}` containing the major and minor version\n  of the file format for ETS table dumps. This version field was added beginning\n  with STDLIB 1.5.1. Files dumped with older versions return `{0,0}` in this\n  field.\n\nAn error is returned if the file is inaccessible, badly damaged, or not produced\nwith `tab2file/2` or `tab2file/3`.","ref":"ets.html#tabfile_info/1"},{"type":"type","title":"ets.table/0","doc":"","ref":"ets.html#t:table/0"},{"type":"function","title":"ets.table/1","doc":"","ref":"ets.html#table/1"},{"type":"function","title":"ets.table/2","doc":"Returns a Query List Comprehension (QLC) query handle. The `m:qlc` module\nprovides a query language aimed mainly at Mnesia, but ETS tables, Dets tables,\nand lists are also recognized by QLC as sources of data. Calling `table/1,2` is\nthe means to make the ETS table `Table` usable to QLC.\n\nWhen there are only simple restrictions on the key position, QLC uses `lookup/2`\nto look up the keys. When that is not possible, the whole table is traversed.\nOption `traverse` determines how this is done:\n\n- **`first_next`** - The table is traversed one key at a time by calling\n  `first/1` and `next/2`.\n\n- **`last_prev`** - The table is traversed one key at a time by calling `last/1`\n  and `prev/2`.\n\n- **`select`** - The table is traversed by calling `select/3` and `select/1`.\n  Option `n_objects` determines the number of objects returned (the third\n  argument of [`select/3`](`select/3`)); the default is to return `100` objects\n  at a time. The [match specification](`m:ets#match_spec`) (the second argument\n  of [`select/3`](`select/3`)) is assembled by QLC: simple filters are\n  translated into equivalent match specifications while more complicated filters\n  must be applied to all objects returned by [`select/3`](`select/3`) given a\n  match specification that matches all objects.\n\n- **`{select, MatchSpec}`** - As for `select`, the table is traversed by calling\n  `select/3` and `select/1`. The difference is that the match specification is\n  explicitly specified. This is how to state match specifications that cannot\n  easily be expressed within the syntax provided by QLC.\n\n_Examples:_\n\nAn explicit match specification is here used to traverse the table:\n\n```erlang\n9> true = ets:insert(Table = ets:new(t, []), [{1,a},{2,b},{3,c},{4,d}]),\nMS = ets:fun2ms(fun({X,Y}) when (X > 1) or (X < 5) -> {Y} end),\nQH1 = ets:table(Table, [{traverse, {select, MS}}]).\n```\n\nAn example with an implicit match specification:\n\n```erlang\n10> QH2 = qlc:q([{Y} || {X,Y} <- ets:table(Table), (X > 1) or (X < 5)]).\n```\n\nThe latter example is equivalent to the former, which can be verified using\nfunction `qlc:info/1`:\n\n```erlang\n11> qlc:info(QH1) =:= qlc:info(QH2).\ntrue\n```\n\n`qlc:info/1` returns information about a query handle, and in this case\nidentical information is returned for the two query handles.","ref":"ets.html#table/2"},{"type":"type","title":"ets.table_access/0","doc":"","ref":"ets.html#t:table_access/0"},{"type":"type","title":"ets.table_type/0","doc":"","ref":"ets.html#t:table_type/0"},{"type":"function","title":"ets.take/2","doc":"Returns and removes a list of all objects with key `Key` in table `Table`.\n\nThe specified `Key` is used to identify the object by either _comparing equal_\nthe key of an object in an `ordered_set` table, or _matching_ in other types of\ntables (for details on the difference, see `lookup/2` and `new/2`).","ref":"ets.html#take/2"},{"type":"function","title":"ets.test_ms/2","doc":"This function is a utility to test a [match specification](`m:ets#match_spec`)\nused in calls to `select/2`. The function both tests `MatchSpec` for \"syntactic\"\ncorrectness and runs the match specification against object `Tuple`.\n\nIf the match specification is syntactically correct, the function either returns\n`{ok,Result}`, where `Result` is what would have been the result in a real\n[`select/2`](`select/2`) call, or `false` if the match specification does not\nmatch object `Tuple`.\n\nIf the match specification contains errors, tuple `{error, Errors}` is returned,\nwhere `Errors` is a list of natural language descriptions of what was wrong with\nthe match specification.\n\nThis is a useful debugging and test tool, especially when writing complicated\n[`select/2`](`select/2`) calls.\n\nSee also: `erlang:match_spec_test/3`.","ref":"ets.html#test_ms/2"},{"type":"opaque","title":"ets.tid/0","doc":"A table identifier, as returned by `new/2`.","ref":"ets.html#t:tid/0"},{"type":"function","title":"ets.to_dets/2","doc":"Fills an already created/opened Dets table with the objects in the already\nopened ETS table named `Table`. The Dets table is emptied before the objects are\ninserted.","ref":"ets.html#to_dets/2"},{"type":"function","title":"ets.update_counter/3","doc":"","ref":"ets.html#update_counter/3"},{"type":"function","title":"ets.update_counter/4","doc":"This function provides an efficient way to update one or more counters, without\nthe trouble of having to look up an object, update the object by incrementing an\nelement, and insert the resulting object into the table again. The operation is\nguaranteed to be [atomic and isolated](`m:ets#module-concurrency`).\n\nThis function destructively updates the object with key `Key` in table `Table`\nby adding `Incr` to the element at position `Pos`. The new counter value is\nreturned. If no position is specified, the element directly following key\n(` +1`) is updated.\n\nIf a `Threshold` is specified, the counter is reset to value `SetValue` if the\nfollowing conditions occur:\n\n- `Incr` is not negative (`>= 0`) and the result would be greater than (`>`)\n  `Threshold`.\n- `Incr` is negative (`< 0`) and the result would be less than (`<`)\n  `Threshold`.\n\nA list of `UpdateOp` can be supplied to do many update operations within the\nobject. The operations are carried out in the order specified in the list. If\nthe same counter position occurs more than once in the list, the corresponding\ncounter is thus updated many times, each time based on the previous result. The\nreturn value is a list of the new counter values from each update operation in\nthe same order as in the operation list. If an empty list is specified, nothing\nis updated and an empty list is returned. If the function fails, no updates are\ndone.\n\nThe specified `Key` is used to identify the object by either _matching_ the key\nof an object in a `set` table, or _compare equal_ to the key of an object in an\n`ordered_set` table (for details on the difference, see `lookup/2` and `new/2`).\n\nIf a default object `Default` is specified, it is used as the object to be\nupdated if the key is missing from the table. The value in place of the key is\nignored and replaced by the proper key value. The return value is as if the\ndefault object had not been used, that is, a single updated element or a list of\nthem.\n\nThe function fails with reason `badarg` in the following situations:\n\n- The table type is not `set` or `ordered_set`.\n- No object with the correct key exists and no default object was supplied.\n- The object has the wrong arity.\n- The default object arity is smaller than ` `.\n- Any field from the default object that is updated is not an integer.\n- The element to update is not an integer.\n- The element to update is also the key.\n- Any of `Pos`, `Incr`, `Threshold`, or `SetValue` is not an integer.","ref":"ets.html#update_counter/4"},{"type":"function","title":"ets.update_element/3","doc":"","ref":"ets.html#update_element/3"},{"type":"function","title":"ets.update_element/4","doc":"This function provides an efficient way to update one or more elements within an\nobject, without the trouble of having to look up, update, and write back the\nentire object.\n\nThis function destructively updates the object with key `Key` in table `Table`.\nThe element at position `Pos` is given the value `Value`.\n\nA list of `{Pos,Value}` can be supplied to update many elements within the same\nobject. If the same position occurs more than once in the list, the last value\nin the list is written. If the list is empty or the function fails, no updates\nare done. The function is also atomic in the sense that other processes can\nnever see any intermediate results.\n\nReturns `true` if an object with key `Key` is found, otherwise `false`.\n\nThe specified `Key` is used to identify the object by either _matching_ the key\nof an object in a `set` table, or _compare equal_ to the key of an object in an\n`ordered_set` table (for details on the difference, see `lookup/2` and `new/2`).\n\nIf a default object `Default` is specified, it is used as the object to be\nupdated if the key is missing from the table. The value in place of the key is\nignored and replaced by the proper key value.\n\nThe function fails with reason `badarg` in the following situations:\n\n- The table type is not `set` or `ordered_set`.\n- `Pos` < 1.\n- `Pos` > object arity.\n- The default object arity is smaller than ` `.\n- The element to update is also the key.","ref":"ets.html#update_element/4"},{"type":"function","title":"ets.whereis/1","doc":"This function returns the `t:tid/0` of the named table identified by\n`TableName`, or `undefined` if no such table exists. The `t:tid/0` can be used\nin place of the table name in all operations, which is slightly faster since the\nname does not have to be resolved on each call.\n\nIf the table is deleted, the `t:tid/0` will be invalid even if another named\ntable is created with the same name.","ref":"ets.html#whereis/1"},{"type":"module","title":"gb_sets","doc":"Sets represented by general balanced trees.\n\nThis module provides ordered sets using Prof. Arne Andersson's General Balanced\nTrees. Ordered sets can be much more efficient than using ordered lists, for\nlarger sets, but depends on the application.\n\nThe data representing a set as used by this module is to be regarded as opaque\nby other modules. In abstract terms, the representation is a composite type of\nexisting Erlang terms. See note on\n[data types](`e:system:data_types.md#no_user_types`). Any code assuming\nknowledge of the format is running on thin ice.\n\nThis module considers two elements as different if and only if they do not\ncompare equal (`==`).","ref":"gb_sets.html"},{"type":"module","title":"Complexity Note - gb_sets","doc":"The complexity on set operations is bounded by either _O(|S|)_ or _O(|T| _\nlog(|S|))\\*, where S is the largest given set, depending on which is fastest for\nany particular function call. For operating on sets of almost equal size, this\nimplementation is about 3 times slower than using ordered-list sets directly.\nFor sets of very different sizes, however, this solution can be arbitrarily much\nfaster; in practical cases, often 10-100 times. This implementation is\nparticularly suited for accumulating elements a few at a time, building up a\nlarge set (> 100-200 elements), and repeatedly testing for membership in the\ncurrent set.\n\nAs with normal tree structures, lookup (membership testing), insertion, and\ndeletion have logarithmic complexity.","ref":"gb_sets.html#module-complexity-note"},{"type":"module","title":"Compatibility - gb_sets","doc":"See the [Compatibility Section in the `sets` module](`m:sets#module-compatibility`)\nfor information about the compatibility of the different implementations of sets\nin the Standard Library.","ref":"gb_sets.html#module-compatibility"},{"type":"module","title":"See Also - gb_sets","doc":"`m:gb_trees`, `m:ordsets`, `m:sets`","ref":"gb_sets.html#module-see-also"},{"type":"function","title":"gb_sets.add/2","doc":"","ref":"gb_sets.html#add/2"},{"type":"function","title":"gb_sets.add_element/2","doc":"Returns a new set formed from `Set1` with `Element` inserted. If `Element` is\nalready an element in `Set1`, nothing is changed.","ref":"gb_sets.html#add_element/2"},{"type":"function","title":"gb_sets.balance/1","doc":"Rebalances the tree representation of `Set1`.\n\nNotice that this is rarely necessary, but can be motivated when a large number of\nelements have been deleted from the tree without further insertions. Rebalancing\n can then be forced to minimise lookup times, as deletion does not rebalance the\ntree.","ref":"gb_sets.html#balance/1"},{"type":"function","title":"gb_sets.del_element/2","doc":"","ref":"gb_sets.html#del_element/2"},{"type":"function","title":"gb_sets.delete/2","doc":"Returns a new set formed from `Set1` with `Element` removed. Assumes that\n`Element` is present in `Set1`.","ref":"gb_sets.html#delete/2"},{"type":"function","title":"gb_sets.delete_any/2","doc":"Returns a new set formed from `Set1` with `Element` removed. If `Element` is not\nan element in `Set1`, nothing is changed.","ref":"gb_sets.html#delete_any/2"},{"type":"function","title":"gb_sets.difference/2","doc":"","ref":"gb_sets.html#difference/2"},{"type":"function","title":"gb_sets.empty/0","doc":"Returns a new empty set.","ref":"gb_sets.html#empty/0"},{"type":"function","title":"gb_sets.filter/2","doc":"Filters elements in `Set1` using predicate function `Pred`.","ref":"gb_sets.html#filter/2"},{"type":"function","title":"gb_sets.filtermap/2","doc":"Filters and maps elements in `Set1` using function `Fun`.","ref":"gb_sets.html#filtermap/2"},{"type":"function","title":"gb_sets.fold/3","doc":"Folds `Function` over every element in `Set` returning the final value of the\naccumulator.","ref":"gb_sets.html#fold/3"},{"type":"function","title":"gb_sets.from_list/1","doc":"Returns a set of the elements in `List`, where `List` can be unordered and\ncontain duplicates.","ref":"gb_sets.html#from_list/1"},{"type":"function","title":"gb_sets.from_ordset/1","doc":"Turns an ordered-set list `List` into a set. The list must not contain\nduplicates.","ref":"gb_sets.html#from_ordset/1"},{"type":"function","title":"gb_sets.insert/2","doc":"Returns a new set formed from `Set1` with `Element` inserted. Assumes that\n`Element` is not present in `Set1`.","ref":"gb_sets.html#insert/2"},{"type":"function","title":"gb_sets.intersection/1","doc":"Returns the intersection of the non-empty list of sets.","ref":"gb_sets.html#intersection/1"},{"type":"function","title":"gb_sets.intersection/2","doc":"Returns the intersection of `Set1` and `Set2`.","ref":"gb_sets.html#intersection/2"},{"type":"function","title":"gb_sets.is_disjoint/2","doc":"Returns `true` if `Set1` and `Set2` are disjoint (have no elements in common),\notherwise `false`.","ref":"gb_sets.html#is_disjoint/2"},{"type":"function","title":"gb_sets.is_element/2","doc":"","ref":"gb_sets.html#is_element/2"},{"type":"function","title":"gb_sets.is_empty/1","doc":"Returns `true` if `Set` is an empty set, otherwise `false`.","ref":"gb_sets.html#is_empty/1"},{"type":"function","title":"gb_sets.is_equal/2","doc":"Returns `true` if `Set1` and `Set2` are equal, that is when every element of one\nset is also a member of the respective other set, otherwise `false`.","ref":"gb_sets.html#is_equal/2"},{"type":"function","title":"gb_sets.is_member/2","doc":"Returns `true` if `Element` is an member of `Set`, otherwise `false`.","ref":"gb_sets.html#is_member/2"},{"type":"function","title":"gb_sets.is_set/1","doc":"Returns `true` if `Term` appears to be a set, otherwise `false`. This function\nwill return `true` for any term that coincides with the representation of a\n`gb_set`, while not really being a `gb_set`, thus it might return false positive\nresults. See also note on [data types](`e:system:data_types.md#no_user_types`).","ref":"gb_sets.html#is_set/1"},{"type":"function","title":"gb_sets.is_subset/2","doc":"Returns `true` when every element of `Set1` is also a member of `Set2`,\notherwise `false`.","ref":"gb_sets.html#is_subset/2"},{"type":"type","title":"gb_sets.iter/0","doc":"","ref":"gb_sets.html#t:iter/0"},{"type":"opaque","title":"gb_sets.iter/1","doc":"A general balanced set iterator.","ref":"gb_sets.html#t:iter/1"},{"type":"function","title":"gb_sets.iterator/1","doc":"Returns an iterator that can be used for traversing the entries of `Set`; see\n`next/1`.\n\nEquivalent to [`iterator(Set, ordered)`](`iterator/2`).","ref":"gb_sets.html#iterator/1"},{"type":"function","title":"gb_sets.iterator/2","doc":"Returns an iterator that can be used for traversing the entries of `Set` in\neither `ordered` or `reversed` direction; see `next/1`.\n\nThe implementation of this is very efficient; traversing the whole set using\n[`next/1`](`next/1`) is only slightly slower than getting the list of all\n elements using `to_list/1` and traversing that. The main advantage of the\niterator approach is that it does not require the complete list of all elements\nto be built in memory at one time.","ref":"gb_sets.html#iterator/2"},{"type":"function","title":"gb_sets.iterator_from/2","doc":"Returns an iterator that can be used for traversing the entries of `Set`; see\n`next/1`. The difference as compared to the iterator returned by `iterator/1` is\nthat the iterator starts with the first element greater than or equal to\n`Element`.\n\nEquivalent to [`iterator_from(Element, Set, ordered)`](`iterator_from/3`).","ref":"gb_sets.html#iterator_from/2"},{"type":"function","title":"gb_sets.iterator_from/3","doc":"Returns an iterator that can be used for traversing the entries of `Set`; see\n`next/1`. The difference as compared to the iterator returned by `iterator/2` is\nthat the iterator starts with the first element next to or equal to `Element`.","ref":"gb_sets.html#iterator_from/3"},{"type":"function","title":"gb_sets.larger/2","doc":"Returns `{found, Element2}`, where `Element2` is the least element strictly\ngreater than `Element1`.\n\nReturns `none` if no such element exists.","ref":"gb_sets.html#larger/2"},{"type":"function","title":"gb_sets.largest/1","doc":"Returns the largest element in `Set`. Assumes that `Set` is not empty.","ref":"gb_sets.html#largest/1"},{"type":"function","title":"gb_sets.map/2","doc":"Maps elements in `Set1` using mapping function `Fun`.","ref":"gb_sets.html#map/2"},{"type":"function","title":"gb_sets.new/0","doc":"Returns a new empty set.","ref":"gb_sets.html#new/0"},{"type":"function","title":"gb_sets.next/1","doc":"Returns `{Element, Iter2}`, where `Element` is the smallest element referred to\nby iterator `Iter1`, and `Iter2` is the new iterator to be used for traversing\nthe remaining elements, or the atom `none` if no elements remain.","ref":"gb_sets.html#next/1"},{"type":"type","title":"gb_sets.set/0","doc":"","ref":"gb_sets.html#t:set/0"},{"type":"opaque","title":"gb_sets.set/1","doc":"A general balanced set.","ref":"gb_sets.html#t:set/1"},{"type":"function","title":"gb_sets.singleton/1","doc":"Returns a set containing only element `Element`.","ref":"gb_sets.html#singleton/1"},{"type":"function","title":"gb_sets.size/1","doc":"Returns the number of elements in `Set`.","ref":"gb_sets.html#size/1"},{"type":"function","title":"gb_sets.smaller/2","doc":"Returns `{found, Element2}`, where `Element2` is the greatest element strictly\nless than `Element1`.\n\nReturns `none` if no such element exists.","ref":"gb_sets.html#smaller/2"},{"type":"function","title":"gb_sets.smallest/1","doc":"Returns the smallest element in `Set`. Assumes that `Set` is not empty.","ref":"gb_sets.html#smallest/1"},{"type":"function","title":"gb_sets.subtract/2","doc":"Returns only the elements of `Set1` that are not also elements of `Set2`.","ref":"gb_sets.html#subtract/2"},{"type":"function","title":"gb_sets.take_largest/1","doc":"Returns `{Element, Set2}`, where `Element` is the largest element in `Set1`, and\n`Set2` is this set with `Element` deleted. Assumes that `Set1` is not empty.","ref":"gb_sets.html#take_largest/1"},{"type":"function","title":"gb_sets.take_smallest/1","doc":"Returns `{Element, Set2}`, where `Element` is the smallest element in `Set1`,\nand `Set2` is this set with `Element` deleted. Assumes that `Set1` is not empty.","ref":"gb_sets.html#take_smallest/1"},{"type":"function","title":"gb_sets.to_list/1","doc":"Returns the elements of `Set` as a list.","ref":"gb_sets.html#to_list/1"},{"type":"function","title":"gb_sets.union/1","doc":"Returns the merged (union) set of the list of sets.","ref":"gb_sets.html#union/1"},{"type":"function","title":"gb_sets.union/2","doc":"Returns the merged (union) set of `Set1` and `Set2`.","ref":"gb_sets.html#union/2"},{"type":"module","title":"gb_trees","doc":"General balanced trees.\n\nThis module provides Prof. Arne Andersson's General Balanced Trees. These have\nno storage overhead compared to unbalanced binary trees, and their performance\nis better than AVL trees.\n\nThis module considers two keys as different if and only if they do not compare\nequal (`==`).","ref":"gb_trees.html"},{"type":"module","title":"Data Structure - gb_trees","doc":"Trees and iterators are built using opaque data structures that should not be\npattern-matched from outside this module.\n\nThere is no attempt to balance trees after deletions. As deletions do not\nincrease the height of a tree, this should be OK.\n\nThe original balance condition `h(T) <= ceil(c * log(|T|))` has been changed to\nthe similar (but not quite equivalent) condition `2 ^ h(T) <= |T| ^ c`. This\nshould also be OK.","ref":"gb_trees.html#module-data-structure"},{"type":"module","title":"See Also - gb_trees","doc":"`m:dict`, `m:gb_sets`","ref":"gb_trees.html#module-see-also"},{"type":"function","title":"gb_trees.balance/1","doc":"Rebalances `Tree1`.\n\nNotice that this is rarely necessary, but can be motivated\nwhen many nodes have been deleted from the tree without further insertions.\nRebalancing can then be forced to minimize lookup times, as deletion does not\nrebalance the tree.","ref":"gb_trees.html#balance/1"},{"type":"function","title":"gb_trees.delete/2","doc":"Removes the node with key `Key` from `Tree1` and returns the new tree. Assumes\nthat the key is present in the tree, crashes otherwise.","ref":"gb_trees.html#delete/2"},{"type":"function","title":"gb_trees.delete_any/2","doc":"Removes the node with key `Key` from `Tree1` if the key is present in the tree,\notherwise does nothing. Returns the new tree.","ref":"gb_trees.html#delete_any/2"},{"type":"function","title":"gb_trees.empty/0","doc":"Returns a new empty tree.","ref":"gb_trees.html#empty/0"},{"type":"function","title":"gb_trees.enter/3","doc":"Inserts `Key` with value `Value` into `Tree1` if the key is not present in the\ntree, otherwise updates `Key` to value `Value` in `Tree1`. Returns the new tree.","ref":"gb_trees.html#enter/3"},{"type":"function","title":"gb_trees.from_orddict/1","doc":"Turns an ordered list `List` of key-value tuples into a tree. The list must not\ncontain duplicate keys.","ref":"gb_trees.html#from_orddict/1"},{"type":"function","title":"gb_trees.get/2","doc":"Retrieves the value stored with `Key` in `Tree`. Assumes that the key is present\nin the tree, crashes otherwise.","ref":"gb_trees.html#get/2"},{"type":"function","title":"gb_trees.insert/3","doc":"Inserts `Key` with value `Value` into `Tree1` and returns the new tree. Assumes\nthat the key is not present in the tree, crashes otherwise.","ref":"gb_trees.html#insert/3"},{"type":"function","title":"gb_trees.is_defined/2","doc":"Returns `true` if `Key` is present in `Tree`, otherwise `false`.","ref":"gb_trees.html#is_defined/2"},{"type":"function","title":"gb_trees.is_empty/1","doc":"Returns `true` if `Tree` is an empty tree, othwewise `false`.","ref":"gb_trees.html#is_empty/1"},{"type":"type","title":"gb_trees.iter/0","doc":"","ref":"gb_trees.html#t:iter/0"},{"type":"opaque","title":"gb_trees.iter/2","doc":"A general balanced tree iterator.","ref":"gb_trees.html#t:iter/2"},{"type":"function","title":"gb_trees.iterator/1","doc":"Returns an iterator that can be used for traversing the entries of `Tree`; see\n`next/1`.\n\nEquivalent to [`iterator(Tree, ordered)`](`iterator/2`).","ref":"gb_trees.html#iterator/1"},{"type":"function","title":"gb_trees.iterator/2","doc":"Returns an iterator that can be used for traversing the entries of `Tree` in\neither `ordered` or `reversed` direction; see `next/1`.\n\nThe implementation of this is very efficient; traversing the whole tree using\n[`next/1`](`next/1`) is only slightly slower than getting the list of all\nelements using `to_list/1` and traversing that. The main advantage of the\niterator approach is that it does not require the complete list of all elements\nto be built in memory at one time.","ref":"gb_trees.html#iterator/2"},{"type":"function","title":"gb_trees.iterator_from/2","doc":"Returns an iterator that can be used for traversing the entries of `Tree`; see\n`next/1`. The difference as compared to the iterator returned by `iterator/1` is\nthat the iterator starts with the first key greater than or equal to `Key`.\n\nEquivalent to [`iterator_from(Key, Tree, ordered)`](`iterator_from/3`).","ref":"gb_trees.html#iterator_from/2"},{"type":"function","title":"gb_trees.iterator_from/3","doc":"Returns an iterator that can be used for traversing the entries of `Tree` in\neither `ordered` or `reversed` direction; see `next/1`. The difference as\ncompared to the iterator returned by `iterator/2` is that the iterator starts\nwith the first key next to or equal to `Key`.","ref":"gb_trees.html#iterator_from/3"},{"type":"function","title":"gb_trees.keys/1","doc":"Returns the keys in `Tree` as an ordered list.","ref":"gb_trees.html#keys/1"},{"type":"function","title":"gb_trees.larger/2","doc":"Returns `{Key2, Value}`, where `Key2` is the least key strictly greater than\n`Key1`, `Value` is the value associated with this key.\n\nReturns `none` if no such pair exists.","ref":"gb_trees.html#larger/2"},{"type":"function","title":"gb_trees.largest/1","doc":"Returns `{Key, Value}`, where `Key` is the largest key in `Tree`, and `Value` is\nthe value associated with this key. Assumes that the tree is not empty.","ref":"gb_trees.html#largest/1"},{"type":"function","title":"gb_trees.lookup/2","doc":"Looks up `Key` in `Tree`. Returns `{value, Value}`, or `none` if `Key` is not\npresent.","ref":"gb_trees.html#lookup/2"},{"type":"function","title":"gb_trees.map/2","doc":"Maps function F(K, V1) -> V2 to all key-value pairs of tree `Tree1`. Returns a\nnew tree `Tree2` with the same set of keys as `Tree1` and the new set of values\n`V2`.","ref":"gb_trees.html#map/2"},{"type":"function","title":"gb_trees.next/1","doc":"Returns `{Key, Value, Iter2}`, where `Key` is the next key referred to by\niterator `Iter1`, and `Iter2` is the new iterator to be used for traversing the\nremaining nodes, or the atom `none` if no nodes remain.","ref":"gb_trees.html#next/1"},{"type":"function","title":"gb_trees.size/1","doc":"Returns the number of nodes in `Tree`.","ref":"gb_trees.html#size/1"},{"type":"function","title":"gb_trees.smaller/2","doc":"Returns `{Key2, Value}`, where `Key2` is the greatest key strictly less than\n`Key1`, `Value` is the value associated with this key.\n\nReturns `none` if no such pair exists.","ref":"gb_trees.html#smaller/2"},{"type":"function","title":"gb_trees.smallest/1","doc":"Returns `{Key, Value}`, where `Key` is the smallest key in `Tree`, and `Value`\nis the value associated with this key. Assumes that the tree is not empty.","ref":"gb_trees.html#smallest/1"},{"type":"function","title":"gb_trees.take/2","doc":"Returns a value `Value` from node with key `Key` and new `Tree2` without the\nnode with this value. Assumes that the node with key is present in the tree,\ncrashes otherwise.","ref":"gb_trees.html#take/2"},{"type":"function","title":"gb_trees.take_any/2","doc":"Returns a value `Value` from node with key `Key` and new `Tree2` without the\nnode with this value. Returns `error` if the node with the key is not present in\nthe tree.","ref":"gb_trees.html#take_any/2"},{"type":"function","title":"gb_trees.take_largest/1","doc":"Returns `{Key, Value, Tree2}`, where `Key` is the largest key in `Tree1`,\n`Value` is the value associated with this key, and `Tree2` is this tree with the\ncorresponding node deleted. Assumes that the tree is not empty.","ref":"gb_trees.html#take_largest/1"},{"type":"function","title":"gb_trees.take_smallest/1","doc":"Returns `{Key, Value, Tree2}`, where `Key` is the smallest key in `Tree1`,\n`Value` is the value associated with this key, and `Tree2` is this tree with the\ncorresponding node deleted. Assumes that the tree is not empty.","ref":"gb_trees.html#take_smallest/1"},{"type":"function","title":"gb_trees.to_list/1","doc":"Converts a tree into an ordered list of key-value tuples.","ref":"gb_trees.html#to_list/1"},{"type":"type","title":"gb_trees.tree/0","doc":"","ref":"gb_trees.html#t:tree/0"},{"type":"opaque","title":"gb_trees.tree/2","doc":"A general balanced tree.","ref":"gb_trees.html#t:tree/2"},{"type":"function","title":"gb_trees.update/3","doc":"Updates `Key` to value `Value` in `Tree1` and returns the new tree. Assumes that\nthe key is present in the tree.","ref":"gb_trees.html#update/3"},{"type":"function","title":"gb_trees.values/1","doc":"Returns the values in `Tree` as an ordered list, sorted by their corresponding\nkeys. Duplicates are not removed.","ref":"gb_trees.html#values/1"},{"type":"module","title":"json","doc":"A library for encoding and decoding JSON.\n\nThis module implements [EEP68](https://github.com/erlang/eep/blob/master/eeps/eep-0068.md).\n\nBoth encoder and decoder fully conform to\n[RFC 8259](https://tools.ietf.org/html/rfc8259) and\n[ECMA 404](https://ecma-international.org/publications-and-standards/standards/ecma-404/)\nstandards. The decoder is tested using [JSONTestSuite](https://github.com/nst/JSONTestSuite).","ref":"json.html"},{"type":"type","title":"json.array_finish_fun/0","doc":"","ref":"json.html#t:array_finish_fun/0"},{"type":"type","title":"json.array_push_fun/0","doc":"","ref":"json.html#t:array_push_fun/0"},{"type":"type","title":"json.array_start_fun/0","doc":"","ref":"json.html#t:array_start_fun/0"},{"type":"opaque","title":"json.continuation_state/0","doc":"","ref":"json.html#t:continuation_state/0"},{"type":"function","title":"json.decode/1","doc":"Parses a JSON value from `Binary`.\n\nSupports basic data mapping:\n\n| **JSON** | **Erlang**             |\n|----------|------------------------|\n| Number   | `integer() \\| float()` |\n| Boolean  | `true \\| false`        |\n| Null     | `null`                 |\n| String   | `binary()`             |\n| Object   | `#{binary() => _}`     |","ref":"json.html#decode/1"},{"type":"function","title":"Errors - json.decode/1","doc":"* `error(unexpected_end)` if `Binary` contains incomplete JSON value\n* `error({invalid_byte, Byte})` if `Binary` contains unexpected byte or invalid UTF-8 byte\n* `error({unexpected_sequence, Bytes})` if `Binary` contains invalid UTF-8 escape","ref":"json.html#decode/1-errors"},{"type":"function","title":"Example - json.decode/1","doc":"```erlang\n> json:decode(<<\"{\\\"foo\\\": 1}\">>).\n#{<<\"foo\">> => 1}\n```","ref":"json.html#decode/1-example"},{"type":"function","title":"json.decode/3","doc":"Parses a JSON value from `Binary`.\n\nSimilar to `decode/1` except the decoding process\ncan be customized with the callbacks specified in\n`Decoders`. The callbacks will use the `Acc` value\nas the initial accumulator.\n\nAny leftover, unparsed data in `Binary` will be returned.","ref":"json.html#decode/3"},{"type":"function","title":"Default callbacks - json.decode/3","doc":"All callbacks are optional. If not provided, they will fall back to\nimplementations used by the `decode/1` function:\n\n* for `array_start`: `fun(_) -> [] end`\n* for `array_push`: `fun(Elem, Acc) -> [Elem | Acc] end`\n* for `array_finish`: `fun(Acc, OldAcc) -> {lists:reverse(Acc), OldAcc} end`\n* for `object_start`: `fun(_) -> [] end`\n* for `object_push`: `fun(Key, Value, Acc) -> [{Key, Value} | Acc] end`\n* for `object_finish`: `fun(Acc, OldAcc) -> {maps:from_list(Acc), OldAcc} end`\n* for `float`: `fun erlang:binary_to_float/1`\n* for `integer`: `fun erlang:binary_to_integer/1`\n* for `string`: `fun (Value) -> Value end`\n* for `null`: the atom `null`","ref":"json.html#decode/3-default-callbacks"},{"type":"function","title":"Errors - json.decode/3","doc":"* `error({invalid_byte, Byte})` if `Binary` contains unexpected byte or invalid UTF-8 byte\n* `error({unexpected_sequence, Bytes})` if `Binary` contains invalid UTF-8 escape\n* `error(unexpected_end)` if `Binary` contains incomplete JSON value","ref":"json.html#decode/3-errors"},{"type":"function","title":"Example - json.decode/3","doc":"Decoding object keys as atoms:\n\n```erlang\n> Push = fun(Key, Value, Acc) -> [{binary_to_existing_atom(Key), Value} | Acc] end.\n> json:decode(<<\"{\\\"foo\\\": 1}\">>, ok, #{object_push => Push}).\n{#{foo => 1},ok,<<>>}\n```","ref":"json.html#decode/3-example"},{"type":"function","title":"json.decode_continue/2","doc":"Continue parsing a stream of bytes of a JSON value.\n\nSimilar to `decode_start/3`, if the function returns `{continue, State}` and\nthere is no more data, use `end_of_input` instead of a binary.\n\n```erlang\n> {continue, State} = json:decode_start(<<\"{\\\"foo\\\":\">>, ok, #{}).\n> json:decode_continue(<<\"1}\">>, State).\n{#{foo => 1},ok,<<>>}\n```\n```erlang\n> {continue, State} = json:decode_start(<<\"123\">>, ok, #{}).\n> json:decode_continue(end_of_input, State).\n{123,ok,<<>>}\n```","ref":"json.html#decode_continue/2"},{"type":"function","title":"json.decode_start/3","doc":"Begin parsing a stream of bytes of a JSON value.\n\nSimilar to `decode/3` but returns when a complete JSON value can be parsed or\nreturns `{continue, State}` for incomplete data,\nthe `State` can be fed to the `decode_continue/2` function when more data is available.","ref":"json.html#decode_start/3"},{"type":"type","title":"json.decode_value/0","doc":"","ref":"json.html#t:decode_value/0"},{"type":"type","title":"json.decoders/0","doc":"","ref":"json.html#t:decoders/0"},{"type":"function","title":"json.encode/1","doc":"Generates JSON corresponding to `Term`.\n\nSupports basic data mapping:\n\n| **Erlang**             | **JSON** |\n|------------------------|----------|\n| `integer() \\| float()` | Number   |\n| `true \\| false `       | Boolean  |\n| `null`                 | Null     |\n| `binary()`             | String   |\n| `atom()`               | String   |\n| `list()`               | Array    |\n| `#{binary() => _}`     | Object   |\n| `#{atom() => _}`       | Object   |\n| `#{integer() => _}`    | Object   |\n\nThis is equivalent to `encode(Term, fun json:encode_value/2)`.","ref":"json.html#encode/1"},{"type":"function","title":"Examples - json.encode/1","doc":"```erlang\n> iolist_to_binary(json:encode(#{foo => <<\"bar\">>})).\n<<\"{\\\"foo\\\":\\\"bar\\\"}\">>\n```","ref":"json.html#encode/1-examples"},{"type":"function","title":"json.encode/2","doc":"Generates JSON corresponding to `Term`.\n\nCan be customised with the `Encoder` callback.\nThe callback will be recursively called for all the data\nto be encoded and is expected to return the corresponding\nencoded JSON as iodata.\n\nVarious `encode_*` functions in this module can be used\nto help in constructing such callbacks.","ref":"json.html#encode/2"},{"type":"function","title":"Examples - json.encode/2","doc":"An encoder that uses a heuristic to differentiate object-like\nlists of key-value pairs from plain lists:\n\n```erlang\n> encoder([{_, _} | _] = Value, Encode) -> json:encode_key_value_list(Value, Encode);\n> encoder(Other, Encode) -> json:encode_value(Other, Encode).\n> custom_encode(Value) -> json:encode(Value, fun(Value, Encode) -> encoder(Value, Encode) end).\n> iolist_to_binary(custom_encode([{a, []}, {b, 1}])).\n<<\"{\\\"a\\\":[],\\\"b\\\":1}\">>\n```","ref":"json.html#encode/2-examples"},{"type":"function","title":"json.encode_atom/2","doc":"Default encoder for atoms used by `json:encode/1`.\n\nEncodes the atom `null` as JSON `null`,\natoms `true` and `false` as JSON booleans,\nand everything else as JSON strings calling the `Encode`\ncallback with the corresponding binary.","ref":"json.html#encode_atom/2"},{"type":"function","title":"json.encode_binary/1","doc":"Default encoder for binaries as JSON strings used by `json:encode/1`.","ref":"json.html#encode_binary/1"},{"type":"function","title":"Errors - json.encode_binary/1","doc":"* `error(unexpected_end)` if the binary contains incomplete UTF-8 sequences.\n* `error({invalid_byte, Byte})` if the binary contains invalid UTF-8 sequences.","ref":"json.html#encode_binary/1-errors"},{"type":"function","title":"json.encode_binary_escape_all/1","doc":"Encoder for binaries as JSON strings producing pure-ASCII JSON.\n\nFor any non-ASCII unicode character, a corresponding `\\\\uXXXX` sequence is used.","ref":"json.html#encode_binary_escape_all/1"},{"type":"function","title":"Errors - json.encode_binary_escape_all/1","doc":"* `error(unexpected_end)` if the binary contains incomplete UTF-8 sequences.\n* `error({invalid_byte, Byte})` if the binary contains invalid UTF-8 sequences.","ref":"json.html#encode_binary_escape_all/1-errors"},{"type":"function","title":"json.encode_float/1","doc":"Default encoder for floats as JSON numbers used by `json:encode/1`.","ref":"json.html#encode_float/1"},{"type":"function","title":"json.encode_integer/1","doc":"Default encoder for integers as JSON numbers used by `json:encode/1`.","ref":"json.html#encode_integer/1"},{"type":"function","title":"json.encode_key_value_list/2","doc":"Encoder for lists of key-value pairs as JSON objects.\n\nAccepts lists with atom, binary, integer, or float keys.","ref":"json.html#encode_key_value_list/2"},{"type":"function","title":"json.encode_key_value_list_checked/2","doc":"Encoder for lists of key-value pairs as JSON objects.\n\nAccepts lists with atom, binary, integer, or float keys.\nVerifies that no duplicate keys will be produced in the\nresulting JSON object.","ref":"json.html#encode_key_value_list_checked/2"},{"type":"function","title":"Errors - json.encode_key_value_list_checked/2","doc":"Raises `error({duplicate_key, Key})` if there are duplicates.","ref":"json.html#encode_key_value_list_checked/2-errors"},{"type":"function","title":"json.encode_list/2","doc":"Default encoder for lists as JSON arrays used by `json:encode/1`.","ref":"json.html#encode_list/2"},{"type":"type","title":"json.encode_map/1","doc":"","ref":"json.html#t:encode_map/1"},{"type":"function","title":"json.encode_map/2","doc":"Default encoder for maps as JSON objects used by `json:encode/1`.\n\nAccepts maps with atom, binary, integer, or float keys.","ref":"json.html#encode_map/2"},{"type":"function","title":"json.encode_map_checked/2","doc":"Encoder for maps as JSON objects.\n\nAccepts maps with atom, binary, integer, or float keys.\nVerifies that no duplicate keys will be produced in the\nresulting JSON object.","ref":"json.html#encode_map_checked/2"},{"type":"function","title":"Errors - json.encode_map_checked/2","doc":"Raises `error({duplicate_key, Key})` if there are duplicates.","ref":"json.html#encode_map_checked/2-errors"},{"type":"type","title":"json.encode_value/0","doc":"Simple JSON value encodeable with `json:encode/1`.","ref":"json.html#t:encode_value/0"},{"type":"function","title":"json.encode_value/2","doc":"Default encoder used by `json:encode/1`.\n\nRecursively calls `Encode` on all the values in `Value`.","ref":"json.html#encode_value/2"},{"type":"type","title":"json.encoder/0","doc":"","ref":"json.html#t:encoder/0"},{"type":"function","title":"json.format/1","doc":"Generates formatted JSON corresponding to `Term`.\n\nSimiliar to `encode/1` but with added whitespaces for formatting.\n\n```erlang\n> io:put_chars(json:format(#{foo => <<\"bar\">>, baz => 52})).\n{\n  \"baz\": 52,\n  \"foo\": \"bar\"\n}\nok\n```","ref":"json.html#format/1"},{"type":"function","title":"json.format/2","doc":"Generates formatted JSON corresponding to `Term`.\n\nEquivalent to `format(Term, fun json:format_value/3, Options)` or `format(Term, Encoder, #{})`","ref":"json.html#format/2"},{"type":"function","title":"json.format/3","doc":"Generates formatted JSON corresponding to `Term`.\n\nSimilar to `encode/2`, can be customised with the `Encoder` callback and `Options`.\n\n`Options` can include 'indent' to specify number of spaces per level and 'max' which loosely limits\nthe width of lists.\n\nThe `Encoder` will get a 'State' argument which contains the 'Options' maps merged with other data\nwhen recursing through 'Term'.\n\n`format_value/3` or various `encode_*` functions in this module can be used\nto help in constructing such callbacks.\n\n```erlang\n> formatter({posix_time, SysTimeSecs}, Encode, State) ->\n    TimeStr = calendar:system_time_to_rfc3339(SysTimeSecs, [{offset, \"Z\"}]),\n    json:format_value(unicode:characters_to_binary(TimeStr), Encode, State);\n> formatter(Other, Encode, State) -> json:format_value(Other, Encode, State).\n>\n> Fun = fun(Value, Encode, State) -> formatter(Value, Encode, State) end.\n> Options = #{indent => 4}.\n> Term = #{id => 1, time => {posix_time, erlang:system_time(seconds)}}.\n>\n> io:put_chars(json:format(Term, Fun, Options)).\n{\n    \"id\": 1,\n    \"time\": \"2024-05-23T16:07:48Z\"\n}\nok\n```","ref":"json.html#format/3"},{"type":"function","title":"json.format_key_value_list/3","doc":"Format function for lists of key-value pairs as JSON objects.\n\nAccepts lists with atom, binary, integer, or float keys.","ref":"json.html#format_key_value_list/3"},{"type":"function","title":"json.format_key_value_list_checked/3","doc":"Format function for lists of key-value pairs as JSON objects.\n\nAccepts lists with atom, binary, integer, or float keys.\nVerifies that no duplicate keys will be produced in the\nresulting JSON object.","ref":"json.html#format_key_value_list_checked/3"},{"type":"function","title":"Errors - json.format_key_value_list_checked/3","doc":"Raises `error({duplicate_key, Key})` if there are duplicates.","ref":"json.html#format_key_value_list_checked/3-errors"},{"type":"function","title":"json.format_value/3","doc":"Default format function used by `json:format/1`.\n\nRecursively calls `Encode` on all the values in `Value`,\nand indents objects and lists.","ref":"json.html#format_value/3"},{"type":"type","title":"json.formatter/0","doc":"","ref":"json.html#t:formatter/0"},{"type":"type","title":"json.from_binary_fun/0","doc":"","ref":"json.html#t:from_binary_fun/0"},{"type":"type","title":"json.object_finish_fun/0","doc":"","ref":"json.html#t:object_finish_fun/0"},{"type":"type","title":"json.object_push_fun/0","doc":"","ref":"json.html#t:object_push_fun/0"},{"type":"type","title":"json.object_start_fun/0","doc":"","ref":"json.html#t:object_start_fun/0"},{"type":"module","title":"orddict","doc":"Key-value dictionary as ordered list.\n\nThis module provides a `Key`-`Value` dictionary. An `orddict` is a\nrepresentation of a dictionary, where a list of pairs is used to store the keys\nand values. The list is ordered after the keys in the\n[Erlang term order](`e:system:expressions.md#term-comparisons`).\n\nThis module provides the same interface as the `m:dict` module but with a\ndefined representation. One difference is that while `dict` considers two keys\nas different if they do not match (`=:=`), this module considers two keys as\ndifferent if and only if they do not compare equal (`==`).","ref":"orddict.html"},{"type":"module","title":"Notes - orddict","doc":"[](){: #notes }\n\nFunctions [`append/3`](`append/3`) and [`append_list/3`](`append_list/3`) are\nincluded so that keyed values can be stored in a list _accumulator_, for\nexample:\n\n```erlang\n> D0 = orddict:new(),\n  D1 = orddict:store(files, [], D0),\n  D2 = orddict:append(files, f1, D1),\n  D3 = orddict:append(files, f2, D2),\n  D4 = orddict:append(files, f3, D3),\n  orddict:fetch(files, D4).\n[f1,f2,f3]\n```\n\nThis saves the trouble of first fetching a keyed value, appending a new value to\nthe list of stored values, and storing the result.\n\nFunction [`fetch/2`](`fetch/2`) is to be used if the key is known to be in the\ndictionary, otherwise function [`find/2`](`find/2`).","ref":"orddict.html#module-notes"},{"type":"module","title":"See Also - orddict","doc":"`m:dict`, `m:gb_trees`","ref":"orddict.html#module-see-also"},{"type":"function","title":"orddict.append/3","doc":"Appends a new `Value` to the current list of values associated with `Key`. An\nexception is generated if the initial value associated with `Key` is not a list\nof values.\n\nSee also section [Notes](`m:orddict#module-notes`).\n\n_Example 1:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{x, []}]).\n[{x,[]}]\n2> OrdDict2 = orddict:append(x, 1, OrdDict1).\n[{x,[1]}]\n3> OrdDict3 = orddict:append(x, 2, OrdDict2).\n[{x,[1,2]}]\n4> orddict:append(y, 3, OrdDict3).\n[{x,[1,2]},{y,[3]}]\n```\n\n_Example 2:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, no_list}]).\n[{a,no_list}]\n2> orddict:append(a, 1, OrdDict1).\n** exception error: bad argument\n     in operator  ++/2\n        called as no_list ++ [1]\n```","ref":"orddict.html#append/3"},{"type":"function","title":"orddict.append_list/3","doc":"Appends a list of values `ValList` to the current list of values associated with\n`Key`. An exception is generated if the initial value associated with `Key` is\nnot a list of values.\n\nSee also section [Notes](`m:orddict#module-notes`).\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{x, []}]).\n[{x,[]}]\n2> OrdDict2 = orddict:append_list(x, [1,2], OrdDict1).\n[{x,[1,2]}]\n3> OrdDict3 = orddict:append_list(y, [3,4], OrdDict2).\n[{x,[1,2]},{y,[3,4]}]\n```","ref":"orddict.html#append_list/3"},{"type":"function","title":"orddict.erase/2","doc":"Erases all items with a specified key from a dictionary.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:erase(a, OrdDict1).\n[{b,2}]\n```","ref":"orddict.html#erase/2"},{"type":"function","title":"orddict.fetch/2","doc":"Returns the value associated with `Key` in dictionary `Orddict`. This function\nassumes that the `Key` is present in the dictionary. An exception is generated\nif `Key` is not in the dictionary.\n\nSee also section [Notes](`m:orddict#module-notes`).\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:fetch(a, OrdDict1).\n1\n3> orddict:fetch(missing, OrdDict1).\n** exception error: no function clause matching orddict:fetch(missing,[])\n```","ref":"orddict.html#fetch/2"},{"type":"function","title":"orddict.fetch_keys/1","doc":"Returns a list of all keys in a dictionary.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:fetch_keys(OrdDict1).\n[a,b]\n```","ref":"orddict.html#fetch_keys/1"},{"type":"function","title":"orddict.filter/2","doc":"`Orddict2` is a dictionary of all keys and values in `Orddict1` for which\n`Pred(Key, Value)` is `true`.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:filter(fun (K, V) -> V > 1 end, OrdDict1).\n[{b,2}]\n```","ref":"orddict.html#filter/2"},{"type":"function","title":"orddict.find/2","doc":"Searches for a key in a dictionary. Returns `{ok, Value}`, where `Value` is the\nvalue associated with `Key`, or `error` if the key is not present in the\ndictionary.\n\nSee also section [Notes](`m:orddict#module-notes`).\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:find(a, OrdDict1).\n{ok,1}\n3> orddict:find(c, OrdDict1).\nerror\n```","ref":"orddict.html#find/2"},{"type":"function","title":"orddict.fold/3","doc":"Calls `Fun` on successive keys and values of `Orddict` together with an extra\nargument `Acc` (short for accumulator). `Fun` must return a new accumulator that\nis passed to the next call. `Acc0` is returned if the list is empty.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:fold(fun (K, V, Acc) -> [{K, V+100} | Acc] end, [], OrdDict1).\n[{b,102},{a,101}]\n```","ref":"orddict.html#fold/3"},{"type":"function","title":"orddict.from_list/1","doc":"Converts the `Key`-`Value` list `List` to a dictionary.","ref":"orddict.html#from_list/1"},{"type":"function","title":"orddict.is_empty/1","doc":"Returns `true` if `Orddict` has no elements, otherwise `false`.","ref":"orddict.html#is_empty/1"},{"type":"function","title":"orddict.is_key/2","doc":"Tests if `Key` is contained in dictionary `Orddict`.","ref":"orddict.html#is_key/2"},{"type":"function","title":"orddict.map/2","doc":"Calls `Fun` on successive keys and values of `Orddict1` to return a new value\nfor each key.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:map(fun (_K, V) -> V + 100 end, OrdDict1).\n[{a,101},{b,102}]\n```","ref":"orddict.html#map/2"},{"type":"function","title":"orddict.merge/3","doc":"Merges two dictionaries, `Orddict1` and `Orddict2`, to create a new dictionary.\nAll the `Key`-`Value` pairs from both dictionaries are included in the new\ndictionary.\n\nIf a key occurs in both dictionaries, `Fun` is called with the key\nand both values to return a new value.\n\n[`merge/3`](`merge/3`) can be defined as follows, but is faster:\n\n```erlang\nmerge(Fun, D1, D2) ->\n    fold(fun (K, V1, D) ->\n                 update(K, fun (V2) -> Fun(K, V1, V2) end, V1, D)\n         end, D2, D1).\n```\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> OrdDict2 = orddict:from_list([{b, 7}, {c, 8}]).\n[{b,7},{c,8}]\n3> orddict:merge(fun (K, V1, V2) -> V1 * V2 end, OrdDict1, OrdDict2).\n[{a,1},{b,14},{c,8}]\n```","ref":"orddict.html#merge/3"},{"type":"function","title":"orddict.new/0","doc":"Creates a new dictionary.","ref":"orddict.html#new/0"},{"type":"type","title":"orddict.orddict/0","doc":"","ref":"orddict.html#t:orddict/0"},{"type":"type","title":"orddict.orddict/2","doc":"Dictionary as returned by `new/0`.","ref":"orddict.html#t:orddict/2"},{"type":"function","title":"orddict.size/1","doc":"Returns the number of elements in an `Orddict`.","ref":"orddict.html#size/1"},{"type":"function","title":"orddict.store/3","doc":"Stores a `Key`-`Value` pair in a dictionary. If the `Key` already exists in\n`Orddict1`, the associated value is replaced by `Value`.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:store(a, 99, OrdDict1).\n[{a,99},{b,2}]\n3> orddict:store(c, 100, OrdDict1).\n[{a,1},{b,2},{c,100}]\n```","ref":"orddict.html#store/3"},{"type":"function","title":"orddict.take/2","doc":"This function returns value from dictionary and new dictionary without this\nvalue. Returns `error` if the key is not present in the dictionary.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:take(a, OrdDict1).\n{1,[{b,2}]}\n3> orddict:take(missing, OrdDict1).\nerror\n```","ref":"orddict.html#take/2"},{"type":"function","title":"orddict.to_list/1","doc":"Converts a dictionary to a list representation.","ref":"orddict.html#to_list/1"},{"type":"function","title":"orddict.update/3","doc":"Updates a value in a dictionary by calling `Fun` on the value to get a new\nvalue. An exception is generated if `Key` is not present in the dictionary.\n\n_Example:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:update(a, fun (V) -> V + 100 end, OrdDict1).\n[{a,101},{b,2}]\n```","ref":"orddict.html#update/3"},{"type":"function","title":"orddict.update/4","doc":"Updates a value in a dictionary by calling `Fun` on the value to get a new\nvalue. If `Key` is not present in the dictionary, `Initial` is stored as the\nfirst value.\n\nFor example, [`append/3`](`append/3`) can be defined as follows:\n\n```erlang\nappend(Key, Val, D) ->\n    update(Key, fun (Old) -> Old ++ [Val] end, [Val], D).\n```\n\n_Example 1:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:update(c, fun (V) -> V + 100 end, 99, OrdDict1).\n[{a,1},{b,2},{c,99}]\n```\n\n_Example 2:_\n\n```erlang\n1> OrdDict1 = orddict:from_list([{a, 1}, {b, 2}]).\n[{a,1},{b,2}]\n2> orddict:update(a, fun (V) -> V + 100 end, 99, OrdDict1).\n[{a,101},{b,2}]\n```","ref":"orddict.html#update/4"},{"type":"function","title":"orddict.update_counter/3","doc":"Adds `Increment` to the value associated with `Key` and store this value. If\n`Key` is not present in the dictionary, `Increment` is stored as the first\nvalue.\n\nThis can be defined as follows, but is faster:\n\n```erlang\nupdate_counter(Key, Incr, D) ->\n    update(Key, fun (Old) -> Old + Incr end, Incr, D).\n```","ref":"orddict.html#update_counter/3"},{"type":"module","title":"ordsets","doc":"Functions for manipulating sets as ordered lists.\n\nSets are collections of elements with no duplicate elements. An `ordset` is a\nrepresentation of a set, where an ordered list is used to store the elements of\nthe set. An ordered list is more efficient than an unordered list. Elements are\nordered according to the _Erlang term order_.\n\nThis module provides the same interface as the `m:sets` module but with a\ndefined representation. One difference is that while `sets` considers two\nelements as different if they do not match (`=:=`), this module considers two\nelements as different if and only if they do not compare equal (`==`).\n\nSee the [Compatibility Section in the `sets` module](`m:sets#module-compatibility`)\nfor more information about the compatibility of the different implementations of\nsets in the Standard Library.","ref":"ordsets.html"},{"type":"module","title":"See Also - ordsets","doc":"`m:gb_sets`, `m:sets`","ref":"ordsets.html#module-see-also"},{"type":"function","title":"ordsets.add_element/2","doc":"Returns a new ordered set formed from `Ordset1` with `Element` inserted.","ref":"ordsets.html#add_element/2"},{"type":"function","title":"ordsets.del_element/2","doc":"Returns `Ordset1`, but with `Element` removed.","ref":"ordsets.html#del_element/2"},{"type":"function","title":"ordsets.filter/2","doc":"Filters elements in `Ordset1` with boolean function `Pred`.","ref":"ordsets.html#filter/2"},{"type":"function","title":"ordsets.filtermap/2","doc":"Filters and maps elements in `Ordset1` with function `Fun`.","ref":"ordsets.html#filtermap/2"},{"type":"function","title":"ordsets.fold/3","doc":"Folds `Function` over every element in `Ordset` and returns the final value of\nthe accumulator.","ref":"ordsets.html#fold/3"},{"type":"function","title":"ordsets.from_list/1","doc":"Returns an ordered set of the elements in `List`.","ref":"ordsets.html#from_list/1"},{"type":"function","title":"ordsets.intersection/1","doc":"Returns the intersection of the non-empty list of sets.","ref":"ordsets.html#intersection/1"},{"type":"function","title":"ordsets.intersection/2","doc":"Returns the intersection of `Ordset1` and `Ordset2`.","ref":"ordsets.html#intersection/2"},{"type":"function","title":"ordsets.is_disjoint/2","doc":"Returns `true` if `Ordset1` and `Ordset2` are disjoint (have no elements in\ncommon), otherwise `false`.","ref":"ordsets.html#is_disjoint/2"},{"type":"function","title":"ordsets.is_element/2","doc":"Returns `true` if `Element` is an element of `Ordset`, otherwise `false`.","ref":"ordsets.html#is_element/2"},{"type":"function","title":"ordsets.is_empty/1","doc":"Returns `true` if `Ordset` is an empty set, otherwise `false`.","ref":"ordsets.html#is_empty/1"},{"type":"function","title":"ordsets.is_equal/2","doc":"Returns `true` if `Ordset1` and `Ordset2` are equal, that is when every element\nof one set is also a member of the respective other set, otherwise `false`.","ref":"ordsets.html#is_equal/2"},{"type":"function","title":"ordsets.is_set/1","doc":"Returns `true` if `Ordset` is an ordered set of elements, otherwise `false`.\nThis function will return `true` for any ordered list, even when not constructed\nby the functions in this module.","ref":"ordsets.html#is_set/1"},{"type":"function","title":"ordsets.is_subset/2","doc":"Returns `true` when every element of `Ordset1` is also a member of `Ordset2`,\notherwise `false`.","ref":"ordsets.html#is_subset/2"},{"type":"function","title":"ordsets.map/2","doc":"Maps elements in `Ordset1` with mapping function `Fun`.","ref":"ordsets.html#map/2"},{"type":"function","title":"ordsets.new/0","doc":"Returns a new empty ordered set.","ref":"ordsets.html#new/0"},{"type":"type","title":"ordsets.ordset/1","doc":"As returned by `new/0`.","ref":"ordsets.html#t:ordset/1"},{"type":"function","title":"ordsets.size/1","doc":"Returns the number of elements in `Ordset`.","ref":"ordsets.html#size/1"},{"type":"function","title":"ordsets.subtract/2","doc":"Returns only the elements of `Ordset1` that are not also elements of `Ordset2`.","ref":"ordsets.html#subtract/2"},{"type":"function","title":"ordsets.to_list/1","doc":"Returns the elements of `Ordset` as a list.","ref":"ordsets.html#to_list/1"},{"type":"function","title":"ordsets.union/1","doc":"Returns the merged (union) set of the list of sets.","ref":"ordsets.html#union/1"},{"type":"function","title":"ordsets.union/2","doc":"Returns the merged (union) set of `Ordset1` and `Ordset2`.","ref":"ordsets.html#union/2"},{"type":"module","title":"proplists","doc":"Support functions for property lists.\n\nProperty lists are ordinary lists containing entries in the form of either\ntuples, whose first elements are keys used for lookup and insertion, or atoms,\nwhich work as shorthand for tuples `{Atom, true}`. (Other terms are allowed in\nthe lists, but are ignored by this module.) If there is more than one entry in a\nlist for a certain key, the first occurrence normally overrides any later\n(irrespective of the arity of the tuples).\n\nProperty lists are useful for representing inherited properties, such as options\npassed to a function where a user can specify options overriding the default\nsettings, object properties, annotations, and so on.\n\nTwo keys are considered equal if they match (`=:=`). That is, numbers are\ncompared literally rather than by value, so that, for example, `1` and `1.0` are\ndifferent keys.","ref":"proplists.html"},{"type":"function","title":"proplists.append_values/2","doc":"Similar to `get_all_values/2`, but each value is wrapped in a list unless it is\nalready itself a list. The resulting list of lists is concatenated. This is\noften useful for \"incremental\" options.\n\n_Example:_\n\n```erlang\nappend_values(a, [{a, [1,2]}, {b, 0}, {a, 3}, {c, -1}, {a, [4]}])\n```\n\nreturns:\n\n```erlang\n[1,2,3,4]\n```","ref":"proplists.html#append_values/2"},{"type":"function","title":"proplists.compact/1","doc":"Minimizes the representation of all entries in the list. This is equivalent to\n`[property(P) || P <- ListIn]`.\n\nSee also `property/1`, `unfold/1`.","ref":"proplists.html#compact/1"},{"type":"function","title":"proplists.delete/2","doc":"Deletes all entries associated with `Key` from `List`.","ref":"proplists.html#delete/2"},{"type":"function","title":"proplists.expand/2","doc":"Expands particular properties to corresponding sets of properties (or other\nterms).\n\nFor each pair `{Property, Expansion}` in `Expansions`: if `E` is the\nfirst entry in `ListIn` with the same key as `Property`, and `E` and `Property`\nhave equivalent normal forms, then `E` is replaced with the terms in\n`Expansion`, and any following entries with the same key are deleted from\n`ListIn`.\n\nFor example, the following expressions all return `[fie, bar, baz, fum]`:\n\n```erlang\nexpand([{foo, [bar, baz]}], [fie, foo, fum])\nexpand([{{foo, true}, [bar, baz]}], [fie, foo, fum])\nexpand([{{foo, false}, [bar, baz]}], [fie, {foo, false}, fum])\n```\n\nHowever, no expansion is done in the following call because `{foo, false}`\nshadows `foo`:\n\n```erlang\nexpand([{{foo, true}, [bar, baz]}], [{foo, false}, fie, foo, fum])\n```\n\nNotice that if the original property term is to be preserved in the result when\nexpanded, it must be included in the expansion list. The inserted terms are not\nexpanded recursively. If `Expansions` contains more than one property with the\nsame key, only the first occurrence is used.\n\nSee also `normalize/2`.","ref":"proplists.html#expand/2"},{"type":"function","title":"proplists.from_map/1","doc":"Converts the map `Map` to a property list.","ref":"proplists.html#from_map/1"},{"type":"function","title":"proplists.get_all_values/2","doc":"Similar to `get_value/2`, but returns the list of values for _all_ entries\n`{Key, Value}` in `List`. If no such entry exists, the result is the empty list.","ref":"proplists.html#get_all_values/2"},{"type":"function","title":"proplists.get_bool/2","doc":"Returns the value of a boolean key/value option. If\n[`lookup(Key, List)`](`lookup/2`) would yield `{Key, true}`, this function\nreturns `true`, otherwise `false`.\n\nSee also `get_value/2`, `lookup/2`.","ref":"proplists.html#get_bool/2"},{"type":"function","title":"proplists.get_keys/1","doc":"Returns an unordered list of the keys used in `List`, not containing duplicates.","ref":"proplists.html#get_keys/1"},{"type":"function","title":"proplists.get_value/2","doc":"","ref":"proplists.html#get_value/2"},{"type":"function","title":"proplists.get_value/3","doc":"Returns the value of a simple key/value property in `List`. If\n[`lookup(Key, List)`](`lookup/2`) would yield `{Key, Value}`, this function\nreturns the corresponding `Value`, otherwise `Default`.\n\nSee also `get_all_values/2`, `get_bool/2`, `get_value/2`, `lookup/2`.","ref":"proplists.html#get_value/3"},{"type":"function","title":"proplists.is_defined/2","doc":"Returns `true` if `List` contains at least one entry associated with `Key`,\notherwise `false`.","ref":"proplists.html#is_defined/2"},{"type":"function","title":"proplists.lookup/2","doc":"Returns the first entry associated with `Key` in `List`, if one exists,\notherwise returns `none`. For an atom `A` in the list, the tuple `{A, true}` is\nthe entry associated with `A`.\n\nSee also `get_bool/2`, `get_value/2`, `lookup_all/2`.","ref":"proplists.html#lookup/2"},{"type":"function","title":"proplists.lookup_all/2","doc":"Returns the list of all entries associated with `Key` in `List`. If no such\nentry exists, the result is the empty list.\n\nSee also `lookup/2`.","ref":"proplists.html#lookup_all/2"},{"type":"function","title":"proplists.normalize/2","doc":"Passes `ListIn` through a sequence of substitution/expansion stages. For an\n`aliases` operation, function `substitute_aliases/2` is applied using the\nspecified list of aliases:\n\n- For a `negations` operation,\n  [`substitute_negations/2`](`substitute_negations/2`) is applied using the\n  specified negation list.\n- For an `expand` operation, function `expand/2` is applied using the specified\n  list of expansions.\n\nThe final result is automatically compacted (compare `compact/1`).\n\nTypically you want to substitute negations first, then aliases, then perform one\nor more expansions (sometimes you want to pre-expand particular entries before\ndoing the main expansion). You might want to substitute negations and/or aliases\nrepeatedly, to allow such forms in the right-hand side of aliases and expansion\nlists.\n\nSee also `substitute_negations/2`.","ref":"proplists.html#normalize/2"},{"type":"type","title":"proplists.property/0","doc":"A property item within a list","ref":"proplists.html#t:property/0"},{"type":"function","title":"proplists.property/1","doc":"Creates a normal form (minimal) representation of a property. If `PropertyIn` is\n`{Key, true}`, where `Key` is an atom, `Key` is returned, otherwise the whole\nterm `PropertyIn` is returned.\n\nSee also `property/2`.","ref":"proplists.html#property/1"},{"type":"function","title":"proplists.property/2","doc":"Creates a normal form (minimal) representation of a simple key/value property.\nReturns `Key` if `Value` is `true` and `Key` is an atom, otherwise a tuple\n`{Key, Value}` is returned.\n\nSee also `property/1`.","ref":"proplists.html#property/2"},{"type":"type","title":"proplists.proplist/0","doc":"A list of `t:property/0`, also knows as a proplist.","ref":"proplists.html#t:proplist/0"},{"type":"function","title":"proplists.split/2","doc":"Partitions `List` into a list of sublists and a remainder.\n\n`Lists` contains one sublist for each key in `Keys`, in the corresponding order.\nThe relative order of the elements in each sublist is preserved from the original `List`.\n`Rest` contains the elements in `List` that are not associated with any of the\nspecified keys, also with their original relative order preserved.\n\n_Example:_\n\n```erlang\nsplit([{c, 2}, {e, 1}, a, {c, 3, 4}, d, {b, 5}, b], [a, b, c])\n```\n\nreturns:\n\n```erlang\n{[[a], [{b, 5}, b],[{c, 2}, {c, 3, 4}]], [{e, 1}, d]}\n```","ref":"proplists.html#split/2"},{"type":"function","title":"proplists.substitute_aliases/2","doc":"Substitutes keys of properties. For each entry in `ListIn`, if it is associated\nwith some key `K1` such that `{K1, K2}` occurs in `Aliases`, the key of the\nentry is changed to `K2`. If the same `K1` occurs more than once in `Aliases`,\nonly the first occurrence is used.\n\nFor example,\n[`substitute_aliases([{color, colour}], L)`](`substitute_aliases/2`) replaces\nall tuples `{color, ...}` in `L` with `{colour, ...}`, and all atoms `color`\nwith `colour`.\n\nSee also `normalize/2`, `substitute_negations/2`.","ref":"proplists.html#substitute_aliases/2"},{"type":"function","title":"proplists.substitute_negations/2","doc":"Substitutes keys of boolean-valued properties and simultaneously negates their\nvalues.\n\nFor each entry in `ListIn`, if it is associated with some key `K1` such\nthat `{K1, K2}` occurs in `Negations`: if the entry was `{K1, true}`, it is\nreplaced with `{K2, false}`, otherwise with `K2`, thus changing the name of the\noption and simultaneously negating the value specified by\n[`get_bool(Key, ListIn)`](`get_bool/2`). If the same `K1` occurs more than once\nin `Negations`, only the first occurrence is used.\n\nFor example,\n[`substitute_negations([{no_foo, foo}], L)`](`substitute_negations/2`) replaces\nany atom `no_foo` or tuple `{no_foo, true}` in `L` with `{foo, false}`, and any\nother tuple `{no_foo, ...}` with `foo`.\n\nSee also `get_bool/2`, `normalize/2`, `substitute_aliases/2`.","ref":"proplists.html#substitute_negations/2"},{"type":"function","title":"proplists.to_map/1","doc":"Converts the property list `List` to a map.\n\nShorthand atom values in `List` will be expanded to an association of the form\n`Atom => true`. Tuples of the form `{Key, Value}` in `List` will be converted to\nan association of the form `Key => Value`. Anything else will be silently\nignored.\n\nIf the same key appears in `List` multiple times, the value of the one appearing\nnearest to the head of `List` will be in the result map, that is the value that\nwould be returned by a call to [`get_value(Key, List)`](`get_value/2`).\n\n_Example:_\n\n```erlang\nto_map([a, {b, 1}, {c, 2}, {c, 3}])\n```\n\nreturns:\n\n```erlang\n#{a => true, b => 1, c => 2}\n```","ref":"proplists.html#to_map/1"},{"type":"function","title":"proplists.to_map/2","doc":"Converts the property list `List` to a map after applying the normalizations\ngiven in `Stages`.\n\nSee also `normalize/2`, `to_map/1`.","ref":"proplists.html#to_map/2"},{"type":"function","title":"proplists.unfold/1","doc":"Unfolds all occurrences of atoms in `ListIn` to tuples `{Atom, true}`.\n\nSee also `compact/1`.","ref":"proplists.html#unfold/1"},{"type":"module","title":"qlc","doc":"This module provides a query interface to [Mnesia](`m:mnesia`), [ETS](`m:ets`),\n[Dets](`m:dets`), and other data structures that provide an iterator style\ntraversal of objects.","ref":"qlc.html"},{"type":"module","title":"Overview - qlc","doc":"This module provides a query interface to _QLC tables_. Typical QLC tables are\nMnesia, ETS, and Dets tables. Support is also provided for user-defined tables,\nsee section [Implementing a QLC Table](`m:qlc#implementing_a_qlc_table`). [](){:\n#query_list_comprehension } A _query_ is expressed using _Query List\nComprehensions_ (QLCs). The answers to a query are determined by data in QLC\ntables that fulfill the constraints expressed by the QLCs of the query. QLCs are\nsimilar to ordinary list comprehensions as described in\n[Erlang Reference Manual](`e:system:expressions.md#lcs`) and\n[Programming Examples](`e:system:list_comprehensions.md`), except that variables\nintroduced in patterns cannot be used in list expressions. In the absence of\noptimizations and options such as `cache` and `unique` (see section\n[Common Options](`m:qlc#common_options`), every QLC free of QLC tables evaluates\nto the same list of answers as the identical ordinary list comprehension.\n\nWhile ordinary list comprehensions evaluate to lists, calling [`q/1,2`](`q/1`)\nreturns a _query handle_{: #query_handle }. To obtain all the answers to a\nquery, [`eval/1,2`](`eval/1`) is to be called with the query handle as first\nargument. Query handles are essentially functional objects (funs) created in the\nmodule calling `q/1,2`. As the funs refer to the module code, be careful not to\nkeep query handles too long if the module code is to be replaced. Code\nreplacement is described in section\n[Compilation and Code Loading](`e:system:code_loading.md`) in the Erlang\nReference Manual. The list of answers can also be traversed in chunks by use of\na _query cursor_{: #query_cursor }. Query cursors are created by calling\n[`cursor/1,2`](`cursor/1`) with a query handle as first argument. Query cursors\nare essentially Erlang processes. One answer at a time is sent from the query\ncursor process to the process that created the cursor.","ref":"qlc.html#module-overview"},{"type":"module","title":"Syntax - qlc","doc":"Syntactically QLCs have the same parts as ordinary list comprehensions:\n\n```text\n[Expression || Qualifier1, Qualifier2, ...]\n```\n\n`Expression` (the _template_) is any Erlang expression. Qualifiers are either\n_filters_ or _generators_. Filters are Erlang expressions returning\n`t:boolean/0`. Generators have the form `Pattern <- ListExpression`, where\n`ListExpression` is an expression evaluating to a query handle or a list. Query\nhandles are returned from [`append/1,2`](`append/1`),\n[`keysort/2,3`](`keysort/2`), [`q/1,2`](`q/1`), [`sort/1,2`](`sort/1`),\n[`string_to_handle/1,2,3`](`string_to_handle/1`), and `table/2`.","ref":"qlc.html#module-syntax"},{"type":"module","title":"Evaluation - qlc","doc":"A query handle is evaluated in the following order:\n\n- Inspection of options and the collection of information about tables. As a\n  result, qualifiers are modified during the optimization phase.\n- All list expressions are evaluated. If a cursor has been created, evaluation\n  takes place in the cursor process. For list expressions that are QLCs, the\n  list expressions of the generators of the QLCs are evaluated as well. Be\n  careful if list expressions have side effects, as list expressions are\n  evaluated in unspecified order.\n- The answers are found by evaluating the qualifiers from left to right,\n  backtracking when some filter returns `false`, or collecting the template when\n  all filters return `true`.\n\nFilters that do not return `t:boolean/0` but fail are handled differently\ndepending on their syntax: if the filter is a guard, it returns `false`,\notherwise the query evaluation fails. This behavior makes it possible for the\n`qlc` module to do some optimizations without affecting the meaning of a query.\nFor example, when testing some position of a table and one or more constants for\nequality, only the objects with equal values are candidates for further\nevaluation. The other objects are guaranteed to make the filter return `false`,\nbut never fail. The (small) set of candidate objects can often be found by\nlooking up some key values of the table or by traversing the table using a match\nspecification. It is necessary to place the guard filters immediately after the\ntable generator, otherwise the candidate objects are not restricted to a small\nset. The reason is that objects that could make the query evaluation fail must\nnot be excluded by looking up a key or running a match specification.","ref":"qlc.html#module-evaluation"},{"type":"module","title":"Join - qlc","doc":"The `qlc` module supports fast join of two query handles. Fast join is possible\nif some position `P1` of one query handler and some position `P2` of another\nquery handler are tested for equality. Two fast join methods are provided:\n\n- _Lookup join_ traverses all objects of one query handle and finds objects of\n  the other handle (a QLC table) such that the values at `P1` and `P2` match or\n  compare equal. The `qlc` module does not create any indexes but looks up\n  values using the key position and the indexed positions of the QLC table.\n- _Merge join_ sorts the objects of each query handle if necessary and filters\n  out objects where the values at `P1` and `P2` do not compare equal. If many\n  objects with the same value of `P2` exist, a temporary file is used for the\n  equivalence classes.\n\nThe `qlc` module warns at compile time if a QLC combines query handles in such a\nway that more than one join is possible. That is, no query planner is provided\nthat can select a good order between possible join operations. It is up to the\nuser to order the joins by introducing query handles.\n\nThe join is to be expressed as a guard filter. The filter must be placed\nimmediately after the two joined generators, possibly after guard filters that\nuse variables from no other generators but the two joined generators. The `qlc`\nmodule inspects the operands of `=:=/2`, `==/2`, [`is_record/2`](`is_record/2`),\n[`element/2`](`element/2`), and logical operators (`and/2`, `or/2`, `andalso/2`,\n`orelse/2`, `xor/2`) when determining which joins to consider.\n\n[](){: #common_options }","ref":"qlc.html#module-join"},{"type":"module","title":"Common Options - qlc","doc":"The following options are accepted by `cursor/2`, `eval/2`, `fold/4`, and\n`info/2`:\n\n- `{cache_all, Cache}`, where `Cache` is equal to `ets` or `list` adds a\n  `{cache, Cache}` option to every list expression of the query except tables\n  and lists. Defaults to `{cache_all, no}`. Option `cache_all` is equivalent to\n  `{cache_all, ets}`.\n- `{max_list_size, MaxListSize}`{: #max_list_size }, where `MaxListSize` is the\n  size in bytes of terms on the external format. If the accumulated size of\n  collected objects exceeds `MaxListSize`, the objects are written onto a\n  temporary file. This option is used by option `{cache, list}` and by the merge\n  join method. Defaults to 512\\*1024 bytes.\n- `{tmpdir_usage, TmpFileUsage}` determines the action taken when `qlc` is about\n  to create temporary files on the directory set by option `tmpdir`. If the\n  value is `not_allowed`, an error tuple is returned, otherwise temporary files\n  are created as needed. Default is `allowed`, which means that no further\n  action is taken. The values `info_msg`, `warning_msg`, and `error_msg` mean\n  that the function with the corresponding name in module `m:error_logger` is\n  called for printing some information (currently the stacktrace).\n- `{tmpdir, TempDirectory}` sets the directory used by merge join for temporary\n  files and by option `{cache, list}`. The option also overrides option `tmpdir`\n  of `keysort/3` and `sort/2`. Defaults to `\"\"`, which means that the directory\n  returned by `file:get_cwd()` is used.\n- `{unique_all, true}` adds a `{unique, true}` option to every list expression\n  of the query. Defaults to `{unique_all, false}`. Option `unique_all` is\n  equivalent to `{unique_all, true}`.\n\n[](){: #getting_started }","ref":"qlc.html#module-common-options"},{"type":"module","title":"Getting Started - qlc","doc":"As mentioned earlier, queries are expressed in the list comprehension syntax as\ndescribed in section [Expressions](`e:system:expressions.md`) in Erlang\nReference Manual. In the following, some familiarity with list comprehensions is\nassumed. The examples in section\n[List Comprehensions](`e:system:list_comprehensions.md`) in Programming Examples\ncan get you started. Notice that list comprehensions do not add any\ncomputational power to the language; anything that can be done with list\ncomprehensions can also be done without them. But they add syntax for expressing\nsimple search problems, which is compact and clear once you get used to it.\n\nMany list comprehension expressions can be evaluated by the `qlc` module.\nExceptions are expressions, such that variables introduced in patterns (or\nfilters) are used in some generator later in the list comprehension. As an\nexample, consider an implementation of `lists:append(L)`:\n`[X ||Y <- L, X <- Y]`. `Y` is introduced in the first generator and used in the\nsecond. The ordinary list comprehension is normally to be preferred when there\nis a choice as to which to use. One difference is that [`eval/1,2`](`eval/1`)\ncollects answers in a list that is finally reversed, while list comprehensions\ncollect answers on the stack that is finally unwound.\n\nWhat the `qlc` module primarily adds to list comprehensions is that data can be\nread from QLC tables in small chunks. A QLC table is created by calling\n[`qlc:table/2`](`table/2`). Usually `qlc:table/2` is not called directly from\nthe query but through an interface function of some data structure. Erlang/OTP\nincludes a few examples of such functions:\n[`mnesia:table/1,2`](`mnesia:table/1`), [`ets:table/1,2`](`ets:table/1`), and\n[`dets:table/1,2`](`dets:table/1`). For a given data structure, many functions\ncan create QLC tables, but common for these functions is that they return a\nquery handle created by [`qlc:table/2`](`table/2`). Using the QLC tables\nprovided by Erlang/OTP is usually probably sufficient, but for the more advanced\nuser section [Implementing a QLC Table](`m:qlc#implementing_a_qlc_table`)\ndescribes the implementation of a function calling `qlc:table/2`.\n\nBesides `qlc:table/2`, other functions return query handles. They are used more\nseldom than tables, but are sometimes useful. [`qlc:append/1,2`](`append/1`)\ntraverses objects from many tables or lists after each other. If, for example,\nyou want to traverse all answers to a query `QH` and then finish off by a term\n`{finished}`, you can do that by calling `qlc:append(QH, [{finished}])`.\n[`append/2`](`append/2`) first returns all objects of `QH`, then `{finished}`.\nIf a tuple `{finished}` exists among the answers to `QH`, it is returned twice\nfrom [`append/2`](`append/2`).\n\nAs another example, consider concatenating the answers to two queries `QH1` and\n`QH2` while removing all duplicates. This is accomplished by using option\n`unique`:\n\n```erlang\nqlc:q([X || X <- qlc:append(QH1, QH2)], {unique, true})\n```\n\nThe cost is substantial: every returned answer is stored in an ETS table. Before\nreturning an answer, it is looked up in the ETS table to check if it has already\nbeen returned. Without the `unique` option, all answers to `QH1` would be\nreturned followed by all answers to `QH2`. The `unique` option keeps the order\nbetween the remaining answers.\n\nIf the order of the answers is not important, there is an alternative to the\n`unique` option, namely to sort the answers uniquely:\n\n```erlang\nqlc:sort(qlc:q([X || X <- qlc:append(QH1, QH2)], {unique, true})).\n```\n\nThis query also removes duplicates but the answers are sorted. If there are many\nanswers, temporary files are used. Notice that to get the first unique answer,\nall answers must be found and sorted. Both alternatives find duplicates by\ncomparing answers, that is, if `A1` and `A2` are answers found in that order,\nthen `A2` is a removed if `A1 == A2`.\n\nTo return only a few answers, cursors can be used. The following code returns no\nmore than five answers using an ETS table for storing the unique answers:\n\n```erlang\nC = qlc:cursor(qlc:q([X || X <- qlc:append(QH1, QH2)],{unique,true})),\nR = qlc:next_answers(C, 5),\nok = qlc:delete_cursor(C),\nR.\n```\n\nQLCs are convenient for stating constraints on data from two or more tables. The\nfollowing example does a natural join on two query handles on position 2:\n\n```erlang\nqlc:q([{X1,X2,X3,Y1} ||\n          {X1,X2,X3} <- QH1,\n          {Y1,Y2} <- QH2,\n          X2 =:= Y2])\n```\n\nThe `qlc` module evaluates this differently depending on the query handles `QH1`\nand `QH2`. If, for example, `X2` is matched against the key of a QLC table, the\nlookup join method traverses the objects of `QH2` while looking up key values in\nthe table. However, if not `X2` or `Y2` is matched against the key or an indexed\nposition of a QLC table, the merge join method ensures that `QH1` and `QH2` are\nboth sorted on position 2 and next do the join by traversing the objects one by\none.\n\nOption `join` can be used to force the `qlc` module to use a certain join\nmethod. For the rest of this section it is assumed that the excessively slow\njoin method called \"nested loop\" has been chosen:\n\n```erlang\nqlc:q([{X1,X2,X3,Y1} ||\n          {X1,X2,X3} <- QH1,\n          {Y1,Y2} <- QH2,\n          X2 =:= Y2],\n      {join, nested_loop})\n```\n\nIn this case the filter is applied to every possible pair of answers to `QH1`\nand `QH2`, one at a time. If there are M answers to `QH1` and N answers to\n`QH2`, the filter is run M\\*N times.\n\nIf `QH2` is a call to the function for `m:gb_trees`, as defined in section\n[Implementing a QLC Table](`m:qlc#implementing_a_qlc_table`), then\n[`gb_table:table/1` ](`m:qlc#gb_table`), the iterator for the gb-tree is\ninitiated for each answer to `QH1`. The objects of the gb-tree are then returned\none by one. This is probably the most efficient way of traversing the table in\nthat case, as it takes minimal computational power to get the following object.\nBut if `QH2` is not a table but a more complicated QLC, it can be more efficient\nto use some RAM memory for collecting the answers in a cache, particularly if\nthere are only a few answers. It must then be assumed that evaluating `QH2` has\nno side effects so that the meaning of the query does not change if `QH2` is\nevaluated only once. One way of caching the answers is to evaluate `QH2` first\nof all and substitute the list of answers for `QH2` in the query. Another way is\nto use option `cache`. It is expressed like this:\n\n```erlang\nQH2' = qlc:q([X || X <- QH2], {cache, ets})\n```\n\nor only\n\n```text\nQH2' = qlc:q([X || X <- QH2], cache)\n```\n\nThe effect of option `cache` is that when generator `QH2'` is run the first\ntime, every answer is stored in an ETS table. When the next answer of `QH1` is\ntried, answers to `QH2'` are copied from the ETS table, which is very fast. As\nfor option `unique` the cost is a possibly substantial amount of RAM memory.\n\nOption `{cache, list}` offers the possibility to store the answers in a list on\nthe process heap. This has the potential of being faster than ETS tables, as\nthere is no need to copy answers from the table. However, it can often result in\nslower evaluation because of more garbage collections of the process heap and\nincreased RAM memory consumption because of larger heaps. Another drawback with\ncache lists is that if the list size exceeds a limit, a temporary file is used.\nReading the answers from a file is much slower than copying them from an ETS\ntable. But if the available RAM memory is scarce, setting the\n[limit](`m:qlc#max_list_size`) to some low value is an alternative.\n\nOption `cache_all` can be set to `ets` or `list` when evaluating a query. It\nadds a `cache` or `{cache, list}` option to every list expression except QLC\ntables and lists on all levels of the query. This can be used for testing if\ncaching would improve efficiency at all. If the answer is yes, further testing\nis needed to pinpoint the generators that are to be cached.\n\n[](){: #implementing_a_qlc_table }","ref":"qlc.html#module-getting-started"},{"type":"module","title":"Implementing a QLC Table - qlc","doc":"As an example of how to use function `table/2`, the implementation of a QLC\ntable for the `m:gb_trees` module is given:\n\n[](){: #gb_table }\n\n```erlang\n-module(gb_table).\n\n-export([table/1]).\n\ntable(T) ->\n    TF = fun() -> qlc_next(gb_trees:next(gb_trees:iterator(T))) end,\n    InfoFun = fun(num_of_objects) -> gb_trees:size(T);\n                 (keypos) -> 1;\n                 (is_sorted_key) -> true;\n                 (is_unique_objects) -> true;\n                 (_) -> undefined\n              end,\n    LookupFun =\n        fun(1, Ks) ->\n                lists:flatmap(fun(K) ->\n                                      case gb_trees:lookup(K, T) of\n                                          {value, V} -> [{K,V}];\n                                          none -> []\n                                      end\n                              end, Ks)\n        end,\n    FormatFun =\n        fun({all, NElements, ElementFun}) ->\n                ValsS = io_lib:format(\"gb_trees:from_orddict(~w)\",\n                                      [gb_nodes(T, NElements, ElementFun)]),\n                io_lib:format(\"gb_table:table(~s)\", [ValsS]);\n           ({lookup, 1, KeyValues, _NElements, ElementFun}) ->\n                ValsS = io_lib:format(\"gb_trees:from_orddict(~w)\",\n                                      [gb_nodes(T, infinity, ElementFun)]),\n                io_lib:format(\"lists:flatmap(fun(K) -> \"\n                              \"case gb_trees:lookup(K, ~s) of \"\n                              \"{value, V} -> [{K,V}];none -> [] end \"\n                              \"end, ~w)\",\n                              [ValsS, [ElementFun(KV) || KV <- KeyValues]])\n        end,\n    qlc:table(TF, [{info_fun, InfoFun}, {format_fun, FormatFun},\n                   {lookup_fun, LookupFun},{key_equality,'=='}]).\n\nqlc_next({X, V, S}) ->\n    [{X,V} | fun() -> qlc_next(gb_trees:next(S)) end];\nqlc_next(none) ->\n    [].\n\ngb_nodes(T, infinity, ElementFun) ->\n    gb_nodes(T, -1, ElementFun);\ngb_nodes(T, NElements, ElementFun) ->\n    gb_iter(gb_trees:iterator(T), NElements, ElementFun).\n\ngb_iter(_I, 0, _EFun) ->\n    '...';\ngb_iter(I0, N, EFun) ->\n    case gb_trees:next(I0) of\n        {X, V, I} ->\n            [EFun({X,V}) | gb_iter(I, N-1, EFun)];\n        none ->\n            []\n    end.\n```\n\n`TF` is the traversal function. The `qlc` module requires that there is a way of\ntraversing all objects of the data structure. `gb_trees` has an iterator\nfunction suitable for that purpose. Notice that for each object returned, a new\nfun is created. As long as the list is not terminated by `[]`, it is assumed\nthat the tail of the list is a nullary function and that calling the function\nreturns further objects (and functions).\n\nThe lookup function is optional. It is assumed that the lookup function always\nfinds values much faster than it would take to traverse the table. The first\nargument is the position of the key. As `qlc_next/1` returns the objects as\n`{Key, Value}` pairs, the position is 1. Notice that the lookup function is to\nreturn `{Key, Value}` pairs, as the traversal function does.\n\nThe format function is also optional. It is called by [`info/1,2`](`info/1`) to\ngive feedback at runtime of how the query is to be evaluated. Try to give as\ngood feedback as possible without showing too much details. In the example, at\nmost seven objects of the table are shown. The format function handles two\ncases: `all` means that all objects of the table are traversed;\n`{lookup, 1, KeyValues}` means that the lookup function is used for looking up\nkey values.\n\nWhether the whole table is traversed or only some keys looked up depends on how\nthe query is expressed. If the query has the form\n\n```text\nqlc:q([T || P <- LE, F])\n```\n\nand `P` is a tuple, the `qlc` module analyzes `P` and `F` in compile time to\nfind positions of tuple `P` that are tested for equality to constants. If such a\nposition at runtime turns out to be the key position, the lookup function can be\nused, otherwise all objects of the table must be traversed. The info function\n`InfoFun` returns the key position. There can be indexed positions as well, also\nreturned by the info function. An index is an extra table that makes lookup on\nsome position fast. Mnesia maintains indexes upon request, and introduces so\ncalled secondary keys. The `qlc` module prefers to look up objects using the key\nbefore secondary keys regardless of the number of constants to look up.","ref":"qlc.html#module-implementing-a-qlc-table"},{"type":"module","title":"Key Equality - qlc","doc":"Erlang/OTP has two operators for testing term equality: `==/2` and `=:=/2`. The\ndifference is all about the integers that can be represented by floats. For\nexample, `2 == 2.0` evaluates to `true` while `2 =:= 2.0` evaluates to `false`.\nNormally this is a minor issue, but the `qlc` module cannot ignore the\ndifference, which affects the user's choice of operators in QLCs.\n\nIf the `qlc` module at compile time can determine that some constant is free of\nintegers, it does not matter which one of `==/2` or `=:=/2` is used:\n\n```erlang\n1> E1 = ets:new(t, [set]), % uses =:=/2 for key equality\nQ1 = qlc:q([K ||\n{K} <- ets:table(E1),\nK == 2.71 orelse K == a]),\nio:format(\"~s~n\", [qlc:info(Q1)]).\nets:match_spec_run(\n       lists:flatmap(fun(V) ->\n\t\t\t    ets:lookup(#Ref<0.3098908599.2283929601.256025>,\n\t\t\t\t       V)\n\t\t     end,\n\t\t     [a, 2.71]),\n       ets:match_spec_compile([{{'$1'}, [], ['$1']}]))\n```\n\nIn the example, operator `==/2` has been handled exactly as `=:=/2` would have\nbeen handled. However, if it cannot be determined at compile time that some\nconstant is free of integers, and the table uses `=:=/2` when comparing keys for\nequality (see option [key_equality](`m:qlc#key_equality`)), then the `qlc`\nmodule does not try to look up the constant. The reason is that there is in the\ngeneral case no upper limit on the number of key values that can compare equal\nto such a constant; every combination of integers and floats must be looked up:\n\n```erlang\n2> E2 = ets:new(t, [set]),\ntrue = ets:insert(E2, [{{2,2},a},{{2,2.0},b},{{2.0,2},c}]),\nF2 = fun(I) ->\nqlc:q([V || {K,V} <- ets:table(E2), K == I])\nend,\nQ2 = F2({2,2}),\nio:format(\"~s~n\", [qlc:info(Q2)]).\nets:table(#Ref<0.3098908599.2283929601.256125>,\n          [{traverse,\n            {select,\n             [{{'$1', '$2'}, [{'==', '$1', {const, {2, 2}}}], ['$2']}]}}])\n3> lists:sort(qlc:e(Q2)).\n[a,b,c]\n```\n\nLooking up only `{2,2}` would not return `b` and `c`.\n\nIf the table uses `==/2` when comparing keys for equality, the `qlc` module\nlooks up the constant regardless of which operator is used in the QLC. However,\n`==/2` is to be preferred:\n\n```erlang\n4> E3 = ets:new(t, [ordered_set]), % uses ==/2 for key equality\ntrue = ets:insert(E3, [{{2,2.0},b}]),\nF3 = fun(I) ->\nqlc:q([V || {K,V} <- ets:table(E3), K == I])\nend,\nQ3 = F3({2,2}),\nio:format(\"~s~n\", [qlc:info(Q3)]).\nets:match_spec_run(ets:lookup(#Ref<0.3098908599.2283929601.256211>,\n                              {2, 2}),\n                   ets:match_spec_compile([{{'$1', '$2'}, [], ['$2']}]))\n5> qlc:e(Q3).\n[b]\n```\n\nLookup join is handled analogously to lookup of constants in a table: if the\njoin operator is `==/2`, and the table where constants are to be looked up uses\n`=:=/2` when testing keys for equality, then the `qlc` module does not consider\nlookup join for that table.","ref":"qlc.html#module-key-equality"},{"type":"module","title":"See Also - qlc","doc":"`m:dets`, `m:erl_eval`, `m:erlang`, `m:error_logger`, `m:ets`, `m:file`,\n`m:file_sorter`, `m:mnesia`, `m:shell`,\n[Erlang Reference Manual](`e:system:index.html`),\n[Programming Examples](`e:system:index.html`)","ref":"qlc.html#module-see-also"},{"type":"type","title":"qlc.abstract_expr/0","doc":"Parse trees for Erlang expression, see section\n[The Abstract Format](`e:erts:absform.md`) in the ERTS User's Guide.","ref":"qlc.html#t:abstract_expr/0"},{"type":"type","title":"qlc.answer/0","doc":"","ref":"qlc.html#t:answer/0"},{"type":"type","title":"qlc.answers/0","doc":"","ref":"qlc.html#t:answers/0"},{"type":"function","title":"qlc.append/1","doc":"Returns a query handle. When evaluating query handle `QH`, all answers to the\nfirst query handle in `QHL` are returned, followed by all answers to the\nremaining query handles in `QHL`.","ref":"qlc.html#append/1"},{"type":"function","title":"qlc.append/2","doc":"Returns a query handle. When evaluating query handle `QH3`, all answers to `QH1`\nare returned, followed by all answers to `QH2`.\n\n[`append(QH1, QH2)`](`append/2`) is equivalent to\n[`append([QH1, QH2])`](`append/1`).","ref":"qlc.html#append/2"},{"type":"type","title":"qlc.cache/0","doc":"","ref":"qlc.html#t:cache/0"},{"type":"function","title":"qlc.cursor/1","doc":"","ref":"qlc.html#cursor/1"},{"type":"function","title":"qlc.cursor/2","doc":"Creates a query cursor and makes the calling process the owner of the cursor.\n\nThe cursor is to be used as argument to [`next_answers/1,2`](`next_answers/1`)\nand (eventually) `delete_cursor/1`. Calls `erlang:spawn_opt/2` to spawn and link\nto a process that evaluates the query handle. The value of option\n`spawn_options` is used as last argument when calling\n[`spawn_opt/2`](`spawn_opt/2`). Defaults to `[link]`.\n\n_Example:_\n\n```erlang\n1> QH = qlc:q([{X,Y} || X <- [a,b], Y <- [1,2]]),\nQC = qlc:cursor(QH),\nqlc:next_answers(QC, 1).\n[{a,1}]\n2> qlc:next_answers(QC, 1).\n[{a,2}]\n3> qlc:next_answers(QC, all_remaining).\n[{b,1},{b,2}]\n4> qlc:delete_cursor(QC).\nok\n```","ref":"qlc.html#cursor/2"},{"type":"function","title":"qlc.delete_cursor/1","doc":"Deletes a query cursor. Only the owner of the cursor can delete the cursor.","ref":"qlc.html#delete_cursor/1"},{"type":"function","title":"qlc.e/1","doc":"","ref":"qlc.html#e/1"},{"type":"function","title":"qlc.e/2","doc":"","ref":"qlc.html#e/2"},{"type":"function","title":"qlc.eval/1","doc":"","ref":"qlc.html#eval/1"},{"type":"function","title":"qlc.eval/2","doc":"Evaluates a query handle in the calling process and collects all answers in a\nlist.\n\n_Example:_\n\n```erlang\n1> QH = qlc:q([{X,Y} || X <- [a,b], Y <- [1,2]]),\nqlc:eval(QH).\n[{a,1},{a,2},{b,1},{b,2}]\n```","ref":"qlc.html#eval/2"},{"type":"function","title":"qlc.fold/3","doc":"","ref":"qlc.html#fold/3"},{"type":"function","title":"qlc.fold/4","doc":"Calls `Function` on successive answers to the query handle together with an\nextra argument `AccIn`.\n\nThe query handle and the function are evaluated in the\ncalling process. `Function` must return a new accumulator, which is passed to\nthe next call. `Acc0` is returned if there are no answers to the query handle.\n\n_Example:_\n\n```erlang\n1> QH = [1,2,3,4,5,6],\nqlc:fold(fun(X, Sum) -> X + Sum end, 0, QH).\n21\n```","ref":"qlc.html#fold/4"},{"type":"function","title":"qlc.format_error/1","doc":"Returns a descriptive string in English of an error tuple returned by some of\nthe functions of the `qlc` module or the parse transform. This function is\nmainly used by the compiler invoking the parse transform.","ref":"qlc.html#format_error/1"},{"type":"function","title":"qlc.info/1","doc":"","ref":"qlc.html#info/1"},{"type":"function","title":"qlc.info/2","doc":"Returns information about a query handle. The information describes the\nsimplifications and optimizations that are the results of preparing the query\nfor evaluation. This function is probably mainly useful during debugging.\n\nThe information has the form of an Erlang expression where QLCs most likely\noccur. Depending on the format functions of mentioned QLC tables, it is not\ncertain that the information is absolutely accurate.\n\nOptions:\n\n- The default is to return a sequence of QLCs in a block, but if option\n  `{flat, false}` is specified, one single QLC is returned.\n- The default is to return a string, but if option `{format, abstract_code}` is\n  specified, abstract code is returned instead. In the abstract code, port\n  identifiers, references, and pids are represented by strings.\n- The default is to return all elements in lists, but if option\n  `{n_elements, NElements}` is specified, only a limited number of elements are\n  returned.\n- The default is to show all parts of objects and match specifications, but if\n  option `{depth, Depth}` is specified, parts of terms below a certain depth are\n  replaced by `'...'`.\n\n_Examples:_\n\nIn the following example two simple QLCs are inserted only to hold option\n`{unique, true}`:\n\n```erlang\n1> QH = qlc:q([{X,Y} || X <- [x,y], Y <- [a,b]]),\nio:format(\"~s~n\", [qlc:info(QH, unique_all)]).\nbegin\n    V1 =\n        qlc:q([\n               SQV ||\n                   SQV <- [x, y]\n              ],\n              [{unique, true}]),\n    V2 =\n        qlc:q([\n               SQV ||\n                   SQV <- [a, b]\n              ],\n              [{unique, true}]),\n    qlc:q([\n           {X,Y} ||\n               X <- V1,\n               Y <- V2\n          ],\n          [{unique, true}])\nend\n```\n\nIn the following example QLC `V2` has been inserted to show the joined\ngenerators and the join method chosen. A convention is used for lookup join: the\nfirst generator (`G2`) is the one traversed, the second (`G1`) is the table\nwhere constants are looked up.\n\n```erlang\n1> E1 = ets:new(e1, []),\nE2 = ets:new(e2, []),\ntrue = ets:insert(E1, [{1,a},{2,b}]),\ntrue = ets:insert(E2, [{a,1},{b,2}]),\nQ = qlc:q([{X,Z,W} ||\n{X, Z} <- ets:table(E1),\n{W, Y} <- ets:table(E2),\nX =:= Y]),\nio:format(\"~s~n\", [qlc:info(Q)]).\nbegin\n    V1 =\n        qlc:q([\n               P0 ||\n                   P0 = {W, Y} <-\n                       ets:table(#Ref<0.3098908599.2283929601.256549>)\n              ]),\n    V2 =\n        qlc:q([\n               [G1 | G2] ||\n                   G2 <- V1,\n                   G1 <-\n                       ets:table(#Ref<0.3098908599.2283929601.256548>),\n                   element(2, G1) =:= element(1, G2)\n              ],\n              [{join, lookup}]),\n    qlc:q([\n           {X, Z, W} ||\n               [{X, Z} | {W, Y}] <- V2\n          ])\nend\n```","ref":"qlc.html#info/2"},{"type":"type","title":"qlc.key_pos/0","doc":"","ref":"qlc.html#t:key_pos/0"},{"type":"function","title":"qlc.keysort/2","doc":"","ref":"qlc.html#keysort/2"},{"type":"function","title":"qlc.keysort/3","doc":"Returns a query handle. When evaluating query handle `QH2`, the answers to query\nhandle `QH1` are sorted by `file_sorter:keysort/4` according to the options.\n\nThe sorter uses temporary files only if `QH1` does not evaluate to a list and\nthe size of the binary representation of the answers exceeds `Size` bytes, where\n`Size` is the value of option `size`.","ref":"qlc.html#keysort/3"},{"type":"type","title":"qlc.match_expression/0","doc":"Match specification, see section\n[Match Specifications in Erlang](`e:erts:match_spec.md`) in the ERTS User's\nGuide and `m:ms_transform`.","ref":"qlc.html#t:match_expression/0"},{"type":"type","title":"qlc.max_list_size/0","doc":"","ref":"qlc.html#t:max_list_size/0"},{"type":"function","title":"qlc.next_answers/1","doc":"","ref":"qlc.html#next_answers/1"},{"type":"function","title":"qlc.next_answers/2","doc":"Returns some or all of the remaining answers to a query cursor. Only the owner\nof `QueryCursor` can retrieve answers.\n\nArgument `NumberOfAnswers` determines the maximum number of answers\nreturned. If less than the requested number of answers is\nreturned, subsequent calls to `next_answers` return `[]`.","ref":"qlc.html#next_answers/2"},{"type":"type","title":"qlc.no_files/0","doc":"An integer > 1.","ref":"qlc.html#t:no_files/0"},{"type":"type","title":"qlc.order/0","doc":"","ref":"qlc.html#t:order/0"},{"type":"type","title":"qlc.order_fun/0","doc":"","ref":"qlc.html#t:order_fun/0"},{"type":"function","title":"qlc.q/1","doc":"","ref":"qlc.html#q/1"},{"type":"function","title":"qlc.q/2","doc":"Returns a query handle for a QLC. The QLC must be the first argument to this\nfunction, otherwise it is evaluated as an ordinary list comprehension. It is\nalso necessary to add the following line to the source code:\n\n```erlang\n-include_lib(\"stdlib/include/qlc.hrl\").\n```\n\nThis causes a parse transform to substitute a fun for the QLC. The (compiled)\nfun is called when the query handle is evaluated.\n\nWhen calling `qlc:q/1,2` from the Erlang shell, the parse transform is\nautomatically called. When this occurs, the fun substituted for the QLC is not\ncompiled but is evaluated by `m:erl_eval`. This is also true when expressions\nare evaluated by `file:eval/1,2` or in the debugger.\n\nTo be explicit, this does not work:\n\n```erlang\n...\nA = [X || {X} <- [{1},{2}]],\nQH = qlc:q(A),\n...\n```\n\nVariable `A` is bound to the evaluated value of the list comprehension\n(`[1,2]`). The compiler complains with an error message (\"argument is not a\nquery list comprehension\"); the shell process stops with a `badarg` reason.\n\nOptions:\n\n- Option `{cache, ets}` can be used to cache the answers to a QLC. The answers\n  are stored in one ETS table for each cached QLC. When a cached QLC is\n  evaluated again, answers are fetched from the table without any further\n  computations. Therefore, when all answers to a cached QLC have been found, the\n  ETS tables used for caching answers to the qualifiers of the QLC can be\n  emptied. Option `cache` is equivalent to `{cache, ets}`.\n- Option `{cache, list}` can be used to cache the answers to a QLC like\n  `{cache, ets}`. The difference is that the answers are kept in a list (on the\n  process heap). If the answers would occupy more than a certain amount of RAM\n  memory, a temporary file is used for storing the answers. Option\n  `max_list_size` sets the limit in bytes and the temporary file is put on the\n  directory set by option `tmpdir`.\n\n  Option `cache` has no effect if it is known that the QLC is to be evaluated at\n  most once. This is always true for the top-most QLC and also for the list\n  expression of the first generator in a list of qualifiers. Notice that in the\n  presence of side effects in filters or callback functions, the answers to QLCs\n  can be affected by option `cache`.\n\n- Option `{unique, true}` can be used to remove duplicate answers to a QLC. The\n  unique answers are stored in one ETS table for each QLC. The table is emptied\n  every time it is known that there are no more answers to the QLC. Option\n  `unique` is equivalent to `{unique, true}`. If option `unique` is combined\n  with option `{cache, ets}`, two ETS tables are used, but the full answers are\n  stored in one table only. If option `unique` is combined with option\n  `{cache, list}`, the answers are sorted twice using `keysort/3`; once to\n  remove duplicates and once to restore the order.\n\nOptions `cache` and `unique` apply not only to the QLC itself but also to the\nresults of looking up constants, running match specifications, and joining\nhandles.\n\n_Example:_\n\nIn the following example the cached results of the merge join are traversed for\neach value of `A`. Notice that without option `cache` the join would have been\ncarried out three times, once for each value of `A`.\n\n```erlang\n1> Q = qlc:q([{A,X,Z,W} ||\nA <- [a,b,c],\n{X,Z} <- [{a,1},{b,4},{c,6}],\n{W,Y} <- [{2,a},{3,b},{4,c}],\nX =:= Y],\n{cache, list}),\nio:format(\"~s~n\", [qlc:info(Q)]).\nbegin\n    V1 =\n        qlc:q([\n               P0 ||\n                   P0 = {X, Z} <-\n                       qlc:keysort(1, [{a, 1}, {b, 4}, {c, 6}], [])\n              ]),\n    V2 =\n        qlc:q([\n               P0 ||\n                   P0 = {W, Y} <-\n                       qlc:keysort(2, [{2, a}, {3, b}, {4, c}], [])\n              ]),\n    V3 =\n        qlc:q([\n               [G1 | G2] ||\n                   G1 <- V1,\n                   G2 <- V2,\n                   element(1, G1) == element(2, G2)\n              ],\n              [{join, merge}, {cache, list}]),\n    qlc:q([\n           {A, X, Z, W} ||\n               A <- [a, b, c],\n               [{X, Z} | {W, Y}] <- V3,\n               X =:= Y\n          ])\nend\n```\n\n[`sort/1,2`](`sort/1`) and [`keysort/2,3`](`keysort/2`) can also be used for\ncaching answers and for removing duplicates. When sorting answers are cached in\na list, possibly stored on a temporary file, and no ETS tables are used.\n\nSometimes (see `table/2`) traversal of tables can be done by looking up key\nvalues, which is assumed to be fast. Under certain (rare) circumstances there\ncan be too many key values to look up. [](){: #max_lookup } Option\n`{max_lookup, MaxLookup}` can then be used to limit the number of lookups: if\nmore than `MaxLookup` lookups would be required, no lookups are done but the\ntable is traversed instead. Defaults to `infinity`, which means that there is no\nlimit on the number of keys to look up.\n\n_Example:_\n\nIn the following example, using the `gb_table` module from section\n[Implementing a QLC Table](`m:qlc#implementing_a_qlc_table`), there are six keys\nto look up: `{1,a}`, `{1,b}`, `{1,c}`, `{2,a}`, `{2,b}`, and `{2,c}`. The reason\nis that the two elements of key `{X, Y}` are compared separately.\n\n```erlang\n1> T = gb_trees:empty(),\nQH = qlc:q([X || {{X,Y},_} <- gb_table:table(T),\n((X == 1) or (X == 2)) andalso\n((Y == a) or (Y == b) or (Y == c))]),\nio:format(\"~s~n\", [qlc:info(QH)]).\nets:match_spec_run(\n       lists:flatmap(fun(K) ->\n                            case\n                                gb_trees:lookup(K,\n                                                gb_trees:from_orddict([]))\n                            of\n                                {value, V} ->\n                                    [{K, V}];\n                                none ->\n                                    []\n                            end\n                     end,\n                     [{1, a},\n                      {1, b},\n                      {1, c},\n                      {2, a},\n                      {2, b},\n                      {2, c}]),\n       ets:match_spec_compile([{{{'$1', '$2'}, '_'},\n                                [],\n                                ['$1']}]))\n```\n\nOptions:\n\n- Option `{lookup, true}` can be used to ensure that the `qlc` module looks up\n  constants in some QLC table. If there are more than one QLC table among the\n  list expressions of the generators, constants must be looked up in at least\n  one of the tables. The evaluation of the query fails if there are no constants\n  to look up. This option is useful when it would be unacceptable to traverse\n  all objects in some table. Setting option `lookup` to `false` ensures that no\n  constants are looked up (`{max_lookup, 0}` has the same effect). Defaults to\n  `any`, which means that constants are looked up whenever possible.\n- Option `{join, Join}` can be used to ensure that a certain join method is\n  used:\n\n  - `{join, lookup}` invokes the lookup join method.\n  - `{join, merge}` invokes the merge join method.\n  - `{join, nested_loop}` invokes the method of matching every pair of objects\n    from two handles. This method is mostly very slow.\n\n  The evaluation of the query fails if the `qlc` module cannot carry out the\n  chosen join method. Defaults to `any`, which means that some fast join method\n  is used if possible.","ref":"qlc.html#q/2"},{"type":"opaque","title":"qlc.query_cursor/0","doc":"A [query cursor](`m:qlc#query_cursor`).","ref":"qlc.html#t:query_cursor/0"},{"type":"opaque","title":"qlc.query_handle/0","doc":"A [query handle](`m:qlc#query_handle`).","ref":"qlc.html#t:query_handle/0"},{"type":"type","title":"qlc.query_handle_or_list/0","doc":"","ref":"qlc.html#t:query_handle_or_list/0"},{"type":"type","title":"qlc.query_list_comprehension/0","doc":"A literal [query list comprehension](`m:qlc#query_list_comprehension`).","ref":"qlc.html#t:query_list_comprehension/0"},{"type":"function","title":"qlc.sort/1","doc":"","ref":"qlc.html#sort/1"},{"type":"function","title":"qlc.sort/2","doc":"Returns a query handle. When evaluating query handle `QH2`, the answers to query\nhandle `QH1` are sorted by `file_sorter:sort/3` according to the options.\n\nThe sorter uses temporary files only if `QH1` does not evaluate to a list and\nthe size of the binary representation of the answers exceeds `Size` bytes, where\n`Size` is the value of option `size`.","ref":"qlc.html#sort/2"},{"type":"type","title":"qlc.sort_option/0","doc":"See `m:file_sorter` for a description of the options.","ref":"qlc.html#t:sort_option/0"},{"type":"type","title":"qlc.sort_options/0","doc":"","ref":"qlc.html#t:sort_options/0"},{"type":"type","title":"qlc.spawn_options/0","doc":"","ref":"qlc.html#t:spawn_options/0"},{"type":"function","title":"qlc.string_to_handle/1","doc":"","ref":"qlc.html#string_to_handle/1"},{"type":"function","title":"qlc.string_to_handle/2","doc":"","ref":"qlc.html#string_to_handle/2"},{"type":"function","title":"qlc.string_to_handle/3","doc":"A string version of [`q/1,2`](`q/1`). When the query handle is evaluated, the\nfun created by the parse transform is interpreted by `m:erl_eval`. The query\nstring is to be one single QLC terminated by a period.\n\n_Example:_\n\n```erlang\n1> L = [1,2,3],\nBs = erl_eval:add_binding('L', L, erl_eval:new_bindings()),\nQH = qlc:string_to_handle(\"[X+1 || X <- L].\", [], Bs),\nqlc:eval(QH).\n[2,3,4]\n```\n\nThis function is probably mainly useful when called from outside of Erlang, for\nexample from a driver written in C.\n\n> #### Note {: .info }\n>\n> Query handles created this way may have worse performance than when created\n> directly via [`q/1,2`](`q/1`).","ref":"qlc.html#string_to_handle/3"},{"type":"function","title":"qlc.table/2","doc":"Returns a query handle for a QLC table. In Erlang/OTP there is support for ETS,\nDets, and Mnesia tables, but many other data structures can be turned into QLC\ntables. This is accomplished by letting function(s) in the module implementing\nthe data structure create a query handle by calling `qlc:table/2`.\n\nThe different ways to traverse the table and properties of the table are handled\nby callback functions provided as options to `qlc:table/2`.\n\n- Callback function `TraverseFun` is used for traversing the table. It is to\n  return a list of objects terminated by either `[]` or a nullary fun to be used\n  for traversing the not yet traversed objects of the table. Any other return\n  value is immediately returned as value of the query evaluation. Unary\n  `TraverseFun`s are to accept a match specification as argument. The match\n  specification is created by the parse transform by analyzing the pattern of\n  the generator calling `qlc:table/2` and filters using variables introduced in\n  the pattern. If the parse transform cannot find a match specification\n  equivalent to the pattern and filters, `TraverseFun` is called with a match\n  specification returning every object.\n\n  - Modules that can use match specifications for optimized traversal of tables\n    are to call `qlc:table/2` with an unary `TraverseFun`. An example is\n    `ets:table/2`.\n  - Other modules can provide a nullary `TraverseFun`. An example is\n    [`gb_table:table/1`](`m:qlc#gb_table`) in section\n    [Implementing a QLC Table](`m:qlc#implementing_a_qlc_table`).\n\n- Unary callback function `PreFun` is called once before the table is read for\n  the first time. If the call fails, the query evaluation fails.\n\n  Argument `PreArgs` is a list of tagged values. There are two tags,\n  `parent_value` and `stop_fun`, used by Mnesia for managing transactions.\n\n  - The value of `parent_value` is the value returned by `ParentFun`, or\n    `undefined` if there is no `ParentFun`. `ParentFun` is called once just\n    before the call of `PreFun` in the context of the process calling\n    [`eval/1,2`](`eval/1`), [`fold/3,4`](`fold/3`), or\n    [`cursor/1,2`](`cursor/1`).\n  - The value of `stop_fun` is a nullary fun that deletes the cursor if called\n    from the parent, or `undefined` if there is no cursor.\n\n- Nullary callback function `PostFun` is called once after the table was last\n  read. The return value, which is caught, is ignored. If `PreFun` has been\n  called for a table, `PostFun` is guaranteed to be called for that table, even\n  if the evaluation of the query fails for some reason.\n\n  The pre (post) functions for different tables are evaluated in unspecified\n  order.\n\n  Other table access than reading, such as calling `InfoFun`, is assumed to be\n  OK at any time.\n\n- [](){: #lookup_fun } Binary callback function `LookupFun` is used for looking\n  up objects in the table. The first argument `Position` is the key position or\n  an indexed position and the second argument `Keys` is a sorted list of unique\n  values. The return value is to be a list of all objects (tuples), such that\n  the element at `Position` is a member of `Keys`. Any other return value is\n  immediately returned as value of the query evaluation. `LookupFun` is called\n  instead of traversing the table if the parse transform at compile time can\n  determine that the filters match and compare the element at `Position` in such\n  a way that only `Keys` need to be looked up to find all potential answers.\n\n  The key position is obtained by calling `InfoFun(keypos)` and the indexed\n  positions by calling `InfoFun(indices)`. If the key position can be used for\n  lookup, it is always chosen, otherwise the indexed position requiring the\n  least number of lookups is chosen. If there is a tie between two indexed\n  positions, the one occurring first in the list returned by `InfoFun` is\n  chosen. Positions requiring more than [max_lookup](`m:qlc#max_lookup`) lookups\n  are ignored.\n\n- Unary callback function `InfoFun` is to return information about the table.\n  `undefined` is to be returned if the value of some tag is unknown:\n\n  - **`indices`** - Returns a list of indexed positions, a list of positive\n    integers.\n\n  - **`is_unique_objects`** - Returns `true` if the objects returned by\n    `TraverseFun` are unique.\n\n  - **`keypos`** - Returns the position of the table key, a positive integer.\n\n  - **`is_sorted_key`** - Returns `true` if the objects returned by\n    `TraverseFun` are sorted on the key.\n\n  - **`num_of_objects`** - Returns the number of objects in the table, a\n    non-negative integer.\n\n- Unary callback function `FormatFun` is used by [`info/1,2`](`info/1`) for\n  displaying the call that created the query handle of the table. Defaults to\n  `undefined`, which means that `info/1,2` displays a call to `'$MOD':'$FUN'/0`.\n  It is up to `FormatFun` to present the selected objects of the table in a\n  suitable way. However, if a character list is chosen for presentation, it must\n  be an Erlang expression that can be scanned and parsed (a trailing dot is\n  added by `info/1,2` though).\n\n  `FormatFun` is called with an argument that describes the selected objects\n  based on optimizations done as a result of analyzing the filters of the QLC\n  where the call to `qlc:table/2` occurs. The argument can have the following\n  values:\n\n  - **`{lookup, Position, Keys, NElements, DepthFun}`.** - `LookupFun` is used\n    for looking up objects in the table.\n\n  - **`{match_spec, MatchExpression}`** - No way of finding all possible answers\n    by looking up keys was found, but the filters could be transformed into a\n    match specification. All answers are found by calling\n    `TraverseFun(MatchExpression)`.\n\n  - **`{all, NElements, DepthFun}`** - No optimization was found. A match\n    specification matching all objects is used if `TraverseFun` is unary.\n\n    `NElements` is the value of the `info/1,2` option `n_elements`.\n\n    `DepthFun` is a function that can be used for limiting the size of terms;\n    calling `DepthFun(Term)` substitutes `'...'` for parts of `Term` below the\n    depth specified by the `info/1,2` option `depth`.\n\n    If calling `FormatFun` with an argument including `NElements` and `DepthFun`\n    fails, `FormatFun` is called once again with an argument excluding\n    `NElements` and `DepthFun` (`{lookup, Position, Keys}` or `all`).\n\n- [](){: #key_equality } The value of option `key_equality` is to be `'=:='` if\n  the table considers two keys equal if they match, and to be `'=='` if two keys\n  are equal if they compare equal. Defaults to `'=:='`.\n\nFor the various options recognized by `table/1,2` in respective module, see\n[`ets`](`ets:table/1`), [`dets`](`dets:table/1`), and\n[`mnesia`](`mnesia:table/1`).","ref":"qlc.html#table/2"},{"type":"type","title":"qlc.tmp_directory/0","doc":"","ref":"qlc.html#t:tmp_directory/0"},{"type":"type","title":"qlc.tmp_file_usage/0","doc":"","ref":"qlc.html#t:tmp_file_usage/0"},{"type":"module","title":"queue","doc":"Abstract data type for FIFO queues.\n\nThis module provides (double-ended) FIFO queues in an efficient manner.\n\nAll functions fail with reason `badarg` if arguments are of wrong type, for\nexample, queue arguments are not queues, indexes are not integers, and list\narguments are not lists. Improper lists cause internal crashes. An index out of\nrange for a queue also causes a failure with reason `badarg`.\n\nSome functions, where noted, fail with reason `empty` for an empty queue.\n\nThe data representing a queue as used by this module is to be regarded as opaque\nby other modules. In abstract terms, the representation is a composite type of\nexisting Erlang terms. See note on\n[data types](`e:system:data_types.md#no_user_types`). Any code assuming\nknowledge of the format is running on thin ice.\n\nAll operations have an amortized O(1) running time, except `all/2`, `any/2`,\n`delete/2`, `delete_r/2`, `delete_with/2`, `delete_with_r/2`, `filter/2`,\n`filtermap/2`, `fold/3`, `join/2`, `len/1`, `member/2`, `split/2` that have\nO(n). To minimize the size of a queue minimizing the amount of garbage built by\nqueue operations, the queues do not contain explicit length information, and\nthat is why [`len/1`](`len/1`) is O(n). If better performance for this\nparticular operation is essential, it is easy for the caller to keep track of\nthe length.\n\nQueues are double-ended. The mental picture of a queue is a line of people\n(items) waiting for their turn. The queue front is the end with the item that\nhas waited the longest. The queue rear is the end an item enters when it starts\nto wait. If instead using the mental picture of a list, the front is called head\nand the rear is called tail.\n\nEntering at the front and exiting at the rear are reverse operations on the\nqueue.\n\nThis module has three sets of interface functions: the _\"Original API\"_, the\n_\"Extended API\"_, and the _\"Okasaki API\"_.\n\nThe \"Original API\" and the \"Extended API\" both use the mental picture of a\nwaiting line of items. Both have reverse operations suffixed \"\\_r\".\n\nThe \"Original API\" item removal functions return compound terms with both the\nremoved item and the resulting queue. The \"Extended API\" contains alternative\nfunctions that build less garbage and functions for just inspecting the queue\nends. Also the \"Okasaki API\" functions build less garbage.\n\nThe \"Okasaki API\" is inspired by \"Purely Functional Data Structures\" by Chris\nOkasaki. It regards queues as lists. This API is by many regarded as strange and\navoidable. For example, many reverse operations have lexically reversed names,\nsome with more readable but perhaps less understandable aliases.","ref":"queue.html"},{"type":"function","title":"queue.all/2","doc":"Returns `true` if `Pred(Item)` returns `true` for all items `Item` in `Q`,\notherwise `false`.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n2> queue:all(fun (E) -> E > 3 end, Queue).\nfalse\n3> queue:all(fun (E) -> E > 0 end, Queue).\ntrue\n```","ref":"queue.html#all/2"},{"type":"function","title":"queue.any/2","doc":"Returns `true` if `Pred(Item)` returns `true` for at least one item `Item` in\n`Q`, otherwise `false`.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n2> queue:any(fun (E) -> E > 10 end, Queue).\nfalse\n3> queue:any(fun (E) -> E > 3 end, Queue).\ntrue\n```","ref":"queue.html#any/2"},{"type":"function","title":"queue.cons/2","doc":"Inserts `Item` at the head of queue `Q1`. Returns the new queue `Q2`.\n\n_Example:_\n\n```erlang\n1> Queue = queue:cons(0, queue:from_list([1,2,3])).\n{[3,2],[0,1]}\n2> queue:to_list(Queue).\n[0,1,2,3]\n```","ref":"queue.html#cons/2"},{"type":"function","title":"queue.daeh/1","doc":"Returns the tail item of queue `Q`.\n\nFails with reason `empty` if `Q` is empty.\n\n_Example 1:_\n\n```erlang\n1> queue:daeh(queue:from_list([1,2,3])).\n3\n```","ref":"queue.html#daeh/1"},{"type":"function","title":"queue.delete/2","doc":"Returns a copy of `Q1` where the first item matching `Item` is deleted, if there\nis such an item.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n2> Queue1 = queue:delete(3, Queue).\n3> queue:member(3, Queue1).\nfalse\n```","ref":"queue.html#delete/2"},{"type":"function","title":"queue.delete_r/2","doc":"Returns a copy of `Q1` where the last item matching `Item` is deleted, if there\nis such an item.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,3,5]).\n2> Queue1 = queue:delete_r(3, Queue).\n3> queue:to_list(Queue1).\n[1,2,3,4,5]\n```","ref":"queue.html#delete_r/2"},{"type":"function","title":"queue.delete_with/2","doc":"Returns a copy of `Q1` where the first item for which `Pred` returns `true` is\ndeleted, if there is such an item.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([100,1,2,3,4,5]).\n2> Queue1 = queue:delete_with(fun (E) -> E > 0, Queue).\n3> queue:to_list(Queue1).\n[1,2,3,4,5]\n```","ref":"queue.html#delete_with/2"},{"type":"function","title":"queue.delete_with_r/2","doc":"Returns a copy of `Q1` where the last item for which `Pred` returns `true` is\ndeleted, if there is such an item.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5,100]).\n2> Queue1 = queue:delete_with(fun (E) -> E > 10, Queue).\n3> queue:to_list(Queue1).\n[1,2,3,4,5]\n```","ref":"queue.html#delete_with_r/2"},{"type":"function","title":"queue.drop/1","doc":"Returns a queue `Q2` that is the result of removing the front item from `Q1`.\n\nFails with reason `empty` if `Q1` is empty.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> Queue = queue:drop(Queue).\n{[5,4,3],[2]}\n3> queue:to_list(Queue1).\n[2,3,4,5]\n```","ref":"queue.html#drop/1"},{"type":"function","title":"queue.drop_r/1","doc":"Returns a queue `Q2` that is the result of removing the rear item from `Q1`.\n\nFails with reason `empty` if `Q1` is empty.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> Queue = queue:drop_r(Queue).\n{[4,3],[1,2]}\n3> queue:to_list(Queue1).\n[1,2,3,4]\n```","ref":"queue.html#drop_r/1"},{"type":"function","title":"queue.filter/2","doc":"Returns a queue `Q2` that is the result of calling `Fun(Item)` on all items in\n`Q1`.\n\nIf `Fun(Item)` returns `true`, `Item` is copied to the result queue. If it\nreturns `false`, `Item` is not copied. If it returns a list, the list elements\nare inserted instead of `Item` in the result queue.\n\n_Example 1:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> Queue1 = queue:filter(fun (E) -> E > 2 end, Queue).\n{[5],[3,4]}\n3> queue:to_list(Queue1).\n[3,4,5]\n```\n\nSo, `Fun(Item)` returning `[Item]` is thereby semantically equivalent to\nreturning `true`, just as returning `[]` is semantically equivalent to returning\n`false`. But returning a list builds more garbage than returning an atom.\n\n_Example 2:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> Queue1 = queue:filter(fun (E) -> [E, E+1] end, Queue).\n{[6,5,5,4,4,3],[1,2,2,3]}\n3> queue:to_list(Queue1).\n[1,2,2,3,3,4,4,5,5,6]\n```","ref":"queue.html#filter/2"},{"type":"function","title":"queue.filtermap/2","doc":"Returns a queue `Q2` that is the result of calling `Fun(Item)` on all items in\n`Q1`.\n\nIf `Fun(Item)` returns `true`, `Item` is copied to the result queue. If it\nreturns `false`, `Item` is not copied. If it returns `{true, NewItem}`, the\nqueue element at this position is replaced with `NewItem` in the result queue.\n\n_Example 1:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> Queue1 = queue:filtermap(fun (E) -> E > 2 end, Queue).\n{[5],[3,4]}\n3> queue:to_list(Queue1).\n[3,4,5]\n4> Queue1 = queue:filtermap(fun (E) -> {true, E+100} end, Queue).\n{\"ihg\",\"ef\"}\n5> queue:to_list(Queue1).\n\"efghi\n```","ref":"queue.html#filtermap/2"},{"type":"function","title":"queue.fold/3","doc":"Calls `Fun(Item, AccIn)` on successive items `Item` of `Queue`, starting with\n`AccIn == Acc0`. The queue is traversed in queue order, that is, from front to\nrear. `Fun/2` must return a new accumulator, which is passed to the next call.\nThe function returns the final value of the accumulator. `Acc0` is returned if\nthe queue is empty.\n\n_Example:_\n\n```erlang\n1> queue:fold(fun(X, Sum) -> X + Sum end, 0, queue:from_list([1,2,3,4,5])).\n15\n2> queue:fold(fun(X, Prod) -> X * Prod end, 1, queue:from_list([1,2,3,4,5])).\n120\n```","ref":"queue.html#fold/3"},{"type":"function","title":"queue.from_list/1","doc":"Returns a queue containing the items in `L` in the same order; the head item of\nthe list becomes the front item of the queue.","ref":"queue.html#from_list/1"},{"type":"function","title":"queue.get/1","doc":"Returns `Item` at the front of queue `Q`.\n\nFails with reason `empty` if `Q` is empty.\n\n_Example 1:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> 1 == queue:get(Queue).\ntrue\n```","ref":"queue.html#get/1"},{"type":"function","title":"queue.get_r/1","doc":"Returns `Item` at the rear of queue `Q`.\n\nFails with reason `empty` if `Q` is empty.\n\n_Example 1:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> 5 == queue:get_r(Queue).\ntrue\n```","ref":"queue.html#get_r/1"},{"type":"function","title":"queue.head/1","doc":"Returns `Item` from the head of queue `Q`.\n\nFails with reason `empty` if `Q` is empty.\n\n_Example 1:_\n\n```erlang\n1> queue:head(queue:from_list([1,2,3])).\n1\n```","ref":"queue.html#head/1"},{"type":"function","title":"queue.in/2","doc":"Inserts `Item` at the rear of queue `Q1`. Returns the resulting queue `Q2`.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> Queue1 = queue:in(100, Queue).\n{[100,5,4,3],[1,2]}\n3> queue:to_list(Queue1).\n[1,2,3,4,5,100]\n```","ref":"queue.html#in/2"},{"type":"function","title":"queue.in_r/2","doc":"Inserts `Item` at the front of queue `Q1`. Returns the resulting queue `Q2`.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> Queue1 = queue:in_r(100, Queue).\n{[5,4,3],[100,1,2]}\n3> queue:to_list(Queue1).\n[100,1,2,3,4,5]\n```","ref":"queue.html#in_r/2"},{"type":"function","title":"queue.init/1","doc":"Returns a queue `Q2` that is the result of removing the tail item from `Q1`.\n\nFails with reason `empty` if `Q1` is empty.\n\n_Example:_\n\n```erlang\n1> Queue = queue:init(queue:from_list([1,2,3])).\n{[2],[1]}\n2> queue:to_list(Queue).\n[1,2]\n```","ref":"queue.html#init/1"},{"type":"function","title":"queue.is_empty/1","doc":"Tests if `Q` is empty and returns `true` if so, otherwise `false`.","ref":"queue.html#is_empty/1"},{"type":"function","title":"queue.is_queue/1","doc":"Tests if `Term` is a queue and returns `true` if so, otherwise `false`. Note\nthat the test will return `true` for a term coinciding with the representation\nof a queue, even when not constructed by thus module. See also note on\n[data types](`e:system:data_types.md#no_user_types`).","ref":"queue.html#is_queue/1"},{"type":"function","title":"queue.join/2","doc":"Returns a queue `Q3` that is the result of joining `Q1` and `Q2` with `Q1` in\nfront of `Q2`.\n\n_Example:_\n\n```erlang\n1> Queue1 = queue:from_list([1,3]).\n{[3],[1]}\n2> Queue2 = queue:from_list([2,4]).\n{[4],[2]}\n3> queue:to_list(queue:join(Queue1, Queue2)).\n[1,3,2,4]\n```","ref":"queue.html#join/2"},{"type":"function","title":"queue.lait/1","doc":"Returns a queue `Q2` that is the result of removing the tail item from `Q1`.\n\nFails with reason `empty` if `Q1` is empty.\n\nThe name [`lait/1`](`lait/1`) is a misspelling - do not use it anymore.","ref":"queue.html#lait/1"},{"type":"function","title":"queue.last/1","doc":"Returns the tail item of queue `Q`.\n\nFails with reason `empty` if `Q` is empty.\n\n_Example:_\n\n```erlang\n1> queue:last(queue:from_list([1,2,3])).\n3\n```","ref":"queue.html#last/1"},{"type":"function","title":"queue.len/1","doc":"Calculates and returns the length of queue `Q`.","ref":"queue.html#len/1"},{"type":"function","title":"queue.liat/1","doc":"Returns a queue `Q2` that is the result of removing the tail item from `Q1`.\n\nFails with reason `empty` if `Q1` is empty.\n\n_Example:_\n\n```erlang\n1> Queue = queue:liat(queue:from_list([1,2,3])).\n{[2],[1]}\n2> queue:to_list(Queue).\n[1,2]\n```","ref":"queue.html#liat/1"},{"type":"function","title":"queue.member/2","doc":"Returns `true` if `Item` matches some element in `Q`, otherwise `false`.","ref":"queue.html#member/2"},{"type":"function","title":"queue.new/0","doc":"Returns an empty queue.","ref":"queue.html#new/0"},{"type":"function","title":"queue.out/1","doc":"Removes the item at the front of queue `Q1`. Returns tuple\n`{{value, Item}, Q2}`, where `Item` is the item removed and `Q2` is the\nresulting queue. If `Q1` is empty, tuple `{empty, Q1}` is returned.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> {{value, 1=Item}, Queue1} = queue:out(Queue).\n{{value,1},{[5,4,3],[2]}}\n3> queue:to_list(Queue1).\n[2,3,4,5]\n```","ref":"queue.html#out/1"},{"type":"function","title":"queue.out_r/1","doc":"Removes the item at the rear of queue `Q1`. Returns tuple `{{value, Item}, Q2}`,\nwhere `Item` is the item removed and `Q2` is the new queue. If `Q1` is empty,\ntuple `{empty, Q1}` is returned.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> {{value, 5=Item}, Queue1} = queue:out_r(Queue).\n{{value,5},{[4,3],[1,2]}}\n3> queue:to_list(Queue1).\n[1,2,3,4]\n```","ref":"queue.html#out_r/1"},{"type":"function","title":"queue.peek/1","doc":"Returns tuple `{value, Item}`, where `Item` is the front item of `Q`, or `empty`\nif `Q` is empty.\n\n_Example 1:_\n\n```erlang\n1> queue:peek(queue:new()).\nempty\n2> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n3> queue:peek(Queue).\n{value, 1}\n```","ref":"queue.html#peek/1"},{"type":"function","title":"queue.peek_r/1","doc":"Returns tuple `{value, Item}`, where `Item` is the rear item of `Q`, or `empty`\nif `Q` is empty.\n\n_Example 1:_\n\n```erlang\n1> queue:peek_r(queue:new()).\nempty\n2> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n3> queue:peek_r(Queue).\n{value, 5}\n```","ref":"queue.html#peek_r/1"},{"type":"type","title":"queue.queue/0","doc":"","ref":"queue.html#t:queue/0"},{"type":"opaque","title":"queue.queue/1","doc":"As returned by `new/0`.","ref":"queue.html#t:queue/1"},{"type":"function","title":"queue.reverse/1","doc":"Returns a queue `Q2` containing the items of `Q1` in the reverse order.","ref":"queue.html#reverse/1"},{"type":"function","title":"queue.snoc/2","doc":"Inserts `Item` as the tail item of queue `Q1`. Returns the new queue `Q2`.\n\n_Example:_\n\n```erlang\n1> Queue = queue:snoc(queue:from_list([1,2,3]), 4).\n{[4,3,2],[1]}\n2> queue:to_list(Queue).\n[1,2,3,4]\n```","ref":"queue.html#snoc/2"},{"type":"function","title":"queue.split/2","doc":"Splits `Q1` in two. The `N` front items are put in `Q2` and the rest in `Q3`.","ref":"queue.html#split/2"},{"type":"function","title":"queue.tail/1","doc":"Returns a queue `Q2` that is the result of removing the head item from `Q1`.\n\nFails with reason `empty` if `Q1` is empty.","ref":"queue.html#tail/1"},{"type":"function","title":"queue.to_list/1","doc":"Returns a list of the items in the queue in the same order; the front item of\nthe queue becomes the head of the list.\n\n_Example:_\n\n```erlang\n1> Queue = queue:from_list([1,2,3,4,5]).\n{[5,4,3],[1,2]}\n2> List == queue:to_list(Queue).\ntrue\n```","ref":"queue.html#to_list/1"},{"type":"module","title":"sets","doc":"Sets are collections of elements with no duplicate elements.\n\nThe data representing a set as used by this module is to be regarded as opaque\nby other modules. In abstract terms, the representation is a composite type of\nexisting Erlang terms. See note on\n[data types](`e:system:data_types.md#no_user_types`). Any code assuming\nknowledge of the format is running on thin ice.\n\nThis module provides the same interface as the `m:ordsets` module but with an\nundefined representation. One difference is that while this module considers two\nelements as different if they do not match (`=:=`), `ordsets` considers two\nelements as different if and only if they do not compare equal (`==`).\n\nErlang/OTP 24.0 introduced a new internal representation for sets which is more\nperformant. Developers can use this new representation by passing the\n`{version, 2}` flag to `new/1` and `from_list/2`, such as\n`sets:new([{version, 2}])`. This new representation will become the default in\nfuture Erlang/OTP versions. Functions that work on two sets, such as `union/2`\nand similar, will work with sets of different versions. In such cases, there is\nno guarantee about the version of the returned set. Explicit conversion from the\nold version to the new one can be done with\n`sets:from_list(sets:to_list(Old), [{version,2}])`.","ref":"sets.html"},{"type":"module","title":"Compatibility - sets","doc":"The following functions in this module also exist and provide the same\nfunctionality in the `m:gb_sets` and `m:ordsets` modules. That is, by only\nchanging the module name for each call, you can try out different set\nrepresentations.\n\n- `add_element/2`\n- `del_element/2`\n- `filter/2`\n- `filtermap/2`\n- `fold/3`\n- `from_list/1`\n- `intersection/1`\n- `intersection/2`\n- `is_element/2`\n- `is_empty/1`\n- `is_equal/2`\n- `is_set/1`\n- `is_subset/2`\n- `map/2`\n- `new/0`\n- `size/1`\n- `subtract/2`\n- `to_list/1`\n- `union/1`\n- `union/2`\n\n> #### Note {: .info }\n>\n> While the three set implementations offer the same _functionality_ with\n> respect to the aforementioned functions, their overall _behavior_ may differ.\n> As mentioned, this module considers elements as different if and only if they\n> do not match (`=:=`), while both `m:ordsets` and `m:gb_sets` consider elements\n> as different if and only if they do not compare equal (`==`).\n>\n> _Example:_\n>\n> ```erlang\n> 1> sets:is_element(1.0, sets:from_list([1])).\n> false\n> 2> ordsets:is_element(1.0, ordsets:from_list([1])).\n> true\n> 2> gb_sets:is_element(1.0, gb_sets:from_list([1])).\n> true\n> ```","ref":"sets.html#module-compatibility"},{"type":"module","title":"See Also - sets","doc":"`m:gb_sets`, `m:ordsets`","ref":"sets.html#module-see-also"},{"type":"function","title":"sets.add_element/2","doc":"Returns a new set formed from `Set1` with `Element` inserted.","ref":"sets.html#add_element/2"},{"type":"function","title":"sets.del_element/2","doc":"Returns `Set1`, but with `Element` removed.","ref":"sets.html#del_element/2"},{"type":"function","title":"sets.filter/2","doc":"Filters elements in `Set1` with boolean function `Pred`.","ref":"sets.html#filter/2"},{"type":"function","title":"sets.filtermap/2","doc":"Filters and maps elements in `Set1` with function `Fun`.","ref":"sets.html#filtermap/2"},{"type":"function","title":"sets.fold/3","doc":"Folds `Function` over every element in `Set` and returns the final value of the\naccumulator. The evaluation order is undefined.","ref":"sets.html#fold/3"},{"type":"function","title":"sets.from_list/1","doc":"Returns a set of the elements in `List`.","ref":"sets.html#from_list/1"},{"type":"function","title":"sets.from_list/2","doc":"Returns a set of the elements in `List` at the given version.","ref":"sets.html#from_list/2"},{"type":"function","title":"sets.intersection/1","doc":"Returns the intersection of the non-empty list of sets.","ref":"sets.html#intersection/1"},{"type":"function","title":"sets.intersection/2","doc":"Returns the intersection of `Set1` and `Set2`.","ref":"sets.html#intersection/2"},{"type":"function","title":"sets.is_disjoint/2","doc":"Returns `true` if `Set1` and `Set2` are disjoint (have no elements in common),\notherwise `false`.","ref":"sets.html#is_disjoint/2"},{"type":"function","title":"sets.is_element/2","doc":"Returns `true` if `Element` is an element of `Set`, otherwise `false`.","ref":"sets.html#is_element/2"},{"type":"function","title":"sets.is_empty/1","doc":"Returns `true` if `Set` is an empty set, otherwise `false`.","ref":"sets.html#is_empty/1"},{"type":"function","title":"sets.is_equal/2","doc":"Returns `true` if `Set1` and `Set2` are equal, that is when every element of one\nset is also a member of the respective other set, otherwise `false`.","ref":"sets.html#is_equal/2"},{"type":"function","title":"sets.is_set/1","doc":"Returns `true` if `Set` appears to be a set of elements, otherwise `false`.\n\nNote that the test is shallow and will return `true` for any term that coincides with\nthe possible representations of a set. See also note on [data types](`e:system:data_types.md#no_user_types`).","ref":"sets.html#is_set/1"},{"type":"function","title":"sets.is_subset/2","doc":"Returns `true` when every element of `Set1` is also a member of `Set2`,\notherwise `false`.","ref":"sets.html#is_subset/2"},{"type":"function","title":"sets.map/2","doc":"Maps elements in `Set1` with mapping function `Fun`.","ref":"sets.html#map/2"},{"type":"function","title":"sets.new/0","doc":"Returns a new empty set.","ref":"sets.html#new/0"},{"type":"function","title":"sets.new/1","doc":"Returns a new empty set at the given version.","ref":"sets.html#new/1"},{"type":"type","title":"sets.set/0","doc":"","ref":"sets.html#t:set/0"},{"type":"opaque","title":"sets.set/1","doc":"As returned by `new/0`.","ref":"sets.html#t:set/1"},{"type":"function","title":"sets.size/1","doc":"Returns the number of elements in `Set`.","ref":"sets.html#size/1"},{"type":"function","title":"sets.subtract/2","doc":"Returns only the elements of `Set1` that are not also elements of `Set2`.","ref":"sets.html#subtract/2"},{"type":"function","title":"sets.to_list/1","doc":"Returns the elements of `Set` as a list. The order of the returned elements is\nundefined.","ref":"sets.html#to_list/1"},{"type":"function","title":"sets.union/1","doc":"Returns the merged (union) set of the list of sets.","ref":"sets.html#union/1"},{"type":"function","title":"sets.union/2","doc":"Returns the merged (union) set of `Set1` and `Set2`.","ref":"sets.html#union/2"},{"type":"module","title":"sofs","doc":"Functions for manipulating sets of sets.\n\nThis module provides operations on finite sets and relations represented as\nsets. Intuitively, a set is a collection of elements; every element belongs to\nthe set, and the set contains every element.\n\nThe data representing `sofs` as used by this module is to be regarded as opaque\nby other modules. In abstract terms, the representation is a composite type of\nexisting Erlang terms. See note on\n[data types](`e:system:data_types.md#no_user_types`). Any code assuming\nknowledge of the format is running on thin ice.\n\nGiven a set A and a sentence S(x), where x is a free variable, a new set B whose\nelements are exactly those elements of A for which S(x) holds can be formed,\nthis is denoted B = \\{x in A : S(x)\\}. Sentences are expressed using the logical\noperators \"for some\" (or \"there exists\"), \"for all\", \"and\", \"or\", \"not\". If the\nexistence of a set containing all the specified elements is known (as is always\nthe case in this module), this is denoted B = \\{x : S(x)\\}.\n\n- The _unordered set_ containing the elements a, b, and c is denoted\n  \\{a, b, c\\}. This notation is not to be confused with tuples.\n\n  The _ordered pair_ of a and b, with first _coordinate_ a and second coordinate\n  b, is denoted (a, b). An ordered pair is an _ordered set_ of two elements. In\n  this module, ordered sets can contain one, two, or more elements, and\n  parentheses are used to enclose the elements.\n\n  Unordered sets and ordered sets are orthogonal, again in this module; there is\n  no unordered set equal to any ordered set.\n\n- The _empty set_ contains no elements.\n\n  Set A is _equal_{: #equal } to set B if they contain the same elements, which\n  is denoted A = B. Two ordered sets are equal if they contain the same number\n  of elements and have equal elements at each coordinate.\n\n  Set B is a _subset_{: #subset } of set A if A contains all elements that B\n  contains.\n\n  The _union_{: #union } of two sets A and B is the smallest set that contains\n  all elements of A and all elements of B.\n\n  The _intersection_{: #intersection } of two sets A and B is the set that\n  contains all elements of A that belong to B.\n\n  Two sets are _disjoint_{: #disjoint } if their intersection is the empty set.\n\n  The _difference_{: #difference } of two sets A and B is the set that contains\n  all elements of A that do not belong to B.\n\n  The _symmetric difference_{: #symmetric_difference } of two sets is the set\n  that contains those element that belong to either of the two sets, but not\n  both.\n\n  The _union_{: #union_n } of a collection of sets is the smallest set that\n  contains all the elements that belong to at least one set of the collection.\n\n  The _intersection_{: #intersection_n } of a non-empty collection of sets is\n  the set that contains all elements that belong to every set of the collection.\n\n- The _Cartesian product_{: #Cartesian_product } of two sets X and Y, denoted\n  X × Y, is the set \\{a : a = (x, y) for some x in X and for some y in Y\\}.\n\n  A _relation_{: #relation } is a subset of X × Y. Let R be a relation. The fact\n  that (x, y) belongs to R is written as x R y. As relations are sets, the\n  definitions of the last item (subset, union, and so on) apply to relations as\n  well.\n\n  The _domain_{: #domain } of R is the set \\{x : x R y for some y in Y\\}.\n\n  The _range_{: #range } of R is the set \\{y : x R y for some x in X\\}.\n\n  The _converse_{: #converse } of R is the set \\{a : a = (y, x) for some\n  (x, y) in R\\}.\n\n  If A is a subset of X, the _image_{: #image } of A under R is the set \\{y :\n  x R y for some x in A\\}. If B is a subset of Y, the _inverse image_{:\n  #inverse_image } of B is the set \\{x : x R y for some y in B\\}.\n\n  If R is a relation from X to Y, and S is a relation from Y to Z, the _relative\n  product_{: #relative_product } of R and S is the relation T from X to Z\n  defined so that x T z if and only if there exists an element y in Y such that\n  x R y and y S z.\n\n  The _restriction_{: #restriction } of R to A is the set S defined so that\n  x S y if and only if there exists an element x in A such that x R y.\n\n  If S is a restriction of R to A, then R is an _extension_{: #extension } of S\n  to X.\n\n  If X = Y, then R is called a relation _in_ X.\n\n  The _field_{: #field } of a relation R in X is the union of the domain of R\n  and the range of R.\n\n  If R is a relation in X, and if S is defined so that x S y if x R y and not\n  x = y, then S is the _strict_{: #strict_relation } relation corresponding to\n  R. Conversely, if S is a relation in X, and if R is defined so that x R y if\n  x S y or x = y, then R is the _weak_{: #weak_relation } relation corresponding\n  to S.\n\n  A relation R in X is _reflexive_ if x R x for every element x of X, it is\n  _symmetric_ if x R y implies that y R x, and it is _transitive_ if x R y and\n  y R z imply that x R z.\n\n- A _function_{: #function } F is a relation, a subset of X × Y, such that the\n  domain of F is equal to X and such that for every x in X there is a unique\n  element y in Y with (x, y) in F. The latter condition can be formulated as\n  follows: if x F y and x F z, then y = z. In this module, it is not required\n  that the domain of F is equal to X for a relation to be considered a function.\n\n  Instead of writing (x, y) in F or x F y, we write F(x) = y when F is a\n  function, and say that F maps x onto y, or that the value of F at x is y.\n\n  As functions are relations, the definitions of the last item (domain, range,\n  and so on) apply to functions as well.\n\n  If the converse of a function F is a function F', then F' is called the\n  _inverse_{: #inverse } of F.\n\n  The relative product of two functions F1 and F2 is called the _composite_{:\n  #composite } of F1 and F2 if the range of F1 is a subset of the domain of F2.\n\n- Sometimes, when the range of a function is more important than the function\n  itself, the function is called a _family_.\n\n  The domain of a family is called the _index set_, and the range is called the\n  _indexed set_.\n\n  If x is a family from I to X, then x\\[i] denotes the value of the function at\n  index i. The notation \"a family in X\" is used for such a family.\n\n  When the indexed set is a set of subsets of a set X, we call x a _family of\n  subsets_{: #family } of X.\n\n  If x is a family of subsets of X, the union of the range of x is called the\n  _union of the family_ x.\n\n  If x is non-empty (the index set is non-empty), the _intersection of the\n  family_ x is the intersection of the range of x.\n\n  In this module, the only families that are considered are families of subsets\n  of some set X; in the following, the word \"family\" is used for such families\n  of subsets.\n\n- A _partition_{: #partition } of a set X is a collection S of non-empty subsets\n  of X whose union is X and whose elements are pairwise disjoint.\n\n  A relation in a set is an _equivalence relation_ if it is reflexive,\n  symmetric, and transitive.\n\n  If R is an equivalence relation in X, and x is an element of X, the\n  _equivalence class_{: #equivalence_class } of x with respect to R is the set\n  of all those elements y of X for which x R y holds. The equivalence classes\n  constitute a partitioning of X. Conversely, if C is a partition of X, the\n  relation that holds for any two elements of X if they belong to the same\n  equivalence class, is an equivalence relation induced by the partition C.\n\n  If R is an equivalence relation in X, the _canonical map_{: #canonical_map }\n  is the function that maps every element of X onto its equivalence class.\n\n- [](){: #binary_relation } Relations as defined above (as sets of ordered\n  pairs) are from now on referred to as _binary relations_.\n\n  We call a set of ordered sets (x\\[1], ..., x\\[n]) an _(n-ary) relation_{:\n  #n_ary_relation }, and say that the relation is a subset of the [](){:\n  #Cartesian_product_tuple } Cartesian product X\\[1] × ... × X\\[n], where x\\[i]\n  is an element of X\\[i], 1 <= i <= n.\n\n  The _projection_{: #projection } of an n-ary relation R onto coordinate i is\n  the set \\{x\\[i] : (x\\[1], ..., x\\[i], ..., x\\[n]) in R for some\n  x\\[j] in X\\[j], 1 <= j <= n and not i = j\\}. The projections of a binary\n  relation R onto the first and second coordinates are the domain and the range\n  of R, respectively.\n\n  The relative product of binary relations can be generalized to n-ary relations\n  as follows. Let TR be an ordered set (R\\[1], ..., R\\[n]) of binary relations\n  from X to Y\\[i] and S a binary relation from (Y\\[1] × ... × Y\\[n]) to Z. The\n  _relative product_{: #tuple_relative_product } of TR and S is the binary\n  relation T from X to Z defined so that x T z if and only if there exists an\n  element y\\[i] in Y\\[i] for each 1 <= i <= n such that x R\\[i] y\\[i] and\n  (y\\[1], ..., y\\[n]) S z. Now let TR be a an ordered set (R\\[1], ..., R\\[n]) of\n  binary relations from X\\[i] to Y\\[i] and S a subset of X\\[1] × ... × X\\[n].\n  The _multiple relative product_{: #multiple_relative_product } of TR and S is\n  defined to be the set \\{z : z = ((x\\[1], ..., x\\[n]), (y\\[1],...,y\\[n])) for\n  some (x\\[1], ..., x\\[n]) in S and for some (x\\[i], y\\[i]) in R\\[i],\n  1 <= i <= n\\}.\n\n  The _natural join_{: #natural_join } of an n-ary relation R and an m-ary\n  relation S on coordinate i and j is defined to be the set \\{z : z =\n  (x\\[1], ..., x\\[n],  y\\[1], ..., y\\[j-1], y\\[j+1], ..., y\\[m]) for some\n  (x\\[1], ..., x\\[n]) in R and for some (y\\[1], ..., y\\[m]) in S such that\n  x\\[i] = y\\[j]\\}.\n\n- [](){: #sets_definition } The sets recognized by this module are represented\n  by elements of the relation Sets, which is defined as the smallest set such\n  that:\n\n  - For every atom T, except '\\_', and for every term X, (T, X) belongs to Sets\n    (_atomic sets_).\n  - (\\['\\_'], []) belongs to Sets (the _untyped empty set_).\n  - For every tuple T = \\{T\\[1], ..., T\\[n]\\} and for every tuple X =\n    \\{X\\[1], ..., X\\[n]\\}, if (T\\[i], X\\[i]) belongs to Sets for every\n    1 <= i <= n, then (T, X) belongs to Sets (_ordered sets_).\n  - For every term T, if X is the empty list or a non-empty sorted list\n    \\[X[1], ..., X\\[n]] without duplicates such that (T, X\\[i]) belongs to Sets\n    for every 1 <= i <= n, then (\\[T], X) belongs to Sets (_typed unordered\n    sets_).\n\n  An _external set_{: #external_set } is an element of the range of Sets.\n\n  A _type_{: #type } is an element of the domain of Sets.\n\n  If S is an element (T, X) of Sets, then T is a _valid type_{: #valid_type } of\n  X, T is the type of S, and X is the external set of S. `from_term/2` creates a\n  set from a type and an Erlang term turned into an external set.\n\n  The sets represented by Sets are the elements of the range of function Set\n  from Sets to Erlang terms and sets of Erlang terms:\n\n  - Set(T,Term) = Term, where T is an atom\n  - Set(\\{T\\[1], ..., T\\[n]\\}, \\{X\\[1], ...,  X\\[n]\\}) =\n    (Set(T\\[1], X\\[1]), ...,  Set(T\\[n], X\\[n]))\n  - Set(\\[T], \\[X[1], ..., X\\[n]]) = \\{Set(T, X\\[1]), ..., Set(T, X\\[n])\\}\n  - Set(\\[T], []) = \\{\\}\n\n  When there is no risk of confusion, elements of Sets are identified with the\n  sets they represent. For example, if U is the result of calling `union/2` with\n  S1 and S2 as arguments, then U is said to be the union of S1 and S2. A more\n  precise formulation is that Set(U) is the union of Set(S1) and Set(S2).\n\nThe types are used to implement the various conditions that sets must fulfill.\nAs an example, consider the relative product of two sets R and S, and recall\nthat the relative product of R and S is defined if R is a binary relation to Y\nand S is a binary relation from Y. The function that implements the relative\nproduct, `relative_product/2`, checks that the arguments represent binary\nrelations by matching \\[\\{A,B\\}] against the type of the first argument (Arg1\nsay), and \\[\\{C,D\\}] against the type of the second argument (Arg2 say). The\nfact that \\[\\{A,B\\}] matches the type of Arg1 is to be interpreted as Arg1\nrepresenting a binary relation from X to Y, where X is defined as all sets\nSet(x) for some element x in Sets the type of which is A, and similarly for Y.\nIn the same way Arg2 is interpreted as representing a binary relation from W to\nZ. Finally it is checked that B matches C, which is sufficient to ensure that W\nis equal to Y. The untyped empty set is handled separately: its type, \\['\\_'],\nmatches the type of any unordered set.\n\nA few functions of this module (`drestriction/3`, `family_projection/2`,\n`partition/2`, `partition_family/2`, `projection/2`, `restriction/3`,\n`substitution/2`) accept an Erlang function as a means to modify each element of\na given unordered set. [](){: #set_fun } Such a function, called SetFun in the\nfollowing, can be specified as a functional object (fun), a tuple\n`{external, Fun}`, or an integer:\n\n- If SetFun is specified as a fun, the fun is applied to each element of the\n  given set and the return value is assumed to be a set.\n- If SetFun is specified as a tuple `{external, Fun}`, Fun is applied to the\n  external set of each element of the given set and the return value is assumed\n  to be an external set. Selecting the elements of an unordered set as external\n  sets and assembling a new unordered set from a list of external sets is in the\n  present implementation more efficient than modifying each element as a set.\n  However, this optimization can only be used when the elements of the unordered\n  set are atomic or ordered sets. It must also be the case that the type of the\n  elements matches some clause of Fun (the type of the created set is the result\n  of applying Fun to the type of the given set), and that Fun does nothing but\n  selecting, duplicating, or rearranging parts of the elements.\n- Specifying a SetFun as an integer I is equivalent to specifying\n  `{external, fun(X) -> element(I, X) end}`, but is to be preferred, as it makes\n  it possible to handle this case even more efficiently.\n\nExamples of SetFuns:\n\n```erlang\nfun sofs:union/1\nfun(S) -> sofs:partition(1, S) end\n{external, fun(A) -> A end}\n{external, fun({A,_,C}) -> {C,A} end}\n{external, fun({_,{_,C}}) -> C end}\n{external, fun({_,{_,{_,E}=C}}) -> {E,{E,C}} end}\n2\n```\n\nThe order in which a SetFun is applied to the elements of an unordered set is\nnot specified, and can change in future versions of this module.\n\nThe execution time of the functions of this module is dominated by the time it\ntakes to sort lists. When no sorting is needed, the execution time is in the\nworst case proportional to the sum of the sizes of the input arguments and the\nreturned value. A few functions execute in constant time: `from_external/2`,\n`is_empty_set/1`, `is_set/1`, `is_sofs_set/1`, `to_external/1` `type/1`.\n\nThe functions of this module exit the process with a `badarg`, `bad_function`,\nor `type_mismatch` message when given badly formed arguments or sets the types\nof which are not compatible.\n\nWhen comparing external sets, operator `==/2` is used.","ref":"sofs.html"},{"type":"module","title":"See Also - sofs","doc":"`m:dict`, `m:digraph`, `m:orddict`, `m:ordsets`, `m:sets`","ref":"sofs.html#module-see-also"},{"type":"type","title":"sofs.a_function/0","doc":"A [function](`m:sofs#function`).","ref":"sofs.html#t:a_function/0"},{"type":"function","title":"sofs.a_function/1","doc":"","ref":"sofs.html#a_function/1"},{"type":"function","title":"sofs.a_function/2","doc":"Creates a [function](`m:sofs#function`).\n\n[`a_function(F, T)`](`a_function/2`) is equivalent to\n[`from_term(F, T)`](`from_term/2`) if the result is a function.","ref":"sofs.html#a_function/2"},{"type":"opaque","title":"sofs.a_set/0","doc":"An [unordered set](`m:sofs#sets_definition`).","ref":"sofs.html#t:a_set/0"},{"type":"type","title":"sofs.anyset/0","doc":"Any kind of set (also included are the atomic sets).","ref":"sofs.html#t:anyset/0"},{"type":"type","title":"sofs.binary_relation/0","doc":"A [binary relation](`m:sofs#binary_relation`).","ref":"sofs.html#t:binary_relation/0"},{"type":"function","title":"sofs.canonical_relation/1","doc":"Returns the binary relation containing the elements (E, Set) such that Set\nbelongs to `SetOfSets` and E belongs to Set.\n\nIf `SetOfSets` is a [partition](`m:sofs#partition`) of a set X and R is the\nequivalence relation in X induced by `SetOfSets`, then the returned relation is the\n[canonical map](`m:sofs#canonical_map`) from X onto the equivalence classes with\nrespect to R.\n\n```erlang\n1> Ss = sofs:from_term([[a,b],[b,c]]),\nCR = sofs:canonical_relation(Ss),\nsofs:to_external(CR).\n[{a,[a,b]},{b,[a,b]},{b,[b,c]},{c,[b,c]}]\n```","ref":"sofs.html#canonical_relation/1"},{"type":"function","title":"sofs.composite/2","doc":"Returns the [composite](`m:sofs#composite`) of the functions `Function1` and\n`Function2`.\n\n```erlang\n1> F1 = sofs:a_function([{a,1},{b,2},{c,2}]),\nF2 = sofs:a_function([{1,x},{2,y},{3,z}]),\nF = sofs:composite(F1, F2),\nsofs:to_external(F).\n[{a,x},{b,y},{c,y}]\n```","ref":"sofs.html#composite/2"},{"type":"function","title":"sofs.constant_function/2","doc":"Creates the [function](`m:sofs#function`) that maps each element of set `Set`\nonto `AnySet`.\n\n```erlang\n1> S = sofs:set([a,b]),\nE = sofs:from_term(1),\nR = sofs:constant_function(S, E),\nsofs:to_external(R).\n[{a,1},{b,1}]\n```","ref":"sofs.html#constant_function/2"},{"type":"function","title":"sofs.converse/1","doc":"Returns the [converse](`m:sofs#converse`) of the binary relation `BinRel1`.\n\n```erlang\n1> R1 = sofs:relation([{1,a},{2,b},{3,a}]),\nR2 = sofs:converse(R1),\nsofs:to_external(R2).\n[{a,1},{a,3},{b,2}]\n```","ref":"sofs.html#converse/1"},{"type":"function","title":"sofs.difference/2","doc":"Returns the [difference](`m:sofs#difference`) of the sets `Set1` and `Set2`.","ref":"sofs.html#difference/2"},{"type":"function","title":"sofs.digraph_to_family/1","doc":"","ref":"sofs.html#digraph_to_family/1"},{"type":"function","title":"sofs.digraph_to_family/2","doc":"Creates a [family](`m:sofs#family`) from the directed graph `Graph`. Each vertex\na of `Graph` is represented by a pair (a, \\{b\\[1], ..., b\\[n]\\}), where the\nb\\[i]:s are the out-neighbors of a. It is assumed that `Type` is\na [valid type](`m:sofs#valid_type`) of the external set of the family.\n\nIf G is a directed graph, it holds that the vertices and edges of G are the same\nas the vertices and edges of\n[`family_to_digraph(digraph_to_family(G))`](`family_to_digraph/1`).","ref":"sofs.html#digraph_to_family/2"},{"type":"function","title":"sofs.domain/1","doc":"Returns the [domain](`m:sofs#domain`) of the binary relation `BinRel`.\n\n```erlang\n1> R = sofs:relation([{1,a},{1,b},{2,b},{2,c}]),\nS = sofs:domain(R),\nsofs:to_external(S).\n[1,2]\n```","ref":"sofs.html#domain/1"},{"type":"function","title":"sofs.drestriction/2","doc":"Returns the difference between the binary relation `BinRel1` and the\n[restriction](`m:sofs#restriction`) of `BinRel1` to `Set`.\n\n```erlang\n1> R1 = sofs:relation([{1,a},{2,b},{3,c}]),\nS = sofs:set([2,4,6]),\nR2 = sofs:drestriction(R1, S),\nsofs:to_external(R2).\n[{1,a},{3,c}]\n```\n\n[`drestriction(R, S)`](`drestriction/2`) is equivalent to\n[`difference(R, restriction(R, S))`](`difference/2`).","ref":"sofs.html#drestriction/2"},{"type":"function","title":"sofs.drestriction/3","doc":"Returns a subset of `Set1` containing those elements that do not give an element\nin `Set2` as the result of applying `SetFun`.\n\n```erlang\n1> SetFun = {external, fun({_A,B,C}) -> {B,C} end},\nR1 = sofs:relation([{a,aa,1},{b,bb,2},{c,cc,3}]),\nR2 = sofs:relation([{bb,2},{cc,3},{dd,4}]),\nR3 = sofs:drestriction(SetFun, R1, R2),\nsofs:to_external(R3).\n[{a,aa,1}]\n```\n\n[`drestriction(F, S1, S2)`](`drestriction/3`) is equivalent to\n[`difference(S1, restriction(F, S1, S2))`](`difference/2`).","ref":"sofs.html#drestriction/3"},{"type":"function","title":"sofs.empty_set/0","doc":"Returns the [untyped empty set](`m:sofs#sets_definition`). `empty_set/0` is\nequivalent to [`from_term([], ['_'])`](`from_term/2`).","ref":"sofs.html#empty_set/0"},{"type":"function","title":"sofs.extension/3","doc":"Returns the [extension](`m:sofs#extension`) of `BinRel1` such that for each\nelement E in `Set` that does not belong to the [domain](`m:sofs#domain`) of\n`BinRel1`, `BinRel2` contains the pair (E, `AnySet`).\n\n```erlang\n1> S = sofs:set([b,c]),\nA = sofs:empty_set(),\nR = sofs:family([{a,[1,2]},{b,[3]}]),\nX = sofs:extension(R, S, A),\nsofs:to_external(X).\n[{a,[1,2]},{b,[3]},{c,[]}]\n```","ref":"sofs.html#extension/3"},{"type":"type","title":"sofs.external_set/0","doc":"An [external set](`m:sofs#external_set`).","ref":"sofs.html#t:external_set/0"},{"type":"type","title":"sofs.family/0","doc":"A [family](`m:sofs#family`) (of subsets).","ref":"sofs.html#t:family/0"},{"type":"function","title":"sofs.family/1","doc":"","ref":"sofs.html#family/1"},{"type":"function","title":"sofs.family/2","doc":"Creates a [family of subsets](`m:sofs#family`). [`family(F, T)`](`family/2`) is\nequivalent to [`from_term(F, T)`](`from_term/2`) if the result is a family.","ref":"sofs.html#family/2"},{"type":"function","title":"sofs.family_difference/2","doc":"If `Family1` and `Family2` are [families](`m:sofs#family`), then `Family3` is\nthe family such that the index set is equal to the index set of `Family1`, and\n`Family3`\\[i] is the difference between `Family1`\\[i] and `Family2`\\[i] if\n`Family2` maps i, otherwise `Family1[i]`.\n\n```erlang\n1> F1 = sofs:family([{a,[1,2]},{b,[3,4]}]),\nF2 = sofs:family([{b,[4,5]},{c,[6,7]}]),\nF3 = sofs:family_difference(F1, F2),\nsofs:to_external(F3).\n[{a,[1,2]},{b,[3]}]\n```","ref":"sofs.html#family_difference/2"},{"type":"function","title":"sofs.family_domain/1","doc":"If `Family1` is a [family](`m:sofs#family`) and `Family1`\\[i] is a binary\nrelation for every i in the index set of `Family1`, then `Family2` is the family\nwith the same index set as `Family1` such that `Family2`\\[i] is the\n[domain](`m:sofs#domain`) of `Family1[i]`.\n\n```erlang\n1> FR = sofs:from_term([{a,[{1,a},{2,b},{3,c}]},{b,[]},{c,[{4,d},{5,e}]}]),\nF = sofs:family_domain(FR),\nsofs:to_external(F).\n[{a,[1,2,3]},{b,[]},{c,[4,5]}]\n```","ref":"sofs.html#family_domain/1"},{"type":"function","title":"sofs.family_field/1","doc":"If `Family1` is a [family](`m:sofs#family`) and `Family1`\\[i] is a binary\nrelation for every i in the index set of `Family1`, then `Family2` is the family\nwith the same index set as `Family1` such that `Family2`\\[i] is the\n[field](`m:sofs#field`) of `Family1`\\[i].\n\n```erlang\n1> FR = sofs:from_term([{a,[{1,a},{2,b},{3,c}]},{b,[]},{c,[{4,d},{5,e}]}]),\nF = sofs:family_field(FR),\nsofs:to_external(F).\n[{a,[1,2,3,a,b,c]},{b,[]},{c,[4,5,d,e]}]\n```\n\n[`family_field(Family1)`](`family_field/1`) is equivalent to\n[`family_union(family_domain(Family1), family_range(Family1))`](`family_union/2`).","ref":"sofs.html#family_field/1"},{"type":"function","title":"sofs.family_intersection/1","doc":"If `Family1` is a [family](`m:sofs#family`) and `Family1`\\[i] is a set of sets\nfor every i in the index set of `Family1`, then `Family2` is the family with the\nsame index set as `Family1` such that `Family2`\\[i] is the\n[intersection](`m:sofs#intersection_n`) of `Family1`\\[i].\n\nIf `Family1`\\[i] is an empty set for some i, the process exits with a `badarg`\nmessage.\n\n```erlang\n1> F1 = sofs:from_term([{a,[[1,2,3],[2,3,4]]},{b,[[x,y,z],[x,y]]}]),\nF2 = sofs:family_intersection(F1),\nsofs:to_external(F2).\n[{a,[2,3]},{b,[x,y]}]\n```","ref":"sofs.html#family_intersection/1"},{"type":"function","title":"sofs.family_intersection/2","doc":"If `Family1` and `Family2` are [families](`m:sofs#family`), then `Family3` is\nthe family such that the index set is the intersection of `Family1`:s and\n`Family2`:s index sets, and `Family3`\\[i] is the intersection of `Family1`\\[i]\nand `Family2`\\[i].\n\n```erlang\n1> F1 = sofs:family([{a,[1,2]},{b,[3,4]},{c,[5,6]}]),\nF2 = sofs:family([{b,[4,5]},{c,[7,8]},{d,[9,10]}]),\nF3 = sofs:family_intersection(F1, F2),\nsofs:to_external(F3).\n[{b,[4]},{c,[]}]\n```","ref":"sofs.html#family_intersection/2"},{"type":"function","title":"sofs.family_projection/2","doc":"If `Family1` is a [family](`m:sofs#family`), then `Family2` is the family with\nthe same index set as `Family1` such that `Family2`\\[i] is the result of calling\n`SetFun` with `Family1`\\[i] as argument.\n\n```erlang\n1> F1 = sofs:from_term([{a,[[1,2],[2,3]]},{b,[[]]}]),\nF2 = sofs:family_projection(fun sofs:union/1, F1),\nsofs:to_external(F2).\n[{a,[1,2,3]},{b,[]}]\n```","ref":"sofs.html#family_projection/2"},{"type":"function","title":"sofs.family_range/1","doc":"If `Family1` is a [family](`m:sofs#family`) and `Family1`\\[i] is a binary\nrelation for every i in the index set of `Family1`, then `Family2` is the family\nwith the same index set as `Family1` such that `Family2`\\[i] is the\n[range](`m:sofs#range`) of `Family1`\\[i].\n\n```erlang\n1> FR = sofs:from_term([{a,[{1,a},{2,b},{3,c}]},{b,[]},{c,[{4,d},{5,e}]}]),\nF = sofs:family_range(FR),\nsofs:to_external(F).\n[{a,[a,b,c]},{b,[]},{c,[d,e]}]\n```","ref":"sofs.html#family_range/1"},{"type":"function","title":"sofs.family_specification/2","doc":"If `Family1` is a [family](`m:sofs#family`), then `Family2` is the\n[restriction](`m:sofs#restriction`) of `Family1` to those elements i of the\nindex set for which `Fun` applied to `Family1`\\[i] returns `true`. If `Fun` is a\ntuple `{external, Fun2}`, then `Fun2` is applied to the\n[external set](`m:sofs#external_set`) of `Family1`\\[i], otherwise `Fun` is\napplied to `Family1`\\[i].\n\n```erlang\n1> F1 = sofs:family([{a,[1,2,3]},{b,[1,2]},{c,[1]}]),\nSpecFun = fun(S) -> sofs:no_elements(S) =:= 2 end,\nF2 = sofs:family_specification(SpecFun, F1),\nsofs:to_external(F2).\n[{b,[1,2]}]\n```","ref":"sofs.html#family_specification/2"},{"type":"function","title":"sofs.family_to_digraph/1","doc":"","ref":"sofs.html#family_to_digraph/1"},{"type":"function","title":"sofs.family_to_digraph/2","doc":"Creates a directed graph from [family](`m:sofs#family`) `Family`. For each pair\n(a, \\{b\\[1], ..., b\\[n]\\}) of `Family`, vertex a and the edges (a, b\\[i]) for\n1 <= i <= n are added to a newly created directed graph.\n\n`GraphType` is passed on to `digraph:new/1`.\n\nIt F is a family, it holds that F is a subset of\n[`digraph_to_family(family_to_digraph(F), type(F))`](`digraph_to_family/2`).\nEquality holds if [`union_of_family(F)`](`union_of_family/1`) is a subset of\n[`domain(F)`](`domain/1`).\n\nCreating a cycle in an acyclic graph exits the process with a `cyclic` message.","ref":"sofs.html#family_to_digraph/2"},{"type":"function","title":"sofs.family_to_relation/1","doc":"If `Family` is a [family](`m:sofs#family`), then `BinRel` is the binary relation\ncontaining all pairs (i, x) such that i belongs to the index set of `Family` and\nx belongs to `Family`\\[i].\n\n```erlang\n1> F = sofs:family([{a,[]}, {b,[1]}, {c,[2,3]}]),\nR = sofs:family_to_relation(F),\nsofs:to_external(R).\n[{b,1},{c,2},{c,3}]\n```","ref":"sofs.html#family_to_relation/1"},{"type":"function","title":"sofs.family_union/1","doc":"If `Family1` is a [family](`m:sofs#family`) and `Family1`\\[i] is a set of sets\nfor each i in the index set of `Family1`, then `Family2` is the family with the\nsame index set as `Family1` such that `Family2`\\[i] is the\n[union](`m:sofs#union_n`) of `Family1`\\[i].\n\n```erlang\n1> F1 = sofs:from_term([{a,[[1,2],[2,3]]},{b,[[]]}]),\nF2 = sofs:family_union(F1),\nsofs:to_external(F2).\n[{a,[1,2,3]},{b,[]}]\n```\n\n[`family_union(F)`](`family_union/1`) is equivalent to\n[`family_projection(fun sofs:union/1, F)`](`family_projection/2`).","ref":"sofs.html#family_union/1"},{"type":"function","title":"sofs.family_union/2","doc":"If `Family1` and `Family2` are [families](`m:sofs#family`), then `Family3` is\nthe family such that the index set is the union of `Family1`:s and `Family2`:s\nindex sets, and `Family3`\\[i] is the union of `Family1`\\[i] and `Family2`\\[i] if\nboth map i, otherwise `Family1`\\[i] or `Family2`\\[i].\n\n```erlang\n1> F1 = sofs:family([{a,[1,2]},{b,[3,4]},{c,[5,6]}]),\nF2 = sofs:family([{b,[4,5]},{c,[7,8]},{d,[9,10]}]),\nF3 = sofs:family_union(F1, F2),\nsofs:to_external(F3).\n[{a,[1,2]},{b,[3,4,5]},{c,[5,6,7,8]},{d,[9,10]}]\n```","ref":"sofs.html#family_union/2"},{"type":"function","title":"sofs.field/1","doc":"Returns the [field](`m:sofs#field`) of the binary relation `BinRel`.\n\n```erlang\n1> R = sofs:relation([{1,a},{1,b},{2,b},{2,c}]),\nS = sofs:field(R),\nsofs:to_external(S).\n[1,2,a,b,c]\n```\n\n[`field(R)`](`field/1`) is equivalent to\n[`union(domain(R), range(R))`](`union/2`).","ref":"sofs.html#field/1"},{"type":"function","title":"sofs.from_external/2","doc":"Creates a set from the [external set](`m:sofs#external_set`) `ExternalSet` and\nthe [type](`m:sofs#type`) `Type`. It is assumed that `Type` is a\n[valid type](`m:sofs#valid_type`) of `ExternalSet`.","ref":"sofs.html#from_external/2"},{"type":"function","title":"sofs.from_sets/1","doc":"Returns the [unordered set](`m:sofs#sets_definition`) containing the sets of\nlist `ListOfSets`.\n\n```erlang\n1> S1 = sofs:relation([{a,1},{b,2}]),\nS2 = sofs:relation([{x,3},{y,4}]),\nS = sofs:from_sets([S1,S2]),\nsofs:to_external(S).\n[[{a,1},{b,2}],[{x,3},{y,4}]]\n```\n\nReturns the [ordered set](`m:sofs#sets_definition`) containing the sets of the\nnon-empty tuple `TupleOfSets`.","ref":"sofs.html#from_sets/1"},{"type":"function","title":"sofs.from_term/1","doc":"","ref":"sofs.html#from_term/1"},{"type":"function","title":"sofs.from_term/2","doc":"Creates an element of [Sets](`m:sofs#sets_definition`) by\ntraversing term `Term`, sorting lists, removing duplicates, and deriving or\nverifying a [valid type](`m:sofs#valid_type`) for the so obtained external set.\n\nAn explicitly specified [type](`m:sofs#type`) `Type` can be used to limit the\ndepth of the traversal; an atomic type stops the traversal, as shown by the\nfollowing example where `\"foo\"` and `{\"foo\"}` are left unmodified:\n\n```erlang\n1> S = sofs:from_term([{{\"foo\"},[1,1]},{\"foo\",[2,2]}],\n                      [{atom,[atom]}]),\n   sofs:to_external(S).\n[{{\"foo\"},[1]},{\"foo\",[2]}]\n```\n\n`from_term` can be used for creating atomic or ordered sets. The only purpose of\nsuch a set is that of later building unordered sets, as all functions in this\nmodule that _do_ anything operate on unordered sets. Creating unordered sets\nfrom a collection of ordered sets can be the way to go if the ordered sets are\nbig and one does not want to waste heap by rebuilding the elements of the\nunordered set. The following example shows that a set can be built \"layer by\nlayer\":\n\n```erlang\n1> A = sofs:from_term(a),\nS = sofs:set([1,2,3]),\nP1 = sofs:from_sets({A,S}),\nP2 = sofs:from_term({b,[6,5,4]}),\nSs = sofs:from_sets([P1,P2]),\nsofs:to_external(Ss).\n[{a,[1,2,3]},{b,[4,5,6]}]\n```\n\nOther functions that create sets are `from_external/2` and `from_sets/1`.\nSpecial cases of [`from_term/2`](`from_term/2`) are\n[`a_function/1,2`](`a_function/1`), `empty_set/0`, [`family/1,2`](`family/1`),\n[`relation/1,2`](`relation/1`), and [`set/1,2`](`set/1`).","ref":"sofs.html#from_term/2"},{"type":"function","title":"sofs.image/2","doc":"Returns the [image](`m:sofs#image`) of set `Set1` under the binary relation\n`BinRel`.\n\n```erlang\n1> R = sofs:relation([{1,a},{2,b},{2,c},{3,d}]),\nS1 = sofs:set([1,2]),\nS2 = sofs:image(R, S1),\nsofs:to_external(S2).\n[a,b,c]\n```","ref":"sofs.html#image/2"},{"type":"function","title":"sofs.intersection/1","doc":"Returns the [intersection](`m:sofs#intersection_n`) of the set of sets\n`SetOfSets`.\n\nIntersecting an empty set of sets exits the process with a `badarg` message.","ref":"sofs.html#intersection/1"},{"type":"function","title":"sofs.intersection/2","doc":"Returns the [intersection](`m:sofs#intersection`) of `Set1` and `Set2`.","ref":"sofs.html#intersection/2"},{"type":"function","title":"sofs.intersection_of_family/1","doc":"Returns the intersection of [family](`m:sofs#family`) `Family`.\n\nIntersecting an empty family exits the process with a `badarg` message.\n\n```erlang\n1> F = sofs:family([{a,[0,2,4]},{b,[0,1,2]},{c,[2,3]}]),\nS = sofs:intersection_of_family(F),\nsofs:to_external(S).\n[2]\n```","ref":"sofs.html#intersection_of_family/1"},{"type":"function","title":"sofs.inverse/1","doc":"Returns the [inverse](`m:sofs#inverse`) of function `Function1`.\n\n```erlang\n1> R1 = sofs:relation([{1,a},{2,b},{3,c}]),\nR2 = sofs:inverse(R1),\nsofs:to_external(R2).\n[{a,1},{b,2},{c,3}]\n```","ref":"sofs.html#inverse/1"},{"type":"function","title":"sofs.inverse_image/2","doc":"Returns the [inverse image](`m:sofs#inverse_image`) of `Set1` under the binary\nrelation `BinRel`.\n\n```erlang\n1> R = sofs:relation([{1,a},{2,b},{2,c},{3,d}]),\nS1 = sofs:set([c,d,e]),\nS2 = sofs:inverse_image(R, S1),\nsofs:to_external(S2).\n[2,3]\n```","ref":"sofs.html#inverse_image/2"},{"type":"function","title":"sofs.is_a_function/1","doc":"Returns `true` if the binary relation `BinRel` is a\n[function](`m:sofs#function`) or the untyped empty set, otherwise `false`.","ref":"sofs.html#is_a_function/1"},{"type":"function","title":"sofs.is_disjoint/2","doc":"Returns `true` if `Set1` and `Set2` are [disjoint](`m:sofs#disjoint`), otherwise\n`false`.","ref":"sofs.html#is_disjoint/2"},{"type":"function","title":"sofs.is_empty_set/1","doc":"Returns `true` if `AnySet` is an empty unordered set, otherwise `false`.","ref":"sofs.html#is_empty_set/1"},{"type":"function","title":"sofs.is_equal/2","doc":"Returns `true` if `AnySet1` and `AnySet2` are [equal](`m:sofs#equal`), otherwise\n`false`. The following example shows that `==/2` is used when comparing sets for\nequality:\n\n```erlang\n1> S1 = sofs:set([1.0]),\nS2 = sofs:set([1]),\nsofs:is_equal(S1, S2).\ntrue\n```","ref":"sofs.html#is_equal/2"},{"type":"function","title":"sofs.is_set/1","doc":"Returns `true` if `AnySet` appears to be an\n[unordered set](`m:sofs#sets_definition`), and `false` if `AnySet` is an ordered\nset or an atomic set or any other term.\n\nNote that the test is shallow and this function will return `true` for any term\nthat coincides with the representation of an unordered set. See also note on\n[data types](`e:system:data_types.md#no_user_types`).","ref":"sofs.html#is_set/1"},{"type":"function","title":"sofs.is_sofs_set/1","doc":"Returns `true` if `Term` appears to be an\n[unordered set](`m:sofs#sets_definition`), an ordered set, or an atomic set,\notherwise `false`.\n\nNote that this function will return `true` for any term that\ncoincides with the representation of a `sofs` set. See also note on\n[data types](`e:system:data_types.md#no_user_types`).","ref":"sofs.html#is_sofs_set/1"},{"type":"function","title":"sofs.is_subset/2","doc":"Returns `true` if `Set1` is a [subset](`m:sofs#subset`) of `Set2`, otherwise\n`false`.","ref":"sofs.html#is_subset/2"},{"type":"function","title":"sofs.is_type/1","doc":"Returns `true` if term `Term` is a [type](`m:sofs#type`).","ref":"sofs.html#is_type/1"},{"type":"function","title":"sofs.join/4","doc":"Returns the [natural join](`m:sofs#natural_join`) of the relations `Relation1`\nand `Relation2` on coordinates `I` and `J`.\n\n```erlang\n1> R1 = sofs:relation([{a,x,1},{b,y,2}]),\nR2 = sofs:relation([{1,f,g},{1,h,i},{2,3,4}]),\nJ = sofs:join(R1, 3, R2, 1),\nsofs:to_external(J).\n[{a,x,1,f,g},{a,x,1,h,i},{b,y,2,3,4}]\n```","ref":"sofs.html#join/4"},{"type":"function","title":"sofs.multiple_relative_product/2","doc":"If `TupleOfBinRels` is a non-empty tuple \\{R\\[1], ..., R\\[n]\\} of binary\nrelations and `BinRel1` is a binary relation, then `BinRel2` is the\n[multiple relative product](`m:sofs#multiple_relative_product`) of the ordered\nset (R\\[i], ..., R\\[n]) and `BinRel1`.\n\n```erlang\n1> Ri = sofs:relation([{a,1},{b,2},{c,3}]),\nR = sofs:relation([{a,b},{b,c},{c,a}]),\nMP = sofs:multiple_relative_product({Ri, Ri}, R),\nsofs:to_external(sofs:range(MP)).\n[{1,2},{2,3},{3,1}]\n```","ref":"sofs.html#multiple_relative_product/2"},{"type":"function","title":"sofs.no_elements/1","doc":"Returns the number of elements of the ordered or unordered set `ASet`.","ref":"sofs.html#no_elements/1"},{"type":"opaque","title":"sofs.ordset/0","doc":"An [ordered set](`m:sofs#sets_definition`).","ref":"sofs.html#t:ordset/0"},{"type":"function","title":"sofs.partition/1","doc":"Returns the [partition](`m:sofs#partition`) of the union of the set of sets\n`SetOfSets` such that two elements are considered equal if they belong to the\nsame elements of `SetOfSets`.\n\n```erlang\n1> Sets1 = sofs:from_term([[a,b,c],[d,e,f],[g,h,i]]),\nSets2 = sofs:from_term([[b,c,d],[e,f,g],[h,i,j]]),\nP = sofs:partition(sofs:union(Sets1, Sets2)),\nsofs:to_external(P).\n[[a],[b,c],[d],[e,f],[g],[h,i],[j]]\n```","ref":"sofs.html#partition/1"},{"type":"function","title":"sofs.partition/2","doc":"Returns the [partition](`m:sofs#partition`) of `Set` such that two elements are\nconsidered equal if the results of applying `SetFun` are equal.\n\n```erlang\n1> Ss = sofs:from_term([[a],[b],[c,d],[e,f]]),\nSetFun = fun(S) -> sofs:from_term(sofs:no_elements(S)) end,\nP = sofs:partition(SetFun, Ss),\nsofs:to_external(P).\n[[[a],[b]],[[c,d],[e,f]]]\n```","ref":"sofs.html#partition/2"},{"type":"function","title":"sofs.partition/3","doc":"Returns a pair of sets that, regarded as constituting a set, forms a\n[partition](`m:sofs#partition`) of `Set1`. If the result of applying `SetFun` to\nan element of `Set1` gives an element in `Set2`, the element belongs to `Set3`,\notherwise the element belongs to `Set4`.\n\n```erlang\n1> R1 = sofs:relation([{1,a},{2,b},{3,c}]),\nS = sofs:set([2,4,6]),\n{R2,R3} = sofs:partition(1, R1, S),\n{sofs:to_external(R2),sofs:to_external(R3)}.\n{[{2,b}],[{1,a},{3,c}]}\n```\n\n[`partition(F, S1, S2)`](`partition/3`) is equivalent to\n`{restriction(F, S1, S2), drestriction(F, S1, S2)}`.","ref":"sofs.html#partition/3"},{"type":"function","title":"sofs.partition_family/2","doc":"Returns [family](`m:sofs#family`) `Family` where the indexed set is a\n[partition](`m:sofs#partition`) of `Set` such that two elements are considered\nequal if the results of applying `SetFun` are the same value i. This i is the\nindex that `Family` maps onto the\n[equivalence class](`m:sofs#equivalence_class`).\n\n```erlang\n1> S = sofs:relation([{a,a,a,a},{a,a,b,b},{a,b,b,b}]),\nSetFun = {external, fun({A,_,C,_}) -> {A,C} end},\nF = sofs:partition_family(SetFun, S),\nsofs:to_external(F).\n[{{a,a},[{a,a,a,a}]},{{a,b},[{a,a,b,b},{a,b,b,b}]}]\n```","ref":"sofs.html#partition_family/2"},{"type":"function","title":"sofs.product/1","doc":"Returns the [Cartesian product](`m:sofs#Cartesian_product_tuple`) of the\nnon-empty tuple of sets `TupleOfSets`. If (x\\[1], ..., x\\[n]) is an element of\nthe n-ary relation `Relation`, then x\\[i] is drawn from element i of\n`TupleOfSets`.\n\n```erlang\n1> S1 = sofs:set([a,b]),\nS2 = sofs:set([1,2]),\nS3 = sofs:set([x,y]),\nP3 = sofs:product({S1,S2,S3}),\nsofs:to_external(P3).\n[{a,1,x},{a,1,y},{a,2,x},{a,2,y},{b,1,x},{b,1,y},{b,2,x},{b,2,y}]\n```","ref":"sofs.html#product/1"},{"type":"function","title":"sofs.product/2","doc":"Returns the [Cartesian product](`m:sofs#Cartesian_product`) of `Set1` and\n`Set2`.\n\n```erlang\n1> S1 = sofs:set([1,2]),\nS2 = sofs:set([a,b]),\nR = sofs:product(S1, S2),\nsofs:to_external(R).\n[{1,a},{1,b},{2,a},{2,b}]\n```\n\n[`product(S1, S2)`](`product/2`) is equivalent to\n[`product({S1, S2})`](`product/1`).","ref":"sofs.html#product/2"},{"type":"function","title":"sofs.projection/2","doc":"Returns the set created by substituting each element of `Set1` by the result of\napplying `SetFun` to the element.\n\nIf `SetFun` is a number i >= 1 and `Set1` is a relation, then the returned set\nis the [projection](`m:sofs#projection`) of `Set1` onto coordinate i.\n\n```erlang\n1> S1 = sofs:from_term([{1,a},{2,b},{3,a}]),\nS2 = sofs:projection(2, S1),\nsofs:to_external(S2).\n[a,b]\n```","ref":"sofs.html#projection/2"},{"type":"function","title":"sofs.range/1","doc":"Returns the [range](`m:sofs#range`) of the binary relation `BinRel`.\n\n```erlang\n1> R = sofs:relation([{1,a},{1,b},{2,b},{2,c}]),\nS = sofs:range(R),\nsofs:to_external(S).\n[a,b,c]\n```","ref":"sofs.html#range/1"},{"type":"type","title":"sofs.relation/0","doc":"An [n-ary relation](`m:sofs#n_ary_relation`).","ref":"sofs.html#t:relation/0"},{"type":"function","title":"sofs.relation/1","doc":"Equivalent to [`relation(Tuples, Type)`](`relation/2`) where `Type` is the size\nof the first tuple of `Tuples` is used if there is such a tuple.\n\nIf tuples is `[]`, then `Type` is `2`.","ref":"sofs.html#relation/1"},{"type":"function","title":"sofs.relation/2","doc":"Creates a [relation](`m:sofs#relation`). [`relation(R, T)`](`relation/2`) is\nequivalent to [`from_term(R, T)`](`from_term/2`), if T is a\n[type](`m:sofs#type`) and the result is a relation.\n\nIf `Type` is an integer N, then `[{atom, ..., atom}])`, where the tuple size is N,\nis used as type of the relation.","ref":"sofs.html#relation/2"},{"type":"function","title":"sofs.relation_to_family/1","doc":"Returns [family](`m:sofs#family`) `Family` such that the index set is equal to\nthe [domain](`m:sofs#domain`) of the binary relation `BinRel`, and `Family`\\[i]\nis the [image](`m:sofs#image`) of the set of i under `BinRel`.\n\n```erlang\n1> R = sofs:relation([{b,1},{c,2},{c,3}]),\nF = sofs:relation_to_family(R),\nsofs:to_external(F).\n[{b,[1]},{c,[2,3]}]\n```","ref":"sofs.html#relation_to_family/1"},{"type":"function","title":"sofs.relative_product1/2","doc":"Returns the [relative product](`m:sofs#relative_product`) of the\n[converse](`m:sofs#converse`) of the binary relation `BinRel1` and the binary\nrelation `BinRel2`.\n\n```erlang\n1> R1 = sofs:relation([{1,a},{1,aa},{2,b}]),\nR2 = sofs:relation([{1,u},{2,v},{3,c}]),\nR3 = sofs:relative_product1(R1, R2),\nsofs:to_external(R3).\n[{a,u},{aa,u},{b,v}]\n```\n\n[`relative_product1(R1, R2)`](`relative_product1/2`) is equivalent to\n[`relative_product(converse(R1), R2)`](`relative_product/2`).","ref":"sofs.html#relative_product1/2"},{"type":"function","title":"sofs.relative_product/1","doc":"","ref":"sofs.html#relative_product/1"},{"type":"function","title":"sofs.relative_product/2","doc":"If `ListOfBinRels` is a non-empty list \\[R[1], ..., R\\[n]] of binary relations\nand `BinRel1` is a binary relation, then `BinRel2` is the\n[relative product](`m:sofs#tuple_relative_product`) of the ordered set\n(R\\[i], ..., R\\[n]) and `BinRel1`.\n\nIf `BinRel1` is omitted, the relation of equality between the elements of the\n[Cartesian product](`m:sofs#Cartesian_product_tuple`) of the ranges of R\\[i],\nrange R\\[1] × ... × range R\\[n], is used instead (intuitively, nothing is\n\"lost\").\n\n```erlang\n1> TR = sofs:relation([{1,a},{1,aa},{2,b}]),\nR1 = sofs:relation([{1,u},{2,v},{3,c}]),\nR2 = sofs:relative_product([TR, R1]),\nsofs:to_external(R2).\n[{1,{a,u}},{1,{aa,u}},{2,{b,v}}]\n```\n\nNotice that [`relative_product([R1], R2)`](`relative_product/2`) is different\nfrom [`relative_product(R1, R2)`](`relative_product/2`); the list of one element\nis not identified with the element itself.\n\nReturns the [relative product](`m:sofs#relative_product`) of the binary\nrelations `BinRel1` and `BinRel2`.","ref":"sofs.html#relative_product/2"},{"type":"function","title":"sofs.restriction/2","doc":"Returns the [restriction](`m:sofs#restriction`) of the binary relation `BinRel1`\nto `Set`.\n\n```erlang\n1> R1 = sofs:relation([{1,a},{2,b},{3,c}]),\nS = sofs:set([1,2,4]),\nR2 = sofs:restriction(R1, S),\nsofs:to_external(R2).\n[{1,a},{2,b}]\n```","ref":"sofs.html#restriction/2"},{"type":"function","title":"sofs.restriction/3","doc":"Returns a subset of `Set1` containing those elements that gives an element in\n`Set2` as the result of applying `SetFun`.\n\n```erlang\n1> S1 = sofs:relation([{1,a},{2,b},{3,c}]),\nS2 = sofs:set([b,c,d]),\nS3 = sofs:restriction(2, S1, S2),\nsofs:to_external(S3).\n[{2,b},{3,c}]\n```","ref":"sofs.html#restriction/3"},{"type":"function","title":"sofs.set/1","doc":"","ref":"sofs.html#set/1"},{"type":"function","title":"sofs.set/2","doc":"Creates an [unordered set](`m:sofs#sets_definition`). [`set(L, T)`](`set/2`) is\nequivalent to [`from_term(L, T)`](`from_term/2`), if the result is an unordered\nset.","ref":"sofs.html#set/2"},{"type":"type","title":"sofs.set_fun/0","doc":"A [SetFun](`m:sofs#set_fun`).","ref":"sofs.html#t:set_fun/0"},{"type":"type","title":"sofs.set_of_sets/0","doc":"An [unordered set](`m:sofs#sets_definition`) of unordered sets.","ref":"sofs.html#t:set_of_sets/0"},{"type":"type","title":"sofs.spec_fun/0","doc":"","ref":"sofs.html#t:spec_fun/0"},{"type":"function","title":"sofs.specification/2","doc":"Returns the set containing every element of `Set1` for which `Fun` returns\n`true`. If `Fun` is a tuple `{external, Fun2}`, `Fun2` is applied to the\n[external set](`m:sofs#external_set`) of each element, otherwise `Fun` is\napplied to each element.\n\n```erlang\n1> R1 = sofs:relation([{a,1},{b,2}]),\nR2 = sofs:relation([{x,1},{x,2},{y,3}]),\nS1 = sofs:from_sets([R1,R2]),\nS2 = sofs:specification(fun sofs:is_a_function/1, S1),\nsofs:to_external(S2).\n[[{a,1},{b,2}]]\n```","ref":"sofs.html#specification/2"},{"type":"function","title":"sofs.strict_relation/1","doc":"Returns the [strict relation](`m:sofs#strict_relation`) corresponding to the\nbinary relation `BinRel1`.\n\n```erlang\n1> R1 = sofs:relation([{1,1},{1,2},{2,1},{2,2}]),\nR2 = sofs:strict_relation(R1),\nsofs:to_external(R2).\n[{1,2},{2,1}]\n```","ref":"sofs.html#strict_relation/1"},{"type":"function","title":"sofs.substitution/2","doc":"Returns a function, the domain of which is `Set1`. The value of an element of\nthe domain is the result of applying `SetFun` to the element.\n\n```erlang\n1> L = [{a,1},{b,2}].\n[{a,1},{b,2}]\n2> sofs:to_external(sofs:projection(1,sofs:relation(L))).\n[a,b]\n3> sofs:to_external(sofs:substitution(1,sofs:relation(L))).\n[{{a,1},a},{{b,2},b}]\n4> SetFun = {external, fun({A,_}=E) -> {E,A} end},\nsofs:to_external(sofs:projection(SetFun,sofs:relation(L))).\n[{{a,1},a},{{b,2},b}]\n```\n\nThe relation of equality between the elements of \\{a,b,c\\}:\n\n```erlang\n1> I = sofs:substitution(fun(A) -> A end, sofs:set([a,b,c])),\nsofs:to_external(I).\n[{a,a},{b,b},{c,c}]\n```\n\nLet `SetOfSets` be a set of sets and `BinRel` a binary relation. The function\nthat maps each element `Set` of `SetOfSets` onto the [image](`m:sofs#image`) of\n`Set` under `BinRel` is returned by the following function:\n\n```erlang\nimages(SetOfSets, BinRel) ->\n   Fun = fun(Set) -> sofs:image(BinRel, Set) end,\n   sofs:substitution(Fun, SetOfSets).\n```\n\nExternal unordered sets are represented as sorted lists. So, creating the image\nof a set under a relation R can traverse all elements of R (to that comes the\nsorting of results, the image). In `image/2`, `BinRel` is traversed once for\neach element of `SetOfSets`, which can take too long. The following efficient\nfunction can be used instead under the assumption that the image of each element\nof `SetOfSets` under `BinRel` is non-empty:\n\n```erlang\nimages2(SetOfSets, BinRel) ->\n   CR = sofs:canonical_relation(SetOfSets),\n   R = sofs:relative_product1(CR, BinRel),\n   sofs:relation_to_family(R).\n```","ref":"sofs.html#substitution/2"},{"type":"function","title":"sofs.symdiff/2","doc":"Returns the [symmetric difference](`m:sofs#symmetric_difference`) (or the\nBoolean sum) of `Set1` and `Set2`.\n\n```erlang\n1> S1 = sofs:set([1,2,3]),\nS2 = sofs:set([2,3,4]),\nP = sofs:symdiff(S1, S2),\nsofs:to_external(P).\n[1,4]\n```","ref":"sofs.html#symdiff/2"},{"type":"function","title":"sofs.symmetric_partition/2","doc":"Returns a triple of sets:\n\n- `Set3` contains the elements of `Set1` that do not belong to `Set2`.\n- `Set4` contains the elements of `Set1` that belong to `Set2`.\n- `Set5` contains the elements of `Set2` that do not belong to `Set1`.","ref":"sofs.html#symmetric_partition/2"},{"type":"function","title":"sofs.to_external/1","doc":"Returns the [external set](`m:sofs#external_set`) of an atomic, ordered, or\nunordered set.","ref":"sofs.html#to_external/1"},{"type":"function","title":"sofs.to_sets/1","doc":"Returns the elements of the ordered set `ASet` as a tuple of sets, and the\nelements of the unordered set `ASet` as a sorted list of sets without\nduplicates.","ref":"sofs.html#to_sets/1"},{"type":"type","title":"sofs.tuple_of/1","doc":"A tuple where the elements are of type `T`.","ref":"sofs.html#t:tuple_of/1"},{"type":"type","title":"sofs.type/0","doc":"A [type](`m:sofs#type`).","ref":"sofs.html#t:type/0"},{"type":"function","title":"sofs.type/1","doc":"Returns the [type](`m:sofs#type`) of an atomic, ordered, or unordered set.","ref":"sofs.html#type/1"},{"type":"function","title":"sofs.union/1","doc":"Returns the [union](`m:sofs#union_n`) of the set of sets `SetOfSets`.","ref":"sofs.html#union/1"},{"type":"function","title":"sofs.union/2","doc":"Returns the [union](`m:sofs#union`) of `Set1` and `Set2`.","ref":"sofs.html#union/2"},{"type":"function","title":"sofs.union_of_family/1","doc":"Returns the union of [family](`m:sofs#family`) `Family`.\n\n```erlang\n1> F = sofs:family([{a,[0,2,4]},{b,[0,1,2]},{c,[2,3]}]),\nS = sofs:union_of_family(F),\nsofs:to_external(S).\n[0,1,2,3,4]\n```","ref":"sofs.html#union_of_family/1"},{"type":"function","title":"sofs.weak_relation/1","doc":"Returns a subset S of the [weak relation](`m:sofs#weak_relation`) W\ncorresponding to the binary relation `BinRel1`. Let F be the\n[field](`m:sofs#field`) of `BinRel1`. The subset S is defined so that x S y if x\nW y for some x in F and for some y in F.\n\n```erlang\n1> R1 = sofs:relation([{1,1},{1,2},{3,1}]),\nR2 = sofs:weak_relation(R1),\nsofs:to_external(R2).\n[{1,1},{1,2},{2,2},{3,1},{3,3}]\n```","ref":"sofs.html#weak_relation/1"},{"type":"module","title":"binary","doc":"Library for handling binary data.\n\nThis module contains functions for manipulating byte-oriented binaries. Although\nthe majority of functions could be provided using bit-syntax, the functions in\nthis library are highly optimized and are expected to either execute faster or\nconsume less memory, or both, than a counterpart written in pure Erlang.\n\nThe module is provided according to Erlang Enhancement Proposal (EEP) 31.\n\n> #### Note {: .info }\n>\n> The library handles byte-oriented data. For bitstrings that are not binaries\n> (does not contain whole octets of bits) a `badarg` exception is thrown from\n> any of the functions in this module.","ref":"binary.html"},{"type":"function","title":"binary.at/2","doc":"Returns the byte at position `Pos` (zero-based) in binary `Subject` as an\ninteger.\n\nIf `Pos` >= [`byte_size(Subject)`](`byte_size/1`), a `badarg` exception\nis raised.","ref":"binary.html#at/2"},{"type":"function","title":"binary.bin_to_list/1","doc":"Converts `Subject` to a list of `t:byte/0`s, each representing the value of one byte.\n\n_Example:_\n\n```erlang\n1> binary:bin_to_list(<<\"erlang\">>).\n\"erlang\"\n%% or [101,114,108,97,110,103] in list notation.\n```","ref":"binary.html#bin_to_list/1"},{"type":"function","title":"binary.bin_to_list/2","doc":"","ref":"binary.html#bin_to_list/2"},{"type":"function","title":"binary.bin_to_list/3","doc":"Converts `Subject` to a list of `t:byte/0`s, each representing the value of one\nbyte. `PosLen` or alternatively `Pos` and `Len` denote which part of the\n`Subject` binary to convert. By default, the entire `Subject` binary is\nconverted.\n\n_Example:_\n\n```erlang\n1> binary:bin_to_list(<<\"erlang\">>, {1,3}).\n\"rla\"\n%% or [114,108,97] in list notation.\n```\n\nIf `PosLen` or alternatively `Pos` and `Len` in any way reference outside the\nbinary, a `badarg` exception is raised.","ref":"binary.html#bin_to_list/3"},{"type":"function","title":"binary.compile_pattern/1","doc":"Builds an internal structure representing a compilation of a search pattern,\nlater to be used in functions `match/3`, `matches/3`, `split/3`, or `replace/4`.\n\nThe `t:cp/0` returned is guaranteed to be a `t:tuple/0` to allow programs to\ndistinguish it from non-precompiled search patterns.\n\nWhen a list of binaries is specified, it denotes a set of alternative binaries\nto search for. For example, if `[<<\"functional\">>,<<\"programming\">>]` is\nspecified as `Pattern`, this means either `<<\"functional\">>` or\n`<<\"programming\">>`\". The pattern is a set of alternatives; when only a single\nbinary is specified, the set has only one element. The order of alternatives in\na pattern is not significant.\n\nThe list of binaries used for search alternatives must be flat, proper and\nnon-empty.\n\nIf `Pattern` is not a binary or a flat proper non-empty list of binaries with\nlength > 0, a `badarg` exception is raised.","ref":"binary.html#compile_pattern/1"},{"type":"function","title":"binary.copy/1","doc":"","ref":"binary.html#copy/1"},{"type":"function","title":"binary.copy/2","doc":"Creates a binary with the content of `Subject` duplicated `N` times.\n\nThis function always creates a new binary, even if `N = 1`. By using `copy/1` on\na binary referencing a larger binary, one can free up the larger binary for\ngarbage collection.\n\n> #### Note {: .info }\n>\n> By deliberately copying a single binary to avoid referencing a larger binary,\n> one can, instead of freeing up the larger binary for later garbage collection,\n> create much more binary data than needed. Sharing binary data is usually good.\n> Only in special cases, when small parts reference large binaries and the large\n> binaries are no longer used in any process, deliberate copying can be a good\n> idea.","ref":"binary.html#copy/2"},{"type":"opaque","title":"binary.cp/0","doc":"Opaque data type representing a compiled search pattern.\n\nGuaranteed to be a `t:tuple/0` to allow programs to distinguish it from\nnon-precompiled search patterns.","ref":"binary.html#t:cp/0"},{"type":"function","title":"binary.decode_hex/1","doc":"Decodes a hex encoded binary into a binary.\n\n_Example_\n\n```erlang\n1> binary:decode_hex(<<\"66\">>).\n<<\"f\">>\n```","ref":"binary.html#decode_hex/1"},{"type":"function","title":"binary.decode_unsigned/1","doc":"","ref":"binary.html#decode_unsigned/1"},{"type":"function","title":"binary.decode_unsigned/2","doc":"Converts the binary digit representation, in big endian or little endian, of a\npositive integer in `Subject` to an Erlang `t:integer/0`.\n\n_Example:_\n\n```erlang\n1> binary:decode_unsigned(<<169,138,199>>).\n11111111\n2> binary:decode_unsigned(<<169,138,199>>, big).\n11111111\n3> binary:decode_unsigned(<<169,138,199>>, little).\n13077161\n```","ref":"binary.html#decode_unsigned/2"},{"type":"function","title":"binary.encode_hex/1","doc":"","ref":"binary.html#encode_hex/1"},{"type":"function","title":"binary.encode_hex/2","doc":"Encodes a binary into a hex encoded binary using the specified case for the\nhexadecimal digits \"a\" to \"f\".\n\nThe default case is `uppercase`.\n\n_Example:_\n\n```erlang\n1> binary:encode_hex(<<\"f\">>).\n<<\"66\">>\n2> binary:encode_hex(<<\"/\">>).\n<<\"2F\">>\n3> binary:encode_hex(<<\"/\">>, lowercase).\n<<\"2f\">>\n4> binary:encode_hex(<<\"/\">>, uppercase).\n<<\"2F\">>\n```","ref":"binary.html#encode_hex/2"},{"type":"function","title":"binary.encode_unsigned/1","doc":"","ref":"binary.html#encode_unsigned/1"},{"type":"function","title":"binary.encode_unsigned/2","doc":"Converts a positive integer to the smallest possible representation in a binary\ndigit representation, either big endian or little endian.\n\n_Example:_\n\n```erlang\n1> binary:encode_unsigned(11111111).\n<<169,138,199>>\n2> binary:encode_unsigned(11111111, big).\n<<169,138,199>>\n2> binary:encode_unsigned(11111111, little).\n<<199,138,169>>\n```","ref":"binary.html#encode_unsigned/2"},{"type":"function","title":"binary.first/1","doc":"Returns the first byte of binary `Subject` as an integer. If the size of\n`Subject` is zero, a `badarg` exception is raised.","ref":"binary.html#first/1"},{"type":"function","title":"binary.last/1","doc":"Returns the last byte of binary `Subject` as an integer. If the size of\n`Subject` is zero, a `badarg` exception is raised.","ref":"binary.html#last/1"},{"type":"function","title":"binary.list_to_bin/1","doc":"Works exactly as `erlang:list_to_binary/1`, added for completeness.","ref":"binary.html#list_to_bin/1"},{"type":"function","title":"binary.longest_common_prefix/1","doc":"Returns the length of the longest common prefix of the binaries in list\n`Binaries`.\n\n_Example:_\n\n```erlang\n1> binary:longest_common_prefix([<<\"erlang\">>, <<\"ergonomy\">>]).\n2\n2> binary:longest_common_prefix([<<\"erlang\">>, <<\"perl\">>]).\n0\n```\n\nIf `Binaries` is not a flat non-empty list of binaries, a `badarg` exception is\nraised.","ref":"binary.html#longest_common_prefix/1"},{"type":"function","title":"binary.longest_common_suffix/1","doc":"Returns the length of the longest common suffix of the binaries in list\n`Binaries`.\n\n_Example:_\n\n```erlang\n1> binary:longest_common_suffix([<<\"erlang\">>, <<\"fang\">>]).\n3\n2> binary:longest_common_suffix([<<\"erlang\">>, <<\"perl\">>]).\n0\n```\n\nIf `Binaries` is not a flat non-empty list of binaries, a `badarg` exception is\nraised.","ref":"binary.html#longest_common_suffix/1"},{"type":"function","title":"binary.match/2","doc":"","ref":"binary.html#match/2"},{"type":"function","title":"binary.match/3","doc":"Searches for the first occurrence of `Pattern` in `Subject` and returns the\nposition and length.\n\nThe function returns `{Pos, Length}` for the binary in `Pattern`, starting at\nthe lowest position in `Subject`.\n\n_Example:_\n\n```erlang\n1> binary:match(<<\"abcde\">>, [<<\"bcde\">>, <<\"cd\">>],[]).\n{1,4}\n```\n\nEven though `<<\"cd\">>` ends before `<<\"bcde\">>`, `<<\"bcde\">>` begins first and\nis therefore the first match. If two overlapping matches begin at the same\nposition, the longest is returned.\n\nSummary of the options:\n\n- **\\{scope, \\{Start, Length\\}\\}** - Only the specified part is searched. Return\n  values still have offsets from the beginning of `Subject`. A negative `Length`\n  is allowed as described in section Data Types in this manual.\n\nIf none of the strings in `Pattern` is found, the atom `nomatch` is returned.\n\nFor a description of `Pattern`, see function `compile_pattern/1`.\n\nIf `{scope, {Start,Length}}` is specified in the options such that `Start` >\nsize of `Subject`, `Start` \\+ `Length` < 0 or `Start` \\+ `Length` > size of\n`Subject`, a `badarg` exception is raised.","ref":"binary.html#match/3"},{"type":"function","title":"binary.matches/2","doc":"","ref":"binary.html#matches/2"},{"type":"function","title":"binary.matches/3","doc":"As `match/2`, but `Subject` is searched until exhausted and a list of all\nnon-overlapping parts matching `Pattern` is returned (in order).\n\nThe first and longest match is preferred to a shorter, which is illustrated by\nthe following example:\n\n```erlang\n1> binary:matches(<<\"abcde\">>,\n                  [<<\"bcde\">>,<<\"bc\">>,<<\"de\">>],[]).\n[{1,4}]\n```\n\nThe result shows that <<\"bcde\">> is selected instead of the shorter match\n<<\"bc\">> (which would have given raise to one more match, <<\"de\">>). This\ncorresponds to the behavior of POSIX regular expressions (and programs like\nawk), but is not consistent with alternative matches in `re` (and Perl), where\ninstead lexical ordering in the search pattern selects which string matches.\n\nIf none of the strings in a pattern is found, an empty list is returned.\n\nFor a description of `Pattern`, see `compile_pattern/1`. For a description of\navailable options, see `match/3`.\n\nIf `{scope, {Start,Length}}` is specified in the options such that `Start` >\nsize of `Subject`, `Start + Length` < 0 or `Start + Length` is > size of\n`Subject`, a `badarg` exception is raised.","ref":"binary.html#matches/3"},{"type":"type","title":"binary.part/0","doc":"A representation of a part (or range) in a binary. `Start` is a zero-based\noffset into a `t:binary/0` and `Length` is the length of that part.\n\nAs input to functions in this module, a reverse part specification is allowed, constructed\nwith a negative `Length`, so that the part of the binary begins at `Start` \\+\n`Length` and is -`Length` long. This is useful for referencing the last `N`\nbytes of a binary as `{size(Binary), -N}`. The functions in this module always\nreturn `t:part/0`s with positive `Length`.","ref":"binary.html#t:part/0"},{"type":"function","title":"binary.part/2","doc":"","ref":"binary.html#part/2"},{"type":"function","title":"binary.part/3","doc":"Extracts the part of binary `Subject` described by `PosLen`.\n\nA negative length can be used to extract bytes at the end of a binary:\n\n```erlang\n1> Bin = <<1,2,3,4,5,6,7,8,9,10>>.\n2> binary:part(Bin, {byte_size(Bin), -5}).\n<<6,7,8,9,10>>\n```\n\n> #### Note {: .info }\n>\n> `part/2` and `part/3` are also available in the `m:erlang` module under the\n> names [`binary_part/2`](`binary_part/2`) and\n> [`binary_part/3`](`binary_part/3`). Those BIFs are allowed in guard tests.\n\nIf `PosLen` in any way references outside the binary, a `badarg` exception is\nraised.","ref":"binary.html#part/3"},{"type":"function","title":"binary.referenced_byte_size/1","doc":"Get the size of the underlying binary referenced by `Binary`.\n\nIf a binary references a larger binary (often described as being a subbinary),\nit can be useful to get the size of the referenced binary. This function can be\nused in a program to trigger the use of `copy/1`. By copying\n a binary, one can dereference the original, possibly large, binary that a\nsmaller binary is a reference to.\n\n_Example:_\n\n```erlang\nstore(Binary, GBSet) ->\n  NewBin =\n      case binary:referenced_byte_size(Binary) of\n          Large when Large > 2 * byte_size(Binary) ->\n             binary:copy(Binary);\n          _ ->\n             Binary\n      end,\n  gb_sets:insert(NewBin,GBSet).\n```\n\nIn this example, we chose to copy the binary content before inserting it in\n[`gb_sets:set()`](`t:gb_sets:set/0`) if it references a binary more than twice\nthe data size we want to keep. Of course, different rules apply when copying to\ndifferent programs.\n\nBinary sharing occurs whenever binaries are taken apart. This is the fundamental\nreason why binaries are fast, decomposition can always be done with O(1)\ncomplexity. In rare circumstances this data sharing is however undesirable, why\nthis function together with [`copy/1`](`copy/1`) can be useful when optimizing\nfor memory use.\n\nExample of binary sharing:\n\n```erlang\n1> A = binary:copy(<<1>>, 100).\n<<1,1,1,1,1 ...\n2> byte_size(A).\n100\n3> binary:referenced_byte_size(A).\n100\n4> < > = A.\n<<1,1,1,1,1 ...\n5> {byte_size(B), binary:referenced_byte_size(B)}.\n{10,10}\n6> {byte_size(C), binary:referenced_byte_size(C)}.\n{90,100}\n```\n\nIn the above example, the small binary `B` was copied while the larger binary\n`C` references binary `A`.\n\n> #### Note {: .info }\n>\n> Binary data is shared among processes. If another process still references the\n> larger binary, copying the part this process uses only consumes more memory\n> and does not free up the larger binary for garbage collection. Use this kind\n> of intrusive functions with extreme care and only if a real problem is\n> detected.","ref":"binary.html#referenced_byte_size/1"},{"type":"function","title":"binary.replace/3","doc":"","ref":"binary.html#replace/3"},{"type":"function","title":"binary.replace/4","doc":"Constructs a new binary by replacing the parts in `Subject` matching `Pattern`\nwith `Replacement` if given as a literal `t:binary/0` or with the result of\napplying `Replacement` to a matching subpart if given as a `fun`.\n\nIf `Replacement` is given as a `t:binary/0` and the matching subpart of\n`Subject` giving raise to the replacement is to be inserted in the result,\noption `{insert_replaced, InsPos}` inserts the matching part into `Replacement`\nat the specified position (or positions) before inserting `Replacement` into\n`Subject`. If `Replacement` is given as a `fun` instead, this option is ignored.\n\nIf any position specified in `InsPos` > size of the replacement binary, a\n`badarg` exception is raised.\n\nOptions `global` and `{scope, part()}` work as for `split/3`. The return type is\nalways a `t:binary/0`.\n\nFor a description of `Pattern`, see `compile_pattern/1`.\n\n_Examples:_\n\n```erlang\n1> binary:replace(<<\"abcde\">>, [<<\"b\">>, <<\"d\">>], <<\"X\">>, []).\n<<\"aXcde\">>\n\n2> binary:replace(<<\"abcde\">>, [<<\"b\">>, <<\"d\">>], <<\"X\">>, [global]).\n<<\"aXcXe\">>\n\n3> binary:replace(<<\"abcde\">>, <<\"b\">>, <<\"[]\">>, [{insert_replaced, 1}]).\n<<\"a[b]cde\">>\n\n4> binary:replace(<<\"abcde\">>, [<<\"b\">>, <<\"d\">>], <<\"[]\">>, [global, {insert_replaced, 1}]).\n<<\"a[b]c[d]e\">>\n\n5> binary:replace(<<\"abcde\">>, [<<\"b\">>, <<\"d\">>], <<\"[]\">>, [global, {insert_replaced, [1, 1]}]).\n<<\"a[bb]c[dd]e\">>\n\n6> binary:replace(<<\"abcde\">>, [<<\"b\">>, <<\"d\">>], <<\"[-]\">>, [global, {insert_replaced, [1, 2]}]).\n<<\"a[b-b]c[d-d]e\">>\n\n7> binary:replace(<<\"abcde\">>, [<<\"b\">>, <<\"d\">>], fun(M) -> <<$[, M/binary, $]>> end, []).\n<<\"a[b]cde\">>\n\n8> binary:replace(<<\"abcde\">>, [<<\"b\">>, <<\"d\">>], fun(M) -> <<$[, M/binary, $]>> end, [global]).\n<<\"a[b]c[d]e\">>\n```","ref":"binary.html#replace/4"},{"type":"function","title":"binary.split/2","doc":"","ref":"binary.html#split/2"},{"type":"function","title":"binary.split/3","doc":"Splits `Subject` into a list of binaries based on `Pattern`.\n\nIf option `global` is not specified, only the first occurrence of `Pattern` in\n`Subject` gives rise to a split.\n\nThe parts of `Pattern` found in `Subject` are not included in the result.\n\n_Example:_\n\n```erlang\n1> binary:split(<<1,255,4,0,0,0,2,3>>, [<<0,0,0>>,<<2>>],[]).\n[<<1,255,4>>, <<2,3>>]\n2> binary:split(<<0,1,0,0,4,255,255,9>>, [<<0,0>>, <<255,255>>],[global]).\n[<<0,1>>,<<4>>,<<9>>]\n```\n\nSummary of options:\n\n- **\\{scope, part()\\}** - Works as in `match/3` and `matches/3`. Notice that\n  this only defines the scope of the search for matching strings, it does not\n  cut the binary before splitting. The bytes before and after the scope are kept\n  in the result. See the example below.\n\n- **trim** - Removes trailing empty parts of the result (as does `trim` in\n  `re:split/3`.\n\n- **trim_all** - Removes all empty parts of the result.\n\n- **global** - Repeats the split until `Subject` is exhausted. Conceptually\n  option `global` makes split work on the positions returned by `matches/3`,\n  while it normally works on the position returned by `match/3`.\n\nExample of the difference between a scope and taking the binary apart before\nsplitting:\n\n```erlang\n1> binary:split(<<\"banana\">>, [<<\"a\">>],[{scope,{2,3}}]).\n[<<\"ban\">>,<<\"na\">>]\n2> binary:split(binary:part(<<\"banana\">>,{2,3}), [<<\"a\">>],[]).\n[<<\"n\">>,<<\"n\">>]\n```\n\nThe return type is always a list of binaries that are all referencing `Subject`.\nThis means that the data in `Subject` is not copied to new binaries, and that\n`Subject` cannot be garbage collected until the results of the split are no\nlonger referenced.\n\nFor a description of `Pattern`, see `compile_pattern/1`.","ref":"binary.html#split/3"},{"type":"module","title":"lists","doc":"List processing functions.\n\nThis module contains functions for list processing.\n\nUnless otherwise stated, all functions assume that position numbering starts\nat 1. That is, the first element of a list is at position 1.\n\nTwo terms `T1` and `T2` compare equal if `T1 == T2` evaluates to `true`. They\nmatch if `T1 =:= T2` evaluates to `true`.\n\nWhenever an _ordering function_{: #ordering_function } `F` is expected as\nargument, it is assumed that the following properties hold of `F` for all x, y,\nand z:\n\n- If x `F` y and y `F` x, then x = y (`F` is antisymmetric).\n- If x `F` y and y `F` z, then x `F` z (`F` is transitive).\n- x `F` y or y `F` x (`F` is total).\n\nAn example of a typical ordering function is less than or equal to: `=</2`.","ref":"lists.html"},{"type":"function","title":"lists.all/2","doc":"Returns `true` if `Pred(Elem)` returns `true` for all elements `Elem` in `List`,\notherwise `false`. The `Pred` function must return a boolean.","ref":"lists.html#all/2"},{"type":"function","title":"lists.any/2","doc":"Returns `true` if `Pred(Elem)` returns `true` for at least one element `Elem` in\n`List`. The `Pred` function must return a boolean.","ref":"lists.html#any/2"},{"type":"function","title":"lists.append/1","doc":"Returns a list in which all the sublists of `ListOfLists` have been appended.\n\n_Example:_\n\n```erlang\n> lists:append([[1, 2, 3], [a, b], [4, 5, 6]]).\n[1,2,3,a,b,4,5,6]\n```","ref":"lists.html#append/1"},{"type":"function","title":"lists.append/2","doc":"Returns a new list `List3`, which is made from the elements of `List1` followed\nby the elements of `List2`.\n\n_Example:_\n\n```erlang\n> lists:append(\"abc\", \"def\").\n\"abcdef\"\n```\n\n`lists:append(A, B)` is equivalent to `A ++ B`.","ref":"lists.html#append/2"},{"type":"function","title":"lists.concat/1","doc":"Concatenates the text representation of the elements of `Things`. The elements\nof `Things` can be atoms, integers, floats, or strings.\n\n_Example:_\n\n```erlang\n> lists:concat([doc, '/', file, '.', 3]).\n\"doc/file.3\"\n```","ref":"lists.html#concat/1"},{"type":"function","title":"lists.delete/2","doc":"Returns a copy of `List1` where the first element matching `Elem` is deleted, if\nthere is such an element.","ref":"lists.html#delete/2"},{"type":"function","title":"lists.droplast/1","doc":"Drops the last element of a `List`. The list is to be non-empty, otherwise the\nfunction crashes with a `function_clause`.","ref":"lists.html#droplast/1"},{"type":"function","title":"lists.dropwhile/2","doc":"Drops elements `Elem` from `List1` while `Pred(Elem)` returns `true` and returns\nthe remaining list. The `Pred` function must return a boolean.","ref":"lists.html#dropwhile/2"},{"type":"function","title":"lists.duplicate/2","doc":"Returns a list containing `N` copies of term `Elem`.\n\n_Example:_\n\n```erlang\n> lists:duplicate(5, xx).\n[xx,xx,xx,xx,xx]\n```","ref":"lists.html#duplicate/2"},{"type":"function","title":"lists.enumerate/1","doc":"","ref":"lists.html#enumerate/1"},{"type":"function","title":"lists.enumerate/2","doc":"","ref":"lists.html#enumerate/2"},{"type":"function","title":"lists.enumerate/3","doc":"Returns `List1` with each element `H` replaced by a tuple of form `{I, H}` where\n`I` is the position of `H` in `List1`. The enumeration starts with `Index` and\nincreases by `Step` in each step.\n\nThat is, [`enumerate/3`](`enumerate/3`) behaves as if it had been defined as\nfollows:\n\n```erlang\nenumerate(I, S, List) ->\n  {List1, _ } = lists:mapfoldl(fun(T, Acc) -> {{Acc, T}, Acc+S} end, I, List),\n  List1.\n```\n\nThe default values for `Index` and `Step` are both `1`.\n\n_Examples:_\n\n```erlang\n> lists:enumerate([a,b,c]).\n[{1,a},{2,b},{3,c}]\n```\n\n```erlang\n> lists:enumerate(10, [a,b,c]).\n[{10,a},{11,b},{12,c}]\n```\n\n```erlang\n> lists:enumerate(0, -2, [a,b,c]).\n[{0,a},{-2,b},{-4,c}]\n```","ref":"lists.html#enumerate/3"},{"type":"function","title":"lists.filter/2","doc":"`List2` is a list of all elements `Elem` in `List1` for which `Pred(Elem)`\nreturns `true`. The `Pred` function must return a boolean.","ref":"lists.html#filter/2"},{"type":"function","title":"lists.filtermap/2","doc":"Calls `Fun(Elem)` on successive elements `Elem` of `List1` in order to update or\nremove elements from `List1`.\n\n`Fun/1` must return either a Boolean or a tuple `{true, Value}`. The function\nreturns the list of elements for which `Fun` returns a new value, where a value\nof `true` is synonymous with `{true, Elem}`.\n\nThat is, `filtermap` behaves as if it had been defined as follows:\n\n```erlang\nfiltermap(Fun, List1) ->\n    lists:foldr(fun(Elem, Acc) ->\n                       case Fun(Elem) of\n                           false -> Acc;\n                           true -> [Elem|Acc];\n                           {true,Value} -> [Value|Acc]\n                       end\n                end, [], List1).\n```\n\n_Example:_\n\n```erlang\n> lists:filtermap(fun(X) -> case X rem 2 of 0 -> {true, X div 2}; _ -> false end end, [1,2,3,4,5]).\n[1,2]\n```","ref":"lists.html#filtermap/2"},{"type":"function","title":"lists.flatlength/1","doc":"Equivalent to [`length(flatten(DeepList))`](`length/1`), but more efficient.","ref":"lists.html#flatlength/1"},{"type":"function","title":"lists.flatmap/2","doc":"Takes a function from `A`s to lists of `B`s, and a list of `A`s (`List1`) and\nproduces a list of `B`s by applying the function to every element in `List1` and\nappending the resulting lists.\n\nThat is, `flatmap` behaves as if it had been defined as follows:\n\n```erlang\nflatmap(Fun, List1) ->\n    append(map(Fun, List1)).\n```\n\n_Example:_\n\n```erlang\n> lists:flatmap(fun(X)->[X,X] end, [a,b,c]).\n[a,a,b,b,c,c]\n```","ref":"lists.html#flatmap/2"},{"type":"function","title":"lists.flatten/1","doc":"Returns a flattened version of `DeepList`.","ref":"lists.html#flatten/1"},{"type":"function","title":"lists.flatten/2","doc":"Returns a flattened version of `DeepList` with tail `Tail` appended.","ref":"lists.html#flatten/2"},{"type":"function","title":"lists.foldl/3","doc":"Calls `Fun(Elem, AccIn)` on successive elements `A` of `List`, starting with\n`AccIn == Acc0`. `Fun/2` must return a new accumulator, which is passed to the\nnext call. The function returns the final value of the accumulator. `Acc0` is\nreturned if the list is empty.\n\n_Example:_\n\n```erlang\n> lists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5]).\n15\n> lists:foldl(fun(X, Prod) -> X * Prod end, 1, [1,2,3,4,5]).\n120\n```","ref":"lists.html#foldl/3"},{"type":"function","title":"lists.foldr/3","doc":"Like `foldl/3`, but the list is traversed from right to left.\n\n_Example:_\n\n```erlang\n> P = fun(A, AccIn) -> io:format(\"~p \", [A]), AccIn end.\n#Fun \n> lists:foldl(P, void, [1,2,3]).\n1 2 3 void\n> lists:foldr(P, void, [1,2,3]).\n3 2 1 void\n```\n\n[`foldl/3`](`foldl/3`) is tail recursive and is usually preferred to\n[`foldr/3`](`foldr/3`).","ref":"lists.html#foldr/3"},{"type":"function","title":"lists.foreach/2","doc":"Calls `Fun(Elem)` for each element `Elem` in `List`. This function is used for\nits side effects and the evaluation order is defined to be the same as the order\nof the elements in the list.","ref":"lists.html#foreach/2"},{"type":"function","title":"lists.join/2","doc":"Inserts `Sep` between each element in `List1`. Has no effect on the empty list\nand on a singleton list. For example:\n\n```erlang\n> lists:join(x, [a,b,c]).\n[a,x,b,x,c]\n> lists:join(x, [a]).\n[a]\n> lists:join(x, []).\n[]\n```","ref":"lists.html#join/2"},{"type":"function","title":"lists.keydelete/3","doc":"Returns a copy of `TupleList1` where the first occurrence of a tuple whose `N`th\nelement compares equal to `Key` is deleted, if there is such a tuple.","ref":"lists.html#keydelete/3"},{"type":"function","title":"lists.keyfind/3","doc":"Searches the list of tuples `TupleList` for a tuple whose `N`th element compares\nequal to `Key`. Returns `Tuple` if such a tuple is found, otherwise `false`.","ref":"lists.html#keyfind/3"},{"type":"function","title":"lists.keymap/3","doc":"Returns a list of tuples where, for each tuple in `TupleList1`, the `N`th\nelement `Term1` of the tuple has been replaced with the result of calling\n`Fun(Term1)`.\n\n_Examples:_\n\n```erlang\n> Fun = fun(Atom) -> atom_to_list(Atom) end.\n#Fun \n2> lists:keymap(Fun, 2, [{name,jane,22},{name,lizzie,20},{name,lydia,15}]).\n[{name,\"jane\",22},{name,\"lizzie\",20},{name,\"lydia\",15}]\n```","ref":"lists.html#keymap/3"},{"type":"function","title":"lists.keymember/3","doc":"Returns `true` if there is a tuple in `TupleList` whose `N`th element compares\nequal to `Key`, otherwise `false`.","ref":"lists.html#keymember/3"},{"type":"function","title":"lists.keymerge/3","doc":"Returns the sorted list formed by merging `TupleList1` and `TupleList2`.\n\nThe merge is performed on the `N`th element of each tuple. Both `TupleList1` and\n`TupleList2` must be key-sorted before evaluating this function. When two tuples\ncompare equal, the tuple from `TupleList1` is picked before the tuple from\n`TupleList2`.","ref":"lists.html#keymerge/3"},{"type":"function","title":"lists.keyreplace/4","doc":"Returns a copy of `TupleList1` where the first occurrence of a `T` tuple whose\n`N`th element compares equal to `Key` is replaced with `NewTuple`, if there is\nsuch a tuple `T`.","ref":"lists.html#keyreplace/4"},{"type":"function","title":"lists.keysearch/3","doc":"Searches the list of tuples `TupleList` for a tuple whose `N`th element compares\nequal to `Key`. Returns `{value, Tuple}` if such a tuple is found, otherwise\n`false`.\n\n> #### Note {: .info }\n>\n> This function is retained for backward compatibility. Function `keyfind/3` is\n> usually more convenient.","ref":"lists.html#keysearch/3"},{"type":"function","title":"lists.keysort/2","doc":"Returns a list containing the sorted elements of list `TupleList1`. Sorting is\nperformed on the `N`th element of the tuples. The sort is stable.","ref":"lists.html#keysort/2"},{"type":"function","title":"lists.keystore/4","doc":"Returns a copy of `TupleList1` where the first occurrence of a tuple `T` whose\n`N`th element compares equal to `Key` is replaced with `NewTuple`, if there is\nsuch a tuple `T`. If there is no such tuple `T`, a copy of `TupleList1` where\n[`NewTuple`] has been appended to the end is returned.","ref":"lists.html#keystore/4"},{"type":"function","title":"lists.keytake/3","doc":"Searches the list of tuples `TupleList1` for a tuple whose `N`th element\ncompares equal to `Key`. Returns `{value, Tuple, TupleList2}` if such a tuple is\nfound, otherwise `false`. `TupleList2` is a copy of `TupleList1` where the first\noccurrence of `Tuple` has been removed.","ref":"lists.html#keytake/3"},{"type":"function","title":"lists.last/1","doc":"Returns the last element in `List`.","ref":"lists.html#last/1"},{"type":"function","title":"lists.map/2","doc":"Takes a function from `A`s to `B`s, and a list of `A`s and produces a list of\n`B`s by applying the function to every element in the list. This function is\nused to obtain the return values. The evaluation order depends on the\nimplementation.","ref":"lists.html#map/2"},{"type":"function","title":"lists.mapfoldl/3","doc":"Combines the operations of `map/2` and `foldl/3` into one pass.\n\n_Example:_\n\nSumming the elements in a list and double them at the same time:\n\n```erlang\n> lists:mapfoldl(fun(X, Sum) -> {2*X, X+Sum} end,\n0, [1,2,3,4,5]).\n{[2,4,6,8,10],15}\n```","ref":"lists.html#mapfoldl/3"},{"type":"function","title":"lists.mapfoldr/3","doc":"Combines the operations of `map/2` and `foldr/3` into one pass.","ref":"lists.html#mapfoldr/3"},{"type":"function","title":"lists.max/1","doc":"Returns the first element of `List` that compares greater than or equal to all\nother elements of `List`.","ref":"lists.html#max/1"},{"type":"function","title":"lists.member/2","doc":"Returns `true` if `Elem` matches some element of `List`, otherwise `false`.","ref":"lists.html#member/2"},{"type":"function","title":"lists.merge3/3","doc":"Returns the sorted list formed by merging `List1`, `List2`, and `List3`. All of\n`List1`, `List2`, and `List3` must be sorted before evaluating this function.\n\nWhen two elements compare equal, the element from `List1`, if there is such an\nelement, is picked before the other element, otherwise the element from `List2`\nis picked before the element from `List3`.","ref":"lists.html#merge3/3"},{"type":"function","title":"lists.merge/1","doc":"Returns the sorted list formed by merging all the sublists of `ListOfLists`. All\nsublists must be sorted before evaluating this function.\n\nWhen two elements compare equal, the element from the sublist with the lowest\nposition in `ListOfLists` is picked before the other element.","ref":"lists.html#merge/1"},{"type":"function","title":"lists.merge/2","doc":"Returns the sorted list formed by merging `List1` and `List2`. Both `List1` and\n`List2` must be sorted before evaluating this function.\n\nWhen two elements compare equal, the element from `List1` is picked before the\nelement from `List2`.","ref":"lists.html#merge/2"},{"type":"function","title":"lists.merge/3","doc":"Returns the sorted list formed by merging `List1` and `List2`. Both `List1` and\n`List2` must be sorted according to the\n[ordering function](`m:lists#ordering_function`) `Fun` before evaluating this\nfunction.\n\n`Fun(A, B)` is to return `true` if `A` compares less than or equal to\n`B` in the ordering, otherwise `false`. When two elements compare equal, the\nelement from `List1` is picked before the element from `List2`.","ref":"lists.html#merge/3"},{"type":"function","title":"lists.min/1","doc":"Returns the first element of `List` that compares less than or equal to all\nother elements of `List`.","ref":"lists.html#min/1"},{"type":"function","title":"lists.nth/2","doc":"Returns the `N`th element of `List`.\n\n_Example:_\n\n```erlang\n> lists:nth(3, [a, b, c, d, e]).\nc\n```","ref":"lists.html#nth/2"},{"type":"function","title":"lists.nthtail/2","doc":"Returns the `N`th tail of `List`, that is, the sublist of `List` starting at\n`N+1` and continuing up to the end of the list.\n\n_Example_\n\n```erlang\n> lists:nthtail(3, [a, b, c, d, e]).\n[d,e]\n> tl(tl(tl([a, b, c, d, e]))).\n[d,e]\n> lists:nthtail(0, [a, b, c, d, e]).\n[a,b,c,d,e]\n> lists:nthtail(5, [a, b, c, d, e]).\n[]\n```","ref":"lists.html#nthtail/2"},{"type":"function","title":"lists.partition/2","doc":"Partitions `List` into two lists, where the first list contains all elements for\nwhich `Pred(Elem)` returns `true`, and the second list contains all elements for\nwhich `Pred(Elem)` returns `false`.\n\n_Examples:_\n\n```erlang\n> lists:partition(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).\n{[1,3,5,7],[2,4,6]}\n> lists:partition(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]).\n{[a,b,c,d,e],[1,2,3,4]}\n```\n\nFor a different way to partition a list, see `splitwith/2`.","ref":"lists.html#partition/2"},{"type":"function","title":"lists.prefix/2","doc":"Returns `true` if `List1` is a prefix of `List2`, otherwise `false`.","ref":"lists.html#prefix/2"},{"type":"function","title":"lists.reverse/1","doc":"Returns a list with the elements in `List1` in reverse order.","ref":"lists.html#reverse/1"},{"type":"function","title":"lists.reverse/2","doc":"Returns a list with the elements in `List1` in reverse order, with tail `Tail`\nappended.\n\n_Example:_\n\n```erlang\n> lists:reverse([1, 2, 3, 4], [a, b, c]).\n[4,3,2,1,a,b,c]\n```","ref":"lists.html#reverse/2"},{"type":"function","title":"lists.search/2","doc":"If there is a `Value` in `List` such that `Pred(Value)` returns `true`, returns\n`{value, Value}` for the first such `Value`, otherwise returns `false`. The\n`Pred` function must return a boolean.","ref":"lists.html#search/2"},{"type":"function","title":"lists.seq/2","doc":"","ref":"lists.html#seq/2"},{"type":"function","title":"lists.seq/3","doc":"Returns a sequence of integers that starts with `From` and contains the\nsuccessive results of adding `Incr` to the previous element, until `To` is\nreached or passed (in the latter case, `To` is not an element of the sequence).\n`Incr` defaults to 1.\n\nFailures:\n\n- If `To   0`.\n- If `To > From - Incr` and `Incr < 0`.\n- If `Incr =:= 0` and `From =/= To`.\n\nThe following equalities hold for all sequences:\n\n```erlang\nlength(lists:seq(From, To)) =:= To - From + 1\nlength(lists:seq(From, To, Incr)) =:= (To - From + Incr) div Incr\n```\n\n_Examples:_\n\n```erlang\n> lists:seq(1, 10).\n[1,2,3,4,5,6,7,8,9,10]\n> lists:seq(1, 20, 3).\n[1,4,7,10,13,16,19]\n> lists:seq(1, 0, 1).\n[]\n> lists:seq(10, 6, 4).\n[]\n> lists:seq(1, 1, 0).\n[1]\n```","ref":"lists.html#seq/3"},{"type":"function","title":"lists.sort/1","doc":"Returns a list containing the sorted elements of `List1`.","ref":"lists.html#sort/1"},{"type":"function","title":"lists.sort/2","doc":"Returns a list containing the sorted elements of `List1`, according to the\n[ordering function](`m:lists#ordering_function`) `Fun`. `Fun(A, B)` is to return\n`true` if `A` compares less than or equal to `B` in the ordering, otherwise\n`false`.","ref":"lists.html#sort/2"},{"type":"function","title":"lists.split/2","doc":"Splits `List1` into `List2` and `List3`. `List2` contains the first `N` elements\nand `List3` the remaining elements (the `N`th tail).","ref":"lists.html#split/2"},{"type":"function","title":"lists.splitwith/2","doc":"Partitions `List` into two lists according to `Pred`.\n[`splitwith/2`](`splitwith/2`) behaves as if it is defined as follows:\n\n```erlang\nsplitwith(Pred, List) ->\n    {takewhile(Pred, List), dropwhile(Pred, List)}.\n```\n\n_Examples:_\n\n```erlang\n> lists:splitwith(fun(A) -> A rem 2 == 1 end, [1,2,3,4,5,6,7]).\n{[1],[2,3,4,5,6,7]}\n> lists:splitwith(fun(A) -> is_atom(A) end, [a,b,1,c,d,2,3,4,e]).\n{[a,b],[1,c,d,2,3,4,e]}\n```\n\nThe `Pred` function must return a boolean. For a different way to partition a\nlist, see `partition/2`.","ref":"lists.html#splitwith/2"},{"type":"function","title":"lists.sublist/2","doc":"Returns the sublist of `List1` starting at position 1 and with (maximum) `Len`\nelements. It is not an error for `Len` to exceed the length of the list, in that\ncase the whole list is returned.","ref":"lists.html#sublist/2"},{"type":"function","title":"lists.sublist/3","doc":"Returns the sublist of `List1` starting at `Start` and with (maximum) `Len`\nelements. It is not an error for `Start+Len` to exceed the length of the list.\n\n_Examples:_\n\n```erlang\n> lists:sublist([1,2,3,4], 2, 2).\n[2,3]\n> lists:sublist([1,2,3,4], 2, 5).\n[2,3,4]\n> lists:sublist([1,2,3,4], 5, 2).\n[]\n```","ref":"lists.html#sublist/3"},{"type":"function","title":"lists.subtract/2","doc":"Returns a new list `List3` that is a copy of `List1`, subjected to the following\nprocedure: for each element in `List2`, its first occurrence in `List1` is\ndeleted.\n\n_Example:_\n\n```erlang\n> lists:subtract(\"123212\", \"212\").\n\"312\".\n```\n\n`lists:subtract(A, B)` is equivalent to `A -- B`.","ref":"lists.html#subtract/2"},{"type":"function","title":"lists.suffix/2","doc":"Returns `true` if `List1` is a suffix of `List2`, otherwise `false`.","ref":"lists.html#suffix/2"},{"type":"function","title":"lists.sum/1","doc":"Returns the sum of the elements in `List`.","ref":"lists.html#sum/1"},{"type":"function","title":"lists.takewhile/2","doc":"Takes elements `Elem` from `List1` while `Pred(Elem)` returns `true`, that is,\nthe function returns the longest prefix of the list for which all elements\nsatisfy the predicate. The `Pred` function must return a boolean.","ref":"lists.html#takewhile/2"},{"type":"function","title":"lists.ukeymerge/3","doc":"Returns the sorted list formed by merging `TupleList1` and `TupleList2`. The\nmerge is performed on the `N`th element of each tuple. Both `TupleList1` and\n`TupleList2` must be key-sorted without duplicates before evaluating this\nfunction.\n\nWhen two tuples compare equal, the tuple from `TupleList1` is picked\nand the one from `TupleList2` is deleted.","ref":"lists.html#ukeymerge/3"},{"type":"function","title":"lists.ukeysort/2","doc":"Returns a list containing the sorted elements of list `TupleList1` where all\nexcept the first tuple of the tuples comparing equal have been deleted. Sorting\nis performed on the `N`th element of the tuples.","ref":"lists.html#ukeysort/2"},{"type":"function","title":"lists.umerge3/3","doc":"Returns the sorted list formed by merging `List1`, `List2`, and `List3`. All of\n`List1`, `List2`, and `List3` must be sorted and contain no duplicates before\nevaluating this function.\n\nWhen two elements compare equal, the element from\n`List1` is picked if there is such an element, otherwise the element from\n`List2` is picked, and the other is deleted.","ref":"lists.html#umerge3/3"},{"type":"function","title":"lists.umerge/1","doc":"Returns the sorted list formed by merging all the sublists of `ListOfLists`. All\nsublists must be sorted and contain no duplicates before evaluating this\nfunction.\n\nWhen two elements compare equal, the element from the sublist with the\nlowest position in `ListOfLists` is picked and the other is deleted.","ref":"lists.html#umerge/1"},{"type":"function","title":"lists.umerge/2","doc":"Returns the sorted list formed by merging `List1` and `List2`. Both `List1` and\n`List2` must be sorted and contain no duplicates before evaluating this\nfunction.\n\nWhen two elements compare equal, the element from `List1` is picked\nand the one from `List2` is deleted.","ref":"lists.html#umerge/2"},{"type":"function","title":"lists.umerge/3","doc":"Returns the sorted list formed by merging `List1` and `List2`. Both `List1` and\n`List2` must be sorted according to the\n[ordering function](`m:lists#ordering_function`) `Fun` and contain no duplicates\nbefore evaluating this function.\n\n`Fun(A, B)` is to return `true` if `A` compares\nless than or equal to `B` in the ordering, otherwise `false`. When two elements\ncompare equal, the element from `List1` is picked and the one from `List2` is\ndeleted.","ref":"lists.html#umerge/3"},{"type":"function","title":"lists.uniq/1","doc":"Returns a list containing the elements of `List1` with duplicated elements\nremoved (preserving the order of the elements). The first occurrence of each\nelement is kept.\n\n_Examples:_\n\n```erlang\n> lists:uniq([3,3,1,2,1,2,3]).\n[3,1,2]\n> lists:uniq([a, a, 1, b, 2, a, 3]).\n[a, 1, b, 2, 3]\n```","ref":"lists.html#uniq/1"},{"type":"function","title":"lists.uniq/2","doc":"Returns a list containing the elements of `List1` without the elements for which\n`Fun` returned duplicate values (preserving the order of the elements). The\nfirst occurrence of each element is kept.\n\n_Examples:_\n\n```erlang\n> lists:uniq(fun({X, _}) -> X end, [{b, 2}, {a, 1}, {c, 3}, {a, 2}]).\n[{b, 2}, {a, 1}, {c, 3}]\n```","ref":"lists.html#uniq/2"},{"type":"function","title":"lists.unzip3/1","doc":"\"Unzips\" a list of three-tuples into three lists, where the first list contains\nthe first element of each tuple, the second list contains the second element of\neach tuple, and the third list contains the third element of each tuple.","ref":"lists.html#unzip3/1"},{"type":"function","title":"lists.unzip/1","doc":"\"Unzips\" a list of two-tuples into two lists, where the first list contains the\nfirst element of each tuple, and the second list contains the second element of\neach tuple.","ref":"lists.html#unzip/1"},{"type":"function","title":"lists.usort/1","doc":"Returns a list containing the sorted elements of `List1` where all except the\nfirst element of the elements comparing equal have been deleted.","ref":"lists.html#usort/1"},{"type":"function","title":"lists.usort/2","doc":"Returns a list containing the sorted elements of `List1` where all except the\nfirst element of the elements comparing equal according to the\n[ordering function](`m:lists#ordering_function`) `Fun` have been deleted.\n`Fun(A, B)` is to return `true` if `A` compares less than or equal to `B` in the\nordering, otherwise `false`.","ref":"lists.html#usort/2"},{"type":"function","title":"lists.zip3/3","doc":"","ref":"lists.html#zip3/3"},{"type":"function","title":"lists.zip3/4","doc":"\"Zips\" three lists into one list of three-tuples, where the first element of\neach tuple is taken from the first list, the second element is taken from the\ncorresponding element in the second list, and the third element is taken from\nthe corresponding element in the third list.\n\nFor a description of the `How` parameter, see `zip/3`.","ref":"lists.html#zip3/4"},{"type":"function","title":"lists.zip/2","doc":"","ref":"lists.html#zip/2"},{"type":"function","title":"lists.zip/3","doc":"\"Zips\" two lists into one list of two-tuples, where the first element of each\ntuple is taken from the first list and the second element is taken from the\ncorresponding element in the second list.\n\nThe `How` parameter specifies the behavior if the given lists are of different\nlengths.\n\n- **`fail`** - The call will fail if the given lists are not of equal length.\n  This is the default.\n\n- **`trim`** - Surplus elements from the longer list will be ignored.\n\n  _Examples:_\n\n  ```erlang\n  > lists:zip([a, b], [1, 2, 3], trim).\n  [{a,1},{b,2}]\n  > lists:zip([a, b, c], [1, 2], trim).\n  [{a,1},{b,2}]\n  ```\n\n- **`{pad, Defaults}`** - The shorter list will be padded to the length of the\n  longer list, using the respective elements from the given `Defaults` tuple.\n\n  _Examples:_\n\n  ```erlang\n  > lists:zip([a, b], [1, 2, 3], {pad, {x, 0}}).\n  [{a,1},{b,2},{x,3}]\n  > lists:zip([a, b, c], [1, 2], {pad, {x, 0}}).\n  [{a,1},{b,2},{c,0}]\n  ```","ref":"lists.html#zip/3"},{"type":"function","title":"lists.zipwith3/4","doc":"","ref":"lists.html#zipwith3/4"},{"type":"function","title":"lists.zipwith3/5","doc":"Combines the elements of three lists into one list. For each triple `X, Y, Z` of\nlist elements from the three lists, the element in the result list is\n`Combine(X, Y, Z)`.\n\nFor a description of the `How` parameter, see `zip/3`.\n\n[`zipwith3(fun(X, Y, Z) -> {X,Y,Z} end, List1, List2, List3)`](`zipwith3/4`) is\nequivalent to [`zip3(List1, List2, List3)`](`zip3/3`).\n\n_Examples:_\n\n```erlang\n> lists:zipwith3(fun(X, Y, Z) -> X+Y+Z end, [1,2,3], [4,5,6], [7,8,9]).\n[12,15,18]\n> lists:zipwith3(fun(X, Y, Z) -> [X,Y,Z] end, [a,b,c], [x,y,z], [1,2,3]).\n[[a,x,1],[b,y,2],[c,z,3]]\n```","ref":"lists.html#zipwith3/5"},{"type":"function","title":"lists.zipwith/3","doc":"","ref":"lists.html#zipwith/3"},{"type":"function","title":"lists.zipwith/4","doc":"Combines the elements of two lists into one list. For each pair `X, Y` of list\nelements from the two lists, the element in the result list is `Combine(X, Y)`.\n\nFor a description of the `How` parameter, see `zip/3`.\n\n[`zipwith(fun(X, Y) -> {X,Y} end, List1, List2)`](`zipwith/3`) is equivalent to\n[`zip(List1, List2)`](`zip/2`).\n\n_Example:_\n\n```erlang\n> lists:zipwith(fun(X, Y) -> X+Y end, [1,2,3], [4,5,6]).\n[5,7,9]\n```","ref":"lists.html#zipwith/4"},{"type":"module","title":"maps","doc":"Maps processing functions.\n\nThis module contains functions for maps processing. The Efficiency Guide\ncontains a chapter that describes\n[how to use maps efficiently](`e:system:maps.md`).","ref":"maps.html"},{"type":"function","title":"maps.filter/2","doc":"Returns a map `Map` for which predicate `Pred` holds true in `MapOrIter`.\n\nThe call fails with a `{badmap,Map}` exception if `MapOrIter` is not a map or\nvalid iterator, or with `badarg` if `Pred` is not a function of arity 2.\n\n_Example:_\n\n```erlang\n> M = #{a => 2, b => 3, c=> 4, \"a\" => 1, \"b\" => 2, \"c\" => 4},\n  Pred = fun(K,V) -> is_atom(K) andalso (V rem 2) =:= 0 end,\n  maps:filter(Pred,M).\n#{a => 2,c => 4}\n```","ref":"maps.html#filter/2"},{"type":"function","title":"maps.filtermap/2","doc":"Returns a map `Map` that is the result of calling `Fun(Key, Value1)` for every\n`Key` to value `Value1` association in `MapOrIter` in any order.\n\nIf `Fun(Key, Value1)` returns `true`, the association is copied to the result\nmap. If it returns `false`, the association is not copied. If it returns\n`{true, NewValue}`, the value for `Key` is replaced with `NewValue` in the\nresult map.\n\nThe call fails with a `{badmap,Map}` exception if `MapOrIter` is not a map or\nvalid iterator, or with `badarg` if `Fun` is not a function of arity 2.\n\n_Example:_\n\n```erlang\n> Fun = fun(K,V) when is_atom(K) -> {true, V*2}; (_,V) -> (V rem 2) =:= 0 end,\n  Map = #{k1 => 1, \"k2\" => 2, \"k3\" => 3},\n  maps:filtermap(Fun,Map).\n#{k1 => 2,\"k2\" => 2}\n```","ref":"maps.html#filtermap/2"},{"type":"function","title":"maps.find/2","doc":"Returns a tuple `{ok, Value}`, where `Value` is the value associated with `Key`,\nor `error` if no value is associated with `Key` in `Map`.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map.\n\n_Example:_\n\n```erlang\n> Map = #{\"hi\" => 42},\n  Key = \"hi\",\n  maps:find(Key,Map).\n{ok,42}\n```","ref":"maps.html#find/2"},{"type":"function","title":"maps.fold/3","doc":"Calls `F(Key, Value, AccIn)` for every `Key` to value `Value` association in\n`MapOrIter` in any order. Function `fun F/3` must return a new accumulator,\nwhich is passed to the next successive call. This function returns the final\nvalue of the accumulator. The initial accumulator value `Init` is returned if\nthe map is empty.\n\nThe call fails with a `{badmap,Map}` exception if `MapOrIter` is not a map or\nvalid iterator, or with `badarg` if `Fun` is not a function of arity 3.\n\n_Example:_\n\n```erlang\n> Fun = fun(K,V,AccIn) when is_list(K) -> AccIn + V end,\n  Map = #{\"k1\" => 1, \"k2\" => 2, \"k3\" => 3},\n  maps:fold(Fun,0,Map).\n6\n```","ref":"maps.html#fold/3"},{"type":"function","title":"maps.foreach/2","doc":"Calls `fun F(Key, Value)` for every `Key` to value `Value` association in\n`MapOrIter` in any order.\n\nThe call fails with a `{badmap,Map}` exception if `MapOrIter` is not a map or\nvalid iterator, or with `badarg` if `Fun` is not a function of arity 2.","ref":"maps.html#foreach/2"},{"type":"function","title":"maps.from_keys/2","doc":"Takes a list of keys and a value and builds a map where all keys point to the\nsame value. The key can be in any order, and keys and value can be of any term.\n\n_Example:_\n\n```erlang\n> Keys = [\"a\", \"b\", \"c\"], maps:from_keys(Keys, ok).\n#{\"a\" => ok,\"b\" => ok,\"c\" => ok}\n```","ref":"maps.html#from_keys/2"},{"type":"function","title":"maps.from_list/1","doc":"Takes a list of key-value tuples elements and builds a map. The associations can\nbe in any order, and both keys and values in the association can be of any term.\n\n\nIf the same key appears more than once, the latter (right-most) value is used\nand the previous values are ignored.\n\n_Example:_\n\n```erlang\n> List = [{\"a\",ignored},{1337,\"value two\"},{42,value_three},{\"a\",1}],\n  maps:from_list(List).\n#{42 => value_three,1337 => \"value two\",\"a\" => 1}\n```","ref":"maps.html#from_list/1"},{"type":"function","title":"maps.get/2","doc":"Returns value `Value` associated with `Key` if `Map` contains `Key`.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map, or with a\n`{badkey,Key}` exception if no value is associated with `Key`.\n\n_Example:_\n\n```erlang\n> Key = 1337,\n  Map = #{42 => value_two,1337 => \"value one\",\"a\" => 1},\n  maps:get(Key,Map).\n\"value one\"\n```","ref":"maps.html#get/2"},{"type":"function","title":"maps.get/3","doc":"Returns value `Value` associated with `Key` if `Map` contains `Key`. If no value\nis associated with `Key`, `Default` is returned.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map.\n\n_Example:_\n\n```erlang\n> Map = #{ key1 => val1, key2 => val2 }.\n#{key1 => val1,key2 => val2}\n> maps:get(key1, Map, \"Default value\").\nval1\n> maps:get(key3, Map, \"Default value\").\n\"Default value\"\n```","ref":"maps.html#get/3"},{"type":"function","title":"maps.groups_from_list/2","doc":"Partitions the given `List` into a map of groups.\n\nThe result is a map where each key is given by `KeyFun` and each value is a list\nof elements from the given `List` for which `KeyFun` returned the same key.\n\nThe order of elements within each group list is preserved from the original\nlist.\n\n_Examples:_\n\n```erlang\n> EvenOdd = fun(X) -> case X rem 2 of 0 -> even; 1 -> odd end end,\nmaps:groups_from_list(EvenOdd, [1, 2, 3]).\n#{even => [2], odd => [1, 3]}\n> maps:groups_from_list(fun erlang:length/1, [\"ant\", \"buffalo\", \"cat\", \"dingo\"]).\n#{3 => [\"ant\", \"cat\"], 5 => [\"dingo\"], 7 => [\"buffalo\"]}\n```","ref":"maps.html#groups_from_list/2"},{"type":"function","title":"maps.groups_from_list/3","doc":"Partitions the given `List` into a map of groups.\n\nThe result is a map where each key is given by `KeyFun` and each value is a list\nof elements from the given `List`, mapped via `ValueFun`, for which `KeyFun`\nreturned the same key.\n\nThe order of elements within each group list is preserved from the original\nlist.\n\n_Examples:_\n\n```erlang\n> EvenOdd = fun(X) -> case X rem 2 of 0 -> even; 1 -> odd end end,\n> Square = fun(X) -> X * X end,\n> maps:groups_from_list(EvenOdd, Square, [1, 2, 3]).\n#{even => [4], odd => [1, 9]}\n> maps:groups_from_list(\n    fun erlang:length/1,\n    fun lists:reverse/1,\n    [\"ant\", \"buffalo\", \"cat\", \"dingo\"]).\n#{3 => [\"tna\", \"tac\"],5 => [\"ognid\"],7 => [\"olaffub\"]}\n```","ref":"maps.html#groups_from_list/3"},{"type":"function","title":"maps.intersect/2","doc":"Intersects two maps into a single map `Map3`. If a key exists in both maps, the\nvalue in `Map1` is superseded by the value in `Map2`.\n\nThe call fails with a `{badmap,Map}` exception if `Map1` or `Map2` is not a map.\n\n_Example:_\n\n```erlang\n> Map1 = #{a => \"value_one\", b => \"value_two\"},\n  Map2 = #{a => 1, c => 2},\n  maps:intersect(Map1,Map2).\n#{a => 1}\n```","ref":"maps.html#intersect/2"},{"type":"function","title":"maps.intersect_with/3","doc":"Intersects two maps into a single map `Map3`. If a key exists in both maps, the\nvalue in `Map1` is combined with the value in `Map2` by the `Combiner` fun.\n\nWhen `Combiner` is applied the key that exists in both maps is the first parameter,\nthe value from `Map1` is the second parameter, and the value from `Map2` is the\nthird parameter.\n\nThe call fails with a `{badmap,Map}` exception if `Map1` or `Map2` is not a map.\nThe call fails with a `badarg` exception if `Combiner` is not a fun that takes\nthree arguments.\n\n_Example:_\n\n```erlang\n> Map1 = #{a => \"value_one\", b => \"value_two\"},\n  Map2 = #{a => 1, c => 2},\n  maps:intersect_with(fun(_Key, Value1, Value2) -> {Value1, Value2} end, Map1, Map2).\n#{a => {\"value_one\",1}}\n```","ref":"maps.html#intersect_with/3"},{"type":"function","title":"maps.is_key/2","doc":"Returns `true` if map `Map` contains `Key` and returns `false` if it does not\ncontain the `Key`.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map.\n\n_Example:_\n\n```erlang\n> Map = #{\"42\" => value}.\n#{\"42\" => value}\n> maps:is_key(\"42\",Map).\ntrue\n> maps:is_key(value,Map).\nfalse\n```","ref":"maps.html#is_key/2"},{"type":"type","title":"maps.iterator/0","doc":"","ref":"maps.html#t:iterator/0"},{"type":"function","title":"maps.iterator/1","doc":"Returns a map iterator `Iterator` that can be used by [`maps:next/1`](`next/1`)\nto traverse the key-value associations in a map. When iterating over a map, the\nmemory usage is guaranteed to be bounded no matter the size of the map.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map.\n\n_Example:_\n\n```erlang\n> M = #{ a => 1, b => 2 }.\n#{a => 1,b => 2}\n> I = maps:iterator(M), ok.\nok\n> {K1, V1, I2} = maps:next(I), {K1, V1}.\n{a,1}\n> {K2, V2, I3} = maps:next(I2),{K2, V2}.\n{b,2}\n> maps:next(I3).\nnone\n```","ref":"maps.html#iterator/1"},{"type":"opaque","title":"maps.iterator/2","doc":"An iterator representing the associations in a map with keys of type `Key` and\nvalues of type `Value`.\n\nCreated using [`maps:iterator/1`](`iterator/1`) or\n[`maps:iterator/2`](`iterator/2`).\n\nConsumed by:\n\n- [`maps:next/1`](`next/1`)\n- [`maps:filter/2`](`filter/2`)\n- [`maps:filtermap/2`](`filtermap/2`)\n- [`maps:fold/3`](`fold/3`)\n- [`maps:foreach/2`](`foreach/2`)\n- [`maps:map/2`](`map/2`)\n- [`maps:to_list/1`](`to_list/1`)","ref":"maps.html#t:iterator/2"},{"type":"function","title":"maps.iterator/2","doc":"Returns a map iterator `Iterator` that can be used by [`maps:next/1`](`next/1`)\nto traverse the key-value associations in a map sorted by key using the given\n`Order`.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map or if\n`Order` is invalid.\n\n_Example (when _`Order`_ is _`ordered`_):_\n\n```erlang\n> M = #{ a => 1, b => 2 }.\n#{a => 1,b => 2}\n> OrdI = maps:iterator(M, ordered), ok.\nok\n> {K1, V1, OrdI2} = maps:next(OrdI), {K1, V1}.\n{a,1}\n> {K2, V2, OrdI3} = maps:next(OrdI2),{K2, V2}.\n{b,2}\n> maps:next(OrdI3).\nnone\n```\n\n_Example (when _`Order`_ is _`reversed`_):_\n\n```erlang\n> M = #{ a => 1, b => 2 }.\n#{a => 1,b => 2}\n> RevI = maps:iterator(M, reversed), ok.\nok\n> {K2, V2, RevI2} = maps:next(RevI), {K2, V2}.\n{b,2}\n> {K1, V1, RevI3} = maps:next(RevI2),{K1, V1}.\n{a,1}\n> maps:next(RevI3).\nnone\n```\n\n_Example (when _`Order`_ is an arithmetic sorting function):_\n\n```erlang\n> M = #{ -1 => a, -1.0 => b, 0 => c, 0.0 => d }.\n#{-1 => a,0 => c,-1.0 => b,0.0 => d}\n> ArithOrdI = maps:iterator(M, fun(A, B) -> A =  maps:to_list(ArithOrdI).\n[{-1,a},{-1.0,b},{0,c},{0.0,d}]\n> ArithRevI = maps:iterator(M, fun(A, B) -> B   maps:to_list(ArithRevI).\n[{0.0,d},{0,c},{-1.0,b},{-1,a}]\n```","ref":"maps.html#iterator/2"},{"type":"type","title":"maps.iterator_order/0","doc":"","ref":"maps.html#t:iterator_order/0"},{"type":"type","title":"maps.iterator_order/1","doc":"Key-based iterator order option that can be one of `undefined` (default for\n[`maps:iterator/1`](`iterator/1`)), `ordered` (sorted in map-key order),\n`reversed`, or a custom sorting function.\n\nUsed by [`maps:iterator/2`](`iterator/2`).\n\nThe [Expressions section](`e:system:expressions.md#term-comparisons`) contains\ndescriptions of how terms are ordered.","ref":"maps.html#t:iterator_order/1"},{"type":"function","title":"maps.keys/1","doc":"Returns a complete list of keys, in any order, which resides within `Map`.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map.\n\n_Example:_\n\n```erlang\n> Map = #{42 => value_three,1337 => \"value two\",\"a\" => 1},\n  maps:keys(Map).\n[42,1337,\"a\"]\n```","ref":"maps.html#keys/1"},{"type":"function","title":"maps.map/2","doc":"Produces a new map `Map` by calling function `fun F(Key, Value1)` for every\n`Key` to value `Value1` association in `MapOrIter` in any order. Function\n`fun Fun/2` must return value `Value2` to be associated with key `Key` for the\nnew map `Map`.\n\nThe call fails with a `{badmap,Map}` exception if `MapOrIter` is not a map or\nvalid iterator, or with `badarg` if `Fun` is not a function of arity 2.\n\n_Example:_\n\n```erlang\n> Fun = fun(K,V1) when is_list(K) -> V1*2 end,\n  Map = #{\"k1\" => 1, \"k2\" => 2, \"k3\" => 3},\n  maps:map(Fun,Map).\n#{\"k1\" => 2,\"k2\" => 4,\"k3\" => 6}\n```","ref":"maps.html#map/2"},{"type":"function","title":"maps.merge/2","doc":"Merges two maps into a single map `Map3`. If two keys exist in both maps, the\nvalue in `Map1` is superseded by the value in `Map2`.\n\nThe call fails with a `{badmap,Map}` exception if `Map1` or `Map2` is not a map.\n\n_Example:_\n\n```erlang\n> Map1 = #{a => \"value_one\", b => \"value_two\"},\n  Map2 = #{a => 1, c => 2},\n  maps:merge(Map1,Map2).\n#{a => 1,b => \"value_two\",c => 2}\n```","ref":"maps.html#merge/2"},{"type":"function","title":"maps.merge_with/3","doc":"Merges two maps into a single map `Map3`. If a key exists in both maps, the\nvalue in `Map1` is combined with the value in `Map2` by the `Combiner` fun.\n\nWhen `Combiner` is applied the key that exists in both maps is the first parameter,\nthe value from `Map1` is the second parameter, and the value from `Map2` is the\nthird parameter.\n\nThe call fails with a `{badmap,Map}` exception if `Map1` or `Map2` is not a map.\nThe call fails with a `badarg` exception if `Combiner` is not a fun that takes\nthree arguments.\n\n_Example:_\n\n```erlang\n> Map1 = #{a => \"value_one\", b => \"value_two\"},\n  Map2 = #{a => 1, c => 2},\n  maps:merge_with(fun(_Key, Value1, Value2) -> {Value1, Value2} end, Map1, Map2).\n#{a => {\"value_one\",1},b => \"value_two\",c => 2}\n```","ref":"maps.html#merge_with/3"},{"type":"function","title":"maps.new/0","doc":"Returns a new empty map.\n\n_Example:_\n\n```text\n> maps:new().\n#{}\n```","ref":"maps.html#new/0"},{"type":"function","title":"maps.next/1","doc":"Returns the next key-value association in `Iterator` and a new iterator for the\nremaining associations in the iterator.\n\nIf there are no more associations in the iterator, `none` is returned.\n\n_Example:_\n\n```erlang\n> Map = #{a => 1, b => 2, c => 3}.\n#{a => 1,b => 2,c => 3}\n> I = maps:iterator(Map), ok.\nok\n> {K1, V1, I1} = maps:next(I), {K1, V1}.\n{a,1}\n> {K2, V2, I2} = maps:next(I1), {K2, V2}.\n{b,2}\n> {K3, V3, I3} = maps:next(I2), {K3, V3}.\n{c,3}\n> maps:next(I3).\nnone\n```","ref":"maps.html#next/1"},{"type":"function","title":"maps.put/3","doc":"Associates `Key` with value `Value` and inserts the association into map `Map2`.\nIf key `Key` already exists in map `Map1`, the old associated value is replaced\nby value `Value`. The function returns a new map `Map2` containing the new\nassociation and the old associations in `Map1`.\n\nThe call fails with a `{badmap,Map}` exception if `Map1` is not a map.\n\n_Example:_\n\n```erlang\n> Map = #{\"a\" => 1}.\n#{\"a\" => 1}\n> maps:put(\"a\", 42, Map).\n#{\"a\" => 42}\n> maps:put(\"b\", 1337, Map).\n#{\"a\" => 1,\"b\" => 1337}\n```","ref":"maps.html#put/3"},{"type":"function","title":"maps.remove/2","doc":"Removes the `Key`, if it exists, and its associated value from `Map1` and\nreturns a new map `Map2` without key `Key`.\n\nThe call fails with a `{badmap,Map}` exception if `Map1` is not a map.\n\n_Example:_\n\n```erlang\n> Map = #{\"a\" => 1}.\n#{\"a\" => 1}\n> maps:remove(\"a\",Map).\n#{}\n> maps:remove(\"b\",Map).\n#{\"a\" => 1}\n```","ref":"maps.html#remove/2"},{"type":"function","title":"maps.size/1","doc":"Returns the number of key-value associations in `Map`. This operation occurs in\nconstant time.\n\n_Example:_\n\n```erlang\n> Map = #{42 => value_two,1337 => \"value one\",\"a\" => 1},\n  maps:size(Map).\n3\n```","ref":"maps.html#size/1"},{"type":"function","title":"maps.take/2","doc":"The function removes the `Key`, if it exists, and its associated value from\n`Map1` and returns a tuple with the removed `Value` and the new map `Map2`\nwithout key `Key`. If the key does not exist `error` is returned.\n\nThe call will fail with a `{badmap,Map}` exception if `Map1` is not a map.\n\nExample:\n\n```erlang\n> Map = #{\"a\" => \"hello\", \"b\" => \"world\"}.\n#{\"a\" => \"hello\", \"b\" => \"world\"}\n> maps:take(\"a\",Map).\n{\"hello\",#{\"b\" => \"world\"}}\n> maps:take(\"does not exist\",Map).\nerror\n```","ref":"maps.html#take/2"},{"type":"function","title":"maps.to_list/1","doc":"Returns a list of pairs representing the key-value associations of\n`MapOrIterator`, where the pairs `[{K1,V1}, ..., {Kn,Vn}]` are returned in\narbitrary order.\n\nThe call fails with a `{badmap,Map}` exception if `MapOrIterator` is not a map\nor an iterator obtained by a call to `iterator/1` or `iterator/2`.\n\n_Example:_\n\n```erlang\n> Map = #{42 => value_three,1337 => \"value two\",\"a\" => 1},\n  maps:to_list(Map).\n[{42,value_three},{1337,\"value two\"},{\"a\",1}]\n```\n\n_Example (using _`iterator/2`_):_\n\n```erlang\n> Map = #{ z => 1, y => 2, x => 3 }.\n#{x => 3,y => 2,z => 1}\n> maps:to_list(maps:iterator(Map, ordered)).\n[{x,3},{y,2},{z,1}]\n```","ref":"maps.html#to_list/1"},{"type":"function","title":"maps.update/3","doc":"If `Key` exists in `Map1`, the old associated value is replaced by value\n`Value`. The function returns a new map `Map2` containing the new associated\nvalue.\n\nThe call fails with a `{badmap,Map}` exception if `Map1` is not a map, or with a\n`{badkey,Key}` exception if no value is associated with `Key`.\n\n_Example:_\n\n```erlang\n> Map = #{\"a\" => 1}.\n#{\"a\" => 1}\n> maps:update(\"a\", 42, Map).\n#{\"a\" => 42}\n```","ref":"maps.html#update/3"},{"type":"function","title":"maps.update_with/3","doc":"Update a value in a `Map1` associated with `Key` by calling `Fun` on the old\nvalue to get a new value. An exception `{badkey,Key}` is generated if `Key` is\nnot present in the map.\n\nExample:\n\n```erlang\n> Map = #{\"counter\" => 1},\n  Fun = fun(V) -> V + 1 end,\n  maps:update_with(\"counter\",Fun,Map).\n#{\"counter\" => 2}\n```","ref":"maps.html#update_with/3"},{"type":"function","title":"maps.update_with/4","doc":"Update a value in a `Map1` associated with `Key` by calling `Fun` on the old\nvalue to get a new value. If `Key` is not present in `Map1` then `Init` will be\nassociated with `Key`.\n\nExample:\n\n```erlang\n> Map = #{\"counter\" => 1},\n  Fun = fun(V) -> V + 1 end,\n  maps:update_with(\"new counter\",Fun,42,Map).\n#{\"counter\" => 1,\"new counter\" => 42}\n```","ref":"maps.html#update_with/4"},{"type":"function","title":"maps.values/1","doc":"Returns a complete list of values, in arbitrary order, contained in map `Map`.\n\nThe call fails with a `{badmap,Map}` exception if `Map` is not a map.\n\n_Example:_\n\n```erlang\n> Map = #{42 => value_three,1337 => \"value two\",\"a\" => 1},\n  maps:values(Map).\n[value_three,\"value two\",1]\n```","ref":"maps.html#values/1"},{"type":"function","title":"maps.with/2","doc":"Returns a new map `Map2` with the keys `K1` through `Kn` and their associated\nvalues from map `Map1`. Any key in `Ks` that does not exist in `Map1` is\nignored.\n\n_Example:_\n\n```erlang\n> Map = #{42 => value_three,1337 => \"value two\",\"a\" => 1},\n  Ks = [\"a\",42,\"other key\"],\n  maps:with(Ks,Map).\n#{42 => value_three,\"a\" => 1}\n```","ref":"maps.html#with/2"},{"type":"function","title":"maps.without/2","doc":"Returns a new map `Map2` without keys `K1` through `Kn` and their associated\nvalues from map `Map1`. Any key in `Ks` that does not exist in `Map1` is ignored\n\n_Example:_\n\n```erlang\n> Map = #{42 => value_three,1337 => \"value two\",\"a\" => 1},\n  Ks = [\"a\",42,\"other key\"],\n  maps:without(Ks,Map).\n#{1337 => \"value two\"}\n```","ref":"maps.html#without/2"},{"type":"module","title":"math","doc":"Mathematical functions.\n\nThis module provides an interface to a number of mathematical functions.\nFor details about what each function does, see the the C library documentation\non your system. On Unix systems the easiest way it to run `man sin`. On\nWindows you should check the [Math and floating-point support](https://learn.microsoft.com/en-us/cpp/c-runtime-library/floating-point-support)\ndocumentation.","ref":"math.html"},{"type":"module","title":"Limitations - math","doc":"As these are the C library, the same limitations apply.","ref":"math.html#module-limitations"},{"type":"function","title":"math.acos/1","doc":"Inverse cosine of `X`, return value is in radians.","ref":"math.html#acos/1"},{"type":"function","title":"math.acosh/1","doc":"Inverse hyperbolic cosine of `X`.","ref":"math.html#acosh/1"},{"type":"function","title":"math.asin/1","doc":"Inverse sine of `X`, return value is in radians.","ref":"math.html#asin/1"},{"type":"function","title":"math.asinh/1","doc":"Inverse hyperbolic sine of `X`.","ref":"math.html#asinh/1"},{"type":"function","title":"math.atan2/2","doc":"Inverse 2-argument tangent of `X`, return value is in radians.","ref":"math.html#atan2/2"},{"type":"function","title":"math.atan/1","doc":"Inverse tangent of `X`, return value is in radians.","ref":"math.html#atan/1"},{"type":"function","title":"math.atanh/1","doc":"Inverse hyperbolic tangent of `X`.","ref":"math.html#atanh/1"},{"type":"function","title":"math.ceil/1","doc":"The ceiling of `X`.","ref":"math.html#ceil/1"},{"type":"function","title":"math.cos/1","doc":"The cosine of `X` in radians.","ref":"math.html#cos/1"},{"type":"function","title":"math.cosh/1","doc":"The hyperbolic cosine of `X`.","ref":"math.html#cosh/1"},{"type":"function","title":"math.erf/1","doc":"Returns the error function (or Gauss error function) of `X`.\n\nWhere:\n\n```text\nerf(X) = 2/sqrt(pi)*integral from 0 to X of exp(-t*t) dt.\n```","ref":"math.html#erf/1"},{"type":"function","title":"math.erfc/1","doc":"[`erfc(X)`](`erfc/1`) returns `1.0` - [`erf(X)`](`erf/1`), computed by methods\nthat avoid cancellation for large `X`.","ref":"math.html#erfc/1"},{"type":"function","title":"math.exp/1","doc":"Raise e by `X`, that is `eˣ`.\n\nWhere e is the base of the natural logarithm.","ref":"math.html#exp/1"},{"type":"function","title":"math.floor/1","doc":"The floor of `X`.","ref":"math.html#floor/1"},{"type":"function","title":"math.fmod/2","doc":"Returns `X` modulus `Y`.","ref":"math.html#fmod/2"},{"type":"function","title":"math.log2/1","doc":"The base-2 logarithm of `X`.","ref":"math.html#log2/1"},{"type":"function","title":"math.log10/1","doc":"The base-10 logarithm of `X`.","ref":"math.html#log10/1"},{"type":"function","title":"math.log/1","doc":"The natural (base-e) logarithm of `X`.","ref":"math.html#log/1"},{"type":"function","title":"math.pi/0","doc":"Ratio of the circumference of a circle to its diameter.\n\nFloating point approximation of mathematical constant pi.","ref":"math.html#pi/0"},{"type":"function","title":"math.pow/2","doc":"Raise `X` by `N`, that is `xⁿ`.","ref":"math.html#pow/2"},{"type":"function","title":"math.sin/1","doc":"Sine of `X` in radians.","ref":"math.html#sin/1"},{"type":"function","title":"math.sinh/1","doc":"Hyperbolic sine of `X`.","ref":"math.html#sinh/1"},{"type":"function","title":"math.sqrt/1","doc":"Square root of `X`.","ref":"math.html#sqrt/1"},{"type":"function","title":"math.tan/1","doc":"Tangent of `X` in radians.","ref":"math.html#tan/1"},{"type":"function","title":"math.tanh/1","doc":"Hyperbolic tangent of `X`.","ref":"math.html#tanh/1"},{"type":"function","title":"math.tau/0","doc":"Ratio of the circumference of a circle to its radius.\n\nThis constant is equivalent to a full turn when described in radians.\n\nThe same as `2 * pi()`.","ref":"math.html#tau/0"},{"type":"module","title":"calendar","doc":"Local and universal time, day of the week, date and time conversions.\n\nThis module provides computation of local and universal time, day of the week,\nand many time conversion functions.\n\nTime is local when it is adjusted in accordance with the current time zone and\ndaylight saving. Time is universal when it reflects the time at longitude zero,\nwithout any adjustment for daylight saving. Universal Coordinated Time (UTC)\ntime is also called Greenwich Mean Time (GMT).\n\nThe time functions `local_time/0` and `universal_time/0` in this module both\nreturn date and time. This is because separate functions for date and time can\nresult in a date/time combination that is displaced by 24 hours. This occurs if\none of the functions is called before midnight, and the other after midnight.\nThis problem also applies to the Erlang BIFs `date/0` and `time/0`, and their\nuse is strongly discouraged if a reliable date/time stamp is required.\n\nAll dates conform to the Gregorian calendar. This calendar was introduced by\nPope Gregory XIII in 1582 and was used in all Catholic countries from this year.\nProtestant parts of Germany and the Netherlands adopted it in 1698, England\nfollowed in 1752, and Russia in 1918 (the October revolution of 1917 took place\nin November according to the Gregorian calendar).\n\nThe Gregorian calendar in this module is extended back to year 0. For a given\ndate, the _gregorian days_ is the number of days up to and including the date\nspecified. Similarly, the _gregorian seconds_ for a specified date and time is\nthe number of seconds up to and including the specified date and time.\n\nFor computing differences between epochs in time, use the functions counting\ngregorian days or seconds. If epochs are specified as local time, they must be\nconverted to universal time to get the correct value of the elapsed time between\nepochs. Use of function [`time_difference/2`](`time_difference/2`) is\ndiscouraged.\n\nDifferent definitions exist for the week of the year. This module contains a\nweek of the year implementation conforming to the ISO 8601 standard. As the week\nnumber for a specified date can fall on the previous, the current, or on the\nnext year, it is important to specify both the year and the week number.\nFunctions `iso_week_number/0` and [`iso_week_number/1`](`iso_week_number/1`)\nreturn a tuple of the year and the week number.","ref":"calendar.html"},{"type":"module","title":"Leap Years - calendar","doc":"The notion that every fourth year is a leap year is not completely true. By the\nGregorian rule, a year Y is a leap year if one of the following rules is valid:\n\n- Y is divisible by 4, but not by 100.\n- Y is divisible by 400.\n\nHence, 1996 is a leap year, 1900 is not, but 2000 is.","ref":"calendar.html#module-leap-years"},{"type":"module","title":"Date and Time Source - calendar","doc":"Local time is obtained from the Erlang BIF `localtime/0`. Universal time is\ncomputed from the BIF `universaltime/0`.\n\nThe following apply:\n\n- There are 86400 seconds in a day.\n- There are 365 days in an ordinary year.\n- There are 366 days in a leap year.\n- There are 1461 days in a 4 year period.\n- There are 36524 days in a 100 year period.\n- There are 146097 days in a 400 year period.\n- There are 719528 days between Jan 1, 0 and Jan 1, 1970.","ref":"calendar.html#module-date-and-time-source"},{"type":"type","title":"calendar.date/0","doc":"A date using the Gregorian calendar.\n\nAll APIs expect this to be a valid date. If the source of the date\nis unknown, then verify that is it valid by calling `valid_date/1`\nbefore using it.","ref":"calendar.html#t:date/0"},{"type":"function","title":"calendar.date_to_gregorian_days/1","doc":"Computes the number of gregorian days starting with year 0 and ending at the\nspecified date.","ref":"calendar.html#date_to_gregorian_days/1"},{"type":"function","title":"calendar.date_to_gregorian_days/3","doc":"","ref":"calendar.html#date_to_gregorian_days/3"},{"type":"type","title":"calendar.datetime1970/0","doc":"","ref":"calendar.html#t:datetime1970/0"},{"type":"type","title":"calendar.datetime/0","doc":"","ref":"calendar.html#t:datetime/0"},{"type":"function","title":"calendar.datetime_to_gregorian_seconds/1","doc":"Computes the number of gregorian seconds starting with year 0 and ending at the\nspecified date and time.","ref":"calendar.html#datetime_to_gregorian_seconds/1"},{"type":"type","title":"calendar.day/0","doc":"","ref":"calendar.html#t:day/0"},{"type":"function","title":"calendar.day_of_the_week/1","doc":"Computes the day of the week from the specified `Year`, `Month`, and `Day`.\nReturns the day of the week as `1`: Monday, `2`: Tuesday, and so on.","ref":"calendar.html#day_of_the_week/1"},{"type":"function","title":"calendar.day_of_the_week/3","doc":"","ref":"calendar.html#day_of_the_week/3"},{"type":"type","title":"calendar.daynum/0","doc":"","ref":"calendar.html#t:daynum/0"},{"type":"function","title":"calendar.gregorian_days_to_date/1","doc":"Computes the date from the specified number of gregorian days.","ref":"calendar.html#gregorian_days_to_date/1"},{"type":"function","title":"calendar.gregorian_seconds_to_datetime/1","doc":"Computes the date and time from the specified number of gregorian seconds.","ref":"calendar.html#gregorian_seconds_to_datetime/1"},{"type":"type","title":"calendar.hour/0","doc":"","ref":"calendar.html#t:hour/0"},{"type":"function","title":"calendar.is_leap_year/1","doc":"Checks if the specified year is a leap year.","ref":"calendar.html#is_leap_year/1"},{"type":"function","title":"calendar.iso_week_number/0","doc":"Returns tuple `{Year, WeekNum}` representing the ISO week number for the actual\ndate. To determine the actual date, use function `local_time/0`.","ref":"calendar.html#iso_week_number/0"},{"type":"function","title":"calendar.iso_week_number/1","doc":"Returns tuple `{Year, WeekNum}` representing the ISO week number for the\nspecified date.","ref":"calendar.html#iso_week_number/1"},{"type":"function","title":"calendar.last_day_of_the_month/2","doc":"Computes the number of days in a month.","ref":"calendar.html#last_day_of_the_month/2"},{"type":"type","title":"calendar.ldom/0","doc":"The last day of the month.","ref":"calendar.html#t:ldom/0"},{"type":"function","title":"calendar.local_time/0","doc":"Returns the local time reported by the underlying operating system.","ref":"calendar.html#local_time/0"},{"type":"function","title":"calendar.local_time_to_universal_time/1","doc":"Converts from local time to Universal Coordinated Time (UTC). `DateTime1` must\nrefer to a local date after Jan 1, 1970.\n\n> #### Warning {: .warning }\n>\n> This function is deprecated. Use `local_time_to_universal_time_dst/1` instead,\n> as it gives a more correct and complete result. Especially for the period that\n> does not exist, as it is skipped during the switch _to_ daylight saving time,\n> this function still returns a result.","ref":"calendar.html#local_time_to_universal_time/1"},{"type":"function","title":"calendar.local_time_to_universal_time_dst/1","doc":"Converts from local time to Universal Coordinated Time (UTC). `DateTime1` must\nrefer to a local date after Jan 1, 1970.\n\nThe return value is a list of 0, 1, or 2 possible UTC times:\n\n- **`[]`** - For a local `{Date1, Time1}` during the period that is skipped when\n  switching _to_ daylight saving time, there is no corresponding UTC, as the\n  local time is illegal (it has never occured).\n\n- **`[DstDateTimeUTC, DateTimeUTC]`** - For a local `{Date1, Time1}` during the\n  period that is repeated when switching _from_ daylight saving time, two\n  corresponding UTCs exist; one for the first instance of the period when\n  daylight saving time is still active, and one for the second instance.\n\n- **`[DateTimeUTC]`** - For all other local times only one corresponding UTC\n  exists.","ref":"calendar.html#local_time_to_universal_time_dst/1"},{"type":"type","title":"calendar.minute/0","doc":"","ref":"calendar.html#t:minute/0"},{"type":"type","title":"calendar.month/0","doc":"","ref":"calendar.html#t:month/0"},{"type":"function","title":"calendar.now_to_datetime/1","doc":"Returns Universal Coordinated Time (UTC) converted from the return value from\n`erlang:timestamp/0`.","ref":"calendar.html#now_to_datetime/1"},{"type":"function","title":"calendar.now_to_local_time/1","doc":"Returns local date and time converted from the return value from\n`erlang:timestamp/0`.","ref":"calendar.html#now_to_local_time/1"},{"type":"function","title":"calendar.now_to_universal_time/1","doc":"Returns Universal Coordinated Time (UTC) converted from the return value from\n`erlang:timestamp/0`.","ref":"calendar.html#now_to_universal_time/1"},{"type":"type","title":"calendar.offset/0","doc":"","ref":"calendar.html#t:offset/0"},{"type":"type","title":"calendar.rfc3339_string/0","doc":"","ref":"calendar.html#t:rfc3339_string/0"},{"type":"type","title":"calendar.rfc3339_time_unit/0","doc":"The time unit used by the rfc3339 conversion functions.\n\n> #### Note {: .info }\n>\n> The `native` time unit was added to `t:rfc3339_time_unit/0` in OTP 25.0.","ref":"calendar.html#t:rfc3339_time_unit/0"},{"type":"function","title":"calendar.rfc3339_to_system_time/1","doc":"","ref":"calendar.html#rfc3339_to_system_time/1"},{"type":"function","title":"calendar.rfc3339_to_system_time/2","doc":"Converts an RFC 3339 timestamp into system time. The data format of RFC 3339\ntimestamps is described by [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt).\nStarting from OTP 25.1, the minutes part of the time zone is optional.\n\nValid option:\n\n- **`{unit, Unit}`** - The time unit of the return value. The default is\n  `second`.\n\n```erlang\n1> calendar:rfc3339_to_system_time(\"2018-02-01T16:17:58+01:00\").\n1517498278\n2> calendar:rfc3339_to_system_time(\"2018-02-01 15:18:02.088Z\",\n   [{unit, nanosecond}]).\n1517498282088000000\n```","ref":"calendar.html#rfc3339_to_system_time/2"},{"type":"type","title":"calendar.second/0","doc":"","ref":"calendar.html#t:second/0"},{"type":"function","title":"calendar.seconds_to_daystime/1","doc":"Converts a specified number of seconds into days, hours, minutes, and seconds.\n`Time` is always non-negative, but `Days` is negative if argument `Seconds` is.","ref":"calendar.html#seconds_to_daystime/1"},{"type":"function","title":"calendar.seconds_to_time/1","doc":"Computes the time from the specified number of seconds. `Seconds` must be less\nthan the number of seconds per day (86400).","ref":"calendar.html#seconds_to_time/1"},{"type":"type","title":"calendar.secs_per_day/0","doc":"","ref":"calendar.html#t:secs_per_day/0"},{"type":"function","title":"calendar.system_time_to_local_time/2","doc":"Converts a specified system time into local date and time.","ref":"calendar.html#system_time_to_local_time/2"},{"type":"function","title":"calendar.system_time_to_rfc3339/1","doc":"","ref":"calendar.html#system_time_to_rfc3339/1"},{"type":"function","title":"calendar.system_time_to_rfc3339/2","doc":"Converts a system time into an RFC 3339 timestamp.\n\nThe data format of RFC 3339 timestamps is described by [RFC 3339].\nThe data format of offsets is also described by [RFC 3339].\n\nValid options:\n\n- **`{offset, Offset}`** - The offset, either a string or an integer, to be\n  included in the formatted string. An empty string, which is the default, is\n  interpreted as local time. A non-empty string is included as is. The time unit\n  of the integer is the same as the one of `Time`.\n\n- **`{time_designator, Character}`** - The character used as time designator,\n  that is, the date and time separator. The default is `$T`.\n\n- **`{unit, Unit}`** - The time unit of `Time`. The default is `second`. If some\n  other unit is given (`millisecond`, `microsecond`, `nanosecond`, or `native`),\n  the formatted string includes a fraction of a second. The number of fractional\n  second digits is three, six, or nine depending on what time unit is chosen.\n  For `native` three fractional digits are included. Notice that trailing zeros\n  are not removed from the fraction.\n\n```erlang\n1> calendar:system_time_to_rfc3339(erlang:system_time(second)).\n\"2018-04-23T14:56:28+02:00\"\n2> calendar:system_time_to_rfc3339(erlang:system_time(second),\n   [{offset, \"-02:00\"}]).\n\"2018-04-23T10:56:52-02:00\"\n3> calendar:system_time_to_rfc3339(erlang:system_time(second),\n   [{offset, -7200}]).\n\"2018-04-23T10:57:05-02:00\"\n4> calendar:system_time_to_rfc3339(erlang:system_time(millisecond),\n   [{unit, millisecond}, {time_designator, $\\s}, {offset, \"Z\"}]).\n\"2018-04-23 12:57:20.482Z\"\n```\n[RFC 3339]: https://www.ietf.org/rfc/rfc3339.txt","ref":"calendar.html#system_time_to_rfc3339/2"},{"type":"function","title":"calendar.system_time_to_universal_time/2","doc":"Converts a specified system time into universal date and time.","ref":"calendar.html#system_time_to_universal_time/2"},{"type":"type","title":"calendar.time/0","doc":"","ref":"calendar.html#t:time/0"},{"type":"function","title":"calendar.time_difference/2","doc":"Returns the difference between two `{Date, Time}` tuples. `T2` is to refer to an\nepoch later than `T1`.\n\n> #### Warning {: .warning }\n>\n> This function is obsolete. Use the conversion functions for gregorian days and\n> seconds instead.","ref":"calendar.html#time_difference/2"},{"type":"function","title":"calendar.time_to_seconds/1","doc":"Returns the number of seconds since midnight up to the specified time.","ref":"calendar.html#time_to_seconds/1"},{"type":"function","title":"calendar.universal_time/0","doc":"Returns the Universal Coordinated Time (UTC) reported by the underlying\noperating system. Returns local time if universal time is unavailable.","ref":"calendar.html#universal_time/0"},{"type":"function","title":"calendar.universal_time_to_local_time/1","doc":"Converts from Universal Coordinated Time (UTC) to local time. `DateTime` must\nrefer to a date after Jan 1, 1970.","ref":"calendar.html#universal_time_to_local_time/1"},{"type":"function","title":"calendar.valid_date/1","doc":"This function checks if a date is a valid.","ref":"calendar.html#valid_date/1"},{"type":"function","title":"calendar.valid_date/3","doc":"","ref":"calendar.html#valid_date/3"},{"type":"type","title":"calendar.weeknum/0","doc":"","ref":"calendar.html#t:weeknum/0"},{"type":"type","title":"calendar.year1970/0","doc":"","ref":"calendar.html#t:year1970/0"},{"type":"type","title":"calendar.year/0","doc":"The year using the Gregorian calendar.\n\nYear cannot be abbreviated. For example, 93 denotes year 93, not 1993. The valid\nrange depends on the underlying operating system.","ref":"calendar.html#t:year/0"},{"type":"type","title":"calendar.yearweeknum/0","doc":"","ref":"calendar.html#t:yearweeknum/0"},{"type":"module","title":"timer","doc":"Timer functions.\n\nThis module provides useful functions related to time. Unless otherwise stated,\ntime is always measured in _milliseconds_. All timer functions return\nimmediately, regardless of work done by another process.\n\nSuccessful evaluations of the timer functions give return values containing a\ntimer reference, denoted `TRef`. By using `cancel/1`, the returned reference can\nbe used to cancel any requested action. A `TRef` is an Erlang term, which\ncontents must not be changed.\n\nThe time-outs are not exact, but are _at least_ as long as requested.\n\nCreating timers using `erlang:send_after/3` and `erlang:start_timer/3` is more\nefficient than using the timers provided by this module. However, the timer\nmodule has been improved in OTP 25, making it more efficient and less\nsusceptible to being overloaded. See\n[the Timer Module section in the Efficiency Guide](`e:system:commoncaveats.md#timer-module`).\n\nFor more information on timers in Erlang in general, see the\n[*Timers*](`e:erts:time_correction.md#timers`) section of the\n[*Time and Time Correction in Erlang*](`e:erts:time_correction.md`)\nERTS User's guide.","ref":"timer.html"},{"type":"module","title":"Examples - timer","doc":"_Example 1_\n\nThe following example shows how to print \"Hello World\\!\" in 5 seconds:\n\n```erlang\n1> timer:apply_after(5000, io, format, [\"~nHello World!~n\", []]).\n{ok,TRef}\nHello World!\n```\n\n_Example 2_\n\nThe following example shows a process performing a certain action, and if this\naction is not completed within a certain limit, the process is killed:\n\n```erlang\nPid = spawn(mod, fun, [foo, bar]),\n%% If pid is not finished in 10 seconds, kill him\n{ok, R} = timer:kill_after(timer:seconds(10), Pid),\n...\n%% We change our mind...\ntimer:cancel(R),\n...\n```","ref":"timer.html#module-examples"},{"type":"module","title":"Notes - timer","doc":"A timer can always be removed by calling `cancel/1`.\n\nAn interval timer, that is, a timer created by evaluating any of the functions\n`apply_interval/2`, `apply_interval/3`, `apply_interval/4`,\n`apply_repeatedly/2`, `apply_repeatedly/3`, `apply_repeatedly/4`,\n`send_interval/2`, and `send_interval/3` is linked to the process to which the\ntimer performs its task.\n\nA one-shot timer, that is, a timer created by evaluating any of the functions\n`apply_after/2`, `apply_after/3`, `apply_after/4`, `send_after/2`,\n`send_after/3`, `exit_after/2`, `exit_after/3`, `kill_after/1`, and\n`kill_after/2` is not linked to any process. Hence, such a timer is removed only\nwhen it reaches its time-out, or if it is explicitly removed by a call to\n`cancel/1`.\n\nThe functions given to `apply_after/2`, `apply_after/3`, `apply_interval/2`,\n`apply_interval/3`, `apply_repeatedly/2`, and `apply_repeatedly/3`, or denoted\nby `Module`, `Function` and `Arguments` given to `apply_after/4`,\n`apply_interval/4`, and `apply_repeatedly/4` are executed in a freshly-spawned\nprocess, and therefore calls to `self/0` in those functions will return the Pid\nof this process, which is different from the process that called\n`timer:apply_*`.\n\n_Example_\n\nIn the following example, the intention is to set a timer to execute a function\nafter 1 second, which performs a fictional task, and then wants to inform the\nprocess which set the timer about its completion, by sending it a `done`\nmessage.\n\nUsing `self/0` _inside_ the timed function, the code below does not work as\nintended. The task gets done, but the `done` message gets sent to the wrong\nprocess and is lost.\n\n```erlang\n1> timer:apply_after(1000, fun() -> do_something(), self() ! done end).\n{ok,TRef}\n2> receive done -> done after 5000 -> timeout end.\n%% ... 5s pass...\ntimeout\n```\n\nThe code below calls `self/0` in the process which sets the timer and assigns it\nto a variable, which is then used in the function to send the `done` message to,\nand so works as intended.\n\n```erlang\n1> Target = self()\n<0.82.0>\n2> timer:apply_after(1000, fun() -> do_something(), Target ! done end).\n{ok,TRef}\n3> receive done -> done after 5000 -> timeout end.\n%% ... 1s passes...\ndone\n```\n\nAnother option is to pass the message target as a parameter to the function.\n\n```erlang\n1> timer:apply_after(1000, fun(Target) -> do_something(), Target ! done end, [self()]).\n{ok,TRef}\n2> receive done -> done after 5000 -> timeout end.\n%% ... 1s passes...\ndone\n```","ref":"timer.html#module-notes"},{"type":"function","title":"timer.apply_after/2","doc":"Evaluates [`spawn(erlang, apply, [Function, []])`](`spawn/3`) after `Time`\nmilliseconds.","ref":"timer.html#apply_after/2"},{"type":"function","title":"timer.apply_after/3","doc":"Evaluates [`spawn(erlang, apply, [Function, Arguments])`](`spawn/3`) after\n`Time` milliseconds.","ref":"timer.html#apply_after/3"},{"type":"function","title":"timer.apply_after/4","doc":"Evaluates [`spawn(Module, Function, Arguments)`](`spawn/3`) after `Time`\nmilliseconds.","ref":"timer.html#apply_after/4"},{"type":"function","title":"timer.apply_interval/2","doc":"Evaluates [`spawn(erlang, apply, [Function, []])`](`spawn/3`) repeatedly at\nintervals of `Time`, irrespective of whether a previously spawned process has\nfinished or not.","ref":"timer.html#apply_interval/2"},{"type":"function","title":"timer.apply_interval/3","doc":"Evaluates [`spawn(erlang, apply, [Function, Arguments])`](`spawn/3`) repeatedly\nat intervals of `Time`, irrespective of whether a previously spawned process has\nfinished or not.","ref":"timer.html#apply_interval/3"},{"type":"function","title":"timer.apply_interval/4","doc":"Evaluates [`spawn(Module, Function, Arguments)`](`spawn/3`) repeatedly at\nintervals of `Time`, irrespective of whether a previously spawned process has\nfinished or not.\n\n> #### Warning {: .warning }\n>\n> If the execution time of the spawned process is, on average, greater than the\n> given `Time`, multiple such processes will run at the same time. With long\n> execution times, short intervals, and many interval timers running, this may\n> even lead to exceeding the number of allowed processes. As an extreme example,\n> consider\n> `[timer:apply_interval(1, timer, sleep, [1000]) || _ <- lists:seq(1, 1000)]`,\n> that is, 1,000 interval timers executing a process that takes 1s to complete,\n> started in intervals of 1ms, which would result in 1,000,000 processes running\n> at the same time, far more than a node started with default settings allows\n> (see the\n> [System Limits section in the Effiency Guide](`e:system:system_limits.md`)).","ref":"timer.html#apply_interval/4"},{"type":"function","title":"timer.apply_repeatedly/2","doc":"Evaluates [`spawn(erlang, apply, [Function, []])`](`spawn/3`) repeatedly at\nintervals of `Time`, waiting for the spawned process to finish before starting\nthe next.","ref":"timer.html#apply_repeatedly/2"},{"type":"function","title":"timer.apply_repeatedly/3","doc":"Evaluates [`spawn(erlang, apply, [Function, Arguments])`](`spawn/3`) repeatedly\nat intervals of `Time`, waiting for the spawned process to finish before\nstarting the next.","ref":"timer.html#apply_repeatedly/3"},{"type":"function","title":"timer.apply_repeatedly/4","doc":"Evaluates [`spawn(Module, Function, Arguments)`](`spawn/3`) repeatedly at\nintervals of `Time`, waiting for the spawned process to finish before starting\nthe next.\n\nIf the execution time of the spawned process is greater than the given `Time`,\nthe next process is spawned immediately after the one currently running has\nfinished. Assuming that execution times of the spawned processes performing the\napplies on average are smaller than `Time`, the amount of applies made over a\nlarge amount of time will be the same even if some individual execution times\nare larger than `Time`. The system will try to catch up as soon as possible. For\nexample, if one apply takes `2.5*Time`, the following two applies will be made\nimmediately one after the other in sequence.","ref":"timer.html#apply_repeatedly/4"},{"type":"function","title":"timer.cancel/1","doc":"Cancels a previously requested time-out. `TRef` is a unique timer reference\nreturned by the related timer function.\n\nReturns `{ok, cancel}`, or `{error, Reason}` when `TRef` is not a timer\nreference.","ref":"timer.html#cancel/1"},{"type":"function","title":"timer.exit_after/2","doc":"","ref":"timer.html#exit_after/2"},{"type":"function","title":"timer.exit_after/3","doc":"Sends an exit signal with reason `Reason1` to `Target`, which can be a local\nprocess identifier or an atom of a registered name.","ref":"timer.html#exit_after/3"},{"type":"function","title":"timer.hms/3","doc":"Returns the number of milliseconds in `Hours + Minutes + Seconds`.","ref":"timer.html#hms/3"},{"type":"function","title":"timer.hours/1","doc":"Returns the number of milliseconds in `Hours`.","ref":"timer.html#hours/1"},{"type":"function","title":"timer.kill_after/1","doc":"","ref":"timer.html#kill_after/1"},{"type":"function","title":"timer.kill_after/2","doc":"","ref":"timer.html#kill_after/2"},{"type":"function","title":"timer.minutes/1","doc":"Returns the number of milliseconds in `Minutes`.","ref":"timer.html#minutes/1"},{"type":"function","title":"timer.now_diff/2","doc":"Calculates the time difference `Tdiff = T2 - T1` in _microseconds_, where `T1`\nand `T2` are time-stamp tuples on the same format as returned from\n`erlang:timestamp/0` or `os:timestamp/0`.","ref":"timer.html#now_diff/2"},{"type":"function","title":"timer.seconds/1","doc":"Returns the number of milliseconds in `Seconds`.","ref":"timer.html#seconds/1"},{"type":"function","title":"timer.send_after/2","doc":"","ref":"timer.html#send_after/2"},{"type":"function","title":"timer.send_after/3","doc":"Evaluates `Destination ! Message` after `Time` milliseconds.\n\n`Destination` can be a remote or local process identifier, an atom of a\nregistered name or a tuple `{RegName, Node}` for a registered name at another node.\n\nSee also [the Timer Module section in the Efficiency Guide](`e:system:commoncaveats.md#timer-module`).","ref":"timer.html#send_after/3"},{"type":"function","title":"timer.send_interval/2","doc":"","ref":"timer.html#send_interval/2"},{"type":"function","title":"timer.send_interval/3","doc":"Evaluates `Destination ! Message` repeatedly after `Time` milliseconds.\n\n`Destination` can be a remote or local process identifier, an atom of a registered\nname or a tuple `{RegName, Node}` for a registered name at another node.","ref":"timer.html#send_interval/3"},{"type":"function","title":"timer.sleep/1","doc":"Suspends the process calling this function for `Time` milliseconds and then\nreturns `ok`, or suspends the process forever if `Time` is the atom `infinity`.\nNaturally, this function does _not_ return immediately.\n\n> #### Note {: .info }\n>\n> Before OTP 25, `timer:sleep/1` did not accept integer timeout values greater\n> than `16#ffffffff`, that is, `2^32-1`. Since OTP 25, arbitrarily high integer\n> values are accepted.","ref":"timer.html#sleep/1"},{"type":"function","title":"timer.start/0","doc":"Starts the timer server.\n\nNormally, the server does not need to be started explicitly. It is started dynamically\nif it is needed. This is useful during development, but in a target system the server\nis to be started explicitly. Use configuration parameters for [Kernel](`e:kernel:index.html`)\nfor this.","ref":"timer.html#start/0"},{"type":"function","title":"timer.tc/1","doc":"","ref":"timer.html#tc/1"},{"type":"function","title":"timer.tc/2","doc":"Measures the execution time of `Fun`.\n\nEquivalent to [`tc(Fun, Arguments, microsecond)`](`tc/3`) if called as `tc(Fun, Arguments)`.\n\nMeasures the execution time of `Fun` in `TimeUnit` if called as `tc(Fun, TimeUnit)`. Added in OTP 26.0.","ref":"timer.html#tc/2"},{"type":"function","title":"timer.tc/3","doc":"Measures the execution time of `Fun` or `apply(Module, Function, Arguments)`.\n\nEquivalent to [`tc(Module, Function, Arguments, microsecond)`](`tc/4`) if called as `tc(Module, Function, Arguments)`.\n\nEquivalent to [`tc(erlang, apply, [Fun, Arguments], TimeUnit)`](`tc/4`) if called as `tc(Fun, Arguments, TimeUnit)`. Added in OTP 26.0","ref":"timer.html#tc/3"},{"type":"function","title":"timer.tc/4","doc":"Evaluates [`apply(Module, Function, Arguments)`](`apply/3`) and measures the elapsed\nreal time as reported by `erlang:monotonic_time/0`.\n\nReturns `{Time, Value}`, where `Time` is the elapsed real time in the\nspecified `TimeUnit`, and `Value` is what is returned from the apply.","ref":"timer.html#tc/4"},{"type":"type","title":"timer.time/0","doc":"Time in milliseconds.","ref":"timer.html#t:time/0"},{"type":"opaque","title":"timer.tref/0","doc":"A timer reference.","ref":"timer.html#t:tref/0"},{"type":"module","title":"argparse","doc":"Command line arguments parser.\n\nThis module implements command line parser. Parser operates with _commands_ and\n_arguments_ represented as a tree. Commands are branches, and arguments are\nleaves of the tree. Parser always starts with the root command, named after\n`progname` (the name of the program which started Erlang).\n\nA [`command specification`](`t:command/0`) may contain handler definition for\neach command, and a number argument specifications. When parser is successful,\n`argparse` calls the matching handler, passing arguments extracted from the\ncommand line. Arguments can be positional (occupying specific position in the\ncommand line), and optional, residing anywhere but prefixed with a specified\ncharacter.\n\n`argparse` automatically generates help and usage messages. It will also issue\nerrors when users give the program invalid arguments.","ref":"argparse.html"},{"type":"module","title":"Quick start - argparse","doc":"`argparse` is designed to work with [`escript`](`e:erts:escript_cmd.md`). The\nexample below is a fully functioning Erlang program accepting two command line\narguments and printing their product.\n\n```erlang\n#!/usr/bin/env escript\n\nmain(Args) ->\n    argparse:run(Args, cli(), #{progname => mul}).\n\ncli() ->\n    #{\n        arguments => [\n            #{name => left, type => integer},\n            #{name => right, type => integer}\n        ],\n        handler =>\n            fun (#{left := Left, right := Right}) ->\n                io:format(\"~b~n\", [Left * Right])\n            end\n    }.\n```\n\nRunning this script with no arguments results in an error, accompanied by the\nusage information.\n\nThe `cli` function defines a single command with embedded handler accepting a\nmap. Keys of the map are argument names as defined by the `argument` field of\nthe command, `left` and `right` in the example. Values are taken from the\ncommand line, and converted into integers, as requested by the type\nspecification. Both arguments in the example above are required (and therefore\ndefined as positional).","ref":"argparse.html#module-quick-start"},{"type":"module","title":"Command hierarchy - argparse","doc":"A command may contain nested commands, forming a hierarchy. Arguments defined at\nthe upper level command are automatically added to all nested commands. Nested\ncommands example (assuming `progname` is `nested`):\n\n```erlang\ncli() ->\n  #{\n    %% top level argument applicable to all commands\n    arguments => [#{name => top}],\n      commands => #{\n        \"first\" => #{\n          %% argument applicable to \"first\" command and\n          %%  all commands nested into \"first\"\n          arguments => [#{name => mid}],\n          commands => #{\n            \"second\" => #{\n              %% argument only applicable for \"second\" command\n              arguments => [#{name => bottom}],\n              handler => fun (A) -> io:format(\"~p~n\", [A]) end\n          }\n        }\n      }\n    }\n  }.\n```\n\nIn the example above, a 3-level hierarchy is defined. First is the script itself\n(`nested`), accepting the only argument `top`. Since it has no associated\nhandler, `run/3` will not accept user input omitting nested command selection.\nFor this example, user has to supply 5 arguments in the command line, two being\ncommand names, and another 3 - required positional arguments:\n\n```text\n./nested.erl one first second two three\n#{top => \"one\",mid => \"two\",bottom => \"three\"}\n```\n\nCommands have preference over positional argument values. In the example above,\ncommands and positional arguments are interleaving, and `argparse` matches\ncommand name first.","ref":"argparse.html#module-command-hierarchy"},{"type":"module","title":"Arguments - argparse","doc":"`argparse` supports positional and optional arguments. Optional arguments, or\noptions for short, must be prefixed with a special character (`-` is the default\non all operating systems). Both options and positional arguments have 1 or more\nassociated values. See [`argument specification`](`t:argument/0`) to find more\ndetails about supported combinations.\n\nIn the user input, short options may be concatenated with their values. Long\noptions support values separated by `=`. Consider this definition:\n\n```erlang\ncli() ->\n  #{\n    arguments => [\n      #{name => long, long => \"-long\"},\n      #{name => short, short => $s}\n    ],\n    handler => fun (Args) -> io:format(\"~p~n\", [Args]) end\n  }.\n```\n\nRunning `./args --long=VALUE` prints `#{long => \"VALUE\"}`, running\n`./args -sVALUE` prints `#{short => \"VALUE\"}`\n\n`argparse` supports boolean flags concatenation: it is possible to shorten\n`-r -f -v` to `-rfv`.\n\nShortened option names are not supported: it is not possible to use `--my-argum`\ninstead of `--my-argument-name` even when such option can be unambiguously\nfound.","ref":"argparse.html#module-arguments"},{"type":"type","title":"argparse.arg_map/0","doc":"Arguments map is the map of argument names to the values extracted from the\ncommand line. It is passed to the matching command handler. If an argument is\nomitted, but has the default value is specified, it is added to the map. When no\ndefault value specified, and argument is not present in the command line,\ncorresponding key is not present in the resulting map.","ref":"argparse.html#t:arg_map/0"},{"type":"type","title":"argparse.arg_type/0","doc":"Defines type conversion applied to the string retrieved from the user input. If\nthe conversion is successful, resulting value is validated using optional\n`Choices`, or minimums and maximums (for integer and floating point values\nonly). Strings and binary values may be validated using regular expressions.\nIt's possible to define custom type conversion function, accepting a string and\nreturning Erlang term. If this function raises error with `badarg` reason,\nargument is treated as invalid.","ref":"argparse.html#t:arg_type/0"},{"type":"type","title":"argparse.argument/0","doc":"Argument specification. Defines a single named argument that is returned in the\n[`argument map`](`t:arg_map/0`). The only required field is `name`, all other\nfields have defaults.\n\nIf either of the `short` or `long` fields is specified, the argument is treated\nas optional. Optional arguments do not have specific order and may appear\nanywhere in the command line. Positional arguments are ordered the same way as\nthey appear in the arguments list of the command specification.\n\nBy default, all positional arguments must be present in the command line. The\nparser will return an error otherwise. Options, however, may be omitted, in\nwhich case resulting argument map will either contain the default value, or not\nhave the key at all.\n\n- **`name`** - Sets the argument name in the parsed argument map. If `help` is\n  not defined, name is also used to generate the default usage message.\n\n- **`short`** - Defines a short (single character) form of an optional argument.\n\n  ```erlang\n  %% Define a command accepting argument named myarg, with short form $a:\n  1> Cmd = #{arguments => [#{name => myarg, short => $a}]}.\n  %% Parse command line \"-a str\":\n  2> {ok, ArgMap, _, _} = argparse:parse([\"-a\", \"str\"], Cmd), ArgMap.\n\n  #{myarg => \"str\"}\n\n  %% Option value can be concatenated with the switch: \"-astr\"\n  3> {ok, ArgMap, _, _} = argparse:parse([\"-astr\"], Cmd), ArgMap.\n\n  #{myarg => \"str\"}\n  ```\n\n  By default all options expect a single value following the option switch. The\n  only exception is an option of a boolean type.\n\n- **`long`** - Defines a long form of an optional argument.\n\n  ```erlang\n  1> Cmd = #{arguments => [#{name => myarg, long => \"name\"}]}.\n  %% Parse command line \"-name Erlang\":\n  2> {ok, ArgMap, _, _} = argparse:parse([\"-name\", \"Erlang\"], Cmd), ArgMap.\n\n  #{myarg => \"Erlang\"}\n  %% Or use \"=\" to separate the switch and the value:\n  3> {ok, ArgMap, _, _} = argparse:parse([\"-name=Erlang\"], Cmd), ArgMap.\n\n  #{myarg => \"Erlang\"}\n  ```\n\n  If neither `short` not `long` is defined, the argument is treated as\n  positional.\n\n- **`required`** - Forces the parser to expect the argument to be present in the\n  command line. By default, all positional argument are required, and all\n  options are not.\n\n- **`default`** - Specifies the default value to put in the parsed argument map\n  if the value is not supplied in the command line.\n\n  ```erlang\n  1> argparse:parse([], #{arguments => [#{name => myarg, short => $m}]}).\n\n  {ok,#{}, ...\n  2> argparse:parse([], #{arguments => [#{name => myarg, short => $m, default => \"def\"}]}).\n\n  {ok,#{myarg => \"def\"}, ...\n  ```\n\n- **`type`** - Defines type conversion and validation routine. The default is\n  `string`, assuming no conversion.\n\n- **`nargs`** - Defines the number of following arguments to consume from the\n  command line. By default, the parser consumes the next argument and converts\n  it into an Erlang term according to the specified type.\n\n  - **`t:pos_integer/0`** - Consume exactly this number of positional arguments,\n    fail if there is not enough. Value in the argument map contains a list of\n    exactly this length. Example, defining a positional argument expecting 3\n    integer values:\n\n    ```erlang\n    1> Cmd = #{arguments => [#{name => ints, type => integer, nargs => 3}]},\n    argparse:parse([\"1\", \"2\", \"3\"], Cmd).\n\n    {ok, #{ints => [1, 2, 3]}, ...\n    ```\n\n    Another example defining an option accepted as `-env` and expecting two\n    string arguments:\n\n    ```erlang\n    1> Cmd = #{arguments => [#{name => env, long => \"env\", nargs => 2}]},\n    argparse:parse([\"-env\", \"key\", \"value\"], Cmd).\n\n    {ok, #{env => [\"key\", \"value\"]}, ...\n    ```\n\n  - **`list`** - Consume all following arguments until hitting the next option\n    (starting with an option prefix). May result in an empty list added to the\n    arguments map.\n\n    ```erlang\n    1> Cmd = #{arguments => [\n      #{name => nodes, long => \"nodes\", nargs => list},\n      #{name => verbose, short => $v, type => boolean}\n    ]},\n    argparse:parse([\"-nodes\", \"one\", \"two\", \"-v\"], Cmd).\n\n    {ok, #{nodes => [\"one\", \"two\"], verbose => true}, ...\n    ```\n\n  - **`nonempty_list`** - Same as `list`, but expects at least one argument.\n    Returns an error if the following command line argument is an option switch\n    (starting with the prefix).\n\n  - **`'maybe'`** - Consumes the next argument from the command line, if it does\n    not start with an option prefix. Otherwise, adds a default value to the\n    arguments map.\n\n    ```erlang\n    1> Cmd = #{arguments => [\n      #{name => level, short => $l, nargs => 'maybe', default => \"error\"},\n      #{name => verbose, short => $v, type => boolean}\n    ]},\n    argparse:parse([\"-l\", \"info\", \"-v\"], Cmd).\n\n    {ok,#{level => \"info\",verbose => true}, ...\n\n    %% When \"info\" is omitted, argument maps receives the default \"error\"\n    2> argparse:parse([\"-l\", \"-v\"], Cmd).\n\n    {ok,#{level => \"error\",verbose => true}, ...\n    ```\n\n  - **`{'maybe', term()}`** - Consumes the next argument from the command line,\n    if it does not start with an option prefix. Otherwise, adds a specified\n    Erlang term to the arguments map.\n\n  - **`all`** - Fold all remaining command line arguments into a list, ignoring\n    any option prefixes or switches. Useful for proxying arguments into another\n    command line utility.\n\n    ```erlang\n    1> Cmd = #{arguments => [\n        #{name => verbose, short => $v, type => boolean},\n        #{name => raw, long => \"-\", nargs => all}\n    ]},\n    argparse:parse([\"-v\", \"--\", \"-kernel\", \"arg\", \"opt\"], Cmd).\n\n    {ok,#{raw => [\"-kernel\",\"arg\",\"opt\"],verbose => true}, ...\n    ```\n\n- **`action`** - Defines an action to take when the argument is found in the\n  command line. The default action is `store`.\n\n  - **`store`** - Store the value in the arguments map. Overwrites the value\n    previously written.\n\n    ```erlang\n    1> Cmd = #{arguments => [#{name => str, short => $s}]},\n    argparse:parse([\"-s\", \"one\", \"-s\", \"two\"], Cmd).\n\n    {ok, #{str => \"two\"}, ...\n    ```\n\n  - **`{store, term()}`** - Stores the specified term instead of reading the\n    value from the command line.\n\n    ```erlang\n    1> Cmd = #{arguments => [#{name => str, short => $s, action => {store, \"two\"}}]},\n    argparse:parse([\"-s\"], Cmd).\n\n    {ok, #{str => \"two\"}, ...\n    ```\n\n  - **`append`** - Appends the repeating occurrences of the argument instead of\n    overwriting.\n\n    ```erlang\n    1> Cmd = #{arguments => [#{name => node, short => $n, action => append}]},\n    argparse:parse([\"-n\", \"one\", \"-n\", \"two\", \"-n\", \"three\"], Cmd).\n\n    {ok, #{node => [\"one\", \"two\", \"three\"]}, ...\n\n    %% Always produces a list - even if there is one occurrence\n    2> argparse:parse([\"-n\", \"one\"], Cmd).\n\n    {ok, #{node => [\"one\"]}, ...\n    ```\n\n  - **`{append, term()}`** - Same as `append`, but instead of consuming the\n    argument from the command line, appends a provided `t:term/0`.\n\n  - **`count`** - Puts a counter as a value in the arguments map. Useful for\n    implementing verbosity option:\n\n    ```erlang\n    1> Cmd = #{arguments => [#{name => verbose, short => $v, action => count}]},\n    argparse:parse([\"-v\"], Cmd).\n\n    {ok, #{verbose => 1}, ...\n\n    2> argparse:parse([\"-vvvv\"], Cmd).\n\n    {ok, #{verbose => 4}, ...\n    ```\n\n  - **`extend`** - Works as `append`, but flattens the resulting list. Valid\n    only for `nargs` set to `list`, `nonempty_list`, `all` or `t:pos_integer/0`.\n\n    ```erlang\n    1> Cmd = #{arguments => [#{name => duet, short => $d, nargs => 2, action => extend}]},\n    argparse:parse([\"-d\", \"a\", \"b\", \"-d\", \"c\", \"d\"], Cmd).\n\n    {ok, #{duet => [\"a\", \"b\", \"c\", \"d\"]}, ...\n\n    %% 'append' would result in {ok, #{duet => [[\"a\", \"b\"],[\"c\", \"d\"]]},\n    ```\n\n- **`help`** - Specifies help/usage text for the argument. `argparse` provides\n  automatic generation based on the argument name, type and default value, but\n  for better usability it is recommended to have a proper description. Setting\n  this field to `hidden` suppresses usage output for this argument.","ref":"argparse.html#t:argument/0"},{"type":"type","title":"argparse.argument_help/0","doc":"User-defined help template to print in the command usage. First element of a\ntuple must be a string. It is printed as a part of the usage header. Second\nelement of the tuple can be either a list containing strings, `type` and\n`default` atoms, or a user-defined function that must return a string. A plain\nstring should be wrapped as a list such as `[\"string is nested\"]`.","ref":"argparse.html#t:argument_help/0"},{"type":"type","title":"argparse.argument_name/0","doc":"Argument name is used to populate argument map.","ref":"argparse.html#t:argument_name/0"},{"type":"type","title":"argparse.cmd_path/0","doc":"Path to the nested command. First element is always the `progname`, subsequent\nelements are nested command names.","ref":"argparse.html#t:cmd_path/0"},{"type":"type","title":"argparse.command/0","doc":"Command specification. May contain nested commands, forming a hierarchy.\n\n- **`commands`** - Maps of nested commands. Keys must be strings, matching\n  command line input. Basic utilities do not need to specify any nested\n  commands.\n\n- **`arguments`** - List of arguments accepted by this command, and all nested\n  commands in the hierarchy.\n\n- **`help`** - Specifies help/usage text for this command. Pass `hidden` to\n  remove this command from the usage output.\n\n- **`handler`** - Specifies a callback function to call by `run/3` when the\n  parser is successful.","ref":"argparse.html#t:command/0"},{"type":"type","title":"argparse.command_help/0","doc":"User-defined help template. Use this option to mix custom and predefined usage\ntext. Help template may contain unicode strings, and following atoms:\n\n- **usage** - Formatted command line usage text, e.g. `rm [-rf]  `.\n\n- **commands** - Expanded list of sub-commands.\n\n- **arguments** - Detailed description of positional arguments.\n\n- **options** - Detailed description of optional arguments.","ref":"argparse.html#t:command_help/0"},{"type":"function","title":"argparse.format_error/1","doc":"Generates human-readable text for [`parser error`](`t:parser_error/0`). Does not\ninclude help/usage information, and does not provide localisation.","ref":"argparse.html#format_error/1"},{"type":"type","title":"argparse.handler/0","doc":"Command handler specification. Called by [`run/3` ](`run/3`)upon successful\nparser return.\n\n- **`fun((arg_map()) -> term())`** - Function accepting\n  [`argument map`](`t:arg_map/0`). See the basic example in the\n  [Quick Start](`m:argparse#module-quick-start`) section.\n\n- **`{Module :: module(), Function :: atom()}`** - Function named `Function`,\n  exported from `Module`, accepting [`argument map`](`t:arg_map/0`).\n\n- **`{fun(() -> term()), Default :: term()}`** - Function accepting as many\n  arguments as there are in the `arguments` list for this command. Arguments\n  missing from the parsed map are replaced with the `Default`. Convenient way to\n  expose existing functions.\n\n  ```erlang\n  1> Cmd = #{arguments => [\n          #{name => x, type => float},\n          #{name => y, type => float, short => $p}],\n      handler => {fun math:pow/2, 1}},\n  argparse:run([\"2\", \"-p\", \"3\"], Cmd, #{}).\n\n  8.0\n\n  %% default term 1 is passed to math:pow/2\n  2> argparse:run([\"2\"], Cmd, #{}).\n\n  2.0\n  ```\n\n- **`{Module :: module(), Function :: atom(), Default :: term()}`** - Function\n  named `Function`, exported from `Module`, accepting as many arguments as\n  defined for this command. Arguments missing from the parsed map are replaced\n  with the `Default`. Effectively, just a different syntax to the same\n  functionality as demonstrated in the code above.","ref":"argparse.html#t:handler/0"},{"type":"function","title":"argparse.help/1","doc":"","ref":"argparse.html#help/1"},{"type":"function","title":"argparse.help/2","doc":"Generates help/usage information text for the command supplied, or any nested\ncommand when `command` option is specified. Arguments are displayed in the same\norder as specified in `Command`. Does not provide localisation. Expects\n`progname` to be set, otherwise defaults to return value of\n`init:get_argument(progname)`.","ref":"argparse.html#help/2"},{"type":"function","title":"argparse.parse/2","doc":"","ref":"argparse.html#parse/2"},{"type":"function","title":"argparse.parse/3","doc":"Parses command line arguments according to the command specification. Raises an\nexception if the command specification is not valid. Use\n[`erl_error:format_exception/3,4` ](`erl_error:format_exception/3`)to see a\nfriendlier message. Invalid command line input does not raise an exception, but\nmakes `parse/2,3` to return a tuple\n[`{error, parser_error()}`](`t:parser_error/0`).\n\nThis function does not call command handler.","ref":"argparse.html#parse/3"},{"type":"type","title":"argparse.parse_result/0","doc":"Returned from [`parse/2,3`](`parse/3`). Contains arguments extracted from the\ncommand line, path to the nested command (if any), and a (potentially nested)\ncommand specification that was considered when the parser finished successfully.\nIt is expected that the command contains a handler definition, that will be\ncalled passing the argument map.","ref":"argparse.html#t:parse_result/0"},{"type":"type","title":"argparse.parser_error/0","doc":"Returned from [`parse/2,3`](`parse/3`) when the user input cannot be parsed\naccording to the command specification.\n\nFirst element is the path to the command that was considered when the parser\ndetected an error. Second element, `Expected`, is the argument specification\nthat caused an error. It could be `undefined`, meaning that `Actual` argument\nhad no corresponding specification in the arguments list for the current\ncommand.\n\nWhen `Actual` is set to `undefined`, it means that a required argument is\nmissing from the command line. If both `Expected` and `Actual` have values, it\nmeans validation error.\n\nUse `format_error/1` to generate a human-readable error description, unless\nthere is a need to provide localised error messages.","ref":"argparse.html#t:parser_error/0"},{"type":"type","title":"argparse.parser_options/0","doc":"Options changing parser behaviour.\n\n- **`prefixes`** - Changes the option prefix (the default is `-`).\n\n- **`default`** - Specifies the default value for all optional arguments. When\n  this field is set, resulting argument map will contain all argument names.\n  Useful for easy pattern matching on the argument map in the handler function.\n\n- **`progname`** - Specifies the program (root command) name. Returned as the\n  first element of the command path, and printed in help/usage text. It is\n  recommended to have this value set, otherwise the default one is determined\n  with `init:get_argument(progname)` and is often set to `erl` instead of the\n  actual script name.\n\n- **`command`** - Specifies the path to the nested command for `help/2`. Useful\n  to limit output for complex utilities with multiple commands, and used by the\n  default error handling logic.\n\n- **`columns`** - Specifies the help/usage text width (characters) for `help/2`.\n  Default value is 80.","ref":"argparse.html#t:parser_options/0"},{"type":"function","title":"argparse.run/3","doc":"Parses command line arguments and calls the matching command handler. Prints\nhuman-readable error, help/usage information for the discovered command, and\nhalts the emulator with code 1 if there is any error in the command\nspecification or user-provided command line input.\n\n> #### Warning {: .warning }\n>\n> This function is designed to work as an entry point to a standalone\n> [`escript`](`e:erts:escript_cmd.md`). Therefore, it halts the emulator for any\n> error detected. Do not use this function through remote procedure call, or it\n> may result in an unexpected shutdown of a remote node.","ref":"argparse.html#run/3"},{"type":"module","title":"escript","doc":"This module provides functions to create and inspect escripts.\n\nSee the [escript](`e:erts:escript_cmd.md`) program documentation\nfor more details on how to use escripts.","ref":"escript.html"},{"type":"type","title":"escript.comment/0","doc":"","ref":"escript.html#t:comment/0"},{"type":"function","title":"escript.create/2","doc":"Creates an escript from a list of sections.\n\nThe sections can be specified in any order. An escript begins with an optional\n`Header` followed by a mandatory `Body`. If the header is present, it does always\n begin with a `shebang`, possibly followed by a `comment` and `emu_args`. The\n`shebang` defaults to `\"/usr/bin/env escript\"`. The `comment` defaults to\n`\"This is an -*- erlang -*- file\"`. The created escript can either be returned\nas a binary or written to file.\n\nAs an example of how the function can be used, we create an interpreted escript\nthat uses `emu_args` to set some emulator flag. In this case, it happens to set\nnumber of schedulers with `+S3`. We also extract the different sections from the\nnewly created script:\n\n```erlang\n> Source = \"%% Demo\\nmain(_Args) ->\\n    io:format(\\\"~p\\\",[erlang:system_info(schedulers)]).\\n\".\n\"%% Demo\\nmain(_Args) ->\\n    io:format(erlang:system_info(schedulers)).\\n\"\n> io:format(\"~s\\n\", [Source]).\n%% Demo\nmain(_Args) ->\n    io:format(erlang:system_info(schedulers)).\n\nok\n> {ok, Bin} = escript:create(binary, [shebang, comment, {emu_args, \"+S3\"},\n                                      {source, list_to_binary(Source)}]).\n{ok,<<\"#!/usr/bin/env escript\\n%% This is an -*- erlang -*- file\\n%%!+S3\"...>>}\n> file:write_file(\"demo.escript\", Bin).\nok\n> os:cmd(\"escript demo.escript\").\n\"3\"\n> escript:extract(\"demo.escript\", []).\n{ok,[{shebang,default}, {comment,default}, {emu_args,\"+S3\"},\n     {source,<<\"%% Demo\\nmain(_Args) ->\\n    io:format(erlang:system_info(schedu\"...>>}]}\n```\n\nAn escript without header can be created as follows:\n\n```erlang\n> file:write_file(\"demo.erl\",\n                  [\"%% demo.erl\\n-module(demo).\\n-export([main/1]).\\n\\n\", Source]).\nok\n> {ok, _, BeamCode} = compile:file(\"demo.erl\", [binary, debug_info]).\n{ok,demo,\n    <<70,79,82,49,0,0,2,208,66,69,65,77,65,116,111,109,0,0,0,\n      79,0,0,0,9,4,100,...>>}\n> escript:create(\"demo.beam\", [{beam, BeamCode}]).\nok\n> escript:extract(\"demo.beam\", []).\n{ok,[{shebang,undefined}, {comment,undefined}, {emu_args,undefined},\n     {beam,<<70,79,82,49,0,0,3,68,66,69,65,77,65,116,\n             111,109,0,0,0,83,0,0,0,9,...>>}]}\n> os:cmd(\"escript demo.beam\").\n\"true\"\n```\n\nHere we create an archive script containing both Erlang code and Beam code, then\nwe iterate over all files in the archive and collect their contents and some\ninformation about them:\n\n```erlang\n> {ok, SourceCode} = file:read_file(\"demo.erl\").\n{ok,<<\"%% demo.erl\\n-module(demo).\\n-export([main/1]).\\n\\n%% Demo\\nmain(_Arg\"...>>}\n> escript:create(\"demo.escript\",\n                 [shebang,\n                  {archive, [{\"demo.erl\", SourceCode},\n                             {\"demo.beam\", BeamCode}], []}]).\nok\n> {ok, [{shebang,default}, {comment,undefined}, {emu_args,undefined},\n     {archive, ArchiveBin}]} = escript:extract(\"demo.escript\", []).\n{ok,[{shebang,default}, {comment,undefined}, {emu_args,undefined},\n     {{archive,<<80,75,3,4,20,0,0,0,8,0,118,7,98,60,105,\n                152,61,93,107,0,0,0,118,0,...>>}]}\n> file:write_file(\"demo.zip\", ArchiveBin).\nok\n> zip:foldl(fun(N, I, B, A) -> [{N, I(), B()} | A] end, [], \"demo.zip\").\n{ok,[{\"demo.beam\",\n      {file_info,748,regular,read_write,\n                 {{2010,3,2},{0,59,22}},\n                 {{2010,3,2},{0,59,22}},\n                 {{2010,3,2},{0,59,22}},\n                 54,1,0,0,0,0,0},\n      <<70,79,82,49,0,0,2,228,66,69,65,77,65,116,111,109,0,0,0,\n        83,0,0,...>>},\n     {\"demo.erl\",\n      {file_info,118,regular,read_write,\n                 {{2010,3,2},{0,59,22}},\n                 {{2010,3,2},{0,59,22}},\n                 {{2010,3,2},{0,59,22}},\n                 54,1,0,0,0,0,0},\n      <<\"%% demo.erl\\n-module(demo).\\n-export([main/1]).\\n\\n%% Demo\\nmain(_Arg\"...>>}]}\n```","ref":"escript.html#create/2"},{"type":"type","title":"escript.emu_args/0","doc":"Any arguments that should be passed to [erl](`e:erts:erl_cmd.md`) when starting.","ref":"escript.html#t:emu_args/0"},{"type":"function","title":"escript.extract/2","doc":"Parses an escript and extracts its sections. This is the reverse of `create/2`.\n\nAll sections are returned even if they do not exist in the escript. If a\nparticular section happens to have the same value as the default value, the\nextracted value is set to the atom `default`. If a section is missing, the\nextracted value is set to the atom `undefined`.\n\nOption `compile_source` only affects the result if the escript contains `source`\ncode. In this case the Erlang code is automatically compiled and\n`{source, BeamCode}` is returned instead of `{source, SourceCode}`.\n\nExample:\n\n```erlang\n> escript:create(\"demo.escript\",\n                 [shebang, {archive, [{\"demo.erl\", SourceCode},\n                                      {\"demo.beam\", BeamCode}], []}]).\nok\n> {ok, [{shebang,default}, {comment,undefined}, {emu_args,undefined},\n     {archive, ArchiveBin}]} =\n              escript:extract(\"demo.escript\", []).\n{ok,[{{archive,<<80,75,3,4,20,0,0,0,8,0,118,7,98,60,105,\n                152,61,93,107,0,0,0,118,0,...>>}\n     {emu_args,undefined}]}\n```","ref":"escript.html#extract/2"},{"type":"type","title":"escript.extract_option/0","doc":"","ref":"escript.html#t:extract_option/0"},{"type":"function","title":"escript.script_name/0","doc":"Returns the name of the escript that is executed.\n\nIf the function is invoked outside the context of an escript,\nthe behavior is undefined.","ref":"escript.html#script_name/0"},{"type":"type","title":"escript.section/0","doc":"","ref":"escript.html#t:section/0"},{"type":"type","title":"escript.section_name/0","doc":"","ref":"escript.html#t:section_name/0"},{"type":"type","title":"escript.shebang/0","doc":"The initial `#!` line.\n\nFor example:\n\n```text\n#!/usr/bin/env escript\n```","ref":"escript.html#t:shebang/0"},{"type":"type","title":"escript.zip_file/0","doc":"","ref":"escript.html#t:zip_file/0"},{"type":"module","title":"peer","doc":"Start and control linked Erlang nodes.\n\nThis module provides functions for starting linked Erlang nodes. The node\nspawning new nodes is called _origin_, and newly started nodes are _peer_ nodes,\nor peers. A peer node automatically terminates when it loses the _control\nconnection_ to the origin. This connection could be an Erlang distribution\nconnection, or an alternative - TCP or standard I/O. The alternative connection\nprovides a way to execute remote procedure calls even when Erlang Distribution\nis not available, allowing to test the distribution itself.\n\nPeer node terminal input/output is relayed through the origin. If a standard I/O\nalternative connection is requested, console output also goes via the origin,\nallowing debugging of node startup and boot script execution (see\n[`-init_debug`](`e:erts:erl_cmd.md#init_debug`)). File I/O is not redirected,\ncontrary to `m:slave` behaviour.\n\nThe peer node can start on the same or a different host (via `ssh`) or in a\nseparate container (for example Docker). When the peer starts on the same host\nas the origin, it inherits the current directory and environment variables from\nthe origin.\n\n> #### Note {: .info }\n>\n> This module is designed to facilitate multi-node testing with Common Test. Use\n> the `?CT_PEER()` macro to start a linked peer node according to Common Test\n> conventions: crash dumps written to specific location, node name prefixed with\n> module name, calling function, and origin OS process ID). Use `random_name/1`\n> to create sufficiently unique node names if you need more control.\n>\n> A peer node started without alternative connection behaves similarly to\n> `m:slave`. When an alternative connection is requested, the behaviour is\n> similar to `test_server:start_node(Name, peer, Args).`","ref":"peer.html"},{"type":"module","title":"Example - peer","doc":"The following example implements a test suite starting extra Erlang nodes. It\nemploys a number of techniques to speed up testing and reliably shut down peer\nnodes:\n\n- peers start linked to test runner process. If the test case fails, the peer\n  node is stopped automatically, leaving no rogue nodes running in the\n  background\n- arguments used to start the peer are saved in the control process state for\n  manual analysis. If the test case fails, the CRASH REPORT contains these\n  arguments\n- multiple test cases can run concurrently speeding up overall testing process,\n  peer node names are unique even when there are multiple instances of the same\n  test suite running in parallel\n\n```erlang\n-module(my_SUITE).\n-behaviour(ct_suite).\n-export([all/0, groups/0]).\n-export([basic/1, args/1, named/1, restart_node/1, multi_node/1]).\n\n-include_lib(\"common_test/include/ct.hrl\").\n\ngroups() ->\n    [{quick, [parallel],\n        [basic, args, named, restart_node, multi_node]}].\n\nall() ->\n    [{group, quick}].\n\nbasic(Config) when is_list(Config) ->\n    {ok, Peer, _Node} = ?CT_PEER(),\n    peer:stop(Peer).\n\nargs(Config) when is_list(Config) ->\n    %% specify additional arguments to the new node\n    {ok, Peer, _Node} = ?CT_PEER([\"-emu_flavor\", \"smp\"]),\n    peer:stop(Peer).\n\nnamed(Config) when is_list(Config) ->\n    %% pass test case name down to function starting nodes\n    Peer = start_node_impl(named_test),\n    peer:stop(Peer).\n\nstart_node_impl(ActualTestCase) ->\n    {ok, Peer, Node} = ?CT_PEER(#{name => ?CT_PEER_NAME(ActualTestCase)}),\n    %% extra setup needed for multiple test cases\n    ok = rpc:call(Node, application, set_env, [kernel, key, value]),\n    Peer.\n\nrestart_node(Config) when is_list(Config) ->\n    Name = ?CT_PEER_NAME(),\n    {ok, Peer, Node} = ?CT_PEER(#{name => Name}),\n    peer:stop(Peer),\n    %% restart the node with the same name as before\n    {ok, Peer2, Node} = ?CT_PEER(#{name => Name, args => [\"+fnl\"]}),\n    peer:stop(Peer2).\n```\n\nThe next example demonstrates how to start multiple nodes concurrently:\n\n```erlang\nmulti_node(Config) when is_list(Config) ->\n    Peers = [?CT_PEER(#{wait_boot => {self(), tag}})\n        || _ <- lists:seq(1, 4)],\n    %% wait for all nodes to complete boot process, get their names:\n    _Nodes = [receive {tag, {started, Node, Peer}} -> Node end\n        || {ok, Peer} <- Peers],\n    [peer:stop(Peer) || {ok, Peer} <- Peers].\n```\n\nStart a peer on a different host. Requires `ssh` key-based authentication set\nup, allowing \"another_host\" connection without password prompt.\n\n```erlang\nSsh = os:find_executable(\"ssh\"),\npeer:start_link(#{exec => {Ssh, [\"another_host\", \"erl\"]},\n    connection => standard_io}),\n```\n\nThe following Common Test case demonstrates Docker integration, starting two\ncontainers with hostnames \"one\" and \"two\". In this example Erlang nodes running\ninside containers form an Erlang cluster.\n\n```erlang\ndocker(Config) when is_list(Config) ->\n    Docker = os:find_executable(\"docker\"),\n    PrivDir = proplists:get_value(priv_dir, Config),\n    build_release(PrivDir),\n    build_image(PrivDir),\n\n    %% start two Docker containers\n    {ok, Peer, Node} = peer:start_link(#{name => lambda,\n        connection => standard_io,\n        exec => {Docker, [\"run\", \"-h\", \"one\", \"-i\", \"lambda\"]}}),\n    {ok, Peer2, Node2} = peer:start_link(#{name => lambda,\n        connection => standard_io,\n        exec => {Docker, [\"run\", \"-h\", \"two\", \"-i\", \"lambda\"]}}),\n\n    %% find IP address of the second node using alternative connection RPC\n    {ok, Ips} = peer:call(Peer2, inet, getifaddrs, []),\n    {\"eth0\", Eth0} = lists:keyfind(\"eth0\", 1, Ips),\n    {addr, Ip} = lists:keyfind(addr, 1, Eth0),\n\n    %% make first node to discover second one\n    ok = peer:call(Peer, inet_db, set_lookup, [[file]]),\n    ok = peer:call(Peer, inet_db, add_host, [Ip, [\"two\"]]),\n\n    %% join a cluster\n    true = peer:call(Peer, net_kernel, connect_node, [Node2]),\n    %% verify that second peer node has only the first node visible\n    [Node] = peer:call(Peer2, erlang, nodes, []),\n\n    %% stop peers, causing containers to also stop\n    peer:stop(Peer2),\n    peer:stop(Peer).\n\nbuild_release(Dir) ->\n    %% load sasl.app file, otherwise application:get_key will fail\n    application:load(sasl),\n    %% create *.rel - release file\n    RelFile = filename:join(Dir, \"lambda.rel\"),\n    Release = {release, {\"lambda\", \"1.0.0\"},\n        {erts, erlang:system_info(version)},\n        [{App, begin {ok, Vsn} = application:get_key(App, vsn), Vsn end}\n            || App <- [kernel, stdlib, sasl]]},\n    ok = file:write_file(RelFile, list_to_binary(lists:flatten(\n        io_lib:format(\"~tp.\", [Release])))),\n    RelFileNoExt = filename:join(Dir, \"lambda\"),\n\n    %% create boot script\n    {ok, systools_make, []} = systools:make_script(RelFileNoExt,\n        [silent, {outdir, Dir}]),\n    %% package release into *.tar.gz\n    ok = systools:make_tar(RelFileNoExt, [{erts, code:root_dir()}]).\n\nbuild_image(Dir) ->\n    %% Create Dockerfile example, working only for Ubuntu 20.04\n    %% Expose port 4445, and make Erlang distribution to listen\n    %%  on this port, and connect to it without EPMD\n    %% Set cookie on both nodes to be the same.\n    BuildScript = filename:join(Dir, \"Dockerfile\"),\n    Dockerfile =\n      \"FROM ubuntu:20.04 as runner\\n\"\n      \"EXPOSE 4445\\n\"\n      \"WORKDIR /opt/lambda\\n\"\n      \"COPY lambda.tar.gz /tmp\\n\"\n      \"RUN tar -zxvf /tmp/lambda.tar.gz -C /opt/lambda\\n\"\n      \"ENTRYPOINT [\\\"/opt/lambda/erts-\" ++ erlang:system_info(version) ++\n      \"/bin/dyn_erl\\\", \\\"-boot\\\", \\\"/opt/lambda/releases/1.0.0/start\\\",\"\n      \" \\\"-kernel\\\", \\\"inet_dist_listen_min\\\", \\\"4445\\\",\"\n      \" \\\"-erl_epmd_port\\\", \\\"4445\\\",\"\n      \" \\\"-setcookie\\\", \\\"secret\\\"]\\n\",\n    ok = file:write_file(BuildScript, Dockerfile),\n    os:cmd(\"docker build -t lambda \" ++ Dir).\n```","ref":"peer.html#module-example"},{"type":"function","title":"peer.call/4","doc":"","ref":"peer.html#call/4"},{"type":"function","title":"peer.call/5","doc":"Uses the alternative connection to evaluate\n[`apply(Module, Function, Args)`](`apply/3`) on the peer node and returns the\ncorresponding value `Result`.\n\n`Timeout` is an integer representing the timeout in milliseconds or the atom\n`infinity` which prevents the operation from ever timing out.\n\nWhen an alternative connection is not requested, this function will raise `exit`\nsignal with the `noconnection` reason. Use `m:erpc` module to communicate over\nErlang distribution.","ref":"peer.html#call/5"},{"type":"function","title":"peer.cast/4","doc":"Uses the alternative connection to evaluate\n[`apply(Module, Function, Args)`](`apply/3`) on the peer node. No response is\ndelivered to the calling process.\n\n`peer:cast/4` fails silently when the alternative connection is not configured.\nUse `m:erpc` module to communicate over Erlang distribution.","ref":"peer.html#cast/4"},{"type":"type","title":"peer.connection/0","doc":"Alternative connection between the origin and the peer. When the connection\ncloses, the peer node terminates automatically.\n\nIf the `peer_down` startup flag is set to `crash`, the controlling process on\nthe origin node exits with corresponding reason, effectively providing a two-way link.\n\nWhen `connection` is set to a port number, the origin starts listening on the\nrequested TCP port, and the peer node connects to the port. When it is set to an\n`{IP, Port}` tuple, the origin listens only on the specified IP. The port number\ncan be set to 0 for automatic selection.\n\nUsing the `standard_io` alternative connection starts the peer attached to the\norigin (other connections use `-detached` flag to erl). In this mode peer and\norigin communicate via stdin/stdout.","ref":"peer.html#t:connection/0"},{"type":"type","title":"peer.disconnect_timeout/0","doc":"Disconnect timeout. See [`stop()`](`stop/1`).","ref":"peer.html#t:disconnect_timeout/0"},{"type":"type","title":"peer.exec/0","doc":"Overrides executable to start peer nodes with.\n\nBy default it is the path to \"erl\", taken from `init:get_argument(progname)`.\nIf `progname` is not known, `peer` makes best guess given the current ERTS version.\n\nWhen a tuple is passed, the first element is the path to executable, and the\nsecond element is prepended to the final command line. This can be used to start\npeers on a remote host or in a Docker container. See the examples above.\n\nThis option is useful for testing backwards compatibility with previous\nreleases, installed at specific paths, or when the Erlang installation location\nis missing from the `PATH`.","ref":"peer.html#t:exec/0"},{"type":"function","title":"peer.get_state/1","doc":"Returns the peer node state.\n\nThe initial state is `booting`; the node stays in that state until then boot\nscript is complete, and then the node progresses to `running`. If the node stops\n(gracefully or not), the state changes to `down`.","ref":"peer.html#get_state/1"},{"type":"type","title":"peer.peer_state/0","doc":"Peer node state.","ref":"peer.html#t:peer_state/0"},{"type":"function","title":"peer.random_name/0","doc":"","ref":"peer.html#random_name/0"},{"type":"function","title":"peer.random_name/1","doc":"Creates a sufficiently unique node name for the current host, combining a\nprefix, a unique number, and the current OS process ID.\n\n> #### Note {: .info }\n>\n> Use the `?CT_PEER([\"erl_arg1\"])` macro provided by Common Test\n> `-include_lib(\"common_test/include/ct.hrl\")` for convenience. It starts a new\n> peer using Erlang distribution as the control channel, supplies thes calling\n> module's code path to the peer, and uses the calling function name for the\n> name prefix.","ref":"peer.html#random_name/1"},{"type":"function","title":"peer.send/3","doc":"Uses the alternative connection to send Message to a process on the the peer node.\n\nSilently fails if no alternative connection is configured. The process can\nbe referenced by process ID or registered name.","ref":"peer.html#send/3"},{"type":"type","title":"peer.server_ref/0","doc":"Identifies the controlling process of a peer node.","ref":"peer.html#t:server_ref/0"},{"type":"function","title":"peer.start/1","doc":"Starts a peer node with the specified `t:start_options/0`. Returns the\ncontrolling process and the full peer node name, unless `wait_boot` is not\nrequested and the host name is not known in advance.","ref":"peer.html#start/1"},{"type":"function","title":"peer.start_link/0","doc":"The same as [`start_link(#{name => random_name()})`](`start_link/1`).","ref":"peer.html#start_link/0"},{"type":"function","title":"peer.start_link/1","doc":"Starts a peer node in the same way as `start/1`, except that the peer node is\nlinked to the currently executing process. If that process terminates, the peer\nnode also terminates.\n\nAccepts `t:start_options/0`. Returns the controlling process and the full peer\nnode name, unless `wait_boot` is not requested and host name is not known in\nadvance.\n\nWhen the `standard_io` alternative connection is requested, and `wait_boot` is\nnot set to `false`, a failed peer boot sequence causes the caller to exit with\nthe `{boot_failed, {exit_status, ExitCode}}` reason.","ref":"peer.html#start_link/1"},{"type":"type","title":"peer.start_options/0","doc":"Options that can be used when starting a `peer` node through `start/1` and\n[`start_link/0,1`](`start_link/0`).\n\n- **`name`** - Node name (the part before \"@\"). When `name` is not specified,\n  but `host` is, `peer` follows compatibility behaviour and uses the origin node\n  name.\n\n- **`longnames`** - Use long names to start a node. Default is taken from the\n  origin using `net_kernel:longnames()`. If the origin is not distributed, short\n  names is the default.\n\n- **`host`** - Enforces a specific host name. Can be used to override the\n  default behaviour and start \"node@localhost\" instead of \"node@realhostname\".\n\n- **`peer_down`** - Defines the peer control process behaviour when the control\n  connection is closed from the peer node side (for example when the peer\n  crashes or dumps core). When set to `stop` (default), a lost control\n  connection causes the control process to exit normally. Setting `peer_down` to\n  `continue` keeps the control process running, and `crash` will cause the\n  controlling process to exit abnormally.\n\n- **`connection`** - Alternative connection specification. See the\n  [`connection` datatype](`t:connection/0`).\n\n- **`exec`** - Alternative mechanism to start peer nodes with, for example, ssh\n  instead of the default bash.\n\n- **`detached`** - Defines whether to pass the `-detached` flag to the started\n  peer. This option cannot be set to `false` using the `standard_io` alternative\n  connection type. Default is `true`.\n\n- **`args`** - Extra command line arguments to append to the \"erl\" command.\n  Arguments are passed as is, no escaping or quoting is needed or accepted.\n\n- **`post_process_args`** - Allows the user to change the arguments passed to\n  `exec` before the peer is started. This can for example be useful when the\n  `exec` program wants the arguments to \"erl\" as a single argument. Example:\n\n  ```erlang\n  peer:start(#{ name => peer:random_name(),\n    exec => {os:find_executable(\"bash\"),[\"-c\",\"erl\"]},\n    post_process_args =>\n       fun([\"-c\"|Args]) -> [\"-c\", lists:flatten(lists:join($\\s, Args))] end\n    }).\n  ```\n\n- **`env`** - List of environment variables with their values. This list is\n  applied to a locally started executable. If you need to change the environment\n  of the remote peer, adjust `args` to contain `-env ENV_KEY ENV_VALUE`.\n\n- **`wait_boot`** - Specifies the start/start_link timeout. See\n  [`wait_boot` datatype](`t:wait_boot/0`).\n\n- **`shutdown`** - Specifies the peer node stopping behaviour. See\n  [`stop()`](`stop/1`).","ref":"peer.html#t:start_options/0"},{"type":"function","title":"peer.stop/1","doc":"Stops a peer node. How the node is stopped depends on the\n[`shutdown`](`t:start_options/0`) option passed when starting the peer node.\nCurrently the following `shutdown` options are supported:\n\n- **`halt`** - This is the default shutdown behavior. It behaves as `shutdown`\n  option `{halt, DefaultTimeout}` where `DefaultTimeout` currently equals\n  `5000`.\n\n- **`{halt, Timeout :: disconnect_timeout()}`** - Triggers a call to\n  [`erlang:halt()`](`erlang:halt/0`) on the peer node and then waits for the\n  Erlang distribution connection to the peer node to be taken down. If this\n  connection has not been taken down after `Timeout` milliseconds, it will\n  forcefully be taken down by `peer:stop/1`. See the\n  [warning](`m:peer#dist_connection_close`) below for more info about this.\n\n- **`Timeout :: disconnect_timeout()`** - Triggers a call to\n  [`init:stop()`](`init:stop/0`) on the peer node and then waits for the Erlang\n  distribution connection to the peer node to be taken down. If this connection\n  has not been taken down after `Timeout` milliseconds, it will forcefully be\n  taken down by `peer:stop/1`. See the [warning](`m:peer#dist_connection_close`)\n  below for more info about this.\n\n- **`close`** - Close the _control connection_ to the peer node and return. This\n  is the fastest way for the caller of `peer:stop/1` to stop a peer node.\n\n  Note that if the Erlang distribution connection is not used as control\n  connection it might not have been taken down when `peer:stop/1` returns. Also\n  note that the [warning](`m:peer#dist_connection_close`) below applies when the\n  Erlang distribution connection is used as control connection.\n\n[](){: #dist_connection_close }\n\n> #### Warning {: .warning }\n>\n> In the cases where the Erlang distribution connection is taken down by\n> `peer:stop/1`, other code independent of the peer code might react to the\n> connection loss before the peer node is stopped which might cause undesirable\n> effects. For example, [`global`](`m:global#prevent_overlapping_partitions`)\n> might trigger even more Erlang distribution connections to other nodes to be\n> taken down. The potential undesirable effects are, however, not limited to\n> this. It is hard to say what the effects will be since these effects can be\n> caused by any code with links or monitors to something on the origin node, or\n> code monitoring the connection to the origin node.","ref":"peer.html#stop/1"},{"type":"type","title":"peer.wait_boot/0","doc":"Specifies start/start_link timeout in milliseconds. Can be set to `false`,\nallowing the peer to start asynchronously. If `{Pid, Tag}` is specified instead\nof a timeout, the peer will send `Tag` to the requested process.\n\nThe default is `15_000` ms.","ref":"peer.html#t:wait_boot/0"},{"type":"module","title":"slave","doc":"This module provides functions for starting Erlang slave nodes.\n\nAll slave nodes that are started by a master terminate automatically when the\nmaster terminates. All terminal output produced at the slave is sent back to\nthe master node. File I/O is done through the master.\n\nSlave nodes on other hosts than the current one are started with the `ssh`\nprogram. The user must be allowed to `ssh` to the remote hosts without being\nprompted for a password. This can be arranged in a number of ways (for details,\nsee the `ssh` documentation). A slave node started on the same host as the\nmaster inherits certain environment values from the master, such as the current\ndirectory and the environment variables. For what can be assumed about the\nenvironment when a slave is started on another host, see the documentation for\nthe `ssh` program.\n\nAn alternative to the `ssh` program can be specified on the command line to\n[`erl(1)`](`e:erts:erl_cmd.md`) as follows:\n\n```text\n-rsh Program\n```\n\nNote that the command specified with the `-rsh` flag is treated as a file name\nwhich may contain spaces. It is thus not possible to include any command line\noptions. The remote node will be launched as\n`\"$RSH\" \"$REMOTE_HOSTNAME\" erl -detached -noinput ...`, so the `erl` command\nmust be found in the path on the remote host.\n\nThe slave node is to use the same file system at the master. At least,\nErlang/OTP is to be installed in the same place on both computers and the same\nversion of Erlang is to be used.\n\nA node running on Windows can only start slave nodes on the host on which it is\nrunning.\n\nThe master node must be alive.","ref":"slave.html"},{"type":"function","title":"slave.pseudo/1","doc":"Calls [`pseudo(Master, ServerList)`](`pseudo/2`). If you want to start a node\nfrom the command line and set up a number of pseudo servers, an Erlang runtime\nsystem can be started as follows:\n\n```text\n% erl -name abc -s slave pseudo klacke@super x --\n```","ref":"slave.html#pseudo/1"},{"type":"function","title":"slave.pseudo/2","doc":"Starts a number of pseudo servers. A pseudo server is a server with a registered\nname that does nothing but pass on all message to the real server that executes\nat a master node. A pseudo server is an intermediary that only has the same\nregistered name as the real server.\n\nFor example, if you have started a slave node `N` and want to execute `pxw`\ngraphics code on this node, you can start server `pxw_server` as a pseudo server\nat the slave node. This is illustrated as follows:\n\n```erlang\nrpc:call(N, slave, pseudo, [node(), [pxw_server]]).\n```","ref":"slave.html#pseudo/2"},{"type":"function","title":"slave.relay/1","doc":"Runs a pseudo server. This function never returns any value and the process that\nexecutes the function receives messages. All messages received are simply passed\non to `Pid`.","ref":"slave.html#relay/1"},{"type":"function","title":"slave.start/1","doc":"Equivalent to [`start(Host, Name)`](`start/2`) where `Name` is the same\nas the node that executes this call.","ref":"slave.html#start/1"},{"type":"function","title":"slave.start/2","doc":"","ref":"slave.html#start/2"},{"type":"function","title":"slave.start/3","doc":"Starts a slave node on host `Host`. Host names need not necessarily be specified\nas fully qualified names; short names can also be used. This is the same\ncondition that applies to names of distributed Erlang nodes.\n\nThe name of the started node becomes `Name@Host`.\n\nThe slave node resets its `t:io:user/0` process so that all terminal I/O that is\nproduced at the slave is automatically relayed to the master. Also, the file\nserver is relayed to the master.\n\nArgument `Args` is used to set `erl` command-line arguments. It is\npassed to the new node and can be used for a variety of purposes; see\n[`erl(1)`](`e:erts:erl_cmd.md`).\n\nAs an example, suppose that you want to start a slave node at host `H` with node\nname `Name@H` and want the slave node to have the following properties:\n\n- Directory `Dir` is to be added to the code path.\n- The Mnesia directory is to be set to `M`.\n- The Unix `DISPLAY` environment variable is to be set to the display of the\n  master node.\n\nThe following code is executed to achieve this:\n\n```erlang\nE = \" -env DISPLAY \" ++ net_adm:localhost() ++ \":0 \",\nArg = \"-mnesia_dir \" ++ M ++ \" -pa \" ++ Dir ++ E,\nslave:start(H, Name, Arg).\n```\n\nThe function returns `{ok, Node}`, where `Node` is the name of the new node,\notherwise `{error, Reason}`, where `Reason` can be one of:\n\n- **`timeout`** - The master node failed to get in contact with the slave node.\n  This can occur in a number of circumstances:\n\n  - Erlang/OTP is not installed on the remote host.\n  - The file system on the other host has a different structure to the the\n    master.\n  - The Erlang nodes have different cookies.\n\n- **`no_rsh`** - No remote shell program was found on the computer. Note that\n  `ssh` is used by default, but this can be overridden with the `-rsh` flag.\n\n- **`{already_running, Node}`** - A node with name `Name@Host` already exists.","ref":"slave.html#start/3"},{"type":"function","title":"slave.start_link/1","doc":"","ref":"slave.html#start_link/1"},{"type":"function","title":"slave.start_link/2","doc":"","ref":"slave.html#start_link/2"},{"type":"function","title":"slave.start_link/3","doc":"Starts a slave node in the same way as `start/1,2,3`, except that the slave node\nis linked to the currently executing process. If that process terminates, the\nslave node also terminates.\n\nFor a description of arguments and return values, see\n[`start/1,2,3`](`start/1`).","ref":"slave.html#start_link/3"},{"type":"function","title":"slave.stop/1","doc":"Stops (kills) a node.","ref":"slave.html#stop/1"},{"type":"module","title":"win32reg","doc":"Provides access to the registry on Windows.\n\nThis module provides read and write access to the registry on Windows. It is\nessentially a port driver wrapped around the Win32 API calls for accessing the\nregistry.\n\nThe registry is a hierarchical database, used to store various system and\nsoftware information in Windows. It contains installation data, and is updated\nby installers and system programs. The Erlang installer updates the registry by\nadding data that Erlang needs.\n\nThe registry contains keys and values. Keys are like the directories in a file\nsystem, they form a hierarchy. Values are like files, they have a name and a\nvalue, and also a type.\n\nPaths to keys are left to right, with subkeys to the right and backslash between\nkeys. (Remember that backslashes must be doubled in Erlang strings.) Case is\npreserved but not significant.\n\nFor example, `\"\\\\hkey_local_machine\\\\software\\\\Ericsson\\\\Erlang\\\\5.0\"` is the\nkey for the installation data for the latest Erlang release.\n\nThere are six entry points in the Windows registry, top-level keys. They can be\nabbreviated in this module as follows:\n\n```text\nAbbreviation     Registry key\n============     ============\nhkcr             HKEY_CLASSES_ROOT\ncurrent_user     HKEY_CURRENT_USER\nhkcu             HKEY_CURRENT_USER\nlocal_machine    HKEY_LOCAL_MACHINE\nhklm             HKEY_LOCAL_MACHINE\nusers            HKEY_USERS\nhku              HKEY_USERS\ncurrent_config   HKEY_CURRENT_CONFIG\nhkcc             HKEY_CURRENT_CONFIG\ndyn_data         HKEY_DYN_DATA\nhkdd             HKEY_DYN_DATA\n```\n\nThe key above can be written as `\"\\\\hklm\\\\software\\\\ericsson\\\\erlang\\\\5.0\"`.\n\nThis module uses a current key. It works much like the current directory. From\nthe current key, values can be fetched, subkeys can be listed, and so on.\n\nUnder a key, any number of named values can be stored. They have names, types,\nand data.\n\n`win32reg` supports storing of the following types:\n\n- `REG_DWORD`, which is an integer\n- `REG_SZ`, which is a string\n- `REG_BINARY`, which is a binary\n\nOther types can be read, and are returned as binaries.\n\nThere is also a \"default\" value, which has the empty string as name. It is read\nand written with the atom `default` instead of the name.\n\nSome registry values are stored as strings with references to environment\nvariables, for example, `%SystemRoot%Windows`. `SystemRoot` is an environment\nvariable, and is to be replaced with its value. Function `expand/1` is provided\nso that environment variables surrounded by `%` can be expanded to their values.\n\nFor more information on the Windows registry, see consult the Win32 Programmer's\nReference.","ref":"win32reg.html"},{"type":"module","title":"See Also - win32reg","doc":"`erl_posix_msg`, The Windows 95 Registry (book from O'Reilly), Win32\nProgrammer's Reference (from Microsoft)","ref":"win32reg.html#module-see-also"},{"type":"function","title":"win32reg.change_key/2","doc":"Changes the current key to another key. Works like `cd`. The key can be\nspecified as a relative path or as an absolute path, starting with `\\.`","ref":"win32reg.html#change_key/2"},{"type":"function","title":"win32reg.change_key_create/2","doc":"Creates a key, or just changes to it, if it is already there. Works like a\ncombination of `mkdir` and `cd`. Calls the Win32 API function\n`RegCreateKeyEx()`.\n\nThe registry must have been opened in write mode.","ref":"win32reg.html#change_key_create/2"},{"type":"function","title":"win32reg.close/1","doc":"Closes the registry. After that, the `RegHandle` cannot be used.","ref":"win32reg.html#close/1"},{"type":"function","title":"win32reg.current_key/1","doc":"Returns the path to the current key. This is the equivalent of `pwd`.\n\nNotice that the current key is stored in the driver, and can be invalid (for\nexample, if the key has been removed).","ref":"win32reg.html#current_key/1"},{"type":"function","title":"win32reg.delete_key/1","doc":"Deletes the current key, if it is valid. Calls the Win32 API function\n`RegDeleteKey()`. Notice that this call does not change the current key (unlike\n`change_key_create/2`). This means that after the call, the current key is\ninvalid.","ref":"win32reg.html#delete_key/1"},{"type":"function","title":"win32reg.delete_value/2","doc":"Deletes a named value on the current key. The atom `default` is used for the\ndefault value.\n\nThe registry must have been opened in write mode.","ref":"win32reg.html#delete_value/2"},{"type":"function","title":"win32reg.expand/1","doc":"Expands a string containing environment variables between percent characters.\nAnything between two `%` is taken for an environment variable, and is replaced\nby the value. Two consecutive `%` are replaced by one `%`.\n\nA variable name that is not in the environment results in an error.","ref":"win32reg.html#expand/1"},{"type":"function","title":"win32reg.format_error/1","doc":"Converts a POSIX error code to a string (by calling `file:format_error/1`).","ref":"win32reg.html#format_error/1"},{"type":"type","title":"win32reg.name/0","doc":"","ref":"win32reg.html#t:name/0"},{"type":"function","title":"win32reg.open/1","doc":"Opens the registry for reading or writing. The current key is the root\n(`HKEY_CLASSES_ROOT`). Flag `read` in the mode list can be omitted.\n\nUse `change_key/2` with an absolute path after [`open`](`open/1`).","ref":"win32reg.html#open/1"},{"type":"opaque","title":"win32reg.reg_handle/0","doc":"As returned by `open/1`.","ref":"win32reg.html#t:reg_handle/0"},{"type":"function","title":"win32reg.set_value/3","doc":"Sets the named (or default) value to `value`. Calls the Win32 API function\n`RegSetValueEx()`. The value can be of three types, and the corresponding\nregistry type is used. The supported types are the following:\n\n- `REG_DWORD` for integers\n- `REG_SZ` for strings\n- `REG_BINARY` for binaries\n\nOther types cannot be added or changed.\n\nThe registry must have been opened in write mode.","ref":"win32reg.html#set_value/3"},{"type":"function","title":"win32reg.sub_keys/1","doc":"Returns a list of subkeys to the current key. Calls the Win32 API function\n`EnumRegKeysEx()`.\n\nAvoid calling this on the root keys, as it can be slow.","ref":"win32reg.html#sub_keys/1"},{"type":"type","title":"win32reg.value/0","doc":"","ref":"win32reg.html#t:value/0"},{"type":"function","title":"win32reg.value/2","doc":"Retrieves the named value (or default) on the current key. Registry values of\ntype `REG_SZ` are returned as strings. Type `REG_DWORD` values are returned as\nintegers. All other types are returned as binaries.","ref":"win32reg.html#value/2"},{"type":"function","title":"win32reg.values/1","doc":"Retrieves a list of all values on the current key. The values have types\ncorresponding to the registry types, see `value/2`. Calls the Win32 API function\n`EnumRegValuesEx()`.","ref":"win32reg.html#values/1"},{"type":"behaviour","title":"gen_event","doc":"Generic event handling behavior.\n\nThis behavior module provides event handling functionality.\nIt consists of a generic event manager process with any number of\nevent handlers that are added and deleted dynamically.\n\nAn event manager implemented using this module has a standard set of\ninterface functions and includes functionality for tracing\nand error reporting.  It also fits into an OTP supervision tree.\nFor more information, see [OTP Design Principles](`e:system:events.md`).\n\nEach event handler is implemented as a callback module\nexporting a predefined set of functions. The relationship between\nthe behavior functions and the callback functions is as follows:\n\n```text\ngen_event module                   Callback module\n----------------                   ---------------\ngen_event:start\ngen_event:start_monitor\ngen_event:start_link       ----->  -\n\ngen_event:add_handler\ngen_event:add_sup_handler  ----->  Module:init/1\n\ngen_event:notify\ngen_event:sync_notify      ----->  Module:handle_event/2\n\ngen_event:send_request\ngen_event:call             ----->  Module:handle_call/2\n\n-                          ----->  Module:handle_info/2\n\ngen_event:delete_handler   ----->  Module:terminate/2\n\ngen_event:swap_handler\ngen_event:swap_sup_handler ----->  Module1:terminate/2\n                                   Module2:init/1\n\ngen_event:which_handlers   ----->  -\n\ngen_event:stop             ----->  Module:terminate/2\n\n-                          ----->  Module:code_change/3\n```\n\nAs each event handler is one callback module, an event manager\nhas many callback modules that are added and deleted dynamically.\n`gen_event` is therefore more tolerant of callback module errors\nthan the other behaviors.  If a callback function for an installed\nevent handler fails with `Reason`, or returns a bad value `Term`,\nthe event manager does not fail.  It deletes the event handler\nby calling callback function [`Module:terminate/2`](`c:terminate/2`),\ngiving as argument `{error, {'EXIT', Reason}}` or `{error, Term}`,\nrespectively.  No other event handler is affected.\n\nA `gen_event` process handles system messages as described in `m:sys`.\nThe `sys` module can be used for debugging an event manager.\n\nNotice that an event manager _does_ trap exit signals automatically.\n\nThe `gen_event` process can go into hibernation\n(see `erlang:hibernate/3`) if a callback function in a handler module\nspecifies `hibernate` in its return value.  This can be useful\nif the server is expected to be idle for a long time.\nHowever, use this feature with care, as hibernation implies\nat least two garbage collections (when hibernating\nand shortly after waking up) and is not something you want to do\nbetween each event handled by a busy event manager.\n\nNotice that when multiple event handlers are invoked,\nit is sufficient that one single event handler returns a `hibernate`\nrequest for the whole event manager to go into hibernation.\n\nUnless otherwise stated, all functions in this module fail\nif the specified event manager does not exist\nor if bad arguments are specified.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_\n> ](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.\n> Blocking signaling can, for example, cause call timeouts in `gen_event`\n> to be significantly delayed.","ref":"gen_event.html"},{"type":"behaviour","title":"See Also - gen_event","doc":"`m:supervisor`, `m:sys`","ref":"gen_event.html#module-see-also"},{"type":"function","title":"gen_event.add_handler/3","doc":"Add a new event handler to an event manager.\n\nThe new event handler is added to event manager `EventMgrRef`.\nThe event manager calls [`Module:init/1`](`c:init/1`)\nto initiate the event handler and its internal state.\n\n`Handler` is the name of the callback module `Module`\nor a tuple `{Module, Id}`, where `Id` is any term.\nThe `{Module, Id}` representation makes it possible to\nidentify a specific event handler, when many event handlers\nuse the same callback module.\n\n`Args` is any term that is passed as the argument to\n[`Module:init/1`](`c:init/1`).\n\nIf [`Module:init/1`](`c:init/1`) returns a correct value\nindicating successful completion, the event manager\nadds the event handler and this function returns `ok`.\nIf [`Module:init/1`](`c:init/1`) fails with `Reason` or returns\n`{error,Reason}`, the event handler is ignored and this function\nreturns `{'EXIT',Reason}` or `{error,Reason}`, respectively.","ref":"gen_event.html#add_handler/3"},{"type":"type","title":"gen_event.add_handler_ret/0","doc":"","ref":"gen_event.html#t:add_handler_ret/0"},{"type":"function","title":"gen_event.add_sup_handler/3","doc":"Add a new event handler to an event manager, supervised.\n\nThe new event handler is added as for `add_handler/3`,\nbut the event manager also supervises the connection\nby linking the event handler and the calling process.\n\n- If the calling process later terminates with `Reason`,\n  the event manager deletes any supervised event handlers by calling\n  [`Module:terminate/2`](`c:terminate/2`), then calls\n  [`Module:handle_info/2`](`c:handle_info/2`) for each remaining handler.\n\n- If the event handler is deleted later, the event manager\n  sends a message `{gen_event_EXIT,Handler,Reason}`\n  to the calling process. `Reason` is one of the following:\n\n  + `normal`, if the event handler has been removed because of\n    a call to [`delete_handler/3`](`delete_handler/3`),\n    or `remove_handler` has been returned by a callback function\n    (see below).\n  + `shutdown`, if the event handler has been removed\n    because the event manager is terminating.\n  + `{swapped, NewHandler, Pid}`, if the process `Pid` has replaced\n    the event handler with another event handler `NewHandler`,\n    through a call to `swap_handler/3` or `swap_sup_handler/3`.\n  + Other `t:term/0`, if the event handler is removed\n    because of an error.  Which term depends on the error.\n\nFor a description of the arguments and return values, see `add_handler/3`.","ref":"gen_event.html#add_sup_handler/3"},{"type":"function","title":"gen_event.call/3","doc":"","ref":"gen_event.html#call/3"},{"type":"function","title":"gen_event.call/4","doc":"Make a synchronous call to an event handler.\n\nThe call is sent to `Handler`, installed in event manager `EventMgrRef`,\nby sending a request and waiting until a reply arrives,\nor a time-out occurs.  The event manager calls\n[`Module:handle_call/2`](`c:handle_call/2`) to handle the request.\n\n`Request` is any term that is passed as one of the arguments to\n[`Module:handle_call/2`](`c:handle_call/2`).\n\n`Timeout` is an integer greater than zero that specifies\nhow many milliseconds to wait for a reply, or the atom `infinity`\nto wait indefinitely.  Defaults to 5000.  If no reply is received\nwithin the specified time, the function call fails.\n\nThe return value `Reply` is defined in the return value of\n[`Module:handle_call/2`](`c:handle_call/2`).  If the specified\nevent handler is not installed, the function returns\n`{error, bad_module}`.  If the callback function fails with `Reason`,\nor returns an unexpected value `Term`, this function returns\n`{error, {'EXIT', Reason}}` or `{error, Term}`, respectively.\n\nWhen this call fails it [exits](`erlang:exit/1`) the calling process.\nThe exit term is on the form `{Reason, Location}` where\n`Location = {gen_event, call, ArgList}`. See `gen_server:call/3`\nthat has a description of relevant values for the `Reason`\nin the exit term.","ref":"gen_event.html#call/4"},{"type":"function","title":"gen_event.check_response/2","doc":"Check if a received message is a request response.\n\nCheck if `Msg` is a response corresponding to\nthe request identifier `ReqId`.  The request must have been made\nby `send_request/3`, and by the same process calling this function.\n\nIf `Msg` is a response corresponding to `ReqId` the response is returned\nin `Reply`.  Otherwise this function returns `no_reply`\nand no cleanup is done.  Thus this function must be invoked repeatedly\nuntil a response is returned.\n\nIf the specified event handler is not installed, the function returns\n`{error, bad_module}`.  If the callback function fails with `Reason`\nor returns an unexpected value `Term`, this function returns\n`{error, {'EXIT', Reason}}` or `{error, Term}`, respectively.\nIf the event manager has died before this function is called,\nthat is; `Msg` reports the server's death, this function returns\n`{error,{Reason, EventMgrRef}}` where `Reason` is the exit reason.","ref":"gen_event.html#check_response/2"},{"type":"function","title":"gen_event.check_response/3","doc":"Check if a received message is a request response in a collection.\n\nCheck if `Msg` is a response corresponding to a request identifier\nstored in `ReqIdCollection`.  All request identifiers of `ReqIdCollection`\nmust correspond to requests that have been made using `send_request/3`\nor `send_request/5`, and all requests must have been made\nby the process calling this function.\n\nThe `Label` in the response is the `Label` associated with\nthe request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [storing the request id](`reqids_add/3`) in a collection,\nor when sending the request using `send_request/5`.\n\nCompared to `check_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `check_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` will be returned.\n\nIf `Msg` does not correspond to any of the request identifiers\nin `ReqIdCollection`, `no_reply` is returned.\n\nIf `Delete` is `true`, the association with `Label` has been deleted\nfrom `ReqIdCollection` in the resulting `NewReqIdCollection`.\nIf `Delete` is `false`, `NewReqIdCollection` will equal `ReqIdCollection`.\nNote that deleting an association is not for free and that\na collection containing already handled requests\ncan still be used by subsequent calls to `check_response/3`),\n`receive_response/3`, and `wait_response/3`.\n\nHowever, without deleting handled associations, the above calls\nwill not be able to detect when there are no more outstanding requests\nto handle, so you will have to keep track of this some other way\nthan relying on a `no_request` return.  Note that if you pass\na collection only containing associations of already handled\nor abandoned requests to `check_response/3`,\nit will always return `no_reply`.","ref":"gen_event.html#check_response/3"},{"type":"callback","title":"gen_event.code_change/3","doc":"Update the event handler state after code change.\n\nThis function is called for an installed event handler\nthat is to update its internal state during a release upgrade/downgrade,\nthat is, when the instruction `{update, Module, Change,...}`,\nis specified in the [`appup`](`e:sasl:appup.md`) file.\n\nFor more information, see [OTP Design Principles](`e:system:index.html`).\n\nFor an upgrade, `OldVsn` is `Vsn`, and for a downgrade,\n`OldVsn` is `{down, Vsn}`.  `Vsn` is defined by the `vsn` attribute(s)\nof the old version of the callback module `Module`.  If no such attribute\nis defined, the version is the checksum of the Beam file.\n\n`State` is the internal state of the event handler.\n\n`Extra` is passed \"as is\" from the `{advanced, Extra}` part\nof the update instruction.\n\nThe function is to return the updated internal state.\n\n> #### Note {: .info }\n>\n> If a release upgrade/downgrade with `Change={advanced, Extra}`\n> specified in the [`.appup`](`e:sasl:appup.md`) file is made\n> when `c:code_change/3` is not implemented the event handler will crash\n> with an `undef` error reason.","ref":"gen_event.html#c:code_change/3"},{"type":"type","title":"gen_event.debug_flag/0","doc":"","ref":"gen_event.html#t:debug_flag/0"},{"type":"type","title":"gen_event.del_handler_ret/0","doc":"","ref":"gen_event.html#t:del_handler_ret/0"},{"type":"function","title":"gen_event.delete_handler/3","doc":"Deletes an event handler from an event manager.\n\nThis function deletes event handler `Handler` from event manager\n`EventMgrRef`. The event manager calls\n[`Module:terminate/2`](`c:terminate/2`) to terminate the event handler.\n\n`Args` is any term that is passed as one of the arguments to\n[`Module:terminate/2`](`c:terminate/2`).\n\nThe return value is the return value of\n[`Module:terminate/2`](`c:terminate/2`).  If the specified\nevent handler is not installed, the function returns\n`{error, module_not_found}`. If the callback function fails\nwith `Reason`, the function returns `{'EXIT', Reason}`.","ref":"gen_event.html#delete_handler/3"},{"type":"type","title":"gen_event.emgr_name/0","doc":"Event manager name specification: `local`, `global`, or `via` registered.\n\n- *`{local, Name}`* - the event manager is registered locally as\n  `Name` using [`register/2`](`register/2`).\n- *`{global, GlobalName}`* - The event manager is registered\n  globally as `GlobalName` using `global:register_name/2`.\n  If no name is provided, the event manager is not registered.\n- *`{via, Module, ViaName}`*, the event manager registers with the\n  registry represented by `Module`. The `Module` callback is to export\n  the functions `register_name/2`, `unregister_name/1`, `whereis_name/1`,\n  and `send/2`, which are to behave as the corresponding functions\n  in `m:global`.  Thus, `{via, global, GlobalName}` is a valid reference.","ref":"gen_event.html#t:emgr_name/0"},{"type":"type","title":"gen_event.emgr_ref/0","doc":"A reference used to locate an event manager.\n\nThe reference can be any of the following:\n\n- The pid of the event manager\n- `Name`, if the event manager is locally registered\n- `{Name, Node}`, if the event manager is locally registered\n  at another node\n- `{global, GlobalName}`, if the event manager is globally registered\n- `{via, Module, ViaName}`, if the event manager is registered through\n  an alternative process registry","ref":"gen_event.html#t:emgr_ref/0"},{"type":"type","title":"gen_event.format_status/0","doc":"A map that describes the `gen_event` process status.\n\nThe keys are:\n- **`state`** - The internal state of the event handler.\n- **`message`** - The message that caused the event handler to terminate.\n- **`reason`** - The reason that caused the event handler to terminate.\n- **`log`** - The [sys log](`sys:log/2`) of the server.\n\nNew associations may be added into the status map without prior notice.","ref":"gen_event.html#t:format_status/0"},{"type":"callback","title":"gen_event.format_status/1","doc":"Format/limit the status value.\n\nThis function is called by a `gen_event` process in in order to\nformat/limit the server state for debugging and logging purposes.\n\nIt is called in the following situations:\n\n- One of [`sys:get_status/1,2`](`sys:get_status/1`) is invoked\n  to get the `gen_event` status.\n\n- The event handler terminates abnormally and `gen_event` logs an error.\n\nThis callback is used to limit the status of the event handler returned by\n[`sys:get_status/1,2`](`sys:get_status/1`) or sent to `m:logger`.\n\nThe callback gets a map `Status` describing the current status\nand shall return a map `NewStatus` with the same keys,\nbut it may transform some values.\n\nTwo possible use cases for this callback is to remove\nsensitive information from the state to prevent it from being printed\nin log files, or to compact large irrelevant status items\nthat would only clutter the logs.\n\n_Example_:\n\n```erlang\nformat_status(Status) ->\n  maps:map(\n    fun(state,State) ->\n            maps:remove(private_key, State);\n       (message,{password, _Pass}) ->\n            {password, removed};\n       (_,Value) ->\n            Value\n    end, Status).\n```\n\n> #### Note {: .info }\n>\n> This callback is optional, so event handler modules need not export it.\n> If a handler does not export this function, the `gen_event` module\n> uses the handler state directly for the purposes described below.\n>\n> If this callback is exported but fails, to hide possibly sensitive data,\n> the default function will instead return the fact that\n> [`format_status/1`](`c:format_status/1`) has crashed.","ref":"gen_event.html#c:format_status/1"},{"type":"callback","title":"gen_event.format_status/2","doc":"Format/limit the status value.\n\nThis function is called by a `gen_event` process in in order to\nformat/limit the server state for debugging and logging purposes.\n\nIt is called in the following situations:\n\n- One of [`sys:get_status/1,2`](`sys:get_status/1`) is invoked\n  to get the `gen_event` status. `Opt` is set to the atom `normal`\n  for this case.\n\n- The event handler terminates abnormally and `gen_event` logs an error.\n  `Opt` is set to the atom `terminate` for this case.\n\nThis function is useful for changing the form and appearance of the event\nhandler state for these cases. An event handler callback module\nwishing to change the `sys:get_status/1,2` return value as well as\nhow its state appears in termination error logs, exports an instance of\n[`format_status/2`](`c:format_status/2`) that returns a term\ndescribing the current state of the event handler.\n\n`PDict` is the current value of the process dictionary of `gen_event`.\n\n`State` is the internal state of the event handler.\n\nThe function is to return `Status`, a term that change the details of\nthe current state of the event handler. Any term is allowed for `Status`.\nThe `gen_event` module uses `Status` as follows:\n\n- When `sys:get_status/1,2` is called, `gen_event` ensures that\n  its return value contains `Status` in place of the state term\n  of the event handler.\n\n- When an event handler terminates abnormally, `gen_event` logs `Status`\n  in place of the state term of the event handler.\n\nOne use for this function is to return compact alternative\nstate representations to avoid that large state terms\nare printed in log files.\n\n> #### Note {: .info }\n>\n> This callback is optional, so event handler modules need not export it.\n> If a handler does not export this function, the `gen_event` module\n> uses the handler state directly for the purposes described below.","ref":"gen_event.html#c:format_status/2"},{"type":"callback","title":"gen_event.handle_call/2","doc":"Handle a call.\n\nWhenever an event manager receives a request sent using\n[`call/3,4`](`call/3`), this function is called\nfor the specified event handler to handle the request.\n\n`Request` is the `Request` argument of `call/3,4`.\n\n`State` is the internal state of the event handler.\n\nThe return values are the same as for\n[`Module:handle_event/2`](`c:handle_event/2`) except that\nthey also contain a term `Reply`, which is the reply to the client\nas the return value of `call/3,4`.","ref":"gen_event.html#c:handle_call/2"},{"type":"callback","title":"gen_event.handle_event/2","doc":"Handle an event.\n\nWhenever an event manager receives an event sent using `notify/2` or\n`sync_notify/2`, this function is called for each installed event handler\nto handle the event.\n\n`Event` is the `Event` argument of `notify/2` / `sync_notify/2`.\n\n`State` is the internal state of the event handler.\n\n- If `{ok, NewState}` or `{ok, NewState, hibernate}` is returned,\n  the event handler remains in the event manager with the possibly\n  updated internal state `NewState`.\n\n- If `{ok, NewState, hibernate}` is returned, the event manager\n  also goes into hibernation (by calling `proc_lib:hibernate/3`),\n  waiting for the next event to occur.  It is sufficient\n  that one of the event handlers return `{ok, NewState, hibernate}`\n  for the whole event manager process to hibernate.\n\n- If `{swap_handler, Args1, NewState, Handler2, Args2}` is returned,\n  the event handler is replaced by `Handler2` by first calling\n  [`Module:terminate(Args1, NewState)`](`c:terminate/2`) and then\n  [`Module2:init({Args2, Term})`](`c:init/1`), where `Term`\n  is the return value of [`Module:terminate/2`](`c:terminate/2`).\n  For more information, see `swap_handler/3`.\n\n- If `remove_handler` is returned, the event handler is deleted by calling\n  [`Module:terminate(remove_handler, State)`](`c:terminate/2`).","ref":"gen_event.html#c:handle_event/2"},{"type":"callback","title":"gen_event.handle_info/2","doc":"Handle an info message (regular process message).\n\nThis function is called for each installed event handler when\nan event manager receives any other message than an event\nor a synchronous request (or a system message).\n\n`Info` is the received message.\n\nIn particular, this callback will be made when a process terminated\nafter calling `add_sup_handler/3`. Any event handler attached to\nan event manager which in turn has a supervised handler\nshould expect callbacks of the shape\n[`Module:handle_info({'EXIT', Pid, Reason}, State)`](`c:handle_info/2`).\n\nFor a description of `State` and possible return values,\nsee [`Module:handle_event/2`](`c:handle_event/2`).\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need not export it.\n> The `gen_event` module provides a default implementation\n> of this function that logs about the unexpected `Info` message,\n> drops it and returns `{ok, State}`.","ref":"gen_event.html#c:handle_info/2"},{"type":"type","title":"gen_event.handler/0","doc":"","ref":"gen_event.html#t:handler/0"},{"type":"type","title":"gen_event.handler_args/0","doc":"","ref":"gen_event.html#t:handler_args/0"},{"type":"callback","title":"gen_event.init/1","doc":"Initialize the event handler.\n\nWhenever a new event handler is added to an event manager,\nthis function is called to initialize the event handler.\n\nIf the event handler is added because of a call to `add_handler/3` or\n`add_sup_handler/3`, `InitArgs` is the `Args` argument of these functions.\n\nIf the event handler replaces another event handler because of\na call to `swap_handler/3` or `swap_sup_handler/3`, or because of\na `swap` return tuple from one of the other callback functions,\n`InitArgs` is a tuple `{Args, Term}`, where `Args` is the argument\nprovided in the function call/return tuple and `Term` is the result\nof terminating the old event handler, see `swap_handler/3`.\n\nIf successful, the function returns `{ok, State}` or\n`{ok, State, hibernate}`, where `State` is the initial internal state\nof the event handler.\n\nIf `{ok, State, hibernate}` is returned, the event manager\ngoes into hibernation (by calling `proc_lib:hibernate/3`),\nwaiting for the next event to occur.","ref":"gen_event.html#c:init/1"},{"type":"function","title":"gen_event.notify/2","doc":"Send an asynchronous event notification to an event manager.\n\nThe event is sent to `EventMgrRef`, that calls\n[`Module:handle_event/2`](`c:handle_event/2`) for each installed\nevent handler to handle the event.\n\n`Event` is any term that is passed as one of the arguments to\n[`Module:handle_event/2`](`c:handle_event/2`).\n\n`notify/1` does not fail even if the specified event manager\ndoes not exist, unless it is specified as `Name`.","ref":"gen_event.html#notify/2"},{"type":"type","title":"gen_event.options/0","doc":"Options that can be used to configure an event handler\nwhen it is started.","ref":"gen_event.html#t:options/0"},{"type":"function","title":"gen_event.receive_response/2","doc":"Receive a request response.\n\nReceive a response corresponding to the request identifier `ReqId`.\nThe request must have been made by `send_request/3`,\nand it must have been made from the same process calling this function.\n\n`Timeout` specifies how long to wait for a response.\nIf no response is received within the specified time,\nthis function returns `timeout`. Assuming that the\nserver executes on a node supporting aliases (introduced in OTP 24)\nthe request will also be abandoned.  That is,\nno response will be received after a timeout.\nOtherwise, a stray response might be received at a later time.\n\nThe return value `Reply` is defined in the return value of\n[`Module:handle_call/2`](`c:handle_call/2`).\n\nIf the specified event handler is not installed, this function returns\n`{error, bad_module}`. If the callback function fails\nwith `Reason` or returns an unexpected value `Term`,\nthis function returns `{error, {'EXIT', Reason}}` or`{error,Term}`,\nrespectively.  If the event manager dies before or during the\nrequest this function returns `{error, {Reason, EventMgrRef}}`.\n\nThe difference between `wait_response/2` and `receive_response/2`\nis that `receive_response/2` abandons the request at time-out\nso that a potential future response is ignored,\nwhile [`wait_response/2`](`wait_response/2`) does not.","ref":"gen_event.html#receive_response/2"},{"type":"function","title":"gen_event.receive_response/3","doc":"Receive a request response in a collection.\n\nReceive a response in `ReqIdCollection`. All request identifiers\nof `ReqIdCollection` must correspond to requests that have been\nmade using `send_request/3` or `send_request/5`, and all requests\nmust have been made by the process calling this function.\n\nThe `Label` in the response is the `Label` associated with\nthe request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [adding the request id](`reqids_add/3`) to a collection,\nor when sending the request using `send_request/5`.\n\nCompared to `receive_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `receive_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` will be returned.\n\n`Timeout` specifies how long to wait for a response.  If no response\nis received within the specified time, the function returns `timeout`.\nAssuming that the server executes on a node supporting aliases\n(introduced in OTP 24) all requests identified by `ReqIdCollection`\nwill also be abandoned.  That is, no responses will be received\nafter a time-out.  Otherwise, stray responses might be received\nat a later time.\n\nThe difference between `receive_response/3` and `wait_response/3`\nis that `receive_response/3` abandons the requests at time-out\nso that potential future responses are ignored,\nwhile `wait_response/3` does not.\n\nIf `Delete` is `true`, the association with `Label`\nis deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`.  If `Delete` is `false`, `NewReqIdCollection`\nwill equal `ReqIdCollection`.  Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`receive_response/3`, `check_response/3`, and `wait_response/3`.\n\nHowever, without deleting handled associations,\nthe above calls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests to\n`receive_response/3`, it will always block until `Timeout` expires\nand then return `timeout`.","ref":"gen_event.html#receive_response/3"},{"type":"function","title":"gen_event.reqids_add/3","doc":"Store a request identifier in a colletion.\n\nStores `ReqId` and associates a `Label` with the request identifier\nby adding this information to `ReqIdCollection` and returning\nthe resulting request identifier collection.","ref":"gen_event.html#reqids_add/3"},{"type":"function","title":"gen_event.reqids_new/0","doc":"Create an empty request identifier collection.\n\nReturns a new empty request identifier collection.\nA request identifier collection can be utilized to handle\nmultiple outstanding requests.\n\nRequest identifiers of requests made by `send_request/3`\ncan be saved in a request identifier collection using `reqids_add/3`.\nSuch a collection of request identifiers can later be used\nin order to get one response corresponding to a request\nin the collection by passing the collection as argument to\n`receive_response/3`, `wait_response/3`, or, `check_response/3`.\n\n`reqids_size/1` can be used to determine the number of\nrequest identifiers in a collection.","ref":"gen_event.html#reqids_new/0"},{"type":"function","title":"gen_event.reqids_size/1","doc":"Returns the number of request identifiers in `ReqIdCollection`.","ref":"gen_event.html#reqids_size/1"},{"type":"function","title":"gen_event.reqids_to_list/1","doc":"Convert a request identifier collection to a list.\n\nReturns a list of `{ReqId, Label}` tuples which corresponds to\nall request identifiers with their associated labels\nin [`ReqIdCollection`](`t:request_id_collection/0`).","ref":"gen_event.html#reqids_to_list/1"},{"type":"opaque","title":"gen_event.request_id/0","doc":"An opaque request identifier. See `send_request/3` for details.","ref":"gen_event.html#t:request_id/0"},{"type":"opaque","title":"gen_event.request_id_collection/0","doc":"An opaque collection of request identifiers (`t:request_id/0`).\n\nEach request identifier can be associated with a label\nchosen by the user.  For more information see `reqids_new/0`.","ref":"gen_event.html#t:request_id_collection/0"},{"type":"type","title":"gen_event.response_timeout/0","doc":"Response time-out for an asynchronous call.\n\nUsed to set a time limit on how long to wait for a response using either\n`receive_response/2`, `receive_response/3`, `wait_response/2`, or\n`wait_response/3`. The time unit used is `millisecond`.\nCurrently valid values:\n\n- **`0..4294967295`** - Timeout relative to current time in milliseconds.\n\n- **`infinity`** - Infinite timeout. That is, the operation\n  will never time out.\n\n- **`{abs, Timeout}`** - An absolute\n  [Erlang monotonic time](`erlang:monotonic_time/1`) timeout\n  in milliseconds.  That is, the operation will time out when\n  [`erlang:monotonic_time(millisecond)`](`erlang:monotonic_time/1`)\n  returns a value larger than or equal to `Timeout`.\n `Timeout` is not allowed to identify a time further into the future\n  than `4294967295` milliseconds. Identifying the timeout using\n  an absolute timeout value is especially handy when you have a\n  deadline for responses corresponding to a complete collection\n  of requests (`t:request_id_collection/0`) , since you do not have to\n  recalculate the relative time until the deadline over and over again.","ref":"gen_event.html#t:response_timeout/0"},{"type":"function","title":"gen_event.send_request/3","doc":"Send an asynchronous `call` request to an event handler.\n\nThis function sends the call request `Request` to the event handler\n`Handler` installed in the event manager identified by `EventMgrRef`,\nand returns a request identifier `ReqId`.  The return value `ReqId`\nshall later be used with `receive_response/2`, `wait_response/2`,\nor `check_response/2` to fetch the actual result of the request.\n\nBesides passing the request identifier directly to these functions,\nit can also be stored in a request identifier collection\nusing `reqids_add/3`.  Such a collection of request identifiers\ncan later be used in order to get one response corresponding to\na request in the collection by passing the collection as argument to\n`receive_response/3`, `wait_response/3`, or `check_response/3`.\nIf you are about to store the request identifier in a collection,\nyou may want to consider using `send_request/5` instead.\n\nThe calls\n`gen_event:receive_response(gen_event:send_request(EventMgrRef,\nHandler, Request), Timeout)`\ncan be seen as equivalent to\n[`gen_event:call(EventMgrRef, Handler, Request, Timeout)`](`call/3`),\nignoring the error handling.\n\nThe event manager calls [`Module:handle_call/2`](`c:handle_call/2`)\nto handle the request.\n\n`Request` may be any term and is passed as one of the arguments to\n[`Module:handle_call/2`](`c:handle_call/2`).","ref":"gen_event.html#send_request/3"},{"type":"function","title":"gen_event.send_request/5","doc":"Send an asynchronous `call` request to an event handler,\nstoring it in a request identifier collection.\n\nThis function sends the call request `Request` to the event handler\n`Handler` installed in the event manager identified by `EventMgrRef`.\nThe `Label` will be associated with the request identifier\nof the operation and added to the returned\nrequest identifier collection `NewReqIdCollection`.\n\nThe collection can later be used in order to get one response\ncorresponding to a request in the collection by passing the collection\nas argument to `receive_response/3`, `wait_response/3`,\nor `check_response/3`.\n\nThe same as calling\n[`gen_event:reqids_add`](`reqids_add/3`)`(`[`gen_event:send_request`](`send_request/3`)`(EventMgrRef, Handler, Request), Label, ReqIdCollection)`,\nbut slightly more efficient.","ref":"gen_event.html#send_request/5"},{"type":"function","title":"gen_event.start/0","doc":"","ref":"gen_event.html#start/0"},{"type":"function","title":"gen_event.start/1","doc":"Create a stand-alone event manager process, possibly nameless.\n\nEquivalent to [`start(EventMgrName, Options)`](`start/2`).\n\nWith argument `EventMgrName`, `Options` is `[]`.\n\nWith argument `Options` a nameless event manager is created.\n\nFor a description of the arguments and return values, see `start_link/2`.","ref":"gen_event.html#start/1"},{"type":"function","title":"gen_event.start/2","doc":"Create a stand-alone event manager process.\n\nThe created event manager process is not part of a supervision tree\nand thus has no supervisor.\n\nFor a description of the arguments and return values, see `start_link/2`.","ref":"gen_event.html#start/2"},{"type":"function","title":"gen_event.start_link/0","doc":"","ref":"gen_event.html#start_link/0"},{"type":"function","title":"gen_event.start_link/1","doc":"Create an event manager process as part of a supervision tree,\npossibly nameless.\n\nEquivalent to [`start_link(EventMgrName, Options)`](`start_link/2`).\n\nWith argument `EventMgrName`, `Options` is `[]`.\n\nWith argument `Options` a nameless event manager is created.\n\nFor a description of the arguments and return values, see `start_link/2`.","ref":"gen_event.html#start_link/1"},{"type":"function","title":"gen_event.start_link/2","doc":"Create an event manager process as part of a supervision tree.\n\nThe function is to be called, directly or indirectly, by the supervisor.\nFor example, it ensures that the event manager is linked\nto the caller (supervisor).\n\n- If option `{hibernate_after, HibernateAfterTimeout}` is present, the\n  `gen_event` process awaits any message for `HibernateAfterTimeout`\n  milliseconds and if no message is received, the process\n  goes into hibernation automatically (by calling `proc_lib:hibernate/3`).\n\nIf the event manager is successfully created,\nthe function returns `{ok, Pid}` where `Pid` is the `t:pid/0`\nof the event manager.\n\nIf a process with the specified `EventMgrName` exists already,\nthe function returns `{error,{already_started,OtherPid}}`,\nwhere `OtherPid` is the pid of that process, and the event manager process\nexits with reason `normal`.\n\nIf the event manager fails to start within the specified start timeout\n`{timeout, Time}`, which is very unlikely since the start\ndoes not interact with other processes, the function returns\n`{error, timeout}` and the failed event manager is killed with\n[`exit(_, kill)`](`erlang:exit/2`).\n\nIf `start_link/1,2` returns `{error, _}`, the started event manager process\nhas terminated.  If an `'EXIT'` message was delivered\nto the calling process (due to the process link), that message\nhas been consumed.\n\n> #### Warning {: .warning }\n>\n> Before OTP 26.0, if the started event manager failed to register\n> its name, this founction could return\n> `{error, {already_started, OtherPid}}` _before_\n> the started event manager process had terminated,\n> so starting again might fail because the registered name\n> was not yet unregistered, and an `'EXIT'` message could arrive later\n> to the process calling this function.\n>\n> But if the start timed out, this function killed\n> the started event manager process and returned `{error, timeout}`,\n> and then the process link `{'EXIT', Pid, killed}` message _was_ consumed.\n>\n> The start was made synchronous in OTP 26.0 and a guarantee\n> was implemented that no process link `'EXIT'` message\n> from a failed start will linger in the caller's inbox.","ref":"gen_event.html#start_link/2"},{"type":"type","title":"gen_event.start_mon_ret/0","doc":"","ref":"gen_event.html#t:start_mon_ret/0"},{"type":"function","title":"gen_event.start_monitor/0","doc":"","ref":"gen_event.html#start_monitor/0"},{"type":"function","title":"gen_event.start_monitor/1","doc":"Creates a stand-alone event manager process,\nmonitored, possibly nameless.\n\nEquivalent to [`start_monitor(EventMgrName, Options)`](`start_monitor/2`).\n\nWith argument `EventMgrName`, `Options` is `[]`.\n\nWith argument `Options` a nameless event manager is created.\n\nFor a description of the arguments and return values,\nsee `start_monitor/2` and `start_link/1`.","ref":"gen_event.html#start_monitor/1"},{"type":"function","title":"gen_event.start_monitor/2","doc":"Creates a stand-alone event manager process, monitored.\n\nThe created event manager process is not part of a supervision tree\nand thus has no supervisor.  A monitor is atomically set up\nto the newly created process.\n\nFor a description of the arguments and return values, see\n[`start_link/2`](`start_link/2`). Note that the return value\nfor a successful start differs from `start_link/2`.\n`start_monitor/0,1,2` will return `{ok, {Pid, Mon}}`\nwhere `Pid` is the process identifier of the process,\nand `Mon` is a reference to the monitor set up to monitor the process.\nIf the start is not successful, the caller will be blocked\nuntil the `DOWN` message has been received and removed\nfrom the message queue.","ref":"gen_event.html#start_monitor/2"},{"type":"type","title":"gen_event.start_ret/0","doc":"","ref":"gen_event.html#t:start_ret/0"},{"type":"function","title":"gen_event.stop/1","doc":"","ref":"gen_event.html#stop/1"},{"type":"function","title":"gen_event.stop/3","doc":"Stop an event manager.\n\nOrders event manager `EventMgrRef` to exit with the specifies `Reason`,\nand waits for it to terminate.  Before terminating, `gen_event` calls\n[`Module:terminate(stop,...)`](`c:terminate/2`)\nfor each installed event handler.\n\nThe function returns `ok` if the event manager terminates\nwith the expected reason.  Any other reason than `normal`,\n`shutdown`, or `{shutdown, Term}` causes an error report\nto be issued using `m:logger`.\n\n`Timeout` is an integer greater than zero that specifies\nhow many milliseconds to wait for the event manager to terminate,\nor the atom `infinity` to wait indefinitely.  If the event manager\nhas not terminated within the specified time, the call exits\nthe calling process with reason `timeout`.\n\nIf the process does not exist,\nthe call exits the calling process with reason `noproc`,\nand with reason `{nodedown, Node}` if the connection fails\nto the remote `Node` where the server runs.","ref":"gen_event.html#stop/3"},{"type":"function","title":"gen_event.swap_handler/3","doc":"Replace an event handler.\n\nThis function replaces an event handler in event manager `EventMgrRef`.\n\nFor a description of `OldHandler` and `NewHandler`, see `add_handler/3`.\n\nFirst the old event handler `OldHandler` is deleted. The event manager\ncalls `OldModule:terminate(Args1, ...)`, where `OldModule`\nis the callback module of `OldHandler`, and collects the return value.\n\nThen the new event handler `NewHandler` is added and initiated\nby calling [`NewModule:init({Args2,Term})`](`c:init/1`), where `NewModule`\nis the callback module of `NewHandler`, and `Term` is the return value\nof [`OldModule:terminate/2`](`c:terminate/2`).  This makes it possible\nto transfer information from `OldHandler` to `NewHandler`.\n\nThe new handler is added even if the the specified old event handler\nis not installed, in which case `Term = error`, or if\n[`OldModule:terminate/2`](`c:terminate/2`) fails with `Reason`,\nin which case `Term = {'EXIT', Reason}`.  The old handler\nis deleted even if [`NewModule:init/1`](`c:init/1`) fails.\n\nIf there was a supervised connection\nbetween `OldHandler` and a process `Pid`,\nthere is a supervised connection between `NewHandler` and `Pid` instead.\n\nIf [`NewModule:init/1`](`c:init/1`) returns a correct value,\nthis function returns `ok`. If [`NewModule:init/1`](`c:init/1`) fails\nwith `Reason` or returns an unexpected value `Term`,\nthis function returns `{error, {'EXIT', Reason}}` or\n`{error, Term}`, respectively.","ref":"gen_event.html#swap_handler/3"},{"type":"function","title":"gen_event.swap_sup_handler/3","doc":"Replace an event handler, and supervise it.\n\nReplaces an event handler in event manager `EventMgrRef`\nin the same way as [`swap_handler/3`](`swap_handler/3`),\nbut also supervises the connection between `NewHandler`\nand the calling process.\n\nFor a description of the arguments and return values, see `swap_handler/3`.","ref":"gen_event.html#swap_sup_handler/3"},{"type":"function","title":"gen_event.sync_notify/2","doc":"Send a synchronous event notification to an event manager.\n\nThe event is sent to `EventMgrRef` that callsr calls\n[`Module:handle_event/2`](`c:handle_event/2`) for each installed\nevent handler to handle the event. This function will return `ok`\nafter the event has been handled by all event handlers.\n\n`Event` is any term that is passed as one of the arguments to\n[`Module:handle_event/2`](`c:handle_event/2`).","ref":"gen_event.html#sync_notify/2"},{"type":"callback","title":"gen_event.terminate/2","doc":"Handle event handler termination.\n\nWhenever an event handler is deleted from an event manager,\nthis function is called. It is to be the opposite\nof [`Module:init/1`](`c:init/1`) and do any necessary cleaning up.\n\nIf the event handler is deleted because of a call to `delete_handler/3`,\n`swap_handler/3`, or `swap_sup_handler/3`, `Arg` is\nthe `Args` argument of this function call.\n\n`Arg = {stop, Reason}` if the event handler has a supervised connection\nto a process that has terminated with reason `Reason`.\n\n`Arg = stop` if the event handler is deleted because\nthe event manager is terminating.\n\nThe event manager terminates if it is part of a supervision tree\nand it is ordered by its supervisor to terminate.  Even if\nit is _not_ part of a supervision tree, it terminates if it receives\nan `'EXIT'` message from its parent.\n\n`Arg = remove_handler` if the event handler is deleted\nbecause another callback function has returned `remove_handler`\nor `{remove_handler, Reply}`.\n\n`Arg = {error, Term}` if the event handler is deleted because\na callback function returned an unexpected value `Term`,\nor `Arg = {error, {'EXIT', Reason}}` if a callback function failed.\n\n`State` is the internal state of the event handler.\n\nThe function can return any term.  If the event handler\nis deleted because of a call to `gen_event:delete_handler/3`,\nthe return value of that function becomes the return value\nof this function. If the event handler is to be replaced with\nanother event handler because of a swap, the return value\nis passed to the `init` function of the new event handler.\nOtherwise the return value is ignored.\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need not export it.\n> The `gen_event` module provides a default implementation\n> without cleanup.","ref":"gen_event.html#c:terminate/2"},{"type":"function","title":"gen_event.wait_response/2","doc":"Wait for a request resonse.\n\nWait for the response to the request identifier `ReqId`. The request\nmust have been made by `send_request/3`, from the same process\nthat called `send_request/3`.\n\n`WaitTime` specifies how long to wait for a response.\nIf no response is received within the specified time,\nthe function returns `timeout` and no cleanup is done,\nThus the function can be invoked repeatedly until a reply is returned.\n\nThe return value `Reply` is defined in the return value of\n[`Module:handle_call/2`](`c:handle_call/2`).\n\nIf the specified event handler is not installed, the function returns\n`{error, bad_module}`.  If the callback function fails with `Reason`,\nor returns an unexpected value `Term`, this function returns\n`{error,{'EXIT',Reason}}` or `{error,Term}`, respectively.\nIf the event manager dies before or during the request\nthis function returns `{error, {Reason, EventMgrRef}}`.\n\nThe difference between `receive_response/2` and\n`wait_response/2` is that `receive_response/2` abandons the request\nat timeout so that a potential future response is ignored,\nwhile [`wait_response/2`](`wait_response/2`) does not.","ref":"gen_event.html#wait_response/2"},{"type":"function","title":"gen_event.wait_response/3","doc":"Wait for any request response in a collection.\n\nWait for a response in a `ReqIdCollection`.  All request identifiers\nof `ReqIdCollection` must correspond to requests that have been made\nusing `send_request/3` or `send_request/5`, and all requests\nmust have been made by the process calling this function.\n\nThe `Label` in the response is the `Label` associated with\nthe request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [adding the request id](`reqids_add/3`) to a collection,\nor when sending the request using `send_request/5`.\n\nCompared to `wait_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `wait_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` will be returned.\n\nIf no response is received before the `WaitTime` has expired,\n`timeout` is returned.  It is valid to continue waiting\nfor a response as many times as needed up until a response\nhas been received and completed by `check_response()`,\n`receive_response()`, or `wait_response()`.\n\nThe difference between `receive_response/3` and `wait_response/3`\nis that `receive_response/3` abandons requests at time-out\nso that potential future responses are ignored, while\n[`wait_response/3`](`wait_response/3`) does not.\n\nIf `Delete` is `true`, the association with `Label`\nhas been deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`. If `Delete` is`false`, `NewReqIdCollection`\nwill equal `ReqIdCollection`.  Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`wait_response/3`, `check_response/3`, and `receive_response/3`.\n\nHowever, without deleting handled associations, the above\ncalls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests\nto this function, it will always block until `WaitTime` expires\nand then return `timeout`.","ref":"gen_event.html#wait_response/3"},{"type":"function","title":"gen_event.which_handlers/1","doc":"Return all event handlers in an event manager.\n\nThis function returns a list of all event handlers\ninstalled in event manager `EventMgrRef`.\n\nFor a description of `Handler`, see `add_handler/3`.","ref":"gen_event.html#which_handlers/1"},{"type":"behaviour","title":"gen_fsm","doc":"Deprecated and replaced by `m:gen_statem` in OTP 20.\n\nMigration to gen_statem\n-----------------------\n\nHere follows a simple example of turning a gen_fsm into a `m:gen_statem`.\nThe example comes from the previous User's Guide for `gen_fsm`\n\n```erlang\n-module(code_lock).\n-define(NAME, code_lock).\n%-define(BEFORE_REWRITE, true).\n\n-ifdef(BEFORE_REWRITE).\n-behaviour(gen_fsm).\n-else.\n-behaviour(gen_statem).\n-endif.\n\n-export([start_link/1, button/1, stop/0]).\n\n-ifdef(BEFORE_REWRITE).\n-export([init/1, locked/2, open/2, handle_sync_event/4, handle_event/3,\n     handle_info/3, terminate/3, code_change/4]).\n-else.\n-export([init/1, callback_mode/0, locked/3, open/3,\n     terminate/3, code_change/4]).\n%% Add callback__mode/0\n%% Change arity of the state functions\n%% Remove handle_info/3\n-endif.\n\n-ifdef(BEFORE_REWRITE).\nstart_link(Code) ->\n    gen_fsm:start_link({local, ?NAME}, ?MODULE, Code, []).\n-else.\nstart_link(Code) ->\n    gen_statem:start_link({local,?NAME}, ?MODULE, Code, []).\n-endif.\n\n-ifdef(BEFORE_REWRITE).\nbutton(Digit) ->\n    gen_fsm:send_event(?NAME, {button, Digit}).\n-else.\nbutton(Digit) ->\n    gen_statem:cast(?NAME, {button,Digit}).\n    %% send_event is asynchronous and becomes a cast\n-endif.\n\n-ifdef(BEFORE_REWRITE).\nstop() ->\n    gen_fsm:sync_send_all_state_event(?NAME, stop).\n-else.\nstop() ->\n    gen_statem:call(?NAME, stop).\n    %% sync_send is synchronous and becomes call\n    %% all_state is handled by callback code in gen_statem\n-endif.\n\ninit(Code) ->\n    do_lock(),\n    Data = #{code => Code, remaining => Code},\n    {ok, locked, Data}.\n\n-ifdef(BEFORE_REWRITE).\n-else.\ncallback_mode() ->\n    state_functions.\n%% state_functions mode is the mode most similar to\n%% gen_fsm. There is also handle_event mode which is\n%% a fairly different concept.\n-endif.\n\n-ifdef(BEFORE_REWRITE).\nlocked({button, Digit}, Data0) ->\n    case analyze_lock(Digit, Data0) of\n    {open = StateName, Data} ->\n        {next_state, StateName, Data, 10000};\n    {StateName, Data} ->\n        {next_state, StateName, Data}\n    end.\n-else.\nlocked(cast, {button,Digit}, Data0) ->\n    case analyze_lock(Digit, Data0) of\n    {open = StateName, Data} ->\n        {next_state, StateName, Data, 10000};\n    {StateName, Data} ->\n        {next_state, StateName, Data}\n    end;\nlocked({call, From}, Msg, Data) ->\n    handle_call(From, Msg, Data);\nlocked({info, Msg}, StateName, Data) ->\n    handle_info(Msg, StateName, Data).\n%% Arity differs\n%% All state events are dispatched to handle_call and handle_info help\n%% functions. If you want to handle a call or cast event specifically\n%% for this state you would add a special clause for it above.\n-endif.\n\n-ifdef(BEFORE_REWRITE).\nopen(timeout, State) ->\n     do_lock(),\n    {next_state, locked, State};\nopen({button,_}, Data) ->\n    {next_state, locked, Data}.\n-else.\nopen(timeout, _, Data) ->\n    do_lock(),\n    {next_state, locked, Data};\nopen(cast, {button,_}, Data) ->\n    {next_state, locked, Data};\nopen({call, From}, Msg, Data) ->\n    handle_call(From, Msg, Data);\nopen(info, Msg, Data) ->\n    handle_info(Msg, open, Data).\n%% Arity differs\n%% All state events are dispatched to handle_call and handle_info help\n%% functions. If you want to handle a call or cast event specifically\n%% for this state you would add a special clause for it above.\n-endif.\n\n-ifdef(BEFORE_REWRITE).\nhandle_sync_event(stop, _From, _StateName, Data) ->\n    {stop, normal, ok, Data}.\n\nhandle_event(Event, StateName, Data) ->\n    {stop, {shutdown, {unexpected, Event, StateName}}, Data}.\n\nhandle_info(Info, StateName, Data) ->\n    {stop, {shutdown, {unexpected, Info, StateName}}, StateName, Data}.\n-else.\n-endif.\n\nterminate(_Reason, State, _Data) ->\n    State =/= locked andalso do_lock(),\n    ok.\ncode_change(_Vsn, State, Data, _Extra) ->\n    {ok, State, Data}.\n\n%% Internal functions\n-ifdef(BEFORE_REWRITE).\n-else.\nhandle_call(From, stop, Data) ->\n     {stop_and_reply, normal,  {reply, From, ok}, Data}.\n\nhandle_info(Info, StateName, Data) ->\n    {stop, {shutdown, {unexpected, Info, StateName}}, StateName, Data}.\n%% These are internal functions for handling all state events\n%% and not behaviour callbacks as in gen_fsm\n-endif.\n\nanalyze_lock(Digit, #{code := Code, remaining := Remaining} = Data) ->\n     case Remaining of\n         [Digit] ->\n         do_unlock(),\n         {open,  Data#{remaining := Code}};\n         [Digit|Rest] -> % Incomplete\n             {locked, Data#{remaining := Rest}};\n         _Wrong ->\n             {locked, Data#{remaining := Code}}\n     end.\n\ndo_lock() ->\n    io:format(\"Lock~n\", []).\ndo_unlock() ->\n    io:format(\"Unlock~n\", []).\n```\n\nOTP 19 Documentation\n--------------------","ref":"gen_fsm.html"},{"type":"behaviour","title":"Module - gen_fsm","doc":"`gen_fsm`","ref":"gen_fsm.html#module-module"},{"type":"behaviour","title":"Module Summary - gen_fsm","doc":"Generic finite state machine behavior.","ref":"gen_fsm.html#module-module-summary"},{"type":"behaviour","title":"Description - gen_fsm","doc":"This behavior module provides a finite state machine.\nA generic finite state machine process (`gen_fsm`) implemented\nusing this module has a standard set of interface functions\nand includes functionality for tracing and error reporting.\nIt also fits into an OTP supervision tree.  For more information,\nsee [OTP Design Principles](`e:system:design_principles`).\n\nA `gen_fsm` process assumes all specific parts to be located\nin a callback module exporting a predefined set of functions.\nThe relationship between the behavior functions\nand the callback functions is as follows:\n\n``` text\ngen_fsm module                    Callback module\n--------------                    ---------------\ngen_fsm:start\ngen_fsm:start_link                -----> Module:init/1\n\ngen_fsm:stop                      -----> Module:terminate/3\n\ngen_fsm:send_event                -----> Module:StateName/2\n\ngen_fsm:send_all_state_event      -----> Module:handle_event/3\n\ngen_fsm:sync_send_event           -----> Module:StateName/3\n\ngen_fsm:sync_send_all_state_event -----> Module:handle_sync_event/4\n\n-                                 -----> Module:handle_info/3\n\n-                                 -----> Module:terminate/3\n\n-                                 -----> Module:code_change/4\n```\n\nIf a callback function fails or returns a bad value,\nthe `gen_fsm` process terminates.\n\nA `gen_fsm` process handles system messages as described\nin [sys(3)](`m:sys`).  The sys module can be used for\ndebugging a `gen_fsm` process.\n\nNotice that a `gen_fsm` process does not trap exit signals automatically,\nthis must be explicitly initiated in the callback module.\n\nUnless otherwise stated, all functions in this module fail\nif the specified `gen_fsm` process does not exist\nor if bad arguments are specified.\n\nThe gen_fsm process can go into hibernation (see `erlang:hibernate/3`)\nif a callback function specifies `hibernate` instead of a time-out value.\nThis can be useful if the server is expected to be idle for a long time.\nHowever, use this feature with care, as hibernation implies at least\ntwo garbage collections (when hibernating and shortly after waking up)\nand is not something you want to do between each call\nto a busy state machine.","ref":"gen_fsm.html#module-description"},{"type":"behaviour","title":"Callback Functions - gen_fsm","doc":"See the [Callback Functions](#callbacks-deprecated) section\nfor the functions to be exported from a `gen_fsm` callback module.\n\n[]() {: #state-name }\n**State name** denotes a state of the state machine.\n\n[]() {: #state-data }\n**State data** denotes the internal state of the Erlang process\nthat implements the state machine.","ref":"gen_fsm.html#module-callback-functions"},{"type":"function","title":"gen_fsm.cancel_timer/1","doc":"Cancel an internal timer in a generic FSM.\n\nCancels an internal timer referred by `Ref` in the `gen_fsm` process\nthat calls this function.\n\n`Ref` is a reference returned from `send_event_after/2`\nor `start_timer/2`.\n\nIf the timer has already timed out, but the event not yet been delivered,\nit is cancelled as if it had not timed out, so there is no false\ntimer event after returning from this function.\n\nReturns the remaining time in milliseconds until the timer\nwould have expired if `Ref` referred to an active timer,\notherwise `false`.","ref":"gen_fsm.html#cancel_timer/1"},{"type":"callback","title":"gen_fsm.code_change/4","doc":"Update the internal [*state data*](#state-data) during upgrade/downgrade.\n\nThis function is called by a `gen_fsm` process when it is to update\nits internal [*state data*](#state-data)\nduring a release upgrade/downgrade, that is,\nwhen instruction `{update, Module, Change, ...}`,\nwhere `Change = {advanced, Extra}`, is given in the appup file;\nsee section Release Handling Instructions in OTP Design Principles.\n[OTP Design Principles](`e:system:release_handling.md#instr`).\n\nFor an upgrade, `OldVsn` is `Vsn`, and for a downgrade,\n`OldVsn` is `{down, Vsn}`. `Vsn` is defined by the vsn attribute(s)\nof the old version of the callback module `Module`.  If no such\n attribute is defined, the version is the checksum of the Beam file.\n\n`StateName` is the current [*state name*](#state-name)\n and `StateData` the internal [*state data*](#state-data)\n of the `gen_fsm` process.\n\n`Extra` is passed \"as is\" from the `{advanced, Extra}` part\n of the update instruction.\n\nThe function is to return the new current [*state name*](#state-name)\nand updated internal data.","ref":"gen_fsm.html#c:code_change/4"},{"type":"function","title":"gen_fsm.enter_loop/4","doc":"Enter the `gen_fsm` receive loop.\n\nEquivalent to `enter_loop/6` with `Timeout = infinity`\nbut the started server is not registered as for `start_link/3`.","ref":"gen_fsm.html#enter_loop/4"},{"type":"function","title":"gen_fsm.enter_loop/5","doc":"Enter the `gen_fsm` receive loop.\n\nWith argument `FsmName` equivalent to `enter_loop/6`\nwith `Timeout = infinity`.\n\nWith argument `Timeout` equivalent to `enter_loop/6`\nbut the started server is not registered as for `start_link/3`.","ref":"gen_fsm.html#enter_loop/5"},{"type":"function","title":"gen_fsm.enter_loop/6","doc":"Enter the `gen_fsm` receive loop.\n\nMakes an existing process into a `gen_fsm` process.  Does not return,\ninstead the calling process enters the `gen_fsm` receive loop\nand becomes a `gen_fsm` process.  The process must have been started\nusing one of the start functions in `m:proc_lib`.  The user is responsible\nfor any initialization of the process, including registering a name for it.\n\nThis function is useful when a more complex initialization procedure\nis needed than the `gen_fsm` behavior provides.\n\n`Module`, `Options`, and `FsmName` have the same meanings\nas when calling [`start[_link]/3,4`](`start_link/4`).\nHowever, the process must have been registered according to\n`FsmName` before this function is called.\n\n`StateName`, `StateData`, and `Timeout` have the same meanings\nas in the return value of [`Module:init/1`](`c:init/1`).\nThe callback module `Module` does not need to export\nan `c:init/1` function.\n\nThe function fails if the calling process was not started\nby a `m:proc_lib` start function, or if it is not registered\naccording to `FsmName`.","ref":"gen_fsm.html#enter_loop/6"},{"type":"type","title":"gen_fsm.enter_loop_opt/0","doc":"[Start options](#start-options) for the\n[`enter_loop/4,5,6`](`enter_loop/6`), [`start/3,4`](`start/3`),\nand [`start_link/3,4`](`start_link/3`) functions.\n\nSee `start_link/4`.","ref":"gen_fsm.html#t:enter_loop_opt/0"},{"type":"callback","title":"gen_fsm.format_status/2","doc":"Optional function for providing a term describing\nthe current `gen_fsm` process status.\n\nThe second argument is `[PDict, StateData]`, that is, a list\nwith the 2 elements, in that order.\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need not export it.\n> The `gen_fsm` module provides a default implementation\n> of this function that returns the callback module\n> [*state data*](#state-data).\n\nThis function is called by a `gen_fsm` process\nin the following situations:\n\n- One of [`sys:get_status/1,2`](`sys:get_status/1`) is invoked to get\n  the `gen_fsm` status. `Opt` is set to the atom `normal` for this case.\n- The `gen_fsm` process terminates abnormally and logs an error.\n  `Opt` is set to the atom terminate for this case.\n\nThis function is useful for changing the form and appearance\nof the `gen_fsm` status for these cases.  A callback module\nwishing to change the [`sys:get_status/1,2`](`sys:get_status/1`)\nreturn value as well as how its status appears in termination error logs,\nexports an instance of `c:format_status/2` that returns a term\ndescribing the current status of the `gen_fsm` process.\n\n`PDict` is the current value of the process dictionary\nof the `gen_fsm` process.\n\n`StateData` is the internal [*state data*](#state-data)\nof the `gen_fsm` process.\n\nThe function is to return `Status`, a term that change the details\nof the current state and status of the `gen_fsm` process.\nThere are no restrictions on the form `Status` can take,\nbut for the [`sys:get_status/1,2`](`sys:get_status/1`) case\n(when `Opt` is `normal`), the recommended form for the `Status` value\nis `[{data, [{\"StateData\", Term}]}]`, where `Term` provides\nrelevant details of the `gen_fsm` [*state data*](#state-data).\nFollowing this recommendation is not required, but it makes\nthe callback module status consistent with the rest of\nthe [`sys:get_status/1,2`](`sys:get_status/1`) return value.\n\nOne use for this function is to return compact alternative\n[*state data*](#state-data) representations to avoid\nthat large state terms are printed in log files.","ref":"gen_fsm.html#c:format_status/2"},{"type":"type","title":"gen_fsm.from/0","doc":"Reply destination. See `reply/2`","ref":"gen_fsm.html#t:from/0"},{"type":"type","title":"gen_fsm.fsm_name/0","doc":"[FSM name](#fsm-name) specification:\n`local`, `global`, or `via` registered.\n\nTo be used when starting a `gen_fsm`. See `start_link/4`.","ref":"gen_fsm.html#t:fsm_name/0"},{"type":"type","title":"gen_fsm.fsm_ref/0","doc":"[FSM reference](#fsm-ref) `t:pid/0` or registered `t:fsm_name/0`.\n\nTo be used in for example `send_event/2` to specify the server.","ref":"gen_fsm.html#t:fsm_ref/0"},{"type":"callback","title":"gen_fsm.handle_event/3","doc":"Handle an asynchronous event.\n\nWhenever a `gen_fsm` process receives an event sent using\n`send_all_state_event/2`, this function is called to handle the event.\n\n`StateName` is the current [*state name*](#state-name)\nof the `gen_fsm` process.\n\nFor a description of the other arguments and possible return values,\nsee [`Module:StateName/2`](`c:'StateName'/2`).","ref":"gen_fsm.html#c:handle_event/3"},{"type":"callback","title":"gen_fsm.handle_info/3","doc":"Handle an incoming message\n\nThis function is called by a `gen_fsm` process when it receives\nany other message than a synchronous or asynchronous event\n(or a system message).\n\n`Info` is the received message.\n\nFor a description of the other arguments and possible return values,\nsee [`Module:StateName/2`](`c:'StateName'/2`).","ref":"gen_fsm.html#c:handle_info/3"},{"type":"callback","title":"gen_fsm.handle_sync_event/4","doc":"Handle a synchronous event.\n\nWhenever a `gen_fsm` process receives an event sent using\n[`sync_send_all_state_event/2,3`](`sync_send_all_state_event/3`),\nthis function is called to handle the event.\n\n`StateName` is the current [*state name*](#state-name)\nof the `gen_fsm` process.\n\nFor a description of the other arguments and possible return values,\nsee [`Module:StateName/3`](`c:'StateName'/3`).","ref":"gen_fsm.html#c:handle_sync_event/4"},{"type":"callback","title":"gen_fsm.init/1","doc":"Initialize process and internal [*state name*](#state-name)\nand [*state data*](#state-data).\n\nWhenever a `gen_fsm` process is started using\n[`start/3,4`](`start/4`) or [`start_link/3,4`](`start_link/4`),\nthis function is called by the new process to initialize.\n\n`Args` is the `Args` argument provided to the start function.\n\nIf initialization is successful, the function is to return\n{ok, StateName, StateData}, {ok, StateName, StateData, Timeout},\nor {ok, StateName, StateData, hibernate}, where `StateName`\nis the initial [*state name*](#state-name) and `StateData`\nthe initial [*state data*](#state-data) of the `gen_fsm` process.\n\nIf an `t:integer/0` time-out value is provided, a time-out occurs\nunless an event or a message is received within `Timeout` milliseconds.\nA time-out is represented by the atom `timeout` and is to be handled\nby the [`Module:StateName/2`](`c:'StateName'/2`) callback functions.\nThe atom `infinity` can be used to wait indefinitely, this is\nthe default value.\n\nIf `hibernate` is specified instead of a time-out value,\nthe process goes into hibernation when waiting for the next message\nto arrive (by calling `proc_lib:hibernate/3`).\n\nIf the initialization fails, the function returns `{stop, Reason}`,\nwhere `Reason` is any term, or `ignore`.","ref":"gen_fsm.html#c:init/1"},{"type":"function","title":"gen_fsm.reply/2","doc":"Send a reply to a caller.\n\nThis function can be used by a `gen_fsm` process to explicitly send\na reply to a client process that called\n[`sync_send_event/2,3`](`sync_send_event/3`) or\n[`sync_send_all_state_event/2,3`](`sync_send_all_state_event/3`)\nwhen the reply cannot be defined in the return value of\n[`Module:StateName/3`](`c:'StateName'/3`) or\n[`Module:handle_sync_event/4`](`c:handle_sync_event/4`).\n\n`Caller` must be the `From` argument provided to the callback function.\n`Reply` is any term given back to the client as the return value of\n[`sync_send_event/2,3`](`sync_send_event/3`) or\n[`sync_send_all_state_event/2,3`](`sync_send_all_state_event/3`).\n\nReturn value `Result` is not further defined, and is always to be ignored.","ref":"gen_fsm.html#reply/2"},{"type":"callback","title":"gen_fsm.StateName/2","doc":"Handle an asynchronous event.\n\nThere is to be one instance of this function\nfor each possible [*state name*](#state-name).\nWhenever a `gen_fsm` process receives an event sent using `send_event/2`,\nthe instance of this function with the same name as the current\n[*state name*](#state-name) `StateName` is called to handle the event.\nIt is also called if a time-out occurs.\n\n`Event` is either the atom `timeout`, if a time-out has occurred,\nor the `Event` argument provided to `send_event/2`.\n\n`StateData` is the [*state data*](#state-data) of the `gen_fsm` process.\n\nIf the function returns `{next_state, NextStateName, NewStateData}`,\n`{next_state, NextStateName, NewStateData, Timeout}`,\nor `{next_state, NextStateName, NewStateData, hibernate}`,\nthe `gen_fsm` process continues executing with\nthe current [*state name*](#state-name) set to `NextStateName`\nand with the possibly updated [*state data*](#state-data)\n`NewStateData`.  For a description of `Timeout` and `hibernate`,\nsee [`Module:init/1`](`c:init/1`).\n\nIf the function returns `{stop ,Reason, NewStateData}`,\nthe `gen_fsm` process calls\n[`Module:terminate(Reason, StateName, NewStateData)`](`c:terminate/3`)\nand terminates.","ref":"gen_fsm.html#c:StateName/2"},{"type":"callback","title":"gen_fsm.StateName/3","doc":"Handle a synchronous event.\n\nThere is to be one instance of this function\nfor each possible [*state name*](#state-name).\nWhenever a `gen_fsm` process receives an event sent using\n[`sync_send_event/2,3`](`sync_send_event/3`),\nthe instance of this function with the same name\nas the current [*state name*](#state-name) `StateName` is called\nto handle the event.\n\n`Event` is the `Event` argument provided to\n[`sync_send_event/2,3`](`sync_send_event/3`).\n\n`From` is a tuple `{Pid, Tag}` where `Pid` is the `t:pid/0`\nof the process that called [`sync_send_event/2,3`](`sync_send_event/3`),\n`Tag` is a unique tag.\n\n`StateData` is the [*state data*](#state-data) of the `gen_fsm` process.\n\n- If `{reply, Reply, NextStateName, NewStateData}`,\n  `{reply, Reply, NextStateName, NewStateData, Timeout}`,\n  or `{reply, Reply, NextStateName, NewStateData, hibernate}` is returned,\n  `Reply` is given back to `From` as the return value of\n  [`sync_send_event/2,3`](`sync_send_event/3`).\n  The `gen_fsm` process then continues executing\n  with the current [*state name*](#state-name) set to `NextStateName`\n  and with the possibly updated [*state data*](#state-data) `NewStateData`.\n  For a description of `Timeout` and `hibernate`,\n  see [`Module:init/1`](`c:init/1`).\n\n- If `{next_state, NextStateName, NewStateData}`,\n  `{next_state, NextStateName, NewStateData, Timeout}`,\n  or `{next_state, NextStateName, NewStateData, hibernate}` is returned,\n  the `gen_fsm` process continues executing in `NextStateName`\n  with `NewStateData`.  Any reply to `From`\n  must be specified explicitly using `reply/2`.\n\n- If the function returns `{stop, Reason, Reply, NewStateData}`,\n  `Reply` is given back to `From`.  If the function returns\n  {stop, Reason, NewStateData}, any reply to `From` must be specified\n  explicitly using `reply/2`.  The `gen_fsm` process then calls\n  [`Module:terminate(Reason, StateName, NewStateData)`](`c:terminate/3`)\n  and terminates.","ref":"gen_fsm.html#c:StateName/3"},{"type":"function","title":"gen_fsm.send_all_state_event/2","doc":"Send an event asynchronously to a generic FSM.\n\nSends an event asynchronously to the `FsmRef` of the `gen_fsm` process\nand returns `ok` immediately.  The `gen_fsm` process calls\n[`Module:handle_event/3`](`c:handle_event/3`) to handle the event.\n\nFor a description of the arguments, see `send_event/2`.\n\nThe difference between `send_event/2` and `send_all_state_event/2`\nis which callback function is used to handle the event.\nThis function is useful when sending events that are handled\nthe same way in every state, as only one `handle_event` clause\nis needed to handle the event instead of one clause\nin each state name function.","ref":"gen_fsm.html#send_all_state_event/2"},{"type":"function","title":"gen_fsm.send_event/2","doc":"Send an event asynchronously to a generic FSM.\n\nSends `Event` to the `FsmRef` of the `gen_fsm` process\nand returns `ok` immediately.  The `gen_fsm` process calls\n[`Module:StateName/2`](`c:'StateName'/2`) to handle the event,\nwhere `StateName` is the name of the current state\nof the `gen_fsm` process.\n\n[](){: #fsm-ref }\n`FsmRef` can be any of the following:\n\n- The `t:pid/0`\n- `Name`, if the `gen_fsm` process is locally registered\n- `{Name, Node}`, if the `gen_fsm` process is locally registered\n  at another node\n- `{global, GlobalName}`, if the `gen_fsm` process is globally registered\n- `{via, Module, ViaName}`, if the `gen_fsm` process is registered\n  through an alternative process registry\n\n`Event` is any term that is passed as one of the arguments\nto `Module:StateName/2`.","ref":"gen_fsm.html#send_event/2"},{"type":"function","title":"gen_fsm.send_event_after/2","doc":"Send a delayed event internally in a generic FSM.\n\nSends a delayed event internally in the `gen_fsm` process\nthat calls this function after `Time` milliseconds.\nReturns immediately a reference that can be used to cancel\nthe delayed send using `cancel_timer/1`.\n\nThe `gen_fsm` process calls [`Module:StateName/2`](`c:'StateName'/2`)\nto handle the event, where `'StateName'` is the name of\nthe current state of the `gen_fsm` process at the time\nthe delayed event is delivered.\n\n`Event` is any term that is passed as one of the arguments\nto [`Module:StateName/2`](`c:'StateName'/2`).","ref":"gen_fsm.html#send_event_after/2"},{"type":"function","title":"gen_fsm.start/3","doc":"Create a standalone `gen_fsm` process, not registered.\n\nEquivalent to [`start(Name, Mod, Args, Options)`](`start/4`)\nwithout registering a `Name`.\n\nFor a description of arguments and return values,\nsee [`start_link/3,4`](`start_link/3`).","ref":"gen_fsm.html#start/3"},{"type":"function","title":"gen_fsm.start/4","doc":"Create a standalone `gen_fsm` process.\n\nThe created process is not part of a supervision tree\nand thus has no supervisor.\n\nFor a description of arguments and return values,\nsee [`start_link/3,4`](`start_link/4`).","ref":"gen_fsm.html#start/4"},{"type":"function","title":"gen_fsm.start_link/3","doc":"Create a `gen_fsm` process in a supervision tree, not registered.\n\nEquivalent to [`start_link(Name, Mod, Args, Options)`](`start_link/4`)\nwithout registering a `Name`.","ref":"gen_fsm.html#start_link/3"},{"type":"function","title":"gen_fsm.start_link/4","doc":"Create a `gen_fsm` process in a supervision tree.\n\nThe process is created as part of a supervision tree.  The function\nis to be called, directly or indirectly, by the supervisor.\nFor example, it ensures that the `gen_fsm` process\nis linked to the supervisor.\n\nThe `gen_fsm` process calls [`Module:init/1`](`c:init/1`) to initialize.\nTo ensure a synchronized startup procedure,\n[`start_link/3,4`](`start_link/4`) does not return\nuntil `Module:init/1` has returned.\n\n[]() {: #fsm-name }\n\n- If **`FsmName = {local, Name}`**, the `gen_fsm` process\n  is registered locally as `Name` using `register/2`.\n\n- If **`FsmName = {global, GlobalName}`**, the `gen_fsm` process\n  is registered globally as `GlobalName` using `global:register_name/2`.\n\n- If **`FsmName = {via, Module, ViaName}`**,\n  the `gen_fsm` process registers with the registry\n  represented by `Module`.  The `Module` callback is to export\n  the functions `register_name/2`, `unregister_name/1`,\n  `whereis_name/1`, and `send/2`, which are to behave like\n  the corresponding functions in `m:global`.\n  Thus, `{via, global, GlobalName}` is a valid reference.\n\n`Module` is the name of the callback module.\n\n`Args` is any term that is passed as the argument to `Module:init/1`.\n\n[]() {: #start-options }\n\nIf option **`{timeout, Time}`** is present, the `gen_fsm` process\nis allowed to spend `Time` milliseconds initializing or it terminates\nand the start function returns `{error, timeout}`.\n\nIf option **`{debug, Dbgs}`** is present, the corresponding `sys` function\nis called for each item in `Dbgs`; see [`sys(3)`](`m:sys`).\n\nIf option **`{spawn_opt, SOpts}`** is present, `SOpts` is passed\nas option list to the `spawn_opt` BIF that is used\nto spawn the `gen_fsm` process; see `spawn_opt/2`.\n\n> #### Note {: .info }\n> Using spawn option `monitor` is not allowed, it causes\n> the function to fail with reason `badarg`.\n\nIf the `gen_fsm` process is successfully created and initialized,\nthe function returns `{ok, Pid}`, where `Pid` is the pid\nof the `gen_fsm` process.  If a process with the specified `FsmName`\nexists already, the function returns `{error, {already_started, Pid}}`,\nwhere `Pid` is the pid of that process.\n\nIf `Module:init/1` fails with `Reason`, the function returns\n`{error, Reason}`.  If `Module:init/1` returns `{stop, Reason}`\nor `ignore`, the process is terminated and the function returns\n`{error, Reason}` or `ignore`, respectively.","ref":"gen_fsm.html#start_link/4"},{"type":"type","title":"gen_fsm.start_opt/0","doc":"[Start options](#start-options) for the [`start/3,4`](`start/3`),\nand [`start_link/3,4`](`start_link/3`) functions.\n\nSee `start_link/4`.","ref":"gen_fsm.html#t:start_opt/0"},{"type":"function","title":"gen_fsm.start_timer/2","doc":"Send a time-out event internally in a generic FSM.\n\nSends a time-out event internally in the `gen_fsm process`\nthat calls this function after `Time` milliseconds.\nReturns immediately a reference that can be used to cancel the timer\nusing `cancel_timer/1`.\n\nThe `gen_fsm` process calls [`Module:StateName/2`](`c:'StateName'/2`)\nto handle the event, where `'StateName'` is the name\nof the current state of the `gen_fsm` process at the time\nthe time-out message is delivered.\n\n`Msg` is any term that is passed in the time-out message,\n`{timeout, Ref, Msg}`, as one of the arguments\nto [`Module:StateName/2`](`c:'StateName'/2`).","ref":"gen_fsm.html#start_timer/2"},{"type":"function","title":"gen_fsm.stop/1","doc":"","ref":"gen_fsm.html#stop/1"},{"type":"function","title":"gen_fsm.stop/3","doc":"Synchronously stop a generic FSM.\n\nOrders a generic finite state machine to exit with the specified `Reason`\nand waits for it to terminate.  The `gen_fsm` process calls\n[`Module:terminate/3`](`c:terminate/3`) before exiting.\n\nThe function returns `ok` if the generic finite state machine terminates\nwith the expected reason.  Any other reason than `normal`, `shutdown`,\nor `{shutdown, Term}` causes an error report to be issued using\n`error_logger:format/2`.\n\n`Timeout` is an integer greater than zero that specifies\nhow many milliseconds to wait for the generic FSM to terminate,\nor the atom `infinity` to wait indefinitely.\nIf the generic finite state machine has not terminated\nwithin the specified time, a `timeout` exception is raised.\n\nIf the process does not exist, a `noproc` exception is raised.","ref":"gen_fsm.html#stop/3"},{"type":"function","title":"gen_fsm.sync_send_all_state_event/2","doc":"","ref":"gen_fsm.html#sync_send_all_state_event/2"},{"type":"function","title":"gen_fsm.sync_send_all_state_event/3","doc":"Send an event synchronously to a generic FSM.\n\nSends an event to the `FsmRef` of the `gen_fsm` process and waits\nuntil a reply arrives or a time-out occurs.  The `gen_fsm` process calls\n[`Module:handle_sync_event/4`](`c:handle_sync_event/4`)\nto handle the event.\n\nFor a description of `FsmRef` and `Event`, see `send_event/2`.\nFor a description of `Timeout` and `Reply`, see `sync_send_event/3`.\n\nFor a discussion about the difference between `sync_send_event`\nand `sync_send_all_state_event`, see `send_all_state_event/2`.","ref":"gen_fsm.html#sync_send_all_state_event/3"},{"type":"function","title":"gen_fsm.sync_send_event/2","doc":"","ref":"gen_fsm.html#sync_send_event/2"},{"type":"function","title":"gen_fsm.sync_send_event/3","doc":"Send an event synchronously to a generic FSM.\n\nSends an event to the `FsmRef` of the `gen_fsm` process\nand waits until a reply arrives or a time-out occurs.\nThe `gen_fsm` process calls [`Module:StateName/3`](`c:'StateName'/3`)\nto handle the event, where `'StateName'` is the name\nof the current state of the `gen_fsm` process.\n\nFor a description of `FsmRef` and `Event`, see `send_event/2`.\n\n`Timeout` is an integer greater than zero that specifies\nhow many milliseconds to wait for a reply, or the atom `infinity`\nto wait indefinitely.  If no reply is received within the specified time,\nthe function call fails.\n\nReturn value `Reply` is defined in the return value of\n[`Module:StateName/3`](`c:'StateName'/3`)\n\n> #### Note {: .info }\n> The ancient behavior of sometimes consuming the server exit message\n> if the server died during the call while linked to the client\n> was removed in Erlang 5.6/OTP R12B.","ref":"gen_fsm.html#sync_send_event/3"},{"type":"callback","title":"gen_fsm.terminate/3","doc":"Clean up before termination.\n\nThis function is called by a `gen_fsm` process\nwhen it is about to terminate.  It is to be the opposite of\n[`Module:init/1`](`c:init/1`) and do any necessary cleaning up.\nWhen it returns, the `gen_fsm` process terminates with `Reason`.\nThe return value is ignored.\n\n`Reason` is a term denoting the stop reason, `StateName` is\nthe current [*state name*](#state-name),\nand `StateData` is the [*state data*](#state-data)\nof the `gen_fsm` process.\n\n`Reason` depends on why the `gen_fsm` process is terminating.\nIf it is because another callback function has returned a stop tuple\n`{stop, ...}`, `Reason` has the value specified in that tuple.\nIf it is because of a failure, `Reason` is the error reason.\n\nIf the `gen_fsm` process is part of a supervision tree\nand is ordered by its supervisor to terminate, this function\nis called with `Reason = shutdown` if the following conditions apply:\n\n- The gen_fsm process has been set to trap exit signals.\n\n- The shutdown strategy as defined in the child specification\n  of the supervisor is an integer time-out value, not brutal_kill.\n\nEven if the gen_fsm process is **not** part of a supervision tree,\nthis function is called if it receives an `'EXIT'` message\nfrom its parent. `Reason` is the same as in the `'EXIT'` message.\n\nOtherwise, the gen_fsm process terminates immediately.\n\nNotice that for any other reason than `normal`, `shutdown`,\nor `{shutdown, Term}` the `gen_fsm` process is assumed to terminate\nbecause of an error and an error report is issued\nusing `error_logger:format/2`.","ref":"gen_fsm.html#c:terminate/3"},{"type":"behaviour","title":"gen_server","doc":"Generic server behavior.\n\nThis behavior module provides the server in a client-server relation.\nA generic server process (`gen_server`) implemented using this module\nhas a standard set of interface functions and includes functionality\nfor tracing and error reporting.  It also fits into\nan OTP supervision tree. For more information, see section\n[gen_server Behaviour](`e:system:gen_server_concepts.md`)\nin OTP Design Principles.\n\nA `gen_server` process assumes all specific parts to be located\nin a callback module exporting a predefined set of functions.\nThe relationship between the behavior functions\nand the callback functions is as follows:\n\n```text\ngen_server module            Callback module\n-----------------            ---------------\ngen_server:start\ngen_server:start_monitor\ngen_server:start_link -----> Module:init/1\n\ngen_server:stop       -----> Module:terminate/2\n\ngen_server:call\ngen_server:send_request\ngen_server:multi_call -----> Module:handle_call/3\n\ngen_server:cast\ngen_server:abcast     -----> Module:handle_cast/2\n\n-                     -----> Module:handle_info/2\n\n-                     -----> Module:handle_continue/2\n\n-                     -----> Module:terminate/2\n\n-                     -----> Module:code_change/3\n```\n\nIf a callback function fails or returns a bad value,\nthe `gen_server` process terminates.  However, an exception of class\n[`throw`](`erlang:throw/1`) is not regarded as an error\nbut as a valid return, from all callback functions.\n\nA `gen_server` process handles system messages as described in `m:sys`.\nThe `m:sys` module can be used for debugging a `gen_server` process.\n\nNotice that a `gen_server` process does not trap exit signals\nautomatically, this must be explicitly initiated in the callback module.\n\nUnless otherwise stated, all functions in this module fail\nif the specified `gen_server` process does not exist\nor if bad arguments are specified.\n\nThe `gen_server` process can go into hibernation (see `erlang:hibernate/3`)\nif a callback function specifies `'hibernate'` instead of a time-out value.\nThis can be useful if the server is expected to be idle for a long time.\nHowever, use this feature with care, as hibernation implies at least\ntwo garbage collections (when hibernating and shortly after waking up)\nand is not something you want to do between each call to a busy server.\n\nIf the `gen_server` process needs to perform an action after\ninitialization or to break the execution of a callback into multiple steps,\nit can return `{continue, Continue}` in place of\nthe time-out or hibernation value, which will invoke\nthe [`Module:handle_continue/2`](`c:handle_continue/2`) callback,\nbefore receiving any external message / request.\n\nIf the `gen_server` process terminates, e.g. as a result of a function\nin the callback module returning `{stop,Reason,NewState}`,\nan exit signal with this `Reason` is sent to linked processes and ports.\nSee [Processes](`e:system:ref_man_processes.md#errors`)\nin the Reference Manual for details regarding error handling\nusing exit signals.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_][1]\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.\n> Blocking signaling can, for example, cause call time-outs\n> in `gen_server` to be significantly delayed.\n\n[1]: `e:system:ref_man_processes.md#blocking-signaling-over-distribution`","ref":"gen_server.html"},{"type":"behaviour","title":"See Also - gen_server","doc":"`m:gen_event`, `m:gen_statem`, `m:proc_lib`, `m:supervisor`, `m:sys`","ref":"gen_server.html#module-see-also"},{"type":"function","title":"gen_server.abcast/2","doc":"Cast a request to multiple nodes.\n\nEquivalent to [`abcast(Nodes, Name, Request)`](`abcast/3`)\nwhere `Nodes` is all nodes connected to the calling node,\nincluding the calling node itself.","ref":"gen_server.html#abcast/2"},{"type":"function","title":"gen_server.abcast/3","doc":"Cast a request to multiple nodes.\n\nSends an asynchronous request to the `gen_server` processes\nlocally registered as `Name` at the specified nodes.\nThe function returns immediately and ignores nodes that do not exist,\nor where the `gen_server` `Name` does not exist.  The  `gen_server`\nprocesses call [`Module:handle_cast/2`](`c:handle_cast/2`)\nto handle the request.\n\nFor a description of the arguments,\nsee [`multi_call/2,3,4`](`multi_call/2`).","ref":"gen_server.html#abcast/3"},{"type":"function","title":"gen_server.call/2","doc":"","ref":"gen_server.html#call/2"},{"type":"function","title":"gen_server.call/3","doc":"Call a server: send request and wait for response.\n\nMakes a synchronous call to the `ServerRef` of the `gen_server` process\nby sending a request and waiting until a reply arrives\nor a time-out occurs.  The `gen_server` process calls\n[`Module:handle_call/3`](`c:handle_call/3`) to handle the request.\n\nSee also `ServerRef`'s type `t:server_ref/0`.\n\n`Request` is any term that is passed as the first argument to\n[`Module:handle_call/3`](`c:handle_call/3`).\n\n`Timeout` is an integer that specifies how many milliseconds to wait\nfor a reply, or the atom `infinity` to wait indefinitely.  If no reply\nis received within the specified time, this function exits the calling\nprocess with an exit term containing `Reason = timeout` as described below.\n\n> #### Note {: .info }\n>\n> Before OTP 24, if the caller uses (`try`...)`catch`\n> to avoid process exit, and the server happens to just be late\n> with the reply, it may arrive to the process message queue\n> any time later. The calling process must therefore after\n> catching a time-out exit be prepared to receive garbage message(s)\n> on the form `{reference(), _}` and deal with them appropriately\n> (discard them) so they do not clog the process message queue,\n> or gets mistaken for other messages.\n>\n> Starting with OTP 24, `gen_server:call` uses process aliases,\n> so late replies will not be received.\n\nThe return value `Reply` is passed from the return value of\n[`Module:handle_call/3`](`c:handle_call/3`).\n\nThis call may exit the calling process with an exit term on the form\n`{Reason, Location}` where `Location = {gen_server, call, ArgList}`\nand `Reason` can be (at least) one of:\n\n- **`timeout`** - The call was aborted after waiting `Timeout` milliseconds\n  for a reply, as described above.\n\n- **`noproc`** - The `ServerRef` refers to a server by name (it is not a\n  `t:pid/0`) and looking up the server process failed, or the `t:pid/0`\n  was already terminated.\n\n- **`{nodedown,Node}`** - The `ServerRef` refers to a server\n  on the remote node `Node` and the connection to that node failed.\n\n- **`calling_self`** - A call to `self/0` would hang indefinitely.\n\n- **`shutdown`** - The server was stopped during the call\n  by its supervisor.  See also `stop/3`.\n\n- **`normal`\\\n  `{shutdown,Term}`** - The server stopped during the call\n  by returning `{stop,Reason,_}` from one of its callbacks\n  without replying to this call. See also `stop/3`.\n\n- **`_OtherTerm`** - The server process exited during the call,\n  with reason `Reason`. Either by returning `{stop,Reason,_}`\n  from one of its callbacks (without replying to this call),\n  by raising an exception, or due to getting an exit signal\n  it did not trap.","ref":"gen_server.html#call/3"},{"type":"function","title":"gen_server.cast/2","doc":"Cast a request to a server.\n\nSends an asynchronous request to the `gen_server`\n[`ServerRef`](`t:server_ref/0`) and returns `ok` immediately,\nignoring if the destination node or `gen_server`\nprocess does not exist.\n\nThe `gen_server` process calls\n[`Module:handle_cast(Request, _)`](`c:handle_cast/2`)\nto handle the request.","ref":"gen_server.html#cast/2"},{"type":"function","title":"gen_server.check_response/2","doc":"Check if a received message is a request response.\n\nChecks if `Msg` is a response corresponding to\nthe request identifier `ReqId`.  The request must have been made\nby `send_request/2`, and by the same process calling this function.\n\nIf `Msg` is a reply to the handle `ReqId` the result of the request\nis returned in `Reply`.  Otherwise this function returns `no_reply`\nand no cleanup is done, and thus the function shall be invoked repeatedly\nuntil the response is returned.\n\nThe return value `Reply` is passed from the return value of\n[`Module:handle_call/3`](`c:handle_call/3`).\n\nIf the `gen_statem` server process has died when this function\nis called, that is; `Msg` reports the server's death,\nthis function returns an `error` return with the exit `Reason`.","ref":"gen_server.html#check_response/2"},{"type":"function","title":"gen_server.check_response/3","doc":"Check if a received message is a request response in a collection.\n\nCheck if `Msg` is a response corresponding to a request identifier\nstored in `ReqIdCollection`.  All request identifiers of `ReqIdCollection`\nmust correspond to requests that have been made using `send_request/2`\nor `send_request/4`, by the process calling this function.\n\nThe `Label` in the response equals the `Label` associated\nwith the request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [storing the request id](`reqids_add/3`) in a collection,\nor when sending the request using `send_request/4`.\n\nCompared to `check_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `check_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` will be returned.\n\nIf `Msg` does not correspond to any of the request identifiers\nin `ReqIdCollection`, `no_reply` is returned.\n\nIf `Delete` is `true`, the association with `Label`\nhas been deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`.  If `Delete` is `false`, `NewReqIdCollection`\nwill equal `ReqIdCollection`.  Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`check_response/3`, `receive_response/3`, and `wait_response/3`.\n\nHowever, without deleting handled associations,\nthe above calls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests to\nthis function, it will always return `no_reply`.","ref":"gen_server.html#check_response/3"},{"type":"callback","title":"gen_server.code_change/3","doc":"Update the server state after code change.\n\nThis function is called by a `gen_server` process when it is to update\nits internal state during a release upgrade/downgrade, that is,\nwhen the instruction `{update, Module, Change, ...}`, is specified\nin the [`appup`](`e:sasl:appup.md`) file.\n\nFor more information, see section\n[Release Handling Instructions](`e:system:release_handling.md#instr`)\nin OTP Design Principles.\n\nFor an upgrade, `OldVsn` is `Vsn`, and for a downgrade, `OldVsn` is\n`{down,Vsn}`.  `Vsn` is defined by the `vsn` attribute(s)\nof the old version of the callback module `Module`.  If no such attribute\nis defined, the version is the checksum of the Beam file.\n\n`State` is the internal state of the `gen_server` process.\n\n`Extra` is passed \"as is\" from the `{advanced,Extra}` part\nof the update instruction.\n\nIf successful, the function must return the updated internal state.\n\nIf the function returns `{error,Reason}`,\nthe ongoing upgrade fails and rolls back to the old release.\n\n> #### Note {: .info }\n>\n> If a release upgrade/downgrade with `Change = {advanced, Extra}`\n> specified in the [`.appup`](`e:sasl:appup.md`) file is made when\n> [`Module:code_change/3`](`c:code_change/3`) is not implemented,\n> the callback call will crash with an `undef` error reason.","ref":"gen_server.html#c:code_change/3"},{"type":"function","title":"gen_server.enter_loop/3","doc":"","ref":"gen_server.html#enter_loop/3"},{"type":"function","title":"gen_server.enter_loop/4","doc":"Make the calling process become a `gen_server` process.\n\nWith argument `ServerName` equivalent to\n[`enter_loop(Module, Options,\n  State, ServerName, infinity)`](`enter_loop/5`).\n\nWith argument `How` equivalent to\n[`enter_loop(Module, Options, State, self(), How)`](`enter_loop/5`).","ref":"gen_server.html#enter_loop/4"},{"type":"function","title":"gen_server.enter_loop/5","doc":"Make the calling process become a `gen_server` process.\n\nDoes not return, instead the calling process enters the `gen_server`\nprocess receive loop and becomes a `gen_server` process.\nThe process _must_ have been started using one of the start functions\nin `m:proc_lib`.  The user is responsible for any initialization\nof the process, including registering a name for it.\n\nThis function is useful when a more complex initialization procedure\nis needed than the `gen_server` [`Module:init/1`](`c:init/1`);\ncallback provides.\n\n`Module`, `Options`, and `ServerName` have the same meanings\nas when calling [`start[_link|_monitor]/3,4`](`start_link/3`)\nor `ServerName` can be `self/0` for an anonymous server,\nwhich is the same as calling an `enter_loop/3,4` function\nwithout a `ServerName` argument.  However, if `ServerName`\nis specified (and not as `self/0`), the process must have been registered\naccordingly _before_ this function is called.\n\n`State`, `Timeout`, `Hibernate` and `Cont` have the same meanings\nas in the return value of [`Module:init/1`](`c:init/1`),\nwhich is _not_ called when `enter_loop/3,4,5` is used.  Note that\nto adhere to the [gen_server Behaviour](`e:system:gen_server_concepts.md`)\nsuch a callback function needs to be defined, and it might as well\nbe the one used when starting the `gen_server` process\nthrough `proc_lib`, and then be the one that calls `enter_loop/3,4,5`.\nBut if such a [`Module:init/1`](`c:init/1`) function,\nin for example error cases, cannot call `enter_loop/3,4,5`,\nit should return a value that follows the type specification\nfor [`Module:init/1`](`c:init/1`) such as `ignore`,\nalthough that value will be lost when returning to the spawning function.\n\nThis function fails if the calling process was not started\nby a `proc_lib` start function, or if it is not registered\naccording to `ServerName`.","ref":"gen_server.html#enter_loop/5"},{"type":"type","title":"gen_server.enter_loop_opt/0","doc":"Server start options for the [`start`](`start_link/4`) or\n[`enter_loop`](`enter_loop/5`) functions.\n\nOptions that can be used when starting a `gen_server` server through\n[`enter_loop/3-5`](`enter_loop/5`) or the start functions such as\n[`start_link/3,4`](`start_link/4`).\n\n- **`{hibernate_after, HibernateAfterTimeout}`** - Specifies that the\n  `gen_server` process awaits any message for `HibernateAfterTimeout`\n  milliseconds and if no message is received, the process goes into\n  hibernation automatically (by calling `proc_lib:hibernate/3`).\n\n- **`{debug, Dbgs}`** - For every entry in `Dbgs`,\n  the corresponding function in `m:sys` is called.","ref":"gen_server.html#t:enter_loop_opt/0"},{"type":"type","title":"gen_server.format_status/0","doc":"A map that describes the `gen_server` status.\n\nThe keys are:\n- **`state`** - The internal state of the `gen_server` process.\n- **`message`** - The message that caused the server to terminate.\n- **`reason`** - The reason that caused the server to terminate.\n- **`log`** - The [sys log](`sys:log/2`) of the server.\n\nNew associations may be added to the status map without prior notice.","ref":"gen_server.html#t:format_status/0"},{"type":"callback","title":"gen_server.format_status/1","doc":"Format/limit the status value.\n\nThis function is called by a `gen_server` process in in order to\nformat/limit the server state for debugging and logging purposes.\n\nIt is called in the following situations:\n\n- [`sys:get_status/1,2`](`sys:get_status/1`) is invoked\n  to get the `gen_server` status.\n- The `gen_server` process terminates abnormally and logs an error.\n\nThis callback is used to limit the status of the process returned by\n[`sys:get_status/1,2`](`sys:get_status/1`) or sent to `m:logger`.\n\nThe callback gets a map `Status` describing the current status\nand shall return a map `NewStatus` with the same keys,\nbut it may transform some values.\n\nTwo possible use cases for this callback is to remove\nsensitive information from the state to prevent it from being printed\nin log files, or to compact large irrelevant status items\nthat would only clutter the logs.\n\nExample:\n\n```erlang\nformat_status(Status) ->\n  maps:map(\n    fun(state,State) ->\n            maps:remove(private_key, State);\n       (message,{password, _Pass}) ->\n            {password, removed};\n       (_,Value) ->\n            Value\n    end, Status).\n```\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need not export it. The\n> `gen_server` module provides a default implementation\n> of this function that returns the callback module state.\n>\n> If this callback is exported but fails,\n> to hide possibly sensitive data,\n> the default function will instead return the fact that\n> [`Module:format_status/1`](`c:format_status/1`) has crashed.","ref":"gen_server.html#c:format_status/1"},{"type":"callback","title":"gen_server.format_status/2","doc":"Format/limit the status value.\n\nThis function is called by a `gen_server` process\nin in order to format/limit the server state\nfor debugging and logging purposes.\n\nIt is called in the following situations:\n\n- One of [`sys:get_status/1,2`](`sys:get_status/1`) is invoked to get the\n  `gen_server` status. `Opt` is set to the atom `normal`.\n- The `gen_server` process terminates abnormally and logs an error.\n  `Opt` is set to the atom `terminate`.\n\nThis function is useful for changing the form and appearance\nof the `gen_server` status for these cases. A callback module\nwishing to change the `sys:get_status/1,2` return value,\nas well as how its status appears in termination error logs,\nexports an instance of [`Module:format_status/2`](`c:format_status/2`)\nthat returns a term describing the current status\nof the `gen_server` process.\n\n`PDict` is the current value of the process dictionary\nof the `gen_server` process..\n\n`State` is the internal state of the `gen_server` process.\n\nThe function is to return `Status`, a term that changes the details\nof the current state and status of the `gen_server` process.\nThere are no restrictions on the form `Status` can take,\nbut for the `sys:get_status/1,2` case (when `Opt` is `normal`),\nthe recommended form for the `Status` value is\n`[{data, [{\"State\", Term}]}]`, where `Term` provides relevant details\nof the `gen_server` state.  Following this recommendation is not required,\nbut it makes the callback module status consistent with the rest of\nthe `sys:get_status/1,2` return value.\n\nOne use for this function is to return compact alternative\nstate representations to avoid that large state terms are printed\nin log files.\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need not export it.\n> The `gen_server` module provides a default implementation\n> of this function that returns the callback module state.","ref":"gen_server.html#c:format_status/2"},{"type":"type","title":"gen_server.from/0","doc":"A call's reply destination.\n\nDestination, given to the `gen_server` as the first argument\nto the callback function [`Module:handle_call/3`](`c:handle_call/3`),\nto be used by the when replying through `reply/2` (instead of\nthrough the callback function's return value), to the process `Client`\nthat has called the `gen_server` using [`call/2,3`](`call/2`).\n`Tag` is a term that is unique for this call/request instance.","ref":"gen_server.html#t:from/0"},{"type":"callback","title":"gen_server.handle_call/3","doc":"Handle a call.\n\nWhenever a `gen_server` process receives a request sent using\n[`call/2,3`](`call/3`), [`multi_call/2,3,4`](`multi_call/4`),\nor [`send_request/2,4`](`send_request/4`), this function is called\nto handle the request.\n\n`State` is the internal state of the `gen_server` process,\nand `NewState` a possibly updated one.\n\n`Request` is passed from the same argument provided\nto `call` or `multi_call`.\n\nThe return value `Result` is interpreted as follows:\n\n- **`{reply,Reply,NewState}`\\\n  `{reply,Reply,NewState,_}`** - The `Reply` value is sent back\n to the client request and there becomes its return value.\n\n  The `gen_server` process continues executing with the possibly updated\n  internal state `NewState`.\n\n- **`{noreply,NewState}`\\\n  `{noreply,NewState,_}`** - The `gen_server` process\n  continues executing with the possibly updated internal state `NewState`.\n\n  A reply to the client request has to be created by calling\n  [`reply(From, Reply)`](`reply/2`), either in this\n  or in a later callback.\n\n- **`{reply,_,_,Timeout}`\\\n  `{noreply,_,Timeout}`** - If an integer `Timeout` is provided,\n  a time-out occurs unless a request or a message is received\n  within that many milliseconds. A time-out is represented\n  by the atom `timeout` to be handled by the\n  [`Module:handle_info/2`](`c:handle_info/2`) callback function.\n  `Timeout =:= infinity` can be used to wait indefinitely,\n  which is the same as returning a value without a `Timeout` member.\n\n- **`{reply,_,_,hibernate}`\\\n  `{noreply,_,hibernate}`** - The process goes into hibernation,\n  by calling `proc_lib:hibernate/3`, waiting for\n  the next message to arrive\n\n- **`{reply,_,_,{continue,Continue}}`\\\n  `{noreply,_,{continue,Continue}}`** - The process will execute the\n  [`Module:handle_continue/2`](`c:handle_continue/2`) callback function,\n  with `Continue` as the first argument.\n\n- **`{stop,Reason,NewState}`\\\n  `{stop,Reason,Reply,NewState}`** - The `gen_server` process will call\n  [`Module:terminate(Reason,NewState)`](`c:terminate/2`),\n  and then terminate.\n\n  `{stop,_,Reply,_}` will create a reply to the client request just as\n  `{reply,Reply,...}` while `{stop,_,_}` will not, so just as for\n  `{noreply,NewState,...}` a reply has to be created by calling\n  [`reply(From, Reply)`](`reply/2`) before returning `{stop,_,_}`.","ref":"gen_server.html#c:handle_call/3"},{"type":"callback","title":"gen_server.handle_cast/2","doc":"Handle a cast message.\n\nWhenever a `gen_server` process receives a request sent using `cast/2`\nor [`abcast/2,3`](`abcast/2`), this function is called\nto handle the request.\n\nFor a description of the arguments and possible return values,\nsee [`Module:handle_call/3`](`c:handle_call/3`).","ref":"gen_server.html#c:handle_cast/2"},{"type":"callback","title":"gen_server.handle_continue/2","doc":"Handle a callback continuation.\n\nThis function is called by a `gen_server` process whenever\na previous callback returns one of the tuples containing\n`{continue, Continue}`.  The call is invoked immediately after\nthe previous callback, which makes it useful for performing work\nafter initialization or, for splitting the work in a callback\ninto multiple steps, updating the process state along the way.\n\nFor a description of the other arguments and possible return values,\nsee [`Module:handle_call/3`](`c:handle_call/3`).\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need to export it\n> only if theyreturn one of the tuples containing `{continue,Continue}`\n> from another callback.  If such a `{continue,_}` tuple is used\n> and the callback is not implemented, the process will exit\n> with `undef` error.","ref":"gen_server.html#c:handle_continue/2"},{"type":"callback","title":"gen_server.handle_info/2","doc":"Handle an info message (regular process message).\n\nThis function is called by a `gen_server` process when a time-out occurs\nor when it receives any other message than a synchronous\nor asynchronous request (or a system message).\n\n`Info` is either the atom `timeout`, if a time-out has occurred,\nor the received message.\n\nFor a description of the other arguments and possible return values,\nsee [`Module:handle_call/3`](`c:handle_call/3`).\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need not export it.\n> The `gen_server` module provides a default implementation\n> of this function that logs about the unexpected `Info` message,\n> drops it and returns `{noreply, State}`.","ref":"gen_server.html#c:handle_info/2"},{"type":"callback","title":"gen_server.init/1","doc":"Initialize the server.\n\nWhenever a `gen_server` process is started using [`start/3,4`](`start/3`),\n[`start_monitor/3,4`](`start_monitor/3`),\nor [`start_link/3,4`](`start_link/3`), this function is called\nby the new process to initialize the server.\n\n`Args` is the `Args` argument provided to the start function.\n\nThe return value `Result` is interpreted as follows:\n\n- **`{ok,State}`\\\n  `{ok,State,_}`** - Initialization was succesful\n   and `State` is the internal state of the `gen_server` process.\n\n- **`{ok,_,Timeout}`\\\n  `{ok,_,hibernate}`\\\n  `{ok,_,{continue,Continue}}`** - See the corresponding return values from\n  [`Module:handle_call/3`](`c:handle_call/3`) for a description\n  of this tuple member.\n\n- **`{stop,Reason}`** - Initialization failed.  The `gen_server`\n  process exits with reason `Reason`.\n\n- **`{error,Reason}` _since OTP 26.0_\\\n  `ignore`** - Initialization failed. The `gen_server` process exits\n  with reason `normal`.\n\nSee function [`start_link/3,4`](`start_link/3`)'s return value\n`t:start_ret/0` in these different cases.","ref":"gen_server.html#c:init/1"},{"type":"function","title":"gen_server.multi_call/2","doc":"Call servers on multiple nodes in parallel.\n\nEquivalent to [`multi_call(Nodes, Name, Request)`](`multi_call/3`)\nwhere `Nodes` is all nodes connected to the calling node,\nincluding the calling node itself.","ref":"gen_server.html#multi_call/2"},{"type":"function","title":"gen_server.multi_call/3","doc":"","ref":"gen_server.html#multi_call/3"},{"type":"function","title":"gen_server.multi_call/4","doc":"Call servers on multiple nodes in parallel.\n\nMakes a synchronous call to all `gen_server` processes\nlocally registered as `Name` at the specified nodes,\nby first sending the request to the nodes, and then waiting\nfor the replies. The `gen_server` processes on the nodes call\n[`Module:handle_call/3`](`c:handle_call/3`) to handle the request.\n\nThe function returns a tuple `{Replies, BadNodes}`,\nwhere `Replies` is a list of `{Node, Reply}` tuples,\nand `BadNodes` is a list of nodes that either did not exist,\nwhere `Name` was not a registered `gen_server`,\nor where it did not reply.\n\n`Nodes` is a list of node names to which the request is to be sent.\n\n`Name` is the locally registered name for each `gen_server` process.\n\n`Request` is any term that is passed as the first argument to\n[`Module:handle_call/3`](`c:handle_call/3`).\n\n`Timeout` is an integer that specifies how many milliseconds\nto wait for all replies, or the atom `infinity` to wait indefinitely.\nIf no reply is received from a node within the specified time,\nthe node is added to `BadNodes`.\n\nWhen a reply `Reply` is received from the `gen_server` process\nat a node `Node`, `{Node,Reply}` is added to `Replies`.\n`Reply` is passed from the return value of\n[`Module:handle_call/3`](`c:handle_call/3`).\n\n> #### Warning {: .warning }\n>\n> If one of the nodes cannot process monitors, for example,\n> C or Java nodes, and the `gen_server` process is not started\n> when the requests are sent, but starts within 2 seconds,\n> this function waits the whole `Timeout`, which may be infinity.\n>\n> This problem does not exist if all nodes are Erlang nodes.\n\nTo prevent late answers (after the time-out)\nfrom polluting the message queue of the caller,\na middleman process is used to do the calls.\nLate answers are then discarded when they arrive to\nthe terminated middleman process.","ref":"gen_server.html#multi_call/4"},{"type":"function","title":"gen_server.receive_response/2","doc":"Receive a request response.\n\nReceive a response corresponding to the request identifier `ReqId`.\nThe request must have been made by `send_request/2`,\nand it must have been made by the same process calling this function.\n\n`Timeout` specifies how long to wait for a response.\nIf no response is received within the specified time,\nthis function returns `timeout`.  Assuming that the\nserver executes on a node supporting aliases (introduced in OTP 24)\nthe request will also be abandoned.  That is,\nno response will be received after a time-out.\nOtherwise, a stray response might be received at a later time.\n\nThe return value `Reply` is passed from the return value of\n[`Module:handle_call/3`](`c:handle_call/3`).\n\nThe function returns an error if the `gen_server` died\nbefore a reply was sent.\n\nThe difference between `receive_response/2` and `wait_response/2`\nis that `receive_response/2` abandons the request at time-out\nso that a potential future response is ignored,\nwhile `wait_response/2` does not.","ref":"gen_server.html#receive_response/2"},{"type":"function","title":"gen_server.receive_response/3","doc":"Receive a request response in a collection.\n\nReceive a response in `ReqIdCollection`. All request identifiers\nof `ReqIdCollection` must correspond to requests that have been made\nusing `send_request/2` or `send_request/4`, and all requests\nmust have been made by the process calling this function.\n\nThe `Label` in the response is the `Label` associated with\nthe request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [adding the request id](`reqids_add/3`) to a collection,\nor when sending the request using `send_request/4`.\n\nCompared to `receive_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `receive_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` will be returned.\n\n`Timeout` specifies how long to wait for a response.  If no response\nis received within the specified time, the function returns `timeout`.\nAssuming that the server executes on a node supporting aliases\n(introduced in OTP 24) all requests identified by `ReqIdCollection`\nwill also be abandoned.  That is, no responses will be received\nafter a time-out.  Otherwise, stray responses might be received\nat a later time.\n\nThe difference between `receive_response/3` and `wait_response/3`\nis that `receive_response/3` abandons the requests at time-out\nso that potential future responses are ignored,\nwhile [`wait_response/3`](`wait_response/3`) does not.\n\nIf `Delete` is `true`, the association with `Label`\nis deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`. If `Delete` is `false`, `NewReqIdCollection`\nwill equal `ReqIdCollection`.  Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`receive_response/3`, `check_response/3`, and `wait_response/3`.\n\nHowever, without deleting handled associations,\nthe above calls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests to\nthis function, it will always block until `Timeout` expires\nand then return `timeout`.","ref":"gen_server.html#receive_response/3"},{"type":"function","title":"gen_server.reply/2","doc":"Send a reply to a client.\n\nThis function can be used by a `gen_server` process to explicitly send\na reply to a client that called [`call/2,3`](`call/2`) or\n[`multi_call/2,3,4`](`multi_call/2`), when the reply cannot be passed\nin the return value of [`Module:handle_call/3`](`c:handle_call/3`).\n\n`Client` must be the `From` argument provided to the `c:handle_call/3`\ncallback function. `Reply` is any term passed back to the client\nas the return value of `call/2,3` or `multi_call/2,3,4`.","ref":"gen_server.html#reply/2"},{"type":"opaque","title":"gen_server.reply_tag/0","doc":"A handle that associates a reply to the corresponding request.","ref":"gen_server.html#t:reply_tag/0"},{"type":"function","title":"gen_server.reqids_add/3","doc":"Store a request identifier in a colletion.\n\nStores `ReqId` and associates a `Label` with the request identifier\nby adding this information to `ReqIdCollection` and returning\nthe resulting request identifier collection.","ref":"gen_server.html#reqids_add/3"},{"type":"function","title":"gen_server.reqids_new/0","doc":"Create an empty request identifier collection.\n\nReturns a new empty request identifier collection.\nA request identifier collection can be utilized to handle\nmultiple outstanding requests.\n\nRequest identifiers of requests made by `send_request/2`\ncan be stored in a collection using `reqids_add/3`.\nSuch a collection of request identifiers can later be used\nin order to get one response corresponding to a request\nin the collection by passing the collection as argument to\n`receive_response/3`, `wait_response/3`, or, `check_response/3`.\n\n`reqids_size/1` can be used to determine the number of\nrequest identifiers in a collection.","ref":"gen_server.html#reqids_new/0"},{"type":"function","title":"gen_server.reqids_size/1","doc":"Returns the number of request identifiers in `ReqIdCollection`.","ref":"gen_server.html#reqids_size/1"},{"type":"function","title":"gen_server.reqids_to_list/1","doc":"Convert a request identifier collection to a list.\n\nReturns a list of `{ReqId, Label}` tuples which corresponds to\nall request identifiers with their associated labels\nin [`ReqIdCollection`](`t:request_id_collection/0`).","ref":"gen_server.html#reqids_to_list/1"},{"type":"opaque","title":"gen_server.request_id/0","doc":"An opaque request identifier. See `send_request/2` for details.","ref":"gen_server.html#t:request_id/0"},{"type":"opaque","title":"gen_server.request_id_collection/0","doc":"An opaque collection of request identifiers (`t:request_id/0`).\n\nEach request identifier can be associated with a label\nchosen by the user.  For more information see `reqids_new/0`.","ref":"gen_server.html#t:request_id_collection/0"},{"type":"type","title":"gen_server.response_timeout/0","doc":"Response time-out for an asynchronous call.\n\nUsed to set a time limit on how long to wait for a response using either\n`receive_response/2`, `receive_response/3`, `wait_response/2`, or\n`wait_response/3`. The time unit used is `millisecond`.\n\nCurrently valid values:\n\n- **`0..4294967295`** - Time-out relative to current time in milliseconds.\n\n- **`infinity`** - Infinite time-out. That is,\n  the operation will never time out.\n\n- **`{abs, Timeout}`** - An absolute\n  [Erlang monotonic time](`erlang:monotonic_time/1`)\n  time-out in milliseconds. That is, the operation will time out when\n  [`erlang:monotonic_time(millisecond)`](`erlang:monotonic_time/1`)\n  returns a value larger than or equal to `Timeout`.\n  `Timeout` is not allowed to identify a time further into the future\n  than `4294967295` milliseconds.  Specifying the time-out\n  using an absolute value is especially handy when you have\n  a deadline for responses corresponding to a complete collection\n  of requests (`t:request_id_collection/0`), since you do not have to\n  recalculate the relative time until the deadline over and over again.","ref":"gen_server.html#t:response_timeout/0"},{"type":"function","title":"gen_server.send_request/2","doc":"Send an asynchronous `call` request.\n\nSends `Request` to the `gen_server` process identified by `ServerRef`\nand returns a request identifier `ReqId`.\n\nThe return value `ReqId` shall later be used with `receive_response/2`,\n`wait_response/2`, or `check_response/2` to fetch the actual result\nof the request.  Besides passing the request identifier directly\nto these functions, it can also be stored in\na request identifier collection using `reqids_add/3`.\nSuch a collection of request identifiers can later be used\nin order to get one response corresponding to a\nrequest in the collection by passing the collection\nas argument to `receive_response/3`, `wait_response/3`,\nor `check_response/3`.  If you are about to store the request identifier\nin a collection, you may want to consider using `send_request/4` instead.\n\nThe call\n`gen_server:receive_response(gen_server:send_request(ServerRef, Request), Timeout)`\ncan be seen as equivalent to\n[`gen_server:call(ServerRef, Request, Timeout)`](`call/3`),\nignoring the error handling.\n\nThe `gen_server` process calls [`Module:handle_call/3`](`c:handle_call/3`) to\nhandle the request.\n\nSee the type `t:server_ref/0` for the possible values for `ServerRef`.\n\n`Request` is any term that is passed as the first argument to\n[`Module:handle_call/3`](`c:handle_call/3`).","ref":"gen_server.html#send_request/2"},{"type":"function","title":"gen_server.send_request/4","doc":"Send an asynchronous `call` request and add it\nto a request identifier collection.\n\nSends `Request` to the `gen_server` process identified by `ServerRef`.\nThe `Label` will be associated with the request identifier\nof the operation and added to the returned request identifier collection\n`NewReqIdCollection`.  The collection can later be used in order to\nget one response corresponding to a request in the collection\nby passing the collection as argument to `receive_response/3`,\n`wait_response/3`, or `check_response/3`.\n\nThe same as calling\n[`reqids_add`](`reqids_add/3`)`(`[`send_request`](`send_request/2`)`(ServerRef, Request), Label, ReqIdCollection)`,\nbut slightly more efficient.","ref":"gen_server.html#send_request/4"},{"type":"type","title":"gen_server.server_name/0","doc":"Server name specification: `local`, `global`, or `via` registered.\n\nTo be used when starting a `gen_server`.  See functions\n[`start/3,4`](`start/3`),\n[`start_link/3,4`](`start_link/3`),\n[`start_monitor/3,4`](`start_monitor/3`),\n[`enter_loop/3,4,5`](`enter_loop/3`), and the type `t:server_ref/0`.\n\n- **`{local, LocalName}`** - Register the `gen_server` locally\n  as `LocalName` using [`register/2`](`erlang:register/2`).\n\n- **`{global, GlobalName}`** - Register the `gen_server` process id\n  globally as `GlobalName` using `global:register_name/2`.\n\n- **`{via, RegMod, ViaName}`** - Register the `gen_server` process\n  with the registry represented by `RegMod`. The `RegMod` callback\n  is to export the functions `register_name/2`, `unregister_name/1`,\n  `whereis_name/1`, and `send/2`, which are to behave like\n  the corresponding functions in `m:global`.\n  Thus, `{via, global, GlobalName}` is a valid reference\n  equivalent to `{global, GlobalName}`.","ref":"gen_server.html#t:server_name/0"},{"type":"type","title":"gen_server.server_ref/0","doc":"Server specification: `t:pid/0` or registered `t:server_name/0`.\n\nTo be used when addressing a `gen_server`.  See [`call/2,3`](`call/2`),\n`cast/2`, `send_request/2`, `check_response/2`, `wait_response/2`,\n[`stop/2,3`](`stop/1`) and the type `t:server_name/0`.\n\nIt can be:\n\n- **`t:pid/0`** - The `gen_server`'s process identifier.\n\n- **`LocalName`** - The `gen_server` is locally registered\n  as `LocalName` with [`register/2`](`erlang:register/2`).\n\n- **`{Name,Node}`** - The `gen_server` is locally registered\n  on another node.\n\n- **`{global, GlobalName}`** - The `gen_server` is globally registered\n  in `m:global`.\n\n- **`{via, RegMod, ViaName}`** - The `gen_server` is registered\n  in an alternative process registry.  See the same term\n  described for `t:server_name/0`.","ref":"gen_server.html#t:server_ref/0"},{"type":"function","title":"gen_server.start/3","doc":"Start a server, neither linked nor registered.\n\nEquivalent to `start/4` except that the `gen_server` process is not\nregistered with any [name service](`t:server_name/0`).","ref":"gen_server.html#start/3"},{"type":"function","title":"gen_server.start/4","doc":"Start a server, neither linked nor registered.\n\nCreates a standalone `gen_server` process, that is,\na `gen_server` process that is not part of a supervision tree,\nand thus has no supervisor.\n\nOther than that see `start_link/4`.","ref":"gen_server.html#start/4"},{"type":"function","title":"gen_server.start_link/3","doc":"Start a server, linked but not registered.\n\nEquivalent to `start_link/4` except that the `gen_server` process is\nnot registered with any [name service](`t:server_name/0`).","ref":"gen_server.html#start_link/3"},{"type":"function","title":"gen_server.start_link/4","doc":"Start a server, linked but not registered.\n\nCreates a `gen_server` process as part of a supervision tree.\nThis function is to be called, directly or indirectly, by the supervisor.\nFor example, it ensures that the `gen_server` process is spawned\nas linked to the caller (supervisor).\n\nThe `gen_server` process calls [`Module:init/1`](`c:init/1`)\nto initialize.  To ensure a synchronized startup procedure,\n`start_link/3,4` does not return until [`Module:init/1`](`c:init/1`)\nhas returned or failed.\n\n[`ServerName`](`t:server_name/0`) specifies with what name\nand now to register the server name.  See type `t:server_name/0`\nfor different name registrations.\n\n`Module` is the name of the callback module.\n\n`Args` is any term that is passed as the argument to\n[`Module:init/1`](`c:init/1`).\n\nSee type `t:start_opt/0` for `Options` for starting\nthe `gen_server` process.\n\nSee type `t:start_ret/0` for a description this function's return values.\n\nIf `start_link/3,4` returns `ignore` or `{error, _}`,\nthe started `gen_server` process has terminated.  If an `'EXIT'` message\nwas delivered to the calling process (due to the process link),\nthat message has been consumed.\n\n> #### Warning {: .warning }\n>\n> Before OTP 26.0, if the started `gen_server` process returned e.g.\n> `{stop, Reason}` from [`Module:init/1`](`c:init/1`), this function\n> could return `{error, Reason}` _before_ the started `m:gen_server` process\n> had terminated so starting again might fail because VM resources\n> such as the registered name was not yet unregistered. An `'EXIT'` message\n> could arrive later to the process calling this function.\n>\n> But if the started `gen_server` process instead failed during\n> [`Module:init/1`](`c:init/1`), a process link `{'EXIT', Pid, Reason}`\n> message caused this function to return `{error, Reason}`,\n> so the `'EXIT'` message had been consumed and the started\n> `m:gen_server` process had terminated.\n>\n> Since it was impossible to tell the difference between these two cases\n> from `start_link/3,4`'s return value, this inconsistency was cleaned up\n> in OTP 26.0.\n\nThe difference between returning `{stop, _}` and `{error, _}` from\n[`Module:init/1`](`c:init/1`), is that `{error, _}` results in a graceful\n(\"silent\") termination since the `gen_server` process exits\nwith reason `normal`.","ref":"gen_server.html#start_link/4"},{"type":"type","title":"gen_server.start_mon_ret/0","doc":"Return value from the [`start_monitor/3,4`](`start_monitor/3`) functions.\n\nThe same as type `t:start_ret/0` except that for a succesful start\nit returns both the process identifier `Pid`\nand a [`monitor/2,3`](`erlang:monitor/2`) [`MonRef`](`t:reference/0`).","ref":"gen_server.html#t:start_mon_ret/0"},{"type":"function","title":"gen_server.start_monitor/3","doc":"Start a server, monitored but neither linked nor registered.\n\nEquivalent to `start_monitor/4` except that the `gen_server` process\nis not registered with any [name service](`t:server_name/0`).","ref":"gen_server.html#start_monitor/3"},{"type":"function","title":"gen_server.start_monitor/4","doc":"Start a server, monitored and registered, but not linked.\n\nCreates a standalone `gen_server` process, that is,\na `gen_server` process that is not part of a supervision tree\n(and thus has no supervisor) and atomically sets up a monitor\nto the newly created server.\n\nOther than that see [`start_link/3,4`](`start_link/3`).\nNote that the return value for a successful start differs in that\nit returns a monitor `reference`.  See type `t:start_mon_ret/0`.\n\nIf the start is not successful, the caller will be blocked\nuntil the monitor's `'DOWN'` message has been received\nand removed from the message queue.","ref":"gen_server.html#start_monitor/4"},{"type":"type","title":"gen_server.start_opt/0","doc":"Server start options for the [`start` functions](`start_link/3`).\n\nOptions that can be used when starting a `gen_server` server through,\nfor example, [`start_link/3,4`](`start_link/4`).\n\n- **`{timeout, Timeout}`** - How many milliseconds\n  the `gen_server` process is allowed to spend initializing\n  or it is terminated and the start function returns `{error, timeout}`.\n\n- **`{spawn_opt, SpawnOptions}`** - The `SpawnOptions` option list\n  is passed to the function used to spawn the `gen_server`;\n  see `t:proc_lib:start_spawn_option/0`).\n\n  > #### Note {: .info }\n  >\n  > Using spawn option `monitor` is not allowed -\n  > it causes a `badarg` failure.\n\n- **`t:enter_loop_opt/0`** - See the type `t:enter_loop_opt/0`\n  below for more start options that are also allowed\n  by [`enter_loop/3,4,5`](`enter_loop/3`).","ref":"gen_server.html#t:start_opt/0"},{"type":"type","title":"gen_server.start_ret/0","doc":"Return value from the [`start/3,4`](`start/3`) and\n[`start_link/3,4`](`start_link/3`) functions.\n\n- **`{ok, Pid}`** - The `gen_server` process was succesfully created and\n  initialized, with the process identifier `Pid`.\n\n- **`{error, {already_started, OtherPid}}`** - A process with the specified\n  `ServerName` exists already with the process identifier `OtherPid`.\n  This function failed to start a `gen_server`.  It exited with reason\n  `normal` before calling [`Module:init/1`](`c:init/1`).\n\n- **`{error, timeout}`** - The `gen_server` process failed to initialize\n  since [`Module:init/1`](`c:init/1`) did not return within the\n  [start time-out](`t:start_opt/0`). The `gen_server` process was killed\n  with [`exit(_, kill)`](`erlang:exit/2`).\n\n- **`ignore`** - The `gen_server` process failed to initialize since\n  [`Module:init/1`](`c:init/1`) returned `ignore`.\n\n- **`{error,Reason}`** - The `gen_server` process failed to initialize since\n  [`Module:init/1`](`c:init/1`) returned `{stop,Reason}`, `{error,Reason}`,\n  or it failed with reason `Reason`.\n\nSee [`Module:init/1`](`c:init/1`) about the exit reason\nfor the `gen_server` process when it fails to initialize.","ref":"gen_server.html#t:start_ret/0"},{"type":"function","title":"gen_server.stop/1","doc":"","ref":"gen_server.html#stop/1"},{"type":"function","title":"gen_server.stop/3","doc":"Stop a server.\n\nOrders the generic server specified by `ServerRef` to exit\nwith the specified `Reason` and waits for it to terminate.\nThe `gen_server` process calls [`Module:terminate/2`](`c:terminate/2`)\nbefore exiting.\n\nThe function returns `ok` if the server terminates\nwith the expected reason. Any other reason than `normal`, `shutdown`,\nor `{shutdown,Term}` causes an error report to be issued using `m:logger`.\nAn exit signal with the same reason is sent to linked processes and ports.\n\n`Timeout` is an integer that specifies how many milliseconds to wait\nfor the server to terminate, or the atom `infinity` to wait indefinitely.\nIf the server has not terminated within the specified time,\nthe call exits the calling process with reason `timeout`.\n\nIf the process does not exist, the call exits the calling process\nwith reason `noproc`, or with reason `{nodedown,Node}`\nif the connection fails to the remote `Node` where the server runs.","ref":"gen_server.html#stop/3"},{"type":"callback","title":"gen_server.terminate/2","doc":"Handle server termination.\n\nThis function is called by a `gen_server` process\nwhen it is about to terminate.\n\nIt is to be the opposite of [`Module:init/1`](`c:init/1`)\nand do any necessary cleaning up.  When it returns,\nthe `gen_server` process terminates with `Reason`.\nThe return value is ignored.\n\n`Reason` is a term denoting the stop reason and `State`\nis the internal state of the `gen_server` process.\n\n`Reason` depends on why the `gen_server` process is terminating.\nIf it is because another callback function has returned a stop tuple\n`{stop,..}`, `Reason` has the value specified in that tuple.\nIf it is because of a failure, `Reason` is the error reason.\n\nIf the `gen_server` process is part of a supervision tree\nand is ordered by its supervisor to terminate, this function is called\nwith `Reason=shutdown` if the following conditions apply:\n\n- The `gen_server` process has been set to trap exit signals.\n- The shutdown strategy as defined in the child specification\n  of the supervisor is an integer time-out value, not `brutal_kill`.\n\nEven if the `gen_server` process is _not_ part of a supervision tree,\nthis function is called if it receives an `'EXIT'` message from its parent.\n`Reason` is the same as in the `'EXIT'` message.\n\nIf the `gen_server` process does not trap exits,\nthe `gen_server` process terminates immediately.\n\nNotice that for any other reason than `normal`, `shutdown`, or\n`{shutdown,Term}`, see `stop/3`, the `gen_server` process is assumed\nto terminate because of an error, and an error report is issued\nusing `m:logger`.\n\nWhen the gen_server process exits, an exit signal with the same reason\nis sent to linked processes and ports.\n\n> #### Note {: .info }\n>\n> This callback is optional, so callback modules need not export it.\n> The `gen_server` module provides a default implementation\n> with no cleanup.","ref":"gen_server.html#c:terminate/2"},{"type":"function","title":"gen_server.wait_response/2","doc":"Wait for a request response.\n\nWait for the response to the request identifier `ReqId`. The request\nmust have been made by `send_request/2`, and it must have been made\nby the same process calling this function.\n\n`WaitTime` specifies how long to wait for a reply.\nIf no reply is received within the specified time,\nthe function returns `timeout` and no cleanup is done.\nThus the function can be invoked repeatedly until a reply is returned.\n\nThe return value `Reply` is passed from the return value of\n[`Module:handle_call/3`](`c:handle_call/3`).\n\nThe function returns an error if the `gen_server`\ndied before a reply was sent.\n\nThe difference between `receive_response/2` and\n`wait_response/2` is that `receive_response/2` abandons\nthe request at time-out so that a potential future response is ignored,\nwhile [`wait_response/2`](`wait_response/2`) does not.","ref":"gen_server.html#wait_response/2"},{"type":"function","title":"gen_server.wait_response/3","doc":"Wait for any request response in a collection.\n\nWait for a response in a `ReqIdCollection`.  All request identifiers\nof `ReqIdCollection` must correspond to requests that have been made\nusing `send_request/2` or `send_request/4`, and all requests\nmust have been made by the process calling this function.\n\nThe `Label` in the response is the `Label` associated with\nthe request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [adding the request id](`reqids_add/3`) to a collection,\nor when sending the request using `send_request/4`.\n\nCompared to `wait_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `wait_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` will be returned.\n\nIf no response is received before `WaitTime` has expired,\n`timeout` is returned.  It is valid to continue waiting\nfor a response as many times as needed up until a response\nhas been received and completed by `check_response()`,\n`receive_response()`, or `wait_response()`.\n\nThe difference between `receive_response/3` and `wait_response/3`\nis that `receive_response/3` abandons requests at time-out\nso that potential future responses are ignored, while\n`wait_response/3` does not.\n\nIf `Delete` is `true`, the association with `Label`\nhas been deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`.  If `Delete` is `false`, `NewReqIdCollection`\nwill equal `ReqIdCollection`.  Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`wait_response/3`, `check_response/3`, and `receive_response/3`.\n\nHowever, without deleting handled associations, the above\ncalls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests\nto this function, it will always block until `WaitTime` expires\nand then return `timeout`.","ref":"gen_server.html#wait_response/3"},{"type":"behaviour","title":"gen_statem","doc":"Generic state machine behavior.\n\n`gen_statem` provides a generic state machine behaviour\nthat since Erlang/OTP 20.0 replaces its predecessor `m:gen_fsm`,\nand should be used for new code.  The `gen_fsm` behaviour\nremains in OTP \"as is\" to not break old code using it.\n\nA generic state machine server process (`gen_statem`) implemented\nusing this module has a standard set of interface functions\nand includes functionality for tracing and error reporting.\nIt also fits into an OTP supervision tree.  For more information,\nsee [OTP Design Principles](`e:system:statem.md`).\n\n> #### Note {: .info }\n>\n> If you are new to `gen_statem` and want an overview\n> of concepts and operation the section\n> [`gen_statem` Behaviour](`e:system:statem.md`) located in\n> the User's Guide [OTP Design Principles](`e:system:index.html`)\n> is recommended to read.  This reference manual focuses on\n> being correct and complete, which might make it hard to see\n> the forest for all the trees.\n\n#### Features\n\n`gen_statem` has got the same features that `m:gen_fsm` had\nand adds some really useful:\n\n- [Co-located state code](#state_functions)\n- [Arbitrary term state](#handle_event_function)\n- [Event postponing](#event-postponing)\n- [Self-generated events](#event-insertion)\n- [State time-out](`t:state_timeout/0`)\n- [Multiple generic named time-outs](`t:generic_timeout/0`)\n- [Absolute time-out time](`t:timeout_option/0`)\n- [Automatic state enter calls](#state-enter-calls)\n- [Reply from other state than the request](#reply-to-a-call),\n  traceable with `m:sys`\n- [Multiple replies](#reply-to-a-call), traceable with `m:sys`\n- [Changing the callback module](#change_callback_module)\n\nTwo [_callback modes_](`t:callback_mode/0`) are supported:\n\n- `state_functions` - for finite-state machines (`m:gen_fsm` like),\n  which requires the state to be an atom and uses that state\n  as the name of the current callback function, arity 3.\n- `handle_event_function` - that allows the state to be any term\n  and that uses `c:handle_event/4` as callback function for all states.\n\nThe callback modes for `gen_statem` differs from the one for\n`gen_fsm`, but it is still fairly easy to\nrewrite from `gen_fsm` to `gen_statem`.  See the\n[rewrite guide](`m:gen_fsm#module-migration-to-gen_statem`)\nat the start of the `m:gen_fsm` documentation.\n\n#### Callback module\n\nA `gen_statem` assumes all specific parts to be located\nin a callback module exporting a predefined set of functions.\nThe relationship between the behavior functions\nand the callback functions is as follows:\n\n```\ngen_statem module            Callback module\n-----------------            ---------------\ngen_statem:start\ngen_statem:start_monitor\ngen_statem:start_link -----> Module:init/1\n\nServer start or code change\n                      -----> Module:callback_mode/0\n                      selects callback mode\n\ngen_statem:stop\nSupervisor exit\nCallback failure      -----> Module:terminate/3\n\ngen_statem:call\ngen_statem:cast\ngen_statem:send_request\nerlang:send\nerlang:'!'            -----> Module:StateName/3\n                   or -----> Module:handle_event/4\n                   depending on callback mode\n\nRelease upgrade/downgrade\n(code change)\n                      -----> Module:code_change/4\n```\n\n#### State callback {: #state-callback }\n\nThe _state callback_ for a specific [state](`t:state/0`) in a `gen_statem`\nis the callback function that is called for all events in this state.\nIt is selected depending on which [_callback mode_](`t:callback_mode/0`)\nthat the callback module defines with the callback function\n[`Module:callback_mode/0`](`c:callback_mode/0`).\n\n[](){: #state_functions }\nWhen the [_callback mode_](`t:callback_mode/0`) is `state_functions`,\nthe state must be an atom and is used as the _state callback_ name;\nsee [`Module:StateName/3`](`c:'StateName'/3`).  This co-locates all code\nfor a specific state in one function as the `gen_statem` engine branches\ndepending on state name.  Note the fact that the callback function\n[`Module:terminate/3`](`c:terminate/3`) makes the state name `terminate`\nunusable in this mode.\n\n[](){: #handle_event_function }\nWhen the [_callback mode_](`t:callback_mode/0`) is `handle_event_function`,\nthe state can be any term and the _state callback_ name is\n[`Module:handle_event/4`](`c:handle_event/4`). This makes it easy\nto branch depending on state or event as you desire. Be careful about\nwhich events you handle in which states so that you do not accidentally\npostpone an event forever creating an infinite busy loop.\n\n#### Event types\n\nEvents are of different [types](`t:event_type/0`),\ntherefore the callback functions can know the origin of an event\nwhen handling it.  [External events](`t:external_event_type/0`) are\n`call`,  `cast`, and  `info`. Internal events are\n[`timeout`](`t:timeout_event_type/0`) and `internal`.\n\n#### Event handling\n\nWhen `gen_statem` receives a process message it is transformed\ninto an event and the [_state callback_](#state-callback)\nis called with the event as two arguments: type and content. When the\n[_state callback_](#state-callback) has processed the event\nit returns to `gen_statem` which does a _state transition_. If this\n_state transition_ is to a different state, that is: `NextState =/= State`,\nit is a _state change_.\n\n#### Transition actions\n\nThe [_state callback_](#state-callback) may return\n[_transition actions_](`t:action/0`) for `gen_statem` to execute\nduring the _state transition_, for example to set a time-out\nor reply to a call.\n\n#### Reply to a call {: #reply-to-a-call }\n\nSee [`gen_statem:call/2,3`](#call-reply) about how to reply\nto a call.  A reply can be sent from any _state callback_,\nnot just the one that got the request event.\n\n#### Event postponing {: #event-postponing }\n\nOne of the possible _transition actions_ is to postpone the current event.\nThen it will not be handled in the current state.  The `gen_statem` engine\nkeeps a queue of events divided into postponed events and\nevents still to process (not presented yet).  After a _state change_\nthe queue restarts with the postponed events.\n\nThe `gen_statem` event queue model is sufficient to emulate\nthe normal process message queue with selective receive.\nPostponing an event corresponds to not matching it\nin a receive statement, and changing states corresponds to\nentering a new receive statement.\n\n#### Event insertion {: #event-insertion }\n\nThe [_state callback_](#state-callback) can insert\nevents using the [_transition action_](`t:action/0`) `next_event`,\nand such an event is inserted in the event queue as the next to call the\n[_state callback_](#state-callback) with. That is,\nas if it is the oldest incoming event. A dedicated `t:event_type/0`\n`internal` can be used for such events making it possible to\nsafely distinguish them from external events.\n\nInserting an event replaces the trick of calling your own state handling\nfunctions that you often would have to resort to in, for example,\n`m:gen_fsm` to force processing an inserted event before others.\n\n> #### Note {: .info }\n>\n> If you postpone an event and (against good practice) directly call\n> a different _state callback_, the postponed event is not retried,\n> since there was no _state change_.\n>\n> Instead of directly calling a _state callback_, do a _state change_.\n> This makes the `gen_statem` engine retry postponed events.\n>\n> Inserting an event in a _state change_ also triggers\n> the new  _state callback_ to be called with that event\n> before receiving any external events.\n\n#### State enter calls {: #state-enter-calls }\n\nThe `gen_statem` engine can automatically make a special call to the\n[_state callback_](#state-callback) whenever a new state is\nentered; see `t:state_enter/0`. This is for writing code common\nto all state entries.  Another way to do it is to explicitly insert\nan event at the _state transition_, and/or to use a dedicated\n_state transition_ function, but that is something you will have to\nremember at every _state transition_ to the state(s) that need it.\n\nFor the details of a _state transition_, see type `t:transition_option/0`.\n\n#### Hibernation\n\nThe `gen_statem` process can go into hibernation;\nsee `proc_lib:hibernate/3`. It is done when\na [_state callback_](#state-callback) or\n[`Module:init/1`](`c:init/1`) specifies `hibernate`\nin the returned [`Actions`](`t:enter_action/0`) list. This feature\ncan be useful to reclaim process heap memory while the server\nis expected to be idle for a long time. However, use it with care,\nas hibernation can be too costly to use after every event;\nsee `erlang:hibernate/3`.\n\nThere is also a server start option\n[`{hibernate_after, Timeout}`](`t:enter_loop_opt/0`)\nfor [`start/3,4`](`start/3`), [`start_link/3,4`](`start_link/3`),\n[`start_monitor/3,4`](`start_monitor/3`),\nor [`enter_loop/4,5,6`](`enter_loop/6`), that may be used\nto automatically hibernate the server.\n\n#### Callback failure\n\nIf a callback function fails or returns a bad value,\nthe `gen_statem` terminates.  However, an exception of class\n[`throw`](`erlang:throw/1`) is not regarded as an error\nbut as a valid return, from all callback functions.\n\n#### System messages and the `m:sys` module\n\nA `gen_statem` handles system messages as described in `m:sys`.\nThe `m:sys` module can be used for debugging a `gen_statem`.\nReplies sent through [_transition actions_](`t:action/0`)\ngets logged, but not replies sent through [`reply/1,2`](`reply/2`).\n\n#### Trapping exit\n\nA `gen_statem` process, like all `gen_`\\* behaviours,\ndoes not trap exit signals automatically;\nthis must be explicitly initiated in the callback module\n(by calling [`process_flag(trap_exit, true)`](`erlang:process_flag/2`)\npreferably from `c:init/1`.\n\n#### Server termination\n\nIf the `gen_statem` process terminates, e.g. as a result\nof a callback function returning `{stop, Reason}`, an exit signal\nwith this `Reason` is sent to linked processes and ports.\nSee [Processes](`e:system:ref_man_processes.md#errors`)\nin the Reference Manual for details regarding error handling\nusing exit signals.\n\n> #### Note {: .info }\n>\n> For some important information about distributed signals, see the\n> [_Blocking Signaling Over Distribution_\n> ](`e:system:ref_man_processes.md#blocking-signaling-over-distribution`)\n> section in the _Processes_ chapter of the _Erlang Reference Manual_.\n> Blocking signaling can, for example, cause call time-outs in `gen_statem`\n> to be significantly delayed.\n\n#### Bad argument\n\nUnless otherwise stated, all functions in this module fail if the specified\n`gen_statem` does not exist or if bad arguments are specified.","ref":"gen_statem.html"},{"type":"behaviour","title":"Example - gen_statem","doc":"The following example shows a simple pushbutton model\nfor a toggling pushbutton implemented with\n[_callback mode_](`t:callback_mode/0`) `state_functions`.\nYou can push the button and it replies if it went on or off,\nand you can ask for a count of how many times it has been pushed\nto switch on.","ref":"gen_statem.html#module-example"},{"type":"behaviour","title":"Pushbutton State Diagram - gen_statem","doc":"```mermaid\n---\ntitle: Pushbutton State Diagram\n---\nstateDiagram-v2\n    [*]  --> off\n    off  --> on  : push\\n* Increment count\\n* Reply 'on'\n    on   --> off : push\\n* Reply 'off'\n```\n\nNot shown in the state diagram:\n* The API function `push()` generates an event `push` of type `call`.\n* The API function `get_count()` generates an event `get_count`\n  of type `call` that is handled in all states by replying with\n  the current count value.\n* Unknown events are ignored and discarded.\n* There is boilerplate code for start, stop, terminate, code change,\n  init, to set the callback mode to `state_functions`, etc...","ref":"gen_statem.html#module-pushbutton-state-diagram"},{"type":"behaviour","title":"Pushbutton Code - gen_statem","doc":"The following is the complete callback module file `pushbutton.erl`:\n\n```erlang\n-module(pushbutton).\n-behaviour(gen_statem).\n\n-export([start/0,push/0,get_count/0,stop/0]).\n-export([terminate/3,code_change/4,init/1,callback_mode/0]).\n-export([on/3,off/3]).\n\nname() -> pushbutton_statem. % The registered server name\n\n%% API.  This example uses a registered name name()\n%% and does not link to the caller.\nstart() ->\n    gen_statem:start({local,name()}, ?MODULE, [], []).\npush() ->\n    gen_statem:call(name(), push).\nget_count() ->\n    gen_statem:call(name(), get_count).\nstop() ->\n    gen_statem:stop(name()).\n\n%% Mandatory callback functions\nterminate(_Reason, _State, _Data) ->\n    void.\ncode_change(_Vsn, State, Data, _Extra) ->\n    {ok,State,Data}.\ninit([]) ->\n    %% Set the initial state + data.  Data is used only as a counter.\n    State = off, Data = 0,\n    {ok,State,Data}.\ncallback_mode() -> state_functions.\n\n%%% state callback(s)\n\noff({call,From}, push, Data) ->\n    %% Go to 'on', increment count and reply\n    %% that the resulting status is 'on'\n    {next_state,on,Data+1,[{reply,From,on}]};\noff(EventType, EventContent, Data) ->\n    handle_event(EventType, EventContent, Data).\n\non({call,From}, push, Data) ->\n    %% Go to 'off' and reply that the resulting status is 'off'\n    {next_state,off,Data,[{reply,From,off}]};\non(EventType, EventContent, Data) ->\n    handle_event(EventType, EventContent, Data).\n\n%% Handle events common to all states\nhandle_event({call,From}, get_count, Data) ->\n    %% Reply with the current count\n    {keep_state,Data,[{reply,From,Data}]};\nhandle_event(_, _, Data) ->\n    %% Ignore all other events\n    {keep_state,Data}.\n```\n\nThe following is a shell session when running it:\n\n```erlang\n1> pushbutton:start().\n{ok,<0.36.0>}\n2> pushbutton:get_count().\n0\n3> pushbutton:push().\non\n4> pushbutton:get_count().\n1\n5> pushbutton:push().\noff\n6> pushbutton:get_count().\n1\n7> pushbutton:stop().\nok\n8> pushbutton:push().\n** exception exit: {noproc,{gen_statem,call,[pushbutton_statem,push,infinity]}}\n     in function  gen:do_for_proc/2 (gen.erl, line 261)\n     in call from gen_statem:call/3 (gen_statem.erl, line 386)\n```\n\nTo compare styles, here follows the same example using\n[_callback mode_](`t:callback_mode/0`) `handle_event_function`,\nor rather, the code to replace after function [`init/1`](`c:init/1`)\nof the `pushbutton.erl` example file above:\n\n```erlang\ncallback_mode() -> handle_event_function.\n\n%%% state callback(s)\n\nhandle_event({call,From}, push, off, Data) ->\n    %% Go to 'on', increment count and reply\n    %% that the resulting status is 'on'\n    {next_state,on,Data+1,[{reply,From,on}]};\nhandle_event({call,From}, push, on, Data) ->\n    %% Go to 'off' and reply that the resulting status is 'off'\n    {next_state,off,Data,[{reply,From,off}]};\n%%\n%% Event handling common to all states\nhandle_event({call,From}, get_count, State, Data) ->\n    %% Reply with the current count\n    {next_state,State,Data,[{reply,From,Data}]};\nhandle_event(_, _, State, Data) ->\n    %% Ignore all other events\n    {next_state,State,Data}.\n```\n\n> #### Note {: .info }\n>","ref":"gen_statem.html#module-pushbutton-code"},{"type":"behaviour","title":"API changes - gen_statem","doc":"> - This behavior appeared in Erlang/OTP 19.0 as experimental.\n> - In OTP 19.1 a backwards incompatible change of the return tuple from\n>   [`Module:init/1`](`c:init/1`) was made,\n>   the mandatory callback function\n>   [`Module:callback_mode/0`](`c:callback_mode/0`) was introduced,\n>   and `enter_loop/4` was added.\n> - In OTP 19.2 [_state enter calls_](`t:state_enter/0`) were added.\n> - In OTP 19.3 [state time-outs](`t:state_timeout/0`) were added.\n> - In OTP 20.0 [generic time-outs](`t:generic_timeout/0`) were added\n>   and `gen_statem` was stated to be no longer experimental and\n>   preferred over `gen_fsm`.\n> - In OTP 22.1 time-out content [`update`](`t:timeout_update_action/0`)\n>   and explicit time-out [`cancel`](`t:timeout_cancel_action/0`)\n>   were added.\n> - In OTP 22.3 the possibility to change the callback module with actions\n>   [`change_callback_module`](#change_callback_module),\n>   [`push_callback_module`](#push_callback_module) and\n>   [`pop_callback_module`](#pop_callback_module), was added.\n> - In OTP 23.0 [`start_monitor/3,4`](`start_monitor/3`) were added,\n>   as well as functions for asynchronous calls: `send_request/2`,\n>   [`wait_response/1,2`](`wait_response/2`), and `check_response/2`.\n> - In OTP 24.0 [`receive_response/1,2`](`receive_response/2`) were added.\n> - In OTP 25.0 [`Module:format_status/1`](`c:format_status/1`)\n>   was added to replace [`Module:format_status/1`](`c:format_status/1`),\n>   as well as functions for collections of asynchronous calls:\n>   `send_request/4`, `wait_response/3`, `receive_response/3`,\n>   `check_response/3`, `reqids_new/0`, `reqids_size/1`,\n>   `reqids_add/3`, `reqids_to_list/1`.\n> - In OTP 26.0 the possibility to return `{error, Reason}` from\n>   [`Module:init/1`](`c:init/1`) was added.\n> - In OTP 27.0 [`Module:format_status/1`](`c:format_status/1`)\n>   was deprecated.","ref":"gen_statem.html#module-api-changes"},{"type":"behaviour","title":"See Also - gen_statem","doc":"`m:gen_event`, `m:gen_fsm`, `m:gen_server`, `m:proc_lib`, `m:supervisor`,\n`m:sys`.","ref":"gen_statem.html#module-see-also"},{"type":"type","title":"gen_statem.action/0","doc":"Actions for a _state transition_, or when starting the server.\n\nThese _transition actions_ can be invoked by returning them from the\n[_state callback_](#state-callback) when it is called\nwith an [event](`t:event_type/0`), from [`Module:init/1`](`c:init/1`)\nor by passing them to [`enter_loop/4,5,6`](`enter_loop/6`).\nThey are **not allowed** from _state enter calls_.\n\nActions are executed in the containing list order.\n\nActions that set [transition options](`t:transition_option/0`)\noverride any previous of the same type, so the last\nin the containing list wins.  For example, the last `t:postpone/0`\noverrides any previous `t:postpone/0` in the list.\n\n- **`{postpone, Value}`** - Sets the\n  [`transition_option()` ](`t:transition_option/0`)`t:postpone/0`\n  for this _state transition_.  This action is ignored when returned from\n  [`Module:init/1`](`c:init/1`) or passed to\n  [`enter_loop/4,5,6`](`enter_loop/6`), as there is no event to postpone\n  in those cases.\n\n  `postpone` is equivalent to `{postpone, true}`.\n\n- **`{next_event, EventType, EventContent}`** - This action\n  does not set any [`transition_option()`](`t:transition_option/0`)\n  but instead stores the specified `EventType` and `EventContent`\n  for insertion after all actions have been executed.\n\n  The stored events are inserted in the queue as the next to process\n  before any already queued events. The order of these stored events\n  is preserved, so the first `next_event` in the containing list\n  becomes the first to process.\n\n  An event of type [`internal`](`t:event_type/0`) should be used\n  when you want to reliably distinguish an event inserted this way\n  from any external event.\n\n- **`{change_callback_module, NewModule}`** {: #change_callback_module } -\n  Changes the callback module to `NewModule` which will be used\n  when calling all subsequent [state callbacks](#state-callback).\\\n  **Since OTP 22.3.**\n\n  The `gen_statem` engine will find out the\n  [_callback mode_](`t:callback_mode/0`) of `NewModule` by calling\n  [`NewModule:callback_mode/0`](`c:callback_mode/0`) before the next\n  [state callback](#state-callback).\n\n  Changing the callback module does not affect the _state transition_\n  in any way, it only changes which module that handles the events.\n  Be aware that all relevant callback functions in `NewModule` such as\n  the [state callback](#state-callback),\n  [`NewModule:code_change/4`](`c:code_change/4`),\n  [`NewModule:format_status/1`](`c:format_status/1`) and\n  [`NewModule:terminate/3`](`c:terminate/3`) must be able to handle\n  the state and data from the old module.\n\n- **`{push_callback_module, NewModule}`** {: #push_callback_module } -\n   Pushes the current callback module to the top of an internal stack\n   of callback modules, and changes the callback module to `NewModule`.\n   Otherwise like `{change_callback_module, NewModule}` above.\\\n  **Since OTP 22.3.**\n\n- **`pop_callback_module`** {: #pop_callback_module } -\n  Pops the top module from the internal stack of callback modules\n  and changes the callback module to be the popped module.\n  If the stack is empty the server fails.\n  Otherwise like `{change_callback_module, NewModule}` above.\\\n  **Since OTP 22.3.**","ref":"gen_statem.html#t:action/0"},{"type":"function","title":"gen_statem.call/2","doc":"","ref":"gen_statem.html#call/2"},{"type":"function","title":"gen_statem.call/3","doc":"Call a server: send request and wait for response.\n\nMakes a synchronous call to the `gen_statem`\n[`ServerRef`](`t:server_ref/0`) by sending a request\nand waiting until the response arrives.\n\n[](){: #call-reply }\nThe `gen_statem` calls the\n[_state callback_](#state-callback)\nwith `t:event_type/0` `{call, From}` and event content `Request`.\n\nThe server's reply is sent from a [_state callback_](#state-callback),\nby returning a [_transition action_](`t:action/0`) `{reply, From, Reply}`,\ncalling [`reply(Replies)`](`reply/1`) with such a reply action\nin the `Replies` list, or calling [`reply(From, Reply)`](`reply/2`).\n\n`Timeout` is an integer > 0, which specifies how many milliseconds\nto wait for a reply, or the atom `infinity` to wait indefinitely,\nwhich is the default. If no reply is received within the specified time,\nthe function call fails.\n\nPrevious issue with late replies that could occur\nwhen having network issues or using `dirty_timeout`\nis now prevented by use of\n[_process aliases_](`e:system:ref_man_processes.md#process-aliases`).\n`{clean_timeout, T}` and `{dirty_timeout, T}` therefore\nno longer serves any purpose and will work the same as `Timeout`\nwhile all of them also being equally efficient.\n\nThe call can also fail, for example, if the `gen_statem`\ndies before or during this function call.\n\nWhen this call fails it [exits](`erlang:exit/1`)\nthe calling process.  The exit term is on the form\n`{Reason, Location}` where `Location = {gen_statem, call, ArgList}`.\nSee [`gen_server:call/3`](`gen_server:call/3`) that has a description\nof relevant values for the `Reason` in the exit term.","ref":"gen_statem.html#call/3"},{"type":"type","title":"gen_statem.callback_mode/0","doc":"One function per state or one common event handler.\n\nThe _callback mode_ is selected with the return value from\n[`Module:callback_mode/0`](`c:callback_mode/0`):\n\n- **`state_functions`** - The state must be of type `t:state_name/0`\n  and one callback function per state, that is,\n  [`Module:StateName/3`](`c:'StateName'/3`), is used.\n\n- **`handle_event_function`** - The state can be any term and the callback\n  function [`Module:handle_event/4`](`c:handle_event/4`)\n  is used for all states.\n\nThe function [`Module:callback_mode/0`](`c:callback_mode/0`) is called\nwhen starting the `gen_statem`, after code change and after changing\nthe callback module with any of the actions\n[`change_callback_module`](#change_callback_module),\n[`push_callback_module`](#push_callback_module),\nor [`pop_callback_module`](#pop_callback_module).\nThe result is cached for subsequent calls to\n[_state callbacks_](#state-callback).","ref":"gen_statem.html#t:callback_mode/0"},{"type":"callback","title":"gen_statem.callback_mode/0","doc":"Select the _callback mode_ and possibly\n[_state enter calls_](`t:state_enter/0`).\n\nThis function is called by a `gen_statem` when it needs to find out the\n[_callback mode_](`t:callback_mode/0`) of the callback module.\n\nThe value is cached by `gen_statem` for efficiency reasons,\nso this function is only called once after server start,\nafter code change, and after changing the callback module,\nbut before the first [_state callback_](#state-callback)\nin the current callback module's code is called.  More occasions may be\nadded in future versions of `gen_statem`.\n\nServer start happens either when [`Module:init/1`](`c:init/1`)\nreturns or when [`enter_loop/4,5,6`](`enter_loop/6`) is called.\nCode change happens when [`Module:code_change/4`](`c:code_change/4`)\nreturns.  A change of the callback module happens when\na [_state callback_](#state-callback) returns\nany of the actions [`change_callback_module`](#push_callback_module),\n[`push_callback_module`](#push_callback_module) or\n[`pop_callback_module`](#pop_callback_module).\n\nThe `CallbackMode` is either just `t:callback_mode/0`\nor a list containing `t:callback_mode/0` and possibly\nthe atom [`state_enter`](`t:state_enter/0`).\n\n> #### Note {: .info }\n>\n> If this function's body does not return an inline constant value\n> the callback module is doing something strange.","ref":"gen_statem.html#c:callback_mode/0"},{"type":"type","title":"gen_statem.callback_mode_result/0","doc":"Return value from [`Module:callback_mode/0`](`c:callback_mode/0`).\n\nThis is the return type from\n[`Module:callback_mode/0`](`c:callback_mode/0`)\nwhich selects [_callback mode_](`t:callback_mode/0`)\nand whether to do [_state enter calls_](`t:state_enter/0`),\nor not.","ref":"gen_statem.html#t:callback_mode_result/0"},{"type":"function","title":"gen_statem.cast/2","doc":"Cast an event to a server.\n\nSends an asynchronous `cast` event to the `gen_statem`\n[`ServerRef`](`t:server_ref/0`) and returns `ok` immediately,\nignoring if the destination node or `gen_statem` does not exist.\n\nThe `gen_statem` calls the\n[_state callback_](#state-callback)\nwith `t:event_type/0` `cast` and event content `Msg`.","ref":"gen_statem.html#cast/2"},{"type":"function","title":"gen_statem.check_response/2","doc":"Check if a received message is a request response.\n\nChecks if `Msg` is a response corresponding to\nthe request identifier `ReqId`.  The request must have been made\nby `send_request/2` and by the same process calling this function.\n\nIf `Msg` is a reply to the handle `ReqId` the result of the request\nis returned in `Reply`.  Otherwise this function returns `no_reply`\nand no cleanup is done, and thus the function shall be invoked repeatedly\nuntil the response is returned.\n\nSee [`call/3`](#call-reply) about how the request is handled\nand the `Reply` is sent by the `gen_statem` server.\n\nIf the `gen_statem` server process has died when this function\nis called, that is; `Msg` reports the server's death,\nthis function returns an `error` return with the exit `Reason`.","ref":"gen_statem.html#check_response/2"},{"type":"function","title":"gen_statem.check_response/3","doc":"Check if a received message is a request response in a collection.\n\nCheck if `Msg` is a response corresponding to a request identifier\nstored in `ReqIdCollection`.  All request identifiers of `ReqIdCollection`\nmust correspond to requests that have been made using `send_request/2`\nor `send_request/4`, by the process calling this function.\n\nThe `Label` in the response equals the `Label` associated\nwith the request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [storing the request id](`reqids_add/3`) in a collection,\nor when sending the request using `send_request/4`.\n\nCompared to `check_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `check_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` is returned.\n\nIf `Msg` does not correspond to any of the request identifiers\nin `ReqIdCollection`, `no_reply` is returned.\n\nIf `Delete` equals `true`, the association with `Label`\nhas been deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`. If `Delete` is `false`, `NewReqIdCollection`\nwill equal `ReqIdCollection`. Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`wait_response/3`, `check_response/3`, and `receive_response/3`.\n\nHowever, without deleting handled associations,\nthe above calls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests to\nthis function, it will always return `no_reply`.","ref":"gen_statem.html#check_response/3"},{"type":"callback","title":"gen_statem.code_change/4","doc":"Update the [state](`t:state/0`) and [data](`t:data/0`)\nafter code change.\n\nThis function is called by a `gen_statem` when it is to update\nits internal state during a release upgrade/downgrade, that is,\nwhen the instruction `{update, Module, Change, ...}`,\nwhere `Change = {advanced, Extra}`, is specified in\nthe [`appup`](`e:sasl:appup.md`) file.  For more information, see\n[OTP Design Principles](`e:system:release_handling.md#instr`).\n\nFor an upgrade, `OldVsn` is `Vsn`, and for a downgrade, `OldVsn` is\n`{down, Vsn}`. `Vsn` is defined by the `vsn` attribute(s)\nof the old version of the callback module `Module`.\nIf no such attribute is defined, the version is the checksum\nof the Beam file.\n\n`OldState` and `OldData` is the internal state of the `gen_statem`.\n\n`Extra` is passed \"as is\" from the `{advanced, Extra}` part\nof the update instruction.\n\nIf successful, the function must return the updated internal state\nin an `{ok, NewState, NewData}` tuple.\n\nIf the function returns a failure `Reason`, the ongoing upgrade fails\nand rolls back to the old release. Note that `Reason` cannot be\nan `{ok, _, _}` tuple since that will be regarded\nas a `{ok, NewState, NewData}` tuple, and that a tuple matching `{ok, _}`\nis an also invalid failure `Reason`.  It is recommended to use\nan atom as `Reason` since it will be wrapped in an `{error, Reason}` tuple.\n\nAlso note when upgrading a `gen_statem`, this function and hence the\n`Change = {advanced, Extra}` parameter\nin the [`appup`](`e:sasl:appup.md`) file is not only needed\nto update the internal state or to act on the `Extra`\nargument.  It is also needed if an upgrade or downgrade should change\n[_callback mode_](`t:callback_mode/0`), or else the _callback mode_\nafter the code change will not be honoured, most probably causing\na server crash.\n\nIf the server changes callback module using any of the actions\n[`change_callback_module`](#change_callback_module),\n[`push_callback_module`](#push_callback_module), or\n[`pop_callback_module`](#pop_callback_module), be aware that it is always\nthe current callback module that will get this callback call.\nThat the current callback module handles the current\nstate and data update should be no surprise, but it\nmust be able to handle even parts of the state and data\nthat it is not familiar with, somehow.\n\nIn the supervisor\n[child specification](`e:system:sup_princ.md#child-specification`)\nthere is a list of modules which is recommended to contain\nonly the callback module.  For a `gen_statem`\nwith multiple callback modules there is no real need to list\nall of them, it may not even be possible since the list could change\nafter code upgrade.  If this list would contain only\nthe start callback module, as recommended, what is important\nis to upgrade _that_ module whenever\na _synchronized code replacement_ is done.\nThen the release handler concludes that\nan upgrade that upgrades _that_ module needs to suspend,\ncode change, and resume any server whose child specification declares\nthat it is using _that_ module.\nAnd again; the _current_ callback module will get the\n[`Module:code_change/4`](`c:code_change/4`) call.\n\n> #### Note {: .info }\n>\n> If a release upgrade/downgrade with `Change = {advanced, Extra}`\n> specified in the `.appup` file is made\n> when [`Module:code_change/4`](`c:code_change/4`) is not implemented\n> the process will crash with exit reason `undef`.","ref":"gen_statem.html#c:code_change/4"},{"type":"type","title":"gen_statem.data/0","doc":"Generic state data for the server.\n\nA term in which the state machine implementation is to store\nany server data it needs. The difference between this and the `t:state/0`\nitself is that a change in this data does not cause postponed events\nto be retried. Hence, if a change in this data would change\nthe set of events that are handled, then that data item\nshould be part of the `t:state/0` instead.","ref":"gen_statem.html#t:data/0"},{"type":"type","title":"gen_statem.enter_action/0","doc":"Actions for any callback: hibernate, time-outs or replies.\n\nThese _transition actions_ are allowed when a `t:action/0` is allowed,\nand also from a _state enter call_, and can be invoked\nby returning them from the [_state callback_](#state-callback), from\n[`Module:init/1`](`c:init/1`) or by passing them to\n[`enter_loop/4,5,6`](`enter_loop/6`).\n\nActions are executed in the containing list order.\n\nActions that set [transition options](`t:transition_option/0`)\noverride any previous of the same type,\nso the last in the containing list wins. For example,\nthe last `t:event_timeout/0` overrides any previous\n`t:event_timeout/0` in the list.\n\n- **`{hibernate, Value}`** - Sets the `t:transition_option/0`\n  `t:hibernate/0` for this _state transition_.\n\n  `hibernate` is equivalent to `{hibernate, true}`.","ref":"gen_statem.html#t:enter_action/0"},{"type":"function","title":"gen_statem.enter_loop/4","doc":"","ref":"gen_statem.html#enter_loop/4"},{"type":"function","title":"gen_statem.enter_loop/5","doc":"Make the calling process become a `gen_statem` server.\n\nWith argument `Actions`, equivalent to\n[`enter_loop(Module, Opts, State, Data, self(), Actions)`](`enter_loop/6`).\n\nOtherwise equivalent to\n[`enter_loop(Module, Opts, State, Data, Server, [])`](`enter_loop/6`).","ref":"gen_statem.html#enter_loop/5"},{"type":"function","title":"gen_statem.enter_loop/6","doc":"Make the calling process become a `gen_statem` server.\n\nDoes not return, instead the calling process enters the `gen_statem`\nreceive loop and becomes a `gen_statem` server.  The process\n_must_ have been started using one of the start functions\nin `m:proc_lib`.  The user is responsible for any initialization\nof the process, including registering a name for it.\n\nThis function is useful when a more complex initialization procedure\nis needed than the `gen_statem` [`Module:init/1`](`c:init/1`)\ncallback offers.\n\n`Module` and `Opts` have the same meanings as when calling\n[`start[link | monitor]/3,4`](`start_link/3`).\n\nIf `Server` is `self/0` an anonymous server is created just as when using\n[`start[link |_monitor]/3`](`start_link/3`).  If `Server`\nis a `t:server_name/0` a named server is created just as when using\n[`start[link |_monitor]/4`](`start_link/4`).  However,\nthe `t:server_name/0` name must have been registered accordingly\n_before_ this function is called.\n\n`State`, `Data`, and `Actions` have the same meanings\nas in the return value of [`Module:init/1`](`c:init/1`).\nAlso, the callback module does not need to export\na [`Module:init/1`](`c:init/1`) function.\n\nThe function fails if the calling process was not started\nby a `m:proc_lib` start function, or if it is not registered\naccording to `t:server_name/0`.","ref":"gen_statem.html#enter_loop/6"},{"type":"type","title":"gen_statem.enter_loop_opt/0","doc":"Server [start options](#start-options) for the\n[`enter_loop/4,5,6`](`enter_loop/6`),\n[`start/3,4`](`start/3`), [`start_link/3,4`](`start_link/3`),\nand [`start_monitor/3,4`](`start_monitor/3`), functions.\n\nSee [`start_link/4`](#start-options).","ref":"gen_statem.html#t:enter_loop_opt/0"},{"type":"type","title":"gen_statem.event_content/0","doc":"Event payload from the event's origin, delivered to\nthe [_state callback_](#state-callback).\n\nSee [`event_type`](`t:event_type/0`) that describes the origins of\nthe different event types, which is also where the event's content\ncomes from.","ref":"gen_statem.html#t:event_content/0"},{"type":"type","title":"gen_statem.event_handler_result/1","doc":"","ref":"gen_statem.html#t:event_handler_result/1"},{"type":"type","title":"gen_statem.event_handler_result/2","doc":"Return value from a [_state callback_](#state-callback)\nafter handling an event.\n\n`StateType` is `t:state_name/0`\nif [_callback mode_](`t:callback_mode/0`) is `state_functions`,\nor `t:state/0`\nif [_callback mode_](`t:callback_mode/0`) is `handle_event_function`.\n\n- **`{next_state, NextState, NewData [, Actions]}`** -\n  The `gen_statem` does a _state transition_ to `NextState`\n  (which may be the same as the current state), sets `NewData`\n  as the current server `t:data/0`, and executes all `Actions`.\n  If `NextState =/= CurrentState` the _state transition_\n  is a _state change_.","ref":"gen_statem.html#t:event_handler_result/2"},{"type":"type","title":"gen_statem.event_timeout/0","doc":"How long to wait for an event.\n\nStarts a timer set by `t:timeout_action/0`\n`Time`, or `{timeout, Time, EventContent [, Options]}`.\n\nWhen the timer expires an event of `t:event_type/0` `timeout`\nwill be generated. See `erlang:start_timer/4` for how `Time`\nand [`Options`](`t:timeout_option/0`) are interpreted.  Future\n`erlang:start_timer/4` `Options` will not necessarily be supported.\n\nAny event that arrives cancels this time-out. Note that a retried\nor inserted event counts as arrived. So does a state time-out zero event,\nif it was generated before this time-out is requested.\n\nIf `Time` is `infinity`, no timer is started,\nas it never would expire anyway.\n\nIf `Time` is relative and `0` no timer is actually started,\ninstead the the time-out event is enqueued to ensure\nthat it gets processed before any not yet received external event,\nbut after already queued events.\n\nNote that it is not possible nor needed to cancel this time-out,\nas it is cancelled automatically by any other event, meaning that\nwhenever a callback is invoked that may want to cancel this time-out,\nthe timer is already cancelled or expired.\n\nThe timer `EventContent` can be updated with the\n[`{timeout, update, NewEventContent}`](`t:timeout_update_action/0`)\naction without affecting the time of expiry.","ref":"gen_statem.html#t:event_timeout/0"},{"type":"type","title":"gen_statem.event_type/0","doc":"All event types: [external](`t:external_event_type/0`),\n[time-out](`t:timeout_event_type/0`), or `internal`.\n\n`internal` events can only be generated by the state machine itself\nthrough the _transition action_ [`next_event`](`t:action/0`).","ref":"gen_statem.html#t:event_type/0"},{"type":"type","title":"gen_statem.external_event_type/0","doc":"Event from a [call](`call/3`), [cast](`cast/2`),\nor regular process message; \"info\".\n\nType `{call, From}` originates from the API functions\n[`call/2,3`](`call/3`) or `send_request/2`.  The event contains\n[`From`](`t:from/0`), which is whom to reply to\nby a `t:reply_action/0` or [`reply/2,3`](`reply/2`) call.\n\nType `cast` originates from the API function `cast/2`.\n\nType `info` originates from regular process messages\nsent to the `gen_statem` process.","ref":"gen_statem.html#t:external_event_type/0"},{"type":"type","title":"gen_statem.format_status/0","doc":"A map that describes the server's status.\n\nThe keys are:\n- **`state`** - The current state.\n- **`data`** - The state data.\n- **`reason`** - The reason that caused the process to terminate.\n- **`queue`** - The event queue.\n- **`postponed`** - The queue of [postponed](`t:postpone/0`) events.\n- **`timeouts`** - The active [time-outs](`t:timeout_action/0`).\n- **`log`** - The [sys log](`sys:log/2`) of the server.\n\nNew associations may be added to the status map without prior notice.","ref":"gen_statem.html#t:format_status/0"},{"type":"callback","title":"gen_statem.format_status/1","doc":"Format/limit the status value.\n\nThis function is called by a `gen_statem` process\nin order to format/limit the server status\nfor debugging and logging purposes.\n\nIt is called in the following situations:\n\n- [`sys:get_status/1,2`](`sys:get_status/1`) is invoked\n  to get the `gen_statem` status.\n- The `gen_statem` process terminates abnormally and logs an error.\n\nThis function is useful for changing the form and appearance\nof the `gen_statem` status for these cases.  A callback module\nwishing to change the [`sys:get_status/1,2`](`sys:get_status/1`)\nreturn value and how its status appears in termination error logs,\nexports an instance of [`Module:format_status/1`](`c:format_status/1`),\nwhich will get a map `Status` that describes the current state\nof the `gen_statem`, and shall return a map `NewStatus`\ncontaining the same keys as the input map,\nbut it may transform some values.\n\nOne use case for this function is to return compact alternative state\nrepresentations to avoid having large state terms printed in log files.\nAnother is to hide sensitive data from being written to the error log.\n\nExample:\n\n```erlang\nformat_status(Status) ->\n  maps:map(\n    fun(state,State) ->\n            maps:remove(private_key, State);\n       (message,{password, _Pass}) ->\n            {password, removed};\n       (_,Value) ->\n            Value\n    end, Status).\n```\n\n> #### Note {: .info }\n>\n> This callback is optional, so a callback module does not need\n> to export it.  The `gen_statem` module provides\n> a default implementation of this function that returns `{State, Data}`.\n>\n> If this callback is exported but fails, to hide possibly sensitive data,\n> the default function will instead return `{State, Info}`,\n> where `Info` says nothing but the fact that\n> [`Module:format_status/2`](`c:format_status/2`) has crashed.","ref":"gen_statem.html#c:format_status/1"},{"type":"callback","title":"gen_statem.format_status/2","doc":"Format/limit the status value.\n\nThis function is called by a `gen_statem` process\nin in order to format/limit the server state\nfor debugging and logging purposes.\n\nIt is called in the following situations:\n\n- One of [`sys:get_status/1,2`](`sys:get_status/1`) is invoked to get the\n  `gen_statem` status. `Opt` is set to the atom `normal` for this case.\n\n- The `gen_statem` terminates abnormally and logs an error.\n  `Opt` is set to the atom `terminate` for this case.\n\nThis function is useful for changing the form and appearance of\nthe `gen_statem` status for these cases.  A callback module wishing to\nchange the [`sys:get_status/1,2`](`sys:get_status/1`) return value\nand how its status appears in termination error logs, should export\nan instance of [`Module:format_status/2`](`c:format_status/2`),\nthat returns a term describing the current status of the `gen_statem`.\n\n`PDict` is the current value of the process dictionary of the `gen_statem`.\n\n[`State`](`t:state/0`) is the internal state of the `gen_statem`.\n\n[`Data`](`t:data/0`) is the internal server data of the `gen_statem`.\n\nThe function is to return `Status`, a term that contains\nthe appropriate details of the current state and status\nof the `gen_statem`.  There are no restrictions on the form `Status`\ncan take, but for the [`sys:get_status/1,2`](`sys:get_status/1`) case\n(when `Opt` is `normal`), the recommended form for the `Status` value\nis `[{data, [{\"State\", Term}]}]`, where `Term` provides relevant details\nof the `gen_statem` state.  Following this recommendation is not required,\nbut it makes the callback module status consistent\nwith the rest of the [`sys:get_status/1,2`](`sys:get_status/1`)\nreturn value.\n\nOne use for this function is to return compact alternative\nstate representations to avoid having large state terms printed\nin log files. Another use is to hide sensitive data\nfrom being written to the error log.\n\n> #### Note {: .info }\n>\n> This callback is optional, so a callback module does not need\n> to export it.  The `gen_statem` module provides a default\n> implementation of this function that returns `{State, Data}`.\n>\n> If this callback is exported but fails, to hide possibly sensitive data,\n> the default function will instead return `{State, Info}`,\n> where `Info` says nothing but the fact that\n> [`Module:format_status/2`](`c:format_status/2`) has crashed.","ref":"gen_statem.html#c:format_status/2"},{"type":"type","title":"gen_statem.from/0","doc":"A [`call`](`t:external_event_type/0`) event's reply destination.\n\nDestination to use when replying through, for example,\nthe action [`{reply, From, Reply}`](`t:reply_action/0`)\nto a process that has called the `gen_statem` server\nusing [`call/2,3`](`call/3`).","ref":"gen_statem.html#t:from/0"},{"type":"type","title":"gen_statem.generic_timeout/0","doc":"How long to wait for a named time-out event.\n\nStarts a timer set by `t:timeout_action/0`\n`{{timeout, Name}, Time, EventContent [, Options]}`.\n\nWhen the timer expires an event of `t:event_type/0` `{timeout, Name}`\nwill be generated. See `erlang:start_timer/4` for how `Time`\nand [`Options`](`t:timeout_option/0`) are interpreted. Future\n`erlang:start_timer/4` `Options` will not necessarily be supported.\n\nIf `Time` is `infinity`, no timer is started,\nas it never would expire anyway.\n\nIf `Time` is relative and `0` no timer is actually started,\ninstead the time-out event is enqueued to ensure\nthat it gets processed before any not yet received external event.\n\nSetting a timer with the same `Name` while it is running\nwill restart it with the new time-out value.  Therefore it is possible\nto cancel a specific time-out by setting it to `infinity`.\nIt can also be cancelled more explicitly with the\n[`{{timeout, Name}, cancel}`](`t:timeout_cancel_action/0`) action.\n\nThe timer `EventContent` can be updated with the\n[`{{timeout, Name}, update, NewEventContent}`](`t:timeout_update_action/0`)\naction without affecting the time of expiry.","ref":"gen_statem.html#t:generic_timeout/0"},{"type":"callback","title":"gen_statem.handle_event/4","doc":"[_State callback_](#state-callback) in\n[_callback mode_](`t:callback_mode/0`) `handle_event_function`.\n\nWhenever a `gen_statem` receives an event from [`call/2,3`](`call/3`),\n`cast/2`, or as a normal process message, this function is called.\n\nIf `EventType` is [`{call, From}`](`t:event_type/0`),\nthe caller waits for a reply.  The reply can be sent from this\nor from any other [_state callback_](#state-callback)\nby returning with `{reply, From, Reply}` in [`Actions`](`t:action/0`),\nin [`Replies`](`t:reply_action/0`), or by calling\n[`reply(From, Reply)`](`reply/2`).\n\nIf this function returns with a next state\nthat does not match equal (`=/=`) to the current state,\nall postponed events are retried in the next state.\n\nFor options that can be set and actions that can be done\nby `gen_statem` after returning from this function, see `t:action/0`.\n\nWhen the `gen_statem` runs with [_state enter calls_](`t:state_enter/0`),\nthis function is also called with arguments `(enter, OldState, ...)`\nduring every _state change_.  In this case there are some restrictions\non the [actions](`t:action/0`) that may be returned:\n\n- `t:postpone/0` is not allowed since a _state enter call_\n  is not an event so there is no event to postpone.\n- [`{next_event, _, _}`](`t:action/0`) is not allowed since\n  using _state enter calls_ should not affect how events\n  are consumed and produced.\n- It is not allowed to change states from this call.\n  Should you return `{next_state, NextState, ...}`\n  with `NextState =/= State` the `gen_statem` crashes.\n\n  Note that it is actually allowed to use `{repeat_state, NewData, ...}`\n  although it makes little sense since you immediately\n  will be called again with a new _state enter call_ making this\n  just a weird way of looping, and there are better ways to loop in Erlang.\n\n  If you do not update `NewData` and have some loop termination condition,\n  or if you use `{repeat_state_and_data, _}` or `repeat_state_and_data`\n  you have an infinite loop\\!\n\n  You are advised to use `{keep_state, ...}`, `{keep_state_and_data, _}`\n  or `keep_state_and_data` since changing states\n  from a _state enter call_ is not possible anyway.\n\nNote the fact that you can use [`throw`](`erlang:throw/1`)\nto return the result, which can be useful.  For example to bail out with\n[`throw(keep_state_and_data)`](`throw/1`) from deep within complex code\nthat cannot return `{next_state, State, Data}` because `State` or `Data`\nis no longer in scope.","ref":"gen_statem.html#c:handle_event/4"},{"type":"type","title":"gen_statem.hibernate/0","doc":"Hibernate the server process.\n\nIf `true`, hibernates the `gen_statem` by calling `proc_lib:hibernate/3`\nbefore going into `receive` to wait for a new external event.\n\nThere is also a server start option\n[`{hibernate_after, Timeout}`](`t:enter_loop_opt/0`)\nfor automatic hibernation.\n\n> #### Note {: .info }\n>\n> If there are enqueued events to process when hibernation is requested,\n> this is optimized by not hibernating but instead calling\n> [`erlang:garbage_collect/0`](`erlang:garbage_collect/0`) to simulate,\n> in a more effective way, that the `gen_statem` entered hibernation\n> and immediately got awakened by an enqueued event.","ref":"gen_statem.html#t:hibernate/0"},{"type":"callback","title":"gen_statem.init/1","doc":"Initialize the state machine.\n\nWhenever a `gen_statem` is started using\n[`start_link/3,4`](`start_link/3`),\n[`start_monitor/3,4`](`start_monitor/3`), or\n[`start/3,4`](`start/3`), this function is called by the new process\nto initialize the implementation state and server data.\n\n`Args` is the `Args` argument provided to that start function.\n\n> #### Note {: .info }\n>\n> Note that if the `gen_statem` is started through `m:proc_lib`\n> and [`enter_loop/4,5,6`](`enter_loop/6`), this callback\n> will never be called.  Since this callback is not optional\n> it can in that case be implemented as:\n>\n> ```erlang\n> -spec init(_) -> no_return().\n> init(Args) -> erlang:error(not_implemented, [Args]).\n> ```","ref":"gen_statem.html#c:init/1"},{"type":"type","title":"gen_statem.init_result/1","doc":"","ref":"gen_statem.html#t:init_result/1"},{"type":"type","title":"gen_statem.init_result/2","doc":"The return value from [`Module:init/1`](`c:init/1`).\n\nFor a succesful initialization, `State` is the initial `t:state/0`,\nand `Data` the initial server `t:data/0` of the `gen_statem`.\n\nThe [`Actions`](`t:action/0`) are executed when entering the first\n[state](`t:state/0`) just as for a\n[_state callback_](#state-callback), except that the action\n`postpone` is forced to `false` since there is no event to postpone.\n\nFor an unsuccesful initialization, `{stop, Reason}`, `{error, Reason}`,\nor `ignore` should be used; see [`start_link/3,4`](`start_link/3`).\n\n`{error, Reason}` has been allowed **since OTP 26.0**.\n\nThe `{ok, ...}` tuples have existed **since OTP 19.1**,\nbefore that they were not `ok` tagged.  This was before\n`gen_statem` replaced `gen_fsm` in OTP 20.0.","ref":"gen_statem.html#t:init_result/2"},{"type":"type","title":"gen_statem.postpone/0","doc":"Postpone an event to handle it later.\n\nIf `true`, postpones the current event.\nAfter a _state change_ (`NextState =/= State`), it is retried.","ref":"gen_statem.html#t:postpone/0"},{"type":"function","title":"gen_statem.receive_response/1","doc":"","ref":"gen_statem.html#receive_response/1"},{"type":"function","title":"gen_statem.receive_response/2","doc":"Receive a request response.\n\nReceive a response corresponding to the request identifier `ReqId`.\nThe request must have been made by `send_request/2`\nto the `gen_statem` process.  This function must be called\nfrom the same process from which `send_request/2` was made.\n\n`Timeout` specifies how long to wait for a response.\nIf no response is received within the specified time,\nthis function returns `timeout`.  Assuming that the server executes\non a node supporting aliases (introduced in OTP 24)\nthe request will also be abandoned.  That is,\nno response will be received after a time-out.\nOtherwise, a stray response might be received at a later time.\n\nSee [`call/3`](#call-reply) about how the request is handled\nand the `Reply` is sent by the `gen_statem` server.\n\nIf the `gen_statem` server process is dead or dies while\nthis function waits for the reply, it returns an `error` return\nwith the exit `Reason`.\n\nThe difference between `wait_response/2` and `receive_response/2`\nis that `receive_response/2` abandons the request at time-out\nso that a potential future response is ignored,\nwhile `wait_response/2` does not.","ref":"gen_statem.html#receive_response/2"},{"type":"function","title":"gen_statem.receive_response/3","doc":"Receive a request response in a collection.\n\nReceive a response in `ReqIdCollection`.  All request identifiers\nof `ReqIdCollection` must correspond to requests that have been made\nusing `send_request/2` or `send_request/4`, and all requests\nmust have been made by the process calling this function.\n\nThe `Label` in the response is the `Label` associated with\nthe request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [adding the request id](`reqids_add/3`) to a collection,\nor when sending the request using `send_request/4`.\n\nCompared to `receive_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `receive_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` will be returned.\n\n`Timeout` specifies how long to wait for a response.  If no response\nis received within the specified time, the function returns `timeout`.\nAssuming that the server executes on a node supporting aliases\n(introduced in OTP 24) all requests identified by `ReqIdCollection`\nwill also be abandoned. That is, no responses will be received\nafter a time-out.  Otherwise, stray responses might be received\nat a later time.\n\nThe difference between `receive_response/3` and `wait_response/3`\nis that `receive_response/3` abandons requests at time-out\nso that potential future responses are ignored,\nwhile `wait_response/3` does not.\n\nIf `Delete` is `true`, the association with `Label`\nis deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`.  If `Delete` is `false`, `NewReqIdCollection`\nwill equal`ReqIdCollection`.  Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`wait_response/3`, `check_response/3`, and `receive_response/3`.\n\nHowever, without deleting handled associations,\nthe above calls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests to\nthis function, it will always block until `Timeout` expires\nand then return `timeout`.","ref":"gen_statem.html#receive_response/3"},{"type":"function","title":"gen_statem.reply/1","doc":"Send one or multiple `call` replies.\n\nThis funcion can be used by a `gen_statem` callback to explicitly send\none or multiple replies to processes waiting for `call` requests' replies,\nwhen it is impractical or impossible to return `t:reply_action/0`s\nfrom a [_state callback_](#state-callback).\n\n> #### Note {: .info }\n>\n> A reply sent with this function is not visible in `m:sys` debug output.","ref":"gen_statem.html#reply/1"},{"type":"function","title":"gen_statem.reply/2","doc":"Send a `call` `Reply` to `From`.\n\nThis funcion can be used by a `gen_statem` callback to explicitly send\na reply to a process waiting for a `call` requests' reply,\nwhen it is impractical or impossible to return a `t:reply_action/0`\nfrom a [_state callback_](#state-callback).\n\n> #### Note {: .info }\n>\n> A reply sent with this function is not visible in `m:sys` debug output.","ref":"gen_statem.html#reply/2"},{"type":"type","title":"gen_statem.reply_action/0","doc":"Reply to a [`call/2,3`](`call/3`).\n\nThis _transition action_ can be invoked by returning it from the\n[_state callback_](#state-callback), from\n[`Module:init/1`](`c:init/1`) or by passing it to\n[`enter_loop/4,5,6`](`enter_loop/6`).\n\nIt does not set any [`transition_option()`](`t:transition_option/0`)\nbut instead replies to a caller waiting for a reply in `call/3`.\n`From` must be the term from argument [`{call, From}`](`t:event_type/0`)\nin a call to a [_state callback_](#state-callback).\n\nNote that using this action from [`Module:init/1`](`c:init/1`) or\n[`enter_loop/4,5,6`](`enter_loop/6`) would be weird\non the border of witchcraft since there has been no earlier call to a\n[_state callback_](#state-callback) in this server.","ref":"gen_statem.html#t:reply_action/0"},{"type":"opaque","title":"gen_statem.reply_tag/0","doc":"A handle that associates a reply to the corresponding request.","ref":"gen_statem.html#t:reply_tag/0"},{"type":"function","title":"gen_statem.reqids_add/3","doc":"Store a request identifier in a colletion.\n\nStores `ReqId` and associates a `Label` with the request identifier\nby adding this information to `ReqIdCollection` and returning\nthe resulting request identifier collection.","ref":"gen_statem.html#reqids_add/3"},{"type":"function","title":"gen_statem.reqids_new/0","doc":"Create an empty request identifier collection.\n\nReturns a new empty request identifier collection.\nA request identifier collection can be used to handle\nmultiple outstanding requests.\n\nRequest identifiers of requests made by `send_request/2`\ncan be stored in a collection using `reqids_add/3`.\nSuch a collection of request identifiers can later be used\nin order to get one response corresponding to a request\nin the collection by passing the collection as argument to\n`receive_response/3`, `wait_response/3`, or, `check_response/3`.\n\n`reqids_size/1` can be used to determine the number of\nrequest identifiers in a collection.","ref":"gen_statem.html#reqids_new/0"},{"type":"function","title":"gen_statem.reqids_size/1","doc":"Return the number of request identifiers in `ReqIdCollection`.","ref":"gen_statem.html#reqids_size/1"},{"type":"function","title":"gen_statem.reqids_to_list/1","doc":"Convert a request identifier collection to a list.\n\nReturns a list of `{ReqId, Label}` tuples which corresponds to\nall request identifiers with their associated labels\nin [`ReqIdCollection`](`t:request_id_collection/0`).","ref":"gen_statem.html#reqids_to_list/1"},{"type":"opaque","title":"gen_statem.request_id/0","doc":"An opaque request identifier. See `send_request/2` for details.","ref":"gen_statem.html#t:request_id/0"},{"type":"opaque","title":"gen_statem.request_id_collection/0","doc":"An opaque collection of request identifiers (`t:request_id/0`).\n\nEach request identifier can be associated with\na label chosen by the user.  For more information see `reqids_new/0`.","ref":"gen_statem.html#t:request_id_collection/0"},{"type":"type","title":"gen_statem.response_timeout/0","doc":"Response time-out for an asynchronous call.\n\nUsed to set a time limit on how long to wait for a response using either\n`receive_response/2`, `receive_response/3`, `wait_response/2`, or\n`wait_response/3`.  The time unit used is `millisecond`.\n\n Currently valid values:\n\n- **`0..4294967295`** - Time-out relative to current time in milliseconds.\n\n- **`infinity`** - Infinite time-out. That is,\n  the operation will never time out.\n\n- **`{abs, Timeout}`** - An absolute\n  [Erlang monotonic time](`erlang:monotonic_time/1`)\n  time-out in milliseconds.  That is, the operation will time out when\n  [`erlang:monotonic_time(millisecond)`](`erlang:monotonic_time/1`)\n  returns a value larger than or equal to `Timeout`.\n  `Timeout` is not allowed to identify a time further into the future\n  than `4294967295` milliseconds.  Specifying the time-out\n  using an absolute value is especially handy when you have\n  a deadline for responses corresponding to a complete collection\n  of requests (`t:request_id_collection/0`), since you do not have to\n  recalculate the relative time until the deadline over and over again.","ref":"gen_statem.html#t:response_timeout/0"},{"type":"callback","title":"gen_statem.StateName/3","doc":"[_State callback_](#state-callback) in\n[_callback mode_](`t:callback_mode/0`) `state_functions`.\n\nState callback that handles all events in state `StateName`, where\n[`StateName :: state_name()`](`t:state_name/0`)\nhas to be an `t:atom/0`.\n\n`StateName` cannot be `terminate` since that would collide\nwith the callback function [`Module:terminate/3`](`c:terminate/3`).\n\nBesides that when doing a [_state change_](#state-callback)\nthe next state always has to be an `t:atom/0`,\nthis function is equivalent to\n[`Module:handle_event(​EventType, EventContent,\n?FUNCTION_NAME, Data)`](`c:handle_event/4`),\nwhich is the [_state callback_](#state-callback) in\n[_callback mode_](`t:callback_mode/0`) `handle_event_function`.","ref":"gen_statem.html#c:StateName/3"},{"type":"function","title":"gen_statem.send_request/2","doc":"Send an asynchronous `call` request.\n\nSends `Request` to the `gen_statem` process identified by `ServerRef`\nand returns a request identifier `ReqId`.\n\nThe return value `ReqId` shall later be used with `receive_response/2`,\n`wait_response/2`, or `check_response/2` to fetch the actual result\nof the request.  Besides passing the request identifier directly\nto these functions, it can also be stored in\na request identifier collection using `reqids_add/3`.\nSuch a collection of request identifiers can later be used\nin order to get one response corresponding to a\nrequest in the collection by passing the collection\nas argument to `receive_response/3`, `wait_response/3`,\nor `check_response/3`.  If you are about to store the request identifier\nin a collection, you may want to consider using `send_request/4` instead.\n\nThe call\n`gen_statem:wait_response(gen_statem:send_request(ServerRef,\nRequest), Timeout)` can be seen as equivalent to\n[`gen_statem:call(Server, Request, Timeout)`](`call/3`),\nignoring the error handling.\n\nSee [`call/3`](#call-reply) about how the request is handled\nand the `Reply` is sent by the `gen_statem` server.\n\nThe server's `Reply` is returned by one of the\n[`receive_response/1,2`](`receive_response/2`),\n[`wait_response/1,2`](`wait_response/2`),\nor `check_response/2` functions.","ref":"gen_statem.html#send_request/2"},{"type":"function","title":"gen_statem.send_request/4","doc":"Send an asynchronous `call` request and add it\nto a request identifier collection.\n\nSends `Request` to the `gen_statem` process identified by `ServerRef`.\nThe `Label` will be associated with the request identifier\nof the operation and added to the returned request identifier collection\n`NewReqIdCollection`.  The collection can later be used in order to\nget one response corresponding to a request in the collection\nby passing the collection as argument to `receive_response/3`,\n`wait_response/3`, or `check_response/3`.\n\nThe same as calling\n[`reqids_add(​`](`reqids_add/3`)[`send_request(ServerRef, Request),\n`](`send_request/2`)[`Label, ReqIdCollection)`](`reqids_add/3`),\nbut slightly more efficient.","ref":"gen_statem.html#send_request/4"},{"type":"type","title":"gen_statem.server_name/0","doc":"Server name specification: `local`, `global`, or `via` registered.\n\nName specification to use when starting a `gen_statem` server.\nSee `start_link/3` and `t:server_ref/0` below.","ref":"gen_statem.html#t:server_name/0"},{"type":"type","title":"gen_statem.server_ref/0","doc":"Server specification: `t:pid/0` or registered `t:server_name/0`.\n\nTo be used in [`call/2,3`](`call/3`) to specify the server.\n\nIt can be:\n\n- **`pid() | LocalName`** - The `gen_statem` is locally registered.\n\n- **`{Name, Node}`** - The `gen_statem` is locally registered\n  on another node.\n\n- **`{global, GlobalName}`** - The `gen_statem` is globally registered\n  in `m:global`.\n\n- **`{via, RegMod, ViaName}`** - The `gen_statem` is registered\n  in an alternative process registry.  The registry callback module\n  `RegMod` is to export functions `register_name/2`, `unregister_name/1`,\n  `whereis_name/1`, and `send/2`, which are to behave like\n  the corresponding functions in `m:global`.\n  Thus, `{via, global, GlobalName}` is the same as `{global, GlobalName}`.","ref":"gen_statem.html#t:server_ref/0"},{"type":"function","title":"gen_statem.start/3","doc":"Start a server, neither linked nor registered.\n\nEquivalent to `start/4` except that the `gen_statem` process\nis not registered with any [name service](`t:server_name/0`).","ref":"gen_statem.html#start/3"},{"type":"function","title":"gen_statem.start/4","doc":"Start a server, registered but not linked.\n\nCreates a standalone `gen_statem` process according to\nOTP design principles (using `m:proc_lib` primitives).\nAs it does not get linked to the calling process,\nthis start function cannot be used by a supervisor to start a child.\n\nFor a description of arguments and return values,\nsee [`start_link/4`](`start_link/4`).","ref":"gen_statem.html#start/4"},{"type":"function","title":"gen_statem.start_link/3","doc":"Start a server, linked but not registered.\n\nEquivalent to `start_link/4` except that the `gen_statem` process\nis not registered with any [name service](`t:server_name/0`).","ref":"gen_statem.html#start_link/3"},{"type":"function","title":"gen_statem.start_link/4","doc":"Start a server, linked and registered.\n\nCreates a `gen_statem` process according to OTP design principles\n(using `m:proc_lib` primitives) that is spawned linked to\nthe calling process.  This is essential when the `gen_statem`\nmust be part of a supervision tree so it gets linked to its supervisor.\n\nThe spawned `gen_statem` process calls [`Module:init/1`](`c:init/1`)\nto initialize the server.  To ensure a synchronized startup procedure,\n`start_link/3,4` does not return until [`Module:init/1`](`c:init/1`)\nhas returned or failed.\n\n`ServerName` specifies the `t:server_name/0` to register\nfor the `gen_statem` process.  If the `gen_statem` process is started with\n[`start_link/3`](`start_link/3`), no `ServerName` is provided and the\n`gen_statem` process is not registered.\n\n`Module` is the name of the callback module.\n\n`Args` is an arbitrary term that is passed as the argument to\n[`Module:init/1`](`c:init/1`).\n\n#### Start options in `Opts` {: #start-options }\n\n- **[`{timeout, Time}`](`t:start_opt/0`)** - The `gen_statem` process\n  is allowed to spend `Time` milliseconds before returning\n  from [`Module:init/1`](`c:init/1`), or it is terminated\n  and this start function returns [`{error, timeout}`](`t:start_ret/0`).\n\n- **[`{spawn_opt, SpawnOpts}`](`t:start_opt/0`)** -\n  `SpawnOpts` is passed as option list to `erlang:spawn_opt/2`,\n  which is used to spawn the `gen_statem` process.\n  See `t:proc_lib:start_spawn_option/0`.\n\n  > #### Note {: .info }\n  >\n  > Using spawn option `monitor` is not allowed,\n  > it causes a `badarg` failure.\n\n- **[`{hibernate_after, HibernateAfterTimeout}`](`t:enter_loop_opt/0`)** -\n  When the `gen_statem` process waits for a message, if no message\n  is received within `HibernateAfterTimeout` milliseconds,\n  the process goes into hibernation automatically\n  (by calling `proc_lib:hibernate/3`).  This option is also\n  allowed for the [`enter_loop`](`enter_loop/6`) functions.\n\n  Note that there is also a `t:transition_option/0`\n  to explicitly hibernate the server from a\n  [_state callback_](#state-callback).\n\n- **[`{debug, Dbgs}`](`t:enter_loop_opt/0`)** - Activates\n  debugging through `m:sys`.  For every entry in `Dbgs`,\n  the corresponding function in `m:sys` is called. This option is also\n  allowed for the [`enter_loop`](`enter_loop/6`) functions.\n\n#### Return values {: #start-return-values }\n\n- **[`{ok, Pid}`](`t:start_ret/0`)** -\n  The `gen_statem` server process was successfully created and\n  initialized.  `Pid` is the `t:pid/0` of the process.\n\n- **[`ignore`](`t:start_ret/0`)** -\n  [`Module:init/1`](`c:init/1`) returned [`ignore`](`t:init_result/1`).\n  The `gen_statem` process has exited with reason `normal`.\n\n- **[`{error, {already_started, OtherPid}}`](`t:start_ret/0`)** -\n  A process with the specified [`ServerName`](`t:server_name/0`)\n  already exists.  `OtherPid` is the `t:pid/0` of that process.\n  The `gen_statem` process exited with reason `normal`\n  before calling [`Module:init/1`](`c:init/1`).\n\n- **[`{error, timeout}`](`t:start_ret/0`)** -\n  [`Module:init/1`](`c:init/1`) did not return within\n  the [start time-out](`t:start_opt/0`).  The `gen_statem` process\n  has been killed with [`exit(_, kill)`](`erlang:exit/2`).\n\n- **[`{error, Reason}`](`t:start_ret/0`)**\n  + Either [`Module:init/1`](`c:init/1`) returned\n    [`{stop, Reason}`](`t:init_result/1`) or failed with reason `Reason`,\n    The `gen_statem` process exited with reason `Reason`.\n  + Or [`Module:init/1`](`c:init/1`) returned\n    [`{error, Reason}`](`t:init_result/1`).\n    The `gen_statem` process did a graceful exit with reason `normal`.\n\nIf the return value is `ignore` or `{error, _}`, the started\n`gen_statem` process has terminated.  If an `'EXIT'` message\nwas delivered to the calling process (due to the process link),\nthat message has been consumed.\n\n> #### Warning {: .warning }\n>\n> Before OTP 26.0, if the started `gen_statem` process returned e.g.\n> `{stop, Reason}` from [`Module:init/1`](`c:init/1`),\n> this function could return `{error, Reason}`\n> _before_ the started `gen_statem` process had terminated,\n> so starting again might fail because VM resources\n> such as the registered name was not yet unregistered,\n> and an `'EXIT'` message could arrive later to the\n> process calling this function.\n>\n> But if the started `gen_statem` process instead failed during\n> [`Module:init/1`](`c:init/1`), a process link `{'EXIT', Pid, Reason}`\n> message caused this function to return `{error, Reason}`,\n> so the `'EXIT'` message had been consumed and\n> the started `gen_statem` process had terminated.\n>\n> Since it was impossible to tell the difference between these two cases\n> from `start_link/3,4`'s return value, this inconsistency\n> was cleaned up in OTP 26.0.","ref":"gen_statem.html#start_link/4"},{"type":"type","title":"gen_statem.start_mon_ret/0","doc":"Return value from the [`start_monitor/3,4`](`start_monitor/3`) functions.\n\nAs for [`start_link/4`](#start-return-values) but a succesful return\nwraps the process ID and the [monitor reference](`erlang:monitor/2`) in a\n`{ok, {`[`pid()`](`t:pid/0`)`, `[`reference()`](`t:reference/0`)`}}`\ntuple.","ref":"gen_statem.html#t:start_mon_ret/0"},{"type":"function","title":"gen_statem.start_monitor/3","doc":"Start a server, monitored but neither linked nor registered.\n\nEquivalent to `start_monitor/4` except that the `gen_statem`\nprocess is not registered with any [name service](`t:server_name/0`).","ref":"gen_statem.html#start_monitor/3"},{"type":"function","title":"gen_statem.start_monitor/4","doc":"Start a server, monitored and registered, but not linked.\n\nCreates a standalone `gen_statem` process according to\nOTP design principles (using `m:proc_lib` primitives),\nand atomically sets up a monitor to the newly created process.\n\nAs the started process does not get linked to the calling process,\nthis start function cannot be used by a supervisor to start a child.\n\nFor a description of arguments and return values, see\n[`start_link/4`](`start_link/4`), but note that for a succesful start\nthe return value differs since this function returns `{ok, {Pid, Mon}}`,\nwhere `Pid` is the process identifier of the process,\nand `Mon` is the monitor reference for the process.\nIf the start is not successful, the caller will be blocked\nuntil the `DOWN` message has been received\nand removed from the caller's message queue.","ref":"gen_statem.html#start_monitor/4"},{"type":"type","title":"gen_statem.start_opt/0","doc":"Server [start options](#start-options) for the\n[`start/3,4`](`start/3`), [`start_link/3,4`](`start_link/3`),\nand [`start_monitor/3,4`](`start_monitor/3`) functions.\n\nSee [`start_link/4`](#start-options).","ref":"gen_statem.html#t:start_opt/0"},{"type":"type","title":"gen_statem.start_ret/0","doc":"[Return value](#start-return-values) from the [`start/3,4`](`start/3`)\nand [`start_link/3,4`](`start_link/3`) functions.\n\nSee [`start_link/4`](#start-return-values).","ref":"gen_statem.html#t:start_ret/0"},{"type":"type","title":"gen_statem.state/0","doc":"State name or state term.\n\nIf the [_callback mode_](`t:callback_mode/0`) is `handle_event_function`,\nthe state can be any term. After a _state change_ (`NextState =/= State`),\nall postponed events are retried.\n\nComparing two states for strict equality is assumed to be a fast operation,\nsince for every _state transition_ the `gen_statem` engine has to deduce\nif it is a  _state change_.\n\n> #### Note {: .info }\n> The smaller the state term, in general, the faster the comparison.\n>\n> Note that if the \"same\" state term is returned for a state transition\n> (or a return action without a `NextState` field is used),\n> the comparison for equality is always fast because that can be seen\n> from the term handle.\n>\n> But if a newly constructed state term is returned,\n> both the old and the new state terms will have to be traversed\n> until an inequality is found, or until both terms\n> have been fully traversed.\n>\n> So it is possible to use large state terms that are fast to compare,\n> but very easy to accidentally mess up.  Using small state terms is\n> the safe choice.","ref":"gen_statem.html#t:state/0"},{"type":"type","title":"gen_statem.state_callback_result/2","doc":"Return value from any [_state callback_](#state-callback).\n\n`ActionType` is `t:enter_action/0` if the state callback\nwas called with a [_state enter call_](`t:state_enter/0`),\nand `t:action/0` if the state callback was called with an event.\n\n- **`{keep_state, NewData [, Actions]}`** - The same as\n  `{next_state, CurrentState, NewData [, Actions]}`.\n\n- **`keep_state_and_data | {keep_state_and_data, Actions}`** -\n  The same as `{keep_state, CurrentData [, Actions]}`.\n\n- **`{repeat_state, NewData [, Actions]}`** - If the `gen_statem`\n  runs with [_state enter calls_](`t:state_enter/0`),\n  the _state enter call_ is repeated, see type `t:transition_option/0`.\n  Other than that `{repeat_state, NewData [, Actions]}` is the same as\n  `{keep_state, NewData [, Actions]}`.\n\n- **`repeat_state_and_data | {repeat_state_and_data, Actions}`** -\n  The same as `{repeat_state, CurrentData [, Actions]}`.\n\n- **`{stop, Reason [, NewData]}`** - Terminates the `gen_statem`\n  by calling [`Module:terminate/3`](`c:terminate/3`)\n  with `Reason` and `NewData`, if specified. An exit signal\n  with this reason is sent to linked processes and ports.\n\n- **`stop`** - The same as `{stop, normal}`.\n\n- **`{stop_and_reply, Reason, Replies [, NewData]}`** -\n  Sends all `Replies`, then terminates the `gen_statem`\n  like with `{stop, Reason [, NewData]}`.\n\nAll these terms are tuples or atoms and will be so\nin all future versions of `gen_statem`.","ref":"gen_statem.html#t:state_callback_result/2"},{"type":"type","title":"gen_statem.state_enter/0","doc":"[_Callback mode_](`t:callback_mode/0`) modifier\nfor _state enter calls_: the atom `state_enter`.\n\nBoth _callback modes_ can use _state enter calls_,\nand this is selected by adding this `state_enter` flag\nto the [_callback mode_](`t:callback_mode/0`) return value from\n[`Module:callback_mode/0`](`c:callback_mode/0`).\n\nIf [`Module:callback_mode/0`](`c:callback_mode/0`) returns\na list containing `state_enter`, the `gen_statem` engine will,\nat every _state change_, that is; `NextState =/= CurrentState`,\ncall the [_state callback_](#state-callback) with arguments\n`(enter, OldState, Data)` or `(enter, OldState, State, Data)`,\ndepending on the [_callback mode_](`t:callback_mode/0`).\n\nThis may look like an event but is really a call performed\nafter the previous [_state callback_](#state-callback) returned,\nand before any event is delivered to the new\n[_state callback_](#state-callback).\nSee [`Module:StateName/3`](`c:'StateName'/3`) and\n[`Module:handle_event/4`](`c:handle_event/4`).  A _state enter call_\nmay be repeated without doing a _state change_ by returning\na [`repeat_state`](`t:state_callback_result/2`) or\n[`repeat_state_and_data`](`t:state_callback_result/2`) action\nfrom the _state callback_.\n\nIf [`Module:callback_mode/0`](`c:callback_mode/0`) does not return\na list containing `state_enter`, no _state enter calls_ are done.\n\nIf [`Module:code_change/4`](`c:code_change/4`) should transform the state,\nit is regarded as a state rename and not a _state change_,\nwhich will not cause a _state enter call_.\n\nNote that a _state enter call_ **will** be done right before entering\nthe initial state, which may be seen as a state change from no state\nto the initial state. In this case `OldState =:= State`,\nwhich cannot happen for a subsequent state change,\nbut will happen when repeating the _state enter call_.","ref":"gen_statem.html#t:state_enter/0"},{"type":"type","title":"gen_statem.state_enter_result/1","doc":"","ref":"gen_statem.html#t:state_enter_result/1"},{"type":"type","title":"gen_statem.state_enter_result/2","doc":"Return value from a [_state callback_](#state-callback)\nafter a _state enter call_.\n\n`State` is the current state and it cannot be changed\nsince the state callback  was called with a\n[_state enter call_](`t:state_enter/0`).\n\n- **`{next_state, State, NewData [, Actions]}`** -\n  The `gen_statem` does a state transition to `State`, which has to be\n  equal to the current state, sets `NewData`, and executes all `Actions`.","ref":"gen_statem.html#t:state_enter_result/2"},{"type":"type","title":"gen_statem.state_name/0","doc":"State name in [_callback mode_](`t:callback_mode/0`) `state_functions`.\n\nIf the [_callback mode_](`t:callback_mode/0`) is `state_functions`,\nthe state must be an atom. After a _state change_ (`NextState =/= State`),\nall postponed events are retried.  Note that the state `terminate`\nis not possible to use since it would collide with the optional\ncallback function [`Module:terminate/3`](`c:terminate/3`).","ref":"gen_statem.html#t:state_name/0"},{"type":"type","title":"gen_statem.state_timeout/0","doc":"How long to wait in the current state.\n\nStarts a timer set by `t:timeout_action/0`, or\n`{state_timeout, Time, EventContent [, Options]}`.\n\nWhen the timer expires an event of `t:event_type/0` `state_timeout`\nwill be generated. See `erlang:start_timer/4` for how `Time`\nand [`Options`](`t:timeout_option/0`) are interpreted. Future\n`erlang:start_timer/4` `Options` will not necessarily be supported.\n\nA _state change_ cancels this timer, if it is running.\nThat is, if the `t:timeout_action/0` that starts this timer\nis part of a list of `t:action/0`s for a _state change_,\n`NextState =/= CurrentState`, the timer runs in the **`NextState`**.\n\nIf the state machine stays in that new state, now the current state,\nthe timer will run until it expires, which creates the time-out event.\nIf the state machine changes states from the now current state,\nthe timer is cancelled.  During the _state change_ from\nthe now current state, a new _state time-out_ may be started\nfor the next **`NextState`**.\n\nIf the `t:timeout_action/0` that starts this timer\nis part of a list of `t:action/0`s for a _state transition_\nthat is not a _state change_, the timer runs in the current state.\n\nIf `Time` is `infinity`, no timer is started,\nas it never would expire anyway.\n\nIf `Time` is relative and `0` no timer is actually started,\ninstead the the time-out event is enqueued to ensure\nthat it gets processed before any not yet received external event.\n\nSetting this timer while it is running will restart it\nwith the new time-out value.  Therefore it is possible\nto cancel this time-out by setting it to `infinity`.\nIt can also be cancelled more explicitly with\n[`{state_timeout, cancel}`](`t:timeout_cancel_action/0`).\n\nThe timer `EventContent` can be updated with the\n[`{state_timeout, update, NewEventContent}`](`t:timeout_update_action/0`)\naction without affecting the time of expiry.","ref":"gen_statem.html#t:state_timeout/0"},{"type":"function","title":"gen_statem.stop/1","doc":"","ref":"gen_statem.html#stop/1"},{"type":"function","title":"gen_statem.stop/3","doc":"Stop a server.\n\nOrders the `gen_statem` [`ServerRef`](`t:server_ref/0`) to exit with the\nspecified `Reason` and waits for it to terminate. The `gen_statem` calls\n[`Module:terminate/3`](`c:terminate/3`) before exiting.\n\nThis function returns `ok` if the server terminates\nwith the expected reason.  Any other reason than `normal`, `shutdown`,\nor `{shutdown, Term}` causes an error report to be issued\nthrough `m:logger`.  An exit signal with the same reason is\nsent to linked processes and ports. The default `Reason` is `normal`.\n\n`Timeout` is an integer > 0, which specifies how many milliseconds\nto wait for the server to terminate, or the atom `infinity`\nto wait indefinitely.  Defaults to `infinity`.\nIf the server does not terminate within the specified time,\nthe call exits the calling process with reason `timeout`.\n\nIf the process does not exist, the call exits the calling process\nwith reason `noproc`, or with reason `{nodedown, Node}`\nif the connection fails to the remote `Node` where the server runs.","ref":"gen_statem.html#stop/3"},{"type":"callback","title":"gen_statem.terminate/3","doc":"Handle state machine termination.\n\nThis function is called by a `gen_statem` when it is about to terminate.\nIt is to be the opposite of [`Module:init/1`](`c:init/1`)\nand do any necessary cleaning up.  When it returns, the `gen_statem`\nterminates with `Reason`.  The return value is ignored.\n\n`Reason` is a term denoting the stop reason and [`State`](`t:state/0`)\nis the internal state of the `gen_statem`.\n\n`Reason` depends on why the `gen_statem` is terminating.  If it is because\nanother callback function has returned, a stop tuple `{stop, Reason}` in\n[`Actions`](`t:action/0`), `Reason` has the value specified in that tuple.\nIf it is because of a failure, `Reason` is the error reason.\n\nIf the `gen_statem` is part of a supervision tree and is ordered by its\nsupervisor to terminate, this function is called with `Reason = shutdown`\nif both the following conditions apply:\n\n- The `gen_statem` process has been set to trap exit signals.\n- The shutdown strategy as defined in the supervisor's\n  child specification is an integer time-out value, not `brutal_kill`.\n\nEven if the `gen_statem` is _not_ part of a supervision tree,\nthis function is called if it receives an `'EXIT'` message\nfrom its parent. `Reason` is the same as in the `'EXIT'` message.\n\nIf the `gen_statem` process is not set up to trap\nexit signals it is immediately terminated, just like any process,\nand this function is not called.\n\nNotice that for any other reason than `normal`, `shutdown`, or\n`{shutdown, Term}`, the `gen_statem` is assumed to terminate\nbecause of an error and an error report is issued using `m:logger`.\n\nWhen the `gen_statem` process exits, an exit signal\nwith the same reason is sent to linked processes and ports,\njust as for any process.","ref":"gen_statem.html#c:terminate/3"},{"type":"type","title":"gen_statem.timeout_action/0","doc":"Event time-out, generic time-outs or state time-out.\n\nThese _transition actions_ can be invoked by returning them from the\n[_state callback_](#state-callback), from\n[`Module:init/1`](`c:init/1`) or by passing them to\n[`enter_loop/4,5,6`](`enter_loop/6`).\n\nThese time-out actions sets time-out\n[transition options](`t:transition_option/0`).\n\n- **`Time`** - Short for `{timeout, Time, Time}`, that is,\n  the time-out message is the time-out time. This form exists to allow the\n  [_state callback_](#state-callback) return value\n  `{next_state, NextState, NewData, Time}` like in `gen_fsm`.\n\n- **`{timeout, Time, EventContent [, Options]}`** -\n  Sets the `t:transition_option/0` `t:event_timeout/0` to `Time`\n  with `EventContent`, and time-out options\n  [`Options`](`t:timeout_option/0`).\n\n- **`{{timeout,Name}, Time, EventContent [, Options]}`** -\n  Sets the `t:transition_option/0` `t:generic_timeout/0` to `Time`\n  for time-out `Name` with `EventContent`, and time-out options\n  [`Options`](`t:timeout_option/0`).\\\n  **Since OTP 20.0**.\n\n- **`{state_timeout, Time, EventContent [, Options]}`** -\n  Sets the `t:transition_option/0` `t:state_timeout/0` to `Time`\n  with `EventContent`, and time-out options\n  [`Options`](`t:timeout_option/0`).\\\n  **Since OTP 19.3**.","ref":"gen_statem.html#t:timeout_action/0"},{"type":"type","title":"gen_statem.timeout_cancel_action/0","doc":"Clearer way to cancel a time-out than the original\nsetting it to 'infinity'.\n\nIt has always been possible to cancel a time-out using\n`t:timeout_action/0` with `Time = infinity`, since setting a new\ntime-out time overrides a running timer, and since setting the time\nto `infinity` is optimized to not setting a timer (that never\nwill expire).  Using this action shows the intention more clearly.","ref":"gen_statem.html#t:timeout_cancel_action/0"},{"type":"type","title":"gen_statem.timeout_event_type/0","doc":"[Event time-out](`t:event_timeout/0`),\n[generic time-out](`t:generic_timeout/0`),\nor [state time-out](`t:state_timeout/0`).\n\nThe time-out event types that the state machine can generate\nfor itself with the corresponding `t:timeout_action/0`s:\n\n| Time-out type     | Action                         | Event type        |\n|-------------------|--------------------------------|-------------------|\n| Event time-out    | `{timeout, Time, ...}`         | `timeout`         |\n| Generic time-out  | `{{timeout, Name}, Time, ...}` | `{timeout, Name}` |\n| State time-out    | `{state_timeout, Time, ...}`   | `state_timeout`   |\n\nIn short; the action to set a time-out with\n[`EventType`](`t:timeout_event_type/0`) is `{EventType, Time, ...}`.","ref":"gen_statem.html#t:timeout_event_type/0"},{"type":"type","title":"gen_statem.timeout_option/0","doc":"Time-out timer start option, to select absolute time of expiry.\n\nIf `Abs` is `true` an absolute timer is started,\nand if it is `false` a relative, which is the default.\nSee [`erlang:start_timer/4`](`erlang:start_timer/4`) for details.","ref":"gen_statem.html#t:timeout_option/0"},{"type":"type","title":"gen_statem.timeout_update_action/0","doc":"Update the `EventContent` without affecting the time of expiry.\n\nSets a new `EventContent` for a running time-out timer.\nSee [timeout_action()](`t:timeout_action/0`) for how to start a time-out.\n\nIf no time-out of this type is active, instead inserts\nthe time-out event just like when starting a time-out\nwith relative `Time = 0`.  This is a time-out autostart with\nimmediate expiry, so there will be noise for example\nif a generic time-out name was misspelled.","ref":"gen_statem.html#t:timeout_update_action/0"},{"type":"type","title":"gen_statem.transition_option/0","doc":"_State transition_ options set by [actions](`t:action/0`).\n\nThese determine what happens during the _state transition_.\nThe _state transition_ takes place when the\n[_state callback_](#state-callback) has processed an event\nand returns. Here are the sequence of steps for a _state transition_:\n\n1. All returned [actions](`t:action/0`) are processed\n   in order of appearance.  In this step all replies generated\n   by any `t:reply_action/0` are sent.  Other actions set\n   `t:transition_option/0`s that come into play in subsequent steps.\n\n2. If [_state enter calls_](`t:state_enter/0`) are used,\n   it is either the initial state or one of the callback results\n   [`repeat_state`](`t:state_callback_result/2`) or\n   [`repeat_state_and_data`](`t:state_callback_result/2`) is used the\n   `gen_statem` engine calls the current _state callback_ with arguments\n   [`(enter, State, Data)`](`t:state_enter/0`) or\n   [`(enter, State, State, Data)`](`t:state_enter/0`) (depending on\n   [_callback mode_](`t:callback_mode/0`)) and when it returns\n   starts again from the top of this sequence.\n\n   If [_state enter calls_](`t:state_enter/0`) are used,\n   and the state changes, the `gen_statem` engine calls\n   the new _state callback_ with arguments\n   [`(enter, OldState, Data)`](`t:state_enter/0`) or\n   [`(enter, OldState, State, Data)`](`t:state_enter/0`) (depending on\n   [_callback mode_](`t:callback_mode/0`)) and when it returns\n   starts again from the top of this sequence.\n\n3. If `t:postpone/0` is `true`, the current event is postponed.\n\n4. If this is a _state change_, the queue of incoming events is reset\n   to start with the oldest postponed.\n\n5. All events stored with `t:action/0` `next_event` are inserted\n   to be processed before previously queued events.\n\n6. Time-out timers `t:event_timeout/0`, `t:generic_timeout/0` and\n   `t:state_timeout/0` are handled.  Time-outs with zero time\n   are guaranteed to be delivered to the state machine\n   before any external not yet received event so if there is\n   such a time-out requested, the corresponding time-out zero event\n   is enqueued as the newest received event; that is after\n   already queued events such as inserted and postponed events.\n\n   Any event cancels an `t:event_timeout/0` so a zero time event time-out\n   is only generated if the event queue is empty.\n\n   A _state change_ cancels a `t:state_timeout/0` and any new transition\n   option of this type belongs to the new state, that is;\n   a `t:state_timeout/0` applies to the state the state machine enters.\n\n7. If there are enqueued events the\n   [_state callback_](#state-callback) for the possibly\n   new state is called with the oldest enqueued event, and we start again\n   from the top of this sequence.\n\n8. Otherwise the `gen_statem` goes into `receive` or hibernation\n   (if `t:hibernate/0` is `true`) to wait for the next message.\n   In hibernation the next non-system event awakens the `gen_statem`,\n   or rather the next incoming message awakens the `gen_statem`,\n   but if it is a system event it goes right back into hibernation.\n   When a new message arrives the\n   [_state callback_](#state-callback) is called with\n   the corresponding event, and we start again\n   from the top of this sequence.\n\n> #### Note {: .info }\n> The behaviour of a zero time-out (a time-out with time `0`)\n> differs subtly from Erlang's `receive ... after 0 ... end`.\n>\n> The latter receives one message if there is one,\n> while using the `t:timeout_action/0` `{timeout, 0}` does not\n> receive any external event.\n>\n> `m:gen_server`'s time-out works like Erlang's\n> `receive ... after 0 ... end`, in contrast to `gen_statem`.","ref":"gen_statem.html#t:transition_option/0"},{"type":"function","title":"gen_statem.wait_response/1","doc":"","ref":"gen_statem.html#wait_response/1"},{"type":"function","title":"gen_statem.wait_response/2","doc":"Wait for a request response.\n\nWaits for the response to the request identifier `ReqId`.  The request\nmust have been made by `send_request/2` to the `gen_statem` process.\nThis function must be called from the same process from which\n`send_request/2` was called.\n\n`WaitTime` specifies how long to wait for a reply.\nIf no reply is received within the specified time,\nthe function returns `timeout` and no cleanup is done,\nThus the function can be invoked repeatedly until a reply is returned.\n\nSee [`call/3`](#call-reply) about how the request is handled\nand the `Reply` is sent by the `gen_statem` server.\n\nIf the `gen_statem` server process is dead or dies while\nthis function waits for the reply, it returns an `error` return\nwith the exit `Reason`.\n\nThe difference between `receive_response/2` and\n`wait_response/2` is that `receive_response/2` abandons\nthe request at time-out so that a potential future response is ignored,\nwhile `wait_response/2` does not.","ref":"gen_statem.html#wait_response/2"},{"type":"function","title":"gen_statem.wait_response/3","doc":"Wait for any request response in a collection.\n\nWaits for a response in `ReqIdCollection`.  All request identifiers\nof `ReqIdCollection` must correspond to requests that have been made\nusing `send_request/2` or `send_request/4`, and all requests\nmust have been made by the process calling this function.\n\nThe `Label` in the response is the `Label` associated with\nthe request identifier that the response corresponds to.\nThe `Label` of a request identifier is associated\nwhen [adding the request id](`reqids_add/3`) to a collection,\nor when sending the request using `send_request/4`.\n\nCompared to `wait_response/2`, the returned result or exception\nassociated with a specific request identifier will be wrapped\nin a 3-tuple `{Response, Label, NewReqIdCollection}`.\n`Response` is the value that would have been produced\nby `wait_response/2`, `Label` is the value associated with\nthe specific [request identifier](`t:request_id/0`)\nand `NewReqIdCollection` is a possibly modified\nrequest identifier collection.\n\nIf `ReqIdCollection` is empty, `no_request` is returned.\n\nIf no response is received before `WaitTime` has expired,\n`timeout` is returned.  It is valid to continue waiting\nfor a response as many times as needed up until a response\nhas been received and completed by `check_response()`,\n`receive_response()`, or `wait_response()`.\n\nThe difference between `receive_response/3` and `wait_response/3`\nis that `receive_response/3` abandons requests at time-out\nso that potential future responses are ignored,\nwhile `wait_response/3` does not.\n\nIf `Delete` is `true`, the association with `Label`\nhas been deleted from `ReqIdCollection` in the resulting\n`NewReqIdCollection`.  If `Delete` is `false`, `NewReqIdCollection`\nwill equal`ReqIdCollection`.  Note that deleting an association\nis not for free and that a collection containing already handled\nrequests can still be used by subsequent calls to\n`wait_response/3`, `check_response/3`, and `receive_response/3`.\n\nHowever, without deleting handled associations,\nthe above calls will not be able to detect when there are\nno more outstanding requests to handle, so you will have to keep track\nof this some other way than relying on a `no_request` return.\nNote that if you pass a collection only containing\nassociations of already handled or abandoned requests\nto this function, it will always block until `WaitTime` expires\nand then return `timeout`.","ref":"gen_statem.html#wait_response/3"},{"type":"module","title":"log_mf_h","doc":"An event handler that logs events to disk.\n\nThis module is a `gen_event` handler module that can be installed in any\n`gen_event` process. It logs onto disk all events that are sent to an event\nmanager. Each event is written as a binary, which makes the logging very fast.\nHowever, a tool such as the Report Browser (`m:rb`) must be used to read the\nfiles. The events are written to multiple files. When all files have been used,\nthe first one is reused and overwritten. The directory location, the number of\nfiles, and the size of each file are configurable. The directory will include\none file called `index`, and report files `1, 2, ...`.","ref":"log_mf_h.html"},{"type":"module","title":"See Also - log_mf_h","doc":"`m:gen_event`, `m:rb`","ref":"log_mf_h.html#module-see-also"},{"type":"opaque","title":"log_mf_h.args/0","doc":"Term to be sent to `gen_event:add_handler/3`.","ref":"log_mf_h.html#t:args/0"},{"type":"type","title":"log_mf_h.b/0","doc":"","ref":"log_mf_h.html#t:b/0"},{"type":"type","title":"log_mf_h.f/0","doc":"","ref":"log_mf_h.html#t:f/0"},{"type":"function","title":"log_mf_h.init/3","doc":"","ref":"log_mf_h.html#init/3"},{"type":"function","title":"log_mf_h.init/4","doc":"Initiates the event handler. Returns `Args`, which is to be used in a call to\n[`gen_event:add_handler(EventMgr, log_mf_h, Args)`](`gen_event:add_handler/3`).\n\n`Dir` specifies which directory to use for the log files. `MaxBytes` specifies\nthe size of each individual file. `MaxFiles` specifies how many files are used.\n`Pred` is a predicate function used to filter the events. If no predicate\nfunction is specified, all events are logged.","ref":"log_mf_h.html#init/4"},{"type":"type","title":"log_mf_h.pred/0","doc":"","ref":"log_mf_h.html#t:pred/0"},{"type":"module","title":"pool","doc":"Load distribution facility.\n\nThis module can be used to run a set of Erlang nodes as a pool of computational\nprocessors. It is organized as a master and a set of slave nodes and includes\nthe following features:\n\n- The slave nodes send regular reports to the master about their current load.\n- Queries can be sent to the master to determine which node will have the least\n  load.\n\nThe BIF [`statistics(run_queue)`](`statistics/1`) is used for estimating future\nloads. It returns the length of the queue of ready to run processes in the\nErlang runtime system.\n\nThe slave nodes are started with the `m:slave` module. This effects terminal\nI/O, file I/O, and code loading.\n\nIf the master node fails, the entire pool exits.\n\n[](){: #files }","ref":"pool.html"},{"type":"module","title":"Files - pool","doc":"`.hosts.erlang` is used to pick hosts where nodes can be started. For\ninformation about format and location of this file, see `net_adm:host_file/0`.\n\n`$HOME/.erlang.slave.out.HOST` is used for all extra I/O that can come from the\nslave nodes on standard I/O. If the startup procedure does not work, this file\ncan indicate the reason.","ref":"pool.html#module-files"},{"type":"function","title":"pool.attach/1","doc":"Ensures that a pool master is running and includes `Node` in the pool master's\npool of nodes.","ref":"pool.html#attach/1"},{"type":"function","title":"pool.get_node/0","doc":"Returns the node with the expected lowest future load.","ref":"pool.html#get_node/0"},{"type":"function","title":"pool.get_nodes/0","doc":"Returns a list of the current member nodes of the pool.","ref":"pool.html#get_nodes/0"},{"type":"function","title":"pool.pspawn/3","doc":"Spawns a process on the pool node that is expected to have the lowest future\nload.","ref":"pool.html#pspawn/3"},{"type":"function","title":"pool.pspawn_link/3","doc":"Spawns and links to a process on the pool node that is expected to have the\nlowest future load.","ref":"pool.html#pspawn_link/3"},{"type":"function","title":"pool.start/1","doc":"","ref":"pool.html#start/1"},{"type":"function","title":"pool.start/2","doc":"Starts a new pool.\n\nThe file `.hosts.erlang` is read to find host names where the\npool nodes can be started; see section [Files](`m:pool#module-files`). The startup\nprocedure fails if the file is not found.\n\nThe slave nodes are started with [`slave:start/2,3`](`slave:start/2`), passing\nalong `Name` and, if provided, `Args`. `Name` is used as the first part of the\nnode names, `Args` is used to specify command-line arguments.\n\nAccess rights must be set so that all nodes in the pool have the authority to\naccess each other.\n\nThe function is synchronous and all the nodes, and all the system servers, are\nrunning when it returns a value.","ref":"pool.html#start/2"},{"type":"function","title":"pool.stop/0","doc":"Stops the pool and kills all the slave nodes.","ref":"pool.html#stop/0"},{"type":"module","title":"proc_lib","doc":"Functions for asynchronous and synchronous start of processes adhering to the\nOTP design principles.\n\nThis module is used to start processes adhering to the\n[OTP Design Principles](`e:system:design_principles.md`). Specifically, the\nfunctions in this module are used by the OTP standard behaviors (for example,\n`m:gen_server` and `m:gen_statem`) when starting new processes. The functions can\nalso be used to start _special processes_, user-defined processes that comply to\nthe OTP design principles. For an example, see section\n[sys and proc_lib](`e:system:spec_proc.md`) in OTP Design Principles.\n\nSome useful information is initialized when a process starts. The registered\nnames, or the process identifiers, of the parent process, and the parent\nancestors, are stored together with information about the function initially\ncalled in the process.\n\nWhile in \"plain Erlang\", a process is said to terminate normally only for exit\nreason `normal`, a process started using `m:proc_lib` is also said to terminate\nnormally if it exits with reason `shutdown` or `{shutdown,Term}`. `shutdown` is\nthe reason used when an application (supervision tree) is stopped.\n\nWhen a process that is started using `m:proc_lib` terminates abnormally (that is,\nwith another exit reason than `normal`, `shutdown`, or `{shutdown,Term}`), a\n_crash report_ is generated, which is written to terminal by the default logger\nhandler setup by Kernel. For more information about how crash reports were\nlogged prior to Erlang/OTP 21.0, see\n[SASL Error Logging](`e:sasl:error_logging.md`) in the SASL User's Guide.\n\nUnlike in \"plain Erlang\", `m:proc_lib` processes will not generate _error\nreports_, which are written to the terminal by the emulator. All exceptions are\nconverted to _exits_ which are ignored by the default `logger` handler.\n\nThe crash report contains the previously stored information, such as ancestors\nand initial function, the termination reason, and information about other\nprocesses that terminate as a result of this process terminating.","ref":"proc_lib.html"},{"type":"module","title":"See Also - proc_lib","doc":"`m:logger`","ref":"proc_lib.html#module-see-also"},{"type":"type","title":"proc_lib.dict_or_pid/0","doc":"","ref":"proc_lib.html#t:dict_or_pid/0"},{"type":"type","title":"proc_lib.exception/0","doc":"An exception passed to `init_fail/3`. See `erlang:raise/3` for a description\nof `Class`, `Reason` and `Stacktrace`.","ref":"proc_lib.html#t:exception/0"},{"type":"function","title":"proc_lib.format/1","doc":"Equivalent to [`format(CrashReport, latin1)`](`format/2`).","ref":"proc_lib.html#format/1"},{"type":"function","title":"proc_lib.format/2","doc":"> #### Note {: .info }\n>\n> This function is deprecated in the sense that the `error_logger` is no longer\n> the preferred interface for logging in Erlang/OTP. A new\n> [logging API](`e:kernel:logger_chapter.md`) was added in Erlang/OTP 21.0, but\n> legacy `error_logger` handlers can still be used. New Logger handlers do not\n> need to use this function, since the formatting callback (`report_cb`) is\n> included as metadata in the log event.\n\nThis function can be used by a user-defined legacy `error_logger` event handler\nto format a crash report. The crash report is sent using `m:logger`, and the\nevent to be handled is of the format\n`{error_report, GL, {Pid, crash_report, CrashReport}}`, where `GL` is the group\nleader pid of process `Pid` that sent the crash report.","ref":"proc_lib.html#format/2"},{"type":"function","title":"proc_lib.format/3","doc":"> #### Note {: .info }\n>\n> This function is deprecated in the sense that the `error_logger` is no longer\n> the preferred interface for logging in Erlang/OTP. A new\n> [logging API](`e:kernel:logger_chapter.md`) was added in Erlang/OTP 21.0, but\n> legacy `error_logger` handlers can still be used. New Logger handlers do not\n> need to used this function, since the formatting callback (`report_cb`) is\n> included as metadata in the log event.\n\nThis function can be used by a user-defined legacy `error_logger` event handler\nto format a crash report. When Depth is specified as a positive integer, it is\nused in the format string to limit the output as follows:\n`io_lib:format(\"~P\", [Term,Depth])`.","ref":"proc_lib.html#format/3"},{"type":"function","title":"proc_lib.get_label/1","doc":"Returns either `undefined` or the label for the process Pid set with\n[`proc_lib:set_label/1`](`set_label/1`).","ref":"proc_lib.html#get_label/1"},{"type":"function","title":"proc_lib.hibernate/3","doc":"This function does the same as (and does call) the\n[`hibernate/3`](`erlang:hibernate/3`) BIF, but ensures that exception handling\nand logging continues to work as expected when the process wakes up.\n\nAlways use this function instead of the BIF for processes started using\n`proc_lib` functions.","ref":"proc_lib.html#hibernate/3"},{"type":"function","title":"proc_lib.init_ack/1","doc":"Equivalent to [`init_ack(Parent, Ret)`](`init_ack/2`) where `Parent` is\nthe process that called `start/5`.","ref":"proc_lib.html#init_ack/1"},{"type":"function","title":"proc_lib.init_ack/2","doc":"This function must only be used by a process that has been started by a\n[`start[_link|_monitor]/3,4,5`](`start/5`) function. It tells `Parent` that the\nprocess has initialized itself and started.\n\nFunction [`init_ack/1`](`init_ack/1`) uses the parent value previously stored by\nthe start function used.\n\nIf neither this function nor [`init_fail/2,3`](`init_fail/3`) is called by the\nstarted process, the start function returns an error tuple when the started\nprocess exits, or when the start function time-out (if used) has passed, see\n[`start/3,4,5`](`start/5`).\n\n> #### Warning {: .warning }\n>\n> Do not use this function to return an error indicating that the process start\n> failed. When doing so the start function can return before the failing process\n> has exited, which may block VM resources required for a new start attempt to\n> succeed. Use [`init_fail/2,3`](`init_fail/3`) for that purpose.\n\nThe following example illustrates how this function and `proc_lib:start_link/3`\nare used:\n\n```erlang\n-module(my_proc).\n-export([start_link/0]).\n-export([init/1]).\n\nstart_link() ->\n    proc_lib:start_link(my_proc, init, [self()]).\n\ninit(Parent) ->\n    case do_initialization() of\n        ok ->\n            proc_lib:init_ack(Parent, {ok, self()});\n        {error, Reason} ->\n            exit(Reason)\n    end,\n    loop().\n\n...\n```","ref":"proc_lib.html#init_ack/2"},{"type":"function","title":"proc_lib.init_fail/2","doc":"Equivalent to [`init_fail(Parent, Return, Exception)`](`init_fail/3`) where\n`Parent` is the process that called `start/5`.","ref":"proc_lib.html#init_fail/2"},{"type":"function","title":"proc_lib.init_fail/3","doc":"This function must only be used by a process that has been started by a\n[`start[_link|_monitor]/3,4,5`](`start/3`) function. It tells `Parent` that the\nprocess has failed to initialize, and immediately raises an exception according\nto `Exception`. The start function then returns `Ret`.\n\nSee `erlang:raise/3` for a description of `Class`, `Reason` and `Stacktrace`.\n\n> #### Warning {: .warning }\n>\n> Do not consider catching the exception from this function. That would defeat\n> its purpose. A process started by a [`start[_link|_monitor]/3,4,5`](`start/3`)\n> function should end in a value (that will be ignored) or an exception that\n> will be handled by this module. See [Description](`m:proc_lib`).\n\nIf neither this function nor [`init_ack/1,2`](`init_ack/1`) is called by the\nstarted process, the start function returns an error tuple when the started\nprocess exits, or when the start function time-out (if used) has passed, see\n[`start/3,4,5`](`start/3`).\n\nThe following example illustrates how this function and `proc_lib:start_link/3`\ncan be used:\n\n```erlang\n-module(my_proc).\n-export([start_link/0]).\n-export([init/1]).\n\nstart_link() ->\n    proc_lib:start_link(my_proc, init, [self()]).\n\ninit(Parent) ->\n    case do_initialization() of\n        ok ->\n            proc_lib:init_ack(Parent, {ok, self()});\n        {error, Reason} = Error ->\n            proc_lib:init_fail(Parent, Error, {exit, normal})\n    end,\n    loop().\n\n...\n```","ref":"proc_lib.html#init_fail/3"},{"type":"function","title":"proc_lib.initial_call/1","doc":"Extracts the initial call of a process that was started using one of the spawn\nor start functions in this module. `Process` can either be a pid, an integer\ntuple (from which a pid can be created), or the process information of a process\n`Pid` fetched through an `erlang:process_info(Pid)` function call.\n\n> #### Note {: .info }\n>\n> The list `Args` no longer contains the arguments, but the same number of atoms\n> as the number of arguments; the first atom is `'Argument__1'`, the second\n> `'Argument__2'`, and so on. The reason is that the argument list could waste a\n> significant amount of memory, and if the argument list contained funs, it\n> could be impossible to upgrade the code for the module.\n>\n> If the process was spawned using a fun, [`initial_call/1`](`initial_call/1`)\n> no longer returns the fun, but the module, function for the local function\n> implementing the fun, and the arity, for example,\n> `{some_module,-work/3-fun-0-,0}` (meaning that the fun was created in function\n> `some_module:work/3`). The reason is that keeping the fun would prevent code\n> upgrade for the module, and that a significant amount of memory could be\n> wasted.","ref":"proc_lib.html#initial_call/1"},{"type":"function","title":"proc_lib.set_label/1","doc":"Set a label for the current process. The primary purpose is to aid in debugging\nunregistered processes. The process label can be used in tools and crash reports\nto identify processes but it doesn't have to be unique or an atom, as a\nregistered name needs to be. The process label can be any term, for example\n`{worker_process, 1..N}`.\n\nUse [`proc_lib:get_label/1`](`get_label/1`) to lookup the process description.","ref":"proc_lib.html#set_label/1"},{"type":"function","title":"proc_lib.spawn/1","doc":"","ref":"proc_lib.html#spawn/1"},{"type":"function","title":"proc_lib.spawn/2","doc":"","ref":"proc_lib.html#spawn/2"},{"type":"function","title":"proc_lib.spawn/3","doc":"","ref":"proc_lib.html#spawn/3"},{"type":"function","title":"proc_lib.spawn/4","doc":"Spawns a new process and initializes it as described in the beginning of this\nmanual page. The process is spawned using the [`spawn`](`erlang:spawn/1`) BIFs.","ref":"proc_lib.html#spawn/4"},{"type":"function","title":"proc_lib.spawn_link/1","doc":"","ref":"proc_lib.html#spawn_link/1"},{"type":"function","title":"proc_lib.spawn_link/2","doc":"","ref":"proc_lib.html#spawn_link/2"},{"type":"function","title":"proc_lib.spawn_link/3","doc":"","ref":"proc_lib.html#spawn_link/3"},{"type":"function","title":"proc_lib.spawn_link/4","doc":"Spawns a new process and initializes it as described in the beginning of this\nmanual page. The process is spawned using the\n[`spawn_link`](`erlang:spawn_link/1`) BIFs.","ref":"proc_lib.html#spawn_link/4"},{"type":"function","title":"proc_lib.spawn_opt/2","doc":"","ref":"proc_lib.html#spawn_opt/2"},{"type":"function","title":"proc_lib.spawn_opt/3","doc":"","ref":"proc_lib.html#spawn_opt/3"},{"type":"function","title":"proc_lib.spawn_opt/4","doc":"","ref":"proc_lib.html#spawn_opt/4"},{"type":"function","title":"proc_lib.spawn_opt/5","doc":"Spawns a new process and initializes it as described in the beginning of this\nmanual page. The process is spawned using the\n[`erlang:spawn_opt`](`erlang:spawn_opt/2`) BIFs.","ref":"proc_lib.html#spawn_opt/5"},{"type":"type","title":"proc_lib.spawn_option/0","doc":"Equivalent to `t:erlang:spawn_opt_option/0`.","ref":"proc_lib.html#t:spawn_option/0"},{"type":"function","title":"proc_lib.start/3","doc":"","ref":"proc_lib.html#start/3"},{"type":"function","title":"proc_lib.start/4","doc":"","ref":"proc_lib.html#start/4"},{"type":"function","title":"proc_lib.start/5","doc":"Starts a new process synchronously. Spawns the process and waits for it to\nstart.\n\nTo indicate a succesful start, the started process _must_ call\n[`init_ack(Parent, Ret)`](`init_ack/2`) where `Parent` is the process that\nevaluates this function, or [`init_ack(Ret)`](`init_ack/1`). `Ret` is then\nreturned by this function.\n\nIf the process fails to start, it _must_ fail; preferably by calling\n[`init_fail(Parent, Ret, Exception)` ](`init_fail/3`) where `Parent` is the\nprocess that evaluates this function, or\n[`init_fail(Ret, Exception)`](`init_fail/2`). `Ret` is then returned by this\nfunction, and the started process fails with `Exception`.\n\nIf the process instead fails before calling `init_ack/1,2` or `init_fail/2,3`,\nthis function returns `{error, Reason}` where `Reason` depends a bit on the\nexception just like for a process link `{'EXIT',Pid,Reason}` message.\n\nIf `Time` is specified as an integer, this function waits for `Time`\nmilliseconds for the new process to call `init_ack/1,2` or `init_fail/2,3`,\notherwise the process gets killed and `Ret = {error, timeout}` is returned.\n\nArgument `SpawnOpts`, if specified, is passed as the last argument to the\n[`spawn_opt/4`](`erlang:spawn_opt/4`) BIF.\n\n> #### Note {: .info }\n>\n> Using spawn option `monitor` is not allowed. It causes the function to fail\n> with reason `badarg`.\n>\n> Using spawn option `link` will set a link to the spawned process, just like\n> [start_link/3,4,5](`start_link/3`).","ref":"proc_lib.html#start/5"},{"type":"function","title":"proc_lib.start_link/3","doc":"","ref":"proc_lib.html#start_link/3"},{"type":"function","title":"proc_lib.start_link/4","doc":"","ref":"proc_lib.html#start_link/4"},{"type":"function","title":"proc_lib.start_link/5","doc":"Starts a new process synchronously. Spawns the process and waits for it to\nstart. A link is atomically set on the newly spawned process.\n\n> #### Note {: .info }\n>\n> If the started process gets killed or crashes with a reason that is not\n> `normal`, the process link will kill the calling process so this function does\n> not return, unless the calling process traps exits. For example, if this\n> function times out it will kill the spawned process, and then the link might\n> kill the calling process.\n\nBesides setting a link on the spawned process this function behaves like\n[start/5](`start/5`).\n\nWhen the calling process traps exits; if this function returns due to the\nspawned process exiting (any error return), this function receives (consumes)\nthe `'EXIT'` message, also when this function times out and kills the spawned\nprocess.\n\n> #### Note {: .info }\n>\n> Using spawn option `monitor` is not allowed. It causes the function to fail\n> with reason `badarg`.","ref":"proc_lib.html#start_link/5"},{"type":"function","title":"proc_lib.start_monitor/3","doc":"","ref":"proc_lib.html#start_monitor/3"},{"type":"function","title":"proc_lib.start_monitor/4","doc":"","ref":"proc_lib.html#start_monitor/4"},{"type":"function","title":"proc_lib.start_monitor/5","doc":"Starts a new process synchronously. Spawns the process and waits for it to\nstart. A monitor is atomically set on the newly spawned process.\n\nBesides setting a monitor on the spawned process this function behaves like\n[start/5](`start/5`).\n\nThe return value is `{Ret, Mon}` where `Ret` corresponds to the `Ret` argument\nin the call to `init_ack/1,2` or `init_fail/2,3`, and `Mon` is the monitor\nreference of the monitor that has been set up.\n\nIf this function returns due to the spawned process exiting, that is returns any\nerror value, a `'DOWN'` message will be delivered to the calling process, also\nwhen this function times out and kills the spawned process.\n\n> #### Note {: .info }\n>\n> Using spawn option `monitor` is not allowed. It causes the function to fail\n> with reason `badarg`.\n>\n> Using spawn option `link` will set a link to the spawned process, just like\n> [start_link/3,4,5](`start_link/3`).","ref":"proc_lib.html#start_monitor/5"},{"type":"type","title":"proc_lib.start_spawn_option/0","doc":"A restricted set of [spawn options](`t:spawn_option/0`). Most notably `monitor`\nis _not_ part of these options.","ref":"proc_lib.html#t:start_spawn_option/0"},{"type":"function","title":"proc_lib.stop/1","doc":"Equivalent to [`stop(Process, normal, infinity)`](`stop/3`).","ref":"proc_lib.html#stop/1"},{"type":"function","title":"proc_lib.stop/3","doc":"Orders the process to exit with the specified `Reason` and waits for it to\nterminate.\n\nReturns `ok` if the process exits with the specified `Reason` within `Timeout`\nmilliseconds.\n\nIf the call times out, a `timeout` exception is raised.\n\nIf the process does not exist, a `noproc` exception is raised.\n\nThe implementation of this function is based on the `terminate` system message,\nand requires that the process handles system messages correctly. For information\nabout system messages, see `m:sys` and section\n[sys and proc_lib](`e:system:spec_proc.md`) in OTP Design Principles.","ref":"proc_lib.html#stop/3"},{"type":"function","title":"proc_lib.translate_initial_call/1","doc":"This function is used by functions `\\c:i/0` and `\\c:regs/0` to present process\ninformation.\n\nThis function extracts the initial call of a process that was started using one\nof the spawn or start functions in this module, and translates it to more useful\ninformation. `Process` can either be a pid, an integer tuple (from which a pid\ncan be created), or the process information of a process `Pid` fetched through\nan `erlang:process_info(Pid)` function call.\n\nIf the initial call is to one of the system-defined behaviors such as\n`gen_server` or `gen_event`, it is translated to more useful information. If a\n`gen_server` is spawned, the returned `Module` is the name of the callback\nmodule and `Function` is `init` (the function that initiates the new server).\n\nA `supervisor` and a `supervisor_bridge` are also `gen_server` processes. To\nreturn information that this process is a supervisor and the name of the\ncallback module, `Module` is `supervisor` and `Function` is the name of the\nsupervisor callback module. `Arity` is `1`, as the `init/1` function is called\ninitially in the callback module.\n\nBy default, `{proc_lib,init_p,5}` is returned if no information about the\ninitial call can be found. It is assumed that the caller knows that the process\nhas been spawned with the `proc_lib` module.","ref":"proc_lib.html#translate_initial_call/1"},{"type":"behaviour","title":"supervisor","doc":"Generic supervisor behavior.\n\nThis behavior module provides a supervisor, a process that supervises other\nprocesses called child processes. A child process can either be another\nsupervisor or a worker process. Worker processes are normally implemented using\none of the `m:gen_event`, `m:gen_server`, or `m:gen_statem` behaviors. A\nsupervisor implemented using this module has a standard set of interface\nfunctions and includes functionality for tracing and error reporting.\nSupervisors are used to build a hierarchical process structure called a\nsupervision tree, a nice way to structure a fault-tolerant application. For more\ninformation, see [Supervisor Behaviour](`e:system:sup_princ.md`) in OTP Design\nPrinciples.\n\nA supervisor expects the definition of which child processes to supervise to be\nspecified in a callback module exporting a predefined set of functions.\n\nUnless otherwise stated, all functions in this module fail if the specified\nsupervisor does not exist or if bad arguments are specified.\n\n[](){: #supervision_princ }","ref":"supervisor.html"},{"type":"behaviour","title":"Supervision Principles - supervisor","doc":"The supervisor is responsible for starting, stopping, and monitoring its child\nprocesses. The basic idea of a supervisor is that it must keep its child\nprocesses alive by restarting them when necessary.\n\nThe children of a supervisor are defined as a list of _child specifications_.\nWhen the supervisor is started, the child processes are started in order from\nleft to right according to this list. When the supervisor is going to terminate,\nit first terminates its child processes in reversed start order, from right to\nleft.\n\n[](){: #sup_flags }","ref":"supervisor.html#module-supervision-principles"},{"type":"behaviour","title":"Supervisor flags - supervisor","doc":"The supervisor properties are defined by the supervisor flags. The type\ndefinition for the supervisor flags is as follows:\n\n```erlang\nsup_flags() = #{strategy => strategy(),           % optional\n                intensity => non_neg_integer(),   % optional\n                period => pos_integer(),          % optional\n                auto_shutdown => auto_shutdown()} % optional\n```\n\n#### Restart Strategies\n\nA supervisor can have one of the following _restart strategies_ specified with\nthe `strategy` key in the above map:\n\n- `one_for_one` \\- If one child process terminates and is to be restarted, only\n  that child process is affected. This is the default restart strategy.\n- `one_for_all` \\- If one child process terminates and is to be restarted, all\n  other child processes are terminated and then all child processes are\n  restarted.\n- `rest_for_one` \\- If one child process terminates and is to be restarted, the\n  'rest' of the child processes (that is, the child processes after the\n  terminated child process in the start order) are terminated. Then the\n  terminated child process and all child processes after it are restarted.\n- `simple_one_for_one` \\- A simplified `one_for_one` supervisor, where all child\n  processes are dynamically added instances of the same process type, that is,\n  running the same code.\n\n  Functions `delete_child/2` and `restart_child/2` are invalid for\n  `simple_one_for_one` supervisors and return `{error,simple_one_for_one}` if\n  the specified supervisor uses this restart strategy.\n\n  Function `terminate_child/2` can be used for children under\n  `simple_one_for_one` supervisors by specifying the child's `t:pid/0` as the\n  second argument. If instead the child specification identifier is used,\n  [`terminate_child/2`](`terminate_child/2`) return\n  `{error,simple_one_for_one}`.\n\n  As a `simple_one_for_one` supervisor can have many children, it shuts them all\n  down asynchronously. This means that the children do their cleanup in\n  parallel, and therefore the order in which they are stopped is not defined.\n\n#### Restart intensity and period\n\nTo prevent a supervisor from getting into an infinite loop of child process\nterminations and restarts, a _maximum restart intensity_ is defined using two\ninteger values specified with keys `intensity` and `period` in the above map.\nAssuming the values `MaxR` for `intensity` and `MaxT` for `period`, then, if\nmore than `MaxR` restarts occur within `MaxT` seconds, the supervisor terminates\nall child processes and then itself. The termination reason for the supervisor\nitself in that case will be `shutdown`. `intensity` defaults to `1` and `period`\ndefaults to `5`.\n\n[](){: #auto_shutdown }\n\n#### Automatic Shutdown\n\nA supervisor can be configured to automatically shut itself down with exit\nreason `shutdown` when [significant children](`m:supervisor#significant_child`)\nterminate with the `auto_shutdown` key in the above map:\n\n- `never` \\- Automic shutdown is disabled. This is the default setting.\n\n  With `auto_shutdown` set to `never`, child specs with the `significant` flag\n  set to `true` are considered invalid and will be rejected.\n\n- `any_significant` \\- The supervisor will shut itself down when _any_\n  significant child terminates, that is, when a `transient` significant child\n  terminates normally or when a `temporary` significant child terminates\n  normally or abnormally.\n- `all_significant` \\- The supervisor will shut itself down when _all_\n  significant children have terminated, that is, when the _last active_\n  significant child terminates. The same rules as for `any_significant` apply.\n\nFor more information, see the section\n[Automatic Shutdown](`e:system:sup_princ.md#automatic-shutdown`) in Supervisor\nBehavior in OTP Design Principles.\n\n> #### Warning {: .warning }\n>\n> The automatic shutdown feature appeared in OTP 24.0, but applications using\n> this feature will also compile and run with older OTP versions.\n>\n> However, such applications, when compiled with an OTP version that predates\n> the appearance of the automatic shutdown feature, will leak processes because\n> the automatic shutdowns they rely on will not happen.\n>\n> It is up to implementors to take proper precautions if they expect that their\n> applications may be compiled with older OTP versions.\n\n[](){: #child_spec }","ref":"supervisor.html#module-supervisor-flags"},{"type":"behaviour","title":"Child specification - supervisor","doc":"The type definition of a child specification is as follows:\n\n```erlang\nchild_spec() = #{id => child_id(),             % mandatory\n                 start => mfargs(),            % mandatory\n                 restart => restart(),         % optional\n                 significant => significant(), % optional\n                 shutdown => shutdown(),       % optional\n                 type => worker(),             % optional\n                 modules => modules()}         % optional\n```\n\nThe old tuple format is kept for backwards compatibility, see `t:child_spec/0`,\nbut the map is preferred.\n\n- `id` is used to identify the child specification internally by the supervisor.\n\n  The `id` key is mandatory.\n\n  Notice that this identifier on occations has been called \"name\". As far as\n  possible, the terms \"identifier\" or \"id\" are now used but to keep backward\n  compatibility, some occurences of \"name\" can still be found, for example in\n  error messages.\n\n- `start` defines the function call used to start the child process. It must be\n  a module-function-arguments tuple `{M,F,A}` used as\n  [`apply(M,F,A)`](`apply/3`).\n\n  The start function _must create and link to_ the child process, and must\n  return `{ok,Child}` or `{ok,Child,Info}`, where `Child` is the pid of the\n  child process and `Info` any term that is ignored by the supervisor.\n\n  The start function can also return `ignore` if the child process for some\n  reason cannot be started, in which case the child specification is kept by the\n  supervisor (unless it is a temporary child) but the non-existing child process\n  is ignored.\n\n  If something goes wrong, the function can also return an error tuple\n  `{error,Error}`.\n\n  Notice that the `start_link` functions of the different behavior modules\n  fulfill the above requirements.\n\n  The `start` key is mandatory.\n\n- [](){: #restart } `restart` defines when a terminated child process must be\n  restarted. A `permanent` child process is always restarted. A `temporary`\n  child process is never restarted (even when the supervisor's restart strategy\n  is `rest_for_one` or `one_for_all` and a sibling's death causes the temporary\n  process to be terminated). A `transient` child process is restarted only if it\n  terminates abnormally, that is, with another exit reason than `normal`,\n  `shutdown`, or `{shutdown,Term}`.\n\n  The `restart` key is optional. If it is not specified, it defaults to\n  `permanent`.\n\n- [](){: #significant_child } `significant` defines if a child is considered\n  significant for [automatic self-shutdown](`m:supervisor#auto_shutdown`) of the\n  supervisor.\n\n  Setting this option to `true` when the [restart type](`m:supervisor#restart`)\n  is `permanent` is invalid. Also, it is considered invalid to start children\n  with this option set to `true` in a supervisor when the\n  [`auto_shutdown`](`m:supervisor#auto_shutdown`) supervisor flag is set to\n  `never`.\n\n  The `significant` key is optional. If it is not specified, it defaults to\n  `false`.\n\n- `shutdown` defines how a child process must be terminated. `brutal_kill` means\n  that the child process is unconditionally terminated using\n  [`exit(Child,kill)`](`exit/2`). An integer time-out value means that the\n  supervisor tells the child process to terminate by calling\n  [`exit(Child,shutdown)`](`exit/2`) and then wait for an exit signal with\n  reason `shutdown` back from the child process. If no exit signal is received\n  within the specified number of milliseconds, the child process is\n  unconditionally terminated using [`exit(Child,kill)`](`exit/2`).\n\n  If the child process is another supervisor, the shutdown time must be set to\n  `infinity` to give the subtree ample time to shut down.\n\n  > #### Warning {: .warning }\n  >\n  > Setting the shutdown time to anything other than `infinity` for a child of\n  > type `supervisor` can cause a race condition where the child in question\n  > unlinks its own children, but fails to terminate them before it is killed.\n\n  It is also allowed to set it to `infinity`, if the child process is a worker.\n\n  > #### Warning {: .warning }\n  >\n  > Be careful when setting the shutdown time to `infinity` when the child\n  > process is a worker. Because, in this situation, the termination of the\n  > supervision tree depends on the child process, it must be implemented in a\n  > safe way and its cleanup procedure must always return.\n\n  Notice that all child processes implemented using the standard OTP behavior\n  modules automatically adhere to the shutdown protocol.\n\n  The `shutdown` key is optional. If it is not specified, it defaults to `5000`\n  if the child is of type `worker` and it defaults to `infinity` if the child is\n  of type `supervisor`.\n\n- `type` specifies if the child process is a supervisor or a worker.\n\n  The `type` key is optional. If it is not specified, it defaults to `worker`.\n\n- `modules` is used by the release handler during code replacement to determine\n  which processes are using a certain module. As a rule of thumb, if the child\n  process is a `m:supervisor`, `m:gen_server` or, `m:gen_statem`, this is to be a list\n  with one element `[Module]`, where `Module` is the callback module. If the\n  child process is an event manager (`m:gen_event`) with a dynamic set of callback\n  modules, value `dynamic` must be used. For more information about release\n  handling, see [Release Handling](`e:system:release_handling.md`) in OTP Design\n  Principles.\n\n  The `modules` key is optional. If it is not specified, it defaults to `[M]`,\n  where `M` comes from the child's start `{M,F,A}`.\n\n- Internally, the supervisor also keeps track of the pid `Child` of the child\n  process, or `undefined` if no pid exists.","ref":"supervisor.html#module-child-specification"},{"type":"behaviour","title":"See Also - supervisor","doc":"`m:gen_event`, `m:gen_statem`, `m:gen_server`, `m:sys`","ref":"supervisor.html#module-see-also"},{"type":"type","title":"supervisor.auto_shutdown/0","doc":"","ref":"supervisor.html#t:auto_shutdown/0"},{"type":"function","title":"supervisor.check_childspecs/1","doc":"","ref":"supervisor.html#check_childspecs/1"},{"type":"function","title":"supervisor.check_childspecs/2","doc":"Takes a list of child specification as argument and returns `ok` if all of them\nare syntactically correct, otherwise `{error,Error}`.\n\nIf the `AutoShutdown` argument is not `undefined`, also\nchecks if the child specifications are allowed for the given\n[auto_shutdown](`m:supervisor#auto_shutdown`) option.","ref":"supervisor.html#check_childspecs/2"},{"type":"type","title":"supervisor.child/0","doc":"","ref":"supervisor.html#t:child/0"},{"type":"type","title":"supervisor.child_id/0","doc":"Not a `t:pid/0`.","ref":"supervisor.html#t:child_id/0"},{"type":"type","title":"supervisor.child_rec/0","doc":"","ref":"supervisor.html#t:child_rec/0"},{"type":"type","title":"supervisor.child_spec/0","doc":"The tuple format is kept for backward compatibility only. A map is preferred;\nsee more details [above](`m:supervisor#child_spec`).","ref":"supervisor.html#t:child_spec/0"},{"type":"type","title":"supervisor.children/0","doc":"","ref":"supervisor.html#t:children/0"},{"type":"function","title":"supervisor.count_children/1","doc":"Returns a [property list](`t:proplists:proplist/0`) containing the counts for each of\nthe following elements of the supervisor's child specifications and managed\nprocesses:\n\n- `specs` \\- The total count of children, dead or alive.\n- `active` \\- The count of all actively running child processes managed by this\n  supervisor. For a `simple_one_for_one` supervisors, no check is done to ensure\n  that each child process is still alive, although the result provided here is\n  likely to be very accurate unless the supervisor is heavily overloaded.\n- `supervisors` \\- The count of all children marked as `child_type = supervisor`\n  in the specification list, regardless if the child process is still alive.\n- `workers` \\- The count of all children marked as `child_type = worker` in the\n  specification list, regardless if the child process is still alive.","ref":"supervisor.html#count_children/1"},{"type":"function","title":"supervisor.delete_child/2","doc":"Tells supervisor `SupRef` to delete the child specification identified by `Id`.\nThe corresponding child process must not be running. Use `terminate_child/2` to\nterminate it.\n\nIf successful, the function returns `ok`. If the child specification identified\nby `Id` exists but the corresponding child process is running or is about to be\nrestarted, the function returns `{error,running}` or `{error,restarting}`,\nrespectively. If the child specification identified by `Id` does not exist, the\nfunction returns `{error,not_found}`.","ref":"supervisor.html#delete_child/2"},{"type":"function","title":"supervisor.get_childspec/2","doc":"Returns the child specification map for the child identified by `Id` under\nsupervisor `SupRef`. The returned map contains all keys, both mandatory and\noptional.","ref":"supervisor.html#get_childspec/2"},{"type":"callback","title":"supervisor.init/1","doc":"Whenever a supervisor is started using [`start_link/2,3`](`start_link/2`), this\nfunction is called by the new process to find out about restart strategy,\nmaximum restart intensity, and child specifications.\n\n`Args` is the `Args` argument provided to the start function.\n\n`SupFlags` is the supervisor flags defining the restart strategy and maximum\nrestart intensity for the supervisor. `[ChildSpec]` is a list of valid child\nspecifications defining which child processes the supervisor must start and\nmonitor. See the discussion in section\n[`Supervision Principles`](`m:supervisor#supervision_princ`) earlier.\n\nNotice that when the restart strategy is `simple_one_for_one`, the list of child\nspecifications must be a list with one child specification only. (The child\nspecification identifier is ignored.) No child process is then started during\nthe initialization phase, but all children are assumed to be started dynamically\nusing `start_child/2`.\n\nThe function can also return `ignore`.\n\nNotice that this function can also be called as a part of a code upgrade\nprocedure. Therefore, the function is not to have any side effects. For more\ninformation about code upgrade of supervisors, see section\n[Changing a Supervisor](`e:system:appup_cookbook.md#sup`) in OTP Design\nPrinciples.","ref":"supervisor.html#c:init/1"},{"type":"type","title":"supervisor.mfargs/0","doc":"Value `undefined` for `A` (the argument list) is only to be used internally in\n`m:supervisor`. If the restart type of the child is `temporary`, the process is\nnever to be restarted and therefore there is no need to store the real argument\nlist. Value `undefined` is then stored instead.","ref":"supervisor.html#t:mfargs/0"},{"type":"type","title":"supervisor.modules/0","doc":"","ref":"supervisor.html#t:modules/0"},{"type":"type","title":"supervisor.restart/0","doc":"","ref":"supervisor.html#t:restart/0"},{"type":"function","title":"supervisor.restart_child/2","doc":"Tells supervisor `SupRef` to restart a child process corresponding to the child\nspecification identified by `Id`. The child specification must exist, and the\ncorresponding child process must not be running.\n\nNotice that for temporary children, the child specification is automatically\ndeleted when the child terminates; thus, it is not possible to restart such\nchildren.\n\nIf the child specification identified by `Id` does not exist, the function\nreturns `{error,not_found}`. If the child specification exists but the\ncorresponding process is already running, the function returns\n`{error,running}`.\n\nIf the child process start function returns `{ok,Child}` or `{ok,Child,Info}`,\nthe pid is added to the supervisor and the function returns the same value.\n\nIf the child process start function returns `ignore`, the pid remains set to\n`undefined` and the function returns `{ok,undefined}`.\n\nIf the child process start function returns an error tuple or an erroneous\nvalue, or if it fails, the function returns `{error,Error}`, where `Error` is a\nterm containing information about the error.","ref":"supervisor.html#restart_child/2"},{"type":"type","title":"supervisor.shutdown/0","doc":"","ref":"supervisor.html#t:shutdown/0"},{"type":"type","title":"supervisor.significant/0","doc":"","ref":"supervisor.html#t:significant/0"},{"type":"function","title":"supervisor.start_child/2","doc":"Dynamically adds a child specification to supervisor `SupRef`, which starts the\ncorresponding child process.\n\nFor `one_for_one`, `one_for_all` and `rest_for_one` supervisors, the second\nargument must be a valid child specification `ChildSpec`. The child process\nis started by using the start function as defined in the child specification.\n\nFor `simple_one_for_one` supervisors, the child specification defined in\n[`Module:init/1`](`c:init/1`) is used, and the second argument must instead\nbe an arbitrary list of terms `ExtraArgs`. The child process is then started\nby appending `ExtraArgs` to the existing start function arguments, that is, by\ncalling [`apply(M, F, A++ExtraArgs)`](`apply/3`), where `{M,F,A}` is the start\nfunction defined in the child specification.\n\n- If there already exists a child specification with the specified identifier,\n  `ChildSpec` is discarded, and the function returns `{error,already_present}`\n  or `{error,{already_started,Child}}`, depending on if the corresponding child\n  process is running or not.\n- If the child process start function returns `{ok,Child}` or `{ok,Child,Info}`,\n  the child specification and pid are added to the supervisor and the function\n  returns the same value.\n- If the child process start function returns `ignore`, the child specification\n  `ChildSpec` is added to the supervisor if it is an `one_for_one`, `one_for_all`\n  or `rest_for_one` supervisor, and the pid is set to `undefined`. For\n  `simple_one_for_one` supervisors, no child is added to the supervisor. The\n  function returns `{ok,undefined}`.\n\nIf the child process start function returns an error tuple or an erroneous\nvalue, or if it fails, the child specification is discarded, and the function\nreturns `{error,Error}`, where `Error` is a term containing information about\nthe error and child specification.","ref":"supervisor.html#start_child/2"},{"type":"function","title":"supervisor.start_link/2","doc":"Creates a nameless supervisor process as part of a supervision tree.\n\nEquivalent to `start_link/3` except that the supervisor process is not\n[`registered`](`erlang:register/2`).","ref":"supervisor.html#start_link/2"},{"type":"function","title":"supervisor.start_link/3","doc":"Creates a supervisor process as part of a supervision tree.\n\nFor example, the function ensures that the supervisor is linked to the calling\nprocess (its supervisor).\n\nThe created supervisor process calls [`Module:init/1`](`c:init/1`) to find out\nabout restart strategy, maximum restart intensity, and child processes. To\nensure a synchronized startup procedure, `start_link/2,3` does not return until\n[`Module:init/1`](`c:init/1`) has returned and all child processes have been\nstarted.\n\n- If `SupName={local,Name}`, the supervisor is registered locally as `Name`\n  using [`register/2`](`register/2`).\n- If `SupName={global,Name}`, the supervisor is registered globally as `Name`\n  using `global:register_name/2`.\n- If `SupName={via,Module,Name}`, the supervisor is registered as `Name` using\n  the registry represented by `Module`. The `Module` callback must export the\n  functions `register_name/2`, `unregister_name/1`, and `send/2`, which must\n  behave like the corresponding functions in `m:global`. Thus,\n  `{via,global,Name}` is a valid reference.\n\n`Module` is the name of the callback module.\n\n`Args` is any term that is passed as the argument to\n[`Module:init/1`](`c:init/1`).\n\n- If the supervisor and its child processes are successfully created (that is,\n  if all child process start functions return `{ok,Child}`, `{ok,Child,Info}`,\n  or `ignore`), the function returns `{ok,Pid}`, where `Pid` is the pid of the\n  supervisor.\n- If there already exists a process with the specified `SupName`, the function\n  returns `{error,{already_started,Pid}}`, where `Pid` is the pid of that\n  process.\n- If [`Module:init/1`](`c:init/1`) returns `ignore`, this function returns\n  `ignore` as well, and the supervisor terminates with reason `normal`.\n- If [`Module:init/1`](`c:init/1`) fails or returns an incorrect value, this\n  function returns `{error,Term}`, where `Term` is a term with information about\n  the error, and the supervisor terminates with reason `Term`.\n- If any child process start function fails or returns an error tuple or an\n  erroneous value, the supervisor first terminates all already started child\n  processes with reason `shutdown` and then terminate itself and returns\n  `{error, {shutdown, Reason}}`.","ref":"supervisor.html#start_link/3"},{"type":"type","title":"supervisor.startchild_err/0","doc":"","ref":"supervisor.html#t:startchild_err/0"},{"type":"type","title":"supervisor.startchild_ret/0","doc":"","ref":"supervisor.html#t:startchild_ret/0"},{"type":"type","title":"supervisor.startlink_err/0","doc":"","ref":"supervisor.html#t:startlink_err/0"},{"type":"type","title":"supervisor.startlink_ret/0","doc":"","ref":"supervisor.html#t:startlink_ret/0"},{"type":"type","title":"supervisor.strategy/0","doc":"","ref":"supervisor.html#t:strategy/0"},{"type":"type","title":"supervisor.sup_flags/0","doc":"The tuple format is kept for backward compatibility only. A map is preferred;\nsee more details [above](`m:supervisor#sup_flags`).","ref":"supervisor.html#t:sup_flags/0"},{"type":"type","title":"supervisor.sup_name/0","doc":"Name specification to use when starting a `supervisor`. See function\n[`start_link/2,3`](`start_link/2`) and the type `t:sup_ref/0` below.\n\n- **`{local,LocalName}`** - Register the `supervisor` locally as `LocalName`\n  using [`register/2`](`erlang:register/2`).\n\n- **`{global,GlobalName}`** - Register the `supervisor` process id globally as\n  `GlobalName` using `global:register_name/2`.\n\n- **`{via,RegMod,ViaName}`** - Register the `supervisor` process with the\n  registry represented by `RegMod`. The `RegMod` callback is to export the\n  functions `register_name/2`, `unregister_name/1`, `whereis_name/1`, and\n  `send/2`, which are to behave like the corresponding functions in `m:global`.\n  Thus, `{via,global,GlobalName}` is a valid reference equivalent to\n  `{global,GlobalName}`.","ref":"supervisor.html#t:sup_name/0"},{"type":"type","title":"supervisor.sup_ref/0","doc":"Supervisor specification to use when addressing a `supervisor`. See\n[`count_children/1`](`count_children/1`), [`delete_child/2`](`delete_child/2`),\n[`get_childspec/2`](`get_childspec/2`), [`restart_child/2`](`restart_child/2`),\n[`start_child/2`](`start_child/2`), [`terminate_child/2`](`terminate_child/2`),\n[`which_children/1`](`which_children/1`) and the type `t:sup_name/0` above.\n\nIt can be:\n\n- **`t:pid/0`** - The `supervisor`'s process identifier.\n\n- **`LocalName`** - The `supervisor` is locally registered as `LocalName` with\n  [`register/2`](`erlang:register/2`).\n\n- **`{Name,Node}`** - The `supervisor` is locally registered on another node.\n\n- **`{global,GlobalName}`** - The `supervisor` is globally registered in\n  `m:global`.\n\n- **`{via,RegMod,ViaName}`** - The `supervisor` is registered in an alternative\n  process registry. The registry callback module `RegMod` is to export functions\n  `register_name/2`, `unregister_name/1`, `whereis_name/1`, and `send/2`, which\n  are to behave like the corresponding functions in `m:global`. Thus,\n  `{via,global,GlobalName}` is the same as `{global,GlobalName}`.","ref":"supervisor.html#t:sup_ref/0"},{"type":"function","title":"supervisor.terminate_child/2","doc":"Tells supervisor `SupRef` to terminate the specified child.\n\nIf the supervisor is not `simple_one_for_one`, `Id` must be the child\nspecification identifier. The process, if any, is terminated and, unless it is a\ntemporary child, the child specification is kept by the supervisor. The child\nprocess can later be restarted by the supervisor. The child process can also be\nrestarted explicitly by calling `restart_child/2`. Use `delete_child/2` to\nremove the child specification.\n\nIf the child is temporary, the child specification is deleted as soon as the\nprocess terminates. This means that [`delete_child/2`](`delete_child/2`) has no\nmeaning and [`restart_child/2`](`restart_child/2`) cannot be used for these\nchildren.\n\nIf the supervisor is `simple_one_for_one`, `Id` must be the `t:pid/0` of the\nchild process. If the specified process is alive, but is not a child of the\nspecified supervisor, the function returns `{error,not_found}`. If the child\nspecification identifier is specified instead of a `t:pid/0`, the function\nreturns `{error,simple_one_for_one}`.\n\nIf successful, the function returns `ok`. If there is no child specification\nwith the specified `Id`, the function returns `{error,not_found}`.","ref":"supervisor.html#terminate_child/2"},{"type":"function","title":"supervisor.which_children/1","doc":"Returns a newly created list with information about all child specifications and\nchild processes belonging to supervisor `SupRef`.\n\nNotice that calling this function when supervising many children under low\nmemory conditions can cause an out of memory exception.\n\nThe following information is given for each child specification/process:\n\n- `Id` \\- As defined in the child specification or `undefined` for a\n  `simple_one_for_one` supervisor.\n- `Child` \\- The pid of the corresponding child process, the atom `restarting`\n  if the process is about to be restarted, or `undefined` if there is no such\n  process.\n- `Type` \\- As defined in the child specification.\n- `Modules` \\- As defined in the child specification.","ref":"supervisor.html#which_children/1"},{"type":"type","title":"supervisor.worker/0","doc":"","ref":"supervisor.html#t:worker/0"},{"type":"behaviour","title":"supervisor_bridge","doc":"Generic supervisor bridge behavior.\n\nThis behavior module provides a supervisor bridge, a process that connects a\nsubsystem not designed according to the OTP design principles to a supervision\ntree. The supervisor bridge sits between a supervisor and the subsystem. It\nbehaves like a real supervisor to its own supervisor, but has a different\ninterface than a real supervisor to the subsystem. For more information, see\n[Supervisor Behaviour](`e:system:sup_princ.md`) in OTP Design Principles.\n\nA supervisor bridge assumes the functions for starting and stopping the\nsubsystem to be located in a callback module exporting a predefined set of\nfunctions.\n\nThe `m:sys` module can be used for debugging a supervisor bridge.\n\nUnless otherwise stated, all functions in this module fail if the specified\nsupervisor bridge does not exist or if bad arguments are specified.","ref":"supervisor_bridge.html"},{"type":"behaviour","title":"See Also - supervisor_bridge","doc":"`m:supervisor`, `m:sys`","ref":"supervisor_bridge.html#module-see-also"},{"type":"callback","title":"supervisor_bridge.init/1","doc":"Whenever a supervisor bridge is started using\n[`start_link/2,3`](`start_link/2`), this function is called by the new process\nto start the subsystem and initialize.\n\n`Args` is the `Args` argument provided to the start function.\n\nThe function is to return `{ok,Pid,State}`, where `Pid` is the pid of the main\nprocess in the subsystem and `State` is any term.\n\nIf later `Pid` terminates with a reason `Reason`, the supervisor bridge\nterminates with reason `Reason` as well. If later the supervisor bridge is\nstopped by its supervisor with reason `Reason`, it calls\n[`Module:terminate(Reason,State)`](`c:terminate/2`) to terminate.\n\nIf the initialization fails, the function is to return `{error,Error}`, where\n`Error` is any term, or `ignore`.","ref":"supervisor_bridge.html#c:init/1"},{"type":"function","title":"supervisor_bridge.start_link/2","doc":"Creates a nameless supervisor bridge process as part of a supervision tree.\n\nEquivalent to `start_link/3` except that the supervisor process is not\n[`registered`](`erlang:register/2`).","ref":"supervisor_bridge.html#start_link/2"},{"type":"function","title":"supervisor_bridge.start_link/3","doc":"Creates a supervisor bridge process, linked to the calling process, which calls\n[`Module:init/1`](`c:init/1`) to start the subsystem.\n\nTo ensure a synchronized startup procedure, this function does not return until\n[`Module:init/1`](`c:init/1`) has returned.\n\n- If `SupBridgeName={local,Name}`, the supervisor bridge is registered locally\n  as `Name` using [`register/2`](`register/2`).\n- If `SupBridgeName={global,GlobalName}`, the supervisor bridge is registered\n  globally as `GlobalName` using `global:register_name/2`.\n- If `SupBridgeName={via,Module,ViaName}`, the supervisor bridge is registered\n  as `ViaName` using a registry represented by Module. The `Module` callback is\n  to export functions `register_name/2`, `unregister_name/1`, and `send/2`,\n  which are to behave like the corresponding functions in `m:global`. Thus,\n  `{via,global,GlobalName}` is a valid reference.\n\n`Module` is the name of the callback module.\n\n`Args` is an arbitrary term that is passed as the argument to\n[`Module:init/1`](`c:init/1`).\n\n- If the supervisor bridge and the subsystem are successfully started, the\n  function returns `{ok,Pid}`, where `Pid` is is the pid of the supervisor\n  bridge.\n- If there already exists a process with the specified `SupBridgeName`, the\n  function returns `{error,{already_started,Pid}}`, where `Pid` is the pid of\n  that process.\n- If [`Module:init/1`](`c:init/1`) returns `ignore`, this function returns\n  `ignore` as well and the supervisor bridge terminates with reason `normal`.\n- If [`Module:init/1`](`c:init/1`) fails or returns an error tuple or an\n  incorrect value, this function returns `{error,Error}`, where `Error` is a\n  term with information about the error, and the supervisor bridge terminates\n  with reason `Error`.","ref":"supervisor_bridge.html#start_link/3"},{"type":"callback","title":"supervisor_bridge.terminate/2","doc":"This function is called by the supervisor bridge when it is about to terminate.\nIt is to be the opposite of [`Module:init/1`](`c:init/1`) and stop the subsystem\nand do any necessary cleaning up. The return value is ignored.\n\n`Reason` is `shutdown` if the supervisor bridge is terminated by its supervisor.\nIf the supervisor bridge terminates because a a linked process (apart from the\nmain process of the subsystem) has terminated with reason `Term`, then `Reason`\nbecomes `Term`.\n\n`State` is taken from the return value of [`Module:init/1`](`c:init/1`).","ref":"supervisor_bridge.html#c:terminate/2"},{"type":"behaviour","title":"sys","doc":"A functional interface to system messages.\n\nThis module contains functions for sending system messages used by programs, and\nmessages used for debugging purposes.\n\nFunctions used for implementation of processes are also expected to understand\nsystem messages, such as debug messages and code change. These functions must be\nused to implement the use of system messages for a process; either directly, or\nthrough standard behaviors, such as `m:gen_server`.\n\nThe default time-out is 5000 ms, unless otherwise specified. `timeout` defines\nthe time to wait for the process to respond to a request. If the process does\nnot respond, the function evaluates [`exit({timeout, {M, F, A}})`](`exit/1`).\n\n[](){: #dbg_opt }\n\nThe functions make references to a debug structure. The debug structure is a\nlist of `t:dbg_opt/0`, which is an internal data type used by function\n`handle_system_msg/6`. No debugging is performed if it is an empty list.","ref":"sys.html"},{"type":"behaviour","title":"System Messages - sys","doc":"Processes that are not implemented as one of the standard behaviors must still\nunderstand system messages. The following three messages must be understood:\n\n- Plain system messages. These are received as `{system, From, Msg}`. The\n  content and meaning of this message are not interpreted by the receiving\n  process module. When a system message is received, function\n  `handle_system_msg/6` is called to handle the request.\n- Shutdown messages. If the process traps exits, it must be able to handle a\n  shutdown request from its parent, the supervisor. The message\n  `{'EXIT', Parent, Reason}` from the parent is an order to terminate. The\n  process must terminate when this message is received, normally with the same\n  `Reason` as `Parent`.\n- If the modules used to implement the process change dynamically during\n  runtime, the process must understand one more message. An example is the\n  `m:gen_event` processes. The message is `{_Label, {From, Ref}, get_modules}`.\n  The reply to this message is `From ! {Ref, Modules}`, where `Modules` is a\n  list of the currently active modules in the process.\n\n  This message is used by the release handler to find which processes that\n  execute a certain module. The process can later be suspended and ordered to\n  perform a code change for one of its modules.","ref":"sys.html#module-system-messages"},{"type":"behaviour","title":"System Events - sys","doc":"When debugging a process with the functions of this module, the process\ngenerates _system_events_, which are then treated in the debug function. For\nexample, `trace` formats the system events to the terminal.\n\nFour predefined system events are used when a process receives or sends a\nmessage. The process can also define its own system events. It is always up to\nthe process itself to format these events.","ref":"sys.html#module-system-events"},{"type":"function","title":"sys.change_code/4","doc":"","ref":"sys.html#change_code/4"},{"type":"function","title":"sys.change_code/5","doc":"Tells the process to change code.\n\nThe process must be suspended to handle this message.\nArgument `Extra` is reserved for each process to use as its own.\nFunction [`Module:system_code_change/4`](`c:system_code_change/4`) is called.\n`OldVsn` is the old version of the `Module`.","ref":"sys.html#change_code/5"},{"type":"type","title":"sys.dbg_fun/0","doc":"","ref":"sys.html#t:dbg_fun/0"},{"type":"opaque","title":"sys.dbg_opt/0","doc":"See the introduction of this manual page.","ref":"sys.html#t:dbg_opt/0"},{"type":"type","title":"sys.debug_option/0","doc":"","ref":"sys.html#t:debug_option/0"},{"type":"function","title":"sys.debug_options/1","doc":"Can be used by a process that initiates a debug structure from a list of\noptions. The values of argument `Opt` are the same as for the corresponding\nfunctions.","ref":"sys.html#debug_options/1"},{"type":"type","title":"sys.format_fun/0","doc":"","ref":"sys.html#t:format_fun/0"},{"type":"function","title":"sys.get_debug/3","doc":"Gets the data associated with a debug option. `Default` is returned if `Item` is\nnot found. Can be used by the process to retrieve debug data for printing before\nit terminates.","ref":"sys.html#get_debug/3"},{"type":"function","title":"sys.get_log/1","doc":"Returns the logged system events in the debug structure, that is the last\nargument to `handle_debug/4`.","ref":"sys.html#get_log/1"},{"type":"function","title":"sys.get_state/1","doc":"","ref":"sys.html#get_state/1"},{"type":"function","title":"sys.get_state/2","doc":"Gets the state of the process.\n\n> #### Note {: .info }\n>\n> These functions are intended only to help with debugging. They are provided\n> for convenience, allowing developers to avoid having to create their own state\n> extraction functions and also avoid having to interactively extract the state\n> from the return values of `get_status/1` or `get_status/2` while debugging.\n\nThe value of `State` varies for different types of processes, as follows:\n\n- For a `m:gen_server` process, the returned `State` is the state of the\n  callback module.\n- For a `m:gen_statem` process, `State` is the tuple\n  `{CurrentState,CurrentData}`.\n- For a `m:gen_event` process, `State` is a list of tuples, where each tuple\n  corresponds to an event handler registered in the process and contains\n  `{Module, Id, HandlerState}`, as follows:\n\n  - **`Module`** - The module name of the event handler.\n\n  - **`Id`** - The ID of the handler (which is `false` if it was registered\n    without an ID).\n\n  - **`HandlerState`** - The state of the handler.\n\nIf the callback module exports a function\n[`system_get_state/1`](`c:system_get_state/1`), it is called in the target\nprocess to get its state. Its argument is the same as the `Misc` value returned\nby [`get_status/1,2`](`get_status/1`), and function\n[`Module:system_get_state/1`](`c:system_get_state/1`) is expected to extract the\nstate of the callback module from it. Function\n[`system_get_state/1`](`c:system_get_state/1`) must return `{ok, State}`, where\n`State` is the state of the callback module.\n\nIf the callback module does not export a\n[`system_get_state/1`](`c:system_get_state/1`) function, `get_state/1,2` assumes\nthat the `Misc` value is the state of the callback module and returns it\ndirectly instead.\n\nIf the callback module's [`system_get_state/1`](`c:system_get_state/1`) function\ncrashes or throws an exception, the caller exits with error\n`{callback_failed, {Module, system_get_state}, {Class, Reason}}`, where `Module`\nis the name of the callback module and `Class` and `Reason` indicate details of\nthe exception.\n\nFunction [`system_get_state/1`](`c:system_get_state/1`) is primarily useful for\nuser-defined behaviors and modules that implement OTP\n[special processes](`m:sys#process-implementation-functions`). The `m:gen_server`,\n`m:gen_statem`, and `m:gen_event` OTP behavior modules export this function, so\ncallback modules for those behaviors need not to supply their own.\n\nFor more information about a process, including its state, see `get_status/1`\nand `get_status/2`.","ref":"sys.html#get_state/2"},{"type":"function","title":"sys.get_status/1","doc":"","ref":"sys.html#get_status/1"},{"type":"function","title":"sys.get_status/2","doc":"Gets the status of the process.\n\nThe value of `Misc` varies for different types of processes, for example:\n\n- A `m:gen_server` process returns the state of the callback module.\n- A `m:gen_statem` process returns information, such as its current state name\n  and state data.\n- A `m:gen_event` process returns information about each of its registered\n  handlers.\n- A bare `m:sys` process returns the value passed as `Misc` to\n  `handle_system_message/6`.\n\nCallback modules for `m:gen_server`, `m:gen_statem`, and `m:gen_event` can also change\nthe value of `Misc` by exporting a function `format_status/1`, which contributes\nmodule-specific information. For details, see `c:gen_server:format_status/1`,\n`c:gen_statem:format_status/1`, and `c:gen_event:format_status/1`.","ref":"sys.html#get_status/2"},{"type":"function","title":"sys.handle_debug/4","doc":"This function is called by a process when it generates a system event.\n`FormFunc` is a formatting function, called as `FormFunc(Device, Event, Extra)`\nto print the events, which is necessary if tracing is activated. `Extra` is any\nextra information that the process needs in the format function, for example,\nthe process name.","ref":"sys.html#handle_debug/4"},{"type":"function","title":"sys.handle_system_msg/6","doc":"This function is used by a process module to take care of system messages. The\nprocess receives a `{system, From, Msg}` message and passes `Msg` and `From` to\nthis function.\n\nThis function _never_ returns. It calls either of the following functions:\n\n- [`Module:system_continue(Parent, NDebug, Misc)`](`c:system_continue/3`), where\n  the process continues the execution.\n- [`Module:system_terminate(Reason, Parent, Debug, Misc)`](`c:system_terminate/4`),\n  if the process is to terminate.\n\n`Module` must export the following:\n\n- [`system_continue/3`](`c:system_continue/3`)\n- [`system_terminate/4`](`c:system_terminate/4`)\n- [`system_code_change/4`](`c:system_code_change/4`)\n- [`system_get_state/1`](`c:system_get_state/1`)\n- [`system_replace_state/2`](`c:system_replace_state/2`)\n\nArgument `Misc` can be used to save internal data in a process, for example, its\nstate. It is sent to [`Module:system_continue/3`](`c:system_continue/3`) or\n[`Module:system_terminate/4`](`c:system_terminate/4`).","ref":"sys.html#handle_system_msg/6"},{"type":"function","title":"sys.install/2","doc":"","ref":"sys.html#install/2"},{"type":"function","title":"sys.install/3","doc":"Enables installation of alternative debug functions. An example of such a\nfunction is a trigger, a function that waits for some special event and performs\nsome action when the event is generated. For example, turning on low-level\ntracing.\n\n`Func` is called whenever a system event is generated. This function is to\nreturn `done`, or a new `Func` state. In the first case, the function is\nremoved. It is also removed if the function fails. If one debug function should\nbe installed more times, a unique `FuncId` must be specified for each\ninstallation.","ref":"sys.html#install/3"},{"type":"function","title":"sys.log/2","doc":"","ref":"sys.html#log/2"},{"type":"function","title":"sys.log/3","doc":"Turns the logging of system events on or off. If on, a maximum of `N` events are\nkept in the debug structure (default is 10).\n\nIf `Flag` is `get`, a list of all logged events is returned.\n\nIf `Flag` is `print`, the logged events are printed to\n[`standard_io`](`t:io:standard_io/0`).\n\nThe events are formatted with a function that is defined by the process that\ngenerated the event (with a call to [`handle_debug/4`)](`handle_debug/4`).","ref":"sys.html#log/3"},{"type":"function","title":"sys.log_to_file/2","doc":"","ref":"sys.html#log_to_file/2"},{"type":"function","title":"sys.log_to_file/3","doc":"Enables or disables the logging of all system events in text format to the file.\nThe events are formatted with a function that is defined by the process that\ngenerated the event (with a call to `handle_debug/4`). The file is opened with\nencoding UTF-8.","ref":"sys.html#log_to_file/3"},{"type":"type","title":"sys.name/0","doc":"","ref":"sys.html#t:name/0"},{"type":"function","title":"sys.no_debug/1","doc":"","ref":"sys.html#no_debug/1"},{"type":"function","title":"sys.no_debug/2","doc":"Turns off all debugging for the process. This includes functions that are\ninstalled explicitly with function [`install/2,3`](`install/2`), for example,\ntriggers.","ref":"sys.html#no_debug/2"},{"type":"function","title":"sys.print_log/1","doc":"Prints the logged system events in the debug structure, using `FormFunc` as\ndefined when the event was generated by a call to `handle_debug/4`.","ref":"sys.html#print_log/1"},{"type":"function","title":"sys.remove/2","doc":"","ref":"sys.html#remove/2"},{"type":"function","title":"sys.remove/3","doc":"Removes an installed debug function from the process. `Func` or `FuncId` must be\nthe same as previously installed.","ref":"sys.html#remove/3"},{"type":"function","title":"sys.replace_state/2","doc":"","ref":"sys.html#replace_state/2"},{"type":"function","title":"sys.replace_state/3","doc":"Replaces the state of the process, and returns the new state.\n\n> #### Note {: .info }\n>\n> These functions are intended only to help with debugging, and are not to be\n> called from normal code. They are provided for convenience, allowing\n> developers to avoid having to create their own custom state replacement\n> functions.\n\nFunction `StateFun` provides a new state for the process. Argument `State` and\nthe `NewState` return value of `StateFun` vary for different types of processes\nas follows:\n\n- For a `m:gen_server` process, `State` is the state of the callback module and\n  `NewState` is a new instance of that state.\n- For a `m:gen_statem` process, `State` is the tuple\n  `{CurrentState,CurrentData}`, and `NewState` is a similar tuple, which can\n  contain a new current state, new state data, or both.\n- For a `m:gen_event` process, `State` is the tuple `{Module, Id, HandlerState}`\n  as follows:\n\n  - **`Module`** - The module name of the event handler.\n\n  - **`Id`** - The ID of the handler (which is `false` if it was registered\n    without an ID).\n\n  - **`HandlerState`** - The state of the handler.\n\n  `NewState` is a similar tuple where `Module` and `Id` are to have the same\n  values as in `State`, but the value of `HandlerState` can be different.\n  Returning a `NewState`, whose `Module` or `Id` values differ from those of\n  `State`, leaves the state of the event handler unchanged. For a `m:gen_event`\n  process, `StateFun` is called once for each event handler registered in the\n  `m:gen_event` process.\n\nIf a `StateFun` function decides not to effect any change in process state, then\nregardless of process type, it can return its `State` argument.\n\nIf a `StateFun` function crashes or throws an exception, the original state of\nthe process is unchanged for `m:gen_server`, and `m:gen_statem` processes. For\n`m:gen_event` processes, a crashing or failing `StateFun` function means that only\nthe state of the particular event handler it was working on when it failed or\ncrashed is unchanged; it can still succeed in changing the states of other event\nhandlers registered in the same `m:gen_event` process.\n\nIf the callback module exports a `c:system_replace_state/2` function, it is\ncalled in the target process to replace its state using `StateFun`. Its two\narguments are `StateFun` and `Misc`, where `Misc` is the same as the `Misc`\nvalue returned by [`get_status/1,2`](`get_status/1`). A\n[`system_replace_state/2`](`c:system_replace_state/2`) function is expected to\nreturn `{ok, NewState, NewMisc}`, where `NewState` is the new state of the\ncallback module, obtained by calling `StateFun`, and `NewMisc` is a possibly new\nvalue used to replace the original `Misc` (required as `Misc` often contains the\nstate of the callback module within it).\n\nIf the callback module does not export a\n[`system_replace_state/2`](`c:system_replace_state/2`) function,\n[`replace_state/2,3`](`replace_state/2`) assumes that `Misc` is the state of the\ncallback module, passes it to `StateFun` and uses the return value as both the\nnew state and as the new value of `Misc`.\n\nIf the callback module's function\n[`system_replace_state/2`](`c:system_replace_state/2`) crashes or throws an\nexception, the caller exits with error\n`{callback_failed, {Module, system_replace_state}, {Class, Reason}}`, where\n`Module` is the name of the callback module and `Class` and `Reason` indicate\ndetails of the exception. If the callback module does not provide a\n[`system_replace_state/2`](`c:system_replace_state/2`) function and `StateFun`\ncrashes or throws an exception, the caller exits with error\n`{callback_failed, StateFun, {Class, Reason}}`.\n\nFunction [`system_replace_state/2`](`c:system_replace_state/2`) is primarily\nuseful for user-defined behaviors and modules that implement OTP\n[special processes](`m:sys#process-implementation-functions`). The OTP behavior\nmodules `m:gen_server`, `m:gen_statem`, and `m:gen_event` export this function, so\ncallback modules for those behaviors need not to supply their own.","ref":"sys.html#replace_state/3"},{"type":"function","title":"sys.resume/1","doc":"","ref":"sys.html#resume/1"},{"type":"function","title":"sys.resume/2","doc":"Resumes a suspended process.","ref":"sys.html#resume/2"},{"type":"function","title":"sys.statistics/2","doc":"","ref":"sys.html#statistics/2"},{"type":"function","title":"sys.statistics/3","doc":"Enables or disables the collection of statistics. If `Flag` is `get`, the\nstatistical collection is returned.","ref":"sys.html#statistics/3"},{"type":"function","title":"sys.suspend/1","doc":"","ref":"sys.html#suspend/1"},{"type":"function","title":"sys.suspend/2","doc":"Suspends the process. When the process is suspended, it only responds to other\nsystem messages, but not other messages.","ref":"sys.html#suspend/2"},{"type":"callback","title":"sys.system_code_change/4","doc":"Called from `handle_system_msg/6` when the process is to perform a code change.\nThe code change is used when the internal data structure has changed. This\nfunction converts argument `Misc` to the new data structure. `OldVsn` is\nattribute _vsn_ of the old version of the `Module`. If no such attribute is\ndefined, the atom `undefined` is sent.","ref":"sys.html#c:system_code_change/4"},{"type":"callback","title":"sys.system_continue/3","doc":"Called from `handle_system_msg/6` when the process is to continue its execution\n(for example, after it has been suspended). This function never returns.","ref":"sys.html#c:system_continue/3"},{"type":"type","title":"sys.system_event/0","doc":"Debug events produced by `m:gen_server`, `m:gen_statem` and `m:gen_event`\n\n- **`{in,Msg}`** - Is produced by `m:gen_server` and `m:gen_event` when the message\n  `Msg` arrives.\n\n- **`{in,Msg,State}`** - Is produced by `m:gen_statem` when the message `Msg`\n  arrives in state `State`.\n\n  For `m:gen_statem` the `Msg` term is an `{EventType,EventContent}` tuple.\n\n- **`{out,Msg,To}`** - Is produced by `m:gen_statem` when the reply `Msg` is sent\n  back to `To` by returning a `{reply,To,Msg}` action from the callback module.\n\n  `To` is of the same type as the first argument to `gen_statem:reply/2`.\n\n- **`{out,Msg,To,State}`** - Is produced by `m:gen_server` when the reply `Msg` is\n  sent back to `To` by returning a `{reply,...}` tuple from the callback module.\n\n  `To` is of the same type as the first argument to `gen_server:reply/2`.\n\n  `State` is the new server state.\n\n- **`{noreply,State}`** - Is produced by `m:gen_server` when a `{noreply,...}`\n  tuple is returned from the callback module.\n\n  `State` is the new server state.\n\n- **`{continue,Continuation}`** - Is produced by `m:gen_server` when a\n  `{continue,Continuation}` tuple is returned from the callback module.\n\n- **`{postpone,Event,State,NextState}`** - Is produced by `m:gen_statem` when the\n  message `Event` is postponed in state `State`. `NextState` is the new state.\n\n  `Event` is an `{EventType,EventContent}` tuple.\n\n- **`{consume,Event,State,NextState}`** - Is produced by `m:gen_statem` when the\n  message `Event` is consumed in state `State`. `NextState` is the new state.\n\n  `Event` is an `{EventType,EventContent}` tuple.\n\n- **`{start_timer,Action,State}`** - Is produced by `m:gen_statem` when the action\n  `Action` starts a timer in state `State`.\n\n- **`{insert_timeout,Event,State}`** - Is produced by `m:gen_statem` when a\n  timeout zero action inserts event `Event` in state `State`.\n\n  `Event` is an `{EventType,EventContent}` tuple.\n\n- **`{enter,Module,State}`** - Is produced by `m:gen_statem` when module `Module`\n  enters the first state `State`.\n\n- **`{module,Module,State}`** - Is produced by `m:gen_statem` when setting module\n  `Module` in state `State`.\n\n- **`{terminate,Reason,State}`** - Is produced by `m:gen_statem` when it\n  terminates with reason `Reason` in state `State`.","ref":"sys.html#t:system_event/0"},{"type":"callback","title":"sys.system_get_state/1","doc":"Called from `handle_system_msg/6` when the process is to return a term that\nreflects its current state. `State` is the value returned by `get_state/2`.","ref":"sys.html#c:system_get_state/1"},{"type":"callback","title":"sys.system_replace_state/2","doc":"Called from `handle_system_msg/6` when the process is to replace its current\nstate. `NState` is the value returned by `replace_state/3`.","ref":"sys.html#c:system_replace_state/2"},{"type":"callback","title":"sys.system_terminate/4","doc":"Called from `handle_system_msg/6` when the process is to terminate. For example,\nthis function is called when the process is suspended and its parent orders\nshutdown. It gives the process a chance to do a cleanup. This function never\nreturns.","ref":"sys.html#c:system_terminate/4"},{"type":"function","title":"sys.terminate/2","doc":"","ref":"sys.html#terminate/2"},{"type":"function","title":"sys.terminate/3","doc":"Orders the process to terminate with the specified `Reason`. The termination is\ndone asynchronously, so it is not guaranteed that the process is terminated when\nthe function returns.","ref":"sys.html#terminate/3"},{"type":"function","title":"sys.trace/2","doc":"","ref":"sys.html#trace/2"},{"type":"function","title":"sys.trace/3","doc":"Prints all system events on [`standard_io`](`t:io:standard_io/0`). The events\nare formatted with a function that is defined by the process that generated the\nevent (with a call to `handle_debug/4`).","ref":"sys.html#trace/3"},{"type":"module","title":"c","doc":"Command line interface module.\n\nThis module enables users to enter the short form of some commonly used\ncommands.\n\n> #### Note {: .info }\n>\n> These functions are intended for interactive use in the Erlang shell only. The\n> module prefix can be omitted.","ref":"c.html"},{"type":"module","title":"See Also - c","doc":"`m:filename`, `m:compile`, `m:erlang`, `m:yecc`, `m:xref`","ref":"c.html#module-see-also"},{"type":"function","title":"c.bt/1","doc":"Stack backtrace for a process. Equivalent to\n`erlang:process_display(Pid, backtrace)`.","ref":"c.html#bt/1"},{"type":"function","title":"c.c/1","doc":"Works like [`c(Module, [])`](`c/2`).","ref":"c.html#c/1"},{"type":"function","title":"c.c/2","doc":"Compiles and then purges and loads the code for a module. `Module` can be either\na module name or a source file path, with or without `.erl` extension.\n\nIf `Module` is a string, it is assumed to be a source file path, and the\ncompiler will attempt to compile the source file with the options `Options`. If\ncompilation fails, the old object file (if any) is deleted.\n\nIf `Module` is an atom, a source file with that exact name or with `.erl`\nextension will be looked for. If found, the source file is compiled with the\noptions `Options`. If compilation fails, the old object file (if any) is\ndeleted.\n\nIf `Module` is an atom and is not the path of a source file, then the code path\nis searched to locate the object file for the module and extract its original\ncompiler options and source path. If the source file is not found in the\noriginal location, `filelib:find_source/1` is used to search for it relative to\nthe directory of the object file.\n\nThe source file is compiled with the the original options appended to the given\n`Options`, the output replacing the old object file if and only if compilation\nsucceeds.\n\nNotice that purging the code means that any processes lingering in old code for\nthe module are killed without warning. For more information, see the `m:code`\nmodule.","ref":"c.html#c/2"},{"type":"function","title":"c.c/3","doc":"Compiles and then purges and loads the code for module `Module`, which must be\nan atom.\n\nThe code path is searched to locate the object file for module `Module` and\nextract its original compiler options and source path. If the source file is not\nfound in the original location, `filelib:find_source/1` is used to search for it\nrelative to the directory of the object file.\n\nThe source file is compiled with the the original options appended to the given\n`Options`, the output replacing the old object file if and only if compilation\nsucceeds. The function `Filter` specifies which elements to remove from the\noriginal compiler options before the new options are added. The `Filter` fun\nshould return `true` for options to keep, and `false` for options to remove.\n\nNotice that purging the code means that any processes lingering in old code for\nthe module are killed without warning. For more information, see the `m:code`\nmodule.","ref":"c.html#c/3"},{"type":"function","title":"c.cd/1","doc":"Changes working directory to `Dir`, which can be a relative name, and then\nprints the name of the new working directory.\n\n_Example:_\n\n```text\n2> cd(\"../erlang\").\n/home/ron/erlang\n```","ref":"c.html#cd/1"},{"type":"type","title":"c.cmd_line_arg/0","doc":"","ref":"c.html#t:cmd_line_arg/0"},{"type":"function","title":"c.erlangrc/1","doc":"Search `PathList` and load `.erlang` resource file if found.","ref":"c.html#erlangrc/1"},{"type":"function","title":"c.flush/0","doc":"Flushes any messages sent to the shell.","ref":"c.html#flush/0"},{"type":"function","title":"c.h/1","doc":"Print the documentation for `Module`","ref":"c.html#h/1"},{"type":"function","title":"c.h/2","doc":"Print the documentation for all `Module:Function`s (regardless of arity).","ref":"c.html#h/2"},{"type":"function","title":"c.h/3","doc":"Print the documentation for `Module:Function/Arity`.","ref":"c.html#h/3"},{"type":"type","title":"c.h_return/0","doc":"","ref":"c.html#t:h_return/0"},{"type":"function","title":"c.hcb/1","doc":"Print the callback documentation for `Module`","ref":"c.html#hcb/1"},{"type":"function","title":"c.hcb/2","doc":"Print the callback documentation for all `Module:Callback`s (regardless of\narity).","ref":"c.html#hcb/2"},{"type":"function","title":"c.hcb/3","doc":"Print the callback documentation for `Module:Callback/Arity`.","ref":"c.html#hcb/3"},{"type":"type","title":"c.hcb_return/0","doc":"","ref":"c.html#t:hcb_return/0"},{"type":"function","title":"c.help/0","doc":"Displays help information: all valid shell internal commands, and commands in\nthis module.","ref":"c.html#help/0"},{"type":"type","title":"c.hf_return/0","doc":"","ref":"c.html#t:hf_return/0"},{"type":"function","title":"c.ht/1","doc":"Print the type documentation for `Module`","ref":"c.html#ht/1"},{"type":"function","title":"c.ht/2","doc":"Print the type documentation for `Type` in `Module` regardless of arity.","ref":"c.html#ht/2"},{"type":"function","title":"c.ht/3","doc":"Print the type documentation for `Type/Arity` in `Module`.","ref":"c.html#ht/3"},{"type":"type","title":"c.ht_return/0","doc":"","ref":"c.html#t:ht_return/0"},{"type":"function","title":"c.i/0","doc":"","ref":"c.html#i/0"},{"type":"function","title":"c.i/3","doc":"Displays information about a process, Equivalent to\n[`process_info(pid(X, Y, Z))`](`process_info/1`), but location transparent.","ref":"c.html#i/3"},{"type":"function","title":"c.l/1","doc":"Purges and loads, or reloads, a module by calling `code:purge(Module)` followed\nby `code:load_file(Module)`.\n\nNotice that purging the code means that any processes lingering in old code for\nthe module are killed without warning. For more information, see `code/3`.","ref":"c.html#l/1"},{"type":"function","title":"c.lc/1","doc":"Compiles a list of files by calling\n`compile:file(File, [report_errors, report_warnings])` for each `File` in\n`Files`.\n\nFor information about `File`, see `t:file:filename/0`.","ref":"c.html#lc/1"},{"type":"function","title":"c.lm/0","doc":"Reloads all currently loaded modules that have changed on disk (see `mm/0`).\nReturns the list of results from calling [`l(M)`](`l/1`) for each such `M`.","ref":"c.html#lm/0"},{"type":"function","title":"c.ls/0","doc":"Lists files in the current directory.","ref":"c.html#ls/0"},{"type":"function","title":"c.ls/1","doc":"Lists files in directory `Dir` or, if `Dir` is a file, only lists it.","ref":"c.html#ls/1"},{"type":"function","title":"c.m/0","doc":"Displays information about the loaded modules, including the files from which\nthey have been loaded.","ref":"c.html#m/0"},{"type":"function","title":"c.m/1","doc":"Displays information about `Module`.","ref":"c.html#m/1"},{"type":"function","title":"c.memory/0","doc":"Memory allocation information. Equivalent to `erlang:memory/0`.","ref":"c.html#memory/0"},{"type":"function","title":"c.memory/1","doc":"Memory allocation information. Equivalent to `erlang:memory/1`.","ref":"c.html#memory/1"},{"type":"function","title":"c.mm/0","doc":"Lists all modified modules. Shorthand for `code:modified_modules/0`.","ref":"c.html#mm/0"},{"type":"function","title":"c.nc/1","doc":"","ref":"c.html#nc/1"},{"type":"function","title":"c.nc/2","doc":"Compiles and then loads the code for a file on all nodes. `Options` defaults to\n`[]`. Compilation is equivalent to:\n\n```erlang\ncompile:file(File, Options ++ [report_errors, report_warnings])\n```","ref":"c.html#nc/2"},{"type":"function","title":"c.ni/0","doc":"`i/0` displays system information, listing information about all processes.\n`ni/0` does the same, but for all nodes in the network.","ref":"c.html#ni/0"},{"type":"function","title":"c.nl/1","doc":"Loads `Module` on all nodes.","ref":"c.html#nl/1"},{"type":"function","title":"c.nregs/0","doc":"","ref":"c.html#nregs/0"},{"type":"function","title":"c.pid/3","doc":"Converts `X`, `Y`, `Z` to pid ` `. This function is only to be used when\ndebugging.","ref":"c.html#pid/3"},{"type":"function","title":"c.pwd/0","doc":"Prints the name of the working directory.","ref":"c.html#pwd/0"},{"type":"function","title":"c.q/0","doc":"This function is shorthand for `init:stop()`, that is, it causes the node to\nstop in a controlled fashion.","ref":"c.html#q/0"},{"type":"function","title":"c.regs/0","doc":"`regs/0` displays information about all registered processes. `nregs/0` does the\nsame, but for all nodes in the network.","ref":"c.html#regs/0"},{"type":"function","title":"c.uptime/0","doc":"Prints the node uptime (as specified by `erlang:statistics(wall_clock)`) in\nhuman-readable form.","ref":"c.html#uptime/0"},{"type":"function","title":"c.xm/1","doc":"Finds undefined functions, unused functions, and calls to deprecated functions\nin a module by calling `xref:m/1`.","ref":"c.html#xm/1"},{"type":"function","title":"c.y/1","doc":"Generates an LALR-1 parser. Equivalent to:\n\n```text\nyecc:file(File)\n```\n\nFor information about `File = name()`, see `m:filename`. For information about\n`YeccRet`, see [`yecc:file/2`](`yecc:file/1`).","ref":"c.html#y/1"},{"type":"function","title":"c.y/2","doc":"Generates an LALR-1 parser. Equivalent to:\n\n```text\nyecc:file(File, Options)\n```\n\nFor information about `File = name()`, see `m:filename`. For information about\n`Options` and `YeccRet`, see [`yecc:file/2`](`yecc:file/1`).","ref":"c.html#y/2"},{"type":"module","title":"edlin","doc":"Line and input interpretter for the erlang shell.\n\nThis module reads input, handles any escape sequences that have been configured\nvia edlin_key and outputs action requests. The action requests are handled\neither by modules `group` or the `user_drv`.","ref":"edlin.html"},{"type":"module","title":"Key configuration - edlin","doc":"You can setup a custom key configuration that overrides the default key\nconfiguration. This is done by setting the stdlib application parameter\n[`shell_keymap`](stdlib_app.md#shell_keymap) before Erlang is started. If you\nwant to have the same keymap in all Erlang shells you can do so by putting a\n[config](`e:kernel:config.md`) file in your user's home directory and then set\n[ERL_FLAGS](`e:erts:erl_cmd.md#ERL_FLAGS`) to load it at startup. For example:\n\n```text\n$ cat $HOME/.erlang_keymap.config\n[{stdlib,\n  [{shell_keymap,\n    #{ normal => #{ \"\\^[A\" => clear } }\n  }]\n}].\n$ ERL_FLAGS=\"-config $HOME/.erlang_keymap\" erl\n```\n\nThe current keymap configuration can be fetched through\n[edlin:keymap()](`keymap/0`). If a custom keymap or keymap file is specified,\nthen it will be merged with the default keymap.\n\nThe keymap is a map of maps where the keys in the parent map corresponds to\ndifferent editing modes in the shell. The valid modes currently supported are\n`normal` and `search`.\n\nThe keys in the child maps are the escape sequences that are sent from the\nterminal when a key is pressed and each value is a valid action as seen below.\n\nThe default atom is used to specify that an action should happen when a key is\npressed that does not have any mapping. Typically used to exit a mode.\n\nSee [tty - A Command-Line Interface](`e:erts:tty.md`) for more information about\nthe default keymap.","ref":"edlin.html#module-key-configuration"},{"type":"module","title":"Actions - edlin","doc":"The commands below are the built-in action requests for switching input modes on\nthe normal shell or navigating, or manipulating the line feed. The line feed\nsupports multiple lines.\n\n- **`auto_blink`** - Automatically close the closest matching opening\n  parenthesis.\n\n- **`backward_char`** - Move backward one character.\n\n- **`backward_delete_char`** - Delete the character behind the cursor.\n\n- **`backward_delete_word`** - Delete the word behind the cursor.\n\n- **`backward_kill_line`** - Delete all characters from the cursor to the\n  beginning of the line and save them in the kill buffer.\n\n- **`backward_kill_word`** - Delete the word behind the cursor and save it in\n  the kill buffer.\n\n- **`backward_line`** - Move backward one line.\n\n- **`backward_word`** - Move backward one word.\n\n- **`beginning_of_expression`** - Move to the beginning of the expression.\n\n- **`beginning_of_line`** - Move to the beginning of the line.\n\n- **`clear`** - Clear the screen.\n\n- **`clear_line`** - Clear the current expression.\n\n- **`end_of_expression`** - Move to the end of the expression.\n\n- **`end_of_line`** - Move to the end of the line.\n\n- **`forward_char`** - Move forward one character.\n\n- **`forward_delete_char`** - Delete the character under the cursor.\n\n- **`forward_line`** - Move forward one line.\n\n- **`forward_word`** - Move forward one word.\n\n- **`help`** - Display help for the module or function closest on the left of\n  the cursor.\n\n- **`help_full`** - Display the whole help text for the module or function closest on the left of\n  the cursor.\n\n- **`history_down`** - Move to the next item in the history.\n\n- **`history_up`** - Move to the previous item in the history.\n\n- **`kill_line`** - Delete all characters from the cursor to the end of the line\n  and save them in the kill buffer.\n\n- **`kill_word`** - Delete the word under the cursor and save it in the kill\n  buffer.\n\n- **`move_expand_down`** - Move down one line in the expand area e.g. help or\n  tab completion pager.\n\n- **`move_expand_up`** - Move up one line in the expand area e.g. help or tab\n  completion pager.\n\n- **`new_line_finish`** - Add a newline at the end of the line and try to\n  evaluate the current expression.\n\n- **`newline`** - Add a newline at the cursor position.\n\n- **`open_editor`** - Open the current line in an editor e.g. EDITOR=\"code -w\"\n  opens a buffer in vs code. Note that you need to pass a flag to the editor so\n  that it signals the shell when you close the buffer.\n\n- **`redraw_line`** - Redraw the current line.\n\n- **`scroll_expand_down`** - Scroll down five lines in the expand area e.g. help\n  or tab completion pager.\n\n- **`scroll_expand_up`** - Scroll up five lines in the expand area e.g. help or\n  tab completion pager.\n\n- **`search_cancel`** - Cancel the current search.\n\n- **`search_found`** - Accept the current search result and submit it.\n\n- **`search_quit`** - Accept the current search result, but edit it before\n  submitting.\n\n- **`search`** - Enter search mode, search the history.\n\n- **`skip_down`** - Skip to the next line in the history that matches the\n  current search expression.\n\n- **`skip_up`** - Skip to the previous line in the history that matches the\n  current search expression.\n\n- **`tab_expand_full`** - Output all possible tab completions.\n\n- **`tab_expand_quit`** - Go back to normal mode.\n\n- **`tab_expand`** - Autocomplete the current word, or show 5 lines of possible\n  completions.\n\n- **`transpose_char`** - Swap the character behind the cursor with the one in\n  front of it.\n\n- **`transpose_word`** - Swap the word behind the cursor with the one in front\n  of it.\n\n- **`yank`** - Insert the contents of the kill buffer at the cursor position.","ref":"edlin.html#module-actions"},{"type":"type","title":"edlin.keymap/0","doc":"A map of maps for each shell mode containing key, action pairs.","ref":"edlin.html#t:keymap/0"},{"type":"function","title":"edlin.keymap/0","doc":"Get the current keymap used in the shell. Each key in the parent map represents\na _shell mode_ e.g. `normal` or `search`. Each map associated with the _shell\nmodes_ contains _key sequences_ represented as strings, paired with an _action_,\nwhich is one of the valid actions mentioned above.","ref":"edlin.html#keymap/0"},{"type":"module","title":"edlin_expand","doc":"Shell expansion and formatting of expansion suggestions.\n\nThis module provides an expand_fun for the erlang shell\n[`expand/1,2`](`expand/1`). It is possible to override this expand_fun\n[`io:setopts/1,2`](`io:setopts/1`).","ref":"edlin_expand.html"},{"type":"function","title":"edlin_expand.expand/1","doc":"","ref":"edlin_expand.html#expand/1"},{"type":"function","title":"edlin_expand.expand/2","doc":"The standard expansion function is able to expand strings to valid erlang terms.\nThis includes module names:\n\n```text\n1> erla\nmodules\nerlang:\n```\n\nfunction names:\n\n```text\n1> is_ato\nfunctions\nis_atom(\n2> erlang:is_ato\nfunctions\nis_atom(\n```\n\nfunction types:\n\n```text\n1> erlang:is_atom(\ntypespecs\nerlang:is_atom(Term)\nany()\n```\n\nand automatically add , or closing parenthesis when no other valid expansion is\npossible. The expand function also completes: shell bindings, record names,\nrecord fields and map keys.\n\nAs seen below, function headers are grouped together if they've got the same\nexpansion suggestion, in this case all had the same suggestions, that is '\\}'.\nThere is also limited support for filtering out function typespecs that that\ndoes not match the types on the terms on the prompt. Only 4 suggestions are\nshown below but there exists plenty more typespecs for `erlang:system_info`.\n\n```text\n1> erlang:system_info({allocator, my_allocator\ntypespecs\nerlang:system_info(wordsize | {wordsize, ...} | {wordsize, ...})\nerlang:system_info({allocator, ...})\nerlang:system_info({allocator_sizes, ...})\nerlang:system_info({cpu_topology, ...})\n}\n```\n\nThe return type of `expand` function specifies either a list of `Element` tuples\nor a list of `Section` maps. The section concept was introduced to enable more\nformatting options for the expansion results. For example, the shell expansion\nhas support to highlight text and hide suggestions. There are also a\n`{highlight, Text}` that highlights all occurances of `Text` in the title, and a\n`highlight_all` for simplicity which highlights the whole title, as can be seen\nabove for `functions` and `typespecs`.\n\nBy setting the `{hide, result}` or `{hide, title}` options you may hide\nsuggestions. Sometimes the title isn't useful and just produces text noise, in\nthe example above the `t:any/0` result is part of a section with title `Types`.\nHiding results is currently not in use, but the idea is that a section can be\nselected in the expand area and all the other section entries should be\ncollapsed.\n\nIts possible to set a custom separator between the title and the results. This\ncan be done with `{separator, Separator}`. By default its set to be `\\n`, some\nresults display a `type_name() :: `followed by all types that define\n`type_name()`.\n\nThe `{ending, Text}` ElementOption just appends Text to the `Element`.","ref":"edlin_expand.html#expand/2"},{"type":"module","title":"shell","doc":"The Erlang shell.\n\nThe shell is a user interface program for entering expression sequences. The\nexpressions are evaluated and a value is returned. The shell provides an Emacs\nlike set of shortcuts for editing the text of the current line. See\n[tty - A Command-Line Interface](`e:erts:tty.md`) in the ERTS User's Guide for a\nlist of all available shortcuts. You may also change the shortcuts to suit your\npreferences more, see [edlin - line editor in the shell](`m:edlin`).\n\nA history mechanism saves previous commands and their values, which can then be\nincorporated in later commands. How many commands and results to save can be\ndetermined by the user, either interactively, by calling `history/1` and\n`results/1`, or by setting the application configuration parameters\n[`shell_history_length`](stdlib_app.md#shell_history_length) and\n[`shell_saved_results`](stdlib_app.md#shell_saved_results) for the STDLIB\napplication. The shell history can be saved to disk by setting the application\nconfiguration parameter\n[`shell_history`](`e:kernel:kernel_app.md#shell_history`) for the Kernel\napplication.\n\nThe shell uses a helper process for evaluating commands to protect the history\nmechanism from exceptions. By default the evaluator process is killed when an\nexception occurs, but by calling `catch_exception/1` or by setting the\napplication configuration parameter `shell_catch_exception` for the STDLIB\napplication this behavior can be changed. See also the example below.\n\nVariable bindings, and local process dictionary changes that are generated in\nuser expressions are preserved, and the variables can be used in later commands\nto access their values. The bindings can also be forgotten so the variables can\nbe reused.\n\nThe special shell commands all have the syntax of (local) function calls. They\nare evaluated as normal function calls and many commands can be used in one\nexpression sequence.\n\nIf a command (local function call) is not recognized by the shell, an attempt is\nfirst made to find the function in module `user_default`, where customized local\ncommands can be placed. If found, the function is evaluated, otherwise an\nattempt is made to evaluate the function in module `shell_default`. Module\n`user_default` must be explicitly loaded.\n\nThe shell also permits the user to start multiple concurrent jobs. A job can be\nregarded as a set of processes that can communicate with the shell.\n\nThere is some support for reading and printing records in the shell. During\ncompilation record expressions are translated to tuple expressions. In runtime\nit is not known whether a tuple represents a record, and the record definitions\nused by the compiler are unavailable at runtime. So, to read the record syntax\nand print tuples as records when possible, record definitions must be maintained\nby the shell itself.\n\nThe shell commands for reading, defining, forgetting, listing, and printing\nrecords are described below. Notice that each job has its own set of record\ndefinitions. To facilitate matters, record definitions in modules\n`shell_default` and `user_default` (if loaded) are read each time a new job is\nstarted. For example, adding the following line to `user_default` makes the\ndefinition of `file_info` readily available in the shell:\n\n```erlang\n-include_lib(\"kernel/include/file.hrl\").\n```\n\nThe shell runs in two modes:\n\n- `Normal (possibly restricted)` mode, in which commands can be edited and\n  expressions evaluated\n- Job Control Mode, `JCL`, in which jobs can be started, killed, detached, and\n  connected\n\nOnly the currently connected job can 'talk' to the shell.","ref":"shell.html"},{"type":"module","title":"Shell Commands - shell","doc":"The commands below are the built-in shell commands that are always available. In\nmost system the commands listed in the `m:c` module are also available in the\nshell.\n\n- **`b()`** - Prints the current variable bindings.\n\n- **`f()`** - Removes all variable bindings.\n\n- **`f(X)`** - Removes the binding of variable `X`.\n\n  > #### Note {: .info }\n  >\n  > If a huge value is stored in a variable binding, you have to both call\n  > `f(X)` and call [`history(0)`](`history/1`) or [`results(0)`](`results/1`)\n  > to free up that memory.\n\n- **`h()`** - Prints the history list.\n\n- **[`history(N)`](`history/1`)** - Sets the number of previous commands to keep\n  in the history list to `N`. The previous number is returned. Defaults to 20.\n\n- **[`results(N)`](`results/1`)** - Sets the number of results from previous\n  commands to keep in the history list to `N`. The previous number is returned.\n  Defaults to 20.\n\n- **`e(N)`** - Repeats command `N`, if `N` is positive. If it is negative, the\n  `N`th previous command is repeated (that is, `e(-1)` repeats the previous\n  command).\n\n- **`v(N)`** - Uses the return value of command `N` in the current command, if\n  `N` is positive. If it is negative, the return value of the `N`th previous\n  command is used (that is, `v(-1)` uses the value of the previous command).\n\n- **`help()`** - Evaluates `shell_default:help()`.\n\n- **`h(Module, Function)`** - Print the documentation for `Module:Function` in\n  the shell if available.\n\n- **`ht(Module, Type)`** - Print the documentation for `Module:Type` in the\n  shell if available.\n\n- **`hcb(Module, Callback)`** - Print the documentation for `Module:Callback` in\n  the shell if available.\n\n- **`c(Mod)`** - Evaluates `shell_default:c(Mod)`. This compiles and loads the\n  module `Mod` and purges old versions of the code, if necessary. `Mod` can be\n  either a module name or a a source file path, with or without `.erl`\n  extension.\n\n- **[`catch_exception(Bool)`](`catch_exception/1`)** - Sets the exception\n  handling of the evaluator process. The previous exception handling is\n  returned. The default (`false`) is to kill the evaluator process when an\n  exception occurs, which causes the shell to create a new evaluator process.\n  When the exception handling is set to `true`, the evaluator process lives on.\n  This means, for example, that ports and ETS tables as well as processes linked\n  to the evaluator process survive the exception.\n\n- **`rd(RecordName, RecordDefinition)`** - Defines a record in the shell.\n  `RecordName` is an atom and `RecordDefinition` lists the field names and the\n  default values. Usually record definitions are made known to the shell by use\n  of the `rr/1,2,3` commands described below, but sometimes it is handy to\n  define records on the fly.\n\n- **`rf()`** - Removes all record definitions, then reads record definitions\n  from the modules `shell_default` and `user_default` (if loaded). Returns the\n  names of the records defined.\n\n- **`rf(RecordNames)`** - Removes selected record definitions. `RecordNames` is\n  a record name or a list of record names. To remove all record definitions, use\n  `'_'`.\n\n- **`rl()`** - Prints all record definitions.\n\n- **`rl(RecordNames)`** - Prints selected record definitions. `RecordNames` is a\n  record name or a list of record names.\n\n- **`rp(Term)`** - Prints a term using the record definitions known to the\n  shell. All of `Term` is printed; the depth is not limited as is the case when\n  a return value is printed.\n\n- **`rr(Module)`** - Reads record definitions from a module's BEAM file. If\n  there are no record definitions in the BEAM file, the source file is located\n  and read instead. Returns the names of the record definitions read. `Module`\n  is an atom.\n\n- **`rr(Wildcard)`** - Reads record definitions from files. Existing definitions\n  of any of the record names read are replaced. `Wildcard` is a wildcard string\n  as defined in `m:filelib`, but not an atom.\n\n- **`rr(WildcardOrModule, RecordNames)`** - Reads record definitions from files\n  but discards record names not mentioned in `RecordNames` (a record name or a\n  list of record names).\n\n- **`rr(WildcardOrModule, RecordNames, Options)`** - Reads record definitions\n  from files. The compiler options `{i, Dir}`, `{d, Macro}`, and\n  `{d, Macro, Value}` are recognized and used for setting up the include path\n  and macro definitions. To read all record definitions, use `'_'` as value of\n  `RecordNames`.\n\n- **`lf()`** - Outputs locally defined function with function specs if they\n  exist.\n\n- **`lt()`** - Outputs locally defined types.\n\n- **`lr()`** - Outputs locally defined records.\n\n- **`ff()`** - Forget locally defined functions (including function specs if\n  they exist).\n\n- **`ff({FunName,Arity})`** - Forget a locally defined function (including\n  function spec if it exist). Where `FunName` is the name of the function as an\n  atom and `Arity` is an integer.\n\n- **`tf()`** - Forget locally defined types.\n\n- **`tf(Type)`** - Forget locally defined type where `Type` is the name of the\n  type represented as an atom.\n\n- **`fl()`** - Forget locally defined functions, types and records.\n\n- **`save_module(FilePath)`** - Saves all locally defined functions, types and\n  records to a module file, where `FilePath` should include both the path to the\n  file and the name of the module with `.erl` suffix.\n\n  Example: `src/my_module.erl`","ref":"shell.html#module-shell-commands"},{"type":"module","title":"Example - shell","doc":"The following example is a long dialog with the shell. Commands starting with\n`>` are inputs to the shell. All other lines are output from the shell.\n\n```erlang\nstrider 1> erl\nErlang (BEAM) emulator version 5.3 [hipe] [threads:0]\n\nEshell V5.3  (abort with ^G)\n1> Str = \"abcd\".\n\"abcd\"\n```\n\nCommand 1 sets variable `Str` to string `\"abcd\"`.\n\n```erlang\n2> L = length(Str).\n4\n```\n\nCommand 2 sets `L` to the length of string `Str`.\n\n```erlang\n3> Descriptor = {L, list_to_atom(Str)}.\n{4,abcd}\n```\n\nCommand 3 builds the tuple `Descriptor`, evaluating the BIF\n[`list_to_atom/1` ](`erlang:list_to_atom/1`).\n\n```erlang\n4> L.\n4\n```\n\nCommand 4 prints the value of variable `L`.\n\n```erlang\n5> b().\nDescriptor = {4,abcd}\nL = 4\nStr = \"abcd\"\nok\n```\n\nCommand 5 evaluates the internal shell command `b()`, which is an abbreviation\nof \"bindings\". This prints the current shell variables and their bindings. `ok`\nat the end is the return value of function `b()`.\n\n```erlang\n6> f(L).\nok\n```\n\nCommand 6 evaluates the internal shell command `f(L)` (abbreviation of\n\"forget\"). The value of variable `L` is removed.\n\n```erlang\n7> b().\nDescriptor = {4,abcd}\nStr = \"abcd\"\nok\n```\n\nCommand 7 prints the new bindings.\n\n```erlang\n8> f(L).\nok\n```\n\nCommand 8 has no effect, as `L` has no value.\n\n```erlang\n9> {L, _} = Descriptor.\n{4,abcd}\n```\n\nCommand 9 performs a pattern matching operation on `Descriptor`, binding a new\nvalue to `L`.\n\n```erlang\n10> L.\n4\n```\n\nCommand 10 prints the current value of `L`.\n\n```erlang\n11> {P, Q, R} = Descriptor.\n** exception error: no match of right hand side value {4,abcd}\n```\n\nCommand 11 tries to match `{P, Q, R}` against `Descriptor`, which is `{4, abc}`.\nThe match fails and none of the new variables become bound. The printout\nstarting with \"`** exception error:`\" is not the value of the expression (the\nexpression had no value because its evaluation failed), but a warning printed by\nthe system to inform the user that an error has occurred. The values of the\nother variables (`L`, `Str`, and so on) are unchanged.\n\n```erlang\n12> P.\n* 1:1: variable 'P' is unbound\n13> Descriptor.\n{4,abcd}\n```\n\nCommands 12 and 13 show that `P` is unbound because the previous command failed,\nand that `Descriptor` has not changed.\n\n```erlang\n14>{P, Q} = Descriptor.\n{4,abcd}\n15> P.\n4\n```\n\nCommands 14 and 15 show a correct match where `P` and `Q` are bound.\n\n```erlang\n16> f().\nok\n```\n\nCommand 16 clears all bindings.\n\nThe next few commands assume that `test1:demo(X)` is defined as follows:\n\n```erlang\ndemo(X) ->\n    put(aa, worked),\n    X = 1,\n    X + 10.\n```\n\n```erlang\n17> put(aa, hello).\nundefined\n18> get(aa).\nhello\n```\n\nCommands 17 and 18 set and inspect the value of item `aa` in the process\ndictionary.\n\n```erlang\n19> Y = test1:demo(1).\n11\n```\n\nCommand 19 evaluates `test1:demo(1)`. The evaluation succeeds and the changes\nmade in the process dictionary become visible to the shell. The new value of\ndictionary item `aa` can be seen in command 20.\n\n```erlang\n20> get().\n[{aa,worked}]\n21> put(aa, hello).\nworked\n22> Z = test1:demo(2).\n** exception error: no match of right hand side value 1\n     in function  test1:demo/1\n```\n\nCommands 21 and 22 change the value of dictionary item `aa` to `hello` and call\n`test1:demo(2)`. Evaluation fails and the changes made to the dictionary in\n`test1:demo(2)`, before the error occurred, are discarded.\n\n```erlang\n23> Z.\n* 1:1: variable 'Z' is unbound\n24> get(aa).\nhello\n```\n\nCommands 23 and 24 show that `Z` was not bound and that dictionary item `aa` has\nretained its original value.\n\n```erlang\n25> erase(), put(aa, hello).\nundefined\n26> spawn(test1, demo, [1]).\n<0.57.0>\n27> get(aa).\nhello\n```\n\nCommands 25, 26, and 27 show the effect of evaluating `test1:demo(1)` in the\nbackground. In this case, the expression is evaluated in a newly spawned\nprocess. Any changes made in the process dictionary are local to the newly\nspawned process and therefore not visible to the shell.\n\n```erlang\n28> io:format(\"hello hello\\n\").\nhello hello\nok\n29> e(28).\nhello hello\nok\n30> v(28).\nok\n```\n\nCommands 28, 29 and 30 use the history facilities of the shell. Command 29\nre-evaluates command 28. Command 30 uses the value (result) of command 28. In\nthe cases of a pure function (a function with no side effects), the result is\nthe same. For a function with side effects, the result can be different.\n\nThe next few commands show some record manipulation. It is assumed that `ex.erl`\ndefines a record as follows:\n\n`-record(rec, {a, b = val()}).`\n\n`val() ->`  \n    `3.`\n\n```erlang\n31> c(ex).\n{ok,ex}\n32> rr(ex).\n[rec]\n```\n\nCommands 31 and 32 compile file `ex.erl` and read the record definitions in\n`ex.beam`. If the compiler did not output any record definitions on the BEAM\nfile, `rr(ex)` tries to read record definitions from the source file instead.\n\n```erlang\n33> rl(rec).\n-record(rec,{a,b = val()}).\nok\n```\n\nCommand 33 prints the definition of the record named `rec`.\n\n```erlang\n34> #rec{}.\n** exception error: undefined shell command val/0\n```\n\nCommand 34 tries to create a `rec` record, but fails as function `val/0` is\nundefined.\n\n```erlang\n35> #rec{b = 3}.\n#rec{a = undefined,b = 3}\n```\n\nCommand 35 shows the workaround: explicitly assign values to record fields that\ncannot otherwise be initialized.\n\n```erlang\n36> rp(v(-1)).\n#rec{a = undefined,b = 3}\nok\n```\n\nCommand 36 prints the newly created record using record definitions maintained\nby the shell.\n\n```erlang\n37> rd(rec, {f = orddict:new()}).\nrec\n```\n\nCommand 37 defines a record directly in the shell. The definition replaces the\none read from file `ex.beam`.\n\n```erlang\n38> #rec{}.\n#rec{f = []}\nok\n```\n\nCommand 38 creates a record using the new definition, and prints the result.\n\n```erlang\n39> rd(rec, {c}), A.\n* 1:15: variable 'A' is unbound\n40> #rec{}.\n#rec{c = undefined}\nok\n```\n\nCommand 39 and 40 show that record definitions are updated as side effects. The\nevaluation of the command fails, but the definition of `rec` has been carried\nout.\n\nFor the next command, it is assumed that `test1:loop(N)` is defined as follows:\n\n`loop(N) ->`  \n    `io:format(\"Hello Number: ~w~n\", [N]),`  \n    `loop(N+1).`\n\n```text\n41> test1:loop(0).\nHello Number: 0\nHello Number: 1\nHello Number: 2\nHello Number: 3\n\nUser switch command\n --> i\n --> c\n.\n.\n.\nHello Number: 3374\nHello Number: 3375\nHello Number: 3376\nHello Number: 3377\nHello Number: 3378\n** exception exit: killed\n```\n\nCommand 41 evaluates `test1:loop(0)`, which puts the system into an infinite\nloop. At this point the user types `^G` (Control G), which suspends output from\nthe current process, which is stuck in a loop, and activates `JCL` mode. In\n`JCL` mode the user can start and stop jobs.\n\nIn this particular case, command `i` (\"interrupt\") terminates the looping\nprogram, and command `c` connects to the shell again. As the process was running\nin the background before we killed it, more printouts occur before message\n\"`** exception exit: killed`\" is shown.\n\n```erlang\n42> E = ets:new(t, []).\n#Ref<0.1662103692.2407923716.214192>\n```\n\nCommand 42 creates an ETS table.\n\n```erlang\n43> ets:insert({d,1,2}).\n** exception error: undefined function ets:insert/1\n```\n\nCommand 43 tries to insert a tuple into the ETS table, but the first argument\n(the table) is missing. The exception kills the evaluator process.\n\n```erlang\n44> ets:insert(E, {d,1,2}).\n** exception error: argument is of wrong type\n     in function  ets:insert/2\n        called as ets:insert(16,{d,1,2})\n```\n\nCommand 44 corrects the mistake, but the ETS table has been destroyed as it was\nowned by the killed evaluator process.\n\n```erlang\n45> f(E).\nok\n46> catch_exception(true).\nfalse\n```\n\nCommand 46 sets the exception handling of the evaluator process to `true`. The\nexception handling can also be set when starting Erlang by\n`erl -stdlib shell_catch_exception true`.\n\n```erlang\n47> E = ets:new(t, []).\n#Ref<0.1662103692.2407923716.214197>\n48> ets:insert({d,1,2}).\n* exception error: undefined function ets:insert/1\n```\n\nCommand 48 makes the same mistake as in command 43, but this time the evaluator\nprocess lives on. The single star at the beginning of the printout signals that\nthe exception has been caught.\n\n```erlang\n49> ets:insert(E, {d,1,2}).\ntrue\n```\n\nCommand 49 successfully inserts the tuple into the ETS table.\n\n```erlang\n50> ets:insert(#Ref<0.1662103692.2407923716.214197>, {e,3,4}).\ntrue\n```\n\nCommand 50 inserts another tuple into the ETS table. This time the first\nargument is the table identifier itself. The shell can parse commands with pids\n(`<0.60.0>`), ports (`#Port<0.536>`), references\n(`#Ref<0.1662103692.2407792644.214210>`), and external functions\n(`#Fun `), but the command fails unless the corresponding pid, port,\nreference, or function can be created in the running system.\n\n```erlang\n51> halt().\nstrider 2>\n```\n\nCommand 51 exits the Erlang runtime system.","ref":"shell.html#module-example"},{"type":"module","title":"JCL Mode - shell","doc":"When the shell starts, it starts a single evaluator process. This process,\ntogether with any local processes that it spawns, is referred to as a `job`.\nOnly the current job, which is said to be `connected`, can perform operations\nwith standard I/O. All other jobs, which are said to be `detached`, are\n`blocked` if they attempt to use standard I/O.\n\nAll jobs that do not use standard I/O run in the normal way.\n\nThe shell escape key `^G` (Control G) detaches the current job and activates\n`JCL` mode. The `JCL` mode prompt is `\"-->\"`. If `\"?\"` is entered at the prompt,\nthe following help message is displayed:\n\n```text\n--> ?\nc [nn]            - connect to job\ni [nn]            - interrupt job\nk [nn]            - kill job\nj                 - list all jobs\ns [shell]         - start local shell\nr [node [shell]]  - start remote shell\nq                 - quit erlang\n? | h             - this message\n```\n\nThe `JCL` commands have the following meaning:\n\n- **`c [nn]`** - Connects to job number ` ` or the current job. The standard\n  shell is resumed. Operations that use standard I/O by the current job are\n  interleaved with user inputs to the shell.\n\n- **`i [nn]`** - Stops the current evaluator process for job number `nn` or the\n  current job, but does not kill the shell process. So, any variable bindings\n  and the process dictionary are preserved and the job can be connected again.\n  This command can be used to interrupt an endless loop.\n\n- **`k [nn]`** - Kills job number `nn` or the current job. All spawned processes\n  in the job are killed, provided they have not evaluated the `group_leader/1`\n  BIF and are located on the local machine. Processes spawned on remote nodes\n  are not killed.\n\n- **`j`** - Lists all jobs. A list of all known jobs is printed. The current job\n  name is prefixed with '\\*'.\n\n- **`s`** - Starts a new job. This is assigned the new index `[nn]`, which can\n  be used in references.\n\n- **`s [shell]`** - Starts a new job. This is assigned the new index `[nn]`,\n  which can be used in references. If optional argument `shell` is specified, it\n  is assumed to be a module that implements an alternative shell.\n\n- **`r [node]`** - Starts a remote job on `node`. This is used in distributed\n  Erlang to allow a shell running on one node to control a number of\n  applications running on a network of nodes. If optional argument `shell` is\n  specified, it is assumed to be a module that implements an alternative shell.\n\n- **`q`** - Quits Erlang. Notice that this option is disabled if Erlang is\n  started with the ignore break, `+Bi`, system flag (which can be useful, for\n  example when running a restricted shell, see the next section).\n\n- **`?`** - Displays the help message above.\n\nThe behavior of shell escape can be changed by the STDLIB application variable\n`shell_esc`. The value of the variable can be either `jcl`\n(`erl -stdlib shell_esc jcl`) or `abort` (`erl -stdlib shell_esc abort`). The\nfirst option sets `^G` to activate `JCL` mode (which is also default behavior).\nThe latter sets `^G` to terminate the current shell and start a new one. `JCL`\nmode cannot be invoked when `shell_esc` is set to `abort`.\n\nIf you want an Erlang node to have a remote job active from the start (rather\nthan the default local job), start Erlang with flag\n[`-remsh`](`e:erts:erl_cmd.md#remsh`), for example,\n`erl -remsh other_node@other_host`","ref":"shell.html#module-jcl-mode"},{"type":"module","title":"Restricted Shell - shell","doc":"The shell can be started in a restricted mode. In this mode, the shell evaluates\na function call only if allowed. This feature makes it possible to, for example,\nprevent a user from accidentally calling a function from the prompt that could\nharm a running system (useful in combination with system flag `+Bi`).\n\nWhen the restricted shell evaluates an expression and encounters a function call\nor an operator application, it calls a callback function (with information about\nthe function call in question). This callback function returns `true` to let the\nshell go ahead with the evaluation, or `false` to abort it. There are two\npossible callback functions for the user to implement:\n\n- `local_allowed(Func, ArgList, State) -> {boolean(),NewState}`\n\n  This is used to determine if the call to the local function `Func` with\n  arguments `ArgList` is to be allowed.\n\n- `non_local_allowed(FuncSpec, ArgList, State) -> {boolean(),NewState} | {{redirect,NewFuncSpec,NewArgList},NewState}`\n\n  This is used to determine if the call to non-local function `FuncSpec`\n  (`{Module,Func}` or a fun) with arguments `ArgList` is to be allowed. The\n  return value `{redirect,NewFuncSpec,NewArgList}` can be used to let the shell\n  evaluate some other function than the one specified by `FuncSpec` and\n  `ArgList`.\n\nThese callback functions are called from local and non-local evaluation function\nhandlers, described in the `m:erl_eval` manual page. (Arguments in `ArgList` are\nevaluated before the callback functions are called.)\n\nFrom OTP 25.0, if there are errors evaluating Erlang constructs, such as\n`badmatch` during pattern matching or `bad_generator` in a comprehension, the\nevaluator will dispatch to `erlang:raise(error, Reason, Stacktrace)`. This call\nwill be checked against the `non_local_allowed/3` callback function. You can\neither forbid it, allow it, or redirect to another call of your choice.\n\nArgument `State` is a tuple `{ShellState,ExprState}`. The return value\n`NewState` has the same form. This can be used to carry a state between calls to\nthe callback functions. Data saved in `ShellState` lives through an entire shell\nsession. Data saved in `ExprState` lives only through the evaluation of the\ncurrent expression.\n\nThere are two ways to start a restricted shell session:\n\n- Use STDLIB application variable `restricted_shell` and specify, as its value,\n  the name of the callback module. Example (with callback functions implemented\n  in `callback_mod.erl`): `$ erl -stdlib restricted_shell callback_mod`.\n- From a normal shell session, call function `start_restricted/1`. This exits\n  the current evaluator and starts a new one in restricted mode.\n\n_Notes:_\n\n- When restricted shell mode is activated or deactivated, new jobs started on\n  the node run in restricted or normal mode, respectively.\n- If restricted mode has been enabled on a particular node, remote shells\n  connecting to this node also run in restricted mode.\n- The callback functions cannot be used to allow or disallow execution of\n  functions called from compiled code (only functions called from expressions\n  entered at the shell prompt).\n\nErrors when loading the callback module is handled in different ways depending\non how the restricted shell is activated:\n\n- If the restricted shell is activated by setting the STDLIB variable during\n  emulator startup, and the callback module cannot be loaded, a default\n  restricted shell allowing only the commands `q()` and `init:stop()` is used as\n  fallback.\n- If the restricted shell is activated using `start_restricted/1` and the\n  callback module cannot be loaded, an error report is sent to the error logger\n  and the call returns `{error,Reason}`.","ref":"shell.html#module-restricted-shell"},{"type":"module","title":"Prompting - shell","doc":"The default shell prompt function displays the name of the node (if the node can\nbe part of a distributed system) and the current command number. The user can\ncustomize the prompt function by calling `prompt_func/1` or by setting\napplication configuration parameter `shell_prompt_func` for the STDLIB\napplication. Similarly the multiline prompt can be configured as well, by\ncalling `multiline_prompt_func/1` or by setting the application parameter\n`shell_multiline_prompt` for the STDLIB application.\n\nA customized prompt function is stated as a tuple `{Mod, Func}`. The function is\ncalled as `Mod:Func(L)`, where `L` is a list of key-value pairs created by the\nshell. Currently there is only one pair: `{history, N}`, where `N` is the\ncurrent command number. The function is to return a list of characters or an\natom. This constraint is because of the Erlang I/O protocol. Unicode characters\nbeyond code point 255 are allowed in the list and the atom. Notice that in\nrestricted mode the call `Mod:Func(L)` must be allowed or the default shell\nprompt function is called.","ref":"shell.html#module-prompting"},{"type":"function","title":"shell.catch_exception/1","doc":"Sets the exception handling of the evaluator process. The previous exception\nhandling is returned. The default (`false`) is to kill the evaluator process\nwhen an exception occurs, which causes the shell to create a new evaluator\nprocess. When the exception handling is set to `true`, the evaluator process\nlives on, which means that, for example, ports and ETS tables as well as\nprocesses linked to the evaluator process survive the exception.","ref":"shell.html#catch_exception/1"},{"type":"function","title":"shell.default_multiline_prompt/1","doc":"Configures the multiline prompt as two trailing dots. This is the default\nfunction but it may also be set explicitly as\n`-stdlib shell_multiline_prompt {shell, default_multiline_prompt}`.","ref":"shell.html#default_multiline_prompt/1"},{"type":"function","title":"shell.erl_pp_format_func/1","doc":"A formatting function that can be set with `format_shell_func/1` that will make\nexpressions submitted to the shell prettier.\n\n> #### Note {: .info }\n>\n> This formatting function filter comments away from the expressions.","ref":"shell.html#erl_pp_format_func/1"},{"type":"function","title":"shell.format_shell_func/1","doc":"Can be used to set the formatting of the Erlang shell output.\n\nThis has an effect on commands that have been submitted, and how it is saved in history.\nOr if the formatting hotkey is pressed while editing an expression (Alt-r by default). You\ncan specify a `Mod:Func/1` that expects the whole expression as a string and\nreturns a formatted expressions as a string. See\n[`stdlib app config`](stdlib_app.md#format_shell_func) for how to set it before\nshell started.\n\nIf instead a string is provided, it will be used as a shell command. Your\ncommand must include `${file}` somewhere in the string, for the shell to know\nwhere the file goes in the command.\n\n```erlang\nshell:format_shell_func(\"\\\"emacs -batch \\${file} -l ~/erlang-format/emacs-format-file -f emacs-format-function\\\"\").\n```\n\n```erlang\nshell:format_shell_func({shell, erl_pp_format_func}).\n```","ref":"shell.html#format_shell_func/1"},{"type":"function","title":"shell.history/1","doc":"Sets the number of previous commands to keep in the history list to `N`. The\nprevious number is returned. Defaults to 20.","ref":"shell.html#history/1"},{"type":"function","title":"shell.inverted_space_prompt/1","doc":"Configures the multiline prompt as inverted space. It may be set explicitly as\n`-stdlib shell_multiline_prompt {shell, inverted_space_prompt}` or calling\n`multiline_prompt_func({shell, inverted_space_prompt}).`","ref":"shell.html#inverted_space_prompt/1"},{"type":"function","title":"shell.multiline_prompt_func/1","doc":"Sets the shell multiline prompt function to `PromptFunc`. The previous prompt\nfunction is returned.","ref":"shell.html#multiline_prompt_func/1"},{"type":"function","title":"shell.prompt_func/1","doc":"Sets the shell prompt function to `PromptFunc`. The previous prompt function is\nreturned.","ref":"shell.html#prompt_func/1"},{"type":"function","title":"shell.prompt_width/1","doc":"Equivalent to `prompt_width/2` with `Encoding` set to the encoding used by\n`t:io:user/0`.","ref":"shell.html#prompt_width/1"},{"type":"function","title":"shell.prompt_width/2","doc":"It receives a prompt and computes its width, considering its Unicode characters\nand ANSI escapes.\n\nUseful for creating custom multiline prompts.\n\nExample:\n\n```erlang\n1> shell:prompt_width(\"olá> \", unicode).\n5\n%% \"olá> \" is printed as \"ol\\341> \" on a latin1 systems\n2> shell:prompt_width(\"olá> \", latin1).\n8\n%% Ansi escapes are ignored\n3> shell:prompt_width(\"\\e[32molá\\e[0m> \", unicode).\n5\n%% Double width characters count as 2\n4> shell:prompt_width(\"😀> \", unicode).\n4\n%% \"😀> \" is printed as \"\\x{1F600}> \" on latin1 systems\n5> shell:prompt_width(\"😀> \", latin1).\n11\n```","ref":"shell.html#prompt_width/2"},{"type":"function","title":"shell.results/1","doc":"Sets the number of results from previous commands to keep in the history list to\n`N`. The previous number is returned. Defaults to 20.","ref":"shell.html#results/1"},{"type":"function","title":"shell.start_interactive/0","doc":"Starts the interactive shell if it has not already been started. It can be used\nto programatically start the shell from an escript or when erl is started with\nthe -noinput or -noshell flags.","ref":"shell.html#start_interactive/0"},{"type":"function","title":"shell.start_interactive/1","doc":"Starts the interactive shell if it has not already been started. It can be used\nto programatically start the shell from an [`escript`](`e:erts:escript_cmd.md`)\nor when [`erl`](`e:erts:erl_cmd.md`) is started with the\n[`-noinput`](`e:erts:erl_cmd.md#noinput`) or\n[`-noshell`](`e:erts:erl_cmd.md#noshell`) flags. The following options are\nallowed:\n\n- **noshell** - Starts the interactive shell as if\n  [`-noshell`](`e:erts:erl_cmd.md#noshell`) was given to\n  [`erl`](`e:erts:erl_cmd.md`). This is only useful when erl is started with\n  [`-noinput`](`e:erts:erl_cmd.md#noinput`) and the system want to read input\n  data.\n\n- **[mfa()](`t:erlang:mfa/0`)** - Starts the interactive shell using\n  [`mfa()`](`t:erlang:mfa/0`) as the default shell.\n\n- **\\{[node()](`t:erlang:node/0`), [mfa()](`t:erlang:mfa/0`)\\}** - Starts the\n  interactive shell using [`mfa()`](`t:erlang:mfa/0`) on\n  [`node()`](`t:erlang:node/0`) as the default shell.\n\n- **\\{remote, [`string()`](`t:erlang:string/0`)\\}** - Starts the interactive\n  shell using as if [`-remsh`](`e:erts:erl_cmd.md#remsh`) was given to\n  [`erl`](`e:erts:erl_cmd.md`).\n\n- **\\{remote, [`string()`](`t:erlang:string/0`),\n  [`mfa()`](`t:erlang:mfa/0`)\\}** - Starts the interactive shell using as if\n  [`-remsh`](`e:erts:erl_cmd.md#remsh`) was given to\n  [`erl`](`e:erts:erl_cmd.md`) but with an alternative shell implementation.\n\nOn error this function will return:\n\n- **already_started** - if an interactive shell is already started.\n\n- **noconnection** - if a remote shell was requested but it could not be\n  connected to.\n\n- **badfile | nofile | on_load_failure** - if a remote shell was requested with\n  a custom [mfa()](`t:erlang:mfa/0`), but the module could not be loaded. See\n  [Error Reasons for Code-Loading Functions](`m:code#error_reasons`) for a\n  description of the error reasons.","ref":"shell.html#start_interactive/1"},{"type":"function","title":"shell.start_restricted/1","doc":"Exits a normal shell and starts a restricted shell. `Module` specifies the\ncallback module for the functions `local_allowed/3` and `non_local_allowed/3`.\nThe function is meant to be called from the shell.\n\nIf the callback module cannot be loaded, an error tuple is returned. The\n`Reason` in the error tuple is the one returned by the code loader when trying\nto load the code of the callback module.","ref":"shell.html#start_restricted/1"},{"type":"function","title":"shell.stop_restricted/0","doc":"Exits a restricted shell and starts a normal shell. The function is meant to be\ncalled from the shell.","ref":"shell.html#stop_restricted/0"},{"type":"function","title":"shell.strings/1","doc":"Sets pretty printing of lists to `Strings`. The previous value of the flag is\nreturned.\n\nThe flag can also be set by the STDLIB application variable `shell_strings`.\nDefaults to `true`, which means that lists of integers are printed using the\nstring syntax, when possible. Value `false` means that no lists are printed\nusing the string syntax.","ref":"shell.html#strings/1"},{"type":"function","title":"shell.whereis/0","doc":"Returns the current shell process on the node where the calling process'\ngroup_leader is located. If that node has no shell this function will return\nundefined.","ref":"shell.html#whereis/0"},{"type":"module","title":"shell_default","doc":"Customizing the Erlang environment.\n\nThe functions in this module are called when no module name is specified in a\nshell command.\n\nConsider the following shell dialog:\n\n```erlang\n1> lists:reverse(\"abc\").\n\"cba\"\n2> c(foo).\n{ok, foo}\n```\n\nIn command one, module `m:lists` is called. In command two, no module name is\nspecified. The shell searches module `user_default` followed by module\n`shell_default` for function `c/1`.\n\n`shell_default` is intended for \"system wide\" customizations to the shell.\n`user_default` is intended for \"local\" or individual user customizations.","ref":"shell_default.html"},{"type":"module","title":"Hint - shell_default","doc":"To add your own commands to the shell, create a module called `user_default` and\nadd the commands you want. Then add the following line as the _first_ line in\nyour `.erlang` file in your home directory.\n\n```text\ncode:load_abs(\"$PATH/user_default\").\n```\n\n`$PATH` is the directory where your `user_default` module can be found.","ref":"shell_default.html#module-hint"},{"type":"function","title":"shell_default.help/0","doc":"Print the help for all shell internal commands.","ref":"shell_default.html#help/0"},{"type":"module","title":"shell_docs","doc":"Functions used to render [EEP-48](`e:kernel:eep48_chapter.md`) style documentation for a shell.\n\nThis module can be used to render function and type documentation to be printed\nin a shell. This is the module that is used to render the documentation accessed through\nthe shell through [`c:h/1,2,3`](`\\\\c:h/1`). Example:\n\n```txt\n1> h(maps,new,0).\n\n  -spec new() -> Map when Map :: #{}.\n\nSince:\n  OTP 17.0\n\n  Returns a new empty map.\n\n  Example:\n\n    > maps:new().\n    #{}\n```\n\nThis module formats and renders EEP-48 documentation of the format\n`application/erlang+html`. For more information about this format see\n[Documentation Storage](`e:edoc:doc_storage.md`) in EDoc's User's\nGuide. It can also render any other format of \"text\" type, although those will\nbe rendered as is.","ref":"shell_docs.html"},{"type":"type","title":"shell_docs.chunk_element/0","doc":"","ref":"shell_docs.html#t:chunk_element/0"},{"type":"type","title":"shell_docs.chunk_element_attr/0","doc":"","ref":"shell_docs.html#t:chunk_element_attr/0"},{"type":"type","title":"shell_docs.chunk_element_attrs/0","doc":"","ref":"shell_docs.html#t:chunk_element_attrs/0"},{"type":"type","title":"shell_docs.chunk_element_block_type/0","doc":"","ref":"shell_docs.html#t:chunk_element_block_type/0"},{"type":"type","title":"shell_docs.chunk_element_inline_type/0","doc":"","ref":"shell_docs.html#t:chunk_element_inline_type/0"},{"type":"type","title":"shell_docs.chunk_element_type/0","doc":"The HTML tags allowed in `application/erlang+html`.","ref":"shell_docs.html#t:chunk_element_type/0"},{"type":"type","title":"shell_docs.chunk_elements/0","doc":"","ref":"shell_docs.html#t:chunk_elements/0"},{"type":"type","title":"shell_docs.config/0","doc":"The configuration of how the documentation should be rendered.\n\n- **encoding** - Configure the encoding that should be used by the renderer for\n  graphical details such as bullet-points. By default `shell_docs` uses the\n  value returned by [`io:getopts()`](`io:getopts/0`).\n\n- **ansi** - Configure whether\n  [ansi escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code) should be\n  used to render graphical details such as bold and underscore. By default\n  `shell_docs` will try to determine if the receiving shell supports ansi escape\n  codes. It is possible to override the automated check by setting the kernel\n  configuration parameter `shell_docs_ansi` to a `t:boolean/0` value.\n\n- **columns** - Configure how wide the target documentation should be rendered.\n  By default `shell_docs` used the value returned by\n  [`io:columns()`](`io:columns/0`).","ref":"shell_docs.html#t:config/0"},{"type":"type","title":"shell_docs.docs_v1/0","doc":"The record holding EEP-48 documentation for a module. You can use\n`code:get_doc/1` to fetch this information from a module.","ref":"shell_docs.html#t:docs_v1/0"},{"type":"function","title":"shell_docs.normalize/1","doc":"This function can be used to do whitespace normalization of\n`application/erlang+html` documentation.","ref":"shell_docs.html#normalize/1"},{"type":"function","title":"shell_docs.render/2","doc":"","ref":"shell_docs.html#render/2"},{"type":"function","title":"shell_docs.render/3","doc":"Render module or function documentation.\n\nRenders the module documentation if called as `render(Module, Docs, Config)`.\n\nEquivalent to [`render(Module, Function, Docs, #{})`](`render/4`) if called\nas `render(Module, Function, Docs)`.","ref":"shell_docs.html#render/3"},{"type":"function","title":"shell_docs.render/4","doc":"Render function documentation.\n\nRenders the function documentation if called as `render(Module, Function, Docs, Config)`.\n\nEquivalent to [`render(Module, Function, Arity, Docs, #{})`](`render/4`) if called\nas `render(Module, Function, Arity, Docs)`.","ref":"shell_docs.html#render/4"},{"type":"function","title":"shell_docs.render/5","doc":"Render the documentation for a function.","ref":"shell_docs.html#render/5"},{"type":"function","title":"shell_docs.render_callback/2","doc":"","ref":"shell_docs.html#render_callback/2"},{"type":"function","title":"shell_docs.render_callback/3","doc":"Render all callbacks in a module or callback documentation.\n\nRenders a list with all callbacks if called as `render_callback(Module, Docs, Config)`.\n\nEquivalent to [`render_callback(Module, Callback, Docs, #{})`](`render_callback/4`) if called\nas `render_callback(Module, Callback, Docs)`.","ref":"shell_docs.html#render_callback/3"},{"type":"function","title":"shell_docs.render_callback/4","doc":"Render callback documentation.\n\nRenders the callback documentation if called as `render_callback(Module, Callback, Docs, Config)`.\n\nEquivalent to [`render_callback(Module, Callback, Arity, Docs, #{})`](`render_callback/4`) if called\nas `render_callback(Module, Callback, Arity, Docs)`.","ref":"shell_docs.html#render_callback/4"},{"type":"function","title":"shell_docs.render_callback/5","doc":"Render the documentation of a callback in a module.","ref":"shell_docs.html#render_callback/5"},{"type":"function","title":"shell_docs.render_type/2","doc":"","ref":"shell_docs.html#render_type/2"},{"type":"function","title":"shell_docs.render_type/3","doc":"Render all types in a module or type documentation.\n\nRenders a list with all types if called as `render_type(Module, Docs, Config)`.\n\nEquivalent to [`render_type(Module, Type, Docs, #{})`](`render_type/4`) if called\nas `render_type(Module, Type, Docs)`.","ref":"shell_docs.html#render_type/3"},{"type":"function","title":"shell_docs.render_type/4","doc":"Render type documentation.\n\nRenders the type documentation if called as `render_type(Module, Type, Docs, Config)`.\n\nEquivalent to [`render_type(Module, Type, Arity, Docs, #{})`](`render_type/4`) if called\nas `render_type(Module, Type, Arity, Docs)`.","ref":"shell_docs.html#render_type/4"},{"type":"function","title":"shell_docs.render_type/5","doc":"Render the documentation of a type in a module.","ref":"shell_docs.html#render_type/5"},{"type":"function","title":"shell_docs.supported_tags/0","doc":"This function can be used to find out which tags are supported by\n`application/erlang+html` documentation.","ref":"shell_docs.html#supported_tags/0"},{"type":"function","title":"shell_docs.validate/1","doc":"This function can be used to do a basic validation of the doc content of\n`application/erlang+html` format.","ref":"shell_docs.html#validate/1"},{"type":"module","title":"base64","doc":"Provides base64 encode and decode, see\n[RFC 2045](https://www.ietf.org/rfc/rfc2045.txt).","ref":"base64.html"},{"type":"type","title":"base64.base64_alphabet/0","doc":"Base 64 Encoding alphabet, see\n[RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648).","ref":"base64.html#t:base64_alphabet/0"},{"type":"type","title":"base64.base64_binary/0","doc":"Base 64 encoded binary.","ref":"base64.html#t:base64_binary/0"},{"type":"type","title":"base64.base64_mode/0","doc":"Selector for the Base 64 Encoding alphabet used for [encoding](`encode/2`) and\n[decoding](`decode/2`). See\n[RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648) Sections\n[4](https://datatracker.ietf.org/doc/html/rfc4648#section-4) and\n[5](https://datatracker.ietf.org/doc/html/rfc4648#section-5).","ref":"base64.html#t:base64_mode/0"},{"type":"type","title":"base64.base64_string/0","doc":"Base 64 encoded string.","ref":"base64.html#t:base64_string/0"},{"type":"type","title":"base64.byte_string/0","doc":"Arbitrary sequences of octets.","ref":"base64.html#t:byte_string/0"},{"type":"function","title":"base64.decode/1","doc":"","ref":"base64.html#decode/1"},{"type":"function","title":"base64.decode/2","doc":"Decodes a base64 string encoded using the standard alphabet according to\n[RFC 4648 Section 4](https://datatracker.ietf.org/doc/html/rfc4648#section-4) to\nplain ASCII.\n\nThe function will strips away any whitespace characters and check for the\nthe correct number of `=` padding characters at the end of the encoded string.\n\nSee `t:decode_options/0` for details on which options can be passed.\n\n_Example_:\n```erlang\n1> base64:decode(\"AQIDBA==\").\n<<1,2,3,4>>\n2> base64:decode(\"AQ ID BA==\").\n<<1,2,3,4>>\n3> base64:decode(\"AQIDBA=\").\n** exception error: missing_padding\n     in function  base64:decode_list/7 (base64.erl, line 734)\n        *** data to decode is missing final = padding characters, if this is intended, use the `padding => false` option\n4> base64:decode(\"AQIDBA=\", #{ padding => false }).\n<<1,2,3,4>>\n```","ref":"base64.html#decode/2"},{"type":"type","title":"base64.decode_options/0","doc":"Customizes the behaviour of the decode functions.\n\nDefault value if omitted entirely or partially is `#{mode => standard, padding => true}`.\n\nThe `mode` option can be one of the following:\n\n- **`standard`** - Default. Decode the given string using the standard base64\n  alphabet according to\n  [RFC 4648 Section 4](https://datatracker.ietf.org/doc/html/rfc4648#section-4),\n  that is `\"+\"` and `\"/\"` are representing bytes `62` and `63` respectively,\n  while `\"-\"` and `\"_\"` are illegal characters.\n\n- **`urlsafe`** - Decode the given string using the alternative \"URL and\n  Filename safe\" base64 alphabet according to\n  [RFC 4648 Section 5](https://datatracker.ietf.org/doc/html/rfc4648#section-5),\n  that is `\"-\"` and `\"_\"` are representing bytes `62` and `63` respectively,\n  while `\"+\"` and `\"/\"` are illegal characters.\n\nThe `padding` option can be one of the following:\n\n- **`true`** - Default. Checks the correct number of `=` padding characters at\n  the end of the encoded string.\n\n- **`false`** - Accepts an encoded string with missing `=` padding characters at\n  the end.","ref":"base64.html#t:decode_options/0"},{"type":"function","title":"base64.decode_to_string/1","doc":"Equivalent to [`decode(Base64)`](`decode/1`), but returns a `t:byte_string/0`.","ref":"base64.html#decode_to_string/1"},{"type":"function","title":"base64.decode_to_string/2","doc":"Equivalent to [`decode(Base64, Options)`](`decode/2`), but returns a `t:byte_string/0`.","ref":"base64.html#decode_to_string/2"},{"type":"function","title":"base64.encode/1","doc":"","ref":"base64.html#encode/1"},{"type":"function","title":"base64.encode/2","doc":"Encodes a plain ASCII string into base64 using the alphabet indicated by the\n`mode` option. The result is 33% larger than the data.\n\nSee `t:encode_options/0` for details on which options can be passed.","ref":"base64.html#encode/2"},{"type":"type","title":"base64.encode_options/0","doc":"Customizes the behaviour of the decode functions.\n\nDefault value if omitted entirely or partially is `#{mode => standard, padding => true}`.\n\nThe `mode` option can be one of the following:\n\n- **`standard`** - Default. Encode the given string using the standard base64\n  alphabet according to\n  [RFC 4648 Section 4](https://datatracker.ietf.org/doc/html/rfc4648#section-4).\n\n- **`urlsafe`** - Encode the given string using the alternative \"URL and\n  Filename safe\" base64 alphabet according to\n  [RFC 4648 Section 5](https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n\nThe `padding` option can be one of the following:\n\n- **`true`** - Default. Appends correct number of `=` padding characters to the\n  encoded string.\n\n- **`false`** - Skips appending `=` padding characters to the encoded string.","ref":"base64.html#t:encode_options/0"},{"type":"function","title":"base64.encode_to_string/1","doc":"Equivalent to [`encode(Data)`](`encode/1`), but returns a `t:byte_string/0`.","ref":"base64.html#encode_to_string/1"},{"type":"function","title":"base64.encode_to_string/2","doc":"Equivalent to [`encode(Data, Options)`](`encode/2`), but returns a `t:byte_string/0`.","ref":"base64.html#encode_to_string/2"},{"type":"function","title":"base64.mime_decode/1","doc":"","ref":"base64.html#mime_decode/1"},{"type":"function","title":"base64.mime_decode/2","doc":"Decodes a base64 \"mime\" string encoded using the standard alphabet according to\n[RFC 4648 Section 4](https://datatracker.ietf.org/doc/html/rfc4648#section-4) to\nplain ASCII.\n\nThe function will strips away any illegal characters. It does *not* check for the\nthe correct number of `=` padding characters at the end of the encoded string.\n\nSee `t:decode_options/0` for details on which options can be passed.\n\n_Example_:\n```erlang\n1> base64:mime_decode(\"AQIDBA==\").\n<<1,2,3,4>>\n2> base64:mime_decode(\"AQIDB=A=\").\n<<1,2,3,4>>\n```","ref":"base64.html#mime_decode/2"},{"type":"function","title":"base64.mime_decode_to_string/1","doc":"Equivalent to [`mime_decode(Base64)`](`mime_decode/1`),\nbut returns a `t:byte_string/0`.","ref":"base64.html#mime_decode_to_string/1"},{"type":"function","title":"base64.mime_decode_to_string/2","doc":"Equivalent to [`mime_decode(Base64, Options)`](`mime_decode/2`),\nbut returns a `t:byte_string/0`.","ref":"base64.html#mime_decode_to_string/2"},{"type":"behaviour","title":"erl_error","doc":"This module provides functions for pretty-printing errors and exceptions. It is\nused by both the `m:shell` and by `m:proc_lib` to print exceptions.\n\nIt is possible for the module raising an error to provide additional information\nby calling [`error/3`](`erlang:error/3`) with extra error information. More\ndetails about this mechanism is described in\n[EEP-54](https://www.erlang.org/erlang-enhancement-proposals/eep-0054.html).","ref":"erl_error.html"},{"type":"behaviour","title":"Callback Functions - erl_error","doc":"The following functions are to be exported from an Error Info handler.","ref":"erl_error.html#module-callback-functions"},{"type":"type","title":"erl_error.column/0","doc":"Start column number. Default is 1.","ref":"erl_error.html#t:column/0"},{"type":"callback","title":"erl_error.format_error/2","doc":"This callback is called when `format_exception/4` or similar functionality wants\nto provide extra information about an error. The `Module`:`Function` called is\nthe one specificed by the `error_info` map.\n\nThe function should return a map with additional information about what have\ncaused the exception. The possible keys of the map are:\n\n- **`ArgumentPosition = pos_integer()`** - The position of the argument that\n  caused the error starting at 1.\n\n- **`general`** - An error that is not associated with any argument caused the\n  error.\n\n- **`reason`** - If the `Reason` should be printed differently than the default\n  way.\n\nIf the text returned includes new-lines, `format_exception/4` will indent the\ntext correctly.\n\nExample:\n\n```erlang\n-module(my_error_module).\n-export([atom_to_string/1, format_error/2]).\n\natom_to_string(Arg) when is_atom(Arg) ->\n  atom_to_list(Arg);\natom_to_string(Arg) ->\n  erlang:error(badarg,[Arg],\n               [{error_info,#{ module => ?MODULE,\n                               cause => #{ 1 => \"should be an atom\" }}}]).\n\nformat_error(Reason, [{_M,_F,_As,Info}|_]) ->\n  ErrorInfo = proplists:get_value(error_info, Info, #{}),\n  ErrorMap = maps:get(cause, ErrorInfo),\n  ErrorMap#{ general => \"optional general information\",\n             reason => io_lib:format(\"~p: ~p\",[?MODULE, Reason]) }.\n```\n\n```erlang\n1> c(my_error_module).\n{ok,my_error_module}\n2> my_error_module:atom_to_string(1).\n** exception error: my_error_module: badarg\n     in function  my_error_module:atom_to_string/1\n        called as my_error_module:atom_to_string(1)\n        *** argument 1: should be an atom\n        *** optional general information\n```","ref":"erl_error.html#c:format_error/2"},{"type":"function","title":"erl_error.format_exception/3","doc":"","ref":"erl_error.html#format_exception/3"},{"type":"function","title":"erl_error.format_exception/4","doc":"Format the error reason and stack back-trace caught using `try` ... `catch` in\nthe same style as the shell formats them.\n\nExample:\n\n```erlang\ntry\n    do_something()\ncatch\n    C:R:Stk ->\n        Message = erl_error:format_exception(C, R, Stk),\n        io:format(LogFile, \"~ts\\n\", [Message])\nend\n```\n\nIf `error_info` is provided with the exception, `format_exception` will use that\ninformation to provide additional information about the exception.\n\nExample:\n\n```erlang\ntry\n  erlang:raise(badarg,[],[{error_info,#{}}])\ncatch\n    C:R:Stk ->\n        Message = erl_error:format_exception(C, R, Stk),\n        io:format(LogFile, \"~ts\\n\", [Message])\nend\n```\n\nSee `erlang:error/3` for details on how to raise an exception with `error_info`\nincluded.","ref":"erl_error.html#format_exception/4"},{"type":"type","title":"erl_error.format_fun/0","doc":"A fun used to format function arguments for BIF and function calls. By default\nthe following fun will be used:\n\n```erlang\nfun(Term, I) -> io_lib:print(Term, I, 80, 30) end\n```","ref":"erl_error.html#t:format_fun/0"},{"type":"type","title":"erl_error.format_options/0","doc":"A map with formatting options.","ref":"erl_error.html#t:format_options/0"},{"type":"type","title":"erl_error.stack_trim_fun/0","doc":"A fun used to trim the end of the stacktrace. It is called with module,\nfunction, and arity from an entry from the stacktrace. The fun is to return\n`true` if the entry should be trimmed, and `false` otherwise. The default value\nis:\n\n```text\nfun(_, _, _) -> false end\n```","ref":"erl_error.html#t:stack_trim_fun/0"},{"type":"module","title":"file_sorter","doc":"File sorter.\n\nThis module contains functions for sorting terms on files, merging already\nsorted files, and checking files for sortedness. Chunks containing binary terms\nare read from a sequence of files, sorted internally in memory and written on\ntemporary files, which are merged producing one sorted file as output. Merging\nis provided as an optimization; it is faster when the files are already sorted,\nbut it always works to sort instead of merge.\n\nOn a file, a term is represented by a header and a binary. Two options define\nthe format of terms on files:\n\n- **`{header, HeaderLength}`** - `HeaderLength` determines the number of bytes\n  preceding each binary and containing the length of the binary in bytes.\n  Defaults to 4. The order of the header bytes is defined as follows: if `B` is\n  a binary containing a header only, size `Size` of the binary is calculated as\n  `< > = B`.\n\n- **`{format, Format}`** - Option `Format` determines the function that is\n  applied to binaries to create the terms to be sorted. Defaults to\n  `binary_term`, which is equivalent to `fun binary_to_term/1`. Value `binary`\n  is equivalent to `fun(X) -> X end`, which means that the binaries are sorted\n  as they are. This is the fastest format. If `Format` is `term`, `io:read/2` is\n  called to read terms. In that case, only the default value of option `header`\n  is allowed.\n\n  Option `format` also determines what is written to the sorted output file: if\n  `Format` is `term`, then `io:format/3` is called to write each term, otherwise\n  the binary prefixed by a header is written. Notice that the binary written is\n  the same binary that was read; the results of applying function `Format` are\n  thrown away when the terms have been sorted. Reading and writing terms using\n  the `io` module is much slower than reading and writing binaries.\n\nOther options are:\n\n- **`{order, Order}`** - The default is to sort terms in ascending order, but\n  that can be changed by value `descending` or by specifying an ordering\n  function `Fun`. An ordering function is antisymmetric, transitive, and total.\n  `Fun(A, B)` is to return `true` if `A` comes before `B` in the ordering,\n  otherwise `false`. An example of a typical ordering function is less than or\n  equal to, `=</2`. Using an ordering function slows down the sort considerably.\n  Functions `keysort`, `keymerge` and `keycheck` do not accept ordering\n  functions.\n\n- **`{unique, boolean()}`** - When sorting or merging files, only the first of a\n  sequence of terms that compare equal (`==`) is output if this option is set to\n  `true`. Defaults to `false`, which implies that all terms that compare equal\n  are output. When checking files for sortedness, a check that no pair of\n  consecutive terms compares equal is done if this option is set to `true`.\n\n- **`{tmpdir, TempDirectory}`** - The directory where temporary files are put\n  can be chosen explicitly. The default, implied by value `\"\"`, is to put\n  temporary files on the same directory as the sorted output file. If output is\n  a function (see below), the directory returned by `file:get_cwd()` is used\n  instead. The names of temporary files are derived from the Erlang nodename\n  (`node/0`), the process identifier of the current Erlang emulator\n  (`os:getpid()`), and a unique integer (`erlang:unique_integer([positive])`). A\n  typical name is `fs_mynode@myhost_1763_4711.17`, where `17` is a sequence\n  number. Existing files are overwritten. Temporary files are deleted unless\n  some uncaught `EXIT` signal occurs.\n\n- **`{compressed, boolean()}`** - Temporary files and the output file can be\n  compressed. Defaults `false`, which implies that written files are not\n  compressed. Regardless of the value of option `compressed`, compressed files\n  can always be read. Notice that reading and writing compressed files are\n  significantly slower than reading and writing uncompressed files.\n\n- **`{size, Size}`** - By default about 512\\*1024 bytes read from files are\n  sorted internally. This option is rarely needed.\n\n- **`{no_files, NoFiles}`** - By default 16 files are merged at a time. This\n  option is rarely needed.\n\nAs an alternative to sorting files, a function of one argument can be specified\nas input. When called with argument `read`, the function is assumed to return\neither of the following:\n\n- `end_of_input` or `{end_of_input, Value}}` when there is no more input\n  (`Value` is explained below).\n- `{Objects, Fun}`, where `Objects` is a list of binaries or terms depending on\n  the format, and `Fun` is a new input function.\n\nAny other value is immediately returned as value of the current call to `sort`\nor `keysort`. Each input function is called exactly once. If an error occurs,\nthe last function is called with argument `close`, the reply of which is\nignored.\n\nA function of one argument can be specified as output. The results of sorting or\nmerging the input is collected in a non-empty sequence of variable length lists\nof binaries or terms depending on the format. The output function is called with\none list at a time, and is assumed to return a new output function. Any other\nreturn value is immediately returned as value of the current call to the sort or\nmerge function. Each output function is called exactly once. When some output\nfunction has been applied to all of the results or an error occurs, the last\nfunction is called with argument `close`, and the reply is returned as value of\nthe current call to the sort or merge function.\n\nIf a function is specified as input and the last input function returns\n`{end_of_input, Value}`, the function specified as output is called with\nargument `{value, Value}`. This makes it easy to initiate the sequence of output\nfunctions with a value calculated by the input functions.\n\nAs an example, consider sorting the terms on a disk log file. A function that\nreads chunks from the disk log and returns a list of binaries is used as input.\nThe results are collected in a list of terms.\n\n```erlang\nsort(Log) ->\n    {ok, _} = disk_log:open([{name,Log}, {mode,read_only}]),\n    Input = input(Log, start),\n    Output = output([]),\n    Reply = file_sorter:sort(Input, Output, {format,term}),\n    ok = disk_log:close(Log),\n    Reply.\n\ninput(Log, Cont) ->\n    fun(close) ->\n            ok;\n       (read) ->\n            case disk_log:chunk(Log, Cont) of\n                {error, Reason} ->\n                    {error, Reason};\n                {Cont2, Terms} ->\n                    {Terms, input(Log, Cont2)};\n                {Cont2, Terms, _Badbytes} ->\n                    {Terms, input(Log, Cont2)};\n                eof ->\n                    end_of_input\n            end\n    end.\n\noutput(L) ->\n    fun(close) ->\n            lists:append(lists:reverse(L));\n       (Terms) ->\n            output([Terms | L])\n    end.\n```\n\nFor more examples of functions as input and output, see the end of the\n`file_sorter` module; the `term` format is implemented with functions.\n\nThe possible values of `Reason` returned when an error occurs are:\n\n- `bad_object`, `{bad_object, FileName}` \\- Applying the format function failed\n  for some binary, or the key(s) could not be extracted from some term.\n- `{bad_term, FileName}` \\- `io:read/2` failed to read some term.\n- `{file_error, FileName, file:posix()}` \\- For an explanation of\n  [`file:posix()`](`t:file:posix/0`), see `m:file`.\n- `{premature_eof, FileName}` \\- End-of-file was encountered inside some binary\n  term.","ref":"file_sorter.html"},{"type":"function","title":"file_sorter.check/1","doc":"","ref":"file_sorter.html#check/1"},{"type":"function","title":"file_sorter.check/2","doc":"Checks files for sortedness. If a file is not sorted, the first out-of-order\nelement is returned. The first term on a file has position 1.","ref":"file_sorter.html#check/2"},{"type":"type","title":"file_sorter.file_name/0","doc":"","ref":"file_sorter.html#t:file_name/0"},{"type":"type","title":"file_sorter.file_names/0","doc":"","ref":"file_sorter.html#t:file_names/0"},{"type":"type","title":"file_sorter.format/0","doc":"","ref":"file_sorter.html#t:format/0"},{"type":"type","title":"file_sorter.format_fun/0","doc":"","ref":"file_sorter.html#t:format_fun/0"},{"type":"type","title":"file_sorter.header_length/0","doc":"","ref":"file_sorter.html#t:header_length/0"},{"type":"type","title":"file_sorter.i_command/0","doc":"","ref":"file_sorter.html#t:i_command/0"},{"type":"type","title":"file_sorter.i_reply/0","doc":"","ref":"file_sorter.html#t:i_reply/0"},{"type":"type","title":"file_sorter.infun/0","doc":"","ref":"file_sorter.html#t:infun/0"},{"type":"type","title":"file_sorter.input/0","doc":"","ref":"file_sorter.html#t:input/0"},{"type":"type","title":"file_sorter.input_reply/0","doc":"","ref":"file_sorter.html#t:input_reply/0"},{"type":"type","title":"file_sorter.key_pos/0","doc":"","ref":"file_sorter.html#t:key_pos/0"},{"type":"function","title":"file_sorter.keycheck/2","doc":"","ref":"file_sorter.html#keycheck/2"},{"type":"function","title":"file_sorter.keycheck/3","doc":"Checks files for sortedness. If a file is not sorted, the first out-of-order\nelement is returned. The first term on a file has position 1.","ref":"file_sorter.html#keycheck/3"},{"type":"function","title":"file_sorter.keymerge/3","doc":"","ref":"file_sorter.html#keymerge/3"},{"type":"function","title":"file_sorter.keymerge/4","doc":"Merges tuples on files. Each input file is assumed to be sorted on key(s).","ref":"file_sorter.html#keymerge/4"},{"type":"function","title":"file_sorter.keysort/2","doc":"Sorts tuples on files.","ref":"file_sorter.html#keysort/2"},{"type":"function","title":"file_sorter.keysort/3","doc":"","ref":"file_sorter.html#keysort/3"},{"type":"function","title":"file_sorter.keysort/4","doc":"Sorts tuples on files. The sort is performed on the element(s) mentioned in\n`KeyPos`. If two tuples compare equal (`==`) on one element, the next element\naccording to `KeyPos` is compared. The sort is stable.","ref":"file_sorter.html#keysort/4"},{"type":"function","title":"file_sorter.merge/2","doc":"","ref":"file_sorter.html#merge/2"},{"type":"function","title":"file_sorter.merge/3","doc":"Merges terms on files. Each input file is assumed to be sorted.","ref":"file_sorter.html#merge/3"},{"type":"type","title":"file_sorter.no_files/0","doc":"","ref":"file_sorter.html#t:no_files/0"},{"type":"type","title":"file_sorter.o_command/0","doc":"","ref":"file_sorter.html#t:o_command/0"},{"type":"type","title":"file_sorter.o_reply/0","doc":"","ref":"file_sorter.html#t:o_reply/0"},{"type":"type","title":"file_sorter.object/0","doc":"","ref":"file_sorter.html#t:object/0"},{"type":"type","title":"file_sorter.option/0","doc":"","ref":"file_sorter.html#t:option/0"},{"type":"type","title":"file_sorter.options/0","doc":"","ref":"file_sorter.html#t:options/0"},{"type":"type","title":"file_sorter.order/0","doc":"","ref":"file_sorter.html#t:order/0"},{"type":"type","title":"file_sorter.order_fun/0","doc":"","ref":"file_sorter.html#t:order_fun/0"},{"type":"type","title":"file_sorter.outfun/0","doc":"","ref":"file_sorter.html#t:outfun/0"},{"type":"type","title":"file_sorter.output/0","doc":"","ref":"file_sorter.html#t:output/0"},{"type":"type","title":"file_sorter.output_reply/0","doc":"","ref":"file_sorter.html#t:output_reply/0"},{"type":"type","title":"file_sorter.reason/0","doc":"","ref":"file_sorter.html#t:reason/0"},{"type":"type","title":"file_sorter.size/0","doc":"","ref":"file_sorter.html#t:size/0"},{"type":"function","title":"file_sorter.sort/1","doc":"Sorts terms on files.","ref":"file_sorter.html#sort/1"},{"type":"function","title":"file_sorter.sort/2","doc":"","ref":"file_sorter.html#sort/2"},{"type":"function","title":"file_sorter.sort/3","doc":"Sorts terms on files.","ref":"file_sorter.html#sort/3"},{"type":"type","title":"file_sorter.tmp_directory/0","doc":"","ref":"file_sorter.html#t:tmp_directory/0"},{"type":"type","title":"file_sorter.value/0","doc":"","ref":"file_sorter.html#t:value/0"},{"type":"module","title":"filelib","doc":"File utilities, such as wildcard matching of filenames.\n\nThis module contains utilities on a higher level than the `m:file` module.\n\nThis module does not support \"raw\" filenames (that is, files whose names do not\ncomply with the expected encoding). Such files are ignored by the functions in\nthis module.\n\nFor more information about raw filenames, see the `m:file` module.\n\n> #### Note {: .info }\n>\n> Functionality in this module generally assumes valid input and does not\n> necessarily fail on input that does not use a valid encoding, but may instead\n> very likely produce invalid output.\n>\n> File operations used to accept filenames containing null characters (integer\n> value zero). This caused the name to be truncated and in some cases arguments\n> to primitive operations to be mixed up. Filenames containing null characters\n> inside the filename are now _rejected_ and will cause primitive file\n> operations to fail.\n\n> #### Warning {: .warning }\n>\n> Currently null characters at the end of the filename will be accepted by\n> primitive file operations. Such filenames are however still documented as\n> invalid. The implementation will also change in the future and reject such\n> filenames.","ref":"filelib.html"},{"type":"type","title":"filelib.dirname/0","doc":"","ref":"filelib.html#t:dirname/0"},{"type":"type","title":"filelib.dirname_all/0","doc":"","ref":"filelib.html#t:dirname_all/0"},{"type":"function","title":"filelib.ensure_dir/1","doc":"Ensures that all parent directories for the specified file or directory name\n`Name` exist, trying to create them if necessary.\n\nReturns `ok` if all parent directories already exist or can be created. Returns\n`{error, Reason}` if some parent directory does not exist and cannot be created.","ref":"filelib.html#ensure_dir/1"},{"type":"function","title":"filelib.ensure_path/1","doc":"Ensures that all parent directories for the specified path `Path` exist, trying\nto create them if necessary.\n\nUnlike `ensure_dir/1`, this function will attempt to create all path segments as\na directory, including the last segment.\n\nReturns `ok` if all parent directories already exist or can be created. Returns\n`{error, Reason}` if some parent directory does not exist and cannot be created.","ref":"filelib.html#ensure_path/1"},{"type":"function","title":"filelib.file_size/1","doc":"Returns the size of the specified file.","ref":"filelib.html#file_size/1"},{"type":"type","title":"filelib.filename/0","doc":"","ref":"filelib.html#t:filename/0"},{"type":"type","title":"filelib.filename_all/0","doc":"","ref":"filelib.html#t:filename_all/0"},{"type":"function","title":"filelib.find_file/2","doc":"","ref":"filelib.html#find_file/2"},{"type":"function","title":"filelib.find_file/3","doc":"Looks for a file of the given name by applying suffix rules to the given\ndirectory path.\n\nFor example, a rule `{\"ebin\", \"src\"}` means that if the directory path ends with\n `\"ebin\"`, the corresponding path ending in `\"src\"` should be searched.\n\nIf `Rules` is left out or is an empty list, the default system rules are used.\nSee also the Kernel application parameter\n[`source_search_rules`](`e:kernel:kernel_app.md#source_search_rules`).","ref":"filelib.html#find_file/3"},{"type":"type","title":"filelib.find_file_rule/0","doc":"","ref":"filelib.html#t:find_file_rule/0"},{"type":"function","title":"filelib.find_source/1","doc":"Equivalent to [`find_source(Base, Dir)`](`find_source/2`), where `Dir` is\n`filename:dirname(FilePath)` and `Base` is `filename:basename(FilePath)`.","ref":"filelib.html#find_source/1"},{"type":"function","title":"filelib.find_source/2","doc":"","ref":"filelib.html#find_source/2"},{"type":"function","title":"filelib.find_source/3","doc":"Applies file extension specific rules to find the source file for a given object\nfile relative to the object directory.\n\nFor example, for a file with the extension `.beam`, the default rule is to look\nfor a file with a corresponding extension `.erl` by replacing the suffix `\"ebin\"`\nof the object directory path with `\"src\"` or `\"src/*\"`. The file search is done\nthrough `find_file/3`. The directory of the object file is always tried before\nany other directory specified by the rules.\n\nIf `Rules` is left out or is an empty list, the default system rules are used.\nSee also the Kernel application parameter\n[`source_search_rules`](`e:kernel:kernel_app.md#source_search_rules`).","ref":"filelib.html#find_source/3"},{"type":"type","title":"filelib.find_source_rule/0","doc":"","ref":"filelib.html#t:find_source_rule/0"},{"type":"function","title":"filelib.fold_files/5","doc":"Folds function `Fun` over all (regular) files `F` in directory `Dir` whose\nbasename (for example, just `\"baz.erl\"` in `\"foo/bar/baz.erl\"`) matches the\nregular expression `RegExp` (for a description of the allowed regular\nexpressions, see the `m:re` module).\n\nIf `Recursive` is `true`, all subdirectories to `Dir` are processed.\nThe regular expression matching is only done on the filename without the directory part.\n\nIf Unicode filename translation is in effect and the file system is transparent,\nfilenames that cannot be interpreted as Unicode can be encountered, in which\ncase the `fun()` must be prepared to handle raw filenames (that is, binaries).\nIf the regular expression contains codepoints > 255, it does not match filenames\nthat do not conform to the expected character encoding (that is, are not encoded\nin valid UTF-8).\n\nFor more information about raw filenames, see the `m:file` module.","ref":"filelib.html#fold_files/5"},{"type":"function","title":"filelib.is_dir/1","doc":"Returns `true` if `Name` refers to a directory, otherwise `false`.","ref":"filelib.html#is_dir/1"},{"type":"function","title":"filelib.is_file/1","doc":"Returns `true` if `Name` refers to a file or a directory, otherwise `false`.","ref":"filelib.html#is_file/1"},{"type":"function","title":"filelib.is_regular/1","doc":"Returns `true` if `Name` refers to a (regular) file, otherwise `false`.","ref":"filelib.html#is_regular/1"},{"type":"function","title":"filelib.last_modified/1","doc":"Returns the date and time the specified file or directory was last modified, or\n`0` if the file does not exist.","ref":"filelib.html#last_modified/1"},{"type":"function","title":"filelib.safe_relative_path/2","doc":"Sanitizes the relative path by eliminating \"..\" and \".\" components to protect\nagainst directory traversal attacks.\n\nEither returns the sanitized path name, or the atom `unsafe` if the path is unsafe.\nThe path is considered unsafe in the following circumstances:\n\n- The path is not relative.\n- A \"..\" component would climb up above the root of the relative path.\n- A symbolic link in the path points above the root of the relative path.\n\n_Examples:_\n\n```erlang\n1> {ok, Cwd} = file:get_cwd().\n...\n2> filelib:safe_relative_path(\"dir/sub_dir/..\", Cwd).\n\"dir\"\n3> filelib:safe_relative_path(\"dir/..\", Cwd).\n[]\n4> filelib:safe_relative_path(\"dir/../..\", Cwd).\nunsafe\n5> filelib:safe_relative_path(\"/abs/path\", Cwd).\nunsafe\n```","ref":"filelib.html#safe_relative_path/2"},{"type":"function","title":"filelib.wildcard/1","doc":"Returns a list of all files that match Unix-style wildcard string `Wildcard`.\n\nThe wildcard string looks like an ordinary filename, except that the following\n\"wildcard characters\" are interpreted in a special way:\n\n- **?** - Matches one character.\n\n- **\\*** - Matches any number of characters up to the end of the filename, the\n  next dot, or the next slash.\n\n- **\\*\\*** - Two adjacent `*` used as a single pattern match all files and zero\n  or more directories and subdirectories.\n\n- **\\[Character1,Character2,...]** - Matches any of the characters listed. Two\n  characters separated by a hyphen match a range of characters. Example: `[A-Z]`\n  matches any uppercase letter.\n\n- **\\{Item,...\\}** - Alternation. Matches one of the alternatives.\n\nOther characters represent themselves. Only filenames that have exactly the same\ncharacter in the same position match. Matching is case-sensitive, for example,\n\"a\" does not match \"A\".\n\nDirectory separators must always be written as `/`, even on Windows.\n\nA character preceded by `\\` loses its special meaning. Note that `\\` must be\nwritten as `\\\\` in a string literal. For example, \"\\\\\\\\?\\*\" will match any\nfilename starting with `?`.\n\nNotice that multiple \"\\*\" characters are allowed (as in Unix wildcards, but\nopposed to Windows/DOS wildcards).\n\n_Examples:_\n\nThe following examples assume that the current directory is the top of an\nErlang/OTP installation.\n\nTo find all `.beam` files in all applications, use the following line:\n\n```text\nfilelib:wildcard(\"lib/*/ebin/*.beam\").\n```\n\nTo find `.erl` or `.hrl` in all applications `src` directories, use either of\nthe following lines:\n\n```text\nfilelib:wildcard(\"lib/*/src/*.?rl\")\n```\n\n```text\nfilelib:wildcard(\"lib/*/src/*.{erl,hrl}\")\n```\n\nTo find all `.hrl` files in `src` or `include` directories:\n\n```text\nfilelib:wildcard(\"lib/*/{src,include}/*.hrl\").\n```\n\nTo find all `.erl` or `.hrl` files in either `src` or `include` directories:\n\n```text\nfilelib:wildcard(\"lib/*/{src,include}/*.{erl,hrl}\")\n```\n\nTo find all `.erl` or `.hrl` files in any subdirectory:\n\n```text\nfilelib:wildcard(\"lib/**/*.{erl,hrl}\")\n```","ref":"filelib.html#wildcard/1"},{"type":"function","title":"filelib.wildcard/2","doc":"Same as `wildcard/1`, except that `Cwd` is used instead of the working\ndirectory.","ref":"filelib.html#wildcard/2"},{"type":"module","title":"filename","doc":"Filename manipulation functions.\n\nThis module provides functions for analyzing and manipulating filenames. These\nfunctions are designed so that the Erlang code can work on many different\nplatforms with different filename formats. With filename is meant all strings\nthat can be used to denote a file. The filename can be a short relative name\nlike `foo.erl`, a long absolute name including a drive designator, a directory\nname like `D:\\usr/local\\bin\\erl/lib\\tools\\foo.erl`, or any variations in\nbetween.\n\nIn Windows, all functions return filenames with forward slashes only, even if\nthe arguments contain backslashes. To normalize a filename by removing redundant\ndirectory separators, use `join/1`.\n\nThe module supports [raw filenames](unicode_usage.md#notes-about-raw-filenames)\nin the way that if a binary is present, or the filename cannot be interpreted\naccording to the return value of `file:native_name_encoding/0`, a raw filename\nis also returned. For example, [`join/1`](`join/1`) provided with a path\ncomponent that is a binary (and cannot be interpreted under the current native\nfilename encoding) results in a raw filename that is returned (the join\noperation is performed of course). For more information about raw filenames, see\nthe `m:file` module.\n\n> #### Note {: .info }\n>\n> Functionality in this module generally assumes valid input and does not\n> necessarily fail on input that does not use a valid encoding, but may instead\n> very likely produce invalid output.\n>\n> File operations used to accept filenames containing null characters (integer\n> value zero). This caused the name to be truncated and in some cases arguments\n> to primitive operations to be mixed up. Filenames containing null characters\n> inside the filename are now _rejected_ and will cause primitive file\n> operations to fail.\n\n> #### Warning {: .warning }\n>\n> Currently null characters at the end of the filename will be accepted by\n> primitive file operations. Such filenames are however still documented as\n> invalid. The implementation will also change in the future and reject such\n> filenames.","ref":"filename.html"},{"type":"function","title":"filename.absname/1","doc":"Converts a relative `Filename` and returns an absolute name. No attempt is made\nto create the shortest absolute name, as this can give incorrect results on file\nsystems that allow links.\n\n_Unix examples:_\n\n```erlang\n1> pwd().\n\"/usr/local\"\n2> filename:absname(\"foo\").\n\"/usr/local/foo\"\n3> filename:absname(\"../x\").\n\"/usr/local/../x\"\n4> filename:absname(\"/\").\n\"/\"\n```\n\n_Windows examples:_\n\n```erlang\n1> pwd().\n\"D:/usr/local\"\n2> filename:absname(\"foo\").\n\"D:/usr/local/foo\"\n3> filename:absname(\"../x\").\n\"D:/usr/local/../x\"\n4> filename:absname(\"/\").\n\"D:/\"\n```","ref":"filename.html#absname/1"},{"type":"function","title":"filename.absname/2","doc":"Same as `absname/1`, except that the directory to which the filename is to be\nmade relative is specified in argument `Dir`.","ref":"filename.html#absname/2"},{"type":"function","title":"filename.absname_join/2","doc":"Joins an absolute directory with a relative filename.\n\nSimilar to `join/2`, but on platforms with tight restrictions on raw filename length\nand no support for symbolic links, leading parent directory components in `Filename` are matched\nagainst trailing directory components in `Dir` so they can be removed from the\nresult - minimizing its length.","ref":"filename.html#absname_join/2"},{"type":"function","title":"filename.basedir/2","doc":"Equivalent to [basedir(PathType, Application, #\\{\\})](`m:filename#basedir_3_1`)\nor [basedir(PathsType, Application, #\\{\\})](`m:filename#basedir_3_2`).","ref":"filename.html#basedir/2"},{"type":"function","title":"filename.basedir/3","doc":"[](){: #basedir_3_1 } [](){: #basedir_3_2 }\n\nReturns a suitable path, or paths, for a given type. If `os` is not set in\n`Opts` the function will default to the native option, that is `'linux'`,\n`'darwin'` or `'windows'`, as understood by `os:type/0`. Anything not recognized\nas `'darwin'` or `'windows'` is interpreted as `'linux'`.\n\nThe options `'author'` and `'version'` are only used with `'windows'` option\nmode.\n\n- `user_cache`{: #user_cache }\n\n  The path location is intended for transient data files on a local machine.\n\n  On Linux: Respects the os environment variable `XDG_CACHE_HOME`.\n\n  ```erlang\n  1> filename:basedir(user_cache, \"my_application\", #{os=>linux}).\n  \"/home/otptest/.cache/my_application\"\n  ```\n\n  On Darwin:\n\n  ```erlang\n  1> filename:basedir(user_cache, \"my_application\", #{os=>darwin}).\n  \"/home/otptest/Library/Caches/my_application\"\n  ```\n\n  On Windows:\n\n  ```erlang\n  1> filename:basedir(user_cache, \"My App\").\n  \"c:/Users/otptest/AppData/Local/My App/Cache\"\n  2> filename:basedir(user_cache, \"My App\").\n  \"c:/Users/otptest/AppData/Local/My App/Cache\"\n  3> filename:basedir(user_cache, \"My App\", #{author=>\"Erlang\"}).\n  \"c:/Users/otptest/AppData/Local/Erlang/My App/Cache\"\n  4> filename:basedir(user_cache, \"My App\", #{version=>\"1.2\"}).\n  \"c:/Users/otptest/AppData/Local/My App/1.2/Cache\"\n  5> filename:basedir(user_cache, \"My App\", #{author=>\"Erlang\",version=>\"1.2\"}).\n  \"c:/Users/otptest/AppData/Local/Erlang/My App/1.2/Cache\"\n  ```\n\n- `user_config`{: #user_config }\n\n  The path location is intended for persistent configuration files.\n\n  On Linux: Respects the os environment variable `XDG_CONFIG_HOME`.\n\n  ```erlang\n  2> filename:basedir(user_config, \"my_application\", #{os=>linux}).\n  \"/home/otptest/.config/my_application\"\n  ```\n\n  On Darwin:\n\n  ```erlang\n  2> filename:basedir(user_config, \"my_application\", #{os=>darwin}).\n  \"/home/otptest/Library/Application Support/my_application\"\n  ```\n\n  On Windows:\n\n  ```erlang\n  1> filename:basedir(user_config, \"My App\").\n  \"c:/Users/otptest/AppData/Roaming/My App\"\n  2> filename:basedir(user_config, \"My App\", #{author=>\"Erlang\", version=>\"1.2\"}).\n  \"c:/Users/otptest/AppData/Roaming/Erlang/My App/1.2\"\n  ```\n\n- `user_data`{: #user_data }\n\n  The path location is intended for persistent data files.\n\n  On Linux: Respects the os environment variable `XDG_DATA_HOME`.\n\n  ```erlang\n  3> filename:basedir(user_data, \"my_application\", #{os=>linux}).\n  \"/home/otptest/.local/my_application\"\n  ```\n\n  On Darwin:\n\n  ```erlang\n  3> filename:basedir(user_data, \"my_application\", #{os=>darwin}).\n  \"/home/otptest/Library/Application Support/my_application\"\n  ```\n\n  On Windows:\n\n  ```erlang\n  8> filename:basedir(user_data, \"My App\").\n  \"c:/Users/otptest/AppData/Local/My App\"\n  9> filename:basedir(user_data, \"My App\",#{author=>\"Erlang\",version=>\"1.2\"}).\n  \"c:/Users/otptest/AppData/Local/Erlang/My App/1.2\"\n  ```\n\n- `user_log`{: #user_log }\n\n  The path location is intended for transient log files on a local machine.\n\n  On Linux: Respects the os environment variable `XDG_CACHE_HOME`.\n\n  ```erlang\n  4> filename:basedir(user_log, \"my_application\", #{os=>linux}).\n  \"/home/otptest/.cache/my_application/log\"\n  ```\n\n  On Darwin:\n\n  ```erlang\n  4> filename:basedir(user_log, \"my_application\", #{os=>darwin}).\n  \"/home/otptest/Library/Logs/my_application\"\n  ```\n\n  On Windows:\n\n  ```erlang\n  12> filename:basedir(user_log, \"My App\").\n  \"c:/Users/otptest/AppData/Local/My App/Logs\"\n  13> filename:basedir(user_log, \"My App\",#{author=>\"Erlang\",version=>\"1.2\"}).\n  \"c:/Users/otptest/AppData/Local/Erlang/My App/1.2/Logs\"\n  ```\n\n- `site_config`{: #site_config }\n\n  On Linux: Respects the os environment variable `XDG_CONFIG_DIRS`.\n\n  ```erlang\n  5> filename:basedir(site_config, \"my_application\", #{os=>linux}).\n  [\"/usr/local/share/my_application\",\n   \"/usr/share/my_application\"]\n  6> os:getenv(\"XDG_CONFIG_DIRS\").\n  \"/etc/xdg/xdg-ubuntu:/usr/share/upstart/xdg:/etc/xdg\"\n  7> filename:basedir(site_config, \"my_application\", #{os=>linux}).\n  [\"/etc/xdg/xdg-ubuntu/my_application\",\n   \"/usr/share/upstart/xdg/my_application\",\n   \"/etc/xdg/my_application\"]\n  8> os:unsetenv(\"XDG_CONFIG_DIRS\").\n  true\n  9> filename:basedir(site_config, \"my_application\", #{os=>linux}).\n  [\"/etc/xdg/my_application\"]\n  ```\n\n  On Darwin:\n\n  ```erlang\n  5> filename:basedir(site_config, \"my_application\", #{os=>darwin}).\n  [\"/Library/Application Support/my_application\"]\n  ```\n\n- `site_data`{: #site_data }\n\n  On Linux: Respects the os environment variable `XDG_DATA_DIRS`.\n\n  ```erlang\n  10> os:getenv(\"XDG_DATA_DIRS\").\n  \"/usr/share/ubuntu:/usr/share/gnome:/usr/local/share/:/usr/share/\"\n  11> filename:basedir(site_data, \"my_application\", #{os=>linux}).\n  [\"/usr/share/ubuntu/my_application\",\n   \"/usr/share/gnome/my_application\",\n   \"/usr/local/share/my_application\",\n   \"/usr/share/my_application\"]\n  12> os:unsetenv(\"XDG_DATA_DIRS\").\n  true\n  13> filename:basedir(site_data, \"my_application\", #{os=>linux}).\n  [\"/usr/local/share/my_application\",\n   \"/usr/share/my_application\"]\n  ```\n\n  On Darwin:\n\n  ```erlang\n  5> filename:basedir(site_data, \"my_application\", #{os=>darwin}).\n  [\"/Library/Application Support/my_application\"]\n  ```","ref":"filename.html#basedir/3"},{"type":"type","title":"filename.basedir_opts/0","doc":"","ref":"filename.html#t:basedir_opts/0"},{"type":"type","title":"filename.basedir_path_type/0","doc":"","ref":"filename.html#t:basedir_path_type/0"},{"type":"type","title":"filename.basedir_paths_type/0","doc":"","ref":"filename.html#t:basedir_paths_type/0"},{"type":"function","title":"filename.basename/1","doc":"Returns the last component of `Filename`, or `Filename` itself if it does not\ncontain any directory separators.\n\n_Examples:_\n\n```erlang\n5> filename:basename(\"foo\").\n\"foo\"\n6> filename:basename(\"/usr/foo\").\n\"foo\"\n7> filename:basename(\"/\").\n[]\n```","ref":"filename.html#basename/1"},{"type":"function","title":"filename.basename/2","doc":"Returns the last component of `Filename` with extension `Ext` stripped.\n\nThis function is to be used to remove a (possible) specific extension.\nTo remove an existing extension when you are unsure which one it is, use\n[`rootname(basename(Filename))`](`rootname/1`).\n\n_Examples:_\n\n```erlang\n8> filename:basename(\"~/src/kalle.erl\", \".erl\").\n\"kalle\"\n9> filename:basename(\"~/src/kalle.beam\", \".erl\").\n\"kalle.beam\"\n10> filename:basename(\"~/src/kalle.old.erl\", \".erl\").\n\"kalle.old\"\n11> filename:rootname(filename:basename(\"~/src/kalle.erl\")).\n\"kalle\"\n12> filename:rootname(filename:basename(\"~/src/kalle.beam\")).\n\"kalle\"\n```","ref":"filename.html#basename/2"},{"type":"function","title":"filename.dirname/1","doc":"Returns the directory part of `Filename`.\n\n_Examples:_\n\n```erlang\n13> filename:dirname(\"/usr/src/kalle.erl\").\n\"/usr/src\"\n14> filename:dirname(\"kalle.erl\").\n\".\"\n```\n\n```erlang\n5> filename:dirname(\"\\\\usr\\\\src/kalle.erl\"). % Windows\n\"/usr/src\"\n```","ref":"filename.html#dirname/1"},{"type":"function","title":"filename.extension/1","doc":"Returns the file extension of `Filename`, including the period. Returns an empty\nstring if no extension exists.\n\n_Examples:_\n\n```erlang\n15> filename:extension(\"foo.erl\").\n\".erl\"\n16> filename:extension(\"beam.src/kalle\").\n[]\n```","ref":"filename.html#extension/1"},{"type":"function","title":"filename.flatten/1","doc":"Converts a possibly deep list filename consisting of characters and atoms into\nthe corresponding flat string filename.","ref":"filename.html#flatten/1"},{"type":"function","title":"filename.join/1","doc":"Joins a list of filename `Components` with directory separators. If one of the\nelements of `Components` includes an absolute path, such as `\"/xxx\"`, the\npreceding elements, if any, are removed from the result.\n\nThe result is \"normalized\":\n\n- Redundant directory separators are removed.\n- In Windows, all directory separators are forward slashes and the drive letter\n  is in lower case.\n\n_Examples:_\n\n```erlang\n17> filename:join([\"/usr\", \"local\", \"bin\"]).\n\"/usr/local/bin\"\n18> filename:join([\"a/b///c/\"]).\n\"a/b/c\"\n```\n\n```erlang\n6> filename:join([\"B:a\\\\b///c/\"]). % Windows\n\"b:a/b/c\"\n```","ref":"filename.html#join/1"},{"type":"function","title":"filename.join/2","doc":"Joins two filename components with directory separators. Equivalent to\n[`join([Name1, Name2])`](`join/1`).","ref":"filename.html#join/2"},{"type":"function","title":"filename.nativename/1","doc":"Converts `Path` to a form accepted by the command shell and native applications\non the current platform. On Windows, forward slashes are converted to backward\nslashes. On all platforms, the name is normalized as done by `join/1`.\n\n_Examples:_\n\n```erlang\n19> filename:nativename(\"/usr/local/bin/\"). % Unix\n\"/usr/local/bin\"\n```\n\n```erlang\n7> filename:nativename(\"/usr/local/bin/\"). % Windows\n\"\\\\usr\\\\local\\\\bin\"\n```","ref":"filename.html#nativename/1"},{"type":"function","title":"filename.pathtype/1","doc":"Returns the path type, which is one of the following:\n\n- **`absolute`** - The path name refers to a specific file on a specific volume.\n\n  Unix example: `/usr/local/bin`\n\n  Windows example: `D:/usr/local/bin`\n\n- **`relative`** - The path name is relative to the current working directory on\n  the current volume.\n\n  Example: `foo/bar, ../src`\n\n- **`volumerelative`** - The path name is relative to the current working\n  directory on a specified volume, or it is a specific file on the current\n  working volume.\n\n  Windows example: `D:bar.erl, /bar/foo.erl`","ref":"filename.html#pathtype/1"},{"type":"function","title":"filename.rootname/1","doc":"Removes the filename extension.\n\n_Examples:_\n\n```erlang\n1> filename:rootname(\"/beam.src/kalle\").\n\"/beam.src/kalle\"\n2> filename:rootname(\"/beam.src/foo.erl\").\n\"/beam.src/foo\"\n```","ref":"filename.html#rootname/1"},{"type":"function","title":"filename.rootname/2","doc":"Removes the filename extension `Ext` from `Filename`.\n\n_Examples:_\n\n```erlang\n1> filename:rootname(\"/beam.src/foo.erl\", \".erl\").\n\"/beam.src/foo\"\n2> filename:rootname(\"/beam.src/foo.beam\", \".erl\").\n\"/beam.src/foo.beam\"\n```","ref":"filename.html#rootname/2"},{"type":"function","title":"filename.split/1","doc":"Returns a list whose elements are the path components of `Filename`.\n\n_Examples:_\n\n```erlang\n24> filename:split(\"/usr/local/bin\").\n[\"/\",\"usr\",\"local\",\"bin\"]\n25> filename:split(\"foo/bar\").\n[\"foo\",\"bar\"]\n26> filename:split(\"a:\\\\msdev\\\\include\").\n[\"a:/\",\"msdev\",\"include\"]\n```","ref":"filename.html#split/1"},{"type":"module","title":"io","doc":"Standard I/O server interface functions.\n\nThis module provides an interface to standard Erlang I/O servers. The output\nfunctions all return `ok` if they are successful, or exit if they are not.\n\nAll functions in this module have an optional parameter\n[`IoDevice`](`t:device/0`). If included, it must be the pid of a process that\nhandles the I/O protocols. Normally, it is an [`IoDevice`](`t:device/0`) returned by\n`file:open/2`. If no [`IoDevice`](`t:device/0`) is given,\n[`standard_io`](`t:standard_io/0`) is used.\n\nFor a description of the I/O protocols, see section\n[The Erlang I/O Protocol](io_protocol.md) in the User's Guide.\n\n> #### Warning {: .warning }\n>\n> The data supplied to function `put_chars/2` is to be in\n> the `t:unicode:chardata/0` format. This means that programs supplying binaries\n> to this function must convert them to UTF-8 before trying to output the data\n> on an I/O device.\n>\n> If an I/O device is set in binary mode, functions\n> [`get_chars/2,3`](`get_chars/2`) and [`get_line/1,2`](`get_line/1`) can return\n> binaries instead of lists. The binaries are encoded in UTF-8.\n>\n> To work with binaries in ISO Latin-1 encoding, use the `m:file` module\n> instead.\n>\n> For conversion functions between character encodings, see the `m:unicode`\n> module.","ref":"io.html"},{"type":"module","title":"Error Information - io","doc":"The `ErrorInfo` mentioned in this module is the standard `ErrorInfo` structure\nthat is returned from all I/O modules. It has the following format:\n\n```erlang\n{ErrorLocation, Module, ErrorDescriptor}\n```\n\nA string that describes the error is obtained with the following call:\n\n```erlang\nModule:format_error(ErrorDescriptor)\n```","ref":"io.html#module-error-information"},{"type":"function","title":"io.columns/0","doc":"","ref":"io.html#columns/0"},{"type":"function","title":"io.columns/1","doc":"Retrieves the number of columns of the [`IoDevice`](`t:device/0`) (that is, the width of a\nterminal).\n\nThe function succeeds for terminal devices and returns `{error, enotsup}` for\nall other I/O devices.","ref":"io.html#columns/1"},{"type":"type","title":"io.device/0","doc":"An I/O device, either `t:standard_io/0`, `t:standard_error/0`, `t:user/0`, a `t:file:io_server/0`,\na registered name, or any pid handling I/O protocols.","ref":"io.html#t:device/0"},{"type":"type","title":"io.encoding/0","doc":"","ref":"io.html#t:encoding/0"},{"type":"type","title":"io.expand_fun/0","doc":"","ref":"io.html#t:expand_fun/0"},{"type":"type","title":"io.format/0","doc":"","ref":"io.html#t:format/0"},{"type":"function","title":"io.format/1","doc":"","ref":"io.html#format/1"},{"type":"function","title":"io.format/2","doc":"","ref":"io.html#format/2"},{"type":"function","title":"io.format/3","doc":"","ref":"io.html#format/3"},{"type":"function","title":"io.fread/2","doc":"","ref":"io.html#fread/2"},{"type":"function","title":"io.fread/3","doc":"Reads characters from [`IoDevice`](`t:device/0`), prompting it with `Prompt`. Interprets the\ncharacters in accordance with `Format`.\n\n`Format` can contain the following:\n\n- Whitespace characters (_Space_, _Tab_, and _Newline_) that cause input to be\n  read to the next non-whitespace character.\n- Ordinary characters that must match the next input character.\n- Control sequences, which have the general format `~*FMC`, where:\n\n  - Character `*` is an optional return suppression character. It provides a\n    method to specify a field that is to be omitted.\n  - `F` is the `field width` of the input field.\n  - `M` is an optional translation modifier (of which `t` is the only supported,\n    meaning Unicode translation).\n  - `C` determines the type of control sequence.\n\n  Unless otherwise specified, leading whitespace is ignored for all control\n  sequences. An input field cannot be more than one line wide.\n\n  _Available control sequences:_\n\n  - **`~`** - A single `~` is expected in the input.\n\n  - **`d`** - A decimal integer is expected.\n\n  - **`u`** - An unsigned integer in base 2-36 is expected. The field width\n    parameter is used to specify base. Leading whitespace characters are not\n    skipped.\n\n  - **`-`** - An optional sign character is expected. A sign character `-` gives\n    return value `-1`. Sign character `+` or none gives `1`. The field width\n    parameter is ignored. Leading whitespace characters are not skipped.\n\n  - **`#`** - An integer in base 2-36 with Erlang-style base prefix (for\n    example, `\"16#ffff\"`) is expected.\n\n  - **`f`** - A floating point number is expected. It must follow the Erlang\n    floating point number syntax.\n\n  - **`s`** - A string of non-whitespace characters is read. If a field width\n    has been specified, this number of characters are read and all trailing\n    whitespace characters are stripped. An Erlang string (list of characters) is\n    returned.\n\n    If Unicode translation is in effect (`~ts`), characters > 255 are accepted,\n    otherwise not. With the translation modifier, the returned list can as a\n    consequence also contain integers > 255:\n\n    ```erlang\n    1> io:fread(\"Prompt> \",\"~s\").\n    Prompt>  \n    {error,{fread,string}}\n    2> io:fread(\"Prompt> \",\"~ts\").\n    Prompt>  \n    {ok,[[1091,1085,1080,1094,1086,1076,1077]]}\n    ```\n\n  - **`a`** - Similar to `s`, but the resulting string is converted into an\n    atom.\n\n  - **`c`** - The number of characters equal to the field width are read\n    (default is 1) and returned as an Erlang string. However, leading and\n    trailing whitespace characters are not omitted as they are with `s`. All\n    characters are returned.\n\n    The Unicode translation modifier works as with `s`:\n\n    ```erlang\n    1> io:fread(\"Prompt> \",\"~c\").\n    Prompt>  \n    {error,{fread,string}}\n    2> io:fread(\"Prompt> \",\"~tc\").\n    Prompt>  \n    {ok,[[1091]]}\n    ```\n\n  - **`l`** - Returns the number of characters that have been scanned up to that\n    point, including whitespace characters.\n\n  The function returns:\n\n  - **`{ok, Terms}`** - The read was successful and `Terms` is the list of\n    successfully matched and read items.\n\n  - **`eof`** - End of file was encountered.\n\n  - **`{error, FreadError}`** - The reading failed and `FreadError` gives a hint\n    about the error.\n\n  - **`{error, ErrorDescription}`** - The read operation failed and parameter\n    `ErrorDescription` gives a hint about the error.\n\n_Examples:_\n\n```erlang\n20> io:fread('enter>', \"~f~f~f\").\nenter>1.9 35.5e3 15.0\n{ok,[1.9,3.55e4,15.0]}\n21> io:fread('enter>', \"~10f~d\").\nenter>     5.67899\n{ok,[5.678,99]}\n22> io:fread('enter>', \":~10s:~10c:\").\nenter>:   alan   :   joe    :\n{ok, [\"alan\", \"   joe    \"]}\n```","ref":"io.html#fread/3"},{"type":"function","title":"io.fwrite/1","doc":"","ref":"io.html#fwrite/1"},{"type":"function","title":"io.fwrite/2","doc":"","ref":"io.html#fwrite/2"},{"type":"function","title":"io.fwrite/3","doc":"Writes the items in `Data` on the [`IoDevice`](`t:device/0`) in accordance with `Format`.\n\n`Format` contains plain characters that are copied to\nthe output device, and control sequences for formatting, see below. If `Format`\nis an atom or a binary, it is first converted to a list with the aid of\n[`atom_to_list/1`](`atom_to_list/1`) or\n[`binary_to_list/1`](`binary_to_list/1`). Example:\n\n```erlang\n1> io:fwrite(\"Hello world!~n\", []).\nHello world!\nok\n```\n\nThe general format of a control sequence is `~F.P.PadModC`.\n\nThe character `C` determines the type of control sequence to be used. It is the\nonly required field. All of `F`, `P`, `Pad`, and `Mod` are optional. For\nexample, to use a `#` for `Pad` but use the default values for `F` and `P`, you\ncan write `~..#C`.\n\n- `F` is the `field width` of the printed argument. A negative value means that\n  the argument is left-justified within the field, otherwise right-justified. If\n  no field width is specified, the required print width is used. If the field\n  width specified is too small, the whole field is filled with `*` characters.\n- `P` is the `precision` of the printed argument. A default value is used if no\n  precision is specified. The interpretation of precision depends on the control\n  sequences. Unless otherwise specified, argument `within` is used to determine\n  print width.\n- `Pad` is the padding character. This is the character used to pad the printed\n  representation of the argument so that it conforms to the specified field\n  width and precision. Only one padding character can be specified and, whenever\n  applicable, it is used for both the field width and precision. The default\n  padding character is `' '` (space).\n- `Mod` is the control sequence modifier. This is one or more characters that\n  change the interpretation of `Data`.\n\n  The current modifiers are:\n\n  - **`t`** - For Unicode translation.\n\n  - **`l`** - For stopping `p` and `P` from detecting printable characters.\n\n  - **`k`** - For use with `p`, `P`, `w`, and `W` to format maps in map-key\n    `ordered` order (see `t:maps:iterator_order/0`).\n\n  - **`K`** - Similar to `k`, for formatting maps in map-key order, but takes an\n    extra argument that specifies the `t:maps:iterator_order/0`.\n\n    For example:\n\n    ```erlang\n    > M = #{ a => 1, b => 2 }.\n    #{a => 1,b => 2}\n    > io:format(\"~Kp~n\", [reversed, M]).\n    #{b => 2,a => 1}\n    ok\n    ```\n\nIf `F`, `P`, or `Pad` is a `*` character, the next argument in `Data` is used as\nthe value. For example:\n\n```erlang\n1> io:fwrite(\"~*.*.0f~n\",[9, 5, 3.14159265]).\n003.14159\nok\n```\n\nTo use a literal `*` character as `Pad`, it must be passed as an argument:\n\n```erlang\n2> io:fwrite(\"~*.*.*f~n\",[9, 5, $*, 3.14159265]).\n**3.14159\nok\n```\n\n_Available control sequences:_\n\n- **`~`** - Character `~` is written.\n\n- **`c`** - The argument is a number that is interpreted as an ASCII code. The\n  precision is the number of times the character is printed and defaults to the\n  field width, which in turn defaults to 1. Example:\n\n  ```erlang\n  1> io:fwrite(\"|~10.5c|~-10.5c|~5c|~n\", [$a, $b, $c]).\n  |     aaaaa|bbbbb     |ccccc|\n  ok\n  ```\n\n  If the Unicode translation modifier (`t`) is in effect, the integer argument\n  can be any number representing a valid Unicode codepoint, otherwise it is to\n  be an integer less than or equal to 255, otherwise it is masked with 16#FF:\n\n  ```erlang\n  2> io:fwrite(\"~tc~n\",[1024]).\n  \\x{400}\n  ok\n  3> io:fwrite(\"~c~n\",[1024]).\n  ^@\n  ok\n  ```\n\n- **`f`** - The argument is a float that is written as `[-]ddd.ddd`, where the\n  precision is the number of digits after the decimal point. The default\n  precision is 6 and it cannot be < 1.\n\n- **`e`** - The argument is a float that is written as `[-]d.ddde+-ddd`, where\n  the precision is the number of digits written. The default precision is 6 and\n  it cannot be < 2.\n\n- **`g`** - The argument is a float that is written as `f`, if it is >= 0.1 and\n  < 10000.0. Otherwise, it is written in the `e` format. The precision is the\n  number of significant digits. It defaults to 6 and is not to be < 2. If the\n  absolute value of the float does not allow it to be written in the `f` format\n  with the desired number of significant digits, it is also written in the `e`\n  format.\n\n- **`s`** - Prints the argument with the string syntax. The argument is, if no\n  Unicode translation modifier is present, an `t:iolist/0`, a `t:binary/0`, or\n  an `t:atom/0`. If the Unicode translation modifier (`t`) is in effect, the\n  argument is [`unicode:chardata()`](`t:unicode:chardata/0`), meaning that\n  binaries are in UTF-8. The characters are printed without quotes. The string\n  is first truncated by the specified precision and then padded and justified to\n  the specified field width. The default precision is the field width.\n\n  This format can be used for printing any object and truncating the output so\n  it fits a specified field:\n\n  ```erlang\n  1> io:fwrite(\"|~10w|~n\", [{hey, hey, hey}]).\n  |**********|\n  ok\n  2> io:fwrite(\"|~10s|~n\", [io_lib:write({hey, hey, hey})]).\n  |{hey,hey,h|\n  3> io:fwrite(\"|~-10.8s|~n\", [io_lib:write({hey, hey, hey})]).\n  |{hey,hey  |\n  ok\n  ```\n\n  A list with integers > 255 is considered an error if the Unicode translation\n  modifier is not specified:\n\n  ```erlang\n  4> io:fwrite(\"~ts~n\",[[1024]]).\n  \\x{400}\n  ok\n  5> io:fwrite(\"~s~n\",[[1024]]).\n  ** exception error: bad argument\n       in function  io:format/3\n          called as io:format(<0.53.0>,\"~s~n\",[[1024]])\n  ```\n\n- **`w`** - Writes data with the standard syntax. This is used to output Erlang\n  terms. Atoms are printed within quotes if they contain embedded non-printable\n  characters. Atom characters > 255 are escaped unless the Unicode translation\n  modifier (`t`) is used. Floats are printed accurately as the shortest,\n  correctly rounded string.\n\n- **`p`**{: #tilde_p } - Writes the data with standard syntax in the same way as `~w`, but\n  breaks terms whose printed representation is longer than one line into many\n  lines and indents each line sensibly. Left-justification is not supported. It\n  also tries to detect flat lists of printable characters and output these as\n  strings. For example:\n\n  ```erlang\n  1> T = [{attributes,[[{id,age,1.50000},{mode,explicit},\n  {typename,\"INTEGER\"}], [{id,cho},{mode,explicit},{typename,'Cho'}]]},\n  {typename,'Person'},{tag,{'PRIVATE',3}},{mode,implicit}].\n  ...\n  2> io:fwrite(\"~w~n\", [T]).\n  [{attributes,[[{id,age,1.5},{mode,explicit},{typename,\n  [73,78,84,69,71,69,82]}],[{id,cho},{mode,explicit},{typena\n  me,'Cho'}]]},{typename,'Person'},{tag,{'PRIVATE',3}},{mode\n  ,implicit}]\n  ok\n  3> io:fwrite(\"~62p~n\", [T]).\n  [{attributes,[[{id,age,1.5},\n                 {mode,explicit},\n                 {typename,\"INTEGER\"}],\n                [{id,cho},{mode,explicit},{typename,'Cho'}]]},\n   {typename,'Person'},\n   {tag,{'PRIVATE',3}},\n   {mode,implicit}]\n  ok\n  ```\n\n  The field width specifies the maximum line length. It defaults to 80. The\n  precision specifies the initial indentation of the term. It defaults to the\n  number of characters printed on this line in the _same_ call to `write/1` or\n  [`format/1,2,3`](`format/1`). For example, using `T` above:\n\n  ```erlang\n  4> io:fwrite(\"Here T = ~62p~n\", [T]).\n  Here T = [{attributes,[[{id,age,1.5},\n                          {mode,explicit},\n                          {typename,\"INTEGER\"}],\n                         [{id,cho},\n                          {mode,explicit},\n                          {typename,'Cho'}]]},\n            {typename,'Person'},\n            {tag,{'PRIVATE',3}},\n            {mode,implicit}]\n  ok\n  ```\n\n  As from Erlang/OTP 21.0, a field width of value `0` can be used for specifying\n  that a line is infinitely long, which means that no line breaks are inserted.\n  For example:\n\n  ```erlang\n  5> io:fwrite(\"~0p~n\", [lists:seq(1, 30)]).\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n  ok\n  ```\n\n  When the modifier `l` is specified, no detection of printable character lists\n  takes place, for example:\n\n  ```erlang\n  6> S = [{a,\"a\"}, {b, \"b\"}],\n     io:fwrite(\"~15p~n\", [S]).\n  [{a,\"a\"},\n   {b,\"b\"}]\n  ok\n  7> io:fwrite(\"~15lp~n\", [S]).\n  [{a,[97]},\n   {b,[98]}]\n  ok\n  ```\n\n  The Unicode translation modifier `t` specifies how to treat characters outside\n  the Latin-1 range of codepoints, in atoms, strings, and binaries. For example,\n  printing an atom containing a character > 255:\n\n  ```erlang\n  8> io:fwrite(\"~p~n\",[list_to_atom([1024])]).\n  '\\x{400}'\n  ok\n  9> io:fwrite(\"~tp~n\",[list_to_atom([1024])]).\n  'Ѐ'\n  ok\n  ```\n\n  By default, Erlang only detects lists of characters in the Latin-1 range as\n  strings, but the `+pc unicode` flag can be used to change this (see\n  `printable_range/0` for details). For example:\n\n  ```erlang\n  10> io:fwrite(\"~p~n\",[[214]]).\n  \"Ö\"\n  ok\n  11> io:fwrite(\"~p~n\",[[1024]]).\n  [1024]\n  ok\n  12> io:fwrite(\"~tp~n\",[[1024]]).\n  [1024]\n  ok\n  ```\n\n  but if Erlang was started with `+pc unicode`:\n\n  ```erlang\n  13> io:fwrite(\"~p~n\",[[1024]]).\n  [1024]\n  ok\n  14> io:fwrite(\"~tp~n\",[[1024]]).\n  \"Ѐ\"\n  ok\n  ```\n\n  Similarly, binaries that look like UTF-8 encoded strings are output with the\n  binary string syntax if the `t` modifier is specified:\n\n  ```erlang\n  15> io:fwrite(\"~p~n\", [<<208,128>>]).\n  <<208,128>>\n  ok\n  16> io:fwrite(\"~tp~n\", [<<208,128>>]).\n  <<\"Ѐ\"/utf8>>\n  ok\n  17> io:fwrite(\"~tp~n\", [<<128,128>>]).\n  <<128,128>>\n  ok\n  ```\n\n- **`W`** - Writes data in the same way as `~w`, but takes an extra argument\n  that is the maximum depth to which terms are printed. Anything below this\n  depth is replaced with `...`. For example, using `T` above:\n\n  ```erlang\n  8> io:fwrite(\"~W~n\", [T,9]).\n  [{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],\n  [{id,cho},{mode,...},{...}]]},{typename,'Person'},\n  {tag,{'PRIVATE',3}},{mode,implicit}]\n  ok\n  ```\n\n  If the maximum depth is reached, it cannot be read in the resultant output.\n  Also, the `,...` form in a tuple denotes that there are more elements in the\n  tuple but these are below the print depth.\n\n- **`P`** - Writes data in the same way as `~p`, but takes an extra argument\n  that is the maximum depth to which terms are printed. Anything below this\n  depth is replaced with `...`, for example:\n\n  ```erlang\n  9> io:fwrite(\"~62P~n\", [T,9]).\n  [{attributes,[[{id,age,1.5},{mode,explicit},{typename,...}],\n                [{id,cho},{mode,...},{...}]]},\n   {typename,'Person'},\n   {tag,{'PRIVATE',3}},\n   {mode,implicit}]\n  ok\n  ```\n\n- **`B`** - Writes an integer in base 2-36, the default base is 10. A leading\n  dash is printed for negative integers.\n\n  The precision field selects base, for example:\n\n  ```erlang\n  1> io:fwrite(\"~.16B~n\", [31]).\n  1F\n  ok\n  2> io:fwrite(\"~.2B~n\", [-19]).\n  -10011\n  ok\n  3> io:fwrite(\"~.36B~n\", [5*36+35]).\n  5Z\n  ok\n  ```\n\n- **`X`** - Like `B`, but takes an extra argument that is a prefix to insert\n  before the number, but after the leading dash, if any.\n\n  The prefix can be a possibly deep list of characters or an atom. Example:\n\n  ```erlang\n  1> io:fwrite(\"~X~n\", [31,\"10#\"]).\n  10#31\n  ok\n  2> io:fwrite(\"~.16X~n\", [-31,\"0x\"]).\n  -0x1F\n  ok\n  ```\n\n- **`#`** - Like `B`, but prints the number with an Erlang style `#`\\-separated\n  base prefix. Example:\n\n  ```erlang\n  1> io:fwrite(\"~.10#~n\", [31]).\n  10#31\n  ok\n  2> io:fwrite(\"~.16#~n\", [-31]).\n  -16#1F\n  ok\n  ```\n\n- **`b`** - Like `B`, but prints lowercase letters.\n\n- **`x`** - Like `X`, but prints lowercase letters.\n\n- **`+`** - Like `#`, but prints lowercase letters.\n\n- **`n`** - Writes a new line.\n\n- **`i`** - Ignores the next term.\n\nThe function returns:\n\n- **`ok`** - The formatting succeeded.\n\nIf an error occurs, there is no output. Example:\n\n```erlang\n1> io:fwrite(\"~s ~w ~i ~w ~c ~n\",['abc def', 'abc def', {foo, 1},{foo, 1}, 65]).\nabc def 'abc def'  {foo,1} A\nok\n2> io:fwrite(\"~s\", [65]).\n** exception error: bad argument\n     in function  io:format/3\n        called as io:format(<0.53.0>,\"~s\",\"A\")\n```\n\nIn this example, an attempt was made to output the single character 65 with the\naid of the string formatting directive `\"~s\"`.","ref":"io.html#fwrite/3"},{"type":"function","title":"io.get_chars/2","doc":"","ref":"io.html#get_chars/2"},{"type":"function","title":"io.get_chars/3","doc":"Reads `Count` characters from [`IoDevice`](`t:device/0`), prompting it with `Prompt`.\n\nThe function returns:\n\n- **`Data`** - The input characters. If the I/O device supports Unicode, the\n  data can represent codepoints > 255 (the `latin1` range). If the I/O server is\n  set to deliver binaries, they are encoded in UTF-8 (regardless of whether the\n  I/O device supports Unicode). If you want the data to be returned as a latin1\n  encoded binary you should use `file:read/2` instead.\n\n- **`eof`** - End of file was encountered.\n\n- **`{error, ErrorDescription}`** - Other (rare) error condition, such as\n  `{error, estale}` if reading from an NFS file system.","ref":"io.html#get_chars/3"},{"type":"function","title":"io.get_line/1","doc":"","ref":"io.html#get_line/1"},{"type":"function","title":"io.get_line/2","doc":"Reads a line from [`IoDevice`](`t:device/0`), prompting it with `Prompt`.\n\nThe function returns:\n\n- **`Data`** - The characters in the line terminated by a line feed (or end of\n  file). If the I/O device supports Unicode, the data can represent codepoints >\n  255 (the `latin1` range). If the I/O server is set to deliver binaries, they\n  are encoded in UTF-8 (regardless of if the I/O device supports Unicode). If\n  you want the data to be returned as a latin1 encoded binary you should use\n  `file:read_line/1` instead.\n\n- **`eof`** - End of file was encountered.\n\n- **`{error, ErrorDescription}`** - Other (rare) error condition, such as\n  `{error, estale}` if reading from an NFS file system.","ref":"io.html#get_line/2"},{"type":"type","title":"io.getopt/0","doc":"","ref":"io.html#t:getopt/0"},{"type":"function","title":"io.getopts/0","doc":"","ref":"io.html#getopts/0"},{"type":"function","title":"io.getopts/1","doc":"Requests all available options and their current values for a [`IoDevice`](`t:device/0`).\n\nFor example:\n\n```erlang\n1> {ok,F} = file:open(\"/dev/null\",[read]).\n{ok,<0.42.0>}\n2> io:getopts(F).\n[{binary,false},{encoding,latin1}]\n```\n\nHere the file I/O server returns all available options for a file, which are the\nexpected ones, `encoding` and `binary`. However, the standard shell has some\nmore options:\n\n```erlang\n3> io:getopts().\n[{expand_fun,#Fun },\n {echo,true},\n {binary,false},\n {encoding,unicode},\n {terminal,true},\n {stdout,true},\n {stderr,true},\n {stdin,true}]\n```\n\nThis example is, as can be seen, run in an environment where the terminal\nsupports Unicode input and output.\n\nThe `stdin`, `stdout` and `stderr` options are read only and indicates\nwhether the stream is a terminal or not. When it is a terminal, most systems that\nErlang runs on allows the use of [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code)\nto control what the terminal inputs or outputs.\n\n`terminal` is an alias for `stdout`.\n\nSee `setopts/1` for a description of the other options.","ref":"io.html#getopts/1"},{"type":"function","title":"io.nl/0","doc":"","ref":"io.html#nl/0"},{"type":"function","title":"io.nl/1","doc":"Writes new line to the standard output (`IoDevice`).","ref":"io.html#nl/1"},{"type":"type","title":"io.option/0","doc":"","ref":"io.html#t:option/0"},{"type":"function","title":"io.parse_erl_exprs/1","doc":"","ref":"io.html#parse_erl_exprs/1"},{"type":"function","title":"io.parse_erl_exprs/2","doc":"","ref":"io.html#parse_erl_exprs/2"},{"type":"function","title":"io.parse_erl_exprs/3","doc":"","ref":"io.html#parse_erl_exprs/3"},{"type":"function","title":"io.parse_erl_exprs/4","doc":"Reads data from [`IoDevice`](`t:device/0`), prompting it with `Prompt`.\n\nStarts reading at location `StartLocation`. Argument `Options` is passed\non as argument `Options` of function `erl_scan:tokens/4`. The data is tokenized\nand parsed as if it was a sequence of Erlang expressions until a final dot (`.`)\nis reached.\n\nThe function returns:\n\n- **`{ok, ExprList, EndLocation}`** - The parsing was successful.\n\n- **`{eof, EndLocation}`** - End of file was encountered by the tokenizer.\n\n- **`eof`** - End of file was encountered by the I/O server.\n\n- **`{error, ErrorInfo, ErrorLocation}`** - An error occurred while tokenizing\n  or parsing.\n\n- **`{error, ErrorDescription}`** - Other (rare) error condition, such as\n  `{error, estale}` if reading from an NFS file system.\n\nExample:\n\n```erlang\n25> io:parse_erl_exprs('enter>').\nenter>abc(), \"hey\".\n{ok, [{call,1,{atom,1,abc},[]},{string,1,\"hey\"}],2}\n26> io:parse_erl_exprs('enter>').\nenter>abc(\"hey\".\n{error,{1,erl_parse,[\"syntax error before: \",[\"'.'\"]]},2}\n```","ref":"io.html#parse_erl_exprs/4"},{"type":"function","title":"io.parse_erl_form/1","doc":"","ref":"io.html#parse_erl_form/1"},{"type":"function","title":"io.parse_erl_form/2","doc":"","ref":"io.html#parse_erl_form/2"},{"type":"function","title":"io.parse_erl_form/3","doc":"","ref":"io.html#parse_erl_form/3"},{"type":"function","title":"io.parse_erl_form/4","doc":"Reads data from [`IoDevice`](`t:device/0`), prompting it with `Prompt`.\n\nStarts reading at location `StartLocation`. Argument `Options` is passed\non as argument `Options` of function `erl_scan:tokens/4`. The data is tokenized\nand parsed as if it was an Erlang form (one of the valid Erlang expressions in\nan Erlang source file) until a final dot (`.`) is reached.\n\nThe function returns:\n\n- **`{ok, AbsForm, EndLocation}`** - The parsing was successful.\n\n- **`{eof, EndLocation}`** - End of file was encountered by the tokenizer.\n\n- **`eof`** - End of file was encountered by the I/O server.\n\n- **`{error, ErrorInfo, ErrorLocation}`** - An error occurred while tokenizing\n  or parsing.\n\n- **`{error, ErrorDescription}`** - Other (rare) error condition, such as\n  `{error, estale}` if reading from an NFS file system.","ref":"io.html#parse_erl_form/4"},{"type":"type","title":"io.parse_form_ret/0","doc":"","ref":"io.html#t:parse_form_ret/0"},{"type":"type","title":"io.parse_ret/0","doc":"","ref":"io.html#t:parse_ret/0"},{"type":"function","title":"io.printable_range/0","doc":"Returns the user-requested range of printable Unicode characters.\n\nThe user can request a range of characters that are to be considered printable\nin heuristic detection of strings by the shell and by the formatting functions.\nThis is done by supplying `+pc  ` when starting Erlang.\n\nThe only valid values for ` ` are `latin1` and `unicode`. `latin1` means\nthat only code points < 256 (except control characters, and so on) are\nconsidered printable. `unicode` means that all printable characters in all\nUnicode character ranges are considered printable by the I/O functions.\n\nBy default, Erlang is started so that only the `latin1` range of characters\nindicate that a list of integers is a string.\n\nThe simplest way to use the setting is to call `io_lib:printable_list/1`, which\nuses the return value of this function to decide if a list is a string of\nprintable characters.\n\n> #### Note {: .info }\n>\n> In a future release, this function may return more values and ranges. To avoid\n> compatibility problems, it is recommended to use function\n> `io_lib:printable_list/1`.","ref":"io.html#printable_range/0"},{"type":"type","title":"io.prompt/0","doc":"","ref":"io.html#t:prompt/0"},{"type":"function","title":"io.put_chars/1","doc":"","ref":"io.html#put_chars/1"},{"type":"function","title":"io.put_chars/2","doc":"Writes the characters of `CharData` to the [`IoDevice`](`t:device/0`).\n\nIf you want to write latin1 encoded bytes to the [`IoDevice`](`t:device/0`) you should use\n`file:write/2` instead.","ref":"io.html#put_chars/2"},{"type":"function","title":"io.read/1","doc":"","ref":"io.html#read/1"},{"type":"function","title":"io.read/2","doc":"Reads a term `Term` from the standard input (`IoDevice`), prompting it with\n`Prompt`.\n\nThe function returns:\n\n- **`{ok, Term}`** - The parsing was successful.\n\n- **`eof`** - End of file was encountered.\n\n- **`{error, ErrorInfo}`** - The parsing failed.\n\n- **`{error, ErrorDescription}`** - Other (rare) error condition, such as\n  `{error, estale}` if reading from an NFS file system.","ref":"io.html#read/2"},{"type":"function","title":"io.read/3","doc":"","ref":"io.html#read/3"},{"type":"function","title":"io.read/4","doc":"Reads a term `Term` from [`IoDevice`](`t:device/0`), prompting it with `Prompt`.\n\nReading starts at location `StartLocation`. Argument `Options` is passed on as\nargument `Options` of function `erl_scan:tokens/4`.\n\nThe function returns:\n\n- **`{ok, Term, EndLocation}`** - The parsing was successful.\n\n- **`{eof, EndLocation}`** - End of file was encountered.\n\n- **`{error, ErrorInfo, ErrorLocation}`** - The parsing failed.\n\n- **`{error, ErrorDescription}`** - Other (rare) error condition, such as\n  `{error, estale}` if reading from an NFS file system.","ref":"io.html#read/4"},{"type":"function","title":"io.rows/0","doc":"","ref":"io.html#rows/0"},{"type":"function","title":"io.rows/1","doc":"Retrieves the number of rows of [`IoDevice`](`t:device/0`) (that is, the height of a terminal).\n\nThe function only succeeds for terminal devices, for all other I/O devices the\nfunction returns `{error, enotsup}`.","ref":"io.html#rows/1"},{"type":"function","title":"io.scan_erl_exprs/1","doc":"","ref":"io.html#scan_erl_exprs/1"},{"type":"function","title":"io.scan_erl_exprs/2","doc":"","ref":"io.html#scan_erl_exprs/2"},{"type":"function","title":"io.scan_erl_exprs/3","doc":"","ref":"io.html#scan_erl_exprs/3"},{"type":"function","title":"io.scan_erl_exprs/4","doc":"Reads data from [`IoDevice`](`t:device/0`), prompting it with `Prompt`.\n\nReading starts at location `StartLocation`. Argument `Options` is passed on as\nargument `Options` of function `erl_scan:tokens/4`. The data is tokenized\nas if it were a sequence of Erlang expressions until a final dot (`.`) is\nreached. This token is also returned.\n\nThe function returns:\n\n- **`{ok, Tokens, EndLocation}`** - The tokenization succeeded.\n\n- **`{eof, EndLocation}`** - End of file was encountered by the tokenizer.\n\n- **`eof`** - End of file was encountered by the I/O server.\n\n- **`{error, ErrorInfo, ErrorLocation}`** - An error occurred while tokenizing.\n\n- **`{error, ErrorDescription}`** - Other (rare) error condition, such as\n  `{error, estale}` if reading from an NFS file system.\n\n_Example:_\n\n```erlang\n23> io:scan_erl_exprs('enter>').\nenter>abc(), \"hey\".\n{ok,[{atom,1,abc},{'(',1},{')',1},{',',1},{string,1,\"hey\"},{dot,1}],2}\n24> io:scan_erl_exprs('enter>').\nenter>1.0er.\n{error,{1,erl_scan,{illegal,float}},2}\n```","ref":"io.html#scan_erl_exprs/4"},{"type":"function","title":"io.scan_erl_form/1","doc":"","ref":"io.html#scan_erl_form/1"},{"type":"function","title":"io.scan_erl_form/2","doc":"","ref":"io.html#scan_erl_form/2"},{"type":"function","title":"io.scan_erl_form/3","doc":"","ref":"io.html#scan_erl_form/3"},{"type":"function","title":"io.scan_erl_form/4","doc":"Reads data from [`IoDevice`](`t:device/0`), prompting it with `Prompt`.\n\nStarts reading at location `StartLocation` (`1`). Argument `Options` is passed\non as argument `Options` of function `erl_scan:tokens/4`. The data is tokenized\nas if it was an Erlang form (one of the valid Erlang expressions in an Erlang\nsource file) until a final dot (`.`) is reached. This last token is also\nreturned.\n\nThe return values are the same as for [`scan_erl_exprs/4`](`scan_erl_exprs/4`).","ref":"io.html#scan_erl_form/4"},{"type":"type","title":"io.server_no_data/0","doc":"What the I/O server sends when there is no data.","ref":"io.html#t:server_no_data/0"},{"type":"type","title":"io.setopt/0","doc":"","ref":"io.html#t:setopt/0"},{"type":"function","title":"io.setopts/1","doc":"","ref":"io.html#setopts/1"},{"type":"function","title":"io.setopts/2","doc":"Set options for [`IoDevice`](`t:device/0`). Possible options and values vary\ndepending on the I/O device.\n\nFor a list of supported options and their current values on a specific I/O\ndevice, use function `getopts/1`.\n\nThe options and values supported by the OTP I/O devices are as follows:\n\n- **`binary`, `list`, or `{binary, boolean()}`** - If set in binary mode\n  (`binary` or `{binary, true}`), the I/O server sends binary data (encoded in\n  UTF-8) as answers to the `get_line`, `get_chars`, and, if possible,\n  `get_until` requests (for details, see section\n  [The Erlang I/O Protocol](io_protocol.md)) in the User's Guide). The immediate\n  effect is that [`get_chars/2,3`](`get_chars/2`) and\n  [`get_line/1,2`](`get_line/1`) return UTF-8 binaries instead of lists of\n  characters for the affected I/O device.\n\n  By default, all I/O devices in OTP are set in `list` mode. However, the I/O\n  functions can handle any of these modes and so should other, user-written,\n  modules behaving as clients to I/O servers.\n\n  This option is supported by the `t:standard_io/0`, `t:user/0` and `t:file:io_server/0`\n   I/O servers.\n\n- **`{echo, boolean()}`** - Denotes if the terminal is to echo input. Only\n  supported for the standard shell I/O server (`group.erl`)\n\n- **`{expand_fun, expand_fun()}`** - Provides a function for tab-completion\n  (expansion) like the Erlang shell. This function is called when the user\n  presses the _Tab_ key. The expansion is active when calling line-reading\n  functions, such as [`get_line/1,2`](`get_line/1`).\n\n  The function is called with the current line, up to the cursor, as a reversed\n  string. It is to return a three-tuple: `{yes|no, string(), list()}`. The first\n  element gives a beep if `no`, otherwise the expansion is silent; the second is\n  a string that will be entered at the cursor position; the third is a list of\n  possible expansions. If this list is not empty, it is printed below the\n  current input line. The list of possible expansions can be formatted in\n  different ways to make more advanced expansion suggestions more readable to\n  the user, see `edlin_expand:expand/2` for documentation of that.\n\n  Trivial example (beep on anything except empty line, which is expanded to\n  `\"quit\"`):\n\n  ```erlang\n  fun(\"\") -> {yes, \"quit\", []};\n     (_) -> {no, \"\", [\"quit\"]} end\n  ```\n\n  This option is only supported by the standard shell (`group.erl`).\n\n- **`{log, none | output | input | all}`** - Tells the I/O server that it should log\n  I/O requests. Requests will be logged at [`info` level](`t:logger:level/0`) to the\n  `[otp, kernel, io, input | output | ctrl]` domain with the following report:\n\n  ```erl\n  #{ request := IoRequest, server := pid(), server_name => term() }.\n  ```\n\n  It is important to note that extra care should be taken so that these log reports are not\n  logged to `t:standard_io/0` as that may cause the system to enter an infinite loop.\n\n  Example:\n\n  ```\n  1> logger:set_primary_config(level, info).\n  ok\n  2> logger:add_handler(stdout, logger_std_h, #{ config => #{ file => \"stdout.log\" }}).\n  ok\n  3> io:setopts(user, [{log, output}]).\n  ok\n  4> io:format(user, \"Hello~n\", []).\n  Hello\n  ok\n  5> file:read_file(\"stdout.log\").\n  {ok,<<\"2024-11-14T09:53:49.275085+01:00 info: <0.89.0> wrote to user, Hello\\n\">>}\n  ```\n\n  Not all I/O servers support this option. Use `io:getopts/1` to check if it is available.\n\n  > #### Note {: .info }\n  >\n  > The I/O servers in Erlang/OTP will set the [logger domain](`logger_filters:domain/2`)\n  > to `[otp, kernel, io, input | output]`. The default `m:logger` handler will not print\n  > this domain, so you need to enable it. This can be done by adding a new filter like this:\n  >\n  > ```erl\n  > logger:add_handler_filter(default, io_domain,\n  >    {fun logger_filters:domain/2, {log,sub,[otp,kernel,io]}}).\n  > ```\n\n- **`{encoding, latin1 | unicode}`** - Specifies how characters are input or\n  output from or to the I/O device, implying that, for example, a terminal is\n  set to handle Unicode input and output or a file is set to handle UTF-8 data\n  encoding.\n\n  The option _does not_ affect how data is returned from the I/O functions or\n  how it is sent in the I/O protocol, it only affects how the I/O device is to\n  handle Unicode characters to the \"physical\" device.\n\n  The standard shell is set for `unicode` or `latin1` encoding when the system\n  is started. The encoding is set with the help of the `LANG` or `LC_CTYPE`\n  environment variables on Unix-like system or by other means on other systems.\n  So, the user can input Unicode characters and the I/O device is in\n  `{encoding, unicode}` mode if the I/O device supports it. The mode can be\n  changed, if the assumption of the runtime system is wrong, by setting this\n  option.\n\n  > #### Note {: .info }\n  >\n  > Prior to OTP 26.0, when Erlang was started with the `-oldshell` or\n  > `-noshell` flags (for example, in an `escript`), the default encoding for\n  > [`standard_io`](`t:standard_io/0`) was set to `latin1`, meaning that any\n  > characters > codepoint 255 were escaped and that input was expected to be\n  > plain 8-bit ISO Latin-1. As of OTP 26.0, [`standard_io`](`t:standard_io/0`)\n  > always defaults to `unicode` if its supported, otherwise `latin1`.\n  >\n  > If you want to send raw bytes on [`standard_io`](`t:standard_io/0`), you now\n  > always need to explicitly set the encoding to `latin1`; otherwise, code\n  > points 128-255 will be converted to UTF-8. This is best done by setting the\n  > kernel configuration parameter\n  > [standard_io_encoding](`e:kernel:kernel_app.md#standard_io_encoding`) to\n  > `latin1`.\n\n  Files can also be set in `{encoding, unicode}`, meaning that data is written\n  and read as UTF-8. More encodings are possible for files, see below.\n\n  `{encoding, unicode | latin1}` is supported by both the standard shell\n  (`group.erl` including `werl` on Windows), the 'oldshell' (`user.erl`), and\n  the file I/O servers.\n\n- **`{encoding, utf8 | utf16 | utf32 | {utf16,big} | {utf16,little} | {utf32,big} | {utf32,little}}`** -\n  For disk files, the encoding can be set to various UTF variants. This has the\n  effect that data is expected to be read as the specified encoding from the\n  file, and the data is written in the specified encoding to the disk file.\n\n  `{encoding, utf8}` has the same effect as `{encoding, unicode}` on files.\n\n  The extended encodings are only supported on disk files (opened by function\n  `file:open/2`).","ref":"io.html#setopts/2"},{"type":"type","title":"io.standard_error/0","doc":"The I/O device `standard_error` can be used to direct output to whatever the\ncurrent operating system considers a suitable I/O device for error output. This\ncan be useful when standard output is redirected.\n\nExample on a Unix-like operating system:\n\n```text\n$ erl -noinput -eval 'io:format(standard_error,\"Error: ~s~n\",[\"error 11\"]),'\\\n'init:stop().' > /dev/null\nError: error 11\n```","ref":"io.html#t:standard_error/0"},{"type":"type","title":"io.standard_io/0","doc":"The default standard I/O device assigned to a process. This device is used when\nno `IoDevice` argument is specified in the function calls in this module.\n\nIt is sometimes desirable to use an explicit `IoDevice` argument that\nrefers to the default I/O device. This is the case with functions that can\naccess either a file or the default I/O device. The atom `standard_io` has this\nspecial meaning. The following example illustrates this:\n\n```erlang\n27> io:read('enter>').\nenter>foo.\n{ok,foo}\n28> io:read(standard_io, 'enter>').\nenter>bar.\n{ok,bar}\n```\n\nBy default all I/O sent to `standard_io` will end up in the [`user`](`t:user/0`)\nI/O device of the node that spawned the calling process.\n\n`standard_io` is an alias for [`group_leader/0`](`erlang:group_leader/0`), so in\norder to change where the default input/output requests are sent you can change\nthe group leader of the current process using\n[`group_leader(NewGroupLeader, self())`](`erlang:group_leader/2`).","ref":"io.html#t:standard_io/0"},{"type":"type","title":"io.user/0","doc":"An I/O device that can be used to interact with the node local `stdout` and\n`stdin`. This can be either a terminal, a pipe, a file, or a combination.\n\nUse `getopts/1` to get more information about the I/O device.\n\nSee [The Interactive Shell](unicode_usage.md#the-interactive-shell) and\n[Escripts and non-interactive I/O](unicode_usage.md#escripts-and-non-interactive-i-o)\nin the Using Unicode In Erlang User's Guide for details on how Unicode is\nhandled by `user`.","ref":"io.html#t:user/0"},{"type":"function","title":"io.write/1","doc":"","ref":"io.html#write/1"},{"type":"function","title":"io.write/2","doc":"Writes term `Term` to [`IoDevice`](`t:device/0`).","ref":"io.html#write/2"},{"type":"module","title":"io_lib","doc":"I/O library functions.\n\nThis module contains functions for converting to and from strings (lists of\ncharacters). They are used for implementing the functions in the `m:io` module.\nThere is no guarantee that the character lists returned from some of the\nfunctions are flat, they can be deep lists. Function `lists:flatten/1` can be\nused for flattening deep lists.","ref":"io_lib.html"},{"type":"function","title":"io_lib.build_text/1","doc":"For details, see `scan_format/2`.","ref":"io_lib.html#build_text/1"},{"type":"function","title":"io_lib.char_list/1","doc":"Returns `true` if `Term` is a flat list of characters in the Unicode range,\notherwise `false`.","ref":"io_lib.html#char_list/1"},{"type":"type","title":"io_lib.chars/0","doc":"An possibly deep list containing only `t:char/0`s.","ref":"io_lib.html#t:chars/0"},{"type":"type","title":"io_lib.chars_limit/0","doc":"","ref":"io_lib.html#t:chars_limit/0"},{"type":"opaque","title":"io_lib.continuation/0","doc":"A continuation as returned by `fread/3`.","ref":"io_lib.html#t:continuation/0"},{"type":"function","title":"io_lib.deep_char_list/1","doc":"Returns `true` if `Term` is a, possibly deep, list of characters in the Unicode\nrange, otherwise `false`.","ref":"io_lib.html#deep_char_list/1"},{"type":"function","title":"io_lib.deep_latin1_char_list/1","doc":"Returns `true` if `Term` is a, possibly deep, list of characters in the ISO\nLatin-1 range, otherwise `false`.","ref":"io_lib.html#deep_latin1_char_list/1"},{"type":"type","title":"io_lib.depth/0","doc":"","ref":"io_lib.html#t:depth/0"},{"type":"function","title":"io_lib.format/2","doc":"","ref":"io_lib.html#format/2"},{"type":"function","title":"io_lib.format/3","doc":"","ref":"io_lib.html#format/3"},{"type":"type","title":"io_lib.format_spec/0","doc":"A map describing the contents of a format string.\n\n- `control_char` is the type of control sequence: `$P`, `$w`, and so on.\n- `args` is a list of the arguments used by the control sequence, or an empty\n  list if the control sequence does not take any arguments.\n- `width` is the field width.\n- `adjust` is the adjustment.\n- `precision` is the precision of the printed argument.\n- `pad_char` is the padding character.\n- `encoding` is set to `true` if translation modifier `t` is present.\n- `strings` is set to `false` if modifier `l` is present.\n- `maps_order` is set to `undefined` by default, `ordered` if modifier `k` is\n  present, or `reversed` or `CmpFun` if modifier `K` is present.","ref":"io_lib.html#t:format_spec/0"},{"type":"function","title":"io_lib.fread/2","doc":"Tries to read `String` in accordance with the control sequences in `Format`.\n\nFor a detailed description of the available formatting options, see `io:fread/3`.\nIt is assumed that `String` contains whole lines.\n\nThe function returns:\n\n- **`{ok, InputList, LeftOverChars}`** - The string was read. `InputList` is the\n  list of successfully matched and read items, and `LeftOverChars` are the input\n  characters not used.\n\n- **`{more, RestFormat, Nchars, InputStack}`** - The string was read, but more\n  input is needed to complete the original format string. `RestFormat` is the\n  remaining format string, `Nchars` is the number of characters scanned, and\n  `InputStack` is the reversed list of inputs matched up to that point.\n\n- **`{error, What}`** - The read operation failed and parameter `What` gives a\n  hint about the error.\n\n_Example:_\n\n```erlang\n3> io_lib:fread(\"~f~f~f\", \"15.6 17.3e-6 24.5\").\n{ok,[15.6,1.73e-5,24.5],[]}\n```","ref":"io_lib.html#fread/2"},{"type":"function","title":"io_lib.fread/3","doc":"This is the re-entrant formatted reader. The continuation of the first call to\nthe functions must be `[]`.\n\nFor a complete description of how the re-entrant input scheme works,\nsee Armstrong, Virding, Williams: 'Concurrent Programming in\nErlang', Chapter 13.\n\nThe function returns:\n\n- **`{done, Result, LeftOverChars}`** - The input is complete. The result is one\n  of the following:\n\n  - **`{ok, InputList}`** - The string was read. `InputList` is the list of\n    successfully matched and read items, and `LeftOverChars` are the remaining\n    characters.\n\n  - **`eof`** - End of file was encountered. `LeftOverChars` are the input\n    characters not used.\n\n  - **`{error, What}`** - An error occurred and parameter `What` gives a hint\n    about the error.\n\n- **`{more, Continuation}`** - More data is required to build a term.\n  `Continuation` must be passed to [`fread/3`](`fread/3`) when more data becomes\n  available.","ref":"io_lib.html#fread/3"},{"type":"type","title":"io_lib.fread_error/0","doc":"","ref":"io_lib.html#t:fread_error/0"},{"type":"type","title":"io_lib.fread_item/0","doc":"","ref":"io_lib.html#t:fread_item/0"},{"type":"function","title":"io_lib.fwrite/2","doc":"Returns a character list that represents `Data` formatted in accordance with\n`Format`.\n\nFor a detailed description of the available formatting options, see\n[`io:fwrite/1,2,3`](`io:fwrite/1`). If the format string or argument list\ncontains an error, a fault is generated.\n\nIf and only if the Unicode translation modifier is used in the format string\n(that is, `~ts` or `~tc`), the resulting list can contain characters beyond the\nISO Latin-1 character range (that is, numbers > 255). If so, the result is still\nan ordinary Erlang `t:string/0`, and can well be used in any context where\nUnicode data is allowed.","ref":"io_lib.html#fwrite/2"},{"type":"function","title":"io_lib.fwrite/3","doc":"Returns a character list that represents `Data` formatted in accordance with\n`Format` in the same way as `fwrite/2` and `format/2`, but takes an extra\nargument, a list of options.\n\nValid option:\n\n- **`{chars_limit, CharsLimit}`** - A soft limit on the number of characters\n  returned. When the number of characters is reached, remaining structures are\n  replaced by \"`...`\". `CharsLimit` defaults to -1, which means no limit on the\n  number of characters returned.","ref":"io_lib.html#fwrite/3"},{"type":"function","title":"io_lib.indentation/2","doc":"Returns the indentation if `String` has been printed, starting at `StartIndent`.","ref":"io_lib.html#indentation/2"},{"type":"function","title":"io_lib.latin1_char_list/1","doc":"Returns `true` if `Term` is a flat list of characters in the ISO Latin-1 range,\notherwise `false`.","ref":"io_lib.html#latin1_char_list/1"},{"type":"type","title":"io_lib.latin1_string/0","doc":"","ref":"io_lib.html#t:latin1_string/0"},{"type":"function","title":"io_lib.nl/0","doc":"Returns a character list that represents a new line character.","ref":"io_lib.html#nl/0"},{"type":"function","title":"io_lib.print/1","doc":"","ref":"io_lib.html#print/1"},{"type":"function","title":"io_lib.print/4","doc":"Returns a list of characters that represents `Term`, but breaks representations\nlonger than one line into many lines and indents each line sensibly.\n\nAlso tries to detect and output lists of printable characters as strings.\n\n- `Column` is the starting column; defaults to 1.\n- `LineLength` is the maximum line length; defaults to 80.\n- `Depth` is the maximum print depth; defaults to -1, which means no limitation.","ref":"io_lib.html#print/4"},{"type":"function","title":"io_lib.printable_latin1_list/1","doc":"Returns `true` if `Term` is a flat list of printable ISO Latin-1 characters,\notherwise `false`.","ref":"io_lib.html#printable_latin1_list/1"},{"type":"function","title":"io_lib.printable_list/1","doc":"Returns `true` if `Term` is a flat list of printable characters, otherwise\n`false`.\n\nWhat is a printable character in this case is determined by startup flag `+pc`\nto the Erlang VM; see `io:printable_range/0` and\n[`erl(1)`](`e:erts:erl_cmd.md`).","ref":"io_lib.html#printable_list/1"},{"type":"function","title":"io_lib.printable_unicode_list/1","doc":"Returns `true` if `Term` is a flat list of printable Unicode characters,\notherwise `false`.","ref":"io_lib.html#printable_unicode_list/1"},{"type":"function","title":"io_lib.scan_format/2","doc":"Returns a list corresponding to the specified format string, where control\nsequences have been replaced with corresponding tuples. This list can be passed\nto:\n\n- `build_text/1` to have the same effect as [`format(Format, Args)`](`format/2`)\n- `unscan_format/1` to get the corresponding pair of `Format` and `Args` (with\n  every `*` and corresponding argument expanded to numeric values)\n\nA typical use of this function is to replace unbounded-size control sequences\nlike `~w` and `~p` with the depth-limited variants `~W` and `~P` before\nformatting to text in, for example, a logger.","ref":"io_lib.html#scan_format/2"},{"type":"function","title":"io_lib.unscan_format/1","doc":"For details, see `scan_format/2`.","ref":"io_lib.html#unscan_format/1"},{"type":"function","title":"io_lib.write/1","doc":"","ref":"io_lib.html#write/1"},{"type":"function","title":"io_lib.write/2","doc":"Returns a character list that represents `Term`. Option `Depth` controls the\ndepth of the structures written.\n\nWhen the specified depth is reached, everything below this level is replaced by\n\"`...`\".\n\n`Depth` defaults to -1, which means no limitation. Option `CharsLimit` puts a\nsoft limit on the number of characters returned. When the number of characters is\nreached, remaining structures are replaced by \"`...`\". `CharsLimit` defaults to -1,\nwhich means no limit on the number of characters returned.\n\n_Example:_\n\n```erlang\n1> lists:flatten(io_lib:write({1,[2],[3],[4,5],6,7,8,9})).\n\"{1,[2],[3],[4,5],6,7,8,9}\"\n2> lists:flatten(io_lib:write({1,[2],[3],[4,5],6,7,8,9}, 5)).\n\"{1,[2],[3],[...],...}\"\n3> lists:flatten(io_lib:write({[1,2,3],[4,5],6,7,8,9}, [{chars_limit,20}])).\n\"{[1,2|...],[4|...],...}\"\n```","ref":"io_lib.html#write/2"},{"type":"function","title":"io_lib.write_atom/1","doc":"Returns the list of characters needed to print atom `Atom`.","ref":"io_lib.html#write_atom/1"},{"type":"function","title":"io_lib.write_atom_as_latin1/1","doc":"Returns the list of characters needed to print atom `Atom`. Non-Latin-1\ncharacters are escaped.","ref":"io_lib.html#write_atom_as_latin1/1"},{"type":"function","title":"io_lib.write_char/1","doc":"Returns the list of characters needed to print a character constant in the\nUnicode character set.","ref":"io_lib.html#write_char/1"},{"type":"function","title":"io_lib.write_char_as_latin1/1","doc":"Returns the list of characters needed to print a character constant in the\nUnicode character set. Non-Latin-1 characters are escaped.","ref":"io_lib.html#write_char_as_latin1/1"},{"type":"function","title":"io_lib.write_latin1_char/1","doc":"Returns the list of characters needed to print a character constant in the ISO\nLatin-1 character set.","ref":"io_lib.html#write_latin1_char/1"},{"type":"function","title":"io_lib.write_latin1_string/1","doc":"Returns the list of characters needed to print `Latin1String` as a string.","ref":"io_lib.html#write_latin1_string/1"},{"type":"function","title":"io_lib.write_string/1","doc":"Returns the list of characters needed to print `String` as a string.","ref":"io_lib.html#write_string/1"},{"type":"function","title":"io_lib.write_string_as_latin1/1","doc":"Returns the list of characters needed to print `String` as a string. Non-Latin-1\ncharacters are escaped.","ref":"io_lib.html#write_string_as_latin1/1"},{"type":"module","title":"re","doc":"This module contains regular expression matching functions for strings and\nbinaries.\n\nThe [regular expression](`m:re#module-perl-like-regular-expression-syntax`) syntax and\nsemantics resemble that of Perl.\n\nThe matching algorithms of the library are based on the PCRE library, but not\nall of the PCRE library is interfaced and some parts of the library go beyond\nwhat PCRE offers. Currently PCRE version 8.40 (release date 2017-01-11) is used.\nThe sections of the PCRE documentation that are relevant to this module are\nincluded here.\n\n> #### Note {: .info }\n>\n> The Erlang literal syntax for strings uses the `\\\\` (backslash) character as\n> an escape code. You need to escape backslashes in literal strings, both in\n> your code and in the shell, with an extra backslash, that is, `\"\\\\\\\\\"` or\n> `<<\"\\\\\\\\\">>`.\n>\n> Since Erlang/OTP 27 you can use [verbatim sigils](`e:system:data_types.md#sigil`)\n> to write literal strings. The example above would be written as `~S\"\\\"` or `~B\"\\\"`.","ref":"re.html"},{"type":"module","title":"Perl-Like Regular Expression Syntax - re","doc":"The following sections contain reference material for the regular expressions\nused by this module. The information is based on the PCRE documentation, with\nchanges where this module behaves differently to the PCRE library.","ref":"re.html#module-perl-like-regular-expression-syntax"},{"type":"module","title":"PCRE Regular Expression Details - re","doc":"The syntax and semantics of the regular expressions supported by PCRE are\ndescribed in detail in the following sections. Perl's regular expressions are\ndescribed in its own documentation, and regular expressions in general are\ncovered in many books, some with copious examples. Jeffrey Friedl's \"Mastering\nRegular Expressions\", published by O'Reilly, covers regular expressions in great\ndetail. This description of the PCRE regular expressions is intended as\nreference material.\n\nThe reference material is divided into the following sections:\n\n- [Special Start-of-Pattern Items](`m:re#sect1`)\n- [Characters and Metacharacters](`m:re#sect2`)\n- [Backslash](`m:re#sect3`)\n- [Circumflex and Dollar](`m:re#sect4`)\n- [Full Stop (Period, Dot) and \\\\N](`m:re#sect5`)\n- [Matching a Single Data Unit](`m:re#sect6`)\n- [Square Brackets and Character Classes](`m:re#sect7`)\n- [Posix Character Classes](`m:re#sect8`)\n- [Vertical Bar](`m:re#sect9`)\n- [Internal Option Setting](`m:re#sect10`)\n- [Subpatterns](`m:re#sect11`)\n- [Duplicate Subpattern Numbers](`m:re#sect12`)\n- [Named Subpatterns](`m:re#sect13`)\n- [Repetition](`m:re#sect14`)\n- [Atomic Grouping and Possessive Quantifiers](`m:re#sect15`)\n- [Back References](`m:re#sect16`)\n- [Assertions](`m:re#sect17`)\n- [Conditional Subpatterns](`m:re#sect18`)\n- [Comments](`m:re#sect19`)\n- [Recursive Patterns](`m:re#sect20`)\n- [Subpatterns as Subroutines](`m:re#sect21`)\n- [Oniguruma Subroutine Syntax](`m:re#sect22`)\n- [Backtracking Control](`m:re#sect23`)\n\n[](){: #sect1 }","ref":"re.html#module-pcre-regular-expression-details"},{"type":"module","title":"Special Start-of-Pattern Items - re","doc":"Some options that can be passed to `compile/2` can also be set by special items\nat the start of a pattern. These are not Perl-compatible, but are provided to\nmake these options accessible to pattern writers who are not able to change the\nprogram that processes the pattern. Any number of these items can appear, but\nthey must all be together right at the start of the pattern string, and the\nletters must be in upper case.\n\n_UTF Support_\n\nUnicode support is basically UTF-8 based. To use Unicode characters, you either\ncall `compile/2` or `run/3` with option `unicode`, or the pattern must start\nwith one of these special sequences:\n\n```text\n(*UTF8)\n(*UTF)\n```\n\nBoth options give the same effect, the input string is interpreted as UTF-8.\nNotice that with these instructions, the automatic conversion of lists to UTF-8\nis not performed by the `re` functions. Therefore, using these sequences is not\nrecommended. Add option `unicode` when running `compile/2` instead.\n\nSome applications that allow their users to supply patterns can wish to restrict\nthem to non-UTF data for security reasons. If option `never_utf` is set at\ncompile time, (\\*UTF), and so on, are not allowed, and their appearance causes\nan error.\n\n_Unicode Property Support_\n\nThe following is another special sequence that can appear at the start of a\npattern:\n\n```text\n(*UCP)\n```\n\nThis has the same effect as setting option `ucp`: it causes sequences such as\n`\\d` and `\\w` to use Unicode properties to determine character types, instead of\nrecognizing only characters with codes < 256 through a lookup table.\n\n_Disabling Startup Optimizations_\n\nIf a pattern starts with `(*NO_START_OPT)`, it has the same effect as setting\noption `no_start_optimize` at compile time.\n\n_Newline Conventions_\n\n[](){: #newline_conventions }\n\nPCRE supports five conventions for indicating line breaks in strings: a single\nCR (carriage return) character, a single LF (line feed) character, the\ntwo-character sequence CRLF, any of the three preceding, and any Unicode newline\nsequence.\n\nA newline convention can also be specified by starting a pattern string with one\nof the following five sequences:\n\n- **(\\*CR)** - Carriage return\n\n- **(\\*LF)** - Line feed\n\n- **(\\*CRLF)** - >Carriage return followed by line feed\n\n- **(\\*ANYCRLF)** - Any of the three above\n\n- **(\\*ANY)** - All Unicode newline sequences\n\nThese override the default and the options specified to `compile/2`. For\nexample, the following pattern changes the convention to CR:\n\n```text\n(*CR)a.b\n```\n\nThis pattern matches `a\\nb`, as LF is no longer a newline. If more than one of\nthem is present, the last one is used.\n\nThe newline convention affects where the circumflex and dollar assertions are\ntrue. It also affects the interpretation of the dot metacharacter when `dotall`\nis not set, and the behavior of `\\N`. However, it does not affect what the `\\R`\nescape sequence matches. By default, this is any Unicode newline sequence, for\nPerl compatibility. However, this can be changed; see the description of `\\R` in\nsection [Newline Sequences](`m:re#newline_sequences`). A change of the `\\R`\nsetting can be combined with a change of the newline convention.\n\n_Setting Match and Recursion Limits_\n\nThe caller of `run/3` can set a limit on the number of times the internal\nmatch() function is called and on the maximum depth of recursive calls. These\nfacilities are provided to catch runaway matches that are provoked by patterns\nwith huge matching trees (a typical example is a pattern with nested unlimited\nrepeats) and to avoid running out of system stack by too much recursion. When\none of these limits is reached, `pcre_exec()` gives an error return. The limits\ncan also be set by items at the start of the pattern of the following forms:\n\n```text\n(*LIMIT_MATCH=d)\n(*LIMIT_RECURSION=d)\n```\n\nHere d is any number of decimal digits. However, the value of the setting must\nbe less than the value set by the caller of [`run/3`](`run/3`) for it to have\nany effect. That is, the pattern writer can lower the limit set by the\nprogrammer, but not raise it. If there is more than one setting of one of these\nlimits, the lower value is used.\n\nThe default value for both the limits is 10,000,000 in the Erlang VM. Notice\nthat the recursion limit does not affect the stack depth of the VM, as PCRE for\nErlang is compiled in such a way that the match function never does recursion on\nthe C stack.\n\nNote that `LIMIT_MATCH` and `LIMIT_RECURSION` can only reduce the value of the\nlimits set by the caller, not increase them.\n\n[](){: #sect2 }","ref":"re.html#module-special-start-of-pattern-items"},{"type":"module","title":"Characters and Metacharacters - re","doc":"A regular expression is a pattern that is matched against a subject string from\nleft to right. Most characters stand for themselves in a pattern and match the\ncorresponding characters in the subject. As a trivial example, the following\npattern matches a portion of a subject string that is identical to itself:\n\n```text\nThe quick brown fox\n```\n\nWhen caseless matching is specified (option `caseless`), letters are matched\nindependently of case.\n\nThe power of regular expressions comes from the ability to include alternatives\nand repetitions in the pattern. These are encoded in the pattern by the use of\n_metacharacters_, which do not stand for themselves but instead are interpreted\nin some special way.\n\nTwo sets of metacharacters exist: those that are recognized anywhere in the\npattern except within square brackets, and those that are recognized within\nsquare brackets. Outside square brackets, the metacharacters are as follows:\n\n- **`\\`** - General escape character with many uses\n\n- **`^`** - Assert start of string (or line, in multiline mode)\n\n- **`$`** - Assert end of string (or line, in multiline mode)\n\n- **`.`** - Match any character except newline (by default)\n\n- **`[`** - Start character class definition\n\n- **`|`** - Start of alternative branch\n\n- **`(`** - Start subpattern\n\n- **`)`** - End subpattern\n\n- **`?`** - Extends the meaning of (, also 0 or 1 quantifier, also quantifier\n  minimizer\n\n- **`*`** - 0 or more quantifiers\n\n- **`+`** - 1 or more quantifier, also \"possessive quantifier\"\n\n- **`{`** - Start min/max quantifier\n\nPart of a pattern within square brackets is called a \"character class\". The\nfollowing are the only metacharacters in a character class:\n\n- **`\\`** - General escape character\n\n- **`^`** - Negate the class, but only if the first character\n\n- **`-`** - Indicates character range\n\n- **`[`** - Posix character class (only if followed by Posix syntax)\n\n- **`]`** - Terminates the character class\n\nThe following sections describe the use of each metacharacter.\n\n[](){: #sect3 }","ref":"re.html#module-characters-and-metacharacters"},{"type":"module","title":"Backslash - re","doc":"The backslash character has many uses. First, if it is followed by a character\nthat is not a number or a letter, it takes away any special meaning that a\ncharacter can have. This use of backslash as an escape character applies both\ninside and outside character classes.\n\nFor example, if you want to match a \"\\_\" character, you write `\\_` in the pattern.\nThis escaping action applies if the following character would otherwise be\ninterpreted as a metacharacter, so it is always safe to precede a\nnon-alphanumeric with backslash to specify that it stands for itself. In\nparticular, if you want to match a backslash, write `\\\\`.\n\nIn `unicode` mode, only ASCII numbers and letters have any special meaning after\na backslash. All other characters (in particular, those whose code points\nare > 127) are treated as literals.\n\nIf a pattern is compiled with option `extended`, whitespace in the pattern\n(other than in a character class) and characters between a # outside a character\nclass and the next newline are ignored. An escaping backslash can be used to\ninclude a whitespace or # character as part of the pattern.\n\nTo remove the special meaning from a sequence of characters, put them between\n`\\Q` and `\\E`. This is different from Perl in that `$` and `@` are handled as literals\nin `\\Q`...`\\E` sequences in PCRE, while `$` and `@` cause variable interpolation in\nPerl. Notice the following examples:\n\n```text\nPattern            PCRE matches   Perl matches\n\n\\Qabc$xyz\\E        abc$xyz        abc followed by the contents of $xyz\n\\Qabc\\$xyz\\E       abc\\$xyz       abc\\$xyz\n\\Qabc\\E\\$\\Qxyz\\E   abc$xyz        abc$xyz\n```\n\nThe `\\Q`...`\\E` sequence is recognized both inside and outside character classes.\nAn isolated `\\E` that is not preceded by `\\Q` is ignored. If `\\Q` is not followed\nby `\\E` later in the pattern, the literal interpretation continues to the end of\nthe pattern (that is, `\\E` is assumed at the end). If the isolated `\\Q` is inside\na character class, this causes an error, as the character class is not\nterminated.\n\n_Non-Printing Characters_\n\n[](){: #non_printing_characters }\n\nA second use of backslash provides a way of encoding non-printing characters in\npatterns in a visible manner. There is no restriction on the appearance of\nnon-printing characters, apart from the binary zero that terminates a pattern.\nWhen a pattern is prepared by text editing, it is often easier to use one of the\nfollowing escape sequences than the binary character it represents:\n\n- **`\\a`** - Alarm, that is, the BEL character (hex 07)\n\n- **`\\cx`** - \"Control-x\", where x is any ASCII character\n\n- **`\\e`** - Escape (hex 1B)\n\n- **`\\f`** - Form feed (hex 0C)\n\n- **`\\n`** - Line feed (hex 0A)\n\n- **`\\r`** - Carriage return (hex 0D)\n\n- **`\\t`** - Tab (hex 09)\n\n- **`\\0dd`** - Character with octal code 0dd\n\n- **`\\ddd`** - Character with octal code ddd, or back reference\n\n- **`\\o{ddd..}`** - character with octal code ddd..\n\n- **`\\xhh`** - Character with hex code hh\n\n- **`\\x{hhh..}`** - Character with hex code hhh..\n\n> #### Note {: .info }\n>\n> Note that `\\0dd` is always an octal code, and that `\\8` and `\\9` are the literal\n> characters \"8\" and \"9\".\n\nThe precise effect of `\\cx` on ASCII characters is as follows: if x is a\nlowercase letter, it is converted to upper case. Then bit 6 of the character\n(hex 40) is inverted. Thus `\\cA` to `\\cZ` become hex 01 to hex 1A (A is 41, Z is\n5A), but `\\c{` becomes hex 3B (`{` is 7B), and `\\c`; becomes hex 7B (; is 3B). If\nthe data item (byte or 16-bit value) following `\\c` has a value > 127, a\ncompile-time error occurs. This locks out non-ASCII characters in all modes.\n\nThe `\\c` facility was designed for use with ASCII characters, but with the\nextension to Unicode it is even less useful than it once was.\n\nAfter `\\0` up to two further octal digits are read. If there are fewer than two\ndigits, just those that are present are used. Thus the sequence `\\0\\x\\015`\nspecifies two binary zeros followed by a CR character (code value 13). Make sure\nyou supply two digits after the initial zero if the pattern character that\nfollows is itself an octal digit.\n\nThe escape `\\o` must be followed by a sequence of octal digits, enclosed in\nbraces. An error occurs if this is not the case. This escape is a recent\naddition to Perl; it provides way of specifying character code points as octal\nnumbers greater than 0777, and it also allows octal numbers and back references\nto be unambiguously specified.\n\nFor greater clarity and unambiguity, it is best to avoid following `\\` by a digit\ngreater than zero. Instead, use `\\o{}` or `\\x{}` to specify character numbers,\nand `\\g{}` to specify back references. The following paragraphs describe the\nold, ambiguous syntax.\n\nThe handling of a backslash followed by a digit other than 0 is complicated, and\nPerl has changed in recent releases, causing PCRE also to change. Outside a\ncharacter class, PCRE reads the digit and any following digits as a decimal\nnumber. If the number is < 8, or if there have been at least that many previous\ncapturing left parentheses in the expression, the entire sequence is taken as a\n_back reference_. A description of how this works is provided later, following\nthe discussion of parenthesized subpatterns.\n\nInside a character class, or if the decimal number following `\\` is > 7 and there\nhave not been that many capturing subpatterns, PCRE handles `\\8` and `\\9` as the\nliteral characters \"8\" and \"9\", and otherwise re-reads up to three octal digits\nfollowing the backslash, and using them to generate a data character. Any\nsubsequent digits stand for themselves. For example:\n\n- **`\\040`** - Another way of writing an ASCII space\n\n- **`\\40`** - The same, provided there are < 40 previous capturing subpatterns\n\n- **`\\7`** - Always a back reference\n\n- **`\\11`** - Can be a back reference, or another way of writing a tab\n\n- **`\\011`** - Always a tab\n\n- **`\\0113`** - A tab followed by character \"3\"\n\n- **`\\113`** - Can be a back reference, otherwise the character with octal code\n  113\n\n- **`\\377`** - Can be a back reference, otherwise value 255 (decimal)\n\n- **`\\81`** - Either a back reference, or the two characters \"8\" and \"1\"\n\nNotice that octal values >= 100 that are specified using this syntax must not be\nintroduced by a leading zero, as no more than three octal digits are ever read.\n\nBy default, after `\\x` that is not followed by `{`, from zero to two hexadecimal\ndigits are read (letters can be in upper or lower case). Any number of\nhexadecimal digits may appear between `\\x{` and `}`. If a character other than a\nhexadecimal digit appears between `\\x{` and `}`, or if there is no terminating\n`}`, an error occurs.\n\nCharacters whose value is less than 256 can be defined by either of the two\nsyntaxes for `\\x`. There is no difference in the way they are handled. For\nexample, `\\xdc` is exactly the same as `\\x{dc}`.\n\n_Constraints on character values_\n\nCharacters that are specified using octal or hexadecimal numbers are limited to\ncertain values, as follows:\n\n- **8-bit non-UTF mode** - < 0x100\n\n- **8-bit UTF-8 mode** - < 0x10ffff and a valid codepoint\n\nInvalid Unicode codepoints are the range 0xd800 to 0xdfff (the so-called\n\"surrogate\" codepoints), and 0xffef.\n\n_Escape sequences in character classes_\n\nAll the sequences that define a single character value can be used both inside\nand outside character classes. Also, inside a character class, `\\b` is\ninterpreted as the backspace character (hex 08).\n\n`\\N` is not allowed in a character class. `\\B`, `\\R`, and `\\X` are not special\ninside a character class. Like other unrecognized escape sequences, they are\ntreated as the literal characters \"B\", \"R\", and \"X\". Outside a character class,\nthese sequences have different meanings.\n\n_Unsupported Escape Sequences_\n\nIn Perl, the sequences `\\l`, `\\L`, `\\u`, and `\\U` are recognized by its string\nhandler and used to modify the case of following characters. PCRE does not\nsupport these escape sequences.\n\n_Absolute and Relative Back References_\n\nThe sequence `\\g` followed by an unsigned or a negative number, optionally\nenclosed in braces, is an absolute or relative back reference. A named back\nreference can be coded as `\\g{name}`. Back references are discussed later,\nfollowing the discussion of parenthesized subpatterns.\n\n_Absolute and Relative Subroutine Calls_\n\nFor compatibility with Oniguruma, the non-Perl syntax `\\g` followed by a name or\na number enclosed either in angle brackets or single quotes, is alternative\nsyntax for referencing a subpattern as a \"subroutine\". Details are discussed\nlater. Notice that `\\g{...}` (Perl syntax) and `\\g<...>` (Oniguruma syntax) are\n_not_ synonymous. The former is a back reference and the latter is a subroutine\ncall.\n\n_Generic Character Types_\n\n[](){: #generic_character_types }\n\nAnother use of backslash is for specifying generic character types:\n\n- **`\\d`** - Any decimal digit\n\n- **`\\D`** - Any character that is not a decimal digit\n\n- **`\\h`** - Any horizontal whitespace character\n\n- **`\\H`** - Any character that is not a horizontal whitespace character\n\n- **`\\s`** - Any whitespace character\n\n- **`\\S`** - Any character that is not a whitespace character\n\n- **`\\v`** - Any vertical whitespace character\n\n- **`\\V`** - Any character that is not a vertical whitespace character\n\n- **`\\w`** - Any \"word\" character\n\n- **`\\W`** - Any \"non-word\" character\n\nThere is also the single sequence `\\N`, which matches a non-newline character.\nThis is the same as the \".\" metacharacter when `dotall` is not set. Perl also\nuses `\\N` to match characters by name, but PCRE does not support this.\n\nEach pair of lowercase and uppercase escape sequences partitions the complete\nset of characters into two disjoint sets. Any given character matches one, and\nonly one, of each pair. The sequences can appear both inside and outside\ncharacter classes. They each match one character of the appropriate type. If the\ncurrent matching point is at the end of the subject string, all fail, as there\nis no character to match.\n\nFor compatibility with Perl, `\\s` did not used to match the VT character (code\n11), which made it different from the the POSIX \"space\" class. However, Perl\nadded VT at release 5.18, and PCRE followed suit at release 8.34. The default\n`\\s` characters are now HT (9), LF (10), VT (11), FF (12), CR (13), and space\n(32), which are defined as white space in the \"C\" locale. This list may vary if\nlocale-specific matching is taking place. For example, in some locales the\n\"non-breaking space\" character (`\\xA0`) is recognized as white space, and in\nothers the VT character is not.\n\nA \"word\" character is an underscore or any character that is a letter or a\ndigit. By default, the definition of letters and digits is controlled by the\nPCRE low-valued character tables, in Erlang's case (and without option\n`unicode`), the ISO Latin-1 character set.\n\nBy default, in `unicode` mode, characters with values > 255, that is, all\ncharacters outside the ISO Latin-1 character set, never match `\\d`, `\\s`, or `\\w`,\nand always match `\\D`, `\\S`, and `\\W`. These sequences retain their original\nmeanings from before UTF support was available, mainly for efficiency reasons.\nHowever, if option `ucp` is set, the behavior is changed so that Unicode\nproperties are used to determine character types, as follows:\n\n- **`\\d`** - Any character that `\\p{Nd}` matches (decimal digit)\n\n- **`\\s`** - Any character that `\\p{Z}` or `\\h` or `\\v`\n\n- **`\\w`** - Any character that matches `\\p{L}` or `\\p{N}` matches, plus\n  underscore\n\nThe uppercase escapes match the inverse sets of characters. Notice that `\\d`\nmatches only decimal digits, while `\\w` matches any Unicode digit, any Unicode\nletter, and underscore. Notice also that `ucp` affects `\\b` and `\\B`, as they are\ndefined in terms of `\\w` and `\\W`. Matching these sequences is noticeably slower\nwhen `ucp` is set.\n\nThe sequences `\\h`, `\\H`, `\\v`, and `\\V` are features that were added to Perl in\nrelease 5.10. In contrast to the other sequences, which match only ASCII\ncharacters by default, these always match certain high-valued code points,\nregardless if `ucp` is set.\n\nThe following are the horizontal space characters:\n\n- **U+0009** - Horizontal tab (HT)\n\n- **U+0020** - Space\n\n- **U+00A0** - Non-break space\n\n- **U+1680** - Ogham space mark\n\n- **U+180E** - Mongolian vowel separator\n\n- **U+2000** - En quad\n\n- **U+2001** - Em quad\n\n- **U+2002** - En space\n\n- **U+2003** - Em space\n\n- **U+2004** - Three-per-em space\n\n- **U+2005** - Four-per-em space\n\n- **U+2006** - Six-per-em space\n\n- **U+2007** - Figure space\n\n- **U+2008** - Punctuation space\n\n- **U+2009** - Thin space\n\n- **U+200A** - Hair space\n\n- **U+202F** - Narrow no-break space\n\n- **U+205F** - Medium mathematical space\n\n- **U+3000** - Ideographic space\n\nThe following are the vertical space characters:\n\n- **U+000A** - Line feed (LF)\n\n- **U+000B** - Vertical tab (VT)\n\n- **U+000C** - Form feed (FF)\n\n- **U+000D** - Carriage return (CR)\n\n- **U+0085** - Next line (NEL)\n\n- **U+2028** - Line separator\n\n- **U+2029** - Paragraph separator\n\nIn 8-bit, non-UTF-8 mode, only the characters with code points < 256 are\nrelevant.\n\n_Newline Sequences_\n\n[](){: #newline_sequences }\n\nOutside a character class, by default, the escape sequence `\\R` matches any\nUnicode newline sequence. In non-UTF-8 mode, `\\R` is equivalent to the following:\n\n```text\n(?>\\r\\n|\\n|\\x0b|\\f|\\r|\\x85)\n```\n\nThis is an example of an \"atomic group\", details are provided below.\n\nThis particular group matches either the two-character sequence CR followed by\nLF, or one of the single characters LF (line feed, U+000A), VT (vertical tab,\nU+000B), FF (form feed, U+000C), CR (carriage return, U+000D), or NEL (next\nline, U+0085). The two-character sequence is treated as a single unit that\ncannot be split.\n\nIn Unicode mode, two more characters whose code points are > 255 are added: LS\n(line separator, U+2028) and PS (paragraph separator, U+2029). Unicode character\nproperty support is not needed for these characters to be recognized.\n\n`\\R` can be restricted to match only CR, LF, or CRLF (instead of the complete set\nof Unicode line endings) by setting option `bsr_anycrlf` either at compile time\nor when the pattern is matched. (BSR is an acronym for \"backslash R\".) This can\nbe made the default when PCRE is built; if so, the other behavior can be\nrequested through option `bsr_unicode`. These settings can also be specified by\nstarting a pattern string with one of the following sequences:\n\n- **(\\*BSR_ANYCRLF)** - CR, LF, or CRLF only\n\n- **(\\*BSR_UNICODE)** - Any Unicode newline sequence\n\nThese override the default and the options specified to the compiling function,\nbut they can themselves be overridden by options specified to a matching\nfunction. Notice that these special settings, which are not Perl-compatible, are\nrecognized only at the very start of a pattern, and that they must be in upper\ncase. If more than one of them is present, the last one is used. They can be\ncombined with a change of newline convention; for example, a pattern can start\nwith:\n\n```text\n(*ANY)(*BSR_ANYCRLF)\n```\n\nThey can also be combined with the (*UTF8), (*UTF), or (\\*UCP) special\nsequences. Inside a character class, `\\R` is treated as an unrecognized escape\nsequence, and so matches the letter \"R\" by default.\n\n_Unicode Character Properties_\n\nThree more escape sequences that match characters with specific properties are\navailable. When in 8-bit non-UTF-8 mode, these sequences are limited to testing\ncharacters whose code points are < 256, but they do work in this mode. The\nfollowing are the extra escape sequences:\n\n- **`\\p{_xx_}`** - A character with property _xx_\n\n- **`\\P{_xx_}`** - A character without property _xx_\n\n- **`\\X`** - A Unicode extended grapheme cluster\n\nThe property names represented by _xx_ above are limited to the Unicode script\nnames, the general category properties, \"Any\", which matches any character\n(including newline), and some special PCRE properties (described in the next\nsection). Other Perl properties, such as \"InMusicalSymbols\", are currently not\nsupported by PCRE. Notice that `\\P{Any}` does not match any characters and\nalways causes a match failure.\n\nSets of Unicode characters are defined as belonging to certain scripts. A\ncharacter from one of these sets can be matched using a script name, for\nexample:\n\n```text\n\\p{Greek} \\P{Han}\n```\n\nThose that are not part of an identified script are lumped together as \"Common\".\nThe following is the current list of scripts:\n\n- Arabic\n- Armenian\n- Avestan\n- Balinese\n- Bamum\n- Bassa_Vah\n- Batak\n- Bengali\n- Bopomofo\n- Braille\n- Buginese\n- Buhid\n- Canadian_Aboriginal\n- Carian\n- Caucasian_Albanian\n- Chakma\n- Cham\n- Cherokee\n- Common\n- Coptic\n- Cuneiform\n- Cypriot\n- Cyrillic\n- Deseret\n- Devanagari\n- Duployan\n- Egyptian_Hieroglyphs\n- Elbasan\n- Ethiopic\n- Georgian\n- Glagolitic\n- Gothic\n- Grantha\n- Greek\n- Gujarati\n- Gurmukhi\n- Han\n- Hangul\n- Hanunoo\n- Hebrew\n- Hiragana\n- Imperial_Aramaic\n- Inherited\n- Inscriptional_Pahlavi\n- Inscriptional_Parthian\n- Javanese\n- Kaithi\n- Kannada\n- Katakana\n- Kayah_Li\n- Kharoshthi\n- Khmer\n- Khojki\n- Khudawadi\n- Lao\n- Latin\n- Lepcha\n- Limbu\n- Linear_A\n- Linear_B\n- Lisu\n- Lycian\n- Lydian\n- Mahajani\n- Malayalam\n- Mandaic\n- Manichaean\n- Meetei_Mayek\n- Mende_Kikakui\n- Meroitic_Cursive\n- Meroitic_Hieroglyphs\n- Miao\n- Modi\n- Mongolian\n- Mro\n- Myanmar\n- Nabataean\n- New_Tai_Lue\n- Nko\n- Ogham\n- Ol_Chiki\n- Old_Italic\n- Old_North_Arabian\n- Old_Permic\n- Old_Persian\n- Oriya\n- Old_South_Arabian\n- Old_Turkic\n- Osmanya\n- Pahawh_Hmong\n- Palmyrene\n- Pau_Cin_Hau\n- Phags_Pa\n- Phoenician\n- Psalter_Pahlavi\n- Rejang\n- Runic\n- Samaritan\n- Saurashtra\n- Sharada\n- Shavian\n- Siddham\n- Sinhala\n- Sora_Sompeng\n- Sundanese\n- Syloti_Nagri\n- Syriac\n- Tagalog\n- Tagbanwa\n- Tai_Le\n- Tai_Tham\n- Tai_Viet\n- Takri\n- Tamil\n- Telugu\n- Thaana\n- Thai\n- Tibetan\n- Tifinagh\n- Tirhuta\n- Ugaritic\n- Vai\n- Warang_Citi\n- Yi\n\nEach character has exactly one Unicode general category property, specified by a\ntwo-letter acronym. For compatibility with Perl, negation can be specified by\nincluding a circumflex between the opening brace and the property name. For\nexample, `\\p{^Lu}` is the same as `\\P{Lu}`.\n\nIf only one letter is specified with `\\p` or `\\P`, it includes all the general\ncategory properties that start with that letter. In this case, in the absence of\nnegation, the curly brackets in the escape sequence are optional. The following\ntwo examples have the same effect:\n\n```text\n\\p{L}\n\\pL\n```\n\nThe following general category property codes are supported:\n\n- **C** - Other\n\n- **Cc** - Control\n\n- **Cf** - Format\n\n- **Cn** - Unassigned\n\n- **Co** - Private use\n\n- **Cs** - Surrogate\n\n- **L** - Letter\n\n- **Ll** - Lowercase letter\n\n- **Lm** - Modifier letter\n\n- **Lo** - Other letter\n\n- **Lt** - Title case letter\n\n- **Lu** - Uppercase letter\n\n- **M** - Mark\n\n- **Mc** - Spacing mark\n\n- **Me** - Enclosing mark\n\n- **Mn** - Non-spacing mark\n\n- **N** - Number\n\n- **Nd** - Decimal number\n\n- **Nl** - Letter number\n\n- **No** - Other number\n\n- **P** - Punctuation\n\n- **Pc** - Connector punctuation\n\n- **Pd** - Dash punctuation\n\n- **Pe** - Close punctuation\n\n- **Pf** - Final punctuation\n\n- **Pi** - Initial punctuation\n\n- **Po** - Other punctuation\n\n- **Ps** - Open punctuation\n\n- **S** - Symbol\n\n- **Sc** - Currency symbol\n\n- **Sk** - Modifier symbol\n\n- **Sm** - Mathematical symbol\n\n- **So** - Other symbol\n\n- **Z** - Separator\n\n- **Zl** - Line separator\n\n- **Zp** - Paragraph separator\n\n- **Zs** - Space separator\n\nThe special property L& is also supported. It matches a character that has the\nLu, Ll, or Lt property, that is, a letter that is not classified as a modifier\nor \"other\".\n\nThe Cs (Surrogate) property applies only to characters in the range U+D800 to\nU+DFFF. Such characters are invalid in Unicode strings and so cannot be tested\nby PCRE. Perl does not support the Cs property.\n\nThe long synonyms for property names supported by Perl (such as `\\p{Letter}`)\nare not supported by PCRE. It is not permitted to prefix any of these properties\nwith \"Is\".\n\nNo character in the Unicode table has the Cn (unassigned) property. This\nproperty is instead assumed for any code point that is not in the Unicode table.\n\nSpecifying caseless matching does not affect these escape sequences. For\nexample, `\\p{Lu}` always matches only uppercase letters. This is different from\nthe behavior of current versions of Perl.\n\nMatching characters by Unicode property is not fast, as PCRE must do a\nmultistage table lookup to find a character property. That is why the\ntraditional escape sequences such as `\\d` and `\\w` do not use Unicode properties\nin PCRE by default. However, you can make them do so by setting option `ucp` or\nby starting the pattern with `(*UCP)`.\n\n_Extended Grapheme Clusters_\n\nThe `\\X` escape matches any number of Unicode characters that form an \"extended\ngrapheme cluster\", and treats the sequence as an atomic group (see below). Up to\nand including release 8.31, PCRE matched an earlier, simpler definition that was\nequivalent to `(?>\\PM\\pM*)`. That is, it matched a character without the \"mark\"\nproperty, followed by zero or more characters with the \"mark\" property.\nCharacters with the \"mark\" property are typically non-spacing accents that\naffect the preceding character.\n\nThis simple definition was extended in Unicode to include more complicated kinds\nof composite character by giving each character a grapheme breaking property,\nand creating rules that use these properties to define the boundaries of\nextended grapheme clusters. In PCRE releases later than 8.31, `\\X` matches one of\nthese clusters.\n\n`\\X` always matches at least one character. Then it decides whether to add more\ncharacters according to the following rules for ending a cluster:\n\n1. End at the end of the subject string.\n1. Do not end between CR and LF; otherwise end after any control character.\n1. Do not break Hangul (a Korean script) syllable sequences. Hangul characters\n   are of five types: L, V, T, LV, and LVT. An L character can be followed by an\n   L, V, LV, or LVT character. An LV or V character can be followed by a V or T\n   character. An LVT or T character can be followed only by a T character.\n1. Do not end before extending characters or spacing marks. Characters with the\n   \"mark\" property always have the \"extend\" grapheme breaking property.\n1. Do not end after prepend characters.\n1. Otherwise, end the cluster.\n\n_PCRE Additional Properties_\n\nIn addition to the standard Unicode properties described earlier, PCRE supports\nfour more that make it possible to convert traditional escape sequences, such as\n`\\w` and `\\s` to use Unicode properties. PCRE uses these non-standard, non-Perl\nproperties internally when the `ucp` option is passed. However, they can also be\nused explicitly. The properties are as follows:\n\n- **Xan** - Any alphanumeric character. Matches characters that have either the\n  L (letter) or the N (number) property.\n\n- **Xps** - Any Posix space character. Matches the characters tab, line feed,\n  vertical tab, form feed, carriage return, and any other character that has the\n  Z (separator) property.\n\n- **Xsp** - Any Perl space character. Matches the same as Xps, except that\n  vertical tab is excluded.\n\n- **Xwd** - Any Perl \"word\" character. Matches the same characters as Xan, plus\n  underscore.\n\nPerl and POSIX space are now the same. Perl added VT to its space character set\nat release 5.18 and PCRE changed at release 8.34.\n\nXan matches characters that have either the L (letter) or the N (number)\nproperty. Xps matches the characters tab, linefeed, vertical tab, form feed, or\ncarriage return, and any other character that has the Z (separator) property.\nXsp is the same as Xps; it used to exclude vertical tab, for Perl compatibility,\nbut Perl changed, and so PCRE followed at release 8.34. Xwd matches the same\ncharacters as Xan, plus underscore.\n\nThere is another non-standard property, Xuc, which matches any character that\ncan be represented by a Universal Character Name in C++ and other programming\nlanguages. These are the characters `$`, `@`, `` ` `` (grave accent), and all characters\nwith Unicode code points >= U+00A0, except for the surrogates U+D800 to U+DFFF.\nNotice that most base (ASCII) characters are excluded. (Universal Character\nNames are of the form `\\uHHHH` or `\\UHHHHHHHH`, where H is a hexadecimal digit.\nNotice that the Xuc property does not match these sequences but the characters\nthat they represent.)\n\n_Resetting the Match Start_\n\nThe escape sequence `\\K` causes any previously matched characters not to be\nincluded in the final matched sequence. For example, the following pattern\nmatches \"foobar\", but reports that it has matched \"bar\":\n\n```text\nfoo\\Kbar\n```\n\nThis feature is similar to a lookbehind assertion (described below). However, in\nthis case, the part of the subject before the real match does not have to be of\nfixed length, as lookbehind assertions do. The use of `\\K` does not interfere\nwith the setting of captured substrings. For example, when the following pattern\nmatches \"foobar\", the first substring is still set to \"foo\":\n\n```text\n(foo)\\Kbar\n```\n\nPerl documents that the use of `\\K` within assertions is \"not well defined\". In\nPCRE, `\\K` is acted upon when it occurs inside positive assertions, but is\nignored in negative assertions. Note that when a pattern such as `(?=ab\\K)`\nmatches, the reported start of the match can be greater than the end of the\nmatch.\n\n_Simple Assertions_\n\nThe final use of backslash is for certain simple assertions. An assertion\nspecifies a condition that must be met at a particular point in a match, without\nconsuming any characters from the subject string. The use of subpatterns for\nmore complicated assertions is described below. The following are the\nbackslashed assertions:\n\n- **`\\b`** - Matches at a word boundary.\n\n- **`\\B`** - Matches when not at a word boundary.\n\n- **`\\A`** - Matches at the start of the subject.\n\n- **`\\Z`** - Matches at the end of the subject, and before a newline at the end\n  of the subject.\n\n- **`\\z`** - Matches only at the end of the subject.\n\n- **`\\G`** - Matches at the first matching position in the subject.\n\nInside a character class, `\\b` has a different meaning; it matches the backspace\ncharacter. If any other of these assertions appears in a character class, by\ndefault it matches the corresponding literal character (for example, `\\B` matches\nthe letter B).\n\nA word boundary is a position in the subject string where the current character\nand the previous character do not both match `\\w` or `\\W` (that is, one matches\n`\\w` and the other matches `\\W`), or the start or end of the string if the first\nor last character matches `\\w`, respectively. In UTF mode, the meanings of `\\w`\nand `\\W` can be changed by setting option `ucp`. When this is done, it also\naffects `\\b` and `\\B`. PCRE and Perl do not have a separate \"start of word\" or\n\"end of word\" metasequence. However, whatever follows `\\b` normally determines\nwhich it is. For example, the fragment `\\ba` matches \"a\" at the start of a word.\n\nThe `\\A`, `\\Z`, and `\\z` assertions differ from the traditional circumflex and\ndollar (described in the next section) in that they only ever match at the very\nstart and end of the subject string, whatever options are set. Thus, they are\nindependent of multiline mode. These three assertions are not affected by\noptions `notbol` or `noteol`, which affect only the behavior of the circumflex\nand dollar metacharacters. However, if argument `startoffset` of `run/3` is\nnon-zero, indicating that matching is to start at a point other than the\nbeginning of the subject, `\\A` can never match. The difference between `\\Z` and\n`\\z` is that `\\Z` matches before a newline at the end of the string and at the\nvery end, while `\\z` matches only at the end.\n\nThe `\\G` assertion is true only when the current matching position is at the\nstart point of the match, as specified by argument `startoffset` of\n[`run/3`](`run/3`). It differs from `\\A` when the value of `startoffset` is\nnon-zero. By calling [`run/3`](`run/3`) multiple times with appropriate\narguments, you can mimic the Perl option `/g`, and it is in this kind of\nimplementation where `\\G` can be useful.\n\nNotice, however, that the PCRE interpretation of `\\G`, as the start of the\ncurrent match, is subtly different from Perl, which defines it as the end of the\nprevious match. In Perl, these can be different when the previously matched\nstring was empty. As PCRE does only one match at a time, it cannot reproduce\nthis behavior.\n\nIf all the alternatives of a pattern begin with `\\G`, the expression is anchored\nto the starting match position, and the \"anchored\" flag is set in the compiled\nregular expression.\n\n[](){: #sect4 }","ref":"re.html#module-backslash"},{"type":"module","title":"Circumflex and Dollar - re","doc":"The circumflex and dollar metacharacters are zero-width assertions. That is,\nthey test for a particular condition to be true without consuming any characters\nfrom the subject string.\n\nOutside a character class, in the default matching mode, the circumflex\ncharacter is an assertion that is true only if the current matching point is at\nthe start of the subject string. If argument `startoffset` of `run/3` is\nnon-zero, circumflex can never match if option `multiline` is unset. Inside a\ncharacter class, circumflex has an entirely different meaning (see below).\n\nCircumflex needs not to be the first character of the pattern if some\nalternatives are involved, but it is to be the first thing in each alternative\nin which it appears if the pattern is ever to match that branch. If all possible\nalternatives start with a circumflex, that is, if the pattern is constrained to\nmatch only at the start of the subject, it is said to be an \"anchored\" pattern.\n(There are also other constructs that can cause a pattern to be anchored.)\n\nThe dollar character is an assertion that is true only if the current matching\npoint is at the end of the subject string, or immediately before a newline at\nthe end of the string (by default). Notice however that it does not match the\nnewline. Dollar needs not to be the last character of the pattern if some\nalternatives are involved, but it is to be the last item in any branch in which\nit appears. Dollar has no special meaning in a character class.\n\nThe meaning of dollar can be changed so that it matches only at the very end of\nthe string, by setting option `dollar_endonly` at compile time. This does not\naffect the `\\Z` assertion.\n\nThe meanings of the circumflex and dollar characters are changed if option\n`multiline` is set. When this is the case, a circumflex matches immediately\nafter internal newlines and at the start of the subject string. It does not\nmatch after a newline that ends the string. A dollar matches before any newlines\nin the string, and at the very end, when `multiline` is set. When newline is\nspecified as the two-character sequence CRLF, isolated CR and LF characters do\nnot indicate newlines.\n\nFor example, the pattern `/^abc$/` matches the subject string \"def\\\\nabc\" (where\n\\\\n represents a newline) in multiline mode, but not otherwise. So, patterns\nthat are anchored in single-line mode because all branches start with ^ are not\nanchored in multiline mode, and a match for circumflex is possible when argument\n_startoffset_ of [`run/3`](`run/3`) is non-zero. Option `dollar_endonly` is\nignored if `multiline` is set.\n\nNotice that the sequences `\\A`, `\\Z`, and `\\z` can be used to match the start and\nend of the subject in both modes. If all branches of a pattern start with `\\A`,\nit is always anchored, regardless if `multiline` is set.\n\n[](){: #sect5 }","ref":"re.html#module-circumflex-and-dollar"},{"type":"module","title":"Full Stop (Period, Dot) and \\\\N - re","doc":"Outside a character class, a dot in the pattern matches any character in the\nsubject string except (by default) a character that signifies the end of a line.\n\nWhen a line ending is defined as a single character, dot never matches that\ncharacter. When the two-character sequence CRLF is used, dot does not match CR\nif it is immediately followed by LF, otherwise it matches all characters\n(including isolated CRs and LFs). When any Unicode line endings are recognized,\ndot does not match CR, LF, or any of the other line-ending characters.\n\nThe behavior of dot regarding newlines can be changed. If option `dotall` is\nset, a dot matches any character, without exception. If the two-character\nsequence CRLF is present in the subject string, it takes two dots to match it.\n\nThe handling of dot is entirely independent of the handling of circumflex and\ndollar, the only relationship is that both involve newlines. Dot has no special\nmeaning in a character class.\n\nThe escape sequence `\\N` behaves like a dot, except that it is not affected by\noption `PCRE_DOTALL`. That is, it matches any character except one that\nsignifies the end of a line. Perl also uses `\\N` to match characters by name but\nPCRE does not support this.\n\n[](){: #sect6 }","ref":"re.html#module-full-stop-period-dot-and-n"},{"type":"module","title":"Matching a Single Data Unit - re","doc":"Outside a character class, the escape sequence `\\C` matches any data unit,\nregardless if a UTF mode is set. One data unit is one byte. Unlike a dot, `\\C`\nalways matches line-ending characters. The feature is provided in Perl to match\nindividual bytes in UTF-8 mode, but it is unclear how it can usefully be used.\nAs `\\C` breaks up characters into individual data units, matching one unit with\n`\\C` in a UTF mode means that the remaining string can start with a malformed UTF\ncharacter. This has undefined results, as PCRE assumes that it deals with valid\nUTF strings.\n\nPCRE does not allow `\\C` to appear in lookbehind assertions (described below) in\na UTF mode, as this would make it impossible to calculate the length of the\nlookbehind.\n\nThe `\\C` escape sequence is best avoided. However, one way of using it that\navoids the problem of malformed UTF characters is to use a lookahead to check\nthe length of the next character, as in the following pattern, which can be used\nwith a UTF-8 string (ignore whitespace and line breaks):\n\n```text\n(?| (?=[\\x00-\\x7f])(\\C) |\n    (?=[\\x80-\\x{7ff}])(\\C)(\\C) |\n    (?=[\\x{800}-\\x{ffff}])(\\C)(\\C)(\\C) |\n    (?=[\\x{10000}-\\x{1fffff}])(\\C)(\\C)(\\C)(\\C))\n```\n\nA group that starts with (?| resets the capturing parentheses numbers in each\nalternative (see section [Duplicate Subpattern Numbers](`m:re#sect12`)). The\nassertions at the start of each branch check the next UTF-8 character for values\nwhose encoding uses 1, 2, 3, or 4 bytes, respectively. The individual bytes of\nthe character are then captured by the appropriate number of groups.\n\n[](){: #sect7 }","ref":"re.html#module-matching-a-single-data-unit"},{"type":"module","title":"Square Brackets and Character Classes - re","doc":"An opening square bracket introduces a character class, terminated by a closing\nsquare bracket. A closing square bracket on its own is not special by default.\nHowever, if option `PCRE_JAVASCRIPT_COMPAT` is set, a lone closing square\nbracket causes a compile-time error. If a closing square bracket is required as\na member of the class, it is to be the first data character in the class (after\nan initial circumflex, if present) or escaped with a backslash.\n\nA character class matches a single character in the subject. In a UTF mode, the\ncharacter can be more than one data unit long. A matched character must be in\nthe set of characters defined by the class, unless the first character in the\nclass definition is a circumflex, in which case the subject character must not\nbe in the set defined by the class. If a circumflex is required as a member of\nthe class, ensure that it is not the first character, or escape it with a\nbackslash.\n\nFor example, the character class `[aeiou]` matches any lowercase vowel, while\n`[^aeiou]` matches any character that is not a lowercase vowel. Notice that a\ncircumflex is just a convenient notation for specifying the characters that are\nin the class by enumerating those that are not. A class that starts with a\ncircumflex is not an assertion; it still consumes a character from the subject\nstring, and therefore it fails if the current pointer is at the end of the\nstring.\n\nIn UTF-8 mode, characters with values > 255 (0xffff) can be included in a class\nas a literal string of data units, or by using the `\\x{` escaping mechanism.\n\nWhen caseless matching is set, any letters in a class represent both their\nuppercase and lowercase versions. For example, a caseless `[aeiou]` matches \"A\"\nand \"a\", and a caseless `[^aeiou]` does not match \"A\", but a caseful version\nwould. In a UTF mode, PCRE always understands the concept of case for characters\nwhose values are < 256, so caseless matching is always possible. For characters\nwith higher values, the concept of case is supported only if PCRE is compiled\nwith Unicode property support. If you want to use caseless matching in a UTF\nmode for characters >=, ensure that PCRE is compiled with Unicode property\nsupport and with UTF support.\n\nCharacters that can indicate line breaks are never treated in any special way\nwhen matching character classes, whatever line-ending sequence is in use, and\nwhatever setting of options `PCRE_DOTALL` and `PCRE_MULTILINE` is used. A class\nsuch as `[^a]` always matches one of these characters.\n\nThe minus (hyphen) character can be used to specify a range of characters in a\ncharacter class. For example, `[d-m]` matches any letter between d and m,\ninclusive. If a minus character is required in a class, it must be escaped with\na backslash or appear in a position where it cannot be interpreted as indicating\na range, typically as the first or last character in the class, or immediately\nafter a range. For example, `[b-d-z]` matches letters in the range b to d, a\nhyphen character, or z.\n\nThe literal character \"]\" cannot be the end character of a range. A pattern such\nas `[W-]46]` is interpreted as a class of two characters (\"W\" and \"-\") followed\nby a literal string \"46]\", so it would match \"W46]\" or \"-46]\". However, if \"]\"\nis escaped with a backslash, it is interpreted as the end of range, so\n`[W-\\]46]` is interpreted as a class containing a range followed by two other\ncharacters. The octal or hexadecimal representation of \"]\" can also be used to\nend a range.\n\nAn error is generated if a POSIX character class (see below) or an escape\nsequence other than one that defines a single character appears at a point where\na range ending character is expected. For example, `[z-\\xff]` is valid, but\n`[A-\\d]` and `[A-[:digit:]]` are not.\n\nRanges operate in the collating sequence of character values. They can also be\nused for characters specified numerically, for example, `[\\000-\\037]`. Ranges\ncan include any characters that are valid for the current mode.\n\nIf a range that includes letters is used when caseless matching is set, it\nmatches the letters in either case. For example, `[W-c]` is equivalent to\n`` [][\\\\^_`wxyzabc] ``, matched caselessly. In a non-UTF mode, if character\ntables for a French locale are in use, `[\\xc8-\\xcb]` matches accented E\ncharacters in both cases. In UTF modes, PCRE supports the concept of case for\ncharacters with values > 255 only when it is compiled with Unicode property\nsupport.\n\nThe character escape sequences `\\d`, `\\D`, `\\h`, `\\H`, `\\p`, `\\P`, `\\s`, `\\S`, `\\v`, `\\V`,\n`\\w`, and `\\W` can appear in a character class, and add the characters that they\nmatch to the class. For example, `[\\dABCDEF]` matches any hexadecimal digit. In\nUTF modes, option `ucp` affects the meanings of `\\d`, `\\s`, `\\w` and their\nuppercase partners, just as it does when they appear outside a character class,\nas described in section\n[Generic Character Types](`m:re#generic_character_types`) earlier. The escape\nsequence `\\b` has a different meaning inside a character class; it matches the\nbackspace character. The sequences `\\B`, `\\N`, `\\R`, and `\\X` are not special inside\na character class. Like any other unrecognized escape sequences, they are\ntreated as the literal characters \"B\", \"N\", \"R\", and \"X\".\n\nA circumflex can conveniently be used with the uppercase character types to\nspecify a more restricted set of characters than the matching lowercase type.\nFor example, class `[^\\W_]` matches any letter or digit, but not underscore,\nwhile `[\\w]` includes underscore. A positive character class is to be read as\n\"something OR something OR ...\" and a negative class as \"NOT something AND NOT\nsomething AND NOT ...\".\n\nOnly the following metacharacters are recognized in character classes:\n\n- Backslash\n- Hyphen (only where it can be interpreted as specifying a range)\n- Circumflex (only at the start)\n- Opening square bracket (only when it can be interpreted as introducing a Posix\n  class name, or for a special compatibility feature; see the next two sections)\n- Terminating closing square bracket\n\nHowever, escaping other non-alphanumeric characters does no harm.\n\n[](){: #sect8 }","ref":"re.html#module-square-brackets-and-character-classes"},{"type":"module","title":"Posix Character Classes - re","doc":"Perl supports the Posix notation for character classes. This uses names enclosed\nby `[:` and `:]` within the enclosing square brackets. PCRE also supports this\nnotation. For example, the following matches \"0\", \"1\", any alphabetic character,\nor \"%\":\n\n```text\n[01[:alpha:]%]\n```\n\nThe following are the supported class names:\n\n- **alnum** - Letters and digits\n\n- **alpha** - Letters\n\n- **blank** - Space or tab only\n\n- **cntrl** - Control characters\n\n- **digit** - Decimal digits (same as `\\d`)\n\n- **graph** - Printing characters, excluding space\n\n- **lower** - Lowercase letters\n\n- **print** - Printing characters, including space\n\n- **punct** - Printing characters, excluding letters, digits, and space\n\n- **space** - Whitespace (the same as `\\s` from PCRE 8.34)\n\n- **upper** - Uppercase letters\n\n- **word** - \"Word\" characters (same as `\\w`)\n\n- **xdigit** - Hexadecimal digits\n\nThere is another character class, `ascii`, that erroneously matches Latin-1\ncharacters instead of the 0-127 range specified by POSIX. This cannot be fixed\nwithout altering the behaviour of other classes, so we recommend matching the\nrange with `[\\\\0-\\x7f]` instead.\n\nThe default \"space\" characters are HT (9), LF (10), VT (11), FF (12), CR (13),\nand space (32). If locale-specific matching is taking place, the list of space\ncharacters may be different; there may be fewer or more of them. \"Space\" used to\nbe different to `\\s`, which did not include VT, for Perl compatibility. However,\nPerl changed at release 5.18, and PCRE followed at release 8.34. \"Space\" and `\\s`\nnow match the same set of characters.\n\nThe name \"word\" is a Perl extension, and \"blank\" is a GNU extension from Perl\n5.8. Another Perl extension is negation, which is indicated by a ^ character\nafter the colon. For example, the following matches \"1\", \"2\", or any non-digit:\n\n```text\n[12[:^digit:]]\n```\n\nPCRE (and Perl) also recognize the Posix syntax `[.ch.]` and `[=ch=]` where \"ch\"\nis a \"collating element\", but these are not supported, and an error is given if\nthey are encountered.\n\nBy default, characters with values > 255 do not match any of the Posix character\nclasses. However, if option `PCRE_UCP` is passed to `pcre_compile()`, some of\nthe classes are changed so that Unicode character properties are used. This is\nachieved by replacing certain Posix classes by other sequences, as follows:\n\n- **`[:alnum:]`** - Becomes _`\\p{Xan}`_\n\n- **`[:alpha:]`** - Becomes _`\\p{L}`_\n\n- **`[:blank:]`** - Becomes _`\\h`_\n\n- **`[:digit:]`** - Becomes _`\\p{Nd}`_\n\n- **`[:lower:]`** - Becomes _`\\p{Ll}`_\n\n- **`[:space:]`** - Becomes _`\\p{Xps}`_\n\n- **`[:upper:]`** - Becomes _`\\p{Lu}`_\n\n- **`[:word:]`** - Becomes _`\\p{Xwd}`_\n\nNegated versions, such as `[:^alpha:]`, use `\\P` instead of `\\p`. Three other POSIX\nclasses are handled specially in UCP mode:\n\n- **`[:graph:]`** - This matches characters that have glyphs that mark the page\n  when printed. In Unicode property terms, it matches all characters with the L,\n  M, N, P, S, or Cf properties, except for:\n\n  - **U+061C** - Arabic Letter Mark\n\n  - **U+180E** - Mongolian Vowel Separator\n\n  - **U+2066 - U+2069** - Various \"isolate\"s\n\n- **`[:print:]`** - This matches the same characters as `[:graph:]` plus space\n  characters that are not controls, that is, characters with the Zs property.\n\n- **`[:punct:]`** - This matches all characters that have the Unicode P\n  (punctuation) property, plus those characters whose code points are less than\n  128 that have the S (Symbol) property.\n\nThe other POSIX classes are unchanged, and match only characters with code\npoints less than 128.\n\n_Compatibility Feature for Word Boundaries_\n\nIn the POSIX.2 compliant library that was included in 4.4BSD Unix, the ugly\nsyntax `[[:<:]]` and `[[:>:]]` is used for matching \"start of word\" and \"end of\nword\". PCRE treats these items as follows:\n\n- **`[[:<:]]`** - is converted to `\\b(?=\\w)`\n\n- **`[[:>:]]`** - is converted to `\\b(?<=\\w)`\n\nOnly these exact character sequences are recognized. A sequence such as\n`[a[:<:]b]` provokes error for an unrecognized POSIX class name. This support is\nnot compatible with Perl. It is provided to help migrations from other\nenvironments, and is best not used in any new patterns. Note that `\\b` matches at\nthe start and the end of a word (see \"Simple assertions\" above), and in a\nPerl-style pattern the preceding or following character normally shows which is\nwanted, without the need for the assertions that are used above in order to give\nexactly the POSIX behaviour.\n\n[](){: #sect9 }","ref":"re.html#module-posix-character-classes"},{"type":"module","title":"Vertical Bar - re","doc":"Vertical bar characters are used to separate alternative patterns. For example,\nthe following pattern matches either \"gilbert\" or \"sullivan\":\n\n```text\ngilbert|sullivan\n```\n\nAny number of alternatives can appear, and an empty alternative is permitted\n(matching the empty string). The matching process tries each alternative in\nturn, from left to right, and the first that succeeds is used. If the\nalternatives are within a subpattern (defined in section\n[Subpatterns](`m:re#sect11`)), \"succeeds\" means matching the remaining main\npattern and the alternative in the subpattern.\n\n[](){: #sect10 }","ref":"re.html#module-vertical-bar"},{"type":"module","title":"Internal Option Setting - re","doc":"The settings of the Perl-compatible options `caseless`, `multiline`, `dotall`,\nand `extended` can be changed from within the pattern by a sequence of Perl\noption letters enclosed between \"(?\" and \")\". The option letters are as follows:\n\n- **i** - For `caseless`\n\n- **m** - For `multiline`\n\n- **s** - For `dotall`\n\n- **x** - For `extended`\n\nFor example, `(?im)` sets caseless, multiline matching. These options can also\nbe unset by preceding the letter with a hyphen. A combined setting and unsetting\nsuch as `(?im-sx)`, which sets `caseless` and `multiline`, while unsetting\n`dotall` and `extended`, is also permitted. If a letter appears both before and\nafter the hyphen, the option is unset.\n\nThe PCRE-specific options `dupnames`, `ungreedy`, and `extra` can be changed in\nthe same way as the Perl-compatible options by using the characters J, U, and X\nrespectively.\n\nWhen one of these option changes occurs at top-level (that is, not inside\nsubpattern parentheses), the change applies to the remainder of the pattern that\nfollows.\n\nAn option change within a subpattern (see section [Subpatterns](`m:re#sect11`))\naffects only that part of the subpattern that follows it. So, the following\nmatches abc and aBc and no other strings (assuming `caseless` is not used):\n\n```text\n(a(?i)b)c\n```\n\nBy this means, options can be made to have different settings in different parts\nof the pattern. Any changes made in one alternative do carry on into subsequent\nbranches within the same subpattern. For example:\n\n```text\n(a(?i)b|c)\n```\n\nmatches \"ab\", \"aB\", \"c\", and \"C\", although when matching \"C\" the first branch is\nabandoned before the option setting. This is because the effects of option\nsettings occur at compile time. There would be some weird behavior otherwise.\n\n> #### Note {: .info }\n>\n> Other PCRE-specific options can be set by the application when the compiling\n> or matching functions are called. Sometimes the pattern can contain special\n> leading sequences, such as (\\*CRLF), to override what the application has set\n> or what has been defaulted. Details are provided in section\n> [Newline Sequences](`m:re#newline_sequences`) earlier.\n>\n> The (*UTF8) and (*UCP) leading sequences can be used to set UTF and Unicode\n> property modes. They are equivalent to setting options `unicode` and `ucp`,\n> respectively. The (*UTF) sequence is a generic version that can be used with\n> any of the libraries. However, the application can set option `never_utf`,\n> which locks out the use of the (*UTF) sequences.\n\n[](){: #sect11 }","ref":"re.html#module-internal-option-setting"},{"type":"module","title":"Subpatterns - re","doc":"Subpatterns are delimited by parentheses (round brackets), which can be nested.\nTurning part of a pattern into a subpattern does two things:\n\n- **1.** - It localizes a set of alternatives. For example, the following\n  pattern matches \"cataract\", \"caterpillar\", or \"cat\":\n\n  ```text\n  cat(aract|erpillar|)\n  ```\n\n  Without the parentheses, it would match \"cataract\", \"erpillar\", or an empty\n  string.\n\n- **2.** - It sets up the subpattern as a capturing subpattern. That is, when\n  the complete pattern matches, that portion of the subject string that matched\n  the subpattern is passed back to the caller through the return value of\n  `run/3`.\n\nOpening parentheses are counted from left to right (starting from 1) to obtain\nnumbers for the capturing subpatterns. For example, if the string \"the red king\"\nis matched against the following pattern, the captured substrings are \"red\nking\", \"red\", and \"king\", and are numbered 1, 2, and 3, respectively:\n\n```text\nthe ((red|white) (king|queen))\n```\n\nIt is not always helpful that plain parentheses fulfill two functions. Often a\ngrouping subpattern is required without a capturing requirement. If an opening\nparenthesis is followed by a question mark and a colon, the subpattern does not\ndo any capturing, and is not counted when computing the number of any subsequent\ncapturing subpatterns. For example, if the string \"the white queen\" is matched\nagainst the following pattern, the captured substrings are \"white queen\" and\n\"queen\", and are numbered 1 and 2:\n\n```text\nthe ((?:red|white) (king|queen))\n```\n\nThe maximum number of capturing subpatterns is 65535.\n\nAs a convenient shorthand, if any option settings are required at the start of a\nnon-capturing subpattern, the option letters can appear between \"?\" and \":\".\nThus, the following two patterns match the same set of strings:\n\n```text\n(?i:saturday|sunday)\n(?:(?i)saturday|sunday)\n```\n\nAs alternative branches are tried from left to right, and options are not reset\nuntil the end of the subpattern is reached, an option setting in one branch does\naffect subsequent branches, so the above patterns match both \"SUNDAY\" and\n\"Saturday\".\n\n[](){: #sect12 }","ref":"re.html#module-subpatterns"},{"type":"module","title":"Duplicate Subpattern Numbers - re","doc":"Perl 5.10 introduced a feature where each alternative in a subpattern uses the\nsame numbers for its capturing parentheses. Such a subpattern starts with `(?|`\nand is itself a non-capturing subpattern. For example, consider the following\npattern:\n\n```text\n(?|(Sat)ur|(Sun))day\n```\n\nAs the two alternatives are inside a `(?|` group, both sets of capturing\nparentheses are numbered one. Thus, when the pattern matches, you can look at\ncaptured substring number one, whichever alternative matched. This construct is\nuseful when you want to capture a part, but not all, of one of many\nalternatives. Inside a `(?|` group, parentheses are numbered as usual, but the\nnumber is reset at the start of each branch. The numbers of any capturing\nparentheses that follow the subpattern start after the highest number used in\nany branch. The following example is from the Perl documentation; the numbers\nunderneath show in which buffer the captured content is stored:\n\n```text\n# before  ---------------branch-reset----------- after\n/ ( a )  (?| x ( y ) z | (p (q) r) | (t) u (v) ) ( z ) /x\n# 1            2         2  3        2     3     4\n```\n\nA back reference to a numbered subpattern uses the most recent value that is set\nfor that number by any subpattern. The following pattern matches \"abcabc\" or\n\"defdef\":\n\n```text\n/(?|(abc)|(def))\\1/\n```\n\nIn contrast, a subroutine call to a numbered subpattern always refers to the\nfirst one in the pattern with the given number. The following pattern matches\n\"abcabc\" or \"defabc\":\n\n```text\n/(?|(abc)|(def))(?1)/\n```\n\nIf a condition test for a subpattern having matched refers to a non-unique\nnumber, the test is true if any of the subpatterns of that number have matched.\n\nAn alternative approach using this \"branch reset\" feature is to use duplicate\nnamed subpatterns, as described in the next section.\n\n[](){: #sect13 }","ref":"re.html#module-duplicate-subpattern-numbers"},{"type":"module","title":"Named Subpatterns - re","doc":"Identifying capturing parentheses by number is simple, but it can be hard to\nkeep track of the numbers in complicated regular expressions. Also, if an\nexpression is modified, the numbers can change. To help with this difficulty,\nPCRE supports the naming of subpatterns. This feature was not added to Perl\nuntil release 5.10. Python had the feature earlier, and PCRE introduced it at\nrelease 4.0, using the Python syntax. PCRE now supports both the Perl and the\nPython syntax. Perl allows identically numbered subpatterns to have different\nnames, but PCRE does not.\n\nIn PCRE, a subpattern can be named in one of three ways: `(? ...)` or\n`(?'name'...)` as in Perl, or `(?P ...)` as in Python. References to\ncapturing parentheses from other parts of the pattern, such as back references,\nrecursion, and conditions, can be made by name and by number.\n\nNames consist of up to 32 alphanumeric characters and underscores, but must\nstart with a non-digit. Named capturing parentheses are still allocated numbers\nas well as names, exactly as if the names were not present. The `capture`\nspecification to `run/3` can use named values if they are present in the regular\nexpression.\n\nBy default, a name must be unique within a pattern, but this constraint can be\nrelaxed by setting option `dupnames` at compile time. (Duplicate names are also\nalways permitted for subpatterns with the same number, set up as described in\nthe previous section.) Duplicate names can be useful for patterns where only one\ninstance of the named parentheses can match. Suppose that you want to match the\nname of a weekday, either as a 3-letter abbreviation or as the full name, and in\nboth cases you want to extract the abbreviation. The following pattern (ignoring\nthe line breaks) does the job:\n\n```text\n(? Mon|Fri|Sun)(?:day)?|\n(? Tue)(?:sday)?|\n(? Wed)(?:nesday)?|\n(? Thu)(?:rsday)?|\n(? Sat)(?:urday)?\n```\n\nThere are five capturing substrings, but only one is ever set after a match. (An\nalternative way of solving this problem is to use a \"branch reset\" subpattern,\nas described in the previous section.)\n\nFor capturing named subpatterns which names are not unique, the first matching\noccurrence (counted from left to right in the subject) is returned from `run/3`,\nif the name is specified in the `values` part of the `capture` statement. The\n`all_names` capturing value matches all the names in the same way.\n\n> #### Note {: .info }\n>\n> You cannot use different names to distinguish between two subpatterns with the\n> same number, as PCRE uses only the numbers when matching. For this reason, an\n> error is given at compile time if different names are specified to subpatterns\n> with the same number. However, you can specify the same name to subpatterns\n> with the same number, even when `dupnames` is not set.\n\n[](){: #sect14 }","ref":"re.html#module-named-subpatterns"},{"type":"module","title":"Repetition - re","doc":"Repetition is specified by quantifiers, which can follow any of the following\nitems:\n\n- A literal data character\n- The dot metacharacter\n- The `\\C` escape sequence\n- The `\\X` escape sequence\n- The `\\R` escape sequence\n- An escape such as `\\d` or `\\pL` that matches a single character\n- A character class\n- A back reference (see the next section)\n- A parenthesized subpattern (including assertions)\n- A subroutine call to a subpattern (recursive or otherwise)\n\nThe general repetition quantifier specifies a minimum and maximum number of\npermitted matches, by giving the two numbers in curly brackets (braces),\nseparated by a comma. The numbers must be < 65536, and the first must be less\nthan or equal to the second. For example, the following matches \"zz\", \"zzz\", or\n\"zzzz\":\n\n```text\nz{2,4}\n```\n\nA closing brace on its own is not a special character. If the second number is\nomitted, but the comma is present, there is no upper limit. If the second number\nand the comma are both omitted, the quantifier specifies an exact number of\nrequired matches. Thus, the following matches at least three successive vowels,\nbut can match many more:\n\n```text\n[aeiou]{3,}\n```\n\nThe following matches exactly eight digits:\n\n```text\n\\d{8}\n```\n\nAn opening curly bracket that appears in a position where a quantifier is not\nallowed, or one that does not match the syntax of a quantifier, is taken as a\nliteral character. For example, \\{,6\\} is not a quantifier, but a literal string\nof four characters.\n\nIn Unicode mode, quantifiers apply to characters rather than to individual data\nunits. Thus, for example, `\\x{100}{2}` matches two characters, each of which\nis represented by a 2-byte sequence in a UTF-8 string. Similarly, `\\X{3}`\nmatches three Unicode extended grapheme clusters, each of which can be many data\nunits long (and they can be of different lengths).\n\nThe quantifier \\{0\\} is permitted, causing the expression to behave as if the\nprevious item and the quantifier were not present. This can be useful for\nsubpatterns that are referenced as subroutines from elsewhere in the pattern\n(but see also section\n[Defining Subpatterns for Use by Reference Only](`m:re#defining_subpatterns`)).\nItems other than subpatterns that have a \\{0\\} quantifier are omitted from the\ncompiled pattern.\n\nFor convenience, the three most common quantifiers have single-character\nabbreviations:\n\n- **\\*** - Equivalent to \\{0,\\}\n\n- **+** - Equivalent to \\{1,\\}\n\n- **?** - Equivalent to \\{0,1\\}\n\nInfinite loops can be constructed by following a subpattern that can match no\ncharacters with a quantifier that has no upper limit, for example:\n\n```text\n(a?)*\n```\n\nEarlier versions of Perl and PCRE used to give an error at compile time for such\npatterns. However, as there are cases where this can be useful, such patterns\nare now accepted. However, if any repetition of the subpattern matches no\ncharacters, the loop is forcibly broken.\n\nBy default, the quantifiers are \"greedy\", that is, they match as much as\npossible (up to the maximum number of permitted times), without causing the\nremaining pattern to fail. The classic example of where this gives problems is\nin trying to match comments in C programs. These appear between /_ and _/.\nWithin the comment, individual \\* and / characters can appear. An attempt to\nmatch C comments by applying the pattern\n\n```text\n/\\*.*\\*/\n```\n\nto the string\n\n```text\n/* first comment */  not comment  /* second comment */\n```\n\nfails, as it matches the entire string owing to the greediness of the .\\* item.\n\nHowever, if a quantifier is followed by a question mark, it ceases to be greedy,\nand instead matches the minimum number of times possible, so the following\npattern does the right thing with the C comments:\n\n```text\n/\\*.*?\\*/\n```\n\nThe meaning of the various quantifiers is not otherwise changed, only the\npreferred number of matches. Do not confuse this use of question mark with its\nuse as a quantifier in its own right. As it has two uses, it can sometimes\nappear doubled, as in\n\n```text\n\\d??\\d\n```\n\nwhich matches one digit by preference, but can match two if that is the only way\nthe remaining pattern matches.\n\nIf option `ungreedy` is set (an option that is not available in Perl), the\nquantifiers are not greedy by default, but individual ones can be made greedy by\nfollowing them with a question mark. That is, it inverts the default behavior.\n\nWhen a parenthesized subpattern is quantified with a minimum repeat count that\nis > 1 or with a limited maximum, more memory is required for the compiled\npattern, in proportion to the size of the minimum or maximum.\n\nIf a pattern starts with .\\* or .\\{0,\\} and option `dotall` (equivalent to Perl\noption `/s`) is set, thus allowing the dot to match newlines, the pattern is\nimplicitly anchored, because whatever follows is tried against every character\nposition in the subject string. So, there is no point in retrying the overall\nmatch at any position after the first. PCRE normally treats such a pattern as if\nit was preceded by `\\A`.\n\nIn cases where it is known that the subject string contains no newlines, it is\nworth setting `dotall` to obtain this optimization, or alternatively using ^ to\nindicate anchoring explicitly.\n\nHowever, there are some cases where the optimization cannot be used. When .\\* is\ninside capturing parentheses that are the subject of a back reference elsewhere\nin the pattern, a match at the start can fail where a later one succeeds.\nConsider, for example:\n\n```text\n(.*)abc\\1\n```\n\nIf the subject is \"xyz123abc123\", the match point is the fourth character.\nTherefore, such a pattern is not implicitly anchored.\n\nAnother case where implicit anchoring is not applied is when the leading .\\* is\ninside an atomic group. Once again, a match at the start can fail where a later\none succeeds. Consider the following pattern:\n\n```text\n(?>.*?a)b\n```\n\nIt matches \"ab\" in the subject \"aab\". The use of the backtracking control verbs\n(*PRUNE) and (*SKIP) also disable this optimization.\n\nWhen a capturing subpattern is repeated, the value captured is the substring\nthat matched the final iteration. For example, after\n\n```text\n(tweedle[dume]{3}\\s*)+\n```\n\nhas matched \"tweedledum tweedledee\", the value of the captured substring is\n\"tweedledee\". However, if there are nested capturing subpatterns, the\ncorresponding captured values can have been set in previous iterations. For\nexample, after\n\n```text\n/(a|(b))+/\n```\n\nmatches \"aba\", the value of the second captured substring is \"b\".\n\n[](){: #sect15 }","ref":"re.html#module-repetition"},{"type":"module","title":"Atomic Grouping and Possessive Quantifiers - re","doc":"With both maximizing (\"greedy\") and minimizing (\"ungreedy\" or \"lazy\")\nrepetition, failure of what follows normally causes the repeated item to be\nre-evaluated to see if a different number of repeats allows the remaining\npattern to match. Sometimes it is useful to prevent this, either to change the\nnature of the match, or to cause it to fail earlier than it otherwise might,\nwhen the author of the pattern knows that there is no point in carrying on.\n\nConsider, for example, the pattern `\\d+foo` when applied to the following subject\nline:\n\n```text\n123456bar\n```\n\nAfter matching all six digits and then failing to match \"foo\", the normal action\nof the matcher is to try again with only five digits matching item `\\d+`, and\nthen with four, and so on, before ultimately failing. \"Atomic grouping\" (a term\ntaken from Jeffrey Friedl's book) provides the means for specifying that once a\nsubpattern has matched, it is not to be re-evaluated in this way.\n\nIf atomic grouping is used for the previous example, the matcher gives up\nimmediately on failing to match \"foo\" the first time. The notation is a kind of\nspecial parenthesis, starting with `(?>` as in the following example:\n\n```text\n(?>\\d+)foo\n```\n\nThis kind of parenthesis \"locks up\" the part of the pattern it contains once it\nhas matched, and a failure further into the pattern is prevented from\nbacktracking into it. Backtracking past it to previous items, however, works as\nnormal.\n\nAn alternative description is that a subpattern of this type matches the string\nof characters that an identical standalone pattern would match, if anchored at\nthe current point in the subject string.\n\nAtomic grouping subpatterns are not capturing subpatterns. Simple cases such as\nthe above example can be thought of as a maximizing repeat that must swallow\neverything it can. So, while both `\\d+` and `\\d+?` are prepared to adjust the\nnumber of digits they match to make the remaining pattern match, `(?>\\d+)` can\nonly match an entire sequence of digits.\n\nAtomic groups in general can contain any complicated subpatterns, and can be\nnested. However, when the subpattern for an atomic group is just a single\nrepeated item, as in the example above, a simpler notation, called a \"possessive\nquantifier\" can be used. This consists of an extra + character following a\nquantifier. Using this notation, the previous example can be rewritten as\n\n```text\n\\d++foo\n```\n\nNotice that a possessive quantifier can be used with an entire group, for\nexample:\n\n```text\n(abc|xyz){2,3}+\n```\n\nPossessive quantifiers are always greedy; the setting of option `ungreedy` is\nignored. They are a convenient notation for the simpler forms of an atomic\ngroup. However, there is no difference in the meaning of a possessive quantifier\nand the equivalent atomic group, but there can be a performance difference;\npossessive quantifiers are probably slightly faster.\n\nThe possessive quantifier syntax is an extension to the Perl 5.8 syntax. Jeffrey\nFriedl originated the idea (and the name) in the first edition of his book. Mike\nMcCloskey liked it, so implemented it when he built the Sun Java package, and\nPCRE copied it from there. It ultimately found its way into Perl at release\n5.10.\n\nPCRE has an optimization that automatically \"possessifies\" certain simple\npattern constructs. For example, the sequence A+B is treated as A++B, as there\nis no point in backtracking into a sequence of A:s when B must follow.\n\nWhen a pattern contains an unlimited repeat inside a subpattern that can itself\nbe repeated an unlimited number of times, the use of an atomic group is the only\nway to avoid some failing matches taking a long time. The pattern\n\n```text\n(\\D+|<\\d+>)*[!?]\n```\n\nmatches an unlimited number of substrings that either consist of non-digits, or\ndigits enclosed in `<>`, followed by `!` or `?`. When it matches, it runs quickly.\nHowever, if it is applied to\n\n```text\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n```\n\nit takes a long time before reporting failure. This is because the string can be\ndivided between the internal `\\D+` repeat and the external \\* repeat in many\nways, and all must be tried. (The example uses `[!?]` rather than a single\ncharacter at the end, as both PCRE and Perl have an optimization that allows for\nfast failure when a single character is used. They remember the last single\ncharacter that is required for a match, and fail early if it is not present in\nthe string.) If the pattern is changed so that it uses an atomic group, like the\nfollowing, sequences of non-digits cannot be broken, and failure happens\nquickly:\n\n```text\n((?>\\D+)|<\\d+>)*[!?]\n```\n\n[](){: #sect16 }","ref":"re.html#module-atomic-grouping-and-possessive-quantifiers"},{"type":"module","title":"Back References - re","doc":"Outside a character class, a backslash followed by a digit > 0 (and possibly\nfurther digits) is a back reference to a capturing subpattern earlier (that is,\nto its left) in the pattern, provided there have been that many previous\ncapturing left parentheses.\n\nHowever, if the decimal number following the backslash is < 10, it is always\ntaken as a back reference, and causes an error only if there are not that many\ncapturing left parentheses in the entire pattern. That is, the parentheses that\nare referenced do need not be to the left of the reference for numbers < 10. A\n\"forward back reference\" of this type can make sense when a repetition is\ninvolved and the subpattern to the right has participated in an earlier\niteration.\n\nIt is not possible to have a numerical \"forward back reference\" to a subpattern\nwhose number is 10 or more using this syntax, as a sequence such as `\\50` is\ninterpreted as a character defined in octal. For more details of the handling of\ndigits following a backslash, see section\n[Non-Printing Characters](`m:re#non_printing_characters`) earlier. There is no\nsuch problem when named parentheses are used. A back reference to any subpattern\nis possible using named parentheses (see below).\n\nAnother way to avoid the ambiguity inherent in the use of digits following a\nbackslash is to use the `\\g` escape sequence. This escape must be followed by an\nunsigned number or a negative number, optionally enclosed in braces. The\nfollowing examples are identical:\n\n```text\n(ring), \\1\n(ring), \\g1\n(ring), \\g{1}\n```\n\nAn unsigned number specifies an absolute reference without the ambiguity that is\npresent in the older syntax. It is also useful when literal digits follow the\nreference. A negative number is a relative reference. Consider the following\nexample:\n\n```text\n(abc(def)ghi)\\g{-1}\n```\n\nThe sequence `\\g{-1}` is a reference to the most recently started capturing\nsubpattern before `\\g`, that is, it is equivalent to `\\2` in this example.\nSimilarly, `\\g{-2}` would be equivalent to `\\1`. The use of relative references\ncan be helpful in long patterns, and also in patterns that are created by\njoining fragments containing references within themselves.\n\nA back reference matches whatever matched the capturing subpattern in the\ncurrent subject string, rather than anything matching the subpattern itself\n(section [Subpattern as Subroutines](`m:re#sect21`) describes a way of doing\nthat). So, the following pattern matches \"sense and sensibility\" and \"response\nand responsibility\", but not \"sense and responsibility\":\n\n```text\n(sens|respons)e and \\1ibility\n```\n\nIf caseful matching is in force at the time of the back reference, the case of\nletters is relevant. For example, the following matches \"rah rah\" and \"RAH RAH\",\nbut not \"RAH rah\", although the original capturing subpattern is matched\ncaselessly:\n\n```text\n((?i)rah)\\s+\\1\n```\n\nThere are many different ways of writing back references to named subpatterns.\nThe .NET syntax `\\k{name}` and the Perl syntax `\\k ` or `\\k'name'` are\nsupported, as is the Python syntax `(?P=name)`. The unified back reference\nsyntax in Perl 5.10, in which `\\g` can be used for both numeric and named\nreferences, is also supported. The previous example can be rewritten in the\nfollowing ways:\n\n```text\n(? (?i)rah)\\s+\\k \n(?'p1'(?i)rah)\\s+\\k{p1}\n(?P (?i)rah)\\s+(?P=p1)\n(? (?i)rah)\\s+\\g{p1}\n```\n\nA subpattern that is referenced by name can appear in the pattern before or\nafter the reference.\n\nThere can be more than one back reference to the same subpattern. If a\nsubpattern has not been used in a particular match, any back references to it\nalways fails. For example, the following pattern always fails if it starts to\nmatch \"a\" rather than \"bc\":\n\n```text\n(a|(bc))\\2\n```\n\nAs there can be many capturing parentheses in a pattern, all digits following\nthe backslash are taken as part of a potential back reference number. If the\npattern continues with a digit character, some delimiter must be used to\nterminate the back reference. If option `extended` is set, this can be\nwhitespace. Otherwise an empty comment (see section [Comments](`m:re#sect19`))\ncan be used.\n\n_Recursive Back References_\n\nA back reference that occurs inside the parentheses to which it refers fails\nwhen the subpattern is first used, so, for example, (`a\\1`) never matches.\nHowever, such references can be useful inside repeated subpatterns. For example,\nthe following pattern matches any number of \"a\"s and also \"aba\", \"ababbaa\", and\nso on:\n\n```text\n(a|b\\1)+\n```\n\nAt each iteration of the subpattern, the back reference matches the character\nstring corresponding to the previous iteration. In order for this to work, the\npattern must be such that the first iteration does not need to match the back\nreference. This can be done using alternation, as in the example above, or by a\nquantifier with a minimum of zero.\n\nBack references of this type cause the group that they reference to be treated\nas an atomic group. Once the whole group has been matched, a subsequent matching\nfailure cannot cause backtracking into the middle of the group.\n\n[](){: #sect17 }","ref":"re.html#module-back-references"},{"type":"module","title":"Assertions - re","doc":"An assertion is a test on the characters following or preceding the current\nmatching point that does not consume any characters. The simple assertions coded\nas `\\b`, `\\B`, `\\A`, `\\G`, `\\Z`, `\\z`, `^`, and `$` are described in the previous\nsections.\n\nMore complicated assertions are coded as subpatterns. There are two kinds: those\nthat look ahead of the current position in the subject string, and those that\nlook behind it. An assertion subpattern is matched in the normal way, except\nthat it does not cause the current matching position to be changed.\n\nAssertion subpatterns are not capturing subpatterns. If such an assertion\ncontains capturing subpatterns within it, these are counted for the purposes of\nnumbering the capturing subpatterns in the whole pattern. However, substring\ncapturing is done only for positive assertions. (Perl sometimes, but not always,\nperforms capturing in negative assertions.)\n\n> #### Warning {: .warning }\n>\n> If a positive assertion containing one or more capturing subpatterns succeeds,\n> but failure to match later in the pattern causes backtracking over this\n> assertion, the captures within the assertion are reset only if no higher\n> numbered captures are already set. This is, unfortunately, a fundamental\n> limitation of the current implementation, and as PCRE1 is now in\n> maintenance-only status, it is unlikely ever to change.\n\nFor compatibility with Perl, assertion subpatterns can be repeated. However, it\nmakes no sense to assert the same thing many times, the side effect of capturing\nparentheses can occasionally be useful. In practice, there are only three cases:\n\n- If the quantifier is \\{0\\}, the assertion is never obeyed during matching.\n  However, it can contain internal capturing parenthesized groups that are\n  called from elsewhere through the subroutine mechanism.\n- If quantifier is \\{0,n\\}, where n > 0, it is treated as if it was \\{0,1\\}. At\n  runtime, the remaining pattern match is tried with and without the assertion,\n  the order depends on the greediness of the quantifier.\n- If the minimum repetition is > 0, the quantifier is ignored. The assertion is\n  obeyed only once when encountered during matching.\n\n_Lookahead Assertions_\n\nLookahead assertions start with (?= for positive assertions and (?\\! for\nnegative assertions. For example, the following matches a word followed by a\nsemicolon, but does not include the semicolon in the match:\n\n```text\n\\w+(?=;)\n```\n\nThe following matches any occurrence of \"foo\" that is not followed by \"bar\":\n\n```text\nfoo(?!bar)\n```\n\nNotice that the apparently similar pattern\n\n```text\n(?!foo)bar\n```\n\ndoes not find an occurrence of \"bar\" that is preceded by something other than\n\"foo\". It finds any occurrence of \"bar\" whatsoever, as the assertion (?\\!foo) is\nalways true when the next three characters are \"bar\". A lookbehind assertion is\nneeded to achieve the other effect.\n\nIf you want to force a matching failure at some point in a pattern, the most\nconvenient way to do it is with (?\\!), as an empty string always matches. So, an\nassertion that requires there is not to be an empty string must always fail. The\nbacktracking control verb (*FAIL) or (*F) is a synonym for (?\\!).\n\n_Lookbehind Assertions_\n\nLookbehind assertions start with (?<= for positive assertions and (?<\\! for\nnegative assertions. For example, the following finds an occurrence of \"bar\"\nthat is not preceded by \"foo\":\n\n```text\n(?<!foo)bar\n```\n\nThe contents of a lookbehind assertion are restricted such that all the strings\nit matches must have a fixed length. However, if there are many top-level\nalternatives, they do not all have to have the same fixed length. Thus, the\nfollowing is permitted:\n\n```text\n(?<=bullock|donkey)\n```\n\nThe following causes an error at compile time:\n\n```text\n(?<!dogs?|cats?)\n```\n\nBranches that match different length strings are permitted only at the top-level\nof a lookbehind assertion. This is an extension compared with Perl, which\nrequires all branches to match the same length of string. An assertion such as\nthe following is not permitted, as its single top-level branch can match two\ndifferent lengths:\n\n```text\n(?<=ab(c|de))\n```\n\nHowever, it is acceptable to PCRE if rewritten to use two top-level branches:\n\n```text\n(?<=abc|abde)\n```\n\nSometimes the escape sequence `\\K` (see above) can be used instead of a\nlookbehind assertion to get round the fixed-length restriction.\n\nThe implementation of lookbehind assertions is, for each alternative, to move\nthe current position back temporarily by the fixed length and then try to match.\nIf there are insufficient characters before the current position, the assertion\nfails.\n\nIn a UTF mode, PCRE does not allow the `\\C` escape (which matches a single data\nunit even in a UTF mode) to appear in lookbehind assertions, as it makes it\nimpossible to calculate the length of the lookbehind. The `\\X` and `\\R` escapes,\nwhich can match different numbers of data units, are not permitted either.\n\n\"Subroutine\" calls (see below), such as (?2) or (?&X), are permitted in\nlookbehinds, as long as the subpattern matches a fixed-length string. Recursion,\nhowever, is not supported.\n\nPossessive quantifiers can be used with lookbehind assertions to specify\nefficient matching of fixed-length strings at the end of subject strings.\nConsider the following simple pattern when applied to a long string that does\nnot match:\n\n```text\nabcd$\n```\n\nAs matching proceeds from left to right, PCRE looks for each \"a\" in the subject\nand then sees if what follows matches the remaining pattern. If the pattern is\nspecified as\n\n```text\n^.*abcd$\n```\n\nthe initial .\\* matches the entire string at first. However, when this fails (as\nthere is no following \"a\"), it backtracks to match all but the last character,\nthen all but the last two characters, and so on. Once again the search for \"a\"\ncovers the entire string, from right to left, so we are no better off. However,\nif the pattern is written as\n\n```text\n^.*+(?<=abcd)\n```\n\nthere can be no backtracking for the .\\*+ item; it can match only the entire\nstring. The subsequent lookbehind assertion does a single test on the last four\ncharacters. If it fails, the match fails immediately. For long strings, this\napproach makes a significant difference to the processing time.\n\n_Using Multiple Assertions_\n\nMany assertions (of any sort) can occur in succession. For example, the\nfollowing matches \"foo\" preceded by three digits that are not \"999\":\n\n```text\n(?<=\\d{3})(?<!999)foo\n```\n\nNotice that each of the assertions is applied independently at the same point in\nthe subject string. First there is a check that the previous three characters\nare all digits, and then there is a check that the same three characters are not\n\"999\". This pattern does _not_ match \"foo\" preceded by six characters, the first\nof which are digits and the last three of which are not \"999\". For example, it\ndoes not match \"123abcfoo\". A pattern to do that is the following:\n\n```text\n(?<=\\d{3}...)(?<!999)foo\n```\n\nThis time the first assertion looks at the preceding six characters, checks that\nthe first three are digits, and then the second assertion checks that the\npreceding three characters are not \"999\".\n\nAssertions can be nested in any combination. For example, the following matches\nan occurrence of \"baz\" that is preceded by \"bar\", which in turn is not preceded\nby \"foo\":\n\n```text\n(?<=(?<!foo)bar)baz\n```\n\nThe following pattern matches \"foo\" preceded by three digits and any three\ncharacters that are not \"999\":\n\n```text\n(?<=\\d{3}(?!999)...)foo\n```\n\n[](){: #sect18 }","ref":"re.html#module-assertions"},{"type":"module","title":"Conditional Subpatterns - re","doc":"It is possible to cause the matching process to obey a subpattern conditionally\nor to choose between two alternative subpatterns, depending on the result of an\nassertion, or whether a specific capturing subpattern has already been matched.\nThe following are the two possible forms of conditional subpattern:\n\n```text\n(?(condition)yes-pattern)\n(?(condition)yes-pattern|no-pattern)\n```\n\nIf the condition is satisfied, the yes-pattern is used, otherwise the no-pattern\n(if present). If more than two alternatives exist in the subpattern, a\ncompile-time error occurs. Each of the two alternatives can itself contain\nnested subpatterns of any form, including conditional subpatterns; the\nrestriction to two alternatives applies only at the level of the condition. The\nfollowing pattern fragment is an example where the alternatives are complex:\n\n```text\n(?(1) (A|B|C) | (D | (?(2)E|F) | E) )\n```\n\nThere are four kinds of condition: references to subpatterns, references to\nrecursion, a pseudo-condition called DEFINE, and assertions.\n\n_Checking for a Used Subpattern By Number_\n\nIf the text between the parentheses consists of a sequence of digits, the\ncondition is true if a capturing subpattern of that number has previously\nmatched. If more than one capturing subpattern with the same number exists (see\nsection [Duplicate Subpattern Numbers](`m:re#sect12`) earlier), the condition is\ntrue if any of them have matched. An alternative notation is to precede the\ndigits with a plus or minus sign. In this case, the subpattern number is\nrelative rather than absolute. The most recently opened parentheses can be\nreferenced by (?(-1), the next most recent by (?(-2), and so on. Inside loops,\nit can also make sense to refer to subsequent groups. The next parentheses to be\nopened can be referenced as (?(+1), and so on. (The value zero in any of these\nforms is not used; it provokes a compile-time error.)\n\nConsider the following pattern, which contains non-significant whitespace to\nmake it more readable (assume option `extended`) and to divide it into three\nparts for ease of discussion:\n\n```text\n( \\( )?    [^()]+    (?(1) \\) )\n```\n\nThe first part matches an optional opening parenthesis, and if that character is\npresent, sets it as the first captured substring. The second part matches one or\nmore characters that are not parentheses. The third part is a conditional\nsubpattern that tests whether the first set of parentheses matched or not. If\nthey did, that is, if subject started with an opening parenthesis, the condition\nis true, and so the yes-pattern is executed and a closing parenthesis is\nrequired. Otherwise, as no-pattern is not present, the subpattern matches\nnothing. That is, this pattern matches a sequence of non-parentheses, optionally\nenclosed in parentheses.\n\nIf this pattern is embedded in a larger one, a relative reference can be used:\n\n```text\n...other stuff... ( \\( )?    [^()]+    (?(-1) \\) ) ...\n```\n\nThis makes the fragment independent of the parentheses in the larger pattern.\n\n_Checking for a Used Subpattern By Name_\n\nPerl uses the syntax (?( )...) or (?('name')...) to test for a used\nsubpattern by name. For compatibility with earlier versions of PCRE, which had\nthis facility before Perl, the syntax (?(name)...) is also recognized.\n\nRewriting the previous example to use a named subpattern gives:\n\n```text\n(?  \\( )?    [^()]+    (?( ) \\) )\n```\n\nIf the name used in a condition of this kind is a duplicate, the test is applied\nto all subpatterns of the same name, and is true if any one of them has matched.\n\n_Checking for Pattern Recursion_\n\nIf the condition is the string (R), and there is no subpattern with the name R,\nthe condition is true if a recursive call to the whole pattern or any subpattern\nhas been made. If digits or a name preceded by ampersand follow the letter R,\nfor example:\n\n```text\n(?(R3)...) or (?(R&name)...)\n```\n\nthe condition is true if the most recent recursion is into a subpattern whose\nnumber or name is given. This condition does not check the entire recursion\nstack. If the name used in a condition of this kind is a duplicate, the test is\napplied to all subpatterns of the same name, and is true if any one of them is\nthe most recent recursion.\n\nAt \"top-level\", all these recursion test conditions are false. The syntax for\nrecursive patterns is described below.\n\n_Defining Subpatterns for Use By Reference Only_\n\n[](){: #defining_subpatterns }\n\nIf the condition is the string (DEFINE), and there is no subpattern with the\nname DEFINE, the condition is always false. In this case, there can be only one\nalternative in the subpattern. It is always skipped if control reaches this\npoint in the pattern. The idea of DEFINE is that it can be used to define\n\"subroutines\" that can be referenced from elsewhere. (The use of subroutines is\ndescribed below.) For example, a pattern to match an IPv4 address, such as\n\"192.168.23.245\", can be written like this (ignore whitespace and line breaks):\n\n```text\n(?(DEFINE) (?  2[0-4]\\d | 25[0-5] | 1\\d\\d | [1-9]?\\d) ) \\b (?&byte) (\\.(?&byte)){3} \\b\n```\n\nThe first part of the pattern is a DEFINE group inside which is a another group\nnamed \"byte\" is defined. This matches an individual component of an IPv4 address\n(a number < 256). When matching takes place, this part of the pattern is\nskipped, as DEFINE acts like a false condition. The remaining pattern uses\nreferences to the named group to match the four dot-separated components of an\nIPv4 address, insisting on a word boundary at each end.\n\n_Assertion Conditions_\n\nIf the condition is not in any of the above formats, it must be an assertion.\nThis can be a positive or negative lookahead or lookbehind assertion. Consider\nthe following pattern, containing non-significant whitespace, and with the two\nalternatives on the second line:\n\n```text\n(?(?=[^a-z]*[a-z])\n\\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} )\n```\n\nThe condition is a positive lookahead assertion that matches an optional\nsequence of non-letters followed by a letter. That is, it tests for the presence\nof at least one letter in the subject. If a letter is found, the subject is\nmatched against the first alternative, otherwise it is matched against the\nsecond. This pattern matches strings in one of the two forms dd-aaa-dd or\ndd-dd-dd, where aaa are letters and dd are digits.\n\n[](){: #sect19 }","ref":"re.html#module-conditional-subpatterns"},{"type":"module","title":"Comments - re","doc":"There are two ways to include comments in patterns that are processed by PCRE.\nIn both cases, the start of the comment must not be in a character class, or in\nthe middle of any other sequence of related characters such as (?: or a\nsubpattern name or number. The characters that make up a comment play no part in\nthe pattern matching.\n\nThe sequence (?# marks the start of a comment that continues up to the next\nclosing parenthesis. Nested parentheses are not permitted. If option\nPCRE_EXTENDED is set, an unescaped # character also introduces a comment, which\nin this case continues to immediately after the next newline character or\ncharacter sequence in the pattern. Which characters are interpreted as newlines\nis controlled by the options passed to a compiling function or by a special\nsequence at the start of the pattern, as described in section\n[Newline Conventions](`m:re#newline_conventions`) earlier.\n\nNotice that the end of this type of comment is a literal newline sequence in the\npattern; escape sequences that happen to represent a newline do not count. For\nexample, consider the following pattern when `extended` is set, and the default\nnewline convention is in force:\n\n```text\nabc #comment \\n still comment\n```\n\nOn encountering character #, `pcre_compile()` skips along, looking for a newline\nin the pattern. The sequence `\\n` is still literal at this stage, so it does not\nterminate the comment. Only a character with code value 0x0a (the default\nnewline) does so.\n\n[](){: #sect20 }","ref":"re.html#module-comments"},{"type":"module","title":"Recursive Patterns - re","doc":"Consider the problem of matching a string in parentheses, allowing for unlimited\nnested parentheses. Without the use of recursion, the best that can be done is\nto use a pattern that matches up to some fixed depth of nesting. It is not\npossible to handle an arbitrary nesting depth.\n\nFor some time, Perl has provided a facility that allows regular expressions to\nrecurse (among other things). It does this by interpolating Perl code in the\nexpression at runtime, and the code can refer to the expression itself. A Perl\npattern using code interpolation to solve the parentheses problem can be created\nlike this:\n\n```text\n$re = qr{\\( (?: (?>[^()]+) | (?p{$re}) )* \\)}x;\n```\n\nItem (?p\\{...\\}) interpolates Perl code at runtime, and in this case refers\nrecursively to the pattern in which it appears.\n\nObviously, PCRE cannot support the interpolation of Perl code. Instead, it\nsupports special syntax for recursion of the entire pattern, and for individual\nsubpattern recursion. After its introduction in PCRE and Python, this kind of\nrecursion was later introduced into Perl at release 5.10.\n\nA special item that consists of (? followed by a number > 0 and a closing\nparenthesis is a recursive subroutine call of the subpattern of the given\nnumber, if it occurs inside that subpattern. (If not, it is a non-recursive\nsubroutine call, which is described in the next section.) The special item (?R)\nor (?0) is a recursive call of the entire regular expression.\n\nThis PCRE pattern solves the nested parentheses problem (assume that option\n`extended` is set so that whitespace is ignored):\n\n```text\n\\( ( [^()]++ | (?R) )* \\)\n```\n\nFirst it matches an opening parenthesis. Then it matches any number of\nsubstrings, which can either be a sequence of non-parentheses or a recursive\nmatch of the pattern itself (that is, a correctly parenthesized substring).\nFinally there is a closing parenthesis. Notice the use of a possessive\nquantifier to avoid backtracking into sequences of non-parentheses.\n\nIf this was part of a larger pattern, you would not want to recurse the entire\npattern, so instead you can use:\n\n```text\n( \\( ( [^()]++ | (?1) )* \\) )\n```\n\nThe pattern is here within parentheses so that the recursion refers to them\ninstead of the whole pattern.\n\nIn a larger pattern, keeping track of parenthesis numbers can be tricky. This is\nmade easier by the use of relative references. Instead of (?1) in the pattern\nabove, you can write (?-2) to refer to the second most recently opened\nparentheses preceding the recursion. That is, a negative number counts capturing\nparentheses leftwards from the point at which it is encountered.\n\nIt is also possible to refer to later opened parentheses, by writing references\nsuch as (?+2). However, these cannot be recursive, as the reference is not\ninside the parentheses that are referenced. They are always non-recursive\nsubroutine calls, as described in the next section.\n\nAn alternative approach is to use named parentheses instead. The Perl syntax for\nthis is (?&name). The earlier PCRE syntax (?P>name) is also supported. We can\nrewrite the above example as follows:\n\n```text\n(?  \\( ( [^()]++ | (?&pn) )* \\) )\n```\n\nIf there is more than one subpattern with the same name, the earliest one is\nused.\n\nThis particular example pattern that we have studied contains nested unlimited\nrepeats, and so the use of a possessive quantifier for matching strings of\nnon-parentheses is important when applying the pattern to strings that do not\nmatch. For example, when this pattern is applied to\n\n```text\n(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()\n```\n\nit gives \"no match\" quickly. However, if a possessive quantifier is not used,\nthe match runs for a long time, as there are so many different ways the + and \\*\nrepeats can carve up the subject, and all must be tested before failure can be\nreported.\n\nAt the end of a match, the values of capturing parentheses are those from the\noutermost level. If the pattern above is matched against\n\n```text\n(ab(cd)ef)\n```\n\nthe value for the inner capturing parentheses (numbered 2) is \"ef\", which is the\nlast value taken on at the top-level. If a capturing subpattern is not matched\nat the top level, its final captured value is unset, even if it was\n(temporarily) set at a deeper level during the matching process.\n\nDo not confuse item (?R) with condition (R), which tests for recursion. Consider\nthe following pattern, which matches text in angle brackets, allowing for\narbitrary nesting. Only digits are allowed in nested brackets (that is, when\nrecursing), while any characters are permitted at the outer level.\n\n```text\n< (?: (?(R) \\d++  | [^<>]*+) | (?R)) * >\n```\n\nHere (?(R) is the start of a conditional subpattern, with two different\nalternatives for the recursive and non-recursive cases. Item (?R) is the actual\nrecursive call.\n\n_Differences in Recursion Processing between PCRE and Perl_\n\nRecursion processing in PCRE differs from Perl in two important ways. In PCRE\n(like Python, but unlike Perl), a recursive subpattern call is always treated as\nan atomic group. That is, once it has matched some of the subject string, it is\nnever re-entered, even if it contains untried alternatives and there is a\nsubsequent matching failure. This can be illustrated by the following pattern,\nwhich means to match a palindromic string containing an odd number of characters\n(for example, \"a\", \"aba\", \"abcba\", \"abcdcba\"):\n\n```text\n^(.|(.)(?1)\\2)$\n```\n\nThe idea is that it either matches a single character, or two identical\ncharacters surrounding a subpalindrome. In Perl, this pattern works; in PCRE it\ndoes not work if the pattern is longer than three characters. Consider the\nsubject string \"abcba\".\n\nAt the top level, the first character is matched, but as it is not at the end of\nthe string, the first alternative fails, the second alternative is taken, and\nthe recursion kicks in. The recursive call to subpattern 1 successfully matches\nthe next character (\"b\"). (Notice that the beginning and end of line tests are\nnot part of the recursion.)\n\nBack at the top level, the next character (\"c\") is compared with what subpattern\n2 matched, which was \"a\". This fails. As the recursion is treated as an atomic\ngroup, there are now no backtracking points, and so the entire match fails.\n(Perl can now re-enter the recursion and try the second alternative.) However,\nif the pattern is written with the alternatives in the other order, things are\ndifferent:\n\n```text\n^((.)(?1)\\2|.)$\n```\n\nThis time, the recursing alternative is tried first, and continues to recurse\nuntil it runs out of characters, at which point the recursion fails. But this\ntime we have another alternative to try at the higher level. That is the\nsignificant difference: in the previous case the remaining alternative is at a\ndeeper recursion level, which PCRE cannot use.\n\nTo change the pattern so that it matches all palindromic strings, not only those\nwith an odd number of characters, it is tempting to change the pattern to this:\n\n```text\n^((.)(?1)\\2|.?)$\n```\n\nAgain, this works in Perl, but not in PCRE, and for the same reason. When a\ndeeper recursion has matched a single character, it cannot be entered again to\nmatch an empty string. The solution is to separate the two cases, and write out\nthe odd and even cases as alternatives at the higher level:\n\n```text\n^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))\n```\n\nIf you want to match typical palindromic phrases, the pattern must ignore all\nnon-word characters, which can be done as follows:\n\n```text\n^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$\n```\n\nIf run with option `caseless`, this pattern matches phrases such as \"A man, a\nplan, a canal: Panama\\!\" and it works well in both PCRE and Perl. Notice the use\nof the possessive quantifier \\*+ to avoid backtracking into sequences of\nnon-word characters. Without this, PCRE takes much longer (10 times or more) to\nmatch typical phrases, and Perl takes so long that you think it has gone into a\nloop.\n\n> #### Note {: .info }\n>\n> The palindrome-matching patterns above work only if the subject string does\n> not start with a palindrome that is shorter than the entire string. For\n> example, although \"abcba\" is correctly matched, if the subject is \"ababa\",\n> PCRE finds palindrome \"aba\" at the start, and then fails at top level, as the\n> end of the string does not follow. Once again, it cannot jump back into the\n> recursion to try other alternatives, so the entire match fails.\n\nThe second way in which PCRE and Perl differ in their recursion processing is in\nthe handling of captured values. In Perl, when a subpattern is called\nrecursively or as a subpattern (see the next section), it has no access to any\nvalues that were captured outside the recursion. In PCRE these values can be\nreferenced. Consider the following pattern:\n\n```text\n^(.)(\\1|a(?2))\n```\n\nIn PCRE, it matches \"bab\". The first capturing parentheses match \"b\", then in\nthe second group, when the back reference `\\1` fails to match \"b\", the second\nalternative matches \"a\", and then recurses. In the recursion, `\\1` does now match\n\"b\" and so the whole match succeeds. In Perl, the pattern fails to match because\ninside the recursive call `\\1` cannot access the externally set value.\n\n[](){: #sect21 }","ref":"re.html#module-recursive-patterns"},{"type":"module","title":"Subpatterns as Subroutines - re","doc":"If the syntax for a recursive subpattern call (either by number or by name) is\nused outside the parentheses to which it refers, it operates like a subroutine\nin a programming language. The called subpattern can be defined before or after\nthe reference. A numbered reference can be absolute or relative, as in the\nfollowing examples:\n\n```text\n(...(absolute)...)...(?2)...\n(...(relative)...)...(?-1)...\n(...(?+1)...(relative)...\n```\n\nAn earlier example pointed out that the following pattern matches \"sense and\nsensibility\" and \"response and responsibility\", but not \"sense and\nresponsibility\":\n\n```text\n(sens|respons)e and \\1ibility\n```\n\nIf instead the following pattern is used, it matches \"sense and responsibility\"\nand the other two strings:\n\n```text\n(sens|respons)e and (?1)ibility\n```\n\nAnother example is provided in the discussion of DEFINE earlier.\n\nAll subroutine calls, recursive or not, are always treated as atomic groups.\nThat is, once a subroutine has matched some of the subject string, it is never\nre-entered, even if it contains untried alternatives and there is a subsequent\nmatching failure. Any capturing parentheses that are set during the subroutine\ncall revert to their previous values afterwards.\n\nProcessing options such as case-independence are fixed when a subpattern is\ndefined, so if it is used as a subroutine, such options cannot be changed for\ndifferent calls. For example, the following pattern matches \"abcabc\" but not\n\"abcABC\", as the change of processing option does not affect the called\nsubpattern:\n\n```text\n(abc)(?i:(?-1))\n```\n\n[](){: #sect22 }","ref":"re.html#module-subpatterns-as-subroutines"},{"type":"module","title":"Oniguruma Subroutine Syntax - re","doc":"For compatibility with Oniguruma, the non-Perl syntax `\\g` followed by a name or\na number enclosed either in angle brackets or single quotes, is alternative\nsyntax for referencing a subpattern as a subroutine, possibly recursively. Here\nfollows two of the examples used above, rewritten using this syntax:\n\n```text\n(?  \\( ( (?>[^()]+) | \\g  )* \\) )\n(sens|respons)e and \\g'1'ibility\n```\n\nPCRE supports an extension to Oniguruma: if a number is preceded by a plus or\nminus sign, it is taken as a relative reference, for example:\n\n```text\n(abc)(?i:\\g<-1>)\n```\n\nNotice that `\\g{...}` (Perl syntax) and `\\g<...>` (Oniguruma syntax) are _not_\nsynonymous. The former is a back reference; the latter is a subroutine call.\n\n[](){: #sect23 }","ref":"re.html#module-oniguruma-subroutine-syntax"},{"type":"module","title":"Backtracking Control - re","doc":"Perl 5.10 introduced some \"Special Backtracking Control Verbs\", which are still\ndescribed in the Perl documentation as \"experimental and subject to change or\nremoval in a future version of Perl\". It goes on to say: \"Their usage in\nproduction code should be noted to avoid problems during upgrades.\" The same\nremarks apply to the PCRE features described in this section.\n\nThe new verbs make use of what was previously invalid syntax: an opening\nparenthesis followed by an asterisk. They are generally of the form (*VERB) or\n(*VERB:NAME). Some can take either form, possibly behaving differently depending\non whether a name is present. A name is any sequence of characters that does not\ninclude a closing parenthesis. The maximum name length is 255 in the 8-bit\nlibrary and 65535 in the 16-bit and 32-bit libraries. If the name is empty, that\nis, if the closing parenthesis immediately follows the colon, the effect is as\nif the colon was not there. Any number of these verbs can occur in a pattern.\n\nThe behavior of these verbs in repeated groups, assertions, and in subpatterns\ncalled as subroutines (whether or not recursively) is described below.\n\n_Optimizations That Affect Backtracking Verbs_\n\nPCRE contains some optimizations that are used to speed up matching by running\nsome checks at the start of each match attempt. For example, it can know the\nminimum length of matching subject, or that a particular character must be\npresent. When one of these optimizations bypasses the running of a match, any\nincluded backtracking verbs are not processed. processed. You can suppress the\nstart-of-match optimizations by setting option `no_start_optimize` when calling\n`compile/2` or `run/3`, or by starting the pattern with (\\*NO_START_OPT).\n\nExperiments with Perl suggest that it too has similar optimizations, sometimes\nleading to anomalous results.\n\n_Verbs That Act Immediately_\n\nThe following verbs act as soon as they are encountered. They must not be\nfollowed by a name.\n\n```text\n(*ACCEPT)\n```\n\nThis verb causes the match to end successfully, skipping the remainder of the\npattern. However, when it is inside a subpattern that is called as a subroutine,\nonly that subpattern is ended successfully. Matching then continues at the outer\nlevel. If (\\*ACCEPT) is triggered in a positive assertion, the assertion\nsucceeds; in a negative assertion, the assertion fails.\n\nIf (\\*ACCEPT) is inside capturing parentheses, the data so far is captured. For\nexample, the following matches \"AB\", \"AAD\", or \"ACD\". When it matches \"AB\", \"B\"\nis captured by the outer parentheses.\n\n```text\nA((?:A|B(*ACCEPT)|C)D)\n```\n\nThe following verb causes a matching failure, forcing backtracking to occur. It\nis equivalent to (?\\!) but easier to read.\n\n```text\n(*FAIL) or (*F)\n```\n\nThe Perl documentation states that it is probably useful only when combined with\n(?\\{\\}) or (??\\{\\}). Those are Perl features that are not present in PCRE.\n\nA match with the string \"aaaa\" always fails, but the callout is taken before\neach backtrack occurs (in this example, 10 times).\n\n_Recording Which Path Was Taken_\n\nThe main purpose of this verb is to track how a match was arrived at, although\nit also has a secondary use in with advancing the match starting point (see\n(\\*SKIP) below).\n\n> #### Note {: .info }\n>\n> In Erlang, there is no interface to retrieve a mark with [`run/2,3`](`run/2`),\n> so only the secondary purpose is relevant to the Erlang programmer.\n>\n> The rest of this section is therefore deliberately not adapted for reading by\n> the Erlang programmer, but the examples can help in understanding NAMES as\n> they can be used by (\\*SKIP).\n\n```text\n(*MARK:NAME) or (*:NAME)\n```\n\nA name is always required with this verb. There can be as many instances of\n(\\*MARK) as you like in a pattern, and their names do not have to be unique.\n\nWhen a match succeeds, the name of the last encountered (*MARK:NAME),\n(*PRUNE:NAME), or (*THEN:NAME) on the matching path is passed back to the caller\nas described in section \"Extra data for `pcre_exec()`\" in the `pcreapi`\ndocumentation. In the following example of `pcretest` output, the /K modifier\nrequests the retrieval and outputting of (*MARK) data:\n\n```text\nre> /X(*MARK:A)Y|X(*MARK:B)Z/K\ndata> XY\n 0: XY\nMK: A\nXZ\n 0: XZ\nMK: B\n```\n\nThe (\\*MARK) name is tagged with \"MK:\" in this output, and in this example it\nindicates which of the two alternatives matched. This is a more efficient way of\nobtaining this information than putting each alternative in its own capturing\nparentheses.\n\nIf a verb with a name is encountered in a positive assertion that is true, the\nname is recorded and passed back if it is the last encountered. This does not\noccur for negative assertions or failing positive assertions.\n\nAfter a partial match or a failed match, the last encountered name in the entire\nmatch process is returned, for example:\n\n```text\nre> /X(*MARK:A)Y|X(*MARK:B)Z/K\ndata> XP\nNo match, mark = B\n```\n\nNotice that in this unanchored example, the mark is retained from the match\nattempt that started at letter \"X\" in the subject. Subsequent match attempts\nstarting at \"P\" and then with an empty string do not get as far as the (\\*MARK)\nitem, nevertheless do not reset it.\n\n_Verbs That Act after Backtracking_\n\nThe following verbs do nothing when they are encountered. Matching continues\nwith what follows, but if there is no subsequent match, causing a backtrack to\nthe verb, a failure is forced. That is, backtracking cannot pass to the left of\nthe verb. However, when one of these verbs appears inside an atomic group or an\nassertion that is true, its effect is confined to that group, as once the group\nhas been matched, there is never any backtracking into it. In this situation,\nbacktracking can \"jump back\" to the left of the entire atomic group or\nassertion. (Remember also, as stated above, that this localization also applies\nin subroutine calls.)\n\nThese verbs differ in exactly what kind of failure occurs when backtracking\nreaches them. The behavior described below is what occurs when the verb is not\nin a subroutine or an assertion. Subsequent sections cover these special cases.\n\nThe following verb, which must not be followed by a name, causes the whole match\nto fail outright if there is a later matching failure that causes backtracking\nto reach it. Even if the pattern is unanchored, no further attempts to find a\nmatch by advancing the starting point take place.\n\n```text\n(*COMMIT)\n```\n\nIf (\\*COMMIT) is the only backtracking verb that is encountered, once it has\nbeen passed, [`run/2,3`](`run/2`) is committed to find a match at the current\nstarting point, or not at all, for example:\n\n```text\na+(*COMMIT)b\n```\n\nThis matches \"xxaab\" but not \"aacaab\". It can be thought of as a kind of dynamic\nanchor, or \"I've started, so I must finish\". The name of the most recently\npassed (*MARK) in the path is passed back when (*COMMIT) forces a match failure.\n\nIf more than one backtracking verb exists in a pattern, a different one that\nfollows (*COMMIT) can be triggered first, so merely passing (*COMMIT) during a\nmatch does not always guarantee that a match must be at this starting point.\n\nNotice that (\\*COMMIT) at the start of a pattern is not the same as an anchor,\nunless the PCRE start-of-match optimizations are turned off, as shown in the\nfollowing example:\n\n```erlang\n1> re:run(\"xyzabc\",\"(*COMMIT)abc\",[{capture,all,list}]).\n{match,[\"abc\"]}\n2> re:run(\"xyzabc\",\"(*COMMIT)abc\",[{capture,all,list},no_start_optimize]).\nnomatch\n```\n\nFor this pattern, PCRE knows that any match must start with \"a\", so the\noptimization skips along the subject to \"a\" before applying the pattern to the\nfirst set of data. The match attempt then succeeds. In the second call the\n`no_start_optimize` disables the optimization that skips along to the first\ncharacter. The pattern is now applied starting at \"x\", and so the (\\*COMMIT)\ncauses the match to fail without trying any other starting points.\n\nThe following verb causes the match to fail at the current starting position in\nthe subject if there is a later matching failure that causes backtracking to\nreach it:\n\n```text\n(*PRUNE) or (*PRUNE:NAME)\n```\n\nIf the pattern is unanchored, the normal \"bumpalong\" advance to the next\nstarting character then occurs. Backtracking can occur as usual to the left of\n(*PRUNE), before it is reached, or when matching to the right of (*PRUNE), but\nif there is no match to the right, backtracking cannot cross (*PRUNE). In simple\ncases, the use of (*PRUNE) is just an alternative to an atomic group or\npossessive quantifier, but there are some uses of (*PRUNE) that cannot be\nexpressed in any other way. In an anchored pattern, (*PRUNE) has the same effect\nas (\\*COMMIT).\n\nThe behavior of (*PRUNE:NAME) is the not the same as (*MARK:NAME)(*PRUNE). It is\nlike (*MARK:NAME) in that the name is remembered for passing back to the caller.\nHowever, (*SKIP:NAME) searches only for names set with (*MARK).\n\n> #### Note {: .info }\n>\n> The fact that (\\*PRUNE:NAME) remembers the name is useless to the Erlang\n> programmer, as names cannot be retrieved.\n\nThe following verb, when specified without a name, is like (*PRUNE), except that\nif the pattern is unanchored, the \"bumpalong\" advance is not to the next\ncharacter, but to the position in the subject where (*SKIP) was encountered.\n\n```text\n(*SKIP)\n```\n\n(\\*SKIP) signifies that whatever text was matched leading up to it cannot be\npart of a successful match. Consider:\n\n```text\na+(*SKIP)b\n```\n\nIf the subject is \"aaaac...\", after the first match attempt fails (starting at\nthe first character in the string), the starting point skips on to start the\nnext attempt at \"c\". Notice that a possessive quantifier does not have the same\neffect as this example; although it would suppress backtracking during the first\nmatch attempt, the second attempt would start at the second character instead of\nskipping on to \"c\".\n\nWhen (\\*SKIP) has an associated name, its behavior is modified:\n\n```text\n(*SKIP:NAME)\n```\n\nWhen this is triggered, the previous path through the pattern is searched for\nthe most recent (*MARK) that has the same name. If one is found, the \"bumpalong\"\nadvance is to the subject position that corresponds to that (*MARK) instead of\nto where (*SKIP) was encountered. If no (*MARK) with a matching name is found,\n(\\*SKIP) is ignored.\n\nNotice that (*SKIP:NAME) searches only for names set by (*MARK:NAME). It ignores\nnames that are set by (*PRUNE:NAME) or (*THEN:NAME).\n\nThe following verb causes a skip to the next innermost alternative when\nbacktracking reaches it. That is, it cancels any further backtracking within the\ncurrent alternative.\n\n```text\n(*THEN) or (*THEN:NAME)\n```\n\nThe verb name comes from the observation that it can be used for a pattern-based\nif-then-else block:\n\n```text\n( COND1 (*THEN) FOO | COND2 (*THEN) BAR | COND3 (*THEN) BAZ ) ...\n```\n\nIf the COND1 pattern matches, FOO is tried (and possibly further items after the\nend of the group if FOO succeeds). On failure, the matcher skips to the second\nalternative and tries COND2, without backtracking into COND1. If that succeeds\nand BAR fails, COND3 is tried. If BAZ then fails, there are no more\nalternatives, so there is a backtrack to whatever came before the entire group.\nIf (*THEN) is not inside an alternation, it acts like (*PRUNE).\n\nThe behavior of (*THEN:NAME) is the not the same as (*MARK:NAME)(*THEN). It is\nlike (*MARK:NAME) in that the name is remembered for passing back to the caller.\nHowever, (*SKIP:NAME) searches only for names set with (*MARK).\n\n> #### Note {: .info }\n>\n> The fact that (\\*THEN:NAME) remembers the name is useless to the Erlang\n> programmer, as names cannot be retrieved.\n\nA subpattern that does not contain a | character is just a part of the enclosing\nalternative; it is not a nested alternation with only one alternative. The\neffect of (\\*THEN) extends beyond such a subpattern to the enclosing\nalternative. Consider the following pattern, where A, B, and so on, are complex\npattern fragments that do not contain any | characters at this level:\n\n```text\nA (B(*THEN)C) | D\n```\n\nIf A and B are matched, but there is a failure in C, matching does not backtrack\ninto A; instead it moves to the next alternative, that is, D. However, if the\nsubpattern containing (\\*THEN) is given an alternative, it behaves differently:\n\n```text\nA (B(*THEN)C | (*FAIL)) | D\n```\n\nThe effect of (*THEN) is now confined to the inner subpattern. After a failure\nin C, matching moves to (*FAIL), which causes the whole subpattern to fail, as\nthere are no more alternatives to try. In this case, matching does now backtrack\ninto A.\n\nNotice that a conditional subpattern is not considered as having two\nalternatives, as only one is ever used. That is, the | character in a\nconditional subpattern has a different meaning. Ignoring whitespace, consider:\n\n```text\n^.*? (?(?=a) a | b(*THEN)c )\n```\n\nIf the subject is \"ba\", this pattern does not match. As ._? is ungreedy, it\ninitially matches zero characters. The condition (?=a) then fails, the character\n\"b\" is matched, but \"c\" is not. At this point, matching does not backtrack to\n._? as can perhaps be expected from the presence of the | character. The\nconditional subpattern is part of the single alternative that comprises the\nwhole pattern, and so the match fails. (If there was a backtrack into .\\*?,\nallowing it to match \"b\", the match would succeed.)\n\nThe verbs described above provide four different \"strengths\" of control when\nsubsequent matching fails:\n\n- (\\*THEN) is the weakest, carrying on the match at the next alternative.\n- (\\*PRUNE) comes next, fails the match at the current starting position, but\n  allows an advance to the next character (for an unanchored pattern).\n- (\\*SKIP) is similar, except that the advance can be more than one character.\n- (\\*COMMIT) is the strongest, causing the entire match to fail.\n\n_More than One Backtracking Verb_\n\nIf more than one backtracking verb is present in a pattern, the one that is\nbacktracked onto first acts. For example, consider the following pattern, where\nA, B, and so on, are complex pattern fragments:\n\n```text\n(A(*COMMIT)B(*THEN)C|ABD)\n```\n\nIf A matches but B fails, the backtrack to (*COMMIT) causes the entire match to\nfail. However, if A and B match, but C fails, the backtrack to (*THEN) causes\nthe next alternative (ABD) to be tried. This behavior is consistent, but is not\nalways the same as in Perl. It means that if two or more backtracking verbs\nappear in succession, the last of them has no effect. Consider the following\nexample:\n\n```text\n...(*COMMIT)(*PRUNE)...\n```\n\nIf there is a matching failure to the right, backtracking onto (*PRUNE) causes\nit to be triggered, and its action is taken. There can never be a backtrack onto\n(*COMMIT).\n\n_Backtracking Verbs in Repeated Groups_\n\nPCRE differs from Perl in its handling of backtracking verbs in repeated groups.\nFor example, consider:\n\n```text\n/(a(*COMMIT)b)+ac/\n```\n\nIf the subject is \"abac\", Perl matches, but PCRE fails because the (\\*COMMIT) in\nthe second repeat of the group acts.\n\n_Backtracking Verbs in Assertions_\n\n(\\*FAIL) in an assertion has its normal effect: it forces an immediate\nbacktrack.\n\n(*ACCEPT) in a positive assertion causes the assertion to succeed without any\nfurther processing. In a negative assertion, (*ACCEPT) causes the assertion to\nfail without any further processing.\n\nThe other backtracking verbs are not treated specially if they appear in a\npositive assertion. In particular, (\\*THEN) skips to the next alternative in the\ninnermost enclosing group that has alternations, regardless if this is within\nthe assertion.\n\nNegative assertions are, however, different, to ensure that changing a positive\nassertion into a negative assertion changes its result. Backtracking into\n(*COMMIT), (*SKIP), or (*PRUNE) causes a negative assertion to be true, without\nconsidering any further alternative branches in the assertion. Backtracking into\n(*THEN) causes it to skip to the next enclosing alternative within the assertion\n(the normal behavior), but if the assertion does not have such an alternative,\n(*THEN) behaves like (*PRUNE).\n\n_Backtracking Verbs in Subroutines_\n\nThese behaviors occur regardless if the subpattern is called recursively. The\ntreatment of subroutines in Perl is different in some cases.\n\n- (\\*FAIL) in a subpattern called as a subroutine has its normal effect: it\n  forces an immediate backtrack.\n- (\\*ACCEPT) in a subpattern called as a subroutine causes the subroutine match\n  to succeed without any further processing. Matching then continues after the\n  subroutine call.\n- (*COMMIT), (*SKIP), and (\\*PRUNE) in a subpattern called as a subroutine cause\n  the subroutine match to fail.\n- (*THEN) skips to the next alternative in the innermost enclosing group within\n  the subpattern that has alternatives. If there is no such group within the\n  subpattern, (*THEN) causes the subroutine match to fail.","ref":"re.html#module-backtracking-control"},{"type":"type","title":"re.capture/0","doc":"","ref":"re.html#t:capture/0"},{"type":"function","title":"re.compile/1","doc":"The same as [`compile(Regexp,[])`](`compile/2`)","ref":"re.html#compile/1"},{"type":"function","title":"re.compile/2","doc":"Compiles a regular expression, with the syntax described below, into an internal\nformat to be used later as a parameter to `run/2` and `run/3`.\n\nCompiling the regular expression before matching is useful if the same\nexpression is to be used in matching against multiple subjects during the\nlifetime of the program. Compiling once and executing many times is far more\nefficient than compiling each time one wants to match.\n\nWhen option `unicode` is specified, the regular expression is to be specified as\na valid Unicode `charlist()`, otherwise as any valid `t:iodata/0`.\n\n[](){: #compile_options }\n\nOptions:\n\n- **`unicode`** - The regular expression is specified as a Unicode `charlist()`\n  and the resulting regular expression code is to be run against a valid Unicode\n  `charlist()` subject. Also consider option `ucp` when using Unicode\n  characters.\n\n- **`anchored`** - The pattern is forced to be \"anchored\", that is, it is\n  constrained to match only at the first matching point in the string that is\n  searched (the \"subject string\"). This effect can also be achieved by\n  appropriate constructs in the pattern itself.\n\n- **`caseless`** - Letters in the pattern match both uppercase and lowercase\n  letters. It is equivalent to Perl option `/i` and can be changed within a\n  pattern by a `(?i)` option setting. Uppercase and lowercase letters are\n  defined as in the ISO 8859-1 character set.\n\n- **`dollar_endonly`** - A dollar metacharacter in the pattern matches only at\n  the end of the subject string. Without this option, a dollar also matches\n  immediately before a newline at the end of the string (but not before any\n  other newlines). This option is ignored if option `multiline` is specified.\n  There is no equivalent option in Perl, and it cannot be set within a pattern.\n\n- **`dotall`** - A dot in the pattern matches all characters, including those\n  indicating newline. Without it, a dot does not match when the current position\n  is at a newline. This option is equivalent to Perl option `/s` and it can be\n  changed within a pattern by a `(?s)` option setting. A negative class, such as\n  `[^a]`, always matches newline characters, independent of the setting of this\n  option.\n\n- **`extended`** - If this option is set, most white space characters in the\n  pattern are totally ignored except when escaped or inside a character class.\n  However, white space is not allowed within sequences such as `(?>` that\n  introduce various parenthesized subpatterns, nor within a numerical quantifier\n  such as `{1,3}`. However, ignorable white space is permitted between an item\n  and a following quantifier and between a quantifier and a following + that\n  indicates possessiveness.\n\n  White space did not used to include the VT character (code 11), because Perl\n  did not treat this character as white space. However, Perl changed at release\n  5.18, so PCRE followed at release 8.34, and VT is now treated as white space.\n\n  This also causes characters between an unescaped # outside a character class\n  and the next newline, inclusive, to be ignored. This is equivalent to Perl's\n  `/x` option, and it can be changed within a pattern by a `(?x)` option\n  setting.\n\n  With this option, comments inside complicated patterns can be included.\n  However, notice that this applies only to data characters. Whitespace\n  characters can never appear within special character sequences in a pattern,\n  for example within sequence `(?(` that introduces a conditional subpattern.\n\n- **`firstline`** - An unanchored pattern is required to match before or at the\n  first newline in the subject string, although the matched text can continue\n  over the newline.\n\n- **`multiline`** - By default, PCRE treats the subject string as consisting of\n  a single line of characters (even if it contains newlines). The \"start of\n  line\" metacharacter (`^`) matches only at the start of the string, while the\n  \"end of line\" metacharacter (`$`) matches only at the end of the string, or\n  before a terminating newline (unless option `dollar_endonly` is specified).\n  This is the same as in Perl.\n\n  When this option is specified, the \"start of line\" and \"end of line\"\n  constructs match immediately following or immediately before internal newlines\n  in the subject string, respectively, as well as at the very start and end.\n  This is equivalent to Perl option `/m` and can be changed within a pattern by\n  a `(?m)` option setting. If there are no newlines in a subject string, or no\n  occurrences of `^` or `$` in a pattern, setting `multiline` has no effect.\n\n- **`no_auto_capture`** - Disables the use of numbered capturing parentheses in\n  the pattern. Any opening parenthesis that is not followed by `?` behaves as if\n  it is followed by `?:`. Named parentheses can still be used for capturing (and\n  they acquire numbers in the usual way). There is no equivalent option in Perl.\n\n- **`dupnames`** - Names used to identify capturing subpatterns need not be\n  unique. This can be helpful for certain types of pattern when it is known that\n  only one instance of the named subpattern can ever be matched. More details of\n  named subpatterns are provided below.\n\n- **`ungreedy`** - Inverts the \"greediness\" of the quantifiers so that they are\n  not greedy by default, but become greedy if followed by \"?\". It is not\n  compatible with Perl. It can also be set by a `(?U)` option setting within the\n  pattern.\n\n- **`{newline, NLSpec}`** - Overrides the default definition of a newline in the\n  subject string, which is LF (ASCII 10) in Erlang.\n\n  - **`cr`** - Newline is indicated by a single character `cr` (ASCII 13).\n\n  - **`lf`** - Newline is indicated by a single character LF (ASCII 10), the\n    default.\n\n  - **`crlf`** - Newline is indicated by the two-character CRLF (ASCII 13\n    followed by ASCII 10) sequence.\n\n  - **`anycrlf`** - Any of the three preceding sequences is to be recognized.\n\n  - **`any`** - Any of the newline sequences above, and the Unicode sequences VT\n    (vertical tab, U+000B), FF (formfeed, U+000C), NEL (next line, U+0085), LS\n    (line separator, U+2028), and PS (paragraph separator, U+2029).\n\n- **`bsr_anycrlf`** - Specifies specifically that \\\\R is to match only the CR,\n  LF, or CRLF sequences, not the Unicode-specific newline characters.\n\n- **`bsr_unicode`** - Specifies specifically that \\\\R is to match all the\n  Unicode newline characters (including CRLF, and so on, the default).\n\n- **`no_start_optimize`** - Disables optimization that can malfunction if\n  \"Special start-of-pattern items\" are present in the regular expression. A\n  typical example would be when matching \"DEFABC\" against \"(*COMMIT)ABC\", where\n  the start optimization of PCRE would skip the subject up to \"A\" and never\n  realize that the (*COMMIT) instruction is to have made the matching fail. This\n  option is only relevant if you use \"start-of-pattern items\", as discussed in\n  section [PCRE Regular Expression Details](`m:re#module-pcre-regular-expression-details`).\n\n- **`ucp`** - Specifies that Unicode character properties are to be used when\n  resolving \\\\B, \\\\b, \\\\D, \\\\d, \\\\S, \\\\s, \\\\W and \\\\w. Without this flag, only\n  ISO Latin-1 properties are used. Using Unicode properties hurts performance,\n  but is semantically correct when working with Unicode characters beyond the\n  ISO Latin-1 range.\n\n- **`never_utf`** - Specifies that the (*UTF) and/or (*UTF8) \"start-of-pattern\n  items\" are forbidden. This flag cannot be combined with option `unicode`.\n  Useful if ISO Latin-1 patterns from an external source are to be compiled.","ref":"re.html#compile/2"},{"type":"type","title":"re.compile_option/0","doc":"","ref":"re.html#t:compile_option/0"},{"type":"type","title":"re.compile_options/0","doc":"","ref":"re.html#t:compile_options/0"},{"type":"function","title":"re.inspect/2","doc":"Takes a compiled regular expression and an item, and returns the relevant data\nfrom the regular expression.\n\nThe only supported item is `namelist`, which returns the tuple `{namelist, [binary()]}`,\ncontaining the names of all (unique) named subpatterns in the regular expression.\n\nFor example:\n\n```erlang\n1> {ok,MP} = re:compile(\"(? A)|(? B)|(? C)\").\n{ok,{re_pattern,3,0,0,\n                <<69,82,67,80,119,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,\n                  255,255,...>>}}\n2> re:inspect(MP,namelist).\n{namelist,[<<\"A\">>,<<\"B\">>,<<\"C\">>]}\n3> {ok,MPD} = re:compile(\"(? A)|(? B)|(? C)\",[dupnames]).\n{ok,{re_pattern,3,0,0,\n                <<69,82,67,80,119,0,0,0,0,0,8,0,1,0,0,0,255,255,255,255,\n                  255,255,...>>}}\n4> re:inspect(MPD,namelist).\n{namelist,[<<\"B\">>,<<\"C\">>]}\n```\n\nNotice in the second example that the duplicate name only occurs once in the\nreturned list, and that the list is in alphabetical order regardless of where\nthe names are positioned in the regular expression. The order of the names is\nthe same as the order of captured subexpressions if `{capture, all_names}` is\nspecified as an option to `run/3`. You can therefore create a name-to-value\nmapping from the result of [`run/3`](`run/3`) like this:\n\n```erlang\n1> {ok,MP} = re:compile(\"(? A)|(? B)|(? C)\").\n{ok,{re_pattern,3,0,0,\n                <<69,82,67,80,119,0,0,0,0,0,0,0,1,0,0,0,255,255,255,255,\n                  255,255,...>>}}\n2> {namelist, N} = re:inspect(MP,namelist).\n{namelist,[<<\"A\">>,<<\"B\">>,<<\"C\">>]}\n3> {match,L} = re:run(\"AA\",MP,[{capture,all_names,binary}]).\n{match,[<<\"A\">>,<<>>,<<>>]}\n4> NameMap = lists:zip(N,L).\n[{<<\"A\">>,<<\"A\">>},{<<\"B\">>,<<>>},{<<\"C\">>,<<>>}]\n```","ref":"re.html#inspect/2"},{"type":"type","title":"re.mp/0","doc":"Opaque data type containing a compiled regular expression.\n\n`t:mp/0` is guaranteed to be a tuple() having the atom `re_pattern` as its first element, to\nallow for matching in guards. The arity of the tuple or the content of the other\nfields can change in future Erlang/OTP releases.","ref":"re.html#t:mp/0"},{"type":"type","title":"re.nl_spec/0","doc":"","ref":"re.html#t:nl_spec/0"},{"type":"type","title":"re.option/0","doc":"","ref":"re.html#t:option/0"},{"type":"type","title":"re.options/0","doc":"","ref":"re.html#t:options/0"},{"type":"function","title":"re.replace/3","doc":"","ref":"re.html#replace/3"},{"type":"function","title":"re.replace/4","doc":"Replaces the matched part of the `Subject` string with `Replacement`.\n\nThe permissible options are the same as for `run/3`, except that\noption` capture` is not allowed. Instead a `{return, ReturnType}` is present.\nThe default return type is `iodata`, constructed in a way to minimize copying.\nThe `iodata` result can be used directly in many I/O operations. If a flat\n`t:list/0` is desired, specify `{return, list}`. If a binary is desired, specify\n`{return, binary}`.\n\nAs in function [`run/3`](`run/3`), an `t:mp/0` compiled with option `unicode`\nrequires `Subject` to be a Unicode `charlist()`. If compilation is done\nimplicitly and the `unicode` compilation option is specified to this function,\nboth the regular expression and `Subject` are to specified as valid Unicode\n`charlist()`s.\n\nIf the replacement is given as a string, it can contain the special character\n`&`, which inserts the whole matching expression in the result, and the special\nsequence `\\`N (where N is an integer > 0), `\\g`N, or `\\g{`N`}`, resulting in the\nsubexpression number N, is inserted in the result. If no subexpression with that\nnumber is generated by the regular expression, nothing is inserted.\n\nTo insert an & or a \\\\ in the result, precede it with a \\\\. Notice that Erlang\nalready gives a special meaning to \\\\ in literal strings, so a single \\\\ must be\nwritten as `\"\\\\\"` and therefore a double \\\\ as `\"\\\\\\\\\"`.\n\n_Example:_\n\n```erlang\n1> re:replace(\"abcd\",\"c\",\"[&]\",[{return,list}]).\n\"ab[c]d\"\n```\n\nwhile\n\n```erlang\n2> re:replace(\"abcd\",\"c\",\"[\\\\&]\",[{return,list}]).\n\"ab[&]d\"\n```\n\nIf the replacement is given as a fun, it will be called with the whole matching\nexpression as the first argument and a list of subexpression matches in the\norder in which they appear in the regular expression. The returned value will be\ninserted in the result.\n\n_Example:_\n\n```erlang\n3> re:replace(\"abcd\", \".(.)\",\n    fun(Whole, [< >]) ->\n         <<$#, Whole/binary, $-, (C - $a + $A), $#>>\n    end,\n    [{return, list}]).\n\"#ab-B#cd\"\n```\n\n> #### Note {: .info }\n>\n> Non-matching optional subexpressions will not be included in the list of\n> subexpression matches if they are the last subexpressions in the regular\n> expression.\n>\n> _Example:_\n>\n> The regular expression `\"(a)(b)?(c)?\"` (\"a\", optionally followed by \"b\",\n> optionally followed by \"c\") will create the following subexpression lists:\n>\n> - `[<<\"a\">>, <<\"b\">>, <<\"c\">>]` when applied to the string `\"abc\"`\n> - `[<<\"a\">>, <<>>, <<\"c\">>]` when applied to the string `\"acx\"`\n> - `[<<\"a\">>, <<\"b\">>]` when applied to the string `\"abx\"`\n> - `[<<\"a\">>]` when applied to the string `\"axx\"`\n\nAs with [`run/3`](`run/3`), compilation errors raise the `badarg` exception.\n`compile/2` can be used to get more information about the error.","ref":"re.html#replace/4"},{"type":"type","title":"re.replace_fun/0","doc":"","ref":"re.html#t:replace_fun/0"},{"type":"function","title":"re.run/2","doc":"","ref":"re.html#run/2"},{"type":"function","title":"re.run/3","doc":"Executes a regular expression matching, and returns `match/{match, Captured}` or\n`nomatch`.\n\nThe regular expression can be specified either as `t:iodata/0` in\nwhich case it is automatically compiled (as by [`compile/2`](`compile/2`)) and\nexecuted, or as a precompiled `t:mp/0` in which case it is executed against the\nsubject directly.\n\nWhen compilation is involved, exception `badarg` is thrown if a compilation\nerror occurs. Call [`compile/2`](`compile/2`) to get information about the\nlocation of the error in the regular expression.\n\nIf the regular expression is previously compiled, the option list can only\ncontain the following options:\n\n- `anchored`\n- `{capture, ValueSpec}/{capture, ValueSpec, Type}`\n- `global`\n- `{match_limit, integer() >= 0}`\n- `{match_limit_recursion, integer() >= 0}`\n- `{newline, NLSpec}`\n- `notbol`\n- `notempty`\n- `notempty_atstart`\n- `noteol`\n- `{offset, integer() >= 0}`\n- `report_errors`\n\nOtherwise all options valid for function [`compile/2`](`compile/2`) are also\nallowed. Options allowed both for compilation and execution of a match, namely\n`anchored` and `{newline, NLSpec}`, affect both the compilation and execution if\npresent together with a non-precompiled regular expression.\n\nIf the regular expression was previously compiled with option `unicode`,\n`Subject` is to be provided as a valid Unicode `charlist()`, otherwise any\n`t:iodata/0` will do. If compilation is involved and option `unicode` is\nspecified, both `Subject` and the regular expression are to be specified as\nvalid Unicode `charlists()`.\n\n`{capture, ValueSpec}/{capture, ValueSpec, Type}` defines what to return from\nthe function upon successful matching. The `capture` tuple can contain both a\nvalue specification, telling which of the captured substrings are to be\nreturned, and a type specification, telling how captured substrings are to be\nreturned (as index tuples, lists, or binaries). The options are described in\ndetail below.\n\nIf the capture options describe that no substring capturing is to be done\n(`{capture, none}`), the function returns the single atom `match` upon\nsuccessful matching, otherwise the tuple `{match, ValueList}`. Disabling\ncapturing can be done either by specifying `none` or an empty list as\n`ValueSpec`.\n\nOption `report_errors` adds the possibility that an error tuple is returned. The\ntuple either indicates a matching error (`match_limit` or\n`match_limit_recursion`), or a compilation error, where the error tuple has the\nformat `{error, {compile, CompileErr}}`. Notice that if option `report_errors`\nis not specified, the function never returns error tuples, but reports\ncompilation errors as a `badarg` exception and failed matches because of\nexceeded match limits simply as `nomatch`.\n\nThe following options are relevant for execution:\n\n- **`anchored`** - Limits [`run/3`](`run/3`) to matching at the first matching\n  position. If a pattern was compiled with `anchored`, or turned out to be\n  anchored by virtue of its contents, it cannot be made unanchored at matching\n  time, hence there is no `unanchored` option.\n\n- **`global`** - Implements global (repetitive) search (flag `g` in Perl). Each\n  match is returned as a separate `t:list/0` containing the specific match and\n  any matching subexpressions (or as specified by option `capture`. The\n  `Captured` part of the return value is hence a `t:list/0` of `t:list/0`s when\n  this option is specified.\n\n  The interaction of option `global` with a regular expression that matches an\n  empty string surprises some users. When option `global` is specified,\n  [`run/3`](`run/3`) handles empty matches in the same way as Perl: a\n  zero-length match at any point is also retried with options\n  `[anchored, notempty_atstart]`. If that search gives a result of length > 0,\n  the result is included. Example:\n\n  ```erlang\n  re:run(\"cat\",\"(|at)\",[global]).\n  ```\n\n  The following matchings are performed:\n\n  - **At offset `0`** - The regular expression `(|at)` first match at the\n    initial position of string `cat`, giving the result set `[{0,0},{0,0}]` (the\n    second `{0,0}` is because of the subexpression marked by the parentheses).\n    As the length of the match is 0, we do not advance to the next position yet.\n\n  - **At offset `0` with `[anchored, notempty_atstart]`** - The search is\n    retried with options `[anchored, notempty_atstart]` at the same position,\n    which does not give any interesting result of longer length, so the search\n    position is advanced to the next character (`a`).\n\n  - **At offset `1`** - The search results in `[{1,0},{1,0}]`, so this search is\n    also repeated with the extra options.\n\n  - **At offset `1` with `[anchored, notempty_atstart]`** - Alternative `ab` is\n    found and the result is \\[\\{1,2\\},\\{1,2\\}]. The result is added to the list\n    of results and the position in the search string is advanced two steps.\n\n  - **At offset `3`** - The search once again matches the empty string, giving\n    `[{3,0},{3,0}]`.\n\n  - **At offset `1` with `[anchored, notempty_atstart]`** - This gives no result\n    of length > 0 and we are at the last position, so the global search is\n    complete.\n\n  The result of the call is:\n\n  ```erlang\n  {match,[[{0,0},{0,0}],[{1,0},{1,0}],[{1,2},{1,2}],[{3,0},{3,0}]]}\n  ```\n\n- **`notempty`** - An empty string is not considered to be a valid match if this\n  option is specified. If alternatives in the pattern exist, they are tried. If\n  all the alternatives match the empty string, the entire match fails.\n\n  _Example:_\n\n  If the following pattern is applied to a string not beginning with \"a\" or \"b\",\n  it would normally match the empty string at the start of the subject:\n\n  ```text\n  a?b?\n  ```\n\n  With option `notempty`, this match is invalid, so [`run/3`](`run/3`) searches\n  further into the string for occurrences of \"a\" or \"b\".\n\n- **`notempty_atstart`** - Like `notempty`, except that an empty string match\n  that is not at the start of the subject is permitted. If the pattern is\n  anchored, such a match can occur only if the pattern contains \\\\K.\n\n  Perl has no direct equivalent of `notempty` or `notempty_atstart`, but it does\n  make a special case of a pattern match of the empty string within its split()\n  function, and when using modifier `/g`. The Perl behavior can be emulated\n  after matching a null string by first trying the match again at the same\n  offset with `notempty_atstart` and `anchored`, and then, if that fails, by\n  advancing the starting offset (see below) and trying an ordinary match again.\n\n- **`notbol`** - Specifies that the first character of the subject string is not\n  the beginning of a line, so the circumflex metacharacter is not to match\n  before it. Setting this without `multiline` (at compile time) causes\n  circumflex never to match. This option only affects the behavior of the\n  circumflex metacharacter. It does not affect \\\\A.\n\n- **`noteol`** - Specifies that the end of the subject string is not the end of\n  a line, so the dollar metacharacter is not to match it nor (except in\n  multiline mode) a newline immediately before it. Setting this without\n  `multiline` (at compile time) causes dollar never to match. This option\n  affects only the behavior of the dollar metacharacter. It does not affect \\\\Z\n  or \\\\z.\n\n- **`report_errors`** - Gives better control of the error handling in\n  [`run/3`](`run/3`). When specified, compilation errors (if the regular\n  expression is not already compiled) and runtime errors are explicitly returned\n  as an error tuple.\n\n  The following are the possible runtime errors:\n\n  - **`match_limit`** - The PCRE library sets a limit on how many times the\n    internal match function can be called. Defaults to 10,000,000 in the library\n    compiled for Erlang. If `{error, match_limit}` is returned, the execution of\n    the regular expression has reached this limit. This is normally to be\n    regarded as a `nomatch`, which is the default return value when this occurs,\n    but by specifying `report_errors`, you are informed when the match fails\n    because of too many internal calls.\n\n  - **`match_limit_recursion`** - This error is very similar to `match_limit`,\n    but occurs when the internal match function of PCRE is \"recursively\" called\n    more times than the `match_limit_recursion` limit, which defaults to\n    10,000,000 as well. Notice that as long as the `match_limit` and\n    `match_limit_default` values are kept at the default values, the\n    `match_limit_recursion` error cannot occur, as the `match_limit` error\n    occurs before that (each recursive call is also a call, but not conversely).\n    Both limits can however be changed, either by setting limits directly in the\n    regular expression string (see section\n    [PCRE Regular Eexpression Details](`m:re#module-pcre-regular-expression-details`)) or by\n    specifying options to [`run/3`](`run/3`).\n\n  It is important to understand that what is referred to as \"recursion\" when\n  limiting matches is not recursion on the C stack of the Erlang machine or on\n  the Erlang process stack. The PCRE version compiled into the Erlang VM uses\n  machine \"heap\" memory to store values that must be kept over recursion in\n  regular expression matches.\n\n- **`{match_limit, integer() >= 0}`** - Limits the execution time of a match in\n  an implementation-specific way. It is described as follows by the PCRE\n  documentation:\n\n  > The match_limit field provides a means of preventing PCRE from using\n  > up a vast amount of resources when running patterns that are not going\n  > to match, but which have a very large number of possibilities in their\n  > search trees. The classic example is a pattern that uses nested\n  > unlimited repeats.\n  >\n  > Internally, pcre_exec() uses a function called match(), which it calls\n  > repeatedly (sometimes recursively). The limit set by match_limit is\n  > imposed on the number of times this function is called during a match,\n  > which has the effect of limiting the amount of backtracking that can\n  > take place. For patterns that are not anchored, the count restarts\n  > from zero for each position in the subject string.\n\n  This means that runaway regular expression matches can fail faster if the\n  limit is lowered using this option. The default value 10,000,000 is compiled\n  into the Erlang VM.\n\n  > #### Note {: .info }\n  >\n  > This option does in no way affect the execution of the Erlang VM in terms of\n  > \"long running BIFs\". [`run/3`](`run/3`) always gives control back to the\n  > scheduler of Erlang processes at intervals that ensures the real-time\n  > properties of the Erlang system.\n\n- **`{match_limit_recursion, integer() >= 0}`** - Limits the execution time and\n  memory consumption of a match in an implementation-specific way, very similar\n  to `match_limit`. It is described as follows by the PCRE documentation:\n\n  > The match_limit_recursion field is similar to match_limit, but instead\n  > of limiting the total number of times that match() is called, it\n  > limits the depth of recursion. The recursion depth is a smaller number\n  > than the total number of calls, because not all calls to match() are\n  > recursive. This limit is of use only if it is set smaller than\n  > match_limit.\n  >\n  > Limiting the recursion depth limits the amount of machine stack that\n  > can be used, or, when PCRE has been compiled to use memory on the heap\n  > instead of the stack, the amount of heap memory that can be used.\n\n  The Erlang VM uses a PCRE library where heap memory is used when regular\n  expression match recursion occurs. This therefore limits the use of machine\n  heap, not C stack.\n\n  Specifying a lower value can result in matches with deep recursion failing,\n  when they should have matched:\n\n  ```erlang\n  1> re:run(\"aaaaaaaaaaaaaz\",\"(a+)*z\").\n  {match,[{0,14},{0,13}]}\n  2> re:run(\"aaaaaaaaaaaaaz\",\"(a+)*z\",[{match_limit_recursion,5}]).\n  nomatch\n  3> re:run(\"aaaaaaaaaaaaaz\",\"(a+)*z\",[{match_limit_recursion,5},report_errors]).\n  {error,match_limit_recursion}\n  ```\n\n  This option and option `match_limit` are only to be used in rare cases.\n  Understanding of the PCRE library internals is recommended before tampering\n  with these limits.\n\n- **`{offset, integer() >= 0}`** - Start matching at the offset (position)\n  specified in the subject string. The offset is zero-based, so that the default\n  is `{offset,0}` (all of the subject string).\n\n- **`{newline, NLSpec}`** - Overrides the default definition of a newline in the\n  subject string, which is LF (ASCII 10) in Erlang.\n\n  - **`cr`** - Newline is indicated by a single character CR (ASCII 13).\n\n  - **`lf`** - Newline is indicated by a single character LF (ASCII 10), the\n    default.\n\n  - **`crlf`** - Newline is indicated by the two-character CRLF (ASCII 13\n    followed by ASCII 10) sequence.\n\n  - **`anycrlf`** - Any of the three preceding sequences is be recognized.\n\n  - **`any`** - Any of the newline sequences above, and the Unicode sequences VT\n    (vertical tab, U+000B), FF (formfeed, U+000C), NEL (next line, U+0085), LS\n    (line separator, U+2028), and PS (paragraph separator, U+2029).\n\n- **`bsr_anycrlf`** - Specifies specifically that \\\\R is to match only the CR\n  LF, or CRLF sequences, not the Unicode-specific newline characters. (Overrides\n  the compilation option.)\n\n- **`bsr_unicode`** - Specifies specifically that \\\\R is to match all the\n  Unicode newline characters (including CRLF, and so on, the default).\n  (Overrides the compilation option.)\n\n- **`{capture, ValueSpec}`/`{capture, ValueSpec, Type}`** - Specifies which\n  captured substrings are returned and in what format. By default,\n  [`run/3`](`run/3`) captures all of the matching part of the substring and all\n  capturing subpatterns (all of the pattern is automatically captured). The\n  default return type is (zero-based) indexes of the captured parts of the\n  string, specified as `{Offset,Length}` pairs (the `index` `Type` of\n  capturing).\n\n  As an example of the default behavior, the following call returns, as first\n  and only captured string, the matching part of the subject (\"abcd\" in the\n  middle) as an index pair `{3,4}`, where character positions are zero-based,\n  just as in offsets:\n\n  ```erlang\n  re:run(\"ABCabcdABC\",\"abcd\",[]).\n  ```\n\n  The return value of this call is:\n\n  ```erlang\n  {match,[{3,4}]}\n  ```\n\n  Another (and quite common) case is where the regular expression matches all of\n  the subject:\n\n  ```erlang\n  re:run(\"ABCabcdABC\",\".*abcd.*\",[]).\n  ```\n\n  Here the return value correspondingly points out all of the string, beginning\n  at index 0, and it is 10 characters long:\n\n  ```erlang\n  {match,[{0,10}]}\n  ```\n\n  If the regular expression contains capturing subpatterns, like in:\n\n  ```erlang\n  re:run(\"ABCabcdABC\",\".*(abcd).*\",[]).\n  ```\n\n  all of the matched subject is captured, as well as the captured substrings:\n\n  ```erlang\n  {match,[{0,10},{3,4}]}\n  ```\n\n  The complete matching pattern always gives the first return value in the list\n  and the remaining subpatterns are added in the order they occurred in the\n  regular expression.\n\n  The capture tuple is built up as follows:\n\n  - **`ValueSpec`** - Specifies which captured (sub)patterns are to be returned.\n    `ValueSpec` can either be an atom describing a predefined set of return\n    values, or a list containing the indexes or the names of specific\n    subpatterns to return.\n\n    The following are the predefined sets of subpatterns:\n\n    - **`all`** - All captured subpatterns including the complete matching\n      string. This is the default.\n\n    - **`all_names`** - All _named_ subpatterns in the regular expression, as if\n      a `t:list/0` of all the names _in alphabetical order_ was specified. The\n      list of all names can also be retrieved with `inspect/2`.\n\n    - **`first`** - Only the first captured subpattern, which is always the\n      complete matching part of the subject. All explicitly captured subpatterns\n      are discarded.\n\n    - **`all_but_first`** - All but the first matching subpattern, that is, all\n      explicitly captured subpatterns, but not the complete matching part of the\n      subject string. This is useful if the regular expression as a whole\n      matches a large part of the subject, but the part you are interested in is\n      in an explicitly captured subpattern. If the return type is `list` or\n      `binary`, not returning subpatterns you are not interested in is a good\n      way to optimize.\n\n    - **`none`** - Returns no matching subpatterns, gives the single atom\n      `match` as the return value of the function when matching successfully\n      instead of the `{match, list()}` return. Specifying an empty list gives\n      the same behavior.\n\n    The value list is a list of indexes for the subpatterns to return, where\n    index 0 is for all of the pattern, and 1 is for the first explicit capturing\n    subpattern in the regular expression, and so on. When using named captured\n    subpatterns (see below) in the regular expression, one can use `t:atom/0`s\n    or `t:string/0`s to specify the subpatterns to be returned. For example,\n    consider the regular expression:\n\n    ```text\n    \".*(abcd).*\"\n    ```\n\n    matched against string \"ABCabcdABC\", capturing only the \"abcd\" part (the\n    first explicit subpattern):\n\n    ```erlang\n    re:run(\"ABCabcdABC\",\".*(abcd).*\",[{capture,[1]}]).\n    ```\n\n    The call gives the following result, as the first explicitly captured\n    subpattern is \"(abcd)\", matching \"abcd\" in the subject, at (zero-based)\n    position 3, of length 4:\n\n    ```erlang\n    {match,[{3,4}]}\n    ```\n\n    Consider the same regular expression, but with the subpattern explicitly\n    named 'FOO':\n\n    ```text\n    \".*(? abcd).*\"\n    ```\n\n    With this expression, we could still give the index of the subpattern with\n    the following call:\n\n    ```erlang\n    re:run(\"ABCabcdABC\",\".*(? abcd).*\",[{capture,[1]}]).\n    ```\n\n    giving the same result as before. But, as the subpattern is named, we can\n    also specify its name in the value list:\n\n    ```erlang\n    re:run(\"ABCabcdABC\",\".*(? abcd).*\",[{capture,['FOO']}]).\n    ```\n\n    This would give the same result as the earlier examples, namely:\n\n    ```erlang\n    {match,[{3,4}]}\n    ```\n\n    The values list can specify indexes or names not present in the regular\n    expression, in which case the return values vary depending on the type. If\n    the type is `index`, the tuple `{-1,0}` is returned for values with no\n    corresponding subpattern in the regular expression, but for the other types\n    (`binary` and `list`), the values are the empty binary or list,\n    respectively.\n\n  - **`Type`** - Optionally specifies how captured substrings are to be\n    returned. If omitted, the default of `index` is used.\n\n    `Type` can be one of the following:\n\n    - **`index`** - Returns captured substrings as pairs of byte indexes into\n      the subject string and length of the matching string in the subject (as if\n      the subject string was flattened with `erlang:iolist_to_binary/1` or\n      `unicode:characters_to_binary/2` before matching). Notice that option\n      `unicode` results in _byte-oriented_ indexes in a (possibly virtual)\n      _UTF-8 encoded_ binary. A byte index tuple `{0,2}` can therefore represent\n      one or two characters when `unicode` is in effect. This can seem\n      counter-intuitive, but has been deemed the most effective and useful way\n      to do it. To return lists instead can result in simpler code if that is\n      desired. This return type is the default.\n\n    - **`list`** - Returns matching substrings as lists of characters (Erlang\n      `t:string/0`s). It option `unicode` is used in combination with the \\\\C\n      sequence in the regular expression, a captured subpattern can contain\n      bytes that are not valid UTF-8 (\\\\C matches bytes regardless of character\n      encoding). In that case the `list` capturing can result in the same types\n      of tuples that `unicode:characters_to_list/2` can return, namely\n      three-tuples with tag `incomplete` or `error`, the successfully converted\n      characters and the invalid UTF-8 tail of the conversion as a binary. The\n      best strategy is to avoid using the \\\\C sequence when capturing lists.\n\n    - **`binary`** - Returns matching substrings as binaries. If option\n      `unicode` is used, these binaries are in UTF-8. If the \\\\C sequence is\n      used together with `unicode`, the binaries can be invalid UTF-8.\n\n  In general, subpatterns that were not assigned a value in the match are\n  returned as the tuple `{-1,0}` when `type` is `index`. Unassigned subpatterns\n  are returned as the empty binary or list, respectively, for other return\n  types. Consider the following regular expression:\n\n  ```text\n  \".*((? abdd)|a(..d)).*\"\n  ```\n\n  There are three explicitly capturing subpatterns, where the opening\n  parenthesis position determines the order in the result, hence\n  `((? abdd)|a(..d))` is subpattern index 1, `(? abdd)` is subpattern\n  index 2, and `(..d)` is subpattern index 3. When matched against the following\n  string:\n\n  ```text\n  \"ABCabcdABC\"\n  ```\n\n  the subpattern at index 2 does not match, as \"abdd\" is not present in the\n  string, but the complete pattern matches (because of the alternative\n  `a(..d)`). The subpattern at index 2 is therefore unassigned and the default\n  return value is:\n\n  ```erlang\n  {match,[{0,10},{3,4},{-1,0},{4,3}]}\n  ```\n\n  Setting the capture `Type` to `binary` gives:\n\n  ```erlang\n  {match,[<<\"ABCabcdABC\">>,<<\"abcd\">>,<<>>,<<\"bcd\">>]}\n  ```\n\n  Here the empty binary (`<<>>`) represents the unassigned subpattern. In the\n  `binary` case, some information about the matching is therefore lost, as\n  `<<>>` can also be an empty string captured.\n\n  If differentiation between empty matches and non-existing subpatterns is\n  necessary, use the `type` `index` and do the conversion to the final type in\n  Erlang code.\n\n  When option `global` is speciified, the `capture` specification affects each\n  match separately, so that:\n\n  ```erlang\n  re:run(\"cacb\",\"c(a|b)\",[global,{capture,[1],list}]).\n  ```\n\n  gives\n\n  ```erlang\n  {match,[[\"a\"],[\"b\"]]}\n  ```\n\nFor a descriptions of options only affecting the compilation step, see\n`compile/2`.","ref":"re.html#run/3"},{"type":"function","title":"re.split/2","doc":"","ref":"re.html#split/2"},{"type":"function","title":"re.split/3","doc":"Splits the input into parts by finding tokens according to the regular\nexpression supplied.\n\nThe splitting is basically done by running a global regular\nexpression match and dividing the initial string wherever a match occurs. The\nmatching part of the string is removed from the output.\n\nAs in `run/3`, an `t:mp/0` compiled with option `unicode` requires `Subject` to\nbe a Unicode `charlist()`. If compilation is done implicitly and the `unicode`\ncompilation option is specified to this function, both the regular expression\nand `Subject` are to be specified as valid Unicode `charlist()`s.\n\nThe result is given as a list of \"strings\", the preferred data type specified in\noption `return` (default `iodata`).\n\nIf subexpressions are specified in the regular expression, the matching\nsubexpressions are returned in the resulting list as well. For example:\n\n```erlang\nre:split(\"Erlang\",\"[ln]\",[{return,list}]).\n```\n\ngives\n\n```erlang\n[\"Er\",\"a\",\"g\"]\n```\n\nwhile\n\n```erlang\nre:split(\"Erlang\",\"([ln])\",[{return,list}]).\n```\n\ngives\n\n```erlang\n[\"Er\",\"l\",\"a\",\"n\",\"g\"]\n```\n\nThe text matching the subexpression (marked by the parentheses in the regular\nexpression) is inserted in the result list where it was found. This means that\nconcatenating the result of a split where the whole regular expression is a\nsingle subexpression (as in the last example) always results in the original\nstring.\n\nAs there is no matching subexpression for the last part in the example (the\n\"g\"), nothing is inserted after that. To make the group of strings and the parts\nmatching the subexpressions more obvious, one can use option `group`, which\ngroups together the part of the subject string with the parts matching the\nsubexpressions when the string was split:\n\n```erlang\nre:split(\"Erlang\",\"([ln])\",[{return,list},group]).\n```\n\ngives\n\n```erlang\n[[\"Er\",\"l\"],[\"a\",\"n\"],[\"g\"]]\n```\n\nHere the regular expression first matched the \"l\", causing \"Er\" to be the first\npart in the result. When the regular expression matched, the (only)\nsubexpression was bound to the \"l\", so the \"l\" is inserted in the group together\nwith \"Er\". The next match is of the \"n\", making \"a\" the next part to be\nreturned. As the subexpression is bound to substring \"n\" in this case, the \"n\"\nis inserted into this group. The last group consists of the remaining string, as\nno more matches are found.\n\nBy default, all parts of the string, including the empty strings, are returned\nfrom the function, for example:\n\n```erlang\nre:split(\"Erlang\",\"[lg]\",[{return,list}]).\n```\n\ngives\n\n```erlang\n[\"Er\",\"an\",[]]\n```\n\nas the matching of the \"g\" in the end of the string leaves an empty rest, which\nis also returned. This behavior differs from the default behavior of the split\nfunction in Perl, where empty strings at the end are by default removed. To get\nthe \"trimming\" default behavior of Perl, specify `trim` as an option:\n\n```erlang\nre:split(\"Erlang\",\"[lg]\",[{return,list},trim]).\n```\n\ngives\n\n```erlang\n[\"Er\",\"an\"]\n```\n\nThe \"trim\" option says; \"give me as many parts as possible except the empty\nones\", which sometimes can be useful. You can also specify how many parts you\nwant, by specifying `{parts,`N`}`:\n\n```erlang\nre:split(\"Erlang\",\"[lg]\",[{return,list},{parts,2}]).\n```\n\ngives\n\n```erlang\n[\"Er\",\"ang\"]\n```\n\nNotice that the last part is \"ang\", not \"an\", as splitting was specified into\ntwo parts, and the splitting stops when enough parts are given, which is why the\nresult differs from that of `trim`.\n\nMore than three parts are not possible with this indata, so\n\n```erlang\nre:split(\"Erlang\",\"[lg]\",[{return,list},{parts,4}]).\n```\n\ngives the same result as the default, which is to be viewed as \"an infinite\nnumber of parts\".\n\nSpecifying `0` as the number of parts gives the same effect as option `trim`. If\nsubexpressions are captured, empty subexpressions matched at the end are also\nstripped from the result if `trim` or `{parts,0}` is specified.\n\nThe `trim` behavior corresponds exactly to the Perl default. `{parts,N}`, where\nN is a positive integer, corresponds exactly to the Perl behavior with a\npositive numerical third parameter. The default behavior of\n[`split/3`](`split/3`) corresponds to the Perl behavior when a negative integer\nis specified as the third parameter for the Perl routine.\n\nSummary of options not previously described for function [`run/3`](`run/3`):\n\n- **`{return,ReturnType}`** - Specifies how the parts of the original string are\n  presented in the result list. Valid types:\n\n  - **`iodata`** - The variant of `t:iodata/0` that gives the least copying of\n    data with the current implementation (often a binary, but do not depend on\n    it).\n\n  - **`binary`** - All parts returned as binaries.\n\n  - **`list`** - All parts returned as lists of characters (\"strings\").\n\n- **`group`** - Groups together the part of the string with the parts of the\n  string matching the subexpressions of the regular expression.\n\n  The return value from the function is in this case a `t:list/0` of\n  `t:list/0`s. Each sublist begins with the string picked out of the subject\n  string, followed by the parts matching each of the subexpressions in order of\n  occurrence in the regular expression.\n\n- **`{parts,N}`** - Specifies the number of parts the subject string is to be\n  split into.\n\n  The number of parts is to be a positive integer for a specific maximum number\n  of parts, and `infinity` for the maximum number of parts possible (the\n  default). Specifying `{parts,0}` gives as many parts as possible disregarding\n  empty parts at the end, the same as specifying `trim`.\n\n- **`trim`** - Specifies that empty parts at the end of the result list are to\n  be disregarded. The same as specifying `{parts,0}`. This corresponds to the\n  default behavior of the `split` built-in function in Perl.","ref":"re.html#split/3"},{"type":"function","title":"re.version/0","doc":"The return of this function is a string with the PCRE version of the system that\nwas used in the Erlang/OTP compilation.","ref":"re.html#version/0"},{"type":"module","title":"string","doc":"String processing functions.\n\nThis module provides functions for string processing.\n\nA string in this module is represented by `t:unicode:chardata/0`, that is, a\nlist of codepoints, binaries with UTF-8-encoded codepoints (_UTF-8 binaries_),\nor a mix of the two.\n\n```text\n\"abcd\"               is a valid string\n<<\"abcd\">>           is a valid string\n[\"abcd\"]             is a valid string\n<<\"abc..åäö\"/utf8>>  is a valid string\n<<\"abc..åäö\">>       is NOT a valid string,\n                     but a binary with Latin-1-encoded codepoints\n[<<\"abc\">>, \"..åäö\"] is a valid string\n[atom]               is NOT a valid string\n```\n\nThis module operates on grapheme clusters. A _grapheme cluster_ is a\nuser-perceived character, which can be represented by several codepoints.\n\n```text\n\"å\"  [229] or [97, 778]\n\"e̊\"  [101, 778]\n```\n\nThe string length of \"ß↑e̊\" is 3, even though it is represented by the codepoints\n`[223,8593,101,778]` or the UTF-8 binary `<<195,159,226,134,145,101,204,138>>`.\n\nGrapheme clusters for codepoints of class `prepend` and non-modern (or\ndecomposed) Hangul is not handled for performance reasons in `find/3`,\n`replace/3`, `split/2`, `split/3` and `trim/3`.\n\nSplitting and appending strings is to be done on grapheme clusters borders.\nThere is no verification that the results of appending strings are valid or\nnormalized.\n\nMost of the functions expect all input to be normalized to one form, see for\nexample `unicode:characters_to_nfc_list/1`.\n\nLanguage or locale specific handling of input is not considered in any function.\n\nThe functions can crash for non-valid input strings. For example, the functions\nexpect UTF-8 binaries but not all functions verify that all binaries are encoded\ncorrectly.\n\nUnless otherwise specified the return value type is the same as the input type.\nThat is, binary input returns binary output, list input returns a list output,\nand mixed input can return a mixed output.\n\n```erlang\n1> string:trim(\"  sarah  \").\n\"sarah\"\n2> string:trim(<<\"  sarah  \">>).\n<<\"sarah\">>\n3> string:lexemes(\"foo bar\", \" \").\n[\"foo\",\"bar\"]\n4> string:lexemes(<<\"foo bar\">>, \" \").\n[<<\"foo\">>,<<\"bar\">>]\n```\n\nThis module has been reworked in Erlang/OTP 20 to handle `t:unicode:chardata/0`\nand operate on grapheme clusters. The\n[`old functions`](`m:string#obsolete-api-functions`) that only work on Latin-1\nlists as input are still available but should not be used, they will be\ndeprecated in a future release.","ref":"string.html"},{"type":"module","title":"Notes - string","doc":"Some of the general string functions can seem to overlap each other. The reason\nis that this string package is the combination of two earlier packages and all\nfunctions of both packages have been retained.","ref":"string.html#module-notes"},{"type":"function","title":"string.casefold/1","doc":"Converts `String` to a case-agnostic comparable string. Function\n[`casefold/1`](`casefold/1`) is preferred over [`lowercase/1`](`lowercase/1`)\nwhen two strings are to be compared for equality. See also `equal/4`.\n\n_Example:_\n\n```erlang\n1> string:casefold(\"Ω and ẞ SHARP S\").\n\"ω and ss sharp s\"\n```","ref":"string.html#casefold/1"},{"type":"function","title":"string.centre/2","doc":"","ref":"string.html#centre/2"},{"type":"function","title":"string.centre/3","doc":"Returns a string, where `String` is centered in the string and surrounded by\nblanks or `Character`. The resulting string has length `Number`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `pad/3`.","ref":"string.html#centre/3"},{"type":"function","title":"string.chars/2","doc":"","ref":"string.html#chars/2"},{"type":"function","title":"string.chars/3","doc":"Returns a string consisting of `Number` characters `Character`. Optionally, the\nstring can end with string `Tail`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use\n`lists:duplicate/2`.","ref":"string.html#chars/3"},{"type":"function","title":"string.chomp/1","doc":"Returns a string where any trailing `\\n` or `\\r\\n` have been removed from\n`String`.\n\n_Example:_\n\n```erlang\n182> string:chomp(<<\"\\nHello\\n\\n\">>).\n<<\"\\nHello\">>\n183> string:chomp(\"\\nHello\\r\\r\\n\").\n\"\\nHello\\r\"\n```","ref":"string.html#chomp/1"},{"type":"function","title":"string.chr/2","doc":"Returns the index of the first occurrence of `Character` in `String`. Returns\n`0` if `Character` does not occur.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `find/2`.","ref":"string.html#chr/2"},{"type":"function","title":"string.concat/2","doc":"Concatenates `String1` and `String2` to form a new string `String3`, which is\nreturned.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use\n`[String1, String2]` as `Data` argument, and call `unicode:characters_to_list/2`\nor `unicode:characters_to_binary/2` to flatten the output.","ref":"string.html#concat/2"},{"type":"function","title":"string.copies/2","doc":"Returns a string containing `String` repeated `Number` times.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use\n`lists:duplicate/2`.","ref":"string.html#copies/2"},{"type":"function","title":"string.cspan/2","doc":"Returns the length of the maximum initial segment of `String`, which consists\nentirely of characters not from `Chars`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `take/3`.\n\n_Example:_\n\n```erlang\n1> string:cspan(\"\\t    abcdef\", \" \\t\").\n0\n```","ref":"string.html#cspan/2"},{"type":"type","title":"string.direction/0","doc":"","ref":"string.html#t:direction/0"},{"type":"function","title":"string.equal/2","doc":"","ref":"string.html#equal/2"},{"type":"function","title":"string.equal/3","doc":"","ref":"string.html#equal/3"},{"type":"function","title":"string.equal/4","doc":"Returns `true` if `A` and `B` are equal, otherwise `false`.\n\nIf `IgnoreCase` is `true` the function does [`casefold`ing](`casefold/1`) on the\nfly before the equality test.\n\nIf `Norm` is not `none` the function applies normalization on the fly before the\nequality test. There are four available normalization forms:\n[`nfc`](`unicode:characters_to_nfc_list/1`),\n[`nfd`](`unicode:characters_to_nfd_list/1`),\n[`nfkc`](`unicode:characters_to_nfkc_list/1`), and\n[`nfkd`](`unicode:characters_to_nfkd_list/1`).\n\n_Example:_\n\n```erlang\n1> string:equal(\"åäö\", <<\"åäö\"/utf8>>).\ntrue\n2> string:equal(\"åäö\", unicode:characters_to_nfd_binary(\"åäö\")).\nfalse\n3> string:equal(\"åäö\", unicode:characters_to_nfd_binary(\"ÅÄÖ\"), true, nfc).\ntrue\n```","ref":"string.html#equal/4"},{"type":"function","title":"string.find/2","doc":"","ref":"string.html#find/2"},{"type":"function","title":"string.find/3","doc":"Removes anything before `SearchPattern` in `String` and returns the remainder of\nthe string or `nomatch` if `SearchPattern` is not found. `Dir`, which can be\n`leading` or `trailing`, indicates from which direction characters are to be\nsearched.\n\n_Example:_\n\n```erlang\n1> string:find(\"ab..cd..ef\", \".\").\n\"..cd..ef\"\n2> string:find(<<\"ab..cd..ef\">>, \"..\", trailing).\n<<\"..ef\">>\n3> string:find(<<\"ab..cd..ef\">>, \"x\", leading).\nnomatch\n4> string:find(\"ab..cd..ef\", \"x\", trailing).\nnomatch\n```","ref":"string.html#find/3"},{"type":"type","title":"string.grapheme_cluster/0","doc":"A user-perceived character, consisting of one or more codepoints.","ref":"string.html#t:grapheme_cluster/0"},{"type":"function","title":"string.is_empty/1","doc":"Returns `true` if `String` is the empty string, otherwise `false`.\n\n_Example:_\n\n```erlang\n1> string:is_empty(\"foo\").\nfalse\n2> string:is_empty([\"\",<<>>]).\ntrue\n```","ref":"string.html#is_empty/1"},{"type":"function","title":"string.jaro_similarity/2","doc":"Returns a float between `+0.0` and `1.0` representing the\n[Jaro similarity](https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance)\nbetween the given strings. Strings with a higher similarity will score closer\nto `1.0`, with `+0.0` meaning no similarity and `1.0` meaning an exact match.\n\n_Example:_\n\n```erlang\n1> string:jaro_similarity(\"ditto\", \"ditto\").\n1.0\n2> string:jaro_similarity(\"foo\", \"bar\").\n+0.0\n3> string:jaro_similarity(\"michelle\", \"michael\").\n0.8690476190476191\n4> string:jaro_similarity(<<\"Édouard\"/utf8>>, <<\"Claude\">>).\n0.5317460317460317\n```\n\nThe Jaro distance between two strings can be calculated with\n`JaroDistance = 1.0 - JaroSimilarity`.","ref":"string.html#jaro_similarity/2"},{"type":"function","title":"string.join/2","doc":"Returns a string with the elements of `StringList` separated by the string in\n`Separator`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use\n`lists:join/2`.\n\n_Example:_\n\n```erlang\n1> join([\"one\", \"two\", \"three\"], \", \").\n\"one, two, three\"\n```","ref":"string.html#join/2"},{"type":"function","title":"string.left/2","doc":"","ref":"string.html#left/2"},{"type":"function","title":"string.left/3","doc":"Returns `String` with the length adjusted in accordance with `Number`. The left\nmargin is fixed. If [`length(String)`](`length/1`) < `Number`, then `String` is\npadded with blanks or `Character`s.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `pad/2` or\n`pad/3`.\n\n_Example:_\n\n```erlang\n1> string:left(\"Hello\",10,$.).\n\"Hello.....\"\n```","ref":"string.html#left/3"},{"type":"function","title":"string.len/1","doc":"Returns the number of characters in `String`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `length/1`.","ref":"string.html#len/1"},{"type":"function","title":"string.length/1","doc":"Returns the number of grapheme clusters in `String`.\n\n_Example:_\n\n```erlang\n1> string:length(\"ß↑e̊\").\n3\n2> string:length(<<195,159,226,134,145,101,204,138>>).\n3\n```","ref":"string.html#length/1"},{"type":"function","title":"string.lexemes/2","doc":"Returns a list of lexemes in `String`, separated by the grapheme clusters in\n`SeparatorList`.\n\nNotice that, as shown in this example, two or more adjacent separator graphemes\nclusters in `String` are treated as one. That is, there are no empty strings in\nthe resulting list of lexemes. See also `split/3` which returns empty strings.\n\nNotice that `[$\\r,$\\n]` is one grapheme cluster.\n\n_Example:_\n\n```erlang\n1> string:lexemes(\"abc de̊fxxghix jkl\\r\\nfoo\", \"x e\" ++ [[$\\r,$\\n]]).\n[\"abc\",\"de̊f\",\"ghi\",\"jkl\",\"foo\"]\n2> string:lexemes(<<\"abc de̊fxxghix jkl\\r\\nfoo\"/utf8>>, \"x e\" ++ [$\\r,$\\n]).\n[<<\"abc\">>,<<\"de̊f\"/utf8>>,<<\"ghi\">>,<<\"jkl\\r\\nfoo\">>]\n```","ref":"string.html#lexemes/2"},{"type":"function","title":"string.lowercase/1","doc":"Converts `String` to lowercase.\n\nNotice that function `casefold/1` should be used when converting a string to be\ntested for equality.\n\n_Example:_\n\n```erlang\n2> string:lowercase(string:uppercase(\"Michał\")).\n\"michał\"\n```","ref":"string.html#lowercase/1"},{"type":"function","title":"string.next_codepoint/1","doc":"Returns the first codepoint in `String` and the rest of `String` in the tail.\nReturns an empty list if `String` is empty or an `{error, String}` tuple if the\nnext byte is invalid.\n\n_Example:_\n\n```erlang\n1> string:next_codepoint(unicode:characters_to_binary(\"e̊fg\")).\n[101|<<\"̊fg\"/utf8>>]\n```","ref":"string.html#next_codepoint/1"},{"type":"function","title":"string.next_grapheme/1","doc":"Returns the first grapheme cluster in `String` and the rest of `String` in the\ntail. Returns an empty list if `String` is empty or an `{error, String}` tuple\nif the next byte is invalid.\n\n_Example:_\n\n```erlang\n1> string:next_grapheme(unicode:characters_to_binary(\"e̊fg\")).\n[\"e̊\"|<<\"fg\">>]\n```","ref":"string.html#next_grapheme/1"},{"type":"function","title":"string.nth_lexeme/3","doc":"Returns lexeme number `N` in `String`, where lexemes are separated by the\ngrapheme clusters in `SeparatorList`.\n\n_Example:_\n\n```erlang\n1> string:nth_lexeme(\"abc.de̊f.ghiejkl\", 3, \".e\").\n\"ghi\"\n```","ref":"string.html#nth_lexeme/3"},{"type":"function","title":"string.pad/2","doc":"","ref":"string.html#pad/2"},{"type":"function","title":"string.pad/3","doc":"","ref":"string.html#pad/3"},{"type":"function","title":"string.pad/4","doc":"Pads `String` to `Length` with grapheme cluster `Char`. `Dir`, which can be\n`leading`, `trailing`, or `both`, indicates where the padding should be added.\n\n_Example:_\n\n```erlang\n1> string:pad(<<\"He̊llö\"/utf8>>, 8).\n[<<72,101,204,138,108,108,195,182>>,32,32,32]\n2> io:format(\"'~ts'~n\",[string:pad(\"He̊llö\", 8, leading)]).\n'   He̊llö'\n3> io:format(\"'~ts'~n\",[string:pad(\"He̊llö\", 8, both)]).\n' He̊llö  '\n```","ref":"string.html#pad/4"},{"type":"function","title":"string.prefix/2","doc":"If `Prefix` is the prefix of `String`, removes it and returns the remainder of\n`String`, otherwise returns `nomatch`.\n\n_Example:_\n\n```erlang\n1> string:prefix(<<\"prefix of string\">>, \"pre\").\n<<\"fix of string\">>\n2> string:prefix(\"pre\", \"prefix\").\nnomatch\n```","ref":"string.html#prefix/2"},{"type":"function","title":"string.rchr/2","doc":"Returns the index of the last occurrence of `Character` in `String`. Returns `0`\nif `Character` does not occur.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `find/3`.","ref":"string.html#rchr/2"},{"type":"function","title":"string.replace/3","doc":"","ref":"string.html#replace/3"},{"type":"function","title":"string.replace/4","doc":"Replaces `SearchPattern` in `String` with `Replacement`. `Where`, indicates whether\nthe `leading`, the `trailing` or `all` encounters of `SearchPattern` are to be replaced.\n\nCan be implemented as:\n\n```erlang\nlists:join(Replacement, split(String, SearchPattern, Where)).\n```\n\n_Example:_\n\n```erlang\n1> string:replace(<<\"ab..cd..ef\">>, \"..\", \"*\").\n[<<\"ab\">>,\"*\",<<\"cd..ef\">>]\n2> string:replace(<<\"ab..cd..ef\">>, \"..\", \"*\", all).\n[<<\"ab\">>,\"*\",<<\"cd\">>,\"*\",<<\"ef\">>]\n```","ref":"string.html#replace/4"},{"type":"function","title":"string.reverse/1","doc":"Returns the reverse list of the grapheme clusters in `String`.\n\n_Example:_\n\n```erlang\n1> Reverse = string:reverse(unicode:characters_to_nfd_binary(\"ÅÄÖ\")).\n[[79,776],[65,776],[65,778]]\n2> io:format(\"~ts~n\",[Reverse]).\nÖÄÅ\n```","ref":"string.html#reverse/1"},{"type":"function","title":"string.right/2","doc":"","ref":"string.html#right/2"},{"type":"function","title":"string.right/3","doc":"Returns `String` with the length adjusted in accordance with `Number`. The right\nmargin is fixed. If the length of `(String)` < `Number`, then `String` is padded\nwith blanks or `Character`s.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `pad/3`.\n\n_Example:_\n\n```erlang\n1> string:right(\"Hello\", 10, $.).\n\".....Hello\"\n```","ref":"string.html#right/3"},{"type":"function","title":"string.rstr/2","doc":"Returns the position where the last occurrence of `SubString` begins in\n`String`. Returns `0` if `SubString` does not exist in `String`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `find/3`.\n\n_Example:_\n\n```erlang\n1> string:rstr(\" Hello Hello World World \", \"Hello World\").\n8\n```","ref":"string.html#rstr/2"},{"type":"function","title":"string.slice/2","doc":"","ref":"string.html#slice/2"},{"type":"function","title":"string.slice/3","doc":"Returns a substring of `String` of at most `Length` grapheme clusters, starting\nat position `Start`.\n\n_Example:_\n\n```erlang\n1> string:slice(<<\"He̊llö Wörld\"/utf8>>, 4).\n<<\"ö Wörld\"/utf8>>\n2> string:slice([\"He̊llö \", <<\"Wörld\"/utf8>>], 4,4).\n\"ö Wö\"\n3> string:slice([\"He̊llö \", <<\"Wörld\"/utf8>>], 4,50).\n\"ö Wörld\"\n```","ref":"string.html#slice/3"},{"type":"function","title":"string.span/2","doc":"Returns the length of the maximum initial segment of `String`, which consists\nentirely of characters from `Chars`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `take/2`.\n\n_Example:_\n\n```erlang\n1> string:span(\"\\t    abcdef\", \" \\t\").\n5\n```","ref":"string.html#span/2"},{"type":"function","title":"string.split/2","doc":"","ref":"string.html#split/2"},{"type":"function","title":"string.split/3","doc":"Splits `String` where `SearchPattern` is encountered and return the remaining\nparts. `Where`, default `leading`, indicates whether the `leading`, the\n`trailing` or `all` encounters of `SearchPattern` will split `String`.\n\n_Example:_\n\n```erlang\n0> string:split(\"ab..bc..cd\", \"..\").\n[\"ab\",\"bc..cd\"]\n1> string:split(<<\"ab..bc..cd\">>, \"..\", trailing).\n[<<\"ab..bc\">>,<<\"cd\">>]\n2> string:split(<<\"ab..bc....cd\">>, \"..\", all).\n[<<\"ab\">>,<<\"bc\">>,<<>>,<<\"cd\">>]\n```","ref":"string.html#split/3"},{"type":"function","title":"string.str/2","doc":"Returns the position where the first occurrence of `SubString` begins in\n`String`. Returns `0` if `SubString` does not exist in `String`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `find/2`.\n\n_Example:_\n\n```erlang\n1> string:str(\" Hello Hello World World \", \"Hello World\").\n8\n```","ref":"string.html#str/2"},{"type":"function","title":"string.strip/1","doc":"","ref":"string.html#strip/1"},{"type":"function","title":"string.strip/2","doc":"","ref":"string.html#strip/2"},{"type":"function","title":"string.strip/3","doc":"Returns a string, where leading or trailing, or both, blanks or a number of\n`Character` have been removed.\n\n`Direction`, which can be `left`, `right`, or\n`both`, indicates from which direction blanks are to be removed.\n[`strip/1`](`strip/1`) is equivalent to [`strip(String, both)`](`strip/2`).\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `trim/3`.\n\n_Example:_\n\n```erlang\n1> string:strip(\"...Hello.....\", both, $.).\n\"Hello\"\n```","ref":"string.html#strip/3"},{"type":"function","title":"string.sub_string/2","doc":"","ref":"string.html#sub_string/2"},{"type":"function","title":"string.sub_string/3","doc":"Returns a substring of `String`, starting at position `Start` to the end of the\nstring, or to and including position `Stop`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `slice/3`.\n\n_Example:_\n\n```erlang\n1> sub_string(\"Hello World\", 4, 8).\n\"lo Wo\"\n```","ref":"string.html#sub_string/3"},{"type":"function","title":"string.sub_word/2","doc":"","ref":"string.html#sub_word/2"},{"type":"function","title":"string.sub_word/3","doc":"Returns the word in position `Number` of `String`. Words are separated by blanks\nor `Character`s.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use\n`nth_lexeme/3`.\n\n_Example:_\n\n```erlang\n1> string:sub_word(\" Hello old boy !\",3,$o).\n\"ld b\"\n```","ref":"string.html#sub_word/3"},{"type":"function","title":"string.substr/2","doc":"","ref":"string.html#substr/2"},{"type":"function","title":"string.substr/3","doc":"Returns a substring of `String`, starting at position `Start`, and ending at the\nend of the string or at length `Length`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `slice/3`.\n\n_Example:_\n\n```erlang\n1> substr(\"Hello World\", 4, 5).\n\"lo Wo\"\n```","ref":"string.html#substr/3"},{"type":"function","title":"string.take/2","doc":"","ref":"string.html#take/2"},{"type":"function","title":"string.take/3","doc":"","ref":"string.html#take/3"},{"type":"function","title":"string.take/4","doc":"Takes characters from `String` as long as the characters are members of set\n`Characters` or the complement of set `Characters`. `Dir`, which can be\n`leading` or `trailing`, indicates from which direction characters are to be\ntaken.\n\n_Example:_\n\n```erlang\n5> string:take(\"abc0z123\", lists:seq($a,$z)).\n{\"abc\",\"0z123\"}\n6> string:take(<<\"abc0z123\">>, lists:seq($0,$9), true, leading).\n{<<\"abc\">>,<<\"0z123\">>}\n7> string:take(\"abc0z123\", lists:seq($0,$9), false, trailing).\n{\"abc0z\",\"123\"}\n8> string:take(<<\"abc0z123\">>, lists:seq($a,$z), true, trailing).\n{<<\"abc0z\">>,<<\"123\">>}\n```","ref":"string.html#take/4"},{"type":"function","title":"string.titlecase/1","doc":"Converts `String` to titlecase.\n\n_Example:_\n\n```erlang\n1> string:titlecase(\"ß is a SHARP s\").\n\"Ss is a SHARP s\"\n```","ref":"string.html#titlecase/1"},{"type":"function","title":"string.to_float/1","doc":"Argument `String` is expected to start with a valid text represented float (the\ndigits are ASCII values). Remaining characters in the string after the float are\nreturned in `Rest`.\n\n_Example:_\n\n```erlang\n1> {F1,Fs} = string:to_float(\"1.0-1.0e-1\"),\n1> {F2,[]} = string:to_float(Fs),\n1> F1+F2.\n0.9\n2> string:to_float(\"3/2=1.5\").\n{error,no_float}\n3> string:to_float(\"-1.5eX\").\n{-1.5,\"eX\"}\n```","ref":"string.html#to_float/1"},{"type":"function","title":"string.to_graphemes/1","doc":"Converts `String` to a list of grapheme clusters.\n\n_Example:_\n\n```erlang\n1> string:to_graphemes(\"ß↑e̊\").\n[223,8593,[101,778]]\n2> string:to_graphemes(<<\"ß↑e̊\"/utf8>>).\n[223,8593,[101,778]]\n```","ref":"string.html#to_graphemes/1"},{"type":"function","title":"string.to_integer/1","doc":"Argument `String` is expected to start with a valid text represented integer\n(the digits are ASCII values). Remaining characters in the string after the\ninteger are returned in `Rest`.\n\n_Example:_\n\n```erlang\n1> {I1,Is} = string:to_integer(\"33+22\"),\n1> {I2,[]} = string:to_integer(Is),\n1> I1-I2.\n11\n2> string:to_integer(\"0.5\").\n{0,\".5\"}\n3> string:to_integer(\"x=2\").\n{error,no_integer}\n```","ref":"string.html#to_integer/1"},{"type":"function","title":"string.to_lower/1","doc":"The specified string or character is case-converted. Notice that the supported\ncharacter set is ISO/IEC 8859-1 (also called Latin 1); all values outside this\nset are unchanged.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`) use\n`lowercase/1`, `titlecase/1` or `casefold/1`.","ref":"string.html#to_lower/1"},{"type":"function","title":"string.to_upper/1","doc":"The specified string or character is case-converted. Notice that the supported\ncharacter set is ISO/IEC 8859-1 (also called Latin 1); all values outside this\nset are unchanged.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`) use\n`uppercase/1`, `titlecase/1` or `casefold/1`.","ref":"string.html#to_upper/1"},{"type":"function","title":"string.tokens/2","doc":"Returns a list of tokens in `String`, separated by the characters in\n`SeparatorList`.\n\n_Example:_\n\n```erlang\n1> tokens(\"abc defxxghix jkl\", \"x \").\n[\"abc\", \"def\", \"ghi\", \"jkl\"]\n```\n\nNotice that, as shown in this example, two or more adjacent separator characters\nin `String` are treated as one. That is, there are no empty strings in the\nresulting list of tokens.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `lexemes/2`.","ref":"string.html#tokens/2"},{"type":"function","title":"string.trim/1","doc":"","ref":"string.html#trim/1"},{"type":"function","title":"string.trim/2","doc":"Equivalent to [`trim(String, Dir, Whitespace})`](`trim/3`) where \n`Whitespace` is the set of nonbreakable whitespace codepoints, defined\nas Pattern_White_Space in\n[Unicode Standard Annex #31](http://unicode.org/reports/tr31/).","ref":"string.html#trim/2"},{"type":"function","title":"string.trim/3","doc":"Returns a string, where leading or trailing, or both, `Characters` have been\nremoved.\n\n`Dir` which can be `leading`, `trailing`, or `both`, indicates from\nwhich direction characters are to be removed.\n\nNote that `[$\\r,$\\n]` is one grapheme cluster according to the Unicode\nStandard.\n\n_Example:_\n\n```erlang\n1> string:trim(\"\\t  Hello  \\n\").\n\"Hello\"\n2> string:trim(<<\"\\t  Hello  \\n\">>, leading).\n<<\"Hello  \\n\">>\n3> string:trim(<<\".Hello.\\n\">>, trailing, \"\\n.\").\n<<\".Hello\">>\n```","ref":"string.html#trim/3"},{"type":"function","title":"string.uppercase/1","doc":"Converts `String` to uppercase.\n\nSee also `titlecase/1`.\n\n_Example:_\n\n```erlang\n1> string:uppercase(\"Michał\").\n\"MICHAŁ\"\n```","ref":"string.html#uppercase/1"},{"type":"function","title":"string.words/1","doc":"","ref":"string.html#words/1"},{"type":"function","title":"string.words/2","doc":"Returns the number of words in `String`, separated by blanks or `Character`.\n\nThis function is [obsolete](`m:string#obsolete-api-functions`). Use `lexemes/2`.\n\n_Example:_\n\n```erlang\n1> words(\" Hello old boy!\", $o).\n4\n```","ref":"string.html#words/2"},{"type":"module","title":"unicode","doc":"Functions for converting Unicode characters.\n\nThis module contains functions for converting between different character\nrepresentations. It converts between ISO Latin-1 characters and Unicode\ncharacters, but it can also convert between different Unicode encodings (like\nUTF-8, UTF-16, and UTF-32).\n\nThe default Unicode encoding in Erlang binaries is UTF-8, which is also the\nformat in which built-in functions and libraries in OTP expect to find binary\nUnicode data. In lists, Unicode data is encoded as integers, each integer\nrepresenting one character and encoded simply as the Unicode code point for the\ncharacter.\n\nOther Unicode encodings than integers representing code points or UTF-8 in\nbinaries are referred to as \"external encodings\". The ISO Latin-1 encoding is in\nbinaries and lists referred to as latin1-encoding.\n\nIt is recommended to only use external encodings for communication with external\nentities where this is required. When working inside the Erlang/OTP environment,\nit is recommended to keep binaries in UTF-8 when representing Unicode\ncharacters. ISO Latin-1 encoding is supported both for backward compatibility\nand for communication with external entities not supporting Unicode character\nsets.\n\nPrograms should always operate on a normalized form and compare\ncanonical-equivalent Unicode characters as equal. All characters should thus be\nnormalized to one form once on the system borders. One of the following\nfunctions can convert characters to their normalized forms\n`characters_to_nfc_list/1`, `characters_to_nfc_binary/1`,\n`characters_to_nfd_list/1` or `characters_to_nfd_binary/1`. For general text\n`characters_to_nfc_list/1` or `characters_to_nfc_binary/1` is preferred, and for\nidentifiers one of the compatibility normalization functions, such as\n`characters_to_nfkc_list/1`, is preferred for security reasons. The\nnormalization functions where introduced in OTP 20. Additional information on\nnormalization can be found in the\n[Unicode FAQ](http://unicode.org/faq/normalization.html).","ref":"unicode.html"},{"type":"function","title":"unicode.bom_to_encoding/1","doc":"Checks for a UTF Byte Order Mark (BOM) in the beginning of a binary.\n\nIf the supplied binary `Bin` begins with a valid BOM for either UTF-8, UTF-16, or\nUTF-32, the function returns the encoding identified along with the BOM length\nin bytes.\n\nIf no BOM is found, the function returns `{latin1,0}`.","ref":"unicode.html#bom_to_encoding/1"},{"type":"function","title":"unicode.characters_to_binary/1","doc":"","ref":"unicode.html#characters_to_binary/1"},{"type":"function","title":"unicode.characters_to_binary/2","doc":"","ref":"unicode.html#characters_to_binary/2"},{"type":"function","title":"unicode.characters_to_binary/3","doc":"Behaves as `characters_to_list/2`, but produces a binary instead of a Unicode\nlist.\n\n`InEncoding` defines how input is to be interpreted if binaries are present in\n`Data`\n\n`OutEncoding` defines in what format output is to be generated.\n\nOptions:\n\n- **`unicode`** - An alias for `utf8`, as this is the preferred encoding for\n  Unicode characters in binaries.\n\n- **`utf16`** - An alias for `{utf16,big}`.\n\n- **`utf32`** - An alias for `{utf32,big}`.\n\nThe atoms `big` and `little` denote big- or little-endian encoding.\n\nErrors and exceptions occur as in `characters_to_list/2`, but the second element\nin tuple `error` or `incomplete` is a `t:binary/0` and not a `t:list/0`.","ref":"unicode.html#characters_to_binary/3"},{"type":"function","title":"unicode.characters_to_list/1","doc":"","ref":"unicode.html#characters_to_list/1"},{"type":"function","title":"unicode.characters_to_list/2","doc":"Converts a possibly deep list of integers and binaries into a list of integers\nrepresenting Unicode characters. The binaries in the input can have characters\nencoded as one of the following:\n\n- ISO Latin-1 (0-255, one character per byte). Here, case parameter `InEncoding`\n  is to be specified as `latin1`.\n- One of the UTF-encodings, which is specified as parameter `InEncoding`.\n\nNote that integers in the list always represent code points regardless of\n`InEncoding` passed. If `InEncoding latin1` is passed, only code points < 256\nare allowed; otherwise, all valid unicode code points are allowed.\n\nIf `InEncoding` is `latin1`, parameter `Data` corresponds to the `t:iodata/0`\ntype, but for `unicode`, parameter `Data` can contain integers > 255 (Unicode\ncharacters beyond the ISO Latin-1 range), which makes it invalid as\n`t:iodata/0`.\n\nThe purpose of the function is mainly to convert combinations of Unicode\ncharacters into a pure Unicode string in list representation for further\nprocessing. For writing the data to an external entity, the reverse function\n`characters_to_binary/3` comes in handy.\n\nOption `unicode` is an alias for `utf8`, as this is the preferred encoding for\nUnicode characters in binaries. `utf16` is an alias for `{utf16,big}` and\n`utf32` is an alias for `{utf32,big}`. The atoms `big` and `little` denote big-\nor little-endian encoding.\n\nIf the data cannot be converted, either because of illegal Unicode/ISO Latin-1\ncharacters in the list, or because of invalid UTF encoding in any binaries, an\nerror tuple is returned. The error tuple contains the tag `error`, a list\nrepresenting the characters that could be converted before the error occurred\nand a representation of the characters including and after the offending\ninteger/bytes. The last part is mostly for debugging, as it still constitutes a\npossibly deep or mixed list, or both, not necessarily of the same depth as the\noriginal data. The error occurs when traversing the list and whatever is left to\ndecode is returned \"as is\".\n\nHowever, if the input `Data` is a pure binary, the third part of the error tuple\nis guaranteed to be a binary as well.\n\nErrors occur for the following reasons:\n\n- Integers out of range.\n\n  If `InEncoding` is `latin1`, an error occurs whenever an integer > 255 is\n  found in the lists.\n\n  If `InEncoding` is of a Unicode type, an error occurs whenever either of the\n  following is found:\n\n  - An integer > 16#10FFFF (the maximum Unicode character)\n  - An integer in the range 16#D800 to 16#DFFF (invalid range reserved for\n    UTF-16 surrogate pairs)\n\n- Incorrect UTF encoding.\n\n  If `InEncoding` is one of the UTF types, the bytes in any binaries must be\n  valid in that encoding.\n\n  Errors can occur for various reasons, including the following:\n\n  - \"Pure\" decoding errors (like the upper bits of the bytes being wrong).\n  - The bytes are decoded to a too large number.\n  - The bytes are decoded to a code point in the invalid Unicode range.\n  - Encoding is \"overlong\", meaning that a number should have been encoded in\n    fewer bytes.\n\n  The case of a truncated UTF is handled specially, see the paragraph about\n  incomplete binaries below.\n\n  If `InEncoding` is `latin1`, binaries are always valid as long as they contain\n  whole bytes, as each byte falls into the valid ISO Latin-1 range.\n\nA special type of error is when no actual invalid integers or bytes are found,\nbut a trailing `t:binary/0` consists of too few bytes to decode the last\ncharacter. This error can occur if bytes are read from a file in chunks or if\nbinaries in other ways are split on non-UTF character boundaries. An\n`incomplete` tuple is then returned instead of the `error` tuple. It consists of\nthe same parts as the `error` tuple, but the tag is `incomplete` instead of\n`error` and the last element is always guaranteed to be a binary consisting of\nthe first part of a (so far) valid UTF character.\n\nIf one UTF character is split over two consecutive binaries in the `Data`, the\nconversion succeeds. This means that a character can be decoded from a range of\nbinaries as long as the whole range is specified as input without errors\noccurring.\n\n_Example:_\n\n```erlang\ndecode_data(Data) ->\n   case unicode:characters_to_list(Data,unicode) of\n      {incomplete,Encoded, Rest} ->\n            More = get_some_more_data(),\n            Encoded ++ decode_data([Rest, More]);\n      {error,Encoded,Rest} ->\n            handle_error(Encoded,Rest);\n      List ->\n            List\n   end.\n```\n\nHowever, bit strings that are not whole bytes are not allowed, so a UTF\ncharacter must be split along 8-bit boundaries to ever be decoded.\n\nA `badarg` exception is thrown for the following cases:\n\n- Any parameters are of the wrong type.\n- The list structure is invalid (a number as tail).\n- The binaries do not contain whole bytes (bit strings).","ref":"unicode.html#characters_to_list/2"},{"type":"function","title":"unicode.characters_to_nfc_binary/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof canonical equivalent Composed characters according to the Unicode standard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is an utf8 encoded binary.\n\n```erlang\n4> unicode:characters_to_nfc_binary([<<\"abc..a\">>,[778],$a,[776],$o,[776]]).\n<<\"abc..åäö\"/utf8>>\n```","ref":"unicode.html#characters_to_nfc_binary/1"},{"type":"function","title":"unicode.characters_to_nfc_list/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof canonical equivalent Composed characters according to the Unicode standard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is a list of characters.\n\n```erlang\n3> unicode:characters_to_nfc_list([<<\"abc..a\">>,[778],$a,[776],$o,[776]]).\n\"abc..åäö\"\n```","ref":"unicode.html#characters_to_nfc_list/1"},{"type":"function","title":"unicode.characters_to_nfd_binary/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof canonical equivalent Decomposed characters according to the Unicode standard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is an utf8 encoded binary.\n\n```erlang\n2> unicode:characters_to_nfd_binary(\"abc..åäö\").\n<<97,98,99,46,46,97,204,138,97,204,136,111,204,136>>\n```","ref":"unicode.html#characters_to_nfd_binary/1"},{"type":"function","title":"unicode.characters_to_nfd_list/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof canonical equivalent Decomposed characters according to the Unicode standard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is a list of characters.\n\n```erlang\n1> unicode:characters_to_nfd_list(\"abc..åäö\").\n[97,98,99,46,46,97,778,97,776,111,776]\n```","ref":"unicode.html#characters_to_nfd_list/1"},{"type":"function","title":"unicode.characters_to_nfkc_binary/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof compatibly equivalent Composed characters according to the Unicode standard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is an utf8 encoded binary.\n\n```erlang\n4> unicode:characters_to_nfkc_binary([<<\"abc..a\">>,[778],$a,[776],$o,[776],[65299,65298]]).\n<<\"abc..åäö32\"/utf8>>\n```","ref":"unicode.html#characters_to_nfkc_binary/1"},{"type":"function","title":"unicode.characters_to_nfkc_list/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof compatibly equivalent Composed characters according to the Unicode standard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is a list of characters.\n\n```erlang\n3> unicode:characters_to_nfkc_list([<<\"abc..a\">>,[778],$a,[776],$o,[776],[65299,65298]]).\n\"abc..åäö32\"\n```","ref":"unicode.html#characters_to_nfkc_list/1"},{"type":"function","title":"unicode.characters_to_nfkd_binary/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof compatibly equivalent Decomposed characters according to the Unicode\nstandard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is an utf8 encoded binary.\n\n```erlang\n2> unicode:characters_to_nfkd_binary([\"abc..åäö\",[65299,65298]]).\n<<97,98,99,46,46,97,204,138,97,204,136,111,204,136,51,50>>\n```","ref":"unicode.html#characters_to_nfkd_binary/1"},{"type":"function","title":"unicode.characters_to_nfkd_list/1","doc":"Converts a possibly deep list of characters and binaries into a Normalized Form\nof compatibly equivalent Decomposed characters according to the Unicode\nstandard.\n\nAny binaries in the input must be encoded with utf8 encoding.\n\nThe result is a list of characters.\n\n```erlang\n1> unicode:characters_to_nfkd_list([\"abc..åäö\",[65299,65298]]).\n[97,98,99,46,46,97,778,97,776,111,776,51,50]\n```","ref":"unicode.html#characters_to_nfkd_list/1"},{"type":"type","title":"unicode.chardata/0","doc":"","ref":"unicode.html#t:chardata/0"},{"type":"type","title":"unicode.charlist/0","doc":"","ref":"unicode.html#t:charlist/0"},{"type":"type","title":"unicode.encoding/0","doc":"","ref":"unicode.html#t:encoding/0"},{"type":"function","title":"unicode.encoding_to_bom/1","doc":"Creates a UTF Byte Order Mark (BOM) as a binary from the supplied `InEncoding`.\n\nThe BOM is, if supported at all, expected to be placed first in UTF encoded\nfiles or messages.\n\nThe function returns `<<>>` for `latin1` encoding, as there is no BOM for ISO\nLatin-1.\n\nNotice that the BOM for UTF-8 is seldom used, and it is really not a _byte\norder_ mark. There are obviously no byte order issues with UTF-8, so the BOM is\nonly there to differentiate UTF-8 encoding from other UTF formats.","ref":"unicode.html#encoding_to_bom/1"},{"type":"type","title":"unicode.endian/0","doc":"","ref":"unicode.html#t:endian/0"},{"type":"type","title":"unicode.external_chardata/0","doc":"","ref":"unicode.html#t:external_chardata/0"},{"type":"type","title":"unicode.external_charlist/0","doc":"","ref":"unicode.html#t:external_charlist/0"},{"type":"type","title":"unicode.external_unicode_binary/0","doc":"A `t:binary/0` with characters coded in a user-specified Unicode encoding other\nthan UTF-8 (that is, UTF-16 or UTF-32).","ref":"unicode.html#t:external_unicode_binary/0"},{"type":"type","title":"unicode.latin1_binary/0","doc":"A `t:binary/0` with characters coded in ISO Latin-1.","ref":"unicode.html#t:latin1_binary/0"},{"type":"type","title":"unicode.latin1_char/0","doc":"An `t:integer/0` representing a valid ISO Latin-1 character (0-255).","ref":"unicode.html#t:latin1_char/0"},{"type":"type","title":"unicode.latin1_chardata/0","doc":"Equivalent to `t:iodata/0`.","ref":"unicode.html#t:latin1_chardata/0"},{"type":"type","title":"unicode.latin1_charlist/0","doc":"Equivalent to `t:iolist/0`.","ref":"unicode.html#t:latin1_charlist/0"},{"type":"type","title":"unicode.unicode_binary/0","doc":"A `t:binary/0` with characters encoded in the UTF-8 coding standard.","ref":"unicode.html#t:unicode_binary/0"},{"type":"module","title":"uri_string","doc":"URI processing functions.\n\nThis module contains functions for parsing and handling URIs\n([RFC 3986](https://www.ietf.org/rfc/rfc3986.txt)) and form-urlencoded query\nstrings ([HTML 5.2](https://www.w3.org/TR/html52/)).\n\nParsing and serializing non-UTF-8 form-urlencoded query strings are also\nsupported ([HTML 5.0](https://www.w3.org/TR/html50/)).\n\nA URI is an identifier consisting of a sequence of characters matching the\nsyntax rule named _URI_ in [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt).\n\nThe generic URI syntax consists of a hierarchical sequence of components\nreferred to as the scheme, authority, path, query, and fragment:\n\n```text\n    URI         = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n    hier-part   = \"//\" authority path-abempty\n                   / path-absolute\n                   / path-rootless\n                   / path-empty\n    scheme      = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    authority   = [ userinfo \"@\" ] host [ \":\" port ]\n    userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n\n    reserved    = gen-delims / sub-delims\n    gen-delims  = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\n    sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n    unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n```\n\nThe interpretation of a URI depends only on the characters used and not on how\nthose characters are represented in a network protocol.\n\nThe functions implemented by this module cover the following use cases:\n\n- Parsing URIs into its components and returing a map: `parse/1`\n- Recomposing a map of URI components into a URI string: `recompose/1`\n- Changing inbound binary and percent-encoding of URIs: `transcode/2`\n- Transforming URIs into a normalized form: `normalize/1`, `normalize/2`\n- Composing form-urlencoded query strings from a list of key-value pairs:\n  `compose_query/1`, `compose_query/2`\n- Dissecting form-urlencoded query strings into a list of key-value pairs:\n  `dissect_query/1`\n- Decoding percent-encoded triplets in URI map or a specific component of URI:\n  `percent_decode/1`\n- Preparing and retrieving application specific data included in URI\n  components:\n  `quote/1`, `quote/2`, `unquote/1`\n\nThere are four different encodings present during the handling of URIs:\n\n- Inbound binary encoding in binaries\n- Inbound percent-encoding in lists and binaries\n- Outbound binary encoding in binaries\n- Outbound percent-encoding in lists and binaries\n\nFunctions with `t:uri_string/0` argument accept lists, binaries and mixed lists\n(lists with binary elements) as input type. All of the functions but\n[`transcode/2`](`transcode/2`) expects input as lists of unicode codepoints,\nUTF-8 encoded binaries and UTF-8 percent-encoded URI parts (\"%C3%B6\" corresponds\nto the unicode character \"ö\").\n\nUnless otherwise specified the return value type and encoding are the same as\nthe input type and encoding. That is, binary input returns binary output, list\ninput returns a list output but mixed input returns list output.\n\nIn case of lists there is only percent-encoding. In binaries, however, both\nbinary encoding and percent-encoding shall be considered.\n[`transcode/2`](`transcode/2`) provides the means to convert between the\nsupported encodings, it takes a `t:uri_string/0` and a list of options\nspecifying inbound and outbound encodings.\n\n[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) does not mandate any specific\ncharacter encoding and it is usually defined by the protocol or surrounding\ntext. This library takes the same assumption, binary and percent-encoding are\nhandled as one configuration unit, they cannot be set to different values.\n\nQuoting functions are intended to be used by URI producing application during\ncomponent preparation or retrieval phase to avoid conflicts between data and\ncharacters used in URI syntax. Quoting functions use percent encoding, but with\ndifferent rules than for example during execution of\n[`recompose/1`](`recompose/1`). It is user responsibility to provide quoting\nfunctions with application data only and using their output to combine an URI\ncomponent.  \nQuoting functions can for instance be used for constructing a path component\nwith a segment containing '/' character which should not collide with '/' used\nas general delimiter in path component.","ref":"uri_string.html"},{"type":"function","title":"uri_string.allowed_characters/0","doc":"This is a utility function meant to be used in the shell for printing the\nallowed characters in each major URI component, and also in the most important\ncharacters sets.\n\nNote that this function does not replace the ABNF rules defined by the standards,\nthese character sets are derived directly from those aformentioned rules. For more\ninformation see the\n[Uniform Resource Identifiers](uri_string_usage.md#percent_encoding) chapter in\nstdlib's Users Guide.","ref":"uri_string.html#allowed_characters/0"},{"type":"function","title":"uri_string.compose_query/1","doc":"Composes a form-urlencoded `QueryString` based on a `QueryList`, a list of\nnon-percent-encoded key-value pairs.\n\nForm-urlencoding is defined in section 4.10.21.6 of the [HTML 5.2](https://www.w3.org/TR/html52/)\nspecification and in section 4.10.22.6 of the [HTML 5.0](https://www.w3.org/TR/html50/)\nspecification for non-UTF-8 encodings.\n\nSee also the opposite operation `dissect_query/1`.\n\n_Example:_\n\n```erlang\n1> uri_string:compose_query([{\"foo bar\",\"1\"},{\"city\",\"örebro\"}]).\n\"foo+bar=1&city=%C3%B6rebro\"\n2> uri_string:compose_query([{<<\"foo bar\">>,<<\"1\">>},\n2> {<<\"city\">>,<<\"örebro\"/utf8>>}]).\n<<\"foo+bar=1&city=%C3%B6rebro\">>\n```","ref":"uri_string.html#compose_query/1"},{"type":"function","title":"uri_string.compose_query/2","doc":"Same as [`compose_query/1`](`compose_query/1`) but with an additional `Options`\nparameter, that controls the encoding (\"charset\") used by the encoding\nalgorithm.\n\nThere are two supported encodings: `utf8` (or `unicode`) and `latin1`.\n\nEach character in the entry's name and value that cannot be expressed using the\nselected character encoding, is replaced by a string consisting of a U+0026\nAMPERSAND character (&), a \"#\" (U+0023) character, one or more ASCII digits\nrepresenting the Unicode code point of the character in base ten, and finally a\n\";\" (U+003B) character.\n\nBytes that are out of the range 0x2A, 0x2D, 0x2E, 0x30 to 0x39, 0x41 to 0x5A,\n0x5F, 0x61 to 0x7A, are percent-encoded (U+0025 PERCENT SIGN character (%)\nfollowed by uppercase ASCII hex digits representing the hexadecimal value of the\nbyte).\n\nSee also the opposite operation `dissect_query/1`.\n\n_Example:_\n\n```erlang\n1> uri_string:compose_query([{\"foo bar\",\"1\"},{\"city\",\"örebro\"}],\n1> [{encoding, latin1}]).\n\"foo+bar=1&city=%F6rebro\"\n2> uri_string:compose_query([{<<\"foo bar\">>,<<\"1\">>},\n2> {<<\"city\">>,<<\"東京\"/utf8>>}], [{encoding, latin1}]).\n<<\"foo+bar=1&city=%26%2326481%3B%26%2320140%3B\">>\n```","ref":"uri_string.html#compose_query/2"},{"type":"function","title":"uri_string.dissect_query/1","doc":"Dissects an urlencoded `QueryString` and returns a `QueryList`, a list of\nnon-percent-encoded key-value pairs.\n\nForm-urlencoding is defined in section 4.10.21.6 of the [HTML 5.2](https://www.w3.org/TR/html52/)\nspecification and in section 4.10.22.6 of the [HTML 5.0](https://www.w3.org/TR/html50/)\nspecification for non-UTF-8 encodings.\n\nSee also the opposite operation `compose_query/1`.\n\n_Example:_\n\n```erlang\n1> uri_string:dissect_query(\"foo+bar=1&city=%C3%B6rebro\").\n[{\"foo bar\",\"1\"},{\"city\",\"örebro\"}]\n2> uri_string:dissect_query(<<\"foo+bar=1&city=%26%2326481%3B%26%2320140%3B\">>).\n[{<<\"foo bar\">>,<<\"1\">>},\n {<<\"city\">>,<<230,157,177,228,186,172>>}]\n```","ref":"uri_string.html#dissect_query/1"},{"type":"type","title":"uri_string.error/0","doc":"Error tuple indicating the type of error. Possible values of the second\ncomponent:\n\n- `invalid_character`\n- `invalid_encoding`\n- `invalid_input`\n- `invalid_map`\n- `invalid_percent_encoding`\n- `invalid_scheme`\n- `invalid_uri`\n- `invalid_utf8`\n- `missing_value`\n\nThe third component is a term providing additional information about the cause\nof the error.","ref":"uri_string.html#t:error/0"},{"type":"function","title":"uri_string.normalize/1","doc":"Transforms an `URI` into a normalized form using Syntax-Based Normalization as\ndefined by [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt).\n\nThis function implements case normalization, percent-encoding normalization,\npath segment normalization and scheme based normalization for HTTP(S) with basic\nsupport for FTP, SSH, SFTP and TFTP.\n\n_Example:_\n\n```erlang\n1> uri_string:normalize(\"/a/b/c/./../../g\").\n\"/a/g\"\n2> uri_string:normalize(<<\"mid/content=5/../6\">>).\n<<\"mid/6\">>\n3> uri_string:normalize(\"http://localhost:80\").\n\"http://localhost/\"\n4> uri_string:normalize(#{scheme => \"http\",port => 80,path => \"/a/b/c/./../../g\",\n4> host => \"localhost-örebro\"}).\n\"http://localhost-%C3%B6rebro/a/g\"\n```","ref":"uri_string.html#normalize/1"},{"type":"function","title":"uri_string.normalize/2","doc":"Same as [`normalize/1`](`normalize/1`) but with an additional `Options`\nparameter, that controls whether the normalized URI shall be returned as an\nuri_map().\n\nThere is one supported option: `return_map`.\n\n_Example:_\n\n```erlang\n1> uri_string:normalize(\"/a/b/c/./../../g\", [return_map]).\n#{path => \"/a/g\"}\n2> uri_string:normalize(<<\"mid/content=5/../6\">>, [return_map]).\n#{path => <<\"mid/6\">>}\n3> uri_string:normalize(\"http://localhost:80\", [return_map]).\n#{scheme => \"http\",path => \"/\",host => \"localhost\"}\n4> uri_string:normalize(#{scheme => \"http\",port => 80,path => \"/a/b/c/./../../g\",\n4> host => \"localhost-örebro\"}, [return_map]).\n#{scheme => \"http\",path => \"/a/g\",host => \"localhost-örebro\"}\n```","ref":"uri_string.html#normalize/2"},{"type":"function","title":"uri_string.parse/1","doc":"Parses an [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) compliant\n`t:uri_string/0` into a `t:uri_map/0`, that holds the parsed components of the\n`URI`. If parsing fails, an error tuple is returned.\n\nSee also the opposite operation `recompose/1`.\n\n_Example:_\n\n```erlang\n1> uri_string:parse(\"foo://user@example.com:8042/over/there?name=ferret#nose\").\n#{fragment => \"nose\",host => \"example.com\",\n  path => \"/over/there\",port => 8042,query => \"name=ferret\",\n  scheme => foo,userinfo => \"user\"}\n2> uri_string:parse(<<\"foo://user@example.com:8042/over/there?name=ferret\">>).\n#{host => <<\"example.com\">>,path => <<\"/over/there\">>,\n  port => 8042,query => <<\"name=ferret\">>,scheme => <<\"foo\">>,\n  userinfo => <<\"user\">>}\n```","ref":"uri_string.html#parse/1"},{"type":"function","title":"uri_string.percent_decode/1","doc":"Decodes all percent-encoded triplets in the input that can be both a\n`t:uri_string/0` and a `t:uri_map/0`.\n\nNote, that this function performs raw decoding and it shall be used on already\nparsed URI components. Applying this function directly on a standard URI can\neffectively change it.\n\nIf the input encoding is not UTF-8, an error tuple is returned.\n\n_Example:_\n\n```erlang\n1> uri_string:percent_decode(#{host => \"localhost-%C3%B6rebro\",path => [],\n1> scheme => \"http\"}).\n#{host => \"localhost-örebro\",path => [],scheme => \"http\"}\n2> uri_string:percent_decode(<<\"%C3%B6rebro\">>).\n<<\"örebro\"/utf8>>\n```\n\n> #### Warning {: .warning }\n>\n> Using `uri_string:percent_decode/1` directly on a URI is not safe. This\n> example shows, that after each consecutive application of the function the\n> resulting URI will be changed. None of these URIs refer to the same resource.\n>\n> ```erlang\n> 3> uri_string:percent_decode(<<\"http://local%252Fhost/path\">>).\n> <<\"http://local%2Fhost/path\">>\n> 4> uri_string:percent_decode(<<\"http://local%2Fhost/path\">>).\n> <<\"http://local/host/path\">>\n> ```","ref":"uri_string.html#percent_decode/1"},{"type":"function","title":"uri_string.quote/1","doc":"Replaces characters out of unreserved set with their percent encoded\nequivalents.\n\nUnreserved characters defined in\n[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) are not quoted.\n\n_Example:_\n\n```erlang\n1> uri_string:quote(\"SomeId/04\").\n\"SomeId%2F04\"\n2> uri_string:quote(<<\"SomeId/04\">>).\n<<\"SomeId%2F04\">>\n```\n\n> #### Warning {: .warning }\n>\n> Function is not aware about any URI component context and should not be used\n> on whole URI. If applied more than once on the same data, might produce\n> unexpected results.","ref":"uri_string.html#quote/1"},{"type":"function","title":"uri_string.quote/2","doc":"Same as [`quote/1`](`quote/1`), but `Safe` allows user to provide a list of\ncharacters to be protected from encoding.\n\n_Example:_\n\n```erlang\n1> uri_string:quote(\"SomeId/04\", \"/\").\n\"SomeId/04\"\n2> uri_string:quote(<<\"SomeId/04\">>, \"/\").\n<<\"SomeId/04\">>\n```\n\n> #### Warning {: .warning }\n>\n> Function is not aware about any URI component context and should not be used\n> on whole URI. If applied more than once on the same data, might produce\n> unexpected results.","ref":"uri_string.html#quote/2"},{"type":"function","title":"uri_string.recompose/1","doc":"Creates an [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) compliant\n`URIString` (percent-encoded), based on the components of `URIMap`. If the\n`URIMap` is invalid, an error tuple is returned.\n\nSee also the opposite operation `parse/1`.\n\n_Example:_\n\n```erlang\n1> URIMap = #{fragment => \"nose\", host => \"example.com\", path => \"/over/there\",\n1> port => 8042, query => \"name=ferret\", scheme => \"foo\", userinfo => \"user\"}.\n#{fragment => \"nose\",host => \"example.com\",\n  path => \"/over/there\",port => 8042,query => \"name=ferret\",\n  scheme => \"foo\",userinfo => \"user\"}\n\n2> uri_string:recompose(URIMap).\n\"foo://example.com:8042/over/there?name=ferret#nose\"\n```","ref":"uri_string.html#recompose/1"},{"type":"function","title":"uri_string.resolve/2","doc":"Convert a `RefURI` reference that might be relative to a given base URI into the\nparsed components of the reference's target, which can then be recomposed to\nform the target URI.\n\n_Example:_\n\n```erlang\n1> uri_string:resolve(\"/abs/ol/ute\", \"http://localhost/a/b/c?q\").\n\"http://localhost/abs/ol/ute\"\n2> uri_string:resolve(\"../relative\", \"http://localhost/a/b/c?q\").\n\"http://localhost/a/relative\"\n3> uri_string:resolve(\"http://localhost/full\", \"http://localhost/a/b/c?q\").\n\"http://localhost/full\"\n4> uri_string:resolve(#{path => \"path\", query => \"xyz\"}, \"http://localhost/a/b/c?q\").\n\"http://localhost/a/b/path?xyz\"\n```","ref":"uri_string.html#resolve/2"},{"type":"function","title":"uri_string.resolve/3","doc":"Same as [`resolve/2`](`resolve/2`) but with an additional `Options` parameter,\nthat controls whether the target URI shall be returned as an uri_map(). There is\none supported option: `return_map`.\n\n_Example:_\n\n```erlang\n1> uri_string:resolve(\"/abs/ol/ute\", \"http://localhost/a/b/c?q\", [return_map]).\n#{host => \"localhost\",path => \"/abs/ol/ute\",scheme => \"http\"}\n2> uri_string:resolve(#{path => \"/abs/ol/ute\"}, #{scheme => \"http\",\n2> host => \"localhost\", path => \"/a/b/c?q\"}, [return_map]).\n#{host => \"localhost\",path => \"/abs/ol/ute\",scheme => \"http\"}\n```","ref":"uri_string.html#resolve/3"},{"type":"function","title":"uri_string.transcode/2","doc":"Transcodes an [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) compliant\n`URIString`, where `Options` is a list of tagged tuples, specifying the inbound\n(`in_encoding`) and outbound (`out_encoding`) encodings.\n\n`in_encoding` and `out_encoding` specifies both binary encoding and percent-encoding\nfor the input and output data. Mixed encoding, where binary encoding is not the same as\npercent-encoding, is not supported. If an argument is invalid, an error tuple is\nreturned.\n\n_Example:_\n\n```erlang\n1> uri_string:transcode(<<\"foo%00%00%00%F6bar\"/utf32>>,\n1> [{in_encoding, utf32},{out_encoding, utf8}]).\n<<\"foo%C3%B6bar\"/utf8>>\n2> uri_string:transcode(\"foo%F6bar\", [{in_encoding, latin1},\n2> {out_encoding, utf8}]).\n\"foo%C3%B6bar\"\n```","ref":"uri_string.html#transcode/2"},{"type":"function","title":"uri_string.unquote/1","doc":"Percent decode characters.\n\n_Example:_\n\n```erlang\n1> uri_string:unquote(\"SomeId%2F04\").\n\"SomeId/04\"\n2> uri_string:unquote(<<\"SomeId%2F04\">>).\n<<\"SomeId/04\">>\n```\n\n> #### Warning {: .warning }\n>\n> Function is not aware about any URI component context and should not be used\n> on whole URI. If applied more than once on the same data, might produce\n> unexpected results.","ref":"uri_string.html#unquote/1"},{"type":"type","title":"uri_string.uri_map/0","doc":"Map holding the main components of a URI.","ref":"uri_string.html#t:uri_map/0"},{"type":"type","title":"uri_string.uri_string/0","doc":"List of unicode codepoints, a UTF-8 encoded binary, or a mix of the two,\nrepresenting an [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) compliant URI\n(_percent-encoded form_). A URI is a sequence of characters from a very limited\nset: the letters of the basic Latin alphabet, digits, and a few special\ncharacters.","ref":"uri_string.html#t:uri_string/0"},{"type":"extras","title":"STDLIB Application","doc":"<!--\n%CopyrightBegin%\n\nCopyright Ericsson AB 2023-2024. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# STDLIB Application","ref":"stdlib_app.html"},{"type":"extras","title":"Description - STDLIB Application","doc":"The STDLIB application is mandatory in the sense that the minimal system based\non Erlang/OTP consists of Kernel and STDLIB. The STDLIB application contains no\nservices.","ref":"stdlib_app.html#description"},{"type":"extras","title":"Configuration - STDLIB Application","doc":"The following configuration parameters are defined for the STDLIB application.\nFor more information about configuration parameters, see the\n[`app(4)`](`e:kernel:app.md`) module in Kernel.\n\n- **`shell_esc = icl | abort`{: #shell_esc }** - Can be used to change the\n  behavior of the Erlang shell when _^G_ is pressed.\n\n- **`restricted_shell = module()`{: #restricted_shell }** - Can be used to run\n  the Erlang shell in restricted mode.\n\n- **`shell_catch_exception = boolean()`{: #shell_catch_exception }** - Can be\n  used to set the exception handling of the evaluator process of Erlang shell.\n\n- **`shell_expand_location = above | below`{: #shell_expand_location }** - Sets\n  where the tab expansion text should appear in the shell. The default is\n  `below`. This will open a pager below the cursor that is scrollable one line\n  at a time with `Up/Down` arrow keys or 5 lines at a time with `PgUp/PgDn`.\n\n- **`shell_history_length = integer() >= 0`{: #shell_history_length }** - Can be\n  used to determine how many commands are saved by the Erlang shell. See\n  `m:edlin` for more.\n\n- **`shell_keymap = #{}`{: #shell_keymap }** - Can be used to override the\n  default keymap configuration for the shell.\n\n- **`format_shell_func = {Mod, Func} | string() | default`{: #format_shell_func\n  }** - Can be used to set the formatting of the Erlang shell output. This has\n  an effect on commands that have been submitted and how it is saved in history\n  or if the formatting hotkey is pressed while editing an expression (Alt-f by\n  default). You can specify a Mod:Func/1 that expects the whole expression as a\n  string and returns a formatted expressions as a string. See\n  `shell:format_shell_func/1` for how to set it from inside the shell.\n\n  If instead a string is provided, it will be used as a shell command. Your\n  command must include `${file}` somewhere in the string, for the shell to know\n  where the file goes in the command.\n\n  ```text\n  -stdlib format_shell_func \"\\\"emacs -batch \\${file} -l ~/erlang-format/emacs-format-file -f emacs-format-function\\\"\"\n  ```\n\n  ```text\n  -stdlib format_shell_func \"{shell, erl_pp_format_func}\"\n  ```\n\n- **`shell_prompt_func = {Mod, Func} | default`{: #shell_prompt_func }** - where\n\n  - `Mod = atom()`\n  - `Func = atom()`\n\n  Can be used to set a customized Erlang shell prompt function.\n\n- **`shell_multiline_prompt = {Mod, Func} | string() | default`{:\n  #shell_multiline_prompt }** - where\n\n  - `Mod = atom()`\n  - `Func = atom()`\n\n  Can be used to set a customized multiline shell prompt function. The multiline\n  prompt function takes the main prompt as its only parameter.\n\n- **`shell_saved_results = integer() >= 0`{: #shell_saved_results }** - Can be\n  used to determine how many results are saved by the Erlang shell.\n\n- **`shell_session_slogan = string() | fun() -> string())`{:\n  #shell_session_slogan }** - The slogan printed when starting an Erlang shell.\n  Example:\n\n  ```erlang\n  $ erl -stdlib shell_session_slogan '\"Test slogan\"'\n  Erlang/OTP 26 [DEVELOPMENT] [erts-13.0.2] [source] [64-bit] [smp:8:8] [ds:8:8:10] [async-threads:1] [jit:ns]\n\n  Test slogan\n  1>\n  ```\n\n- **`shell_slogan = string() | fun(() -> string())`{: #shell_slogan }** - The\n  slogan printed when starting the Erlang shell subsystem. Example:\n\n  ```erlang\n  $ erl -stdlib shell_slogan '\"Test slogan\"'\n  Test slogan\n  Eshell V13.0.2  (abort with ^G)\n  1>\n  ```\n\n  The default is the return value of\n  [`erlang:system_info(system_version)`](`m:erlang#system_info_system_version`).\n\n- **`shell_strings = boolean()`{: #shell_strings }** - Can be used to determine\n  how the Erlang shell outputs lists of integers.","ref":"stdlib_app.html#configuration"},{"type":"extras","title":"See Also - STDLIB Application","doc":"[`app(4)`](`e:kernel:app.md`), `m:application`, `m:shell`","ref":"stdlib_app.html#see-also"},{"type":"extras","title":"STDLIB Release Notes","doc":"<!--\n%CopyrightBegin%\n\nCopyright Ericsson AB 2023-2024. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# STDLIB Release Notes\n\nThis document describes the changes made to the STDLIB application.","ref":"notes.html"},{"type":"extras","title":"STDLIB 6.2.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-2-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The `save_module/1` command in the shell now saves both the locally defined records and the imported records using the `rr/1` command.\n\n  Own Id: OTP-19647 Aux Id: [GH-9816], [PR-9897]\n\n- It's now possible to write `lists:map(fun is_atom/1, [])` or `lists:map(fun my_func/1, [])`, in the shell, instead of `lists:map(fun erlang:is_atom/1, [])` or `lists:map(fun shell_default:my_func/1, [])`.\n\n  Own Id: OTP-19649 Aux Id: [GH-9771], [PR-9898]\n\n- Properly strip the leading `/` and drive letter from filepaths when zipping and unzipping archives.\n  \n  Thanks to Wander Nauta for finding and responsibly disclosing this vulnerability to the Erlang/OTP project.\n\n  Own Id: OTP-19653 Aux Id: [CVE-2025-4748], [PR-9941]\n\n- Shell no longer crashes when requesting to autocomplete map keys containing non-atoms.\n\n  Own Id: OTP-19659 Aux Id: [PR-9896]\n\n- A remote shell can now exit by closing the input stream, without terminating the remote node.\n\n  Own Id: OTP-19667 Aux Id: [PR-9912]\n\n[GH-9816]: https://github.com/erlang/otp/issues/9816\n[PR-9897]: https://github.com/erlang/otp/pull/9897\n[GH-9771]: https://github.com/erlang/otp/issues/9771\n[PR-9898]: https://github.com/erlang/otp/pull/9898\n[CVE-2025-4748]: https://nvd.nist.gov/vuln/detail/2025-4748\n[PR-9941]: https://github.com/erlang/otp/pull/9941\n[PR-9896]: https://github.com/erlang/otp/pull/9896\n[PR-9912]: https://github.com/erlang/otp/pull/9912","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 6.2.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed crash when fetching `initial_call` when user code have modified the `process_dictionary`.\n\n  Own Id: OTP-19546 Aux Id: ERIERL-1205, [PR-9596]\n\n[PR-9596]: https://github.com/erlang/otp/pull/9596","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 6.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed `argparse:help/2` to accept the program name as part of the command path.\n\n  Own Id: OTP-19397 Aux Id: [PR-9160]\n\n- Fixed `argparse:format_help/2` crash on 'hidden' command.\n\n  Own Id: OTP-19400 Aux Id: [PR-9151], [GH-9150]\n\n- Fixed the type specification for `timer:sleep/1` by adding the value `infinity` to its input type.\n\n  Own Id: OTP-19442 Aux Id: [PR-9303]\n\n- Eliminated a crash in `zip:unzip/1` while unzipping an archive where a directory within was read-only. This bug was introduced in Erlang/OTP 27.1.\n\n  Own Id: OTP-19447 Aux Id: [GH-9332], [PR-9335]\n\n- Fixed map comprehension result when a key value is replaced.\n\n  Own Id: OTP-19459 Aux Id: [GH-9348], [PR-9358]\n\n- Fixed `string:jaro_similarity/1` for matching strings of length 1.\n\n  Own Id: OTP-19468 Aux Id: [PR-9371]\n\n[PR-9160]: https://github.com/erlang/otp/pull/9160\n[PR-9151]: https://github.com/erlang/otp/pull/9151\n[GH-9150]: https://github.com/erlang/otp/issues/9150\n[PR-9303]: https://github.com/erlang/otp/pull/9303\n[GH-9332]: https://github.com/erlang/otp/issues/9332\n[PR-9335]: https://github.com/erlang/otp/pull/9335\n[GH-9348]: https://github.com/erlang/otp/issues/9348\n[PR-9358]: https://github.com/erlang/otp/pull/9358\n[PR-9371]: https://github.com/erlang/otp/pull/9371","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 6.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Made it possible to expand help text displayed by pressing ^[h by pressing ^[h again.\n\n  Own Id: OTP-19260 Aux Id: [PR-8884]\n\n- Defining a fun in the shell using the syntax `fun Name/Arity` would fail. This has been corrected so that the following now works:\n  \n  ```\n  1> F = fun is_atom/1.\n  #Fun.erl.42.18682967>\n  > F(a).\n  true\n  3> Id = fun id/1.\n  #Fun.erl.42.18682967>\n  4> Id(42).\n  ** exception error: undefined shell command id/1\n  5> id(I) -> I.\n  ok\n  6> Id(42).\n  42\n  ```\n  \n  The Debugger has also been corrected to correctly handle this syntax for a BIF.\n\n  Own Id: OTP-19322 Aux Id: [GH-8963], [PR-8987]\n\n- Fixed a bug where completion of 'fun(' would cause the shell to crash.\n\n  Own Id: OTP-19351 Aux Id: [PR-9043]\n\n- Fixed a bug causing the shell to crash while trying to complete an expression starting with a '/' or a variable followed by '(' or '/'. E.g. Foo/ and Foo(.\n\n  Own Id: OTP-19361 Aux Id: [PR-9078]\n\n- `zip:extract/2` with `keep_old_files` now respects the `cwd` option.\n\n  Own Id: OTP-19370 Aux Id: [PR-9097], [GH-9087]\n\n- Fixed an error in uri_string:percent_decode spec\n\n  Own Id: OTP-19380 Aux Id: [GH-8755]\n\n[PR-8884]: https://github.com/erlang/otp/pull/8884\n[GH-8963]: https://github.com/erlang/otp/issues/8963\n[PR-8987]: https://github.com/erlang/otp/pull/8987\n[PR-9043]: https://github.com/erlang/otp/pull/9043\n[PR-9078]: https://github.com/erlang/otp/pull/9078\n[PR-9097]: https://github.com/erlang/otp/pull/9097\n[GH-9087]: https://github.com/erlang/otp/issues/9087\n[GH-8755]: https://github.com/erlang/otp/issues/8755","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Updated shell docs to display the type spec, that is, [`h(erlang, min, 2)`](`\\c:h/2`) now prints the type spec and documentation in the shell.\n  \n  ```\n  > h(erlang,min,2).\n  \n    -spec min(Term1, Term2) -> Minimum\n                 when Term1 :: term(), Term2 :: term(), Minimum :: term().\n  \n    Returns the smallest of Term1 and Term2. If the terms compare equal with the == operator, Term1 is returned.\n  ```\n\n  Own Id: OTP-19234 Aux Id: [GH-8544], [PR-8833]\n\n- The `t:file:io_device/0` type has been updated to clearly show the difference between a `raw` and `cooked` IoDevice.\n\n  Own Id: OTP-19301 Aux Id: [PR-8956]\n\n- Added `json:format_key_value_list/3` and\n  `json:format_key_value_list_checked/3`.\n\n  Own Id: OTP-19320 Aux Id: [PR-8889]\n\n- Improved documentation of [timers](`e:erts:time_correction.md#timers`).\n\n  Own Id: OTP-19360 Aux Id: ERIERL-1149, [PR-9062]\n\n- Added logging support to `t:io:user/0`, `t:io:standard_io/0` and `t:io:standard_error/0`. See `io:setopts/2` for more details.\n\n  Own Id: OTP-19372 Aux Id: [PR-8947]\n\n[GH-8544]: https://github.com/erlang/otp/issues/8544\n[PR-8833]: https://github.com/erlang/otp/pull/8833\n[PR-8956]: https://github.com/erlang/otp/pull/8956\n[PR-8889]: https://github.com/erlang/otp/pull/8889\n[PR-9062]: https://github.com/erlang/otp/pull/9062\n[PR-8947]: https://github.com/erlang/otp/pull/8947","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 6.1.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- With this change, uri_string:normalize assumes empty path (do not crash) when no path is provided in the URI map.\n\n  Own Id: OTP-19266 Aux Id: ERIERL-1127, [PR-8890]\n\n- Fixed spec for `json:format/3`.\n\n  Own Id: OTP-19286 Aux Id: [GH-8880], [PR-8914]\n\n[PR-8890]: https://github.com/erlang/otp/pull/8890\n[GH-8880]: https://github.com/erlang/otp/issues/8880\n[PR-8914]: https://github.com/erlang/otp/pull/8914","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 6.1.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Remove whitespace stripping of returned binaries in `json:decode/3`.\n\n  Own Id: OTP-19227 Aux Id: ERIERL-1130, [PR-8809]\n\n- Fix `zip:unzip/2` to not crash when extracting zip files with garbage in the Zip64 extra header. This bug was introduced in Erlang 27.1 and has so far only been seen on some archives creates by MS Excel.\n\n  Own Id: OTP-19241 Aux Id: [PR-8836]\n\n- With this change, shutdown procedure handles a race condition between supervisor executing a shutdown and child process termination from other reason.\n\n  Own Id: OTP-19256 Aux Id: [PR-8780]\n\n[PR-8809]: https://github.com/erlang/otp/pull/8809\n[PR-8836]: https://github.com/erlang/otp/pull/8836\n[PR-8780]: https://github.com/erlang/otp/pull/8780","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 6.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The help printout for incorrect `t:io:format/0` strings now handles the `k` modifier correctly.\n\n  Own Id: OTP-19146 Aux Id: [PR-8611], [GH-8568]\n\n- Fixed a bug that caused the shell completion to crash when keyword and tuple appeared on the same line.\n\n  Own Id: OTP-19157 Aux Id: [PR-8638]\n\n- Due to PR-7419/OTP-18671, the cached internal value of the `callback_mode` started leaking out to `logger` reports, which could cause `logger` handlers to crash.  This has now been fixed to show the value that was set, as before caching.\n\n  Own Id: OTP-19164 Aux Id: [GH-8605], [PR-7419], OTP-18671\n\n- Fixed an emulator crash relating to compressed ETS tables.\n\n  Own Id: OTP-19176 Aux Id: [PR-8683]\n\n- The error description for `maps:update/3` will no longer insist that the third argument is not a map when a key could not be found\n\n  Own Id: OTP-19189\n\n- Multiple issues have been corrected in the markdown parser that creates documentation for the shell. \n  \n  The parser was incorrectly parsing formatted markdown (either bold or italics) within parenthesis. This used to not be shown correctly in the shell documentation `(_Option._)`, which was displayed verbatim. This fix makes `Option.` to appear in italics.\n  \n  The markdown parser is also used in the creation of other documentation formats, so this was a bug that affected other generated documentation formats.\n\n  Own Id: OTP-19200 Aux Id: [GH-8738], [PR-8739]\n\n- Fixed category for some codepoint ranges in `unicode_util`.\n\n  Own Id: OTP-19210 Aux Id: [GH-8748]\n\n- Fixed `m:argparse` to print sub-commands help when available.\n\n  Own Id: OTP-19222 Aux Id: [PR-8777]\n\n[PR-8611]: https://github.com/erlang/otp/pull/8611\n[GH-8568]: https://github.com/erlang/otp/issues/8568\n[PR-8638]: https://github.com/erlang/otp/pull/8638\n[GH-8605]: https://github.com/erlang/otp/issues/8605\n[PR-7419]: https://github.com/erlang/otp/pull/7419\n[PR-8683]: https://github.com/erlang/otp/pull/8683\n[GH-8738]: https://github.com/erlang/otp/issues/8738\n[PR-8739]: https://github.com/erlang/otp/pull/8739\n[GH-8748]: https://github.com/erlang/otp/issues/8748\n[PR-8777]: https://github.com/erlang/otp/pull/8777","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Class annotation to HTML from fenced blocks have been added.\n\n  Own Id: OTP-19105 Aux Id: [PR-8499]\n\n- Added JSON formatting functions for indented output.\n\n  Own Id: OTP-19112\n\n- Improved illegal pattern error for accidental map associations.\n\n  Own Id: OTP-19128 Aux Id: [PR-8555]\n\n- Progress reports for a dynamically started supervisor will now be logged at debug level.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-19202 Aux Id: [PR-8261], [GH-8715], [PR-8741]\n\n- The `m:zip` module has been updated with support for:\n  \n  * zip64 archives - Archives larger than 4GB or with more than 2^32 entries.\n  * extended timestamps - Higher resolution and in UTC.\n  * UID/GID - Save and extract the original UID/GID.\n  * Fixes so that permission mode attributes are correctly read and set for files in archives.\n  * `zip:list_dir/2` now also returns directories, not only files. (You can disable this behaviour by using the option `skip_directories`).\n  \n  Various bugs in the original implementation have also been fixed, such as:\n  \n  * Correctly encode and decode the DOS timestamps for entries within an archive (that is the non-extended timestamp).\n  * Fix DOS timestamps to be set to localtime instead of UTC (use extended timestamps for UTC timestamps).\n  * Use the unix file attributes read from disk when creating archives instead of setting everything to 644.\n\n  Own Id: OTP-19214 Aux Id: [PR-8765]\n\n[PR-8499]: https://github.com/erlang/otp/pull/8499\n[PR-8555]: https://github.com/erlang/otp/pull/8555\n[PR-8261]: https://github.com/erlang/otp/pull/8261\n[GH-8715]: https://github.com/erlang/otp/issues/8715\n[PR-8741]: https://github.com/erlang/otp/pull/8741\n[PR-8765]: https://github.com/erlang/otp/pull/8765","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 6.0.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix so that missing `-doc({file, File})` files only result in a warning and not an error.\n\n  Own Id: OTP-19099 Aux Id: [PR-8542]\n\n- Fixed `m:json` bugs, `json:encode_key_value_list/2` did not generate arrays and `json:decode/3` did not invoke the user callback for `0`.\n\n  Own Id: OTP-19106 Aux Id: [PR-8581], [GH-8580], [PR-8519]\n\n[PR-8542]: https://github.com/erlang/otp/pull/8542\n[PR-8581]: https://github.com/erlang/otp/pull/8581\n[GH-8580]: https://github.com/erlang/otp/issues/8580\n[PR-8519]: https://github.com/erlang/otp/pull/8519","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 6.0 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-6-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The specs in module `m:binary` has been updated to reflect what is allowed by the documentation.\n\n  Own Id: OTP-18684 Aux Id: [PR-7481]\n\n- Several functions in the `m:binary` module would accept arguments of the wrong type under certain circumstances. In this release, they now raise an exception when incorrect types are given.\n  \n  The following functions would accept an invalid pattern if the subject binary was empty or if the `{scope,{0,0}}` option was given:\n  [`binary:match/2,3`](`binary:match/3`),\n  [`binary:matches/2,3`](`binary:matches/2`),\n  [`binary:replace/3,4`](`binary:replace/3`), and\n  [`binary:split/2,3`](`binary:split/2`)\n  \n  The call `binary:copy(<<1:1>>, 0)` would return an empty binary instead of raising an exception. Similarly, calls to [`binary:part/2,3`](`binary:part/2`) attempting to extract 0 bytes at position 0 of a bitstring would return an empty binary instead of raising an exception.\n\n  Own Id: OTP-18743 Aux Id: [PR-7607], [PR-7628]\n\n- The documentation for the preprocessor now mentions that `defined(Name)` can be called in the condition for an `-if` or `-elif` directive to test whether `Name` is the name of a defined macro. (This feature was implemented in OTP 21.)\n  \n  If a function call in an `-if` or `-elif` with a name that is not the name of a guard BIF, there would not be a compilation error, but would instead cause the lines following the directive to be skipped. This has now been changed to be a compilation error.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-18784 Aux Id: [GH-7706], [PR-7726]\n\n- `get_until` requests using the I/O protocol now correctly return a binary or list when `eof` is the last item returned by the callback.\n\n  Own Id: OTP-18930 Aux Id: [PR-7993], [GH-4992]\n\n- The error handling the `simple_one_for_one` supervisor has been enhanced. A transient child returning `ignore` will no longer cause a crash.\n  \n  Also, automatic shutdown has been disabled because it does not make sense for this supervisor type. That is was allowed is considered a bug. Therefore, we don't consider this an incompatible change.\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-19029 Aux Id: [PR-8230]\n\n- Fix shell expansion to not crash when expanding a map with non-atom keys and to not list zero arity functions when an argument has been given.\n\n  Own Id: OTP-19073 Aux Id: [PR-8375], [GH-8366], [GH-8365], [GH-8364]\n\n[PR-7481]: https://github.com/erlang/otp/pull/7481\n[PR-7607]: https://github.com/erlang/otp/pull/7607\n[PR-7628]: https://github.com/erlang/otp/pull/7628\n[GH-7706]: https://github.com/erlang/otp/issues/7706\n[PR-7726]: https://github.com/erlang/otp/pull/7726\n[PR-7993]: https://github.com/erlang/otp/pull/7993\n[GH-4992]: https://github.com/erlang/otp/issues/4992\n[PR-8230]: https://github.com/erlang/otp/pull/8230\n[PR-8375]: https://github.com/erlang/otp/pull/8375\n[GH-8366]: https://github.com/erlang/otp/issues/8366\n[GH-8365]: https://github.com/erlang/otp/issues/8365\n[GH-8364]: https://github.com/erlang/otp/issues/8364","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The functions [`is_equal/2`](`sets:is_equal/2`), [`map/2`](`sets:map/2`), and [`filtermap/2`](`sets:filtermap/2`) have been added to the modules `m:sets`, `m:ordsets`, and `m:gb_sets`.\n\n  Own Id: OTP-18622 Aux Id: [PR-7183], [PR-7232]\n\n- The compiler now emits nicer error message for function head mismatches.\n  For example, given:\n  \n  ```erlang\n  a() -> ok;\n  a(_) -> error.\n  ```\n  \n  Erlang/OTP 26 and earlier would emit a diagnostic similar to:\n  \n  ```text\n  t.erl:6:1: head mismatch\n  %    6| a(_) -> error.\n  %     | ^\n  ```\n  \n  while in Erlang/OTP 27 the diagnostic is similar to:\n  \n  ```text\n  t.erl:6:1: head mismatch: function a with arities 0 and 1 is regarded as two distinct functions. Is the number of arguments incorrect or is the semicolon in a/0 unwanted?\n  %    6| a(_) -> error.\n  %     | ^\n  ```\n\n  Own Id: OTP-18648 Aux Id: [PR-7383]\n\n- [`zip:create/2,3`](`zip:create/2`) will now tolerate POSIX timestamps in the provided `file_info` records.\n\n  Own Id: OTP-18668\n\n- The callback function `c:gen_statem:handle_event/4` has been cached in the `gen_statem` engine to optimize callback call speed.\n\n  Own Id: OTP-18671 Aux Id: [PR-7419]\n\n- The type `beam_lib:beam/0` is now exported.\n\n  Own Id: OTP-18716 Aux Id: [PR-7534]\n\n- The documentation for the `m:binary` module has been improved.\n\n  Own Id: OTP-18741 Aux Id: [PR-7585]\n\n- [`binary:replace/3,4`](`binary:replace/3`) now supports using a fun for supplying the replacement binary.\n\n  Own Id: OTP-18742 Aux Id: [PR-7590]\n\n- Triple-Quoted Strings has been implemented as per [EEP 64](https://www.erlang.org/eeps/eep-0064). See [String](`e:system:data_types.md#string`) in the Reference Manual.\n  \n  Example:\n  \n  ```erlang\n  1> \"\"\"\n     a\n     b\n     c\n     \"\"\".\n  \"a\\nb\\nc\"\n  ```\n  \n  Adjacent string literals without intervening white space is now a syntax error, to avoid possible confusion with triple-quoted strings. For example:\n  \n  ```erlang\n  1> \"abc\"\"xyz\".\n  \"xyz\".\n  * 1:6: adjacent string literals without intervening white space\n  ```\n\n  *** POTENTIAL INCOMPATIBILITY ***\n\n  Own Id: OTP-18750 Aux Id: OTP-18746, [PR-7313], [PR-7451]\n\n- The new function `proc_lib:set_label/1` can be used to add a descriptive term to any process that does not have a registered name. The name will be shown by tools such as `\\c:i/0`, `m:observer`, and it will be included in crash reports produced by processes using `m:gen_server`, `m:gen_statem`, `m:gen_event`, and `m:gen_fsm`.\n  \n  The label for a process can be retrieved by calling `proc_lib:get_label/1`.\n  \n  Note that those functions work on any process, not only processes that use `m:proc_lib`.\n  \n  Example:\n  \n  ```text\n  1> self().\n  <0.90.0>\n  2> proc_lib:set_label(my_label).\n  ok\n  3> i().\n      .\n      .\n      .\n  <0.90.0>              erlang:apply/2                        2586    75011    0\n  my_label              c:pinfo/2                               51\n  4> proc_lib:get_label(self()).\n  my_label\n  ```\n\n  Own Id: OTP-18789 Aux Id: [PR-7720], [PR-8003]\n\n- `-callback` attributes has been added to modules `m:sys` and `m:erl_error`.\n\n  Own Id: OTP-18793 Aux Id: [PR-7703]\n\n- Several new functions that accept funs have been added to module `m:timer`.\n  \n  Functions [`apply_after/2`](`timer:apply_after/2`), [`apply_interval/2`](`timer:apply_interval/2`), and [`apply_repeatedly/2`](`apply_repeatedly/2`) accept a nullary fun as the second argument, while  functions [`apply_after/3`](`timer:apply_after/3`), [`apply_interval/3`](`timer:apply_interval/3`), and [`apply_repeatedly/3`](`apply_repeatedly/3`) accept an n-ary fun as the second and a list of n arguments for the fun as the third argument.\n\n  Own Id: OTP-18808 Aux Id: [PR-7649]\n\n- Sigils on string literals have been implemented as per [EEP 66](https://www.erlang.org/eeps/eep-0066), that is: binary and string sigils in verbatim and escape characters variants, as well as a default (vanilla) Sigil.  All for ordinary strings and for triple-quoted strings (EEP 64). See [Sigils in the Reference Manual](`e:system:data_types.md#sigil`).\n  \n  Examples:\n  \n  ```erlang\n  1> ~\"Björn\".\n  <<\"Björn\"/utf8>>\n  2> ~b\"Björn\".\n  <<\"Björn\"/utf8>>\n  3> ~S\"\\s*(\\w+)\".\n  \"\\\\s*(\\\\w+)\"\n  4> ~B\"\\s*(\\w+)\".\n  <<\"\\\\s*(\\\\w+)\">>\n  ```\n\n  Own Id: OTP-18825 Aux Id: OTP-18750, [PR-7684]\n\n- Functions `shell:default_multiline_prompt/1`, `shell:inverted_space_prompt/1`, and \n  `shell:prompt_width/1` have been exported to help with custom prompt implementations.\n\n  Own Id: OTP-18834 Aux Id: [PR-7675], [PR-7816]\n\n- The shell now pages long output from the documentation help command ([`h(Module)`](`c:h/1`)), auto completions and the search command.\n\n  Own Id: OTP-18846 Aux Id: [PR-7845]\n\n- The `M-h` hotkey (Alt/Option-h) now outputs help for the module or function directly before the cursor.\n\n  Own Id: OTP-18847 Aux Id: [PR-7846]\n\n- Added support for adding a custom code formatter that formats your multi-line shell commands in your preferred formatting on submission. See `shell:format_shell_func/` and `shell:erl_pp_format_func/1`.\n\n  Own Id: OTP-18848 Aux Id: [PR-7847]\n\n- Added shell functions for viewing, forgetting and saving locally defined functions, types and records.\n\n  Own Id: OTP-18852 Aux Id: [PR-7844]\n\n- Added `string:jaro_similarity/2`, which can be used to calculate the similarity between two strings.\n\n  Own Id: OTP-18865 Aux Id: [PR-7879]\n\n- The new function `ets:update_element/4` is similar to `ets:update_element/3`, but takes a default tuple as the fourth argument, which will be inserted if no previous record with that key exists.\n\n  Own Id: OTP-18870 Aux Id: [PR-7857]\n\n- Added functions to retrieve the next higher or lower key/element from `m:gb_trees` and `m:gb_sets`, as well as returning iterators that start at given keys/elements.\n\n  Own Id: OTP-18874 Aux Id: [PR-7745]\n\n- When the shell built-in function [`c/1,2`][c12] is used to re-compile a module, the current working directory of the original compilation is now added to the include path.\n  \n  [c12]: `\\c:c/1`\n\n  Own Id: OTP-18908 Aux Id: [PR-7957]\n\n- The `timer` module now uses a private table for its internal state, slightly improving its performance.\n\n  Own Id: OTP-18914 Aux Id: [PR-7973]\n\n- [EEP-59 - Documentation Attributes](https://www.erlang.org/eeps/eep-0059) has been implemented.\n  \n  Documentation attributes can be used to document functions, types, callbacks, and modules.\n  The keyword `-moduledoc \"Documentation here\".` is used to document modules, while `-doc \"Documentation here\".` can be used on top of functions, types, and callbacks to document them, respectively.\n  \n  * Types, callbacks, and function documentation can be set to `hidden` either via `-doc false` or `-doc hidden`. When documentation attributes mark a type as hidden, they will not be part of the documentation.\n  \n  * The documentation from `moduledoc` and `doc` gets added by default to the binary beam file, following the format of [EEP-48](https://www.erlang.org/eeps/eep-0048).\n  \n  * Using the compiler flag `warn_missing_doc` will raise a warning when\n  `-doc` attributes are missing in exported functions, types, and callbacks.\n  \n  * Using the compiler flag `warn_missing_spec_documented` will raise a warning when\n  spec attributes are missing in documented functions, types, and callbacks.\n  \n  * `moduledoc`s and `doc`s may refer to external files to be embedded, such as `-doc {file, \"README.md\"}.`, which refers to the file `README.md` found in the current working directory.\n  \n  * The compiler warns about exported functions whose specs refer to hidden types. Thus, there will be warnings when a hidden type (meaning, the type is not part of the documentation) gets used in an exported function.\n\n  Own Id: OTP-18916 Aux Id: [PR-7936]\n\n- New `m:ets` functions `ets:first_lookup/1`, `ets:next_lookup/2`, `ets:prev_lookup/2` and `ets:last_lookup/1`. Example: `ets:next_lookup/1` is equivalent to `ets:next/2` followed by `ets:lookup/2` with the next key. The new combined functions are more efficient and with guaranteed atomicity.\n\n  Own Id: OTP-18923 Aux Id: [PR-6791]\n\n- The `maybe` expression is now enabled by default.\n  \n  To use `maybe` as an atom, it needs to be single-quoted. Alternatively, the `maybe` expression can be disabled by disabling the `maybe_expr` feature. That can be done by placing the following the line at the beginning of an Erlang source file:\n  \n  ```erlang\n  -feature(maybe_expr, disable).\n  ```\n  \n  Another way to disable the `maybe_expr` feature is by passing the `-disable-feature` option to `erlc`:\n  \n  ```text\n  erlc -disable-feature maybe_expr some_file.erl\n  ```\n\n  Own Id: OTP-18944 Aux Id: [PR-8067]\n\n- The compiler will now raise a warning when updating record/map literals. As an example, consider this module:\n  \n  ```erlang\n  -module(t).\n  -export([f/0]).\n  -record(r, {a,b,c}).\n  \n  f() ->\n      #r{a=1}#r{b=2}.\n  ```\n  \n  The compiler raises the following warning:\n  \n  ```text\n  1> c(t).\n  t.erl:6:12: Warning: expression updates a literal\n  %    6|     #r{a=1}#r{b=2}.\n  %     |            ^\n  ```\n\n  Own Id: OTP-18951 Aux Id: [PR-8069]\n\n- The documentation has been migrated to use Markdown and ExDoc.\n\n  Own Id: OTP-18955 Aux Id: [PR-8026]\n\n- Optimized `ets:foldl` and `ets:foldr` to use new `ets:next_lookup`. Also made them immune against table renaming.\n\n  Own Id: OTP-18993 Aux Id: [PR-8048]\n\n- Windows now supports all functions in `m:math`.\n\n  Own Id: OTP-19001 Aux Id: [PR-8164]\n\n- `m:erl_lint` (and by extension the [`compiler`](`m:compile`)) will now warn for code using deprecated callbacks.\n  \n  The only callback currenly deprecated is `format_status/2` in [`gen_server`](`c:gen_server:format_status/2`), [`gen_event`](`c:gen_event:format_status/2`) and [`gen_statem`](`c:gen_server:format_status/2`).\n  \n  You can use `nowarn_deprecated_callback` to silence the warning.\n\n  Own Id: OTP-19010 Aux Id: [PR-8205]\n\n- There is a new module [`json`](`m:json`) for encoding and decoding [JSON](https://en.wikipedia.org/wiki/JSON).\n  \n  Both encoding and decoding can be customized. Decoding can be done in a SAX-like fashion and handle multiple documents and streams of data.\n\n  Own Id: OTP-19020 Aux Id: [PR-8111]\n\n[PR-7183]: https://github.com/erlang/otp/pull/7183\n[PR-7232]: https://github.com/erlang/otp/pull/7232\n[PR-7383]: https://github.com/erlang/otp/pull/7383\n[PR-7419]: https://github.com/erlang/otp/pull/7419\n[PR-7534]: https://github.com/erlang/otp/pull/7534\n[PR-7585]: https://github.com/erlang/otp/pull/7585\n[PR-7590]: https://github.com/erlang/otp/pull/7590\n[PR-7313]: https://github.com/erlang/otp/pull/7313\n[PR-7451]: https://github.com/erlang/otp/pull/7451\n[PR-7720]: https://github.com/erlang/otp/pull/7720\n[PR-8003]: https://github.com/erlang/otp/pull/8003\n[PR-7703]: https://github.com/erlang/otp/pull/7703\n[PR-7649]: https://github.com/erlang/otp/pull/7649\n[PR-7684]: https://github.com/erlang/otp/pull/7684\n[PR-7675]: https://github.com/erlang/otp/pull/7675\n[PR-7816]: https://github.com/erlang/otp/pull/7816\n[PR-7845]: https://github.com/erlang/otp/pull/7845\n[PR-7846]: https://github.com/erlang/otp/pull/7846\n[PR-7847]: https://github.com/erlang/otp/pull/7847\n[PR-7844]: https://github.com/erlang/otp/pull/7844\n[PR-7879]: https://github.com/erlang/otp/pull/7879\n[PR-7857]: https://github.com/erlang/otp/pull/7857\n[PR-7745]: https://github.com/erlang/otp/pull/7745\n[PR-7957]: https://github.com/erlang/otp/pull/7957\n[PR-7973]: https://github.com/erlang/otp/pull/7973\n[PR-7936]: https://github.com/erlang/otp/pull/7936\n[PR-6791]: https://github.com/erlang/otp/pull/6791\n[PR-8067]: https://github.com/erlang/otp/pull/8067\n[PR-8069]: https://github.com/erlang/otp/pull/8069\n[PR-8026]: https://github.com/erlang/otp/pull/8026\n[PR-8048]: https://github.com/erlang/otp/pull/8048\n[PR-8164]: https://github.com/erlang/otp/pull/8164\n[PR-8205]: https://github.com/erlang/otp/pull/8205\n[PR-8111]: https://github.com/erlang/otp/pull/8111","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 5.2.3.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-2-3-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* Fixed an error in uri_string:percent_decode spec\n\n  Own Id: OTP-19380 Aux Id: GH-8755","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.2.3.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-2-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* With this change, shutdown procedure handles a race condition between supervisor executing a shutdown and child process termination from other reason.\n\n  Own Id: OTP-19256 Aux Id: PR-8780\n* With this change, uri_string:normalize assumes empty path (do not crash) when no path is provided in the URI map.\n\n  Own Id: OTP-19266 Aux Id: ERIERL-1127, PR-8890","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.2.3.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-2-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* Fixed a bug that caused the shell completion to crash when keyword and tuple appeared on the same line.\n\n  Own Id: OTP-19157 Aux Id: PR-8638","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.2.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* Fix shell expansion of `-type a() :: $a.` in the erlang shell.\n\n  Own Id: OTP-19062\n* Fix the shell Job Control Mode to not crash when typing `TAB` or `CTRL+R`.\n\n  Own Id: OTP-19072 Aux Id: PR-8391","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.2.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* Attempting to use the `maybe` construct in a macro argument could crash the compiler.\n\n  Own Id: OTP-19031 Aux Id: GH-8268","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* The help texts shown by `argparse` will now display sub-command arguments in the correct order.\n\n  Own Id: OTP-18900 Aux Id: PR-7945, GH-7934\n* Clarified the argparse documentation regarding the user-defined help template.\n\n  Own Id: OTP-18937\n* Fix shell expansion to not crash when expanding invalid using invalid atoms.\n\n  Own Id: OTP-18953 Aux Id: GH-8016 PR-8075","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Make `shell_docs` correctly trim the newline at the end of code blocks.\n\n  Own Id: OTP-18777 Aux Id: PR-7663\n\n- Replaced unintentional Erlang Public License 1.1 headers in some files with\n  the intended Apache License 2.0 header.\n\n  Own Id: OTP-18815 Aux Id: PR-7780\n\n- Fixed a bug where autocompletion could crash the shell when trying to expand a\n  nested tuple.\n\n  Own Id: OTP-18822 Aux Id: PR-7796\n\n- Removed auto closing feature, in autocompletion, for function arguments,\n  tuples, records and maps, since this could interfere with autocompletion of\n  atoms.\n\n  Own Id: OTP-18823\n\n- Fixed a bug where autocompletion string formatting would remove suggestions\n  that had the same name but different case.\n\n  Own Id: OTP-18824\n\n- Fix so that ctrl+h, ctrl+backspace in the shell only removes one character\n  instead of a whole word.\n\n  Own Id: OTP-18826 Aux Id: PR-7797\n\n- Fix so that its possible to override the default keyboard shortcuts for the\n  shell.\n\n  Own Id: OTP-18827 Aux Id: PR-7797\n\n- Allow shell local func v(), in a restricted shell\n\n  Own Id: OTP-18828 Aux Id: PR-7799\n\n- Report syntax error when writing an invalid attribute like '1> -hej.'\n\n  Own Id: OTP-18829 Aux Id: PR-7799\n\n- When attempting to match part of a record in the key of a map generator, the\n  entire record would be matched.\n\n  Own Id: OTP-18866 Aux Id: GH-7875, PR-7878","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The warning for accidental use of a future triple-quoted string delimiter has\n  been upgraded to instead warn for adjacent strings without intervening white\n  space, which effectively is the same at a string start, but also covers the\n  same situation at a string end.\n\n  Own Id: OTP-18821 Aux Id: OTP-18746\n\n- The removal of the deprecated `slave` module, originally planned for OTP 27,\n  has been postponed to OTP 29.\n\n  Own Id: OTP-18840 Aux Id: PR-7629\n\n- Guards have been added to `gen_*:start*` API functions to catch bad arguments\n  earlier. Before this change, in some cases, a bad argument could tag along and\n  cause the server to fail later, right after start.\n\n  Own Id: OTP-18857 Aux Id: GH-7685","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 5.1.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-1-1"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Garbage collect the shell process when reducing the amount of saved history\n  and results.\n\n  Own Id: OTP-18773 Aux Id: PR-7691","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 5.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The compiler could run forever when compiling a call to\n  [`is_record/3`](`is_record/3`) with a huge positive tuple size. The call\n  [`is_record(A, a, 0)`](`is_record/3`) would crash the compiler when used in a\n  function body. When used in a guard the compiler would emit incorrect code\n  that would accept `{a>` as a record.\n\n  Own Id: OTP-18605 Aux Id: GH-7298, GH-7317\n\n- Fix bug in `ets:tab2file` that could make it fail if another Erlang process\n  created the same file at the same time.\n\n  Own Id: OTP-18614 Aux Id: GH-7162, PR-7237\n\n- An `{else_clause,Value}` exception will now be reported nicely in the shell.\n\n  Own Id: OTP-18616 Aux Id: GH-7258\n\n- Correct return value for error case, so that it matches the documented and\n  intended return value \\{error, \\{already_started, pid()\\} when local\n  registered names are used.\n\n  Own Id: OTP-18627 Aux Id: PR-7072\n\n- `sys:get_state/1,2` and `sys:replace_state/2,3` has been corrected to handle a\n  state named `error` as a state name, not as a failed system callback.\n\n  For the standard server behaviours this was an issue only for `gen_statem`\n  (and `gen_fsm`) when the state name was `error`, and for `gen_server` if the\n  complete state was `{error,_}`.\n\n  Own Id: OTP-18633\n\n- Multiple problems were fixed in `filelib:safe_relative_path/2`. If its second\n  argument was a path that contained symbolic links, an incorrect result patch\n  could be returned. Also, paths were sometimes falsely considered unsafe.\n\n  Own Id: OTP-18655 Aux Id: GH-6460, PR-7208\n\n- Fix deadlock when `erl.exe` is used as part of a pipe on Windows and trying to\n  set the encoding of the `standard_io` device.\n\n  Own Id: OTP-18675 Aux Id: PR-7473 GH-7459\n\n- Expanded the documentation about how to use the `standard_io`,\n  `standard_error` and `user` I/O devices.\n\n  Added the types [`io:standard_io/0`](`t:io:standard_io/0`),\n  `io:standard:error/0` and [`io:user/0`](`t:io:user/0`).\n\n  Own Id: OTP-18676 Aux Id: PR-7473 GH-7459\n\n- Fix `h/2,3` to properly render multi-clause documentation.\n\n  Own Id: OTP-18683 Aux Id: PR-7502\n\n- Timers created by `timer:apply_after/4`, `apply_interval/4`, and\n  `apply_repeatedly/4` would silently fail to do the apply if it was not\n  possible to spawn a process when the timer expired. This has now been\n  corrected, and if the spawn fails, the system will be taken down producing a\n  crash dump.\n\n  Own Id: OTP-18759 Aux Id: GH-7606\n\n- When an Erlang source file lacked a module definition, there would be a\n  spurious \"module name must not be empty\" diagnostic for each spec in the file.\n\n  Own Id: OTP-18763 Aux Id: GH-7655","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The argument descriptions for option types in `argparse` have been made less\n  ambiguous.\n\n  Own Id: OTP-18679 Aux Id: ERIERL-965\n\n- Clarified the documentation of normal shutdown reason on `gen_server:call/2,3`\n\n  Own Id: OTP-18690 Aux Id: PR-7511, GH-7510\n\n- Pattern matching and equivalence (`=:=`, `=/=`) comparisons on `0.0` will now\n  raise a warning, as it will no longer be considered equivalent to `-0.0` in\n  OTP 27.\n\n  If a match on `0.0` specifically is desired (distinct from `-0.0`), the\n  warning can be suppressed by writing `+0.0` instead.\n\n  The arithmetic comparison operators are unaffected, including arithmetic\n  equality (`==`).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18696\n\n- The semantics of the `gen_{server,statem,event}` behaviour's synchronous start\n  behaviour introduced in OTP-26.0 with OTP-18471, has been clarified in the\n  documentation.\n\n  Own Id: OTP-18705 Aux Id: GH-7524, OTP-18471, GH-6339, PR-6843\n\n- Added functionality to set a custom multiline prompt.\n\n  Own Id: OTP-18736 Aux Id: PR-7564\n\n- A warning for (accidental use of) Triple-Quoted Strings has been implemented\n  as per\n  [EEP 64](https://github.com/erlang/eep/blob/master/eeps/eep-0064.md#backwards-incompatibility).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18746 Aux Id: PR-7313, PR-7456\n\n- The keyboard shortcuts for the shell are now configurable.\n\n  Own Id: OTP-18754 Aux Id: PR-7604 PR-7647","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 5.0.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-0-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix bug where when you entered Alt+Enter in the terminal, the cursor would\n  move to the last line, instead of moving to the next line.\n\n  Own Id: OTP-18580 Aux Id: PR-7242\n\n- Fix eof handling when reading from stdin when erlang is started using\n  `-noshell`.\n\n  Own Id: OTP-18640 Aux Id: PR-7384 GH-7368 GH-7286 GH-6881\n\n- Fixed problem where output would disappear if it was received after a prompt\n  was written in the shell.\n\n  Own Id: OTP-18652 Aux Id: PR-7242\n\n- The following functions are now much faster when given a long list or binary:\n\n  - erlang:list_to_integer/1\n  - erlang:binary_to_integer/1\n  - erlang:binary_to_integer/2\n  - erlang:list_to_integer/2\n  - string:to_integer/1\n\n  Own Id: OTP-18659 Aux Id: PR-7426","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.0.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The POSIX error `exdev` was sometimes incorrectly described as \"cross domain\n  link\" in some error messages.\n\n  Own Id: OTP-18578 Aux Id: GH-7213","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 5.0 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-5-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- All process calls in `dets` have been updated to use the receive queue\n  optimizations.\n\n  Own Id: OTP-18275 Aux Id: PR-6045\n\n- `proc_lib:start*/*` has become synchronous when the started process fails.\n  This requires that a failing process use a new function\n  `proc_lib:init_fail/2,3`, or exits, to indicate failure. All OTP behaviours\n  have been fixed to do this.\n\n  All these start functions now consume the `'EXIT'` message from a process link\n  for all error returns. Previously it was only the `start_link/*` functions\n  that did this, and only when the started function exited, not when it used\n  `init_ack/1,2` or `init_fail/2,3` to create the return value.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18471 Aux Id: GH-6339, PR-6843\n\n- Fixed a bug where `file:read(standard_io, ...)` unexpectedly returned `eof` in\n  binary mode.\n\n  Own Id: OTP-18486 Aux Id: PR-6881\n\n- In the shell, `v(N)` would fail to retrieve the command if the command's\n  return value was `undefined`.\n\n  Own Id: OTP-18548 Aux Id: PR-6967","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The Erlang shell has been improved to support the following features:\n\n  - Auto-complete variables, record names, record field names, map keys,\n    function parameter types and filenames.\n  - Open external editor in the shell (with C-o) to edit the current expression\n    in an editor.\n  - Support defining records (with types), functions and function typespecs, and\n    custom types in the shell.\n  - Do not save pager commands, and input to io:getline in history.\n\n  Own Id: OTP-14835 Aux Id: PR-5924\n\n- Gen_server now caches external functions for use in handle_call, handle_cast\n  and handle_info.\n\n  Own Id: OTP-15597 Aux Id: PR-5831\n\n- The TTY/terminal subsystem has been rewritten by moving more code to Erlang\n  from the old linked-in driver and implementing all the I/O primitives needed\n  in a NIF instead.\n\n  On Unix platforms the user should not notice a lot of difference, besides\n  better handling of unicode characters and fixing of some long standing bugs.\n\n  Windows users will notice that erl.exe has the same functionality as a normal\n  Unix shell and that werl.exe has been removed and replaced with a symlink to\n  erl.exe. This makes the Windows Erlang terminal experience identical to that\n  of Unix.\n\n  The re-write brings with it a number of bug fixes and feature additions:\n\n  - The TTY is now reset when Erlang exits, fixing zsh to not break when\n    terminating an Erlang session.\n  - `standard_error` now uses the same unicode mode as `standard_io`.\n  - Hitting backspace when searching the shell history with an empty search\n    string no longer breaks the shell.\n  - Tab expansion now works on remote nodes started using the JCL interface.\n  - It is now possible to configure the shell slogan and the session slogans\n    (that is the texts that appear when you start an Erlang shell). See the\n    kernel documentation for more details.\n  - Added shell:start_interactive for starting the interactive shell from a\n    non-interactive Erlang session (for example an escript).\n  - On Windows, when starting in detached mode the standard handler are now set\n    to `nul` devices instead of being unset.\n  - Standard I/O now always defaults to `unicode` mode if supported. Previously\n    the default was `latin1` if the runtime system had been started with\n    `-oldshell` or `-noshell` (for example in an `escript`). To send raw bytes\n    over standard out, one now explicitly has to specify\n    `io:setopts(standard_io, [{encoding, latin1}]).`\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17932 Aux Id: PR-6144 GH-3150 GH-3390 GH-4343 GH-4225\n\n- Added the `zip:zip_get_crc32/2` function to retrieve the CRC32 checksum from\n  an opened ZIP archive.\n\n  Own Id: OTP-18159 Aux Id: PR-6904\n\n- Added the options `post_process_args` and `detached` to the `peer:start`\n  function.\n\n  Own Id: OTP-18176 Aux Id: PR-6118\n\n- The `re:replace/3,4` functions now accept a fun as the replacement argument.\n\n  Own Id: OTP-18221 Aux Id: PR-6197\n\n- The performance of the `base64` module has been significantly improved. For\n  example, on an x86_64 system with the JIT both encode and decode are more than\n  three times faster than in Erlang/OTP 25.\n\n  Own Id: OTP-18228 Aux Id: GH-5639\n\n- Improved implementation of `timer:apply_interval/4` reducing load on the timer\n  server, and introduction of the new function `timer:apply_repeatedly/4`.\n  `timer:apply_repeatedly/4` is similar to `timer:apply_interval/4`, but\n  `timer:apply_repeatedly/4` prevents parallel execution of triggered `apply`\n  operations which `timer:apply_interval/4` does not.\n\n  Own Id: OTP-18236 Aux Id: PR-6256\n\n- The `base64` module now supports encoding and decoding with an alternate URL\n  safe alphabet, and an option for accepting or adding missing `=` padding\n  characters.\n\n  Own Id: OTP-18247 Aux Id: PR-6280, PR-6711\n\n- Add `shell:whereis/0` which can be used to locate the current shell process.\n\n  Own Id: OTP-18272 Aux Id: PR-6279\n\n- The Erlang shell's auto-completion when typing `tab` has been changed to\n  happen after the editing current line instead of before it.\n\n  This behaviour can be configured using a the `shell_expand_location` STDLIB\n  configuration parameter.\n\n  Own Id: OTP-18278 Aux Id: PR-6260\n\n- New function `ets:lookup_element/4` with a `Default` argument returned if the\n  key did not exist in the table. The old `ets:lookup_element/3` raises a\n  `badarg` exception which can be both inconvenient and slower.\n\n  Own Id: OTP-18279 Aux Id: PR-6234\n\n- Typing `Ctrl+L` in a shell now clears the screen and redraws the current line\n  instead of only redrawing the current line. To only redraw the current line,\n  you must now type `Alt+L`. This brings the behaviour of `Ctrl+L` closer to how\n  bash and other shells work.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18285 Aux Id: PR-6262\n\n- `peer` nodes using `standard_io` connections now include standard error from\n  the node in the io stream from the started node.\n\n  Own Id: OTP-18287 Aux Id: PR-5955\n\n- A limitation in the binary syntax has been removed. It is now possible to\n  match binary patterns in parallel. Example: `< > = < > = Bin`\n\n  Own Id: OTP-18297 Aux Id: GH-6348\n\n- Improve type specification of `unicode:characters_to_list()`.\n\n  Own Id: OTP-18301 Aux Id: PR-6350\n\n- In the `lists` module, the `zip` family of functions now takes options to\n  allow handling lists of different lengths.\n\n  Own Id: OTP-18318 Aux Id: PR-6347\n\n- It is documented that `$\\^X` is the ASCII code for Control X, where X is an\n  uppercase or lowercase letter. However, this notation would work for any\n  character X, even then it didn't make sense.\n\n  In Erlang/OTP 26, it is now documented that the following characters are also\n  allowed to follow the `\\^` characters: `@`, `[`, `\\`, `]`, `^`, `_`, and `?`.\n  Attempt to use other characters will be rejected with a compiler error.\n\n  The value for `$\\^?` is now 127 (instead of 31 as in earlier releases).\n\n  Own Id: OTP-18337 Aux Id: GH-6477, PR-6503\n\n- The `binary:encode_hex/2` function has been added to allow the encoded\n  hexadecimal digits to be in either lower or upper case.\n\n  Own Id: OTP-18354 Aux Id: PR-6297\n\n- Variants of `timer:tc()` with user specified time unit have been introduced.\n\n  Own Id: OTP-18355 Aux Id: PR-6507\n\n- New function `math:tau/0`. Returns `2*math:pi()`.\n\n  Own Id: OTP-18361 Aux Id: PR-6536\n\n- The BIFs [`min/2`](`min/2`) and [`max/2`](`max/2`) are now allowed to be used\n  in guards and match specs.\n\n  Own Id: OTP-18367 Aux Id: GH-6544\n\n- Optimized `gen_server:multi_call()`.\n\n  Own Id: OTP-18385 Aux Id: PR-6698\n\n- Map comprehensions as suggested in EEP 58 has now been implemented.\n\n  Own Id: OTP-18413 Aux Id: EEP-58, PR-6727\n\n- Some map operations have been optimized by changing the internal sort order of\n  atom keys. This changes the (undocumented) order of how atom keys in small\n  maps are printed and returned by `maps:to_list/1` and `maps:next/1`. The new\n  order is unpredictable and may change between different invocations of the\n  Erlang VM.\n\n  For applications where order is important, there is a new function\n  `maps:iterator/2` for creating iterators that return the map elements in a\n  deterministic order. There are also new modifiers `k` and `K` for the format\n  string for [`io:format()`](`t:io:format/0`) to support printing map elements\n  ordered.\n\n  Own Id: OTP-18414 Aux Id: PR-6151\n\n- Make gen_server fail \"silently\" with a new return value for init/1.\n\n  Own Id: OTP-18423 Aux Id: https://github.com/erlang/backlog/issues/142\n\n- Improved the selective receive optimization, which can now be enabled for\n  references returned from other functions.\n\n  This greatly improves the performance of `gen_server:send_request/3`,\n  `gen_server:wait_response/2`, and similar functions.\n\n  Own Id: OTP-18431 Aux Id: PR-6739\n\n- It is no longer necessary to enable a feature in the runtime system in order\n  to load modules that are using it. It is sufficient to enable the feature in\n  the compiler when compiling it.\n\n  That means that to use feature `maybe_expr` in Erlang/OTP 26, it is sufficient\n  to enable it during compilation.\n\n  In Erlang/OTP 27, feature `maybe_expr` will be enabled by default, but it will\n  be possible to disable it.\n\n  Own Id: OTP-18445\n\n- Static supervisors are very idle processes after they have started so they\n  will now be hibernated after start to improve resource management.\n\n  Own Id: OTP-18474 Aux Id: PR-6895\n\n- Deprecates `dbg:stop_clear/0` because it is simply a function alias to\n  `dbg:stop/0`\n\n  Own Id: OTP-18478 Aux Id: GH-6903\n\n- Support has been added in `ms_transform` for the actions `caller_line/0`,\n  `current_stacktrace/0`, and `current_stacktrace/1`.\n\n  Own Id: OTP-18494 Aux Id: PR-6924\n\n- The family of enumeration functions in module `lists` has been extended with\n  `enumerate/3` that allows a step value to be supplied.\n\n  Own Id: OTP-18495 Aux Id: PR-6943\n\n- Update Unicode to version 15.0.0.\n\n  Own Id: OTP-18500\n\n- The regular expression library powering the `re` module is likely to be\n  changed in Erlang/OTP 27. See\n  [Upcoming Potential Incompatibilities](`e:general_info:upcoming_incompatibilities.md#new_re_engine`).\n\n  Own Id: OTP-18511 Aux Id: PR-7017\n\n- Improved the performance of `sets:subtract/2` when subtracting a small number\n  of elements.\n\n  Own Id: OTP-18515 Aux Id: GH-6990\n\n- The linter will no longer raise warnings for underspecified opaque types.\n\n  Own Id: OTP-18518 Aux Id: GH-7015\n\n- Added the new built-in type `t:dynamic/0` introduced in EEP-61, improving\n  support for gradual type checkers.\n\n  Own Id: OTP-18522\n\n- The by `gen_statem` previously used call proxy process that was used for\n  preventing late replies from reaching the client at timeout or connection loss\n  has been removed. It is no longer needed since _process aliases_ take care of\n  this, are used, and supported by all Erlang nodes that an OTP 26 Erlang node\n  can communicate with.\n\n  Own Id: OTP-18537 Aux Id: PR-7081\n\n- Added the `argparse` module for simplified argument handling in escripts and\n  similar.\n\n  Own Id: OTP-18558 Aux Id: PR-6852\n\n- Added support for multiple line expressions and navigation in the shell. Added\n  new keybindings:\n\n  - navigate up (ctrl+up)/(alt+up)\n  - navigate down (ctrl+down)/(alt+down)\n  - insert newline in middle of line (alt+enter)\n  - navigate top (alt+<)/(alt+shift+up)\n  - navigate bottom (alt+>)/(alt+shift+down)\n  - clear current expression (alt+c)\n  - cancel search (alt+c)\n  - opening editor on mac (option+o)/(alt+o)\n\n  Modifies the prompt for new lines to make it clearer that the prompt has\n  entered multi-line mode. Supports terminal with small window size, recommend\n  not go lower than 7 rows and 40 columns. Modifies the search prompt to support\n  multi-line statements. Redraw the prompt after continuing from JCL menu.\n\n  Own Id: OTP-18575 Aux Id: PR-7169","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 4.3.1.6 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3-1-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* Fixed an error in uri_string:percent_decode spec\n\n  Own Id: OTP-19380 Aux Id: GH-8755","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 4.3.1.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3-1-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* With this change, shutdown procedure handles a race condition between supervisor executing a shutdown and child process termination from other reason.\n\n  Own Id: OTP-19256 Aux Id: PR-8780\n* With this change, uri_string:normalize assumes empty path (do not crash) when no path is provided in the URI map.\n\n  Own Id: OTP-19266 Aux Id: ERIERL-1127, PR-8890","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 4.3.1.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3-1-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"* Attempting to use the `maybe` construct in a macro argument could crash the compiler.\n\n  Own Id: OTP-19031 Aux Id: GH-8268","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 4.3.1.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3-1-3"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Garbage collect the shell process when reducing the amount of saved history\n  and results.\n\n  Own Id: OTP-18773 Aux Id: PR-7691","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 4.3.1.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The following functions are now much faster when given a long list or binary:\n\n  - erlang:list_to_integer/1\n  - erlang:binary_to_integer/1\n  - erlang:binary_to_integer/2\n  - erlang:list_to_integer/2\n  - string:to_integer/1\n\n  Own Id: OTP-18659 Aux Id: PR-7426","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 4.3.1.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3-1-1"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Static supervisors are very idle processes after they have started so they\n  will now be hibernated after start to improve resource management.\n\n  Own Id: OTP-18556","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 4.3.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The type specs in the `erl_parse` module has been updated to include the\n  `maybe` construct and the `!` operator.\n\n  Own Id: OTP-18506 Aux Id: GH-6956","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 4.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed a bug that would cause analysis to crash.\n\n  Own Id: OTP-18372 Aux Id: GH-6580\n\n- Fixed a crash when formatting stack traces for error reports.\n\n  Own Id: OTP-18375 Aux Id: GH-6591\n\n- Instead of crashing, the [`list_to_integer/1`](`list_to_integer/1`) and\n  [`list_to_integer/2`](`list_to_integer/2`) BIFs now raise the `system_limit`\n  exception for overlong lists that can't be converted to integers. Similarly,\n  the `string:to_integer/1` BIF now returns `{error,system_limit}` for overlong\n  lists.\n\n  Own Id: OTP-18475 Aux Id: PR-6897","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Removal of non-necessary `undefined` types added to the state's `supervisor`\n  record.\n\n  Own Id: OTP-18393 Aux Id: PR-6666","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 4.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- `erl_tar` can now read gzip-compressed tar files that are padded. There is a\n  new option `compressed_one` for `file:open/2` that will read a single member\n  from a gzip file,\n\n  Own Id: OTP-18289 Aux Id: PR-6343\n\n- A concurrent call to `ets:rename` could cause `ets:delete_all_objects` to fail\n  halfway through with badarg.\n\n  Own Id: OTP-18292 Aux Id: PR-6366\n\n- It is not allowed to call functions from guards. The compiler failed to reject\n  a call in a guard when done by constructing a record with a default\n  initialization expression that called a function.\n\n  Own Id: OTP-18325 Aux Id: GH-6465, GH-6466\n\n- The compiler could crash when using a record with complex field initialization\n  expression as a filter in a list comprehension.\n\n  Own Id: OTP-18336 Aux Id: GH-6501, PR-6502\n\n- `unicode:characters_to_binary()` could build unnecessarily large call stack.\n\n  Own Id: OTP-18351 Aux Id: ERIERL-885, PR-6529","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Improve error message for ets:new/2 name clash. Say \"name already exists\"\n  instead of less specific \"invalid options\".\n\n  Own Id: OTP-18283 Aux Id: PR-6338","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 4.1.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- `m:peer` nodes failed to halt when the process supervising the control\n  connection crashed. When an alternative control connection was used, this\n  supervision process also quite frequently crashed when the `peer` node was\n  stopped by the node that started it which caused the `peer` node to linger\n  without ever halting.\n\n  Own Id: OTP-18249 Aux Id: PR-6301","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 4.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed inconsistency bugs in `m:global` due to `nodeup`/`nodedown` messages not\n  being delivered before/after traffic over connections. Also fixed various\n  other inconsistency bugs and deadlocks in both `m:global_group` and `global`.\n\n  As building blocks for these fixes, a new BIF `erlang:nodes/2` has been\n  introduced and `net_kernel:monitor_nodes/2` has been extended.\n\n  The [`-hidden`](`e:erts:erl_cmd.md#hidden`) and\n  [`-connect_all`](`e:erts:erl_cmd.md#connect_all`) command line arguments did\n  not work if multiple instances were present on the command line which has been\n  fixed. The new kernel parameter\n  [`connect_all`](`e:kernel:kernel_app.md#connect_all`) has also been introduced\n  in order to replace the `-connect_all` command line argument.\n\n  Own Id: OTP-17934 Aux Id: PR-6007\n\n- Fix the `public_key:ssh*` functions to be listed under the correct release in\n  the Removed Functionality User's Guide.\n\n  Own Id: OTP-18139 Aux Id: PR-6060\n\n- The type spec for `format_status/1` in `gen_statem`, `gen_server` and\n  `gen_event` has been corrected to state that the return value is of the same\n  type as the argument (instead of the same value as the argument).\n\n  Own Id: OTP-18142 Aux Id: PR-6078\n\n- If the `timer` server child spec was already present in `kernel_sup` but it\n  was not started, the `timer` server would fail to start with an\n  `{error, already_present}` error instead of restarting the server.\n\n  Own Id: OTP-18146 Aux Id: PR-5983\n\n- When changing callback module in `gen_statem` the state_enter calls flag from\n  the old module was used in for the first event in the new module, which could\n  confuse the new module and cause malfunction. This bug has been corrected.\n\n  With this change some `sys` debug message formats have been modified, which\n  can be a problem for debug code relying on the format.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18239","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- There is a new configure option, `--enable-deterministic-build`, which will\n  apply the `deterministic` compiler option when building Erlang/OTP. The\n  `deterministic` option has been improved to eliminate more sources of\n  non-determinism in several applications.\n\n  Own Id: OTP-18165 Aux Id: PR-5965\n\n- The `rfc339_to_system_time/1,2` functions now allows the minutes part to be\n  omitted from the time zone.\n\n  Own Id: OTP-18166 Aux Id: PR-6108\n\n- The `receive` statement in `gen_event` has been optimized to not use selective\n  receive (which was never needed, and could cause severe performance\n  degradation under heavy load).\n\n  Own Id: OTP-18194 Aux Id: PR-6199\n\n- Add new API function erl_features:configurable/0\n\n  Own Id: OTP-18199 Aux Id: PR-5790","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 4.0.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- In the initial release of Erlang/OTP 25, the expression bound to the `_`\n  pseudo-field in a record initialization would always be evaluated once, even\n  if all other fields in the record were explicitly initialized. That would\n  break the use case of binding the expression `error(...)` to `_` in order to\n  get an exception if not all fields were initialized.\n\n  The behavior of binding to `_` has been reverted to the pre-OTP 25 behavior,\n  that is, to not evaluate the expression if all fields have been bound to\n  explicit values.\n\n  Own Id: OTP-18110 Aux Id: GH-6000","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 4.0 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-4-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Improve the Erlang code linter's check of unused types.\n\n  Own Id: OTP-17370 Aux Id: GH-4784\n\n- Fix race condition in `proc_lib:stop/3` where the process is not stopped when\n  the timeout given is very short.\n\n  Own Id: OTP-17480 Aux Id: GH-4853 PR-4872\n\n- Maps are now fully supported in by `ms_transform`.\n\n  Own Id: OTP-17518 Aux Id: GH-4915\n\n- Fix gen_server:call with the first argument as self() to throw an error\n  instead of failing with a timeout.\n\n  The same fix has also been done for gen_statem:call/3, gen_event:sync_notify/2\n  and any other functionality relying on the internal gen:call/3 function.\n\n  A similar fix was also done when using io:format/2 and the current\n  group_leader was set to the current process.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17544 Aux Id: PR-5008\n\n- erl_pp printed unary - and + operators with a space between the operator and\n  the operand. This is fixed by not having any space in between.\n\n  Own Id: OTP-17566 Aux Id: PR-5095, GH-5093\n\n- Adjust uri_string:normalize behavior for URIs with undefined port (URI string\n  with a port colon but no port value or URI map with port => undefined).\n\n  Remove redundant normalization from http_request module.\n\n  Before this change, normalize would not remove port subcomponent in such cases\n  and could for example return \"http://localhost:\" URI.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17627\n\n- Fix reduction counting bug in `re:run` that caused the function to yield too\n  frequently when doing `global` matches.\n\n  Own Id: OTP-17661 Aux Id: PR-5165\n\n- Fix the memory value returned from `ets:info(Tid,memory)` when the\n  `read_concurrency` option is used.\n\n  Before this fix the memory used by the scheduler specific lock cache lines was\n  not counted towards the total. This caused the returned memory usage to be\n  very incorrect on systems with many schedulers for tables with man locks.\n\n  Own Id: OTP-17832 Aux Id: PR-5494\n\n- Avoid confusion by correcting the argument order in the gen_event crash log\n  printout.\n\n  Own Id: OTP-17878\n\n- Fixed `string:next_grapheme/1` to return an empty binary in the tail for\n  binary input for the last grapheme cluster.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18009 Aux Id: PR-5785\n\n- Fixed type specifications of the `supervisor:sup_name/0` and\n  [`supervisor:sup_ref/0`](`t:supervisor:sup_ref/0`) types.\n\n  Own Id: OTP-18034 Aux Id: PR-4661, GH-4622\n\n- If a default record field initialization (`_ = Expr`) was used even though all\n  records fields were explicitly initialized, `Expr` would not be evaluated.\n  That would not be a problem, except when `Expr` would bind a variable\n  subsequently used, in which case the compiler would crash.\n\n  As an example, if record `#r{}` is defined to have only one field `a`, the\n  following code would crash the compiler:\n\n  `#r{a=[],_=V=42}, V`\n\n  To fix that problem, the compiler will make sure that `Expr` is always\n  evaluated at least once. The compiler will now rewrite the example to\n  essentially:\n\n  `V=42, #r{a=[]}, V`\n\n  Own Id: OTP-18083","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Users can now configure ETS tables with the `{write_concurrency, auto}`\n  option. This option forces tables to automatically change the number of locks\n  that are used at run-time depending on how much concurrency is detected. The\n  `{decentralized_counters, true}` option is enabled by default when\n  `{write_concurrency, auto}` is active.\n\n  Benchmark results comparing this option with the other ETS optimization\n  options are available here:\n\n  https://erlang.org/bench/ets_bench_result_lock_config.html\n\n  Own Id: OTP-15991 Aux Id: PR-5208\n\n- The `format_status/2` callback for `gen_server`, `gen_statem` and `gen_event`\n  has been deprecated in favor of the new `format_status/1` callback.\n\n  The new callback adds the possibility to limit and change many more things\n  than the just the state, such as the last received message, the reason for\n  terminating and more events specific to each type of behavior. See the\n  respective modules documentation for more details.\n\n  Own Id: OTP-17351 Aux Id: GH-4673 PR-4952\n\n- The `timer` module has been modernized and made more efficient, which makes\n  the timer server less susceptible to being overloaded. The `timer:sleep/1`\n  function now accepts an arbitrarily large integer.\n\n  Own Id: OTP-17481 Aux Id: PR-4811\n\n- Add `lists:enumerate/[1,2]`.\n\n  Own Id: OTP-17523 Aux Id: PR-4928\n\n- The configuration files [`.erlang`](`e:erts:erl_cmd.md`),\n  [`.erlang.cookie`](`e:system:distributed.md`) and\n  [`.erlang.crypt`](`m:beam_lib#module-erlang-crypt`) can now be located in the XDG\n  Config Home directory.\n\n  See the documentation for each file and `filename:basedir/2` for more details.\n\n  Own Id: OTP-17554 Aux Id: GH-5016 PR-5408 OTP-17821\n\n- Support `native` time unit in `calendar` functions `system_time_to_rfc3339/2`\n  and `rfc3339_to_system_time`.\n\n  Own Id: OTP-17592 Aux Id: ERIERL-663, PR-5243\n\n- The tagged tuple tests and fun-calls have been optimized and are now a little\n  bit cheaper than previously.\n\n  These optimizations become possible after making sure that all boxed terms\n  have at least one word allocated after the arity word. This has been\n  accomplished by letting all empty tuples refer to the same empty tuple literal\n  which also reduces memory usage for empty tuples.\n\n  Own Id: OTP-17608\n\n- The signal queue benchmark in parallel_messages_SUITE and the ETS benchmark in\n  ets_SUITE have benchmark result visualization HTML pages with \"fill-screen\"\n  buttons to make the graphs bigger. This button did not work as intended\n  before. When pressing the button for a graph, the last graph got replaced with\n  a bigger version and not the one over the button. This is now fixed.\n\n  Own Id: OTP-17630\n\n- The new module `peer` supersedes the `slave` module. The `slave` module is now\n  deprecated and will be removed in OTP 27.\n\n  `peer` contains an extended and more robust API for starting erlang nodes.\n\n  Own Id: OTP-17720 Aux Id: PR-5162\n\n- This change introduces quote and unquote functions in uri_string module - a\n  replacement for deprecated encode and decode functions from http_uri.\n\n  Own Id: OTP-17778 Aux Id: GH-5368\n\n- In order to make it easier for the user to manage multiple outstanding\n  asynchronous `call` requests, new functionality utilizing request identifier\n  collections have been introduced in\n  [`erpc`](`t:erpc:request_id_collection/0`),\n  [`gen_server`](`t:gen_server:request_id_collection/0`),\n  [`gen_statem`](`t:gen_statem:request_id_collection/0`), and\n  [`gen_event`](`t:gen_event:request_id_collection/0`).\n\n  Own Id: OTP-17784 Aux Id: PR-5792\n\n- Update to the Unicode 14.0 specification.\n\n  Own Id: OTP-17869 Aux Id: PR-5595\n\n- The following ets types have been renamed to a clearer name: `tab/0` to\n  `table/0` and `comp_match_spec/0` to `compiled_match_spec/0`.\n\n  The types `table_access/0` and `table_type/0` have been exported.\n\n  Own Id: OTP-17901 Aux Id: GH-4968 PR-5649\n\n- Add support for locating `.asn1` files to the default search rules of\n  `filelib:find_file/1` and `filelib:find_source/1`.\n\n  Own Id: OTP-17908 Aux Id: GH-5655 PR-5669\n\n- Type specifications have been added to the `gen_server`, and the documentation\n  has been updated to utilize this.\n\n  This surfaced a few type violations that has been corrected in `global`,\n  `logger_olp` and `rpc`.\n\n  Own Id: OTP-17915 Aux Id: PR-5751, GH-2375, GH-2690\n\n- The non-local function handler for the `erl_eval` can now be called with\n  either two or three arguments. When called with three arguments, the first\n  argument is the annotation for the node in the abstract format.\n\n  All errors during evaluation will now be passed through `erlang:raise/3`. If\n  the restricted shell is active and it does not let `erlang:raise/3` through,\n  evaluation errors will be printed in less clear way. See the documentation for\n  restricted shell in `shell`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17925 Aux Id: PR-5631\n\n- Added `filelib:ensure_path/1` that ensures that all directories for the given\n  path exists (unlike `filelib:ensure_dir/1`, which will not create the last\n  segment of the path).\n\n  Own Id: OTP-17953 Aux Id: PR-5621\n\n- The functions `groups_from_list/2` and `groups_from_list/3` have been added to\n  the `maps` module.\n\n  Own Id: OTP-17969 Aux Id: PR-5588\n\n- `gen_server` has been refactored to throw more readable exceptions when a\n  callback returns bad values in the `Timeout` field\n  (`timeout() | 'hibernate' | {'continue,_}`), and also to verify that argument\n  in the `gen_server:enter_loop/3,4,5` API function.\n\n  Own Id: OTP-17974 Aux Id: GH-5683\n\n- The functions `uniq/1` and `uniq/2` for removing duplicates have been added to\n  the `lists` module.\n\n  Own Id: OTP-17977 Aux Id: GH-5606, PR-5766\n\n- Added support for configurable features as described in EEP-60. Features can\n  be enabled/disabled during compilation with options\n  (`-enable-feature Feature`, `-disable-feature Feature` and\n  `+{feature, Feature, enable|disable}`) to `erlc` as well as with directives\n  (`-feature(Feature, enable|disable).`) in the file. Similar options can be\n  used to `erl` for enabling/disabling features allowed at runtime. The new\n  `maybe` expression (EEP-49) is fully supported as the feature `maybe_expr`.\n  The features support is documented in the reference manual.\n\n  Own Id: OTP-17988\n\n- The function `filename:safe_relative_path/1`, which has been deprecated since\n  OTP 25, has been removed. Use `filelib:safe_relative_path/2` instead.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-17991\n\n- A new PRNG have been added to the `rand` module: `mwc59` which has been\n  developed in collaboration with Sebastiano Vigna. It is intended for\n  applications that need really fast pseudo-random numbers, and it comes with\n  two output value scramblers, one fast and one thorough.\n\n  Two internal functions for the `exsp` generator have also been exported so\n  they can be used outside the `rand` plug-in framework to shave off some\n  overhead.\n\n  The internal `splitmix64` generator has also been exported which can be useful\n  for seeding other kinds of PRNG:s than its own.\n\n  Own Id: OTP-18011","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.17.2.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-17-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The following functions are now much faster when given a long list or binary:\n\n  - erlang:list_to_integer/1\n  - erlang:binary_to_integer/1\n  - erlang:binary_to_integer/2\n  - erlang:list_to_integer/2\n  - string:to_integer/1\n\n  Own Id: OTP-18659 Aux Id: PR-7426","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.17.2.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-17-2-3"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Static supervisors are very idle processes after they have started so they\n  will now be hibernated after start to improve resource management.\n\n  Own Id: OTP-18556","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.17.2.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-17-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- It is not allowed to call functions from guards. The compiler failed to reject\n  a call in a guard when done by constructing a record with a default\n  initialization expression that called a function.\n\n  Own Id: OTP-18325 Aux Id: GH-6465, GH-6466","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.17.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-17-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- When changing callback module in `gen_statem` the state_enter calls flag from\n  the old module was used in for the first event in the new module, which could\n  confuse the new module and cause malfunction. This bug has been corrected.\n\n  With this change some `sys` debug message formats have been modified, which\n  can be a problem for debug code relying on the format.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-18239","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.17.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-17-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The type specifications for `shell_docs:get_doc/3`,\n  `shell_docs:get_callback_doc/3`, and `shell_docs:get_type_doc/3` incorrectly\n  stated that the returned `Metadata` was an empty map.\n\n  Own Id: OTP-18081","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.17.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-17-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The compilation time is no longer recorded in BEAM files. There remained\n  several undocumented functions that attempted to retrieve compilation times.\n  Those have now been removed.\n\n  Own Id: OTP-17962","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.17 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-17"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix rendering of nbsp on terminals that do not support unicode.\n\n  Own Id: OTP-17662 Aux Id: PR-5206\n\n- Improved the `m:erl_error` printout for when `m:re` fails to compile a regular\n  expression to also print hints about why the compilation failed.\n\n  Own Id: OTP-17750 Aux Id: PR-5366\n\n- Fixed spec for `supervisor_bridge:start_link()`.\n\n  Own Id: OTP-17766 Aux Id: PR-5362\n\n- Added missing shutdown clauses in `supervisor` which could cause erroneous\n  error reports.\n\n  Own Id: OTP-17767 Aux Id: PR-5344","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Add the `no_auto_import_types` to erl_lint to allow a module to define types\n  of the same name as a predefined type.\n\n  Own Id: OTP-17744 Aux Id: PR-5292","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.16.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-16-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed a bug that could cause a child to become orphaned when a supervisor died\n  between unlinking and sending the shutdown signal to this child.\n\n  There was also a possibility for erratic supervisor reports caused by a race\n  between a supervisor shutting down a child and that child exiting by itself at\n  the same time.\n\n  Own Id: OTP-17649 Aux Id: GH-5193, PR-5201","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.16 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-16"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix `io:format` with `~p` to no longer interpret floats as printable\n  characters.\n\n  Own Id: OTP-17424 Aux Id: GH-4801 PR-4803\n\n- Fix specs for base64 encode/decode functions to also include 0.\n\n  Own Id: OTP-17429 Aux Id: GH-4761\n\n- The failing call `io:format(\"~p\\n\")` would result in a warning for line number\n  0 instead of the correct line and column numbers. This has been corrected, and\n  all warnings for failing calls to [`io:format()`](`t:io:format/0`) has been\n  rephrased to make it clearer exactly what the problem is.\n\n  Own Id: OTP-17430\n\n- When the options `warn_missing_spec` and `export_all` were given, there would\n  only be warnings for missing specs for functions that had been explicitly\n  exported using an `-export` attribute.\n\n  Own Id: OTP-17434 Aux Id: GH-4772\n\n- Calling `c:ls/1` with an atom whose contents is the the name of a file (as\n  opposed to a directory) would crash.\n\n  Own Id: OTP-17463 Aux Id: GH-4916\n\n- The `MODULE` and `MODULE_STRING` macros would always appear to be defined\n  (when tested by `-ifdef`), even though no `-module()` declaration had been\n  seen yet. Changed so that `-ifdef ?MODULE.` will not consider ?MODULE defined\n  if `-module()` has not been previously seen.\n\n  Own Id: OTP-17505 Aux Id: GH-4995\n\n- Fix bug with rendering of missing types and callbacks in shell_docs.\n\n  Own Id: OTP-17573 Aux Id: ERL-1264 GH-4270\n\n- When the `deterministic` option was given to the compiler, the `?FILE` macro\n  would be expanded to full path of the source file before the first `include`\n  directive and to base part of the filename after `include` directive.\n\n  Own Id: OTP-17581 Aux Id: PR-5141\n\n- Fixed broken `win32reg:delete_key` and fixed `win32reg:value` for `default`\n  value.\n\n  Own Id: OTP-17622 Aux Id: PR-5038\n\n- Fixed error information for the call `maps:get(some_key, #{})`.\n\n  Own Id: OTP-17634 Aux Id: GH-5196","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Most output functions in the `io` module now print extra error information\n  when provided with invalid arguments. The functions are: `io:format`,\n  `io:fwrite`, `io:put_chars`, `io:nl` and `io:write`.\n\n  Own Id: OTP-17317 Aux Id: PR-4757\n\n- EEP-54 (Provide more information about errors) now includes two new return\n  values for the `format_error` callback, `general` and `reason`.\n\n  Multi-line error descriptions returned from a `format_error` callback are now\n  correctly indented.\n\n  The documentation for `m:erl_error`, [`error/3`](`erlang:error/3`) and\n  [Errors and Error Handling](`e:system:errors.md`) in the Erlang Reference\n  Manual have been extended.\n\n  Own Id: OTP-17454 Aux Id: PR-4764\n\n- In the documentation for the `lists` module, it has been clarified that\n  predicate funs must return a boolean.\n\n  Own Id: OTP-17503 Aux Id: GH-4985\n\n- The documentation for `c:c/1`, `c:c/2`, and `c:c/3` has been clarified.\n\n  Own Id: OTP-17571 Aux Id: GH-5103","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.15.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-15-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a crash when formatting tuples using the control\n  sequences `p` or `P` and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-17525 Aux Id: GH-5053","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.15.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-15-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a loop when formatting terms using the control\n  sequences p or P and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-17459 Aux Id: GH-4824, GH-4842","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.15 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Time-outs in `gen_statem` with relative time `0` did not behave quite\n  according to the intended model. This has now been corrected.\n\n  The correction introduces a small potential incompatibility e.g when combining\n  a state time-out with inserted events, and the inserted event does a state\n  change in the state with the time-out. Before this correction the state\n  time-out could be delivered even after the second state change, but now it is\n  guaranteed that a state time-out is only delivered in the state it was started\n  for, even in this corner case.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15107 Aux Id: ERL-1381, PR-2813\n\n- Fix bugs in `erl_eval` concerning bitstring comprehensions.\n\n  Own Id: OTP-16865\n\n- File names that start with a dot (such as \"`.gitignore`\" are now treated as\n  file names and not extensions by `filename:extension/1` and\n  `filename:rootname/1`.\n\n  Own Id: OTP-16905\n\n- Fixed a bug where `beam_lib:chunks/3` with the `allow_missing_chunks` option\n  would crash if a named chunk was missing.\n\n  Own Id: OTP-16950 Aux Id: ERL-1378\n\n- A floating point zero (0.0) can be both positive (+0.0) and negative (-0.0).\n  Multiple bugs in the compiler, runtime system, and STDLIB have been fixed to\n  ensure that the minus sign on 0.0 is not lost.\n\n  Own Id: OTP-17077 Aux Id: ERL-1431, PR-2903, PR-2905, PR-2906\n\n- Eliminated a Dialyzer crashed when the `-MMD` option is used to generate a\n  dependency file and a BEAM file a the same time.\n\n  Own Id: OTP-17118 Aux Id: PR-2825\n\n- Fixed bug in `m:shell_docs` and `erl_docgen` that interpreted `em` tags as\n  `strong`.\n\n  Own Id: OTP-17122\n\n- On Solaris, the `math:acos/1` and `math:asin/1` functions would not fail for\n  arguments outside the valid domain.\n\n  Own Id: OTP-17133\n\n- Silence `unused_record` warnings when using `ms_transform`. The parse\n  transform `ms_transform` replaces records with tuples, which can cause the\n  Erlang code linter to emit warnings about unused records.\n\n  Own Id: OTP-17186\n\n- Documented a deficiency in the `re` module regarding the `[:ascii:]` character\n  class matching Latin-1 characters.\n\n  Own Id: OTP-17222 Aux Id: GH-4544\n\n- Fixed `spec` of start functions in generic behaviors.\n\n  Own Id: OTP-17342 Aux Id: GH-4725 PR-4726\n\n- Supervisors rejected child specs with a shutdown value of 0.\n\n  Own Id: OTP-17364 Aux Id: PR-4747","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- In the `rand` module it is now possible to seed the default algorithm using an\n  algorithm alias: `default`.\n\n  Generating pseudo random binaries has been implemented with `rand:bytes/1` and\n  `rand:bytes_s/2`.\n\n  Own Id: OTP-14646 Aux Id: PR-2920\n\n- New functions have been added to the `proplists` module: `to_map/1,2` and\n  `from_map/1`.\n\n  Own Id: OTP-14647 Aux Id: PR-2910\n\n- New functions have been added to the `queue` module: `all/2`, `any/2`,\n  `delete/2`, `delete_r/2`, `delete_with/2`, and `delete_with_r/2`.\n\n  Own Id: OTP-14650 Aux Id: PR-2850\n\n- New function have been added to the `queue` module: `fold/2` and\n  `filtermap/2`.\n\n  Own Id: OTP-14793 Aux Id: PR-2791\n\n- Support for handling abstract code created before OTP R15 has been dropped.\n\n  Own Id: OTP-16678 Aux Id: PR-2627\n\n- Extended error information for failing BIF calls as proposed in\n  [EEP 54](https://github.com/erlang/eep/blob/master/eeps/eep-0054.md) has been\n  implemented.\n\n  When a BIF call from the Erlang shell fails, more information about which\n  argument or arguments that were in error will be printed. The same extended\n  error information will by `proc_lib`, `common_test`, and `qlc` when BIF calls\n  fail.\n\n  For applications that wish to provide the same extended error information,\n  there are new functions `erl_error:format_exception/3` and\n  `erl_error:format_exception/4`.\n\n  There is a new [`error/3`](`error/3`) BIF that allows applications or\n  libraries to provide extended error information in the same way for their own\n  exceptions.\n\n  Own Id: OTP-16686\n\n- The [_process alias_](`e:system:ref_man_processes.md#process-aliases`) feature\n  as outlined by\n  [EEP 53](https://github.com/erlang/eep/blob/master/eeps/eep-0053.md) has been\n  introduced. It is introduced in order to provide a lightweight mechanism that\n  can prevent late replies after timeout or connection loss. For more\n  information, see EEP 53 and the documentation of the new\n  [`alias/1`](`erlang:alias/1`) BIF and the new options to the\n  [`monitor/3`](`erlang:monitor/3`) BIF.\n\n  The `call` operation in the framework used by `gen_server`, `gen_statem`, and\n  `gen_event` has been updated to utilize alias in order to prevent late\n  responses. The `gen_statem` behavior still use a proxy process in the\n  distributed case, since it has always prevented late replies and aliases wont\n  work against pre OTP 24 nodes. The proxy process can be removed in OTP 26.\n\n  The alias feature also made it possible to introduce new functions similar to\n  the [`erpc:receive_response()`](`erpc:receive_response/2`) function in the gen\n  behaviors, so the new functions\n  [`gen_server:receive_response()`](`gen_server:receive_response/2`),\n  [`gen_statem:receive_response()`](`gen_statem:receive_response/2`),\n  [`gen_event:receive_response()`](`gen_event:receive_response/2`) have also\n  been introduced.\n\n  Own Id: OTP-16718 Aux Id: PR-2735\n\n- Improved documentation about exit signals emitted when a `gen_server`\n  terminates.\n\n  Own Id: OTP-16910 Aux Id: PR-2771\n\n- New functions have been added to the `maps` module: `merge_with/3`,\n  `intersect/2`, `intersect_with/3`, `filtermap/2`, `from_keys/2`, and\n  `maps:foreach/2`.\n\n  `maps:merge_with/3` is the same as `merge/2` but takes an extra fun that is\n  used to combine items with the same key.\n\n  `maps:intersect/2` computes the intersection of two maps.\n\n  `maps:intersect_with/3` is the same as `intersect/2` but takes an extra fun\n  that is used to combine intersecting items.\n\n  `maps:filtermap/2` allows filtering and mapping of a map in a single pass.\n\n  `maps:from_keys/2` constructs a map from a list of keys and a single value and\n  can be used to to optimize sets operations such as from_list/1, filter/2,\n  intersection/2, and subtract/2.\n\n  `maps:foreach/2` allows iteration over a map without returning any value.\n\n  Own Id: OTP-16936 Aux Id: ERL-1367\n\n- The experimental HiPE application has been removed, together with all related\n  functionality in other applications.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16963\n\n- The `filename:src/1` function which was deprecated in OTP 20 has been removed.\n  Use `filelib:find_source/1,3` instead.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16971\n\n- The pretty printer for floating point number have been changed to make it\n  easier to see if the integer part of the number has been rounded. After the\n  change the digit that may have been rounded always appears last or just before\n  the exponent character (e or E). This is accomplished by always printing the\n  number using scientific notation if it is so large that the integer part could\n  be rounded.\n\n  Own Id: OTP-16980 Aux Id: ERL-1308\n\n- Accept references up to a size of 160-bits from remote nodes. This is the\n  first step in an upgrade path toward using references up to 160-bits in a\n  future OTP release.\n\n  Own Id: OTP-17005 Aux Id: OTP-16718\n\n- Add option `location` to `erl_parse:abstract/2`.\n\n  Own Id: OTP-17024\n\n- All long running functions in the maps API are now yielding. In previous\n  releases the functions `maps:from_list/1`, `maps:keys/1` and `maps:values/1`\n  did not yield. This could cause unfair scheduling of processes.\n\n  Own Id: OTP-17057\n\n- The `sets` module now has an optional map-based implementation, as described\n  in `EEP 50`.\n\n  To use this implementation, pass the `{version,2}` option to `sets:new/1` or\n  `sets:from_list/2`.\n\n  Own Id: OTP-17059 Aux Id: PR-2864\n\n- Added `shell_docs:supported_tags/0`. This function can be used to retrieve the\n  tags currently supported by `shell_docs`.\n\n  Own Id: OTP-17120\n\n- The `application/erlang+html` documentation storage format used by\n  `m:shell_docs` has been updated to include the tags `b`, `strong`, `h4`, `h5`\n  and `h6`.\n\n  Own Id: OTP-17121\n\n- Do not pretty-print `catch` expressions with unnecessary parentheses. The\n  re-write of the Erlang parser grammar in PR-2584 implies that parentheses\n  around `catch` expressions are in many cases no longer required.\n\n  Own Id: OTP-17169 Aux Id: PR-2584\n\n- Improved explanation of `{continue,Continue}` in `Module:init/1` of the\n  `gen_server` documentation.\n\n  Own Id: OTP-17171 Aux Id: PR-3011\n\n- The `erl_eval` module now accepts a map for keeping track of bindings. Using\n  an `orddict` for bindings will still work.\n\n  Own Id: OTP-17175\n\n- Documented `epp:scan_erl_form/1` and added `epp:scan_file/2`.\n\n  Own Id: OTP-17199 Aux Id: PR-2658\n\n- The standard floating point printing algorithm used by the `io` and `io_lib`\n  modules has been changed from the algorithm described in \\[1] to the Ryu\n  algorithm \\[2]. This gives a significant speed improvement for the printing of\n  most floating point numbers and a small memory consumption improvement.\n\n  \\[1]: Robert G. Burger and R. Kent Dybvig. 1996. Printing floating-point\n  numbers quickly and accurately. In Proceedings of the ACM SIGPLAN 1996\n  conference on Programming language design and implementation (PLDI '96).\n  Association for Computing Machinery, New York, NY, USA, 108–116.\n  DOI:https://doi.org/10.1145/231379.231397\n\n  \\[2]: Ulf Adams. 2018. Ryū: fast float-to-string conversion. In Proceedings of\n  the 39th ACM SIGPLAN Conference on Programming Language Design and\n  Implementation (PLDI 2018). Association for Computing Machinery, New York, NY,\n  USA, 270–282. DOI:https://doi.org/10.1145/3192366.3192369\n\n  Thanks to Thomas Depierre\n\n  Own Id: OTP-17210\n\n- Add hex encoding and decoding functions in the binary module.\n\n  Own Id: OTP-17236 Aux Id: PR-3014\n\n- The undocumented and partially broken `ets:filter/3` function has been\n  removed.\n\n  Own Id: OTP-17263\n\n- Add support in `m:shell_docs` to display any `\"text\"` documentation format.\n  This means that `h(Module)` in the shell now can display the `\"text/markdown\"`\n  of Elixir documentation.\n\n  Own Id: OTP-17267\n\n- The internal hashing of keys within ETS tables of types `set`, `bag`,\n  `duplicate_bag` has been salted to diverge from `erlang:phash2`. This to avoid\n  bad hashing if `phash2` is used to distribute the keys over separate\n  tables/nodes.\n\n  Own Id: OTP-17276 Aux Id: PR-2979\n\n- Updated to the Unicode 13.0 specification.\n\n  Own Id: OTP-17327 Aux Id: PR-4707\n\n- Add compiler option `{nowarn_unused_record, RecordNames}`. Document compiler\n  option `nowarn_unused_type`.\n\n  Own Id: OTP-17330\n\n- Implementation of\n  [EEP 56](https://github.com/erlang/eep/blob/master/eeps/eep-0056.md) in\n  supervisor. It adds the concept of `significant` children as well as the\n  `auto_shutdown` supervisor flag.\n\n  See the [supervisor manual page](`m:supervisor`) for more information.\n\n  Own Id: OTP-17334 Aux Id: PR-4638, EEP-56\n\n- Fixed warnings in code matching on underscore prefixed variables.\n\n  Own Id: OTP-17385 Aux Id: OTP-17123","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.14.2.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-14-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- It is not allowed to call functions from guards. The compiler failed to reject\n  a call in a guard when done by constructing a record with a default\n  initialization expression that called a function.\n\n  Own Id: OTP-18325 Aux Id: GH-6465, GH-6466","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.14.2.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-14-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a crash when formatting tuples using the control\n  sequences `p` or `P` and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-17525 Aux Id: GH-5053","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.14.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-14-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a loop when formatting terms using the control\n  sequences p or P and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-17459 Aux Id: GH-4824, GH-4842","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.14.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-14-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Dictionaries that have become zipped by the zip module did not get executable\n  permission (for the file owner) which makes the files inside the dictionary\n  inaccessible. This is fixed by giving dictionaries inside a zip archive XRW\n  permission.\n\n  Own Id: OTP-17295 Aux Id: GH-4687","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.14.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-14-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Handle maps in `erl_parse:tokens()`.\n\n  Own Id: OTP-16978\n\n- The erlang shell function `rr` has been fixed to be able to read records from\n  files within a code archive.\n\n  Own Id: OTP-17182 Aux Id: PR-3002\n\n- If `beam_lib` is asked to return abstract code for a BEAM file produced by\n  Elixir and Elixir is not installed on the computer, `beam_lib` will no longer\n  crash, but will return an error tuple. The `cover:compile_beam()` and\n  `cover:compile_beam_directory()` functions have been updated to also return an\n  error tuple in that situation.\n\n  Own Id: OTP-17194 Aux Id: GH-4353\n\n- Correct example module `erl_id_trans` regarding the `{char, C}` type.\n\n  Own Id: OTP-17273","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.14 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- This change fixes the handling of deep lists in the path component when using\n  uri_string:recompose/1.\n\n  Own Id: OTP-16941\n\n- Fix `m:shell_docs` to clear shell decorations (bold/underline) when paginating\n  output.\n\n  Fix various small renderings issues when integrating `m:shell_docs` with edoc.\n\n  Own Id: OTP-17047","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Improved the API and documentation of the uri_string module.\n\n  Added a new chapter to the Users Guide about Uniform Resource Identifiers and\n  their handling with the new API.\n\n  Added two new API functions: uri_string:allowed_characters/0 and\n  uri_string:percent_decode/1.\n\n  This change has been marked as potentially incompatible as\n  uri*string:normalize/2 used to decode percent-encoded character triplets that\n  corresponded to characters not in the reserved set. After this change,\n  uri_string:normalize/2 will only decode those percent-encoded triplets that\n  correspond to characters in the unreserved set (ALPHA / DIGIT / \"-\" / \".\" /\n  \"*\" / \"~\").\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-16460\n\n- The `shell_docs` module has been expanded with the possibility to configure\n  unicode, ansi and column size for the rendered text.\n\n  Own Id: OTP-16990","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.13.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-13-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The functions `digraph:in_edges/2` and `digraph:out_edges/2` would return\n  false edges if called for a vertex that had a '\\_' atom in its name term.\n\n  Own Id: OTP-16655\n\n- `filelib:wildcard(\"not-a-directory/..\")` should return an empty list. On\n  Windows it returned `\"not-a-directory/..\"`.\n\n  Own Id: OTP-16700\n\n- Fix the typespec of shell_docs:render to use the correct type for an MFA.\n\n  Own Id: OTP-16739\n\n- Fix uri_string:recompose/1 when host is present but input path is not\n  absolute.\n\n  This change prevents the recompose operation to change the top level domain of\n  the host when the path does not start with a slash.\n\n  Own Id: OTP-16751 Aux Id: ERL-1283\n\n- The `epp` module would return a badly formed error term when an '`if`'\n  preprocessor directive referenced an undefined symbol. `epp:format_error/1`\n  would crash when called with the bad error term.\n\n  Own Id: OTP-16816 Aux Id: ERL-1310\n\n- `lists:sublist(List, Start, Len)` failed with an exception if\n  `Start > length(List) + 1` even though it is explicitly documented that \"It is\n  not an error for `Start+Len` to exceed the length of the list\".\n\n  Own Id: OTP-16830 Aux Id: ERL-1334, PR-2718","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.13.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-13-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- When a temporary child of a `simple_one_for_one supervisor` died, the internal\n  state of the supervisor would be corrupted in a way that would cause the\n  supervisor to retain the start arguments for subsequent children started by\n  the supervisor, causing unnecessary growth of the supervisor's heap. There\n  state corruption could potentially cause other problems as well.\n\n  Own Id: OTP-16804","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.13 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-13"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Compiling a match specification with excessive nesting caused the runtime\n  system to crash due to scheduler stack exhaustion. Instead of crashing the\n  runtime system, effected functions will now raise a `system_limit` error\n  exception in this situation.\n\n  Own Id: OTP-16431 Aux Id: ERL-592\n\n- Initialization of record fields using `_` is no longer allowed if the number\n  of affected fields is zero.\n\n  Own Id: OTP-16516\n\n- Fix bugs in `eval_bits`.\n\n  Own Id: OTP-16545","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Improved the printout of single line logger events for most of the OTP\n  behaviours in STDLIB and Kernel. This includes `proc_lib`, `gen_server`,\n  `gen_event`, `gen_statem`, `gen_fsm`, `supervisor`, `supervisor_bridge` and\n  `application`.\n\n  Improved the [`chars_limit`](`m:logger_formatter#chars_limit`) and\n  [`depth`](`m:logger_formatter#depth`) handling in `proc_lib` and when\n  formatting of exceptions.\n\n  Own Id: OTP-15299\n\n- Remove usage and documentation of old requests of the I/O-protocol.\n\n  Own Id: OTP-15695\n\n- Improved ETS scalability of concurrent calls that change the size of a table,\n  like `ets:insert/2` and `ets:delete/2`.\n\n  This performance feature was implemented for `ordered_set` in OTP 22.0 and\n  does now apply for all ETS table types.\n\n  The improved scalability may come at the cost of longer latency of\n  `ets:info(T,size)` and `ets:info(T,memory)`. A new table option\n  `decentralized_counters` has therefore been added. It is default `true` for\n  `ordered_set` with `write_concurrency` enabled and default `false` for all\n  other table types.\n\n  Own Id: OTP-15744 Aux Id: OTP-15623, PR-2229\n\n- Handle Unicode filenames in the `zip` module.\n\n  Own Id: OTP-16005 Aux Id: ERL-1003, ERL-1150\n\n- Unicode support was updated to the Unicode 12.1 standard.\n\n  Own Id: OTP-16073 Aux Id: PR-2339\n\n- All of the modules [`proc_lib`](`proc_lib:start_monitor/3`),\n  [`gen_server`](`gen_server:start_monitor/3`),\n  [`gen_statem`](`gen_statem:start_monitor/3`), and\n  [`gen_event`](`gen_event:start_monitor/0`) have been extended with a\n  `start_monitor()` function. For more information, see the documentation of\n  `start_monitor()` for these modules.\n\n  Own Id: OTP-16120 Aux Id: ERIERL-402, PR-2427\n\n- Updates for new `erlang:term_to_iovec()` BIF.\n\n  Own Id: OTP-16128 Aux Id: OTP-15618\n\n- Documented a quirk regarding extraction from file descriptors in `erl_tar`.\n\n  Own Id: OTP-16171 Aux Id: ERL-1057\n\n- Added `ok` as return value to `gen_server:reply/2`\n\n  Own Id: OTP-16210 Aux Id: PR-2411\n\n- New functions have been added to `m:c` for printing embedded documentation for\n  Erlang modules. The functions are:\n\n  - **h/1,2,3** - Print the documentation for a Module:Function/Arity.\n\n  - **ht/1,2,3** - Print the type documentation for a Module:Type/Arity.\n\n  The embedded documentation is created when building the Erlang/OTP\n  documentation.\n\n  Own Id: OTP-16222\n\n- Add `indent` and `linewidth` to the options of the `erl_pp` module's\n  functions.\n\n  Own Id: OTP-16276 Aux Id: PR-2443\n\n- Minor updates due to the new spawn improvements made.\n\n  Own Id: OTP-16368 Aux Id: OTP-15251\n\n- The compiler will now raise a warning when inlining is used in modules that\n  load NIFs.\n\n  Own Id: OTP-16429 Aux Id: ERL-303\n\n- Refactored the internal handling of deprecated and removed functions.\n\n  Own Id: OTP-16469\n\n- Extend `erl_parse:abstract/1,2` to handle external fun expressions\n  (`fun M:F/A`).\n\n  Own Id: OTP-16480\n\n- Added `filelib:safe_relative_path/2` to replace\n  `filename:safe_relative_path/1`, which did not safely handle symbolic links.\n\n  `filename:safe_relative_path/1` has been deprecated.\n\n  Own Id: OTP-16483 Aux Id: PR-2542\n\n- The module `shell_docs` has been added. The module contains functions for\n  rendering, validating and normalizing embedded documentation.\n\n  Own Id: OTP-16500\n\n- Module and function auto-completion in the shell now looks at all available\n  modules instead of only those loaded. A module is considered available if it\n  either is loaded already or would be loaded if called.\n\n  The auto-completion has also been expanded to work in the new `h/1,2,3`\n  function in `m:c`.\n\n  Own Id: OTP-16501 Aux Id: OTP-16494, OTP-16222, OTP-16406, OTP-16499,\n  OTP-16500, PR-2545, ERL-708\n\n- Updated the internal `pcre` library to `8.44`.\n\n  Own Id: OTP-16557","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.12.1.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-12-1-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a crash when formatting tuples using the control\n  sequences `p` or `P` and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-17525 Aux Id: GH-5053","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.12.1.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-12-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a loop when formatting terms using the control\n  sequences p or P and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-17459 Aux Id: GH-4824, GH-4842","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.12.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-12-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- [re:run(Subject, RE, \\[unicode])](`re:run/3`) returned `nomatch` instead of\n  failing with a `badarg` error exception when `Subject` contained illegal utf8\n  and `RE` was passed as a binary. This has been corrected along with\n  corrections of reduction counting in `re:run()` error cases.\n\n  Own Id: OTP-16553","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.12 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix type specification for uri_string:normalize/2 that may also return\n  error().\n\n  Own Id: OTP-16322\n\n- Improve error handling in uri_string:normalize/2. This change fixes a crash\n  when the input URI has faulty percent-encoding.\n\n  Own Id: OTP-16351\n\n- Fix minor bugs in the Erlang pretty printer (`erl_pp`).\n\n  Own Id: OTP-16435\n\n- Fix the Erlang parser regarding consecutive unary operators.\n\n  Own Id: OTP-16439\n\n- Let `calendar:rfc3339_to_system_time()` crash when the time offset is missing.\n\n  Own Id: OTP-16514 Aux Id: ERL-1182","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Implement uri_string:resolve/\\{2,3\\} that can be used to resolve a URI\n  reference against a base URI.\n\n  Own Id: OTP-16321\n\n- In `gen_statem` it is now possible to change the callback module for a running\n  server. See `gen_statem`'s documentation for `change_callback_module`,\n  `push_callback_module`, and `pop_callback_module`.\n\n  Own Id: OTP-16477 Aux Id: PR-2531","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.11.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-11-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A directory traversal vulnerability has been eliminated in erl_tar. erl_tar\n  will now refuse to extract symlinks that points outside the targeted\n  extraction directory and will return `{error,{Path,unsafe_symlink}}`. (Thanks\n  to Eric Meadows-Jönsson for the bug report and for suggesting a fix.)\n\n  Own Id: OTP-16441","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.11.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-11-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The `ets:update_counter/4` core dumped when given an ordered_set with\n  write_concurrency enabled and an invalid position. This bug has been fixed.\n\n  Own Id: OTP-16378 Aux Id: ERL-1125","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.11 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The functions [`unicode:characters_to_list()`](`unicode:characters_to_list/2`)\n  and [`unicode:characters_to_binary()`](`unicode:characters_to_binary/3`)\n  raised a `badarg` exception instead of returning an error tuple when passed\n  very large invalid code points as input.\n\n  Own Id: OTP-16052\n\n- Fixed a bug in the linter where list and binary comprehensions could suppress\n  unsafe variable errors.\n\n  Own Id: OTP-16053 Aux Id: ERL-1039\n\n- Fixed incorrect type specifications for `erl_tar:open/2`, `create/2,3`, and\n  `add/4`.\n\n  Own Id: OTP-16085 Aux Id: PR-2379\n\n- Fixed erroneous type spec for `binary:list_to_bin/1`. Argument type was\n  changed from `t:iodata/0` to `t:iolist/0`.\n\n  Own Id: OTP-16132 Aux Id: ERL-1041\n\n- Fix a race in `pool:pspawn_link` that caused a `noproc` error to be thrown\n  when using it to spawn a very short lived process.\n\n  Own Id: OTP-16211\n\n- Fixed a performance issue in ETS lookup when using the `compressed` option and\n  the term contained atoms. Before this fix the decompress algorithm for atoms\n  would unnecessarily take a global lock to validate the atom.\n\n  Own Id: OTP-16316","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Added a new compiler/linter option to disable warnings for unused types\n  (`nowarn_unused_type`).\n\n  Own Id: OTP-16262 Aux Id: ERIERL-435\n\n- ETS tables have been optimized to not use any locks when running in a system\n  with only one scheduler enabled. This can provide significant performance\n  gains for applications that use ETS tables heavily.\n\n  Own Id: OTP-16315","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.10 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- `re:run()` now yields when validating utf8 in a large subject.\n\n  Own Id: OTP-15836 Aux Id: ERL-876\n\n- Upgraded the ERTS internal PCRE library from version 8.42 to version 8.43. See\n  [http://pcre.org/original/changelog.txt](http://pcre.org/original/changelog.txt)\n  for information about changes made to PCRE. This library implements major\n  parts of the `m:re` regular expressions module.\n\n  Own Id: OTP-15889\n\n- The bug with ID ERL-717 has been fixed. The functions `io:columns()` and\n  `io:rows()` only worked correctly inside interactive erlang shells before this\n  fix. These functions returned `{error,enotsup}` before this fix even if stdout\n  and stdin were connected to a terminal when they were invoked from an escript\n  or a program started with e.g., `erl -noshell`.\n\n  Own Id: OTP-15959 Aux Id: ERL-717\n\n- Fixed handling of \"..\" and \"@\" in wildcards. \"..\" would only work when\n  preceded by a literal pattern such as in \"a/..\", not when preceded by wildcard\n  characters such as in \"\\*/..\". The combination \"@/..\" was also broken, and in\n  addition \"@\" in a pattern could degrade performance of the wildcard matching.\n\n  Own Id: OTP-15987 Aux Id: ERL-1029\n\n- Make sure `ets:fun2ms()` can handle `++/2` in the head of functions when\n  called from the shell.\n\n  Own Id: OTP-15992 Aux Id: PR-2322","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Debugging of time-outs in `gen_statem` has been improved. Starting a time-out\n  is now logged in `sys:log` and `sys:trace`. Running time-outs are visible in\n  server crash logs, and with `sys:get_status`. Due to this system events\n  `{start_timer, Action, State}` and `{insert_timout, Event, State}` have been\n  added, which may surprise tools that rely on the format of these events.\n\n  New features: The `EventContent` of a running time-out can be updated with\n  `{TimeoutType, update, NewEventContent}`. Running time-outs can be cancelled\n  with `{TimeoutType, cancel}` which is more readable than using\n  `Time = infinity`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15510\n\n- `re:run()` now avoids validating utf8 in the subject more than once in the\n  same call. This validation could previously be performed multiple times when\n  the `global` option was passed.\n\n  Own Id: OTP-15831 Aux Id: ERL-876\n\n- ETS `ordered_set` tables with `write_concurrency` enabled has got a\n  performance issue fixed. There were no limits for the values of internal\n  statistics counters before this fix. This could result in that the data\n  structure sometimes reacted slowly to a change in how many parallel processes\n  were using it.\n\n  Own Id: OTP-15906\n\n- The `ordsets:union/1` is now faster when passed a long list of ordsets.\n\n  Own Id: OTP-15927\n\n- `unicode:characters_to_binary()` could return very small binaries as reference\n  counted off heap binaries. This could cause an unnecessary large memory usage\n  and an unnecessary load on the binary allocator. Small binaries are now always\n  returned as heap binaries.\n\n  Own Id: OTP-16002 Aux Id: ERIERL-366\n\n- Display a more meaningful error message when a bad I/O server is used in a\n  script written in Erlang (`escript`).\n\n  Own Id: OTP-16006 Aux Id: ERL-992\n\n- New feature `ets:info(_, binary)` to get information about all reference\n  counted binaries kept by a table. This is the same kind of debug information\n  that [`process_info(_, binary)`](`process_info/2`) returns for a process.\n\n  Own Id: OTP-16035 Aux Id: ERIERL-366\n\n- Corrected ETS documentation about the behavior of compiled match\n  specifications when serialized through external format.\n\n  Own Id: OTP-16038 Aux Id: PR-2366","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.9.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-9-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a loop when formatting terms using the control\n  sequences `p` or `P` and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-15875 Aux Id: ERL-967","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.9.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-9-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a failure when formatting binaries using the\n  control sequences `p` or `P` and limiting the output with the option\n  `chars_limit`.\n\n  Own Id: OTP-15847 Aux Id: ERL-957","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.9 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug in `string:lexemes/2`.\n\n  The bug was found when optimizing the handling of deep lists of Unicode\n  characters in the `string` module.\n\n  Own Id: OTP-15649\n\n- A bug has been fixed in the `maps` implementation that could cause a crash or\n  memory usage to grow until the machine ran out of memory. This could happen\n  when inserting a new key-value pair with a key `K1` containing a binary `B1`\n  into a map `M` having a key `K2` with a binary `B2` if the following\n  conditions were met:\n\n  - `B1 =/= B2`\n  - `size(B1) >= 4294967296`\n  - `size(B2) >= 4294967296`\n  - `size(M) >= 32`\n  - `(size(B1) rem 4294967296) == (size(B2) rem 4294967296)`\n  - the first `(size(B1) rem 4294967296)` bytes are the same both in `B1` and\n    `B2`\n  - substituting `B1` in `K1` with `B2` would create a term with the same value\n    as `K2`\n\n  The root cause of the problem is that the `maps` implementation only hashed\n  the first `(X rem 4294967296)` bytes of binaries so that different binaries\n  could get the same hash value independently of the hash seed.\n\n  Own Id: OTP-15707\n\n- Since the introduction of the stack trace variable, the Erlang Pretty Printer\n  has left out the exception class `throw` even when the stack trace variable\n  cannot be left out, which is not correct Erlang code. The fix is to always\n  include the exception class `throw`.\n\n  Own Id: OTP-15751\n\n- `record_info/2` is a pseudo-function that requires literal arguments known at\n  compile time. Therefore, the following usage is illegal: `fun record/info/2`.\n  The compiler would crash when during compilation of that kind of code.\n  Corrected to issue a compilation error.\n\n  Own Id: OTP-15760 Aux Id: ERL-907","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- A new `rand` module algorithm, `exro928ss` (Xoroshiro928\\*\\*), has been\n  implemented. It has got a really long period and good statistical quality for\n  all output bits, while still being only about 50% slower than the default\n  algorithm.\n\n  The same generator is also used as a long period counter in a new `crypto`\n  plugin for the `rand` module, algorithm `crypto_aes`. This plugin uses AES-256\n  to scramble the counter which buries any detectable statistical artifacts.\n  Scrambling is done in chunks which are cached to get good amortized speed\n  (about half of the default algorithm).\n\n  Own Id: OTP-14461 Aux Id: PR-1857\n\n- Types related to server naming and starting have been exported from\n  `gen_statem`. These are: `server_name/0`, `server_ref/0`, `start_opt/0`,\n  `start_ret/0` and `enter_loop_opt/0`.\n\n  Own Id: OTP-14724 Aux Id: PR-2056\n\n- The default algorithm for the `rand` module has been changed to `exsss`\n  (Xorshift116\\*\\*) which is a combination of the Xorshift116 (`exsp`) state\n  update and a new scrambler \"StarStar\" from the 2018 paper \"Scrambled Linear\n  Pseudorandom Number Generators\" by David Blackman and Sebastiano Vigna. This\n  combination should not have the caveat of weak low bits that the previous\n  default algorithm(s) have had, with the cost of about 10% lower speed. See\n  GitHub pull request #1969.\n\n  Own Id: OTP-14731 Aux Id: PR-1969\n\n- The generic state machine behaviour `gen_statem` has gotten code cleanup and\n  documentation improvements from GitHub Pull Request #1855, even though the PR\n  itself was rejected.\n\n  Own Id: OTP-14737 Aux Id: PR-1855\n\n- Update Unicode specification to version 11.0.\n\n  Own Id: OTP-15111\n\n- ETS option `write_concurrency` now also affects and improves the scalability\n  of `ordered_set` tables. The implementation is based on a data structure\n  called contention adapting search tree, where the lock granularity adapts to\n  the actual amount of concurrency exploited by the applications in runtime.\n\n  Own Id: OTP-15128\n\n- Optimized `maps:new/0` with trivial Erlang implementation, making use of\n  literal terms (the empty map) not needing dynamic heap allocation.\n\n  Own Id: OTP-15200 Aux Id: PR-1878\n\n- The `gen_*` behaviours have been changed so that if logging of the last N\n  messages through `sys:log/2,3` is active for the server, this log is included\n  in the terminate report.\n\n  To accomplish this the format of \"System Events\" as defined in the man page\n  for `sys` has been clarified and cleaned up, a new function `sys:get_log/1`\n  has been added, and `sys:get_debug/3` has been deprecated. Due to these\n  changes, code that relies on the internal badly documented format of \"System\n  Events\", need to be corrected.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15381\n\n- The `gen_statem` behaviour engine loop has been optimized for better\n  performance in particular when the callback module returns some actions, that\n  is better performance for more realistic applications than the Echo Benchmark.\n\n  Own Id: OTP-15452\n\n- Do not allow function specifications for functions residing in other modules.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15563 Aux Id: ERL-845, OTP-15562\n\n- The `persistent_term` functions [`put/2`](`put/2`) and [`erase/1`](`erase/1`)\n  are now yielding.\n\n  Own Id: OTP-15615\n\n- Previously, all ETS tables used centralized counter variables to keep track of\n  the number of items stored and the amount of memory consumed. These counters\n  can cause scalability problems (especially on big NUMA systems). This change\n  adds an implementation of a decentralized counter and modifies the\n  implementation of ETS so that ETS tables of type `ordered_set` with\n  `write_concurrency` enabled use the decentralized counter. Experiments\n  indicate that this change substantially improves the scalability of ETS\n  `ordered_set` tables with `write_concurrency` enabled in scenarios with\n  frequent `ets:insert/2` and `ets:delete/2` calls.\n\n  Own Id: OTP-15623 Aux Id: PR-2190\n\n- Use `ssh` instead of `rsh` as the default remote shell.\n\n  Own Id: OTP-15633 Aux Id: PR-1787\n\n- Added `beam_lib:strip/2` and friends, which accept a list of chunks that\n  should be preserved when stripping.\n\n  Own Id: OTP-15680 Aux Id: PR-2114\n\n- Optimize printing of maps with `io_lib:write()`. Also optimize pretty printing\n  of strings (`~s` and `~ts`) when limiting the output with the `chars_limit`\n  option.\n\n  Own Id: OTP-15705\n\n- There are new compiler options `nowarn_removed` and `{nowarn_removed,Items}`\n  to suppress warnings for functions and modules that have been removed from\n  OTP.\n\n  Own Id: OTP-15749 Aux Id: ERL-904\n\n- Let the Erlang Pretty Printer put atomic parts on the same line.\n\n  Own Id: OTP-15755\n\n- Add option `quote_singleton_atom_types` to the Erlang Pretty Printer's\n  functions. Setting the option to `true` adds quotes to all singleton atom\n  types.\n\n  Own Id: OTP-15756","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.8.2.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-8-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- [re:run(Subject, RE, \\[unicode])](`re:run/3`) returned `nomatch` instead of\n  failing with a `badarg` error exception when `Subject` contained illegal utf8\n  and `RE` was passed as a binary. This has been corrected along with\n  corrections of reduction counting in `re:run()` error cases.\n\n  Own Id: OTP-16553","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.8.2.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-8-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A directory traversal vulnerability has been eliminated in erl_tar. erl_tar\n  will now refuse to extract symlinks that points outside the targeted\n  extraction directory and will return `{error,{Path,unsafe_symlink}}`. (Thanks\n  to Eric Meadows-Jönsson for the bug report and for suggesting a fix.)\n\n  Own Id: OTP-16441","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.8.2.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-8-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a loop when formatting terms using the control\n  sequences `p` or `P` and limiting the output with the option `chars_limit`.\n\n  Own Id: OTP-15875 Aux Id: ERL-967","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.8.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-8-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a failure when formatting binaries using the\n  control sequences `p` or `P` and limiting the output with the option\n  `chars_limit`.\n\n  Own Id: OTP-15847 Aux Id: ERL-957","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.8.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-8-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A bug in gen_statem has been fixed where the internal timeout message could\n  arrive as an info to the callback module during high load due to incorrect use\n  of asynchronous timer cancel.\n\n  Own Id: OTP-15295","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.8.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-8-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed a performance regression when reading files opened with the `compressed`\n  flag.\n\n  Own Id: OTP-15706 Aux Id: ERIERL-336","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.8 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug in the Erlang Pretty Printer: long atom names in combination with\n  `<<>>` could cause a crash.\n\n  Own Id: OTP-15592 Aux Id: ERL-818\n\n- Fix bugs that could cause wrong results or bad performance when formatting\n  lists of characters using the control sequences `p` or `P` and limiting the\n  output with the option `chars_limit`.\n\n  Own Id: OTP-15639","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Improved ETS documentation about safe table traversal and the partially bound\n  key optimization for `ordered_set`.\n\n  Own Id: OTP-15545 Aux Id: PR-2103, PR-2139\n\n- Optimize `calendar:gregorian_days_to_date/1`.\n\n  Own Id: OTP-15572 Aux Id: PR-2121\n\n- Optimize functions `calendar:rfc3339_to_system_time()` and\n  `calendar:system_time_to_rfc3339()`.\n\n  Own Id: OTP-15630","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.7.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-7-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Optimize pretty printing of terms. The slower behaviour was introduced in\n  Erlang/OTP 20.\n\n  Own Id: OTP-15573 Aux Id: ERIERL-306","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.7 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Document `bit_size` in match specifications and allow it in `ets:fun2ms`.\n\n  Own Id: OTP-15343 Aux Id: PR-1962\n\n- The `beam()` type in `beam_lib` is defined as\n  `module() | file:filename() | binary()`. The `t:module/0` is misleading.\n  Giving the module name as an atom will only work if the BEAM file is in a\n  current directory.\n\n  To avoid confusion, `t:module/0` has been removed from the type. That means\n  that there will be a Dialyzer warning for code that call `beam_lib` with an\n  atom as filename, but the calls will still work.\n\n  Own Id: OTP-15378 Aux Id: ERL-696\n\n- `unicode_util` crashed on certain emoji grapheme clusters in binary strings.\n\n  Own Id: OTP-15428 Aux Id: ERL-777\n\n- When an external fun was used, warnings for unused variables could be\n  suppressed.\n\n  Own Id: OTP-15437 Aux Id: ERL-762\n\n- Fix reduction count in lists:member/2\n\n  Own Id: OTP-15474 Aux Id: ERIERL-229","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- When specified, the `+{source,Name}` option will now override the actual file\n  name in stack traces, instead of only affecting the return value of\n  `Mod:module_info()`.\n\n  The `+deterministic` flag will also affect stack traces now, omitting all path\n  information except the file name, fixing a long-standing issue where\n  deterministic builds required deterministic paths.\n\n  Own Id: OTP-15245 Aux Id: ERL-706\n\n- List subtraction (The `--` operator) will now yield properly on large inputs.\n\n  Own Id: OTP-15371\n\n- `calendar:system_time_to_rfc3339/1,2` no longer remove trailing zeros from\n  fractions.\n\n  Own Id: OTP-15464","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.6 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The specs of `filename:basedir/2,3` are corrected.\n\n  Own Id: OTP-15252 Aux Id: ERL-667","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Let `dets:open_file()` exit with a `badarg` message if given a raw file name\n  (a binary).\n\n  Own Id: OTP-15253 Aux Id: OTP-13229, ERL-55\n\n- The `Format` argument of the formatting functions in modules `io` and `io_lib`\n  is accepted even if it is, for example, a list of binaries. This is how it\n  used to be before Erlang/OTP 21.0.\n\n  Own Id: OTP-15304","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.5.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug that could cause a crash when formatting a list of non-characters\n  using the control sequences `p` or `P` and limiting the output with the option\n  `chars_limit`.\n\n  Own Id: OTP-15159","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- `gen_statem` improvements.\n\n  When using an exception that is valid but not allowed in a state enter call,\n  the reason has been changed from `{bad_action_from_state_function,Action}` to\n  `{bad_state_enter_action_from_state_function,Action}`.\n\n  Timer parsing has been improved. Many erroneous timeout tuples was not handled\n  correctly.\n\n  The documentation has been updated, in particular the User's Guide and the\n  pointer to it from the Reference Manual is much more obvious.\n\n  Own Id: OTP-14015\n\n- The type specifications for [`file:posix/0`](`t:file:posix/0`) and\n  [`inet:posix/0`](`t:inet:posix/0`) have been updated according to which errors\n  file and socket operations should be able to return.\n\n  Own Id: OTP-14019 Aux Id: ERL-550\n\n- File operations used to accept [filenames](`t:file:name_all/0`) containing\n  null characters (integer value zero). This caused the name to be truncated and\n  in some cases arguments to primitive operations to be mixed up. Filenames\n  containing null characters inside the filename are now _rejected_ and will\n  cause primitive file operations to fail.\n\n  Also environment variable operations used to accept\n  [names](`t:os:env_var_name/0`) and [values](`t:os:env_var_value/0`) of\n  environment variables containing null characters (integer value zero). This\n  caused operations to silently produce erroneous results. Environment variable\n  names and values containing null characters inside the name or value are now\n  _rejected_ and will cause environment variable operations to fail.\n\n  Primitive environment variable operations also used to accept the `$=`\n  character in environment variable names causing various problems. `$=`\n  characters in environment variable names are now also _rejected_.\n\n  Also `os:cmd/1` now reject null characters inside its\n  [command](`t:os:os_command/0`).\n\n  `erlang:open_port/2` will also reject null characters inside the port name\n  from now on.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14543 Aux Id: ERL-370\n\n- Make `io_lib:unscan_format/1` work with pad char and default precision.\n\n  Own Id: OTP-14958 Aux Id: PR-1735\n\n- The control sequence modifiers `t` and `l` can be used together in the same\n  control sequence which makes it possible to have Unicode atoms and no\n  detection of printable character lists at the same time.\n\n  Own Id: OTP-14971 Aux Id: PR-1743\n\n- Fix a bug in the Erlang code linter: the check of guard expressions no longer\n  returns `false` if the map syntax is used. The bug affected the Erlang shell,\n  the Debugger, and other modules evaluating abstract code.\n\n  Own Id: OTP-15035 Aux Id: ERL-613\n\n- A sys debug fun of type \\{Fun,State\\} should not be possible to install twice.\n  This was, however, possible if the current State was 'undefined', which was\n  mistaken for non-existing fun. This has been corrected.\n\n  Own Id: OTP-15049\n\n- Fix `io:putchars/2` stacktrace rewriting at errors to point to a valid\n  function.\n\n  Own Id: OTP-15101","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The `gen_server` has gotten a new callback `handle_continue/2` for check\n  pointing the state. This is useful at least when implementing behaviours on\n  top of `gen_server` and for some start up scenarios.\n\n  Own Id: OTP-13019 Aux Id: PR-1490\n\n- The semantics of timeout parameter `{clean_timeout,infinity}` to\n  `gen_statem:call/3` has been changed to use a proxy process for the call. With\n  this change `clean_timeout` implicates a proxy process with no exceptions.\n  This may be a hard to observe incompatibility: in the presence of network\n  problems a late reply could arrive in the caller's message queue when catching\n  errors. That will not happen after this correction.\n\n  The semantics of timeout parameter `infinity` has not been changed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13073 Aux Id: PR-1595\n\n- A new logging API is added to Erlang/OTP, see the `m:logger` manual page, and\n  section [Logging](`e:kernel:logger_chapter.md`) in the Kernel User's Guide.\n\n  Calls to `error_logger` are automatically redirected to the new API, and\n  legacy error logger event handlers can still be used. It is, however,\n  recommended to use the Logger API directly when writing new code.\n\n  Notice the following potential incompatibilities:\n\n  - Kernel configuration parameters `error_logger` still works, but is overruled\n    if the default handler's output destination is configured with Kernel\n    configuration parameter `logger`.\n\n    In general, parameters for configuring error logger are overwritten by new\n    parameters for configuring Logger.\n\n  - The concept of SASL error logging is deprecated, meaning that by default the\n    SASL application does not affect which log events are logged.\n\n    By default, supervisor reports and crash reports are logged by the default\n    Logger handler started by Kernel, and end up at the same destination\n    (terminal or file) as other standard log event from Erlang/OTP.\n\n    Progress reports are not logged by default, but can be enabled by setting\n    the primary log level to info, for example with the Kernel configuration\n    parameter `logger_level`.\n\n    To obtain backwards compatibility with the SASL error logging functionality\n    from earlier releases, set Kernel configuration parameter\n    `logger_sasl_compatible` to `true`. This prevents the default Logger handler\n    from logging any supervisor-, crash-, or progress reports. Instead, SASL\n    adds a separate Logger handler during application start, which takes care of\n    these log events. The SASL configuration parameters `sasl_error_logger` and\n    `sasl_errlog_type` specify the destination (terminal or file) and severity\n    level to log for these events.\n\n  Since Logger is new in Erlang/OTP 21.0, we do reserve the right to introduce\n  changes to the Logger API and functionality in patches following this release.\n  These changes might or might not be backwards compatible with the initial\n  version.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13295\n\n- Add functions `calendar:system_time_to_local_time/2` and\n  `calendar:system_time_to_universal_time/2`.\n\n  Own Id: OTP-13413\n\n- Functions `rand:uniform_real/0` and `rand:uniform_real_s/1` have been added.\n  They produce uniformly distributed numbers in the range `0.0 =< X < 1.0` that\n  are as close to random real numbers as Normalized IEEE 754 Double Precision\n  allows. Because the random real number exactly `0.0` is infinitely improbable\n  they will never return exactly `0.0`.\n\n  These properties are useful when you need to call for example `math:log(X)` or\n  `1 / X` on a random value `X`, since that will never fail with a number from\n  these new functions.\n\n  Own Id: OTP-13764 Aux Id: PR-1574\n\n- Added maps:iterator/0 and maps:next/1 to be used for iterating over the\n  key-value associations in a map.\n\n  Own Id: OTP-14012\n\n- Changed the default behaviour of `.erlang` loading: `.erlang` is no longer\n  loaded from the current directory. `c:erlangrc(PathList)` can be used to\n  search and load an `.erlang` file from user specified directories.\n\n  `escript`, `erlc`, `dialyzer` and `typer` no longer load an `.erlang` at all.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14439\n\n- Added new uri_string module to stdlib for handling URIs (RFC 3986).\n\n  Own Id: OTP-14496\n\n- Update Unicode specification to version 10.0.\n\n  Own Id: OTP-14503\n\n- `filelib:wildcard()` now allows characters with a special meaning to be\n  escaped using backslashes.\n\n  This is an incompatible change, but note that the use of backslashes in\n  wildcards would already work differently on Windows and Unix. Existing calls\n  to `filelib:wildcard()` needs to be updated. On Windows, directory separators\n  must always be written as a slash.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14577\n\n- The supervisor now stores its child specifications in a map instead of a list.\n  This causes a significant improvement when starting many children under a\n  non-simple_one_for_one supervisor.\n\n  Own Id: OTP-14586\n\n- The `base64` module is optimized.\n\n  Note that the functions `encode/1`, `decode/1`, and `mime_decode/1` fail\n  unless called with an argument of the documented type. They used to accept any\n  `t:iodata/0`.\n\n  Own Id: OTP-14624 Aux Id: PR-1565\n\n- Add function `lists:search/2`.\n\n  Own Id: OTP-14675 Aux Id: PR-102\n\n- uri_string module extended with functions for handling\n  application/x-www-form-urlencoded query strings based on the HTML5\n  specification.\n\n  Own Id: OTP-14747\n\n- Add functions `calendar:rfc3339_to_system_time/1,2` and\n  `calendar:system_time_to_rfc3339/1,2`.\n\n  Own Id: OTP-14764\n\n- The stack traces returned by the functions of the `erl_eval` module more\n  accurately reflect where the exception occurred.\n\n  Own Id: OTP-14826 Aux Id: PR 1540\n\n- Add options `atime`, `mtime`, `ctime`, `uid`, and `gid` to the\n  `erl_tar:add/3,4` functions.\n\n  Own Id: OTP-14834 Aux Id: PR 1608\n\n- Added `ets:whereis/1` for retrieving the table identifier of a named table.\n\n  Own Id: OTP-14884\n\n- Improved URI normalization functions in the uri_string module.\n\n  Own Id: OTP-14910\n\n- The new functions `io_lib:fwrite/3` and `io_lib:format/3` take a third\n  argument, an option list. The only option is `chars_limit`, which is used for\n  limiting the number of returned characters. The limit is soft, which means\n  that the number of returned characters exceeds the limit with at most a\n  smallish amount. If the limit is set, the functions `format/3` and `fwrite/3`\n  try to distribute the number of characters evenly over the control sequences\n  `pPswW`. Furthermore, the control sequences `pPwP` try to distribute the\n  number of characters evenly over substructures.\n\n  A modification of the control sequences `pPwW` is that even if there is no\n  limit on the number of returned characters, all associations of a map are\n  printed to the same depth. The aim is to give a more consistent output as the\n  order of map keys is not defined. As before, if the depth is less than the\n  number of associations of a map, the selection of associations to print is\n  arbitrary.\n\n  Own Id: OTP-14983\n\n- Add functions `ordsets:is_empty/1` and `sets:is_empty/1`.\n\n  Own Id: OTP-14996 Aux Id: ERL-557, PR-1703\n\n- Improve performance of `string:uppercase/1`, `string:lowercase/1` and\n  `string:casefold/1` when handling ASCII characters.\n\n  Own Id: OTP-14998\n\n- External funs with literal values for module, name, and arity (e.g.\n  `erlang:abs/1`) are now treated as literals. That means more efficient code\n  that produces less garbage on the heap.\n\n  Own Id: OTP-15003\n\n- sys:statistics(Pid,get) did not report 'out' messages from gen_server. This is\n  now corrected.\n\n  Own Id: OTP-15047\n\n- A sys debug function can now have the format \\{Id,Fun,State\\} in addition to\n  the old \\{Fun,State\\}. This allows installing multiple instances of a debug\n  fun.\n\n  Own Id: OTP-15048\n\n- The `lib` module is removed:\n\n  - `lib:error_message/2` is removed.\n  - `lib:flush_receive/0` is removed.\n  - `lib:nonl/1` is removed.\n  - `lib:progname/0` is replaced by `ct:get_progname/0`.\n  - `lib:send/2` is removed.\n  - `lib:sendw/2` is removed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15072 Aux Id: PR 1786, OTP-15114\n\n- Function `ets:delete_all_objects/1` now yields the scheduler thread for large\n  tables that take significant time to clear. This to improve real time\n  characteristics of other runnable processes.\n\n  Own Id: OTP-15078\n\n- In control sequences of the functions `io:fwrite/2,3` and `io_lib:fwrite/2,3`\n  containing `p` or `P`, a field width of value `0` means that no line breaks\n  are inserted. This is in contrast to the old behaviour, where `0` used to\n  insert line breaks after every subterm. To insert line breaks after every\n  subterm, a field width of value `1` can be used.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-15103 Aux Id: ERL-607","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.4.5.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-4-5-1"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- List subtraction (The `--` operator) will now yield properly on large inputs.\n\n  Own Id: OTP-15371","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.4.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-4-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The `Module:init/1` function in `gen_statem` may return an actions list\n  containing any action, but an erroneous check only allowed state enter actions\n  so e.g `{next_event,internal,event}` caused a server crash. This bug has been\n  fixed.\n\n  Own Id: OTP-13995","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.4.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-4-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Correct `filelib:find_source()` and `filelib:find_file()` to by default also\n  search one level below `src`. This is in accordance with the Design Principles\n  which states that an application can have Erlang source files one level below\n  the `src` directory.\n\n  Own Id: OTP-14832 Aux Id: ERL-527\n\n- The contract of `erl_tar:table/2` is corrected.\n\n  Own Id: OTP-14860 Aux Id: PR 1670\n\n- Correct a few contracts.\n\n  Own Id: OTP-14889\n\n- Fix string:prefix/2 to handle an empty string as second argument.\n\n  Own Id: OTP-14942 Aux Id: PR-1702","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.4.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-4-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Make `ets:i/1` exit cleaner when ^D is input while browsing a table. Only the\n  old Erlang shell is affected ([erl](`e:erts:erl_cmd.md`) flag `-oldshell`).\n\n  Own Id: OTP-14663\n\n- Fixed handling of windows UNC paths in module `filename`.\n\n  Own Id: OTP-14693","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Improve performance of the new string functionality when handling ASCII\n  characters.\n\n  Own Id: OTP-14670\n\n- Added a clarification to the documentation of `unicode:characters_to_list/2`.\n\n  Own Id: OTP-14798","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.4.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-4-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a bug in the Erlang shell where recursively defined records with typed\n  fields could cause a loop.\n\n  Own Id: OTP-14488 Aux Id: PR-1489\n\n- Make edlin handle grapheme clusters instead of codepoints to improve the\n  handling multi-codepoints characters.\n\n  Own Id: OTP-14542\n\n- There could be false warnings for `erlang:get_stacktrace/0` being used outside\n  of a `try` block when using multiple `catch` clauses.\n\n  Own Id: OTP-14600 Aux Id: ERL-478","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The Erlang code linter no longer checks that the functions mentioned in\n  `nowarn_deprecated_function` options are declared in the module.\n\n  Own Id: OTP-14378\n\n- General Unicode improvements.\n\n  Own Id: OTP-14462","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.4.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-4-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A bug in `proc_lib:format()` introduced in Erlang/OTP 20.0 is corrected.\n\n  Own Id: OTP-14482 Aux Id: PR-1488\n\n- Fix string:len/1 to be compatible with previous versions.\n\n  Own Id: OTP-14487 Aux Id: ERIERL-40\n\n- In OTP-20.0, the behavior of c, make, and ct_make was changed so that in some\n  cases the beam files by default would be written to the directory where the\n  source files were found. This is now changed back to the old behavior so beam\n  files are by default written to current directory.\n\n  Own Id: OTP-14489 Aux Id: ERL-438","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- For many releases, it has been legal to override a BIF with a local function\n  having the same name. However, calling a local function with the same name as\n  guard BIF as filter in a list comprehension was not allowed.\n\n  Own Id: OTP-13690\n\n- A new (default) pseudo-random number generator algorithm Xoroshiro116+ has\n  been implemented in the `rand` module.\n\n  The old algorithm implementations had a number of flaws so they are all\n  deprecated, but corrected versions of two of them have been added. See the\n  documentation.\n\n  Own Id: OTP-14295 Aux Id: PR-1372\n\n- The Erlang shell, `qlc:string_to_handle()`, and the Debugger (the Evaluator\n  area and Edit variable window of the Bindings area) can parse pids, ports,\n  references, and external funs, as long as they can be created in the running\n  system.\n\n  Own Id: OTP-14296\n\n- Internal code change: Calls to `catch` followed by a call to\n  `erlang:get_stacktrace/0` has been rewritten to use `try` instead of `catch`\n  to make the code future-proof.\n\n  Own Id: OTP-14400\n\n- The `ms_transform` module, used by `ets:fun2ms/1` and `dbg:fun2ms/1`,\n  evaluates constant arithmetic expressions. This is necessary since the Erlang\n  compiler, which normally evaluates constant expressions, does not recognize\n  the format generated by `ms_transform`.\n\n  Own Id: OTP-14454 Aux Id: ERIERL-29\n\n- The state machine engine `gen_statem` can now handle generic time-outs\n  (multiple named) as well as absolute time-out time. See the documentation.\n\n  The `gen_statem` callback `Module:init/1` has become mandatory to harmonize\n  with other `gen_*` modules. This may be an incompatibility for `gen_statem`\n  callback modules that use `gen_statem:enter_loop/4-6`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14531","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Improved unicode support for strings. Added normalization functions in the\n  `unicode` module. Extended the `string` module API with new functions with\n  improved unicode handling and that works on grapheme clusters. The new\n  functions operates on the [`unicode:chardata()`](`t:unicode:chardata/0`) type,\n  thus they also accept `UTF-8 binaries` as input.\n\n  The old string API have been marked as obsolete. The return values have been\n  changed for some error cases.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10289 Aux Id: OTP-10309\n\n- There are two new guard BIFs '[`floor/1`](`floor/1`)' and\n  '[`ceil/1`](`ceil/1`)'. They both return integers. In the '`math`' module,\n  there are two new BIFs with the same names that return floating point values.\n\n  Own Id: OTP-13692\n\n- Making code_change, terminate and handle_info callbacks optional in the OTP\n  behaviours.\n\n  Own Id: OTP-13801\n\n- The support for Dets files created with Erlang/OTP R7 and earlier is removed.\n\n  Own Id: OTP-13830\n\n- Replaced usage of deprecated symbolic [`time unit`](`t:erlang:time_unit/0`)\n  representations.\n\n  Own Id: OTP-13831 Aux Id: OTP-13735\n\n- The function `fmod/2` has been added to the `math` module.\n\n  Own Id: OTP-14000\n\n- The EXIT signals received from processes using `proc_lib` now looks like EXIT\n  signals from processes that were spawned using `spawn_link`. In particular,\n  that means that the stack trace is now included in the EXIT signal so that it\n  can see where the process crashed.\n\n  Own Id: OTP-14001\n\n- `sets:add_element/2` is faster when adding an element that is already present,\n  and `sets:del_element/2` is faster when the element to be deleted is not\n  present. This optimization can make certain operations, such as sets:union/2\n  with many overlapping elements, up to two orders of magnitude faster.\n\n  Own Id: OTP-14035\n\n- Add information in doc about supervisor shutdown reason when maximum restart\n  frequency is reached.\n\n  Own Id: OTP-14037 Aux Id: PR-1233\n\n- Added `rand:jump/[0|1]` functions.\n\n  Own Id: OTP-14038 Aux Id: PR-1235\n\n- Functions for detecting changed code has been added. `code:modified_modules/0`\n  returns all currently loaded modules that have changed on disk.\n  `code:module_status/1` returns the status for a module. In the shell and in\n  `c` module, `mm/0` is short for `code:modified_modules/0`, and `lm/0` reloads\n  all currently loaded modules that have changed on disk.\n\n  Own Id: OTP-14059\n\n- Each assert macro in `assert.hrl` now has a corresponding version with an\n  extra argument, for adding comments to assertions. These can for example be\n  printed as part of error reports, to clarify the meaning of the check that\n  failed.\n\n  Own Id: OTP-14066\n\n- `error_logger_tty_h` and `error_logger_file_h` now inserts the node\n  information for nonlocal messages before the message itself instead of after,\n  both for readability and so as not to change the line termination property at\n  the end of the message.\n\n  Own Id: OTP-14068\n\n- The Erlang code linter checks for badly formed type constraints.\n\n  Own Id: OTP-14070 Aux Id: PR-1214\n\n- By default, there will now be a warning when `export_all` is used. The warning\n  can be disabled using `nowarn_export_all`.\n\n  Own Id: OTP-14071\n\n- When a `gen_server` process crashes, the stacktrace for the client will be\n  printed to facilitate debugging.\n\n  Own Id: OTP-14089\n\n- Optimized ETS operations by changing table identifier type from integer to\n  reference. The reference enables a more direct mapping to the table with less\n  potential lock contention and makes especially creation and deletion of tables\n  scale much better.\n\n  The change of the opaque type for the ETS table identifiers may cause failure\n  in code that make faulty assumptions about this opaque type.\n\n  > #### Note {: .info }\n  >\n  > The number of tables stored at one Erlang node _used_ to be limited. This is\n  > no longer the case (except by memory usage). The previous default limit was\n  > about 1400 tables and could be increased by setting the environment variable\n  > `ERL_MAX_ETS_TABLES` before starting the Erlang runtime system. This hard\n  > limit has been removed, but it is currently useful to set the\n  > `ERL_MAX_ETS_TABLES` anyway. It should be set to an approximate of the\n  > maximum amount of tables used. This since an internal table for named tables\n  > is sized using this value. If large amounts of named tables are used and\n  > `ERL_MAX_ETS_TABLES` hasn't been increased, the performance of named table\n  > lookup will degrade.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14094\n\n- `take/2` has been added to `dict`, `orddict`, and `gb_trees`. `take_any/2` has\n  been added to `gb_trees`.\n\n  Own Id: OTP-14102\n\n- Extend gen_event API to handle options as well.\n\n  Own Id: OTP-14123\n\n- Advice on how to tune the supervisor restart frequency (intensity and period)\n  is added to System Documentation - Design Principles - Supervisor Behaviour.\n\n  Own Id: OTP-14168 Aux Id: PR-1289\n\n- gen_fsm is deprecated and is replaced by gen_statem, however for backwards\n  compatibility reasons gen_fsm may continue to exist as an undocumented feature\n  for quite some time.\n\n  Own Id: OTP-14183\n\n- The shell functions `c/1` and `c/2` have been extended so that if the argument\n  is a module name instead of a file name, it automatically locates the .beam\n  file and the corresponding source file, and then recompiles the module using\n  the same compiler options (plus any options passed to c/2). If compilation\n  fails, the old beam file is preserved. Also adds `c(Mod, Opts, Filter)`, where\n  the Filter argument allows you to remove old compiler options before the new\n  options are added.\n\n  New utility functions `file_find/2/3` and `find_source/1/2/3` have been added\n  to `filelib`.\n\n  Own Id: OTP-14190\n\n- `erl_tar` in previous versions of OTP only supports the USTAR format. That\n  limited path names to at most 255 bytes, and did not support Unicode\n  characters in names in a portable way.\n\n  `erl_tar` now has support for reading tar archives in the formats currently in\n  common use, such as v7, STAR, USTAR, PAX, and GNU tar's extensions to the\n  STAR/USTAR format. When writing tar archives, `erl_tar` can now write them in\n  the `PAX` format if necessary (for example, to support very long filenames or\n  filenames with Unicode characters). If possible, `erl_tar` will still write\n  tar archives in the USTAR for maximum portability.\n\n  Own Id: OTP-14226\n\n- `base64:mime_decode/1` has been optimized so that it is now almost as fast\n  as`base64:decode/1`; it used be noticeably slower.\n\n  Own Id: OTP-14245\n\n- `erl_tar` will now strip any leading '`/`' from pathnames when extracting\n  files from a tar archive and write a message to the error logger. There is\n  also new check for directory traversal attacks; if a relative path points\n  above the current working directory the extraction will be aborted.\n\n  Own Id: OTP-14278\n\n- Miscellaneous updates due to atoms containing arbitrary Unicode characters.\n\n  Own Id: OTP-14285\n\n- The Crypto application now supports generation of cryptographically strong\n  random numbers (floats < 1.0 and integer arbitrary ranges) as a plugin to the\n  'rand' module.\n\n  Own Id: OTP-14317 Aux Id: PR-1372\n\n- Add new function `ets:select_replace/2` which performs atomic\n  \"compare-and-swap\" operations for ETS objects using match specifications.\n\n  Own Id: OTP-14319 Aux Id: PR-1076\n\n- The Erlang code linter checks for bad `dialyzer` attributes. It also checks\n  for bad type variables in type declarations.\n\n  Own Id: OTP-14323\n\n- Two new functions has been implemented in the `rand` module; `normal/2` and\n  `normal_s/3`, that both produce normal distribution (pseudo) random numbers\n  with mean value and variance according to arguments.\n\n  Own Id: OTP-14328 Aux Id: PR-1382\n\n- Upgraded the OTP internal PCRE library from version 8.33 to version 8.40. This\n  library is used for implementation of the `m:re` regular expressions module.\n\n  Besides various bug fixes, the new version allows for better stack protection.\n  In order to utilize this feature, the stack size of normal scheduler threads\n  is now by default set to 128 kilo words on all platforms. The stack size of\n  normal scheduler threads can be set upon system start by passing the\n  [`+sss`](`e:erts:erl_cmd.md#sched_thread_stack_size`) command line argument to\n  the [`erl`](`e:erts:erl_cmd.md`) command.\n\n  See\n  [http://pcre.org/original/changelog.txt](http://pcre.org/original/changelog.txt)\n  for information about changes made to PCRE between the versions 8.33 and 8.40.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-14331 Aux Id: ERL-208\n\n- Added function `re:version/0` which returns information about the OTP internal\n  PCRE version used for implementation of the `re` module.\n\n  Own Id: OTP-14347 Aux Id: PR-1412\n\n- The format of debug information that is stored in BEAM files (when\n  `debug_info` is used) has been changed. The purpose of the change is to better\n  support other BEAM-based languages such as Elixir or LFE.\n\n  All tools included in OTP (dialyzer, debugger, cover, and so on) will handle\n  both the new format and the previous format. Tools that retrieve the debug\n  information using `beam_lib:chunk(Beam, [abstract_code])` will continue to\n  work with both the new and old format. Tools that call\n  `beam_lib:chunk(Beam, [\"Abst\"])` will not work with the new format.\n\n  For more information, see the description of `debug_info` in the documentation\n  for `beam_lib` and the description of the `{debug_info,{Backend,Data}}` option\n  in the documentation for `compile`.\n\n  Own Id: OTP-14369 Aux Id: PR-1367\n\n- Add option hibernate_after to gen_server, gen_statem and gen_event. Also added\n  to the deprecated gen_fsm behaviour.\n\n  Own Id: OTP-14405\n\n- The size of crash reports created by `gen_server`, `gen_statem` and `proc_lib`\n  is limited with aid of the Kernel application variable\n  `error_logger_format_depth`. The purpose is to limit the size of the messages\n  sent to the `error_logger` process when processes with huge message queues or\n  states crash.\n\n  The crash report generated by `proc_lib` includes the new tag\n  `message_queue_len`. The neighbour report also includes the new tag\n  `current_stacktrace`. Finally, the neighbour report no longer includes the\n  tags `messages` and `dictionary`.\n\n  The new function `error_logger:get_format_depth/0` can be used to retrieve the\n  value of the Kernel application variable `error_logger_format_depth`.\n\n  Own Id: OTP-14417","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- An escript with only two lines would not work.\n\n  Own Id: OTP-14098\n\n- Characters (`$char`) can be used in constant pattern expressions. They can\n  also be used in types and contracts.\n\n  Own Id: OTP-14103 Aux Id: ERL-313\n\n- The signatures of `erl_parse:anno_to_term/1` and `erl_parse:anno_from_term/1`\n  are corrected. Using these functions no longer results in false Dialyzer\n  warnings.\n\n  Own Id: OTP-14131\n\n- Pretty-printing of maps is improved.\n\n  Own Id: OTP-14175 Aux Id: seq13277\n\n- If any of the following functions in the `zip` module crashed, a file would be\n  left open: `extract()`, `unzip()`, `create()`, or `zip()`. This has been\n  corrected.\n\n  A `zip` file having a \"Unix header\" could not be unpacked.\n\n  Own Id: OTP-14189 Aux Id: ERL-348, ERL-349\n\n- Improve the Erlang shell's tab-completion of long names.\n\n  Own Id: OTP-14200 Aux Id: ERL-352\n\n- The reference manual for `sys` had some faulty information about the\n  'get_modules' message used by processes where modules change dynamically\n  during runtime. The documentation is now corrected.\n\n  Own Id: OTP-14248 Aux Id: ERL-367","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Bug fixes, new features and improvements to gen_statem:\n\n  A new type init_result/1 has replaced the old init_result/0, so if you used\n  that old type (that was never documented) you have to change your code, which\n  may be regarded as a potential incompatibility.\n\n  Changing callback modes after code change did not work since the new callback\n  mode was not recorded. This bug has been fixed.\n\n  The event types state_timeout and \\{call,From\\} could not be generated with a\n  \\{next_event,EventType,EventContent\\} action since they did not pass the\n  runtime type check. This bug has now been corrected.\n\n  State entry calls can now be repeated using (new) state callback returns\n  \\{repeat*state,...\\}, \\{repeat_state_and_data,*\\} and repeat_state_and_data.\n\n  There have been lots of code cleanup in particular regarding timer handling.\n  For example is async cancel_timer now used. Error handling has also been\n  cleaned up.\n\n  To align with probable future changes to the rest of gen\\_\\*, terminate/3 has\n  now got a fallback and code_change/4 is not mandatory.\n\n  Own Id: OTP-14114\n\n- `filename:safe_relative_path/1` to sanitize a relative path has been added.\n\n  Own Id: OTP-14215","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- When a simple_one_for_one supervisor is shutting down, and a child exits with\n  an exit reason of the form \\{shutdown, Term\\}, an error report was earlier\n  printed. This is now corrected.\n\n  Own Id: OTP-13907 Aux Id: PR-1158, ERL-163\n\n- Allow empty list as parameter of the fun used with `dbg:fun2ms/1`.\n\n  Own Id: OTP-13974","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The new behaviour gen_statem has been improved with 3 new features: the\n  possibility to use old style non-proxy timeouts for gen_statem:call/2,3, state\n  entry code, and state timeouts. These are backwards compatible. Minor code and\n  documentation improvements has been performed including a borderline semantics\n  correction of timeout zero handling.\n\n  Own Id: OTP-13929 Aux Id: PR-1170, ERL-284","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The `zip:unzip/1,2` and `zip:extract/1,2` functions have been updated to\n  handle directory traversal exploits. Any element in the zip file that contains\n  a path that points to a directory above the top level working directory,\n  `cwd`, will instead be extracted in `cwd`. An error message is printed for any\n  such element in the zip file during the unzip operation. The `keep_old_files`\n  option determines if a file will overwrite a previous file with the same name\n  within the zip file.\n\n  Own Id: OTP-13633\n\n- Correct the contracts for `ets:match_object/1,3`.\n\n  Own Id: OTP-13721 Aux Id: PR-1113\n\n- Errors in type specification and Emacs template generation for\n  `gen_statem:code_change/4` has been fixed from bugs.erlang.org's Jira cases\n  ERL-172 and ERL-187.\n\n  Own Id: OTP-13746 Aux Id: ERL-172, ERL-187","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- gen_statem has been changed to set the callback mode for a server to what\n  Module:callback_mode/0 returns. This facilitates e.g code downgrade since the\n  callback mode now becomes a property of the currently active code, not of the\n  server process.\n\n  Exception handling from Module:init/1 has also been improved.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13752","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 3.0.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-0-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Correct a bug regarding typed records in the Erlang shell. The bug was\n  introduced in OTP-19.0.\n\n  Own Id: OTP-13719 Aux Id: ERL-182","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 3.0 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-3-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix a race bug affecting `dets:open_file/2`.\n\n  Own Id: OTP-13260 Aux Id: seq13002\n\n- Don't search for non-existing Map keys twice\n\n  For `maps:get/2,3` and `maps:find/2`, searching for an immediate key, e.g. an\n  atom, in a small map, the search was performed twice if the key did not exist.\n\n  Own Id: OTP-13459\n\n- Avoid stray corner-case math errors on Solaris, e.g. an error is thrown on\n  underflows in exp() and pow() when it shouldn't be.\n\n  Own Id: OTP-13531\n\n- Fix linting of map key variables\n\n  Map keys cannot be unbound and then used in parallel matching.\n\n  Example: `#{ K := V } = #{ k := K } = M.` This is illegal if `'K'` is not\n  bound.\n\n  Own Id: OTP-13534 Aux Id: ERL-135\n\n- Fixed a bug in re on openbsd where sometimes re:run would return an incorrect\n  result.\n\n  Own Id: OTP-13602\n\n- To avoid potential timer bottleneck on supervisor restart, timer server is no\n  longer used when the supervisor is unable to restart a child.\n\n  Own Id: OTP-13618 Aux Id: PR-1001\n\n- The Erlang code preprocessor (`epp`) can handle file names spanning over many\n  tokens. Example: `-include(\"a\" \"file\" \"name\").`.\n\n  Own Id: OTP-13662 Aux Id: seq13136","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The types of The Abstract Format in the `erl_parse` module have been refined.\n\n  Own Id: OTP-10292\n\n- Undocumented syntax for function specifications,\n  `-spec F/A :: Domain -> Range`, has been removed (without deprecation).\n\n  Using the `is_subtype(V, T)` syntax for constraints (in function\n  specifications) is no longer documented, and the newer syntax `V :: T` should\n  be used instead. The Erlang Parser still recognizes the `is_subtype` syntax,\n  and will continue to do so for some time.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11879\n\n- The '`random`' module has been deprecated. Use the '`rand`' module instead.\n\n  Own Id: OTP-12502 Aux Id: OTP-12501\n\n- Background: In record fields with a type declaration but without an\n  initializer, the Erlang parser inserted automatically the singleton type\n  `'undefined'` to the list of declared types, if that value was not present\n  there. That is, the record declaration:\n\n  \\-record(rec, \\{f1 :: float(), f2 = 42 :: integer(), f3 ::\n  some_mod:some_typ()\\}).\n\n  was translated by the parser to:\n\n  \\-record(rec, \\{f1 :: float() | 'undefined', f2 = 42 :: integer(), f3 ::\n  some_mod:some_typ() | 'undefined'\\}).\n\n  The rationale for this was that creation of a \"dummy\" `#rec{}` record should\n  not result in a warning from dialyzer that, for example, the implicit\n  initialization of the `#rec.f1` field violates its type declaration.\n\n  Problems: This seemingly innocent action has some unforeseen consequences.\n\n  For starters, there is no way for programmers to declare that e.g. only floats\n  make sense for the `f1` field of `#rec{}` records when there is no \"obvious\"\n  default initializer for this field. (This also affects tools like PropEr that\n  use these declarations produced by the Erlang parser to generate random\n  instances of records for testing purposes.)\n\n  It also means that dialyzer does not warn if e.g. an\n  [`is_atom/1`](`is_atom/1`) test or something more exotic like an\n  [`atom_to_list/1`](`atom_to_list/1`) call is performed on the value of the\n  `f1` field.\n\n  Similarly, there is no way to extend dialyzer to warn if it finds record\n  constructions where `f1` is not initialized to some float.\n\n  Last but not least, it is semantically problematic when the type of the field\n  is an opaque type: creating a union of an opaque and a structured type is very\n  problematic for analysis because it fundamentally breaks the opacity of the\n  term at that point.\n\n  Change: To solve these problems the parser will not automatically insert the\n  `'undefined'` value anymore; instead the user has the option to choose the\n  places where this value makes sense (for the field) and where it does not and\n  insert the `| 'undefined'` there manually.\n\n  Consequences of this change: This change means that dialyzer will issue a\n  warning for all places where records with uninitialized fields are created and\n  those fields have a declared type that is incompatible with `'undefined'`\n  (e.g. `t:float/0`). This warning can be suppressed easily by adding\n  `| 'undefined'` to the type of this field. This also adds documentation that\n  the user really intends to create records where this field is uninitialized.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12719\n\n- Remove deprecated functions in the modules `erl_scan` and `erl_parse`.\n\n  Own Id: OTP-12861\n\n- The pre-processor can now expand the ?FUNCTION_NAME and ?FUNCTION_ARITY\n  macros.\n\n  Own Id: OTP-13059\n\n- A new behaviour `gen_statem` has been implemented. It has been thoroughly\n  reviewed, is stable enough to be used by at least two heavy OTP applications,\n  and is here to stay. But depending on user feedback, we do not expect but\n  might find it necessary to make minor not backwards compatible changes into\n  OTP-20.0, so its state can be designated as \"not quite experimental\"...\n\n  The `gen_statem` behaviour is intended to replace `gen_fsm` for new code. It\n  has the same features and add some really useful:\n\n  - State code is gathered\n  - The state can be any term\n  - Events can be postponed\n  - Events can be self generated\n  - A reply can be sent from a later state\n  - There can be multiple sys traceable replies\n\n  The callback model(s) for `gen_statem` differs from the one for `gen_fsm`, but\n  it is still fairly easy to rewrite from `gen_fsm` to `gen_statem`.\n\n  Own Id: OTP-13065 Aux Id: PR-960\n\n- Optimize binary:split/2 and binary:split/3 with native BIF implementation.\n\n  Own Id: OTP-13082\n\n- Background: The types of record fields have since R12B been put in a separate\n  form by `epp:parse_file()`, leaving the record declaration form untyped. The\n  separate form, however, does not follow the syntax of type declarations, and\n  parse transforms inspecting `-type()` attributes need to know about the\n  special syntax. Since the compiler stores the return value of\n  `epp:parse_file()` as debug information in the abstract code chunk (`\"Abst\"`\n  or `abstract_code`), tools too need to know about the special syntax, if they\n  inspect `-type()` attributes in abstract code.\n\n  Change: No separate type form is created by `epp:parse_file()`, but the type\n  information is kept in the record fields. This means that all parse transforms\n  and all tools inspecting `-record()` declarations need to recognize\n  `{typed_record_field, Field, Type}`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13148\n\n- Unsized fields of the type `bytes` in binary generators are now forbidden.\n  (The other ways of writing unsized fields, such as `binary`, are already\n  forbidden.)\n\n  Own Id: OTP-13152\n\n- The type `t:map/0` is built-in, and cannot be redefined.\n\n  Own Id: OTP-13153\n\n- Let `dets:open_file()` exit with a `badarg` message if given a raw file name\n  (a binary).\n\n  Own Id: OTP-13229 Aux Id: ERL-55\n\n- Add `filename:basedir/2,3`\n\n  basedir returns suitable path(s) for 'user_cache', 'user_config', 'user_data',\n  'user_log', 'site_config' and 'site_data'. On linux and linux like systems the\n  paths will respect the XDG environment variables.\n\n  Own Id: OTP-13392\n\n- There are new preprocessor directives `-error(Term)` and `-warning(Term)` to\n  cause a compilation error or a compilation warning, respectively.\n\n  Own Id: OTP-13476\n\n- Optimize `'++'` operator and `lists:append/2` by using a single pass to build\n  a new list while checking for properness.\n\n  Own Id: OTP-13487\n\n- Add `maps:update_with/3,4` and `maps:take/2`\n\n  Own Id: OTP-13522 Aux Id: PR-1025\n\n- `lists:join/2` has been added. Similar to `string:join/2` but works with\n  arbitrary lists.\n\n  Own Id: OTP-13523\n\n- Obfuscate asserts to make Dialyzer shut up.\n\n  Own Id: OTP-13524 Aux Id: PR-1002\n\n- Supervisors now explicitly add their callback module in the return from\n  sys:get_status/1,2. This is to simplify custom supervisor implementations. The\n  Misc part of the return value from sys:get_status/1,2 for a supervisor is now:\n\n  \\[\\{data, [\\{\"State\", State\\}]\\},\\{supervisor,\\[\\{\"Callback\",Module\\}]\\}]\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-13619 Aux Id: PR-1000\n\n- Relax translation of initial calls in `proc_lib`, i.e. remove the restriction\n  to only do the translation for `gen_server` and `gen_fsm`. This enables user\n  defined `gen` based generic callback modules to be displayed nicely in `c:i()`\n  and observer.\n\n  Own Id: OTP-13623\n\n- The function `queue:lait/1` (misspelling of `liat/1`) is now deprecated.\n\n  Own Id: OTP-13658","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.8.0.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-8-0-1"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- List subtraction (The `--` operator) will now yield properly on large inputs.\n\n  Own Id: OTP-15371","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.8 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix evaluation in matching of bound map key variables in the interpreter.\n\n  Prior to this patch, the following code would not evaluate:\n  `X = key,(fun(#{X := value}) -> true end)(#{X => value})`\n\n  Own Id: OTP-13218\n\n- Fix `erl_eval` not using non-local function handler.\n\n  Own Id: OTP-13228 Aux Id: ERL-32\n\n- The Erlang Code Linter no longer crashes if there is a `-deprecated()`\n  attribute but no `-module()` declaration.\n\n  Own Id: OTP-13230 Aux Id: ERL-62\n\n- The timestamp in the result returned by `dets:info(Tab, safe_fixed)` was\n  unintentionally broken as a result of the time API rewrites in OTP 18.0. This\n  has now been fixed.\n\n  Own Id: OTP-13239 Aux Id: OTP-11997\n\n- A rare race condition in `beam_lib` when using encrypted abstract format has\n  been eliminated.\n\n  Own Id: OTP-13278\n\n- Improved maps:with/2 and maps:without/2 algorithms\n\n  The new implementation speeds up the execution significantly for all sizes of\n  input.\n\n  Own Id: OTP-13376","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Time warp safety improvements.\n\n  Introduced the options `monotonic_timestamp`, and `strict_monotonic_timestamp`\n  to the trace, sequential trace, and system profile functionality. This since\n  the already existing `timestamp` option is not time warp safe.\n\n  Introduced the option `safe_fixed_monotonic_time` to `ets:info/2` and\n  `dets:info/2`. This since the already existing `safe_fixed` option is not time\n  warp safe.\n\n  Own Id: OTP-13222 Aux Id: OTP-11997\n\n- In the shell Ctrl+W (delete word) will no longer consider \".\" as being part of\n  a word.\n\n  Own Id: OTP-13281","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.7 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The Erlang Pretty Printer uses `::` for function type constraints.\n\n  A bug concerning pretty printing of annotated type union elements in map pair\n  types has been fixed.\n\n  Some minor issues regarding the documentation of types and specs have been\n  corrected.\n\n  Own Id: OTP-13084\n\n- The shell command `rp` prints strings as lists of integers if pretty printing\n  of lists is set to `false`.\n\n  Own Id: OTP-13145\n\n- The shell would crash if a bit syntax expression with conflicting types were\n  given (e.g. if a field type was given as '`integer-binary`'). (Thanks to\n  Aleksei Magusev for reporting this bug.)\n\n  Own Id: OTP-13157\n\n- The `rand:export_seed/0` would never return '`undefined`' even if no seed has\n  previously been created. Fixed to return '`undefined`' if there is no seed in\n  the process dictionary.\n\n  Own Id: OTP-13162","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Add support for the Delete, Home and End keys in the Erlang shell.\n\n  Own Id: OTP-13032\n\n- `beam_lib:all_chunks/1` and `beam_lib:build_module/1` have been documented.\n\n  Own Id: OTP-13063","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.6 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- In OTP 18.0, `qlc` does not handle syntax errors well. This bug has been\n  fixed.\n\n  Own Id: OTP-12946\n\n- Optimize zip:unzip/2 when uncompressing to memory.\n\n  Own Id: OTP-12950\n\n- The STDLIB reference manual is updated to show correct information about the\n  return value of `gen_fsm:reply/2`.\n\n  Own Id: OTP-12973\n\n- re:split2,3 and re:replace/3,4 now correctly handles pre-compiled patterns\n  that have been compiled using the '`unicode`' option.\n\n  Own Id: OTP-12977\n\n- Export `shell:catch_exception/1` as documented.\n\n  Own Id: OTP-12990","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- A mechanism for limiting the amount of text that the built-in error logger\n  events will produce has been introduced. It is useful for limiting both the\n  size of log files and the CPU time used to produce them.\n\n  This mechanism is experimental in the sense that it may be changed if it turns\n  out that it does not solve the problem it is supposed to solve. In that case,\n  there may be backward incompatible improvements to this mechanism.\n\n  See the documentation for the config parameter `error_logger_format_depth` in\n  the Kernel application for information about how to turn on this feature.\n\n  Own Id: OTP-12864","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix handling of single dot in filename:join/2\n\n  The reference manual says that filename:join(A,B) is equivalent to\n  filename:join(\\[A,B]). In some rare cases this turns out not to be true. For\n  example:\n\n  `filename:join(\"/a/.\",\"b\") -> \"/a/./b\"` vs\n  `filename:join([\"/a/.\",\"b\"]) -> \"/a/b\"`.\n\n  This has been corrected. A single dot is now only kept if it occurs at the\n  very beginning or the very end of the resulting path.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12158\n\n- The undocumented option `generic_debug` for `gen_server` has been removed.\n\n  Own Id: OTP-12183\n\n- erl_lint:icrt_export/4 has been rewritten to make the code really follow the\n  scoping rules of Erlang, and not just in most situations by accident.\n\n  Own Id: OTP-12186\n\n- Add 'trim_all' option to binary:split/3\n\n  This option can be set to remove \\_ALL\\_ empty parts of the result of a call\n  to binary:split/3.\n\n  Own Id: OTP-12301\n\n- Correct orddict(3) regarding evaluation order of `fold()` and `t:map/0`.\n\n  Own Id: OTP-12651 Aux Id: seq12832\n\n- Correct `maps` module error exceptions\n\n  Bad input to maps module function will now yield the following exceptions:\n\n  - \\{badmap, NotMap\\}, or\n  - badarg.\n\n  Own Id: OTP-12657\n\n- It is now possible to paste text in JCL mode (using Ctrl-Y) that has been\n  copied in the previous shell session. Also a bug that caused the JCL mode to\n  crash when pasting text has been fixed.\n\n  Own Id: OTP-12673\n\n- Add `uptime()` shell command.\n\n  Own Id: OTP-12752\n\n- Cache nowarn_bif_clash functions in erl_lint.\n\n  This patch stores nowarn_bif_clash in the lint record. By using erlc\n  +'\\{eprof,lint_module\\}' when compiling the erlang parser, we noticed the time\n  spent on nowarn_function/2 reduced from 30% to 0.01%.\n\n  Own Id: OTP-12754\n\n- Optimize the Erlang Code Linter by using the cached filename information.\n\n  Own Id: OTP-12772\n\n- If a child of a simple_one_for_one returns ignore from its start function no\n  longer store the child for any restart type. It is not possible to restart or\n  delete the child because the supervisor is a simple_one_for_one.\n\n  Own Id: OTP-12793\n\n- Make `ets:file2tab` preserve enabled `read_concurrency` and\n  `write_concurrency` options for tables.\n\n  Own Id: OTP-12814\n\n- There are many cases where user code needs to be able to distinguish between a\n  socket that was closed normally and one that was aborted. Setting the option\n  \\{show_econnreset, true\\} enables the user to receive ECONNRESET errors on\n  both active and passive sockets.\n\n  Own Id: OTP-12841","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Allow maps for supervisor flags and child specs\n\n  Earlier, supervisor flags and child specs were given as tuples. While this is\n  kept for backwards compatibility, it is now also allowed to give these\n  parameters as maps, see [sup_flags](`m:supervisor#sup_flags`) and\n  [child_spec](`m:supervisor#child_spec`).\n\n  Own Id: OTP-11043\n\n- A new system message, `terminate`, is added. This can be sent with\n  `sys:terminate/2,3`. If the receiving process handles system messages properly\n  it will terminate shortly after receiving this message.\n\n  The new function `proc_lib:stop/1,3` utilizes this new system message and\n  monitors the receiving process in order to facilitate a synchronous stop\n  mechanism for 'special processes'.\n\n  `proc_lib:stop/1,3` is used by the following functions:\n\n  - `gen_server:stop/1,3` (new)\n  - `gen_fsm:stop/1,3` (new)\n  - `gen_event:stop/1,3` (modified to be synchronous)\n  - `wx_object:stop/1,3` (new)\n\n  Own Id: OTP-11173 Aux Id: seq12353\n\n- Remove the `pg` module, which has been deprecated through OTP-17, is now\n  removed from the STDLIB application. This module has been marked experimental\n  for more than 15 years, and has largely been superseded by the `pg2` module\n  from the Kernel application.\n\n  Own Id: OTP-11907\n\n- New BIF: `erlang:get_keys/0`, lists all keys associated with the process\n  dictionary. Note: `erlang:get_keys/0` is auto-imported.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-12151 Aux Id: seq12521\n\n- Add three new functions to `io_lib`\\-- `scan_format/2`, `unscan_format/1`, and\n  `build_text/1`\\-- which expose the parsed form of the format control sequences\n  to make it possible to easily modify or filter the input to `io_lib:format/2`.\n  This can e.g. be used in order to replace unbounded-size control sequences\n  like `~w` or `~p` with corresponding depth-limited `~W` and `~P` before doing\n  the actual formatting.\n\n  Own Id: OTP-12167\n\n- Introduce the `erl_anno` module, an abstraction of the second element of\n  tokens and tuples in the abstract format.\n\n  Own Id: OTP-12195\n\n- Support variables as Map keys in expressions and patterns\n\n  Erlang will accept any expression as keys in Map expressions and it will\n  accept literals or bound variables as keys in Map patterns.\n\n  Own Id: OTP-12218\n\n- The last traces of Mnemosyne Rules have been removed.\n\n  Own Id: OTP-12257\n\n- Properly support maps in match_specs\n\n  Own Id: OTP-12270\n\n- New function `ets:take/2`. Works the same as `ets:delete/2` but also returns\n  the deleted object(s).\n\n  Own Id: OTP-12309\n\n- `string:tokens/2` is somewhat faster, especially if the list of separators\n  only contains one separator character.\n\n  Own Id: OTP-12422 Aux Id: seq12774\n\n- The documentation of the Abstract Format (in the ERTS User's Guide) has been\n  updated with types and specification. (Thanks to Anthony Ramine.)\n\n  The explicit representation of parentheses used in types of the abstract\n  format has been removed. Instead the new functions\n  `erl_parse:type_inop_prec()` and `erl_parse:type_preop_prec()` can be used for\n  inserting parentheses where needed.\n\n  Own Id: OTP-12492\n\n- Prevent zip:zip_open/\\[12] from leaking file descriptors if parent process\n  dies.\n\n  Own Id: OTP-12566\n\n- Add a new random number generator, see `rand` module. It have better\n  characteristics and an improved interface.\n\n  Own Id: OTP-12586 Aux Id: OTP-12501, OTP-12502\n\n- `filename:split/1` when given an empty binary will now return an empty list,\n  to make it consistent with return value when given an empty list.\n\n  Own Id: OTP-12716\n\n- Add `sync` option to `ets:tab2file/3`.\n\n  Own Id: OTP-12737 Aux Id: seq12805\n\n- Add functions `gb_sets:iterator_from()` and `gb_trees:iterator_from()`.\n  (Thanks to Kirill Kinduk.)\n\n  Own Id: OTP-12742\n\n- Add `maps:filter/2` to maps module.\n\n  Own Id: OTP-12745\n\n- Change some internal data structures to Maps in order to speed up compilation\n  time. Measured speed up is around 10%-15%.\n\n  Own Id: OTP-12774\n\n- Update `orddict` to use parameterized types and specs. (Thanks to UENISHI\n  Kota.)\n\n  Own Id: OTP-12785\n\n- The assert macros in `eunit` has been moved out to\n  `stdlib/include/assert.hrl`. This files get included by `eunit.hrl`. Thus,\n  nothing changes for eunit users, but the asserts can now also be included\n  separately.\n\n  Own Id: OTP-12808","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Behaviour of character types \\\\d, \\\\w and \\\\s has always been to not match\n  characters with value above 255, not 128, i.e. they are limited to ISO-Latin-1\n  and not ASCII\n\n  Own Id: OTP-12521","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- c:m/1 now displays the module's MD5 sum.\n\n  Own Id: OTP-12500\n\n- Make ets:i/1 handle binary input from IO server.\n\n  Own Id: OTP-12550","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The documentation of string:tokens/2 now explicitly specifies that adjacent\n  separator characters do not give any empty strings in the resulting list of\n  tokens.\n\n  Own Id: OTP-12036\n\n- Fix broken deprecation warnings in ssh application\n\n  Own Id: OTP-12187\n\n- Maps: Properly align union typed assoc values in documentation\n\n  Own Id: OTP-12190\n\n- Fix filelib:wildcard/2 when 'Cwd' ends with a dot\n\n  Own Id: OTP-12212\n\n- Allow `Name/Arity` syntax in maps values inside attributes.\n\n  Own Id: OTP-12213\n\n- Fix edlin to correctly save text killed with ctrl-u. Prior to this fix,\n  entering text into the Erlang shell and then killing it with ctrl-u followed\n  by yanking it back with ctrl-y would result in the yanked text being the\n  reverse of the original killed text.\n\n  Own Id: OTP-12224\n\n- If a callback function was terminated with exit/1, there would be no stack\n  trace in the ERROR REPORT produced by gen_server. This has been corrected.\n\n  To keep the backwards compatibility, the actual exit reason for the process is\n  not changed.\n\n  Own Id: OTP-12263 Aux Id: seq12733\n\n- Warnings produced by `ms_transform` could point out the wrong line number.\n\n  Own Id: OTP-12264","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Supports tar file creation on other media than file systems mounted on the\n  local machine.\n\n  The `erl_tar` api is extended with `erl_tar:init/3` that enables usage of user\n  provided media storage routines. A ssh-specific set of such routines is hidden\n  in the new function `ssh_sftp:open_tar/3` to simplify creating a tar archive\n  on a remote ssh server.\n\n  A chunked file reading option is added to `erl_tar:add/3,4` to save memory on\n  e.g small embedded systems. The size of the slices read from a file in that\n  case can be specified.\n\n  Own Id: OTP-12180 Aux Id: seq12715\n\n- I/O requests are optimized for long message queues in the calling process.\n\n  Own Id: OTP-12315","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The type spec of the FormFunc argument to sys:handle_debug/4 was erroneously\n  pointing to dbg_fun(). This is now corrected and the new type is format_fun().\n\n  Own Id: OTP-11800\n\n- Behaviors such as gen_fsm and gen_server should always invoke format_status/2\n  before printing the state to the logs.\n\n  Own Id: OTP-11967\n\n- The documentation of `dets:insert_new/2` has been corrected. (Thanks to Alexei\n  Sholik for reporting the bug.)\n\n  Own Id: OTP-12024\n\n- Printing a term with io_lib:format and control sequence w, precision P and\n  field width F, where F = printed length of the term, an exception would be raised.\n\n  These two problems are now corrected.\n\n  Own Id: OTP-12041\n\n- The documentation of `maps:values/1` has been corrected.\n\n  Own Id: OTP-12055\n\n- Expand shell functions in map expressions.\n\n  Own Id: OTP-12063","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Add maps:with/2\n\n  Own Id: OTP-12137","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.1.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-1-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- OTP-11850 fixed filelib:wildcard/1 to work with broken symlinks. This\n  correction, however, introduced problems since symlinks were no longer\n  followed for functions like filelib:ensure_dir/1, filelib:is_dir/1,\n  filelib:file_size/1, etc. This is now corrected.\n\n  Own Id: OTP-12054 Aux Id: seq12660","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- `filelib:wildcard(\"broken_symlink\")` would return an empty list if\n  \"broken_symlink\" was a symlink that did not point to an existing file.\n\n  Own Id: OTP-11850 Aux Id: seq12571\n\n- `erl_tar` can now handle files names that contain Unicode characters. See\n  \"UNICODE SUPPORT\" in the documentation for `erl_tar`.\n\n  When creating a tar file, `erl_tar` would sometime write a too short end of\n  tape marker. GNU tar would correctly extract files from such tar file, but\n  would complain about \"A lone zero block at...\".\n\n  Own Id: OTP-11854\n\n- When redefining and exporting the type `t:map/0` the Erlang Code Linter\n  (`erl_lint`) erroneously emitted an error. This bug has been fixed.\n\n  Own Id: OTP-11872\n\n- Fix evaluation of map updates in the debugger and erl_eval\n\n  Reported-by: José Valim\n\n  Own Id: OTP-11922","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The following native functions now bump an appropriate amount of reductions\n  and yield when out of reductions:\n\n  - `erlang:binary_to_list/1`\n  - `erlang:binary_to_list/3`\n  - `erlang:bitstring_to_list/1`\n  - `erlang:list_to_binary/1`\n  - `erlang:iolist_to_binary/1`\n  - `erlang:list_to_bitstring/1`\n  - `binary:list_to_bin/1`\n\n  Characteristics impact:\n\n  - **Performance** - The functions converting from lists got a performance loss\n    for very small lists, and a performance gain for very large lists.\n\n  - **Priority** - Previously a process executing one of these functions\n    effectively got an unfair priority boost. This priority boost depended on\n    the input size. The larger the input was, the larger the priority boost got.\n    This unfair priority boost is now lost.\n\n  Own Id: OTP-11888\n\n- Add `maps:get/3` to maps module. The function will return the supplied default\n  value if the key does not exist in the map.\n\n  Own Id: OTP-11951","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 2.0 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-2-0"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The option dupnames did not work as intended in re. When looking for names\n  with \\{capture, \\[Name, ...]\\}, re:run returned a random instance of the match\n  for that name, instead of the leftmost matching instance, which was what the\n  documentation stated. This is now corrected to adhere to the documentation.\n  The option \\{capture,all_names\\} along with a re:inspect/2 function is also\n  added to further help in using named subpatterns.\n\n  Own Id: OTP-11205\n\n- If option 'binary' was set for standard_input, then c:i() would hang if the\n  output was more than one page long - i.e. then input after \"(c)ontinue (q)uit\n  -->\" could not be read. This has been corrected. (Thanks to José Valim)\n\n  Own Id: OTP-11589\n\n- stdlib/lists: Add function droplast/1 This functions drops the last element of\n  a non-empty list. lists:last/1 and lists:droplast/1 are the dual of hd/1 and\n  tl/1 but for the end of a list. (Thanks to Hans Svensson)\n\n  Own Id: OTP-11677\n\n- Allow all auto imports to be suppressed at once. Introducing the\n  no_auto_import attribute: -compile(no_auto_import). Useful for code generation\n  tools that always use the qualified function names and want to avoid the auto\n  imported functions clashing with local ones. (Thanks to José Valim.)\n\n  Own Id: OTP-11682\n\n- supervisor_bridge does no longer report normal termination of children. The\n  reason is that in some cases, for instance when the restart strategy is\n  simple_one_for_one, the log could be completely overloaded with reports about\n  normally terminating processes. (Thanks to Artem Ocheredko)\n\n  Own Id: OTP-11685\n\n- The type annotations for alternative registries using the \\{via, Module,\n  Name\\} syntax for sup_name() and sup_ref() in the supervisor module are now\n  consistent with the documentation. Dialyzer should no longer complain about\n  valid supervisor:start_link() and supervisor:start_child() calls. (Thanks to\n  Caleb Helbling.)\n\n  Own Id: OTP-11707\n\n- Two Dets bugs have been fixed. When trying to open a short file that is not a\n  Dets file, the file was deleted even with just read access. Calling\n  `dets:is_dets_file/1` with a file that is not a Dets file, a file descriptor\n  was left open. (Thanks to Håkan Mattsson for reporting the bugs.)\n\n  Own Id: OTP-11709\n\n- Fix race bug in `ets:all`. Concurrent creation of tables could cause other\n  tables to not be included in the result. (Thanks to Florian Schintke for bug\n  report)\n\n  Own Id: OTP-11726\n\n- erl_eval now properly evaluates '=='/2 when it is used in guards. (Thanks to\n  José Valim)\n\n  Own Id: OTP-11747\n\n- Calls to proplists:get_value/3 are replaced by the faster lists:keyfind/3 in\n  io_lib_pretty. Elements in the list are always 2-tuples. (Thanks to Andrew\n  Thompson)\n\n  Own Id: OTP-11752\n\n- A qlc bug where filters were erroneously optimized away has been fixed. Thanks\n  to Sam Bobroff for reporting the bug.\n\n  Own Id: OTP-11758\n\n- A number of compiler errors where unusual or nonsensical code would crash the\n  compiler have been reported by Ulf Norell and corrected by Anthony Ramine.\n\n  Own Id: OTP-11770\n\n- Since Erlang/OTP R16B the Erlang Core Linter (`erl_lint`) has not emitted\n  errors when built-in types were re-defined. This bug has been fixed. (Thanks\n  to Roberto Aloi.)\n\n  Own Id: OTP-11772\n\n- The functions `sys:get_state/1,2` and `sys:replace_state/2,3` are fixed so\n  they can now be run while the process is sys suspended. To accomplish this,\n  the new callbacks `Mod:system_get_state/1` and `Mod:system_replace_state/2`\n  are added, which are also implemented by the generic behaviours `gen_server`,\n  `gen_event` and `gen_fsm`.\n\n  The potential incompatibility refers to:\n\n  - The previous behaviour of intercepting the system message and passing a\n    tuple of size 2 as the last argument to `sys:handle_system_msg/6` is no\n    longer supported.\n  - The error handling when `StateFun` in `sys:replace_state/2,3` fails is\n    changed from being totally silent to possibly (if the callback module does\n    not catch) throw an exception in the client process.\n\n  (Thanks to James Fish and Steve Vinoski)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11817","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Options to set match_limit and match_limit_recursion are added to re:run. The\n  option report_errors is also added to get more information when re:run fails\n  due to limits or compilation errors.\n\n  Own Id: OTP-10285\n\n- The pre-defined types `array/0`, `dict/0`, `digraph/0`, `gb_set/0`,\n  `gb_tree/0`, `queue/0`, `set/0`, and `tid/0` have been deprecated. They will\n  be removed in Erlang/OTP 18.0.\n\n  Instead the types [`array:array/0`](`t:array:array/0`),\n  [`dict:dict/0`](`t:dict:dict/0`), [`digraph:graph/0`](`t:digraph:graph/0`),\n  `gb_set:set/0`, `gb_tree:tree/0`, [`queue:queue/0`](`t:queue:queue/0`),\n  [`sets:set/0`](`t:sets:set/0`), and [`ets:tid/0`](`t:ets:tid/0`) can be used.\n  (Note: it has always been necessary to use [`ets:tid/0`](`t:ets:tid/0`).)\n\n  It is allowed in Erlang/OTP 17.0 to locally re-define the types `array/0`,\n  `dict/0`, and so on.\n\n  New types [`array:array/1`](`t:array:array/1`),\n  [`dict:dict/2`](`t:dict:dict/2`), [`gb_sets:set/1`](`t:gb_sets:set/1`),\n  [`gb_trees:tree/2`](`t:gb_trees:tree/2`),\n  [`queue:queue/1`](`t:queue:queue/1`), and [`sets:set/1`](`t:sets:set/1`) have\n  been added.\n\n  A compiler option, `nowarn_deprecated_type`, has been introduced. By including\n  the attribute\n\n  `-compile(nowarn_deprecated_type).`\n\n  in an Erlang source file, warnings about deprecated types can be avoided in\n  Erlang/OTP 17.0.\n\n  The option can also be given as a compiler flag:\n\n  `erlc +nowarn_deprecated_type file.erl`\n\n  Own Id: OTP-10342\n\n- Calls to erlang:open_port/2 with 'spawn' are updated to handle space in the\n  command path.\n\n  Own Id: OTP-10842\n\n- Dialyzer's `unmatched_return` warnings have been corrected.\n\n  Own Id: OTP-10908\n\n- Forbid unsized fields in patterns of binary generators and simplified\n  v3_core's translation of bit string generators. (Thanks to Anthony Ramine.)\n\n  Own Id: OTP-11186\n\n- The version of the PCRE library Used by Erlang's re module is raised to 8.33\n  from 7.6. This means, among other things, better Unicode and Unicode Character\n  Properties support. New options connected to PCRE 8.33 are also added to the\n  re module (ucd, notempty_atstart, no_start_optimize). PCRE has extended the\n  regular expression syntax between 7.6 and 8.33, why this imposes a potential\n  incompatibility. Only very complicated regular expressions may be affected,\n  but if you know you are using obscure features, please test run your regular\n  expressions and verify that their behavior has not changed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11204\n\n- Added dict:is_empty/1 and orddict:is_empty/1. (Thanks to Magnus Henoch.)\n\n  Own Id: OTP-11353\n\n- A call to either the [`garbage_collect/1`](`garbage_collect/1`) BIF or the\n  [`check_process_code/2`](`check_process_code/2`) BIF may trigger garbage\n  collection of another processes than the process calling the BIF. The previous\n  implementations performed these kinds of garbage collections without\n  considering the internal state of the process being garbage collected. In\n  order to be able to more easily and more efficiently implement yielding native\n  code, these types of garbage collections have been rewritten. A garbage\n  collection like this is now triggered by an asynchronous request signal, the\n  actual garbage collection is performed by the process being garbage collected\n  itself, and finalized by a reply signal to the process issuing the request.\n  Using this approach processes can disable garbage collection and yield without\n  having to set up the heap in a state that can be garbage collected.\n\n  The [`garbage_collect/2`](`erlang:garbage_collect/2`), and\n  [`check_process_code/3`](`erlang:check_process_code/3`) BIFs have been\n  introduced. Both taking an option list as last argument. Using these, one can\n  issue asynchronous requests.\n\n  `code:purge/1` and `code:soft_purge/1` have been rewritten to utilize\n  asynchronous `check_process_code` requests in order to parallelize work.\n\n  Characteristics impact: A call to the\n  [`garbage_collect/1`](`garbage_collect/1`) BIF or the\n  [`check_process_code/2`](`check_process_code/2`) BIF will normally take longer\n  time to complete while the system as a whole wont be as much negatively\n  effected by the operation as before. A call to `code:purge/1` and\n  `code:soft_purge/1` may complete faster or slower depending on the state of\n  the system while the system as a whole wont be as much negatively effected by\n  the operation as before.\n\n  Own Id: OTP-11388 Aux Id: OTP-11535, OTP-11648\n\n- Improve the documentation of the supervisor's `via` reference. (Thanks to\n  MaximMinin.)\n\n  Own Id: OTP-11399\n\n- `orddict:from_list/1` now uses the optimized sort routines in the `lists`\n  module instead of (essentially) an insertion sort. Depending on the input\n  data, the speed of the new `from_list/1` is anything from slightly faster up\n  to several orders of magnitude faster than the old `from_list/1`.\n\n  (Thanks to Steve Vinoski.)\n\n  Own Id: OTP-11552\n\n- EEP43: New data type - Maps\n\n  With Maps you may for instance:\n\n  - \\_\\_\\_\\_ - `M0 = #{ a => 1, b => 2}, % create associations`\n\n  - \\_\\_\\_\\_ - `M1 = M0#{ a := 10 }, % update values`\n\n  - \\_\\_\\_\\_ - `M2 = M1#{ \"hi\" => \"hello\"}, % add new associations`\n\n  - \\_\\_\\_\\_ - `#{ \"hi\" := V1, a := V2, b := V3} = M2. % match keys with values`\n\n  For information on how to use Maps please see Map Expressions in the\n  [Reference Manual](`e:system:expressions.md#map-expressions`).\n\n  The current implementation is without the following features:\n\n  - \\_\\_\\_\\_ - No variable keys\n\n  - \\_\\_\\_\\_ - No single value access\n\n  - \\_\\_\\_\\_ - No map comprehensions\n\n  Note that Maps is _experimental_ during OTP 17.0.\n\n  Own Id: OTP-11616\n\n- When tab completing the erlang shell now expands zero-arity functions all the\n  way to closing parenthesis, unless there is another function with the same\n  name and a different arity. (Thanks to Pierre Fenoll.)\n\n  Own Id: OTP-11684\n\n- The Erlang Code Preprocessor (`epp`) could loop when encountering a circular\n  macro definition in an included file. This bug has been fixed.\n\n  Thanks to Maruthavanan Subbarayan for reporting the bug, and to Richard\n  Carlsson for providing a bug fix.\n\n  Own Id: OTP-11728\n\n- The Erlang Code Linter (`erl_lint`) has since Erlang/OTP R13B emitted warnings\n  whenever any of the types `t:arity/0`, `t:bitstring/0`, `t:iodata/0`, or\n  `t:boolean/0` were re-defined. Now errors are emitted instead.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-11771\n\n- The `encoding` option of `erl_parse:abstract/2` has been extended to include\n  `none` and a callback function (a predicate).\n\n  Own Id: OTP-11807\n\n- Export zip option types to allow referal from other modules.\n\n  Thanks to Pierre Fenoll and Håkan Mattson\n\n  Own Id: OTP-11828\n\n- The module `pg` has been deprecated and will be removed in Erlang/OTP 18.\n\n  Own Id: OTP-11840","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.19.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-19-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fix typo in gen_server.erl. Thanks to Brian L. Troutwine.\n\n  Own Id: OTP-11398\n\n- Spec for atan2 should be atan2(Y, X), not atan2(X, Y). Thanks to Ary\n  Borenszweig.\n\n  Own Id: OTP-11465","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Add XML marker for regexp syntax. Thanks to Håkan Mattson.\n\n  Own Id: OTP-11442","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.19.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-19-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The functions `dets:foldl/3`, `dets:foldr/3`, and `dets:traverse/2` did not\n  release the table after having traversed the table to the end. The bug was\n  introduced in R16B. (Thanks to Manuel Duran Aguete.)\n\n  Own Id: OTP-11245\n\n- If the `fun M:F/A` construct was used erroneously the linter could crash.\n  (Thanks to Mikhail Sobolev.)\n\n  Own Id: OTP-11254\n\n- The specifications of `io_lib:fread/2,3` have been corrected. (Thanks to Chris\n  King and Kostis Sagonas for pinpointing the bug.)\n\n  Own Id: OTP-11261","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Fixed type typo in gen_server.\n\n  Own Id: OTP-11200\n\n- Update type specs in filelib and io_prompt. Thanks to Jose Valim.\n\n  Own Id: OTP-11208\n\n- Fix typo in abcast() function comment. Thanks to Johannes Weissl.\n\n  Own Id: OTP-11219\n\n- Make edlin understand a few important control keys. Thanks to Stefan\n  Zegenhagen.\n\n  Own Id: OTP-11251\n\n- Export the edge/0 type from the digraph module. Thanks to Alex Ronne Petersen.\n\n  Own Id: OTP-11266\n\n- Fix variable usage tracking in erl_lint and fixed unsafe variable tracking in\n  try expressions. Thanks to Anthony Ramine.\n\n  Own Id: OTP-11268","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.19.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-19-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The Erlang scanner no longer accepts floating point numbers in the input\n  string.\n\n  Own Id: OTP-10990\n\n- When converting a faulty binary to a list with unicode:characters_to_list, the\n  error return value could contain a faulty \"rest\", i.e. the io_list of\n  characters that could not be converted was wrong. This happened only if input\n  was a sub binary and conversion was from utf8. This is now corrected.\n\n  Own Id: OTP-11080\n\n- The type `hook_function()` has been corrected in `erl_pp`, the Erlang Pretty\n  Printer.\n\n  The printing of invalid forms, e.g. record field types, has also been fixed.\n  It has been broken since R16B.\n\n  (Thanks to Tomáš Janoušek.)\n\n  Own Id: OTP-11100\n\n- Fix receive support in erl_eval with a BEAM module. Thanks to Anthony Ramine.\n\n  Own Id: OTP-11137","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Delete obsolete note about simple-one-for-one supervisor. Thanks to Magnus\n  Henoch.\n\n  Own Id: OTP-10938\n\n- When selecting encoding of a script written in Erlang (`escript`) the optional\n  directive on the second line is now recognized.\n\n  Own Id: OTP-10951\n\n- The function `erl_parse:abstract/2` has been documented.\n\n  Own Id: OTP-10992\n\n- Integrate elliptic curve contribution from Andreas Schultz\n\n  In order to be able to support elliptic curve cipher suites in SSL/TLS,\n  additions to handle elliptic curve infrastructure has been added to public_key\n  and crypto.\n\n  This also has resulted in a rewrite of the crypto API to gain consistency and\n  remove unnecessary overhead. All OTP applications using crypto has been\n  updated to use the new API.\n\n  Impact: Elliptic curve cryptography (ECC) offers equivalent security with\n  smaller key sizes than other public key algorithms. Smaller key sizes result\n  in savings for power, memory, bandwidth, and computational cost that make ECC\n  especially attractive for constrained environments.\n\n  Own Id: OTP-11009\n\n- Added sys:get_state/1,2 and sys:replace_state/2,3. Thanks to Steve Vinoski.\n\n  Own Id: OTP-11013\n\n- Optimizations to gen mechanism. Thanks to Loïc Hoguin.\n\n  Own Id: OTP-11025\n\n- Optimizations to gen.erl. Thanks to Loïc Hoguin.\n\n  Own Id: OTP-11035\n\n- Use erlang:demonitor(Ref, \\[flush]) where applicable. Thanks to Loïc Hoguin.\n\n  Own Id: OTP-11039\n\n- Erlang source files with non-ASCII characters are now encoded in UTF-8\n  (instead of latin1).\n\n  Own Id: OTP-11041 Aux Id: OTP-10907\n\n- Fix rest_for_one and one_for_all restarting a child not terminated. Thanks to\n  James Fish.\n\n  Own Id: OTP-11042\n\n- Fix excessive CPU consumption of timer_server. Thanks to Aliaksey\n  Kandratsenka.\n\n  Own Id: OTP-11053\n\n- Rename and document lists:zf/2 as lists:filtermap/2. Thanks to Anthony Ramine.\n\n  Own Id: OTP-11078\n\n- Fixed an inconsistent state in epp. Thanks to Anthony Ramine\n\n  Own Id: OTP-11079\n\n- c:ls(File) will now print File, similar to ls(1) in Unix. The error messages\n  have also been improved. (Thanks to Bengt Kleberg.)\n\n  Own Id: OTP-11108\n\n- Support callback attributes in erl_pp. Thanks to Anthony Ramine.\n\n  Own Id: OTP-11140\n\n- Improve erl_lint performance. Thanks to José Valim.\n\n  Own Id: OTP-11143","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.19.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-19-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Bugs related to Unicode have been fixed in the `erl_eval` module.\n\n  Own Id: OTP-10622 Aux Id: kunagi-351 \\[262]\n\n- `filelib:wildcard(\"some/relative/path/*.beam\", Path)` would fail to match any\n  file. That is, filelib:wildcard/2 would not work if the first component of the\n  pattern did not contain any wildcard characters. (A previous attempt to fix\n  the problem in R15B02 seems to have made matters worse.)\n\n  (Thanks to Samuel Rivas and Tuncer Ayaz.)\n\n  There is also an incompatible change to the `Path` argument. It is no longer\n  allowed to be a binary.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10812","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The new STDLIB application variable `shell_strings` can be used for\n  determining how the Erlang shell outputs lists of integers. The new function\n  `shell:strings/1` toggles the value of the variable.\n\n  The control sequence modifier `l` can be used for turning off the string\n  recognition of `~p` and `~P`.\n\n  Own Id: OTP-10755\n\n- Miscellaneous updates due to Unicode support.\n\n  Own Id: OTP-10820\n\n- Extend `~ts` to handle binaries with characters coded in ISO-latin-1\n\n  Own Id: OTP-10836\n\n- The +pc flag to erl can be used to set the range of characters considered\n  printable. This affects how the shell and io:format(\"~tp\",...) functionality\n  does heuristic string detection. More can be read in STDLIB users guide.\n\n  Own Id: OTP-10884","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.19 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-19"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Wildcards such as \"some/path/\\*\" passed to `filelib:wildcard/2` would fail to\n  match any file. (Thanks to Samuel Rivas for reporting this bug.)\n\n  Own Id: OTP-6874 Aux Id: kunagi-190 \\[101]\n\n- Fixed error handling in proc_lib:start which could hang if the spawned process\n  died in init.\n\n  Own Id: OTP-9803 Aux Id: kunagi-209 \\[120]\n\n- Allow \\*\\* in filelib:wildcard\n\n  Two adjacent \\* used as a single pattern will match all files and zero or more\n  directories and subdirectories. (Thanks to José Valim)\n\n  Own Id: OTP-10431\n\n- Add the \\\\gN and \\\\g\\{N\\} syntax for back references in re:replace/3,4 to\n  allow use with numeric replacement strings. (Thanks to Vance Shipley)\n\n  Own Id: OTP-10455\n\n- Export ets:match_pattern/0 type (Thanks to Joseph Wayne Norton)\n\n  Own Id: OTP-10472\n\n- Fix printing the empty binary at depth 1 with ~W (Thanks to Andrew Thompson)\n\n  Own Id: OTP-10504\n\n- The type `ascii_string()` in the `base64` module has been corrected. The type\n  [`file:file_info()`](`t:file:file_info/0`) has been cleaned up. The type\n  [`file:fd()`](`t:file:fd/0`) has been made opaque in the documentation.\n\n  Own Id: OTP-10624 Aux Id: kunagi-352 \\[263]","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Dets tables are no longer fixed while traversing with a bound key (when only\n  the objects with the right key are matched). This optimization affects the\n  functions `match/2`, `match_object/2`, `select/2`, `match_delete/2`, and\n  `select_delete/2`.\n\n  Own Id: OTP-10097\n\n- Support for Unicode has been implemented.\n\n  Own Id: OTP-10302\n\n- The linter now warns for opaque types that are not exported, as well as for\n  under-specified opaque types.\n\n  Own Id: OTP-10436\n\n- The type [`file:name()`](`t:file:name/0`) has been substituted for the type\n  [`file:filename()`](`t:file:filename/0`) in the following functions in the\n  `filename` module: `absname/2`, `absname_join/2`, `join/1,2`, and `split/1`.\n\n  Own Id: OTP-10474\n\n- If a child process fails in its start function, then the error reason was\n  earlier only reported as an error report from the error_handler, and\n  supervisor:start_link would only return `{error,shutdown}`. This has been\n  changed so the supervisor will now return `{error,{shutdown,Reason}}`, where\n  `Reason` identifies the failing child and its error reason. (Thanks to Tomas\n  Pihl)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-10490\n\n- Where necessary a comment stating encoding has been added to Erlang files. The\n  comment is meant to be removed in Erlang/OTP R17B when UTF-8 becomes the\n  default encoding.\n\n  Own Id: OTP-10630\n\n- The contracts and types of the modules `erl_scan` and `sys` have been\n  corrected and improved. (Thanks to Kostis Sagonas.)\n\n  Own Id: OTP-10658\n\n- The Erlang shell now skips the rest of the line when it encounters an Erlang\n  scanner error.\n\n  Own Id: OTP-10659\n\n- Clean up some specs in the proplists module. (Thanks to Kostis Sagonas.)\n\n  Own Id: OTP-10663\n\n- Some examples overflowing the width of PDF pages have been corrected.\n\n  Own Id: OTP-10665\n\n- Enable escript to accept emulator arguments when script file has no shebang.\n  Thanks to Magnus Henoch\n\n  Own Id: OTP-10691\n\n- Fix bug in queue:out/1, queue:out_r/1 that makes it O(N^2) in worst case.\n  Thanks to Aleksandr Erofeev.\n\n  Own Id: OTP-10722\n\n- There are new functions in the `epp` module which read the character encoding\n  from files. See `m:epp` for more information.\n\n  Own Id: OTP-10742 Aux Id: OTP-10302\n\n- The functions in `io_lib` have been adjusted for Unicode. The existing\n  functions `write_string()` and so on now take Unicode strings, while the old\n  behavior has been taken over by new functions `write_latin1_string()` and so\n  on. There are also new functions to write Unicode strings as Latin-1 strings,\n  mainly targetted towards the Erlang pretty printer (`erl_pp`).\n\n  Own Id: OTP-10745 Aux Id: OTP-10302\n\n- The new functions `proc_lib:format/2` and `erl_parse:abstract/2` accept an\n  encoding as second argument.\n\n  Own Id: OTP-10749 Aux Id: OTP-10302\n\n- Increased potential concurrency in ETS for `write_concurrency` option. The\n  number of internal table locks has increased from 16 to 64. This makes it four\n  times less likely that two concurrent processes writing to the same table\n  would collide and thereby serialized. The cost is an increased constant memory\n  footprint for tables using write_concurrency. The memory consumption per\n  inserted record is not affected. The increased footprint can be particularly\n  large if `write_concurrency` is combined with `read_concurrency`.\n\n  Own Id: OTP-10787","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.18.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-18-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Minor test updates\n\n  Own Id: OTP-10591","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.18.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-18-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed bug where if given an invalid drive letter on windows ensure dir would\n  go into an infinite loop.\n\n  Own Id: OTP-10104\n\n- Calls to gen_server:enter_loop/4 where ServerName has a global scope and no\n  timeout is given now works correctly.\n\n  Thanks to Sam Bobroff for reporting the issue.\n\n  Own Id: OTP-10130\n\n- fix escript/primary archive reloading\n\n  If the mtime of an escript/primary archive file changes after being added to\n  the code path, correctly reload the archive and update the cache. (Thanks to\n  Tuncer Ayaz)\n\n  Own Id: OTP-10151\n\n- Fix bug that in some cases could cause corrupted binaries in ETS tables with\n  `compressed` option.\n\n  Own Id: OTP-10182\n\n- Fix filename:nativename/1 on Win32\n\n  Don't choke on paths given as binary argument on Win32. Thanks to Jan Klötzke\n\n  Own Id: OTP-10188\n\n- Fix bug in `ets:test_ms/2` that could cause emulator crash when using `'$_'`\n  in match spec.\n\n  Own Id: OTP-10190\n\n- Fix bug where zip archives wrongly have a first disk number set to 1\n\n  Own Id: OTP-10223","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The message printed by the Erlang shell as an explanation of the `badarith`\n  error has been corrected. (Thanks to Matthias Lang.)\n\n  Own Id: OTP-10054","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.18.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-18-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- References to `is_constant/1` (which was removed in the R12 release) has been\n  removed from documentation and code.\n\n  Own Id: OTP-6454 Aux Id: seq10407\n\n- Leave control back to gen_server during supervisor's restart loop\n\n  When an attempt to restart a child failed, supervisor would earlier keep the\n  execution flow and try to restart the child over and over again until it\n  either succeeded or the restart frequency limit was reached. If none of these\n  happened, supervisor would hang forever in this loop.\n\n  This commit adds a timer of 0 ms where the control is left back to the\n  gen_server which implements the supervisor. This way any incoming request to\n  the supervisor will be handled - which could help breaking the infinite loop -\n  e.g. shutdown request for the supervisor or for the problematic child.\n\n  This introduces some incompatibilities in stdlib due to new return values from\n  supervisor:\n\n  - restart_child/2 can now return \\{error,restarting\\}\n  - delete_child/2 can now return \\{error,restarting\\}\n  - which_children/1 returns a list of \\{Id,Child,Type,Mods\\}, where Child, in\n    addition to the old pid() or 'undefined', now also can be 'restarting'.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9549\n\n- If a temporary child's start function returned 'ignore', then the supervisor\n  would keep it's child specification. This has been corrected. Child\n  specifications for non-existing temporary children shall never be kept.\n\n  Own Id: OTP-9782 Aux Id: seq11964\n\n- Use universal time as base in error logger\n\n  Previous conversion used the deprecated\n  calendar:local_time_to_universal_time/1\n\n  Own Id: OTP-9854\n\n- Calling a guard test (such as is_list/1) from the top-level in a guard, would\n  cause a compiler crash if there was a local definition with the same name.\n  Corrected to reject the program with an error message.\n\n  Own Id: OTP-9866\n\n- Fix the type spec from the doc of binary:part/3 (Thanks to Ricardo Catalinas\n  Jiménez)\n\n  Own Id: OTP-9920\n\n- Correct spelling of registered (Thanks to Richard Carlsson)\n\n  Own Id: OTP-9925\n\n- Put gb_trees documentation into alphabetical order (Thanks to Aidan Hobson\n  Sayers)\n\n  Own Id: OTP-9929\n\n- Fix bug in ETS with `compressed` option and insertion of term containing large\n  integers (>2G) on 64-bit machines. Seen to cause emulator crash. (Thanks to\n  Diego Llarrull for excellent bug report)\n\n  Own Id: OTP-9932\n\n- Add plugin support for alternative name lookup This patch introduces a new way\n  of locating a behaviour instance: \\{via, Module, Name\\}. (Thanks to Ulf Wiger)\n\n  Own Id: OTP-9945\n\n- The function `digraph_utils:condensation/1` used to create a digraph\n  containing loops contradicting the documentation which states that the created\n  digraph is free of cycles. This bug has been fixed. (Thanks to Kostis Sagonas\n  for finding the bug.)\n\n  Own Id: OTP-9953\n\n- When an escript ends now all printout to standard output and standard error\n  gets out on the terminal. This bug has been corrected by changing the\n  behaviour of erlang:halt/0,1, which should fix the same problem for other\n  escript-like applications, i.e that data stored in the output port driver\n  buffers got lost when printing on a TTY and exiting through erlang:halt/0,1.\n\n  The BIF:s erlang:halt/0,1 has gotten improved semantics and there is a new BIF\n  erlang:halt/2 to accomplish something like the old semantics. See the\n  documentation.\n\n  Now erlang:halt/0 and erlang:halt/1 with an integer argument will close all\n  ports and allow all pending async threads operations to finish before exiting\n  the emulator. Previously erlang:halt/0 and erlang:halt(0) would just wait for\n  pending async threads operations but not close ports. And erlang:halt/1 with a\n  non-zero integer argument would not even wait for pending async threads\n  operations.\n\n  To roughly the old behaviour, to not wait for ports and async threads\n  operations when you exit the emulator, you use erlang:halt/2 with an integer\n  first argument and an option list containing \\{flush,false\\} as the second\n  argument. Note that now is flushing not dependant of the exit code, and you\n  cannot only flush async threads operations which we deemed as a strange\n  behaviour anyway.\n\n  Also, erlang:halt/1,2 has gotten a new feature: If the first argument is the\n  atom 'abort' the emulator is aborted producing a core dump, if the operating\n  system so allows.\n\n  Own Id: OTP-9985\n\n- Add escript win32 alternative invocation. escript can now be started as both\n  \"escript.exe\" and \"escript\" (Thanks to Pierre Rouleau)\n\n  Own Id: OTP-9997","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.18 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-18"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Improved algorithm in module `random`. Avoid seed values that are even\n  divisors of the primes and by that prevent getting sub-seeds that are stuck on\n  zero. Worst case was random:seed(0,0,0) that produced a series of only zeros.\n  This is an incompatible change in the sense that applications that relies on\n  reproducing a specific series for a given seed will fail. The pseudo random\n  output is still deterministic but different compared to earlier versions.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8713\n\n- Calls to `global:whereis_name/1` have been substituted for calls to\n  `global:safe_whereis_name/1` since the latter is not safe at all.\n\n  The reason for not doing this earlier is that setting a global lock masked out\n  a bug concerning the restart of supervised children. The bug has now been\n  fixed by a modification of `global:whereis_name/1`. (Thanks to Ulf Wiger for\n  code contribution.)\n\n  A minor race conditions in `gen_fsm:start*` has been fixed: if one of these\n  functions returned `{error, Reason}` or ignore, the name could still be\n  registered (either locally or in `global`. (This is the same modification as\n  was done for gen_server in OTP-7669.)\n\n  The undocumented function `global:safe_whereis_name/1` has been removed.\n\n  Own Id: OTP-9212 Aux Id: seq7117, OTP-4174\n\n- If a child of a supervisor terminates with reason \\{shutdown,Term\\} it is now\n  handled by the supervisor as if the reason was 'shutdown'.\n\n  For children with restart type 'permanent', this implies no change. For\n  children with restart type 'transient', the child will no longer be restarted\n  and no supervisor report will be written. For children with restart type\n  'temporary', no supervisor report will be written.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9222\n\n- Minor improvement of documentation regarding supervisor restart strategy for\n  temporary and transient child processes.\n\n  Own Id: OTP-9381\n\n- A Dets table with sufficiently large buckets could not always be repaired.\n  This bug has been fixed.\n\n  The format of Dets files has been modified. When downgrading tables created\n  with the new system will be repaired. Otherwise the modification should not be\n  noticeable.\n\n  Own Id: OTP-9607\n\n- A few contracts in the `lists` module have been corrected.\n\n  Own Id: OTP-9616\n\n- Add '-callback' attributes in stdlib's behaviours\n\n  Replace the behaviour_info(callbacks) export in stdlib's behaviours with\n  -callback' attributes for all the callbacks. Update the documentation with\n  information on the callback attribute Automatically generate 'behaviour_info'\n  function from '-callback' attributes\n\n  'behaviour_info(callbacks)' is a special function that is defined in a module\n  which describes a behaviour and returns a list of its callbacks.\n\n  This function is now automatically generated using the '-callback' specs. An\n  error is returned by lint if user defines both '-callback' attributes and the\n  behaviour_info/1 function. If no type info is needed for a callback use a\n  generic spec for it. Add '-callback' attribute to language syntax\n\n  Behaviours may define specs for their callbacks using the familiar spec\n  syntax, replacing the '-spec' keyword with '-callback'. Simple lint checks are\n  performed to ensure that no callbacks are defined twice and all types referred\n  are declared.\n\n  These attributes can be then used by tools to provide documentation to the\n  behaviour or find discrepancies in the callback definitions in the callback\n  module.\n\n  Add callback specs into 'application' module in kernel Add callback specs to\n  tftp module following internet documentation Add callback specs to\n  inets_service module following possibly deprecated comments\n\n  Own Id: OTP-9621\n\n- If a Dets table had been properly closed but the space management data could\n  not been read, it was not possible to repair the file. This bug has been\n  fixed.\n\n  Own Id: OTP-9622\n\n- The Unicode noncharacter code points 16#FFFE and 16#FFFE were not allowed to\n  be encoded or decoded using the `unicode` module or bit syntax. That was\n  inconsistent with the other noncharacters 16#FDD0 to 16#FDEF that could be\n  encoded/decoded. To resolve the inconsistency, 16#FFFE and 16#FFFE can now be\n  encoded and decoded. (Thanks to Alisdair Sullivan.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9624\n\n- Make epp search directory of current file first when including another file\n  This completes a partial fix in R11 that only worked for include_lib().\n  (Thanks to Richard Carlsson)\n\n  Own Id: OTP-9645\n\n- ms_transform: Fix incorrect \\`variable shadowed' warnings\n\n  This patch removes incorrect passing of variable bindings from one function\n  clause to another. (Thanks to Haitao Li)\n\n  Own Id: OTP-9646\n\n- Explicitly kill dynamic children in supervisors\n\n  According to the supervisor's documentation: \"Important note on\n  simple-one-for-one supervisors: The dynamically created child processes of a\n  simple-one-for-one supervisor are not explicitly killed, regardless of\n  shutdown strategy, but are expected to terminate when the supervisor does\n  (that is, when an exit signal from the parent process is received).\"\n\n  All is fine as long as we stop simple_one_for_one supervisor manually. Dynamic\n  children catch the exit signal from the supervisor and leave. But, if this\n  happens when we stop an application, after the top supervisor has stopped, the\n  application master kills all remaining processes associated to this\n  application. So, dynamic children that trap exit signals can be killed during\n  their cleanup (here we mean inside terminate/2). This is unpredictable and\n  highly time-dependent.\n\n  In this commit, supervisor module is patched to explicitly terminate dynamic\n  children accordingly to the shutdown strategy.\n\n  NOTE: Order in which dynamic children are stopped is not defined. In fact,\n  this is \"almost\" done at the same time.\n\n  Stack errors when dynamic children are stopped\n\n  Because a simple_one_for_one supervisor can have many workers, we stack errors\n  during its shutdown to report only one message for each encountered error\n  type. Instead of reporting the child's pid, we use the number of concerned\n  children. (Thanks to Christopher Faulet)\n\n  Own Id: OTP-9647\n\n- Allow an infinite timeout to shutdown worker processes\n\n  Now, in child specification, the shutdown value can also be set to infinity\n  for worker children. This restriction was removed because this is not always\n  possible to predict the shutdown time for a worker. This is highly\n  application-dependent. Add a warning to docs about workers' shutdown strategy\n  (Thanks to Christopher Faulet)\n\n  Own Id: OTP-9648\n\n- A badarg would sometimes occur in supervisor when printing error reports and\n  the child pid was undefined. This has been corrected.\n\n  Own Id: OTP-9669\n\n- Fix re:split spec not to accept option 'global'(Thanks to Shunichi Shinohara)\n\n  Own Id: OTP-9691","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Fix a few tests that used to fail on the HiPE platform.\n\n  Own Id: OTP-9637\n\n- Variables are now now allowed in '`fun M:F/A`' as suggested by Richard O'Keefe\n  in EEP-23.\n\n  The representation of '`fun M:F/A`' in the abstract format has been changed in\n  an incompatible way. Tools that directly read or manipulate the abstract\n  format (such as parse transforms) may need to be updated. The compiler can\n  handle both the new and the old format (i.e. extracting the abstract format\n  from a pre-R15 BEAM file and compiling it using compile:forms/1,2 will work).\n  The `syntax_tools` application can also handle both formats.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9643\n\n- Tuple funs (a two-element tuple with a module name and a function) are now\n  officially deprecated and will be removed in R16. Use '`fun M:F/A`' instead.\n  To make you aware that your system uses tuple funs, the very first time a\n  tuple fun is applied, a warning will be sent to the error logger.\n\n  Own Id: OTP-9649\n\n- The deprecated '`regexp`' module has been removed. Use the '`re`' module\n  instead.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9737\n\n- `filename:find_src/1,2` will now work on stripped BEAM files (reported by Per\n  Hedeland). The HiPE compiler will also work on stripped BEAM files. The BEAM\n  compiler will no longer include compilation options given in the source code\n  itself in `M:module_info(compile)` (because those options will be applied\n  anyway if the module is re-compiled).\n\n  Own Id: OTP-9752","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.17.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-17-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- erl_tar:extract failed when executed inside a directory with some parent\n  directory to which the user has no read access. This has been corrected.\n\n  Own Id: OTP-9368\n\n- A bug in `erl_scan:set_attribute/3` has been fixed.\n\n  Own Id: OTP-9412\n\n- The contract of `io_lib:fread()` has been corrected.\n\n  Own Id: OTP-9413 Aux Id: seq11873\n\n- A crash in io*lib:fread/2 when end of input data was encountered while trying\n  to match literal characters, which should return \\{more,*,_,_\\} but instead\n  crashed, has been corrected. Reported by Klas Johansson.\n\n  A similar peculiarity for io:fread when encountering end of file before any\n  field data has also been corrected.\n\n  Own Id: OTP-9439\n\n- The contract of `timer:now_diff()` has been corrected. (Thanks to Alex\n  Morarash).\n\n  Own Id: OTP-9450\n\n- Fix minor typo in gen_fsm documentation (Thanks to Haitao Li)\n\n  Own Id: OTP-9456\n\n- The contracts of `zip:zip_list_dir/1` and `zip:zip_get/2` have been corrected.\n\n  Own Id: OTP-9471 Aux Id: seq11887, OTP-9472\n\n- A bug in `zip:zip_open()` has been fixed.\n\n  Own Id: OTP-9472 Aux Id: seq11887, OTP-9471\n\n- Fix trivial documentation errors(Thanks to Matthias Lang)\n\n  Own Id: OTP-9498\n\n- Add a proplist() type\n\n  Recently I was adding specs to an API and found that there is no canonical\n  proplist() type defined. (Thanks to Ryan Zezeski)\n\n  Own Id: OTP-9499\n\n- fix supervisors restarting temporary children\n\n  In the current implementation of supervisors, temporary children should never\n  be restarted. However, when a temporary child is restarted as part of a\n  one_for_all or rest_for_one strategy where the failing process is not the\n  temporary child, the supervisor still tries to restart it.\n\n  Because the supervisor doesn't keep some of the MFA information of temporary\n  children, this causes the supervisor to hit its restart limit and crash.\n\n  This patch fixes the behaviour by inserting a clause in terminate_children/2-3\n  (private function) that will omit temporary children when building a list of\n  killed processes, to avoid having the supervisor trying to restart them again.\n\n  Only supervisors in need of restarting children used the list, so the change\n  should be of no impact for the functions that called terminate_children/2-3\n  only to kill all children.\n\n  The documentation has been modified to make this behaviour more explicit.\n  (Thanks to Fred Hebert)\n\n  Own Id: OTP-9502\n\n- fix broken edoc annotations (Thanks to Richard Carlsson)\n\n  Own Id: OTP-9516\n\n- XML files have been corrected.\n\n  Own Id: OTP-9550 Aux Id: OTP-9541\n\n- Handle rare race in the crypto key server functionality\n\n  Own Id: OTP-9586","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Types and specifications have been added.\n\n  Own Id: OTP-9356\n\n- The contracts of the `queue` module have been modified.\n\n  Own Id: OTP-9418\n\n- Contracts in STDLIB and Kernel have been improved and type errors have been\n  corrected.\n\n  Own Id: OTP-9485\n\n- Types for several BIFs have been extended/corrected. Also the types for types\n  for `lists:keyfind/3`, `lists:keysearch/3`, and `lists:keyemember/3` have been\n  corrected. The incorrect/incomplete types could cause false dialyzer warnings.\n\n  Own Id: OTP-9496","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.17.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-17-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The default value `undefined` was added to records field types in such a way\n  that the result was not always a well-formed type. This bug has been fixed.\n\n  Own Id: OTP-9147\n\n- Update index file atomically\n\n  Since the log_mf_h index file might be read by other processes than the error\n  handler (e.g. by the rb tool), this file should be updated atomically. This\n  will avoid hitting the time gap between opening the file in write mode (and\n  thus emptying the file) and the actual update with the new contents. To do\n  this, a temporary file is written, and the file:rename/1 used to replace the\n  real index file.\n\n  Own Id: OTP-9148\n\n- Fixed various typos across the documentation (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9154\n\n- Supervisors should not save child-specs for temporary processes when they\n  terminate as they should not be restarted. Saving the temporary child spec\n  will result in that you cannot start a new temporary process with the same\n  child spec as an already terminated temporary process. Since R14B02 you cannot\n  restart a temporary temporary process as arguments are no longer saved, it has\n  however always been semantically incorrect to restart a temporary process.\n  Thanks to Filipe David Manana for reporting this and suggesting a solution.\n\n  Own Id: OTP-9167 Aux Id: OTP-9064\n\n- Various small documentation fixes (Thanks to Bernard Duggan)\n\n  Own Id: OTP-9172\n\n- Fix format_status bug for unregistered gen_event processes\n\n  Port the gen_fsm code for format_status to gen_event in order to prevent a\n  lists:concat(\\[...,pid()]) crash when calling sys:get_status/1 on an\n  unregistered gen_event process.\n\n  Refactor format*status header code from gen*\\* behaviours to module gen.\n\n  Extend the format_status tests in gen_event_SUITE to cover format_status bugs\n  with anonymous gen_event processes. (Thanks To Geoff Cant)\n\n  Own Id: OTP-9218\n\n- List of pids changed to 'set' in supervisor for dynamic temporary children.\n  Accessing the list would not scale well when adding/deleting many children.\n  (Thanks to Evgeniy Khramtsov)\n\n  Own Id: OTP-9242\n\n- Change pool module to attempt to attach to nodes that are already running\n\n  The pool module prints out an error message and takes no further action for\n  nodes that are already running. This patch changes that behavior so that if\n  the return from slave:start/3 is \\{already_running, Node\\} then an attempt to\n  attach to the node is still made. This makes sense because the node has been\n  specified by the user in the .hosts.erlang file indicating a wish for the node\n  to be part of the pool and a manual attach can be successfully made after the\n  pool is started.(Thanks to Kelly McLaughlin)\n\n  Own Id: OTP-9244\n\n- unicode: document 16#FFFE and 16#FFFF (non chars)(Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9256\n\n- re: remove gratuitous \"it \" in manpage (Thanks to Tuncer Ayaz)\n\n  Own Id: OTP-9307\n\n- A bug in erl_eval(3) has been fixed.\n\n  Own Id: OTP-9322","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Add `timer:tc/1` and remove the catch in `tc/2` and `tc/3`. The time measuring\n  functions will thus no longer trap exits, errors or throws caused by the\n  measured function.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-9169\n\n- Allow supervisor:terminate_child(SupRef,Pid) for simple_one_for_one\n  supervisors\n\n  supervisor:terminate_child/2 was earlier not allowed if the supervisor used\n  restart strategy simple_one_for_one. This is now changed so that children of\n  this type of supervisors can be terminated by specifying the child's Pid.\n\n  (Thanks to Vance Shipley.)\n\n  Own Id: OTP-9201\n\n- Types and specifications have been added.\n\n  Own Id: OTP-9267\n\n- Erlang types and specifications are used for documentation.\n\n  Own Id: OTP-9271\n\n- Allow Dets tablenames to be arbitrary terms.\n\n  Own Id: OTP-9282\n\n- A specification that could cause problems for Dialyzer has been fixed. An\n  opaque type in erl_eval has been turned in to a ordinary type. This is a\n  temporary fix.\n\n  Own Id: OTP-9333","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.17.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-17-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Two bugs in io:format for ~F.~Ps has been corrected. When length(S) >=\n  abs(F) > P, the precision P was incorrectly ignored. When F == P > length(S)\n  the result was incorrectly left adjusted. Bug found by Ali Yakout who also\n  provided a fix.\n\n  Own Id: OTP-8989 Aux Id: seq11741\n\n- Fix exception generation in the io module\n\n  Some functions did not generate correct badarg exception on a badarg\n  exception.\n\n  Own Id: OTP-9045\n\n- Fixes to the dict and orddict module documentation\n\n  Fixed grammar and one inconsistency (Key - Value instead of key/value, since\n  everywhere else the former is used). (thanks to Filipe David Manana)\n\n  Own Id: OTP-9083\n\n- Add ISO week number calculation functions to the calendar module in stdlib\n\n  This new feature adds the missing week number function to the calendar module\n  of the stdlib application. The implementation conforms to the ISO 8601\n  standard. The new feature has been implemented tested and documented (thanks\n  to Imre Horvath).\n\n  Own Id: OTP-9087","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Implement the 'MAY' clauses from RFC4648 regarding the pad character to make\n  mime_decode() and mime_decode_to_string() functions more tolerant of badly\n  padded base64. The RFC is quoted below for easy reference.\n\n  \"RFC4648 Section 3.3 with reference to MIME decoding: Furthermore, such\n  specifications MAY ignore the pad character, \"=\", treating it as non-alphabet\n  data, if it is present before the end of the encoded data. If more than the\n  allowed number of pad characters is found at the end of the string (e.g., a\n  base 64 string terminated with \"===\"), the excess pad characters MAY also be\n  ignored.\"\n\n  Own Id: OTP-9020\n\n- Supervisors will no longer save start parameters for temporary processes as\n  they will not be restarted. In the case of simple_one_for_one workers such as\n  ssl-connection processes this will substantial reduce the memory footprint of\n  the supervisor.\n\n  Own Id: OTP-9064\n\n- When running escript it is now possible to add the -n flag and the escript\n  will be compiled using +native.\n\n  Own Id: OTP-9076","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.17.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-17-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Several type specifications for standard libraries were wrong in the R14B01\n  release. This is now corrected. The corrections concern types in\n  re,io,filename and the module erlang itself.\n\n  Own Id: OTP-9008","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.17.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-17-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- When several clients accessed a Dets table simultaneously, one of them calling\n  `dets:insert_new/2`, the Dets server could crash. Alternatively, under the\n  same conditions, `ok` was sometimes returned instead of `true`. (Thanks to\n  John Hughes.)\n\n  Own Id: OTP-8856\n\n- When several clients accessed a Dets table simultaneously, inserted or updated\n  objects were sometimes lost due to the Dets file being truncated. (Thanks to\n  John Hughes.)\n\n  Own Id: OTP-8898\n\n- When several clients accessed a Dets table simultaneously, modifications of\n  the Dets server's internal state were sometimes thrown away. The symptoms are\n  diverse: error with reason `bad_object`; inserted objects not returned by\n  `lookup()`; et cetera. (Thanks to John Hughes.)\n\n  Own Id: OTP-8899\n\n- If a Dets table was closed after calling `bchunk/2`, `match/1,3`,\n  `match_object/1,3`, or `select/1,3` and then opened again, a subsequent call\n  using the returned continuation would normally return a reply. This bug has\n  fixed; now the call fails with reason `badarg`.\n\n  Own Id: OTP-8903\n\n- Cover did not collect coverage data for files such as Yecc parses containing\n  include directives. The bug has been fixed by modifying `epp`, the Erlang Code\n  Preprocessor.\n\n  Own Id: OTP-8911\n\n- If a Dets table with fewer slots than keys was opened and then closed after\n  just a lookup, the contents were no longer well-formed. This bug has been\n  fixed. (Thanks to Matthew Evans.)\n\n  Own Id: OTP-8923\n\n- In a supervisor, when it terminates a child, if that child happens to have\n  exited fractionally early, with normal, the supervisor reports this as an\n  error. This should not be reported as an error.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8938 Aux Id: seq11615","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The documentation filelib:wildcard/1,2 now describes the character set syntax\n  for wildcards.\n\n  Own Id: OTP-8879 Aux Id: seq11683\n\n- Buffer overflows have been prevented in `erlc`, `dialyzer`, `typer`,\n  `run_test`, `heart`, `escript`, and `erlexec`.\n\n  (Thanks to Michael Santos.)\n\n  Own Id: OTP-8892\n\n- Using a float for the number of copies for `string:copies/2` resulted in an\n  infinite loop. Now it will fail with an exception instead. (Thanks to Michael\n  Santos.)\n\n  Own Id: OTP-8915\n\n- New ETS option `compressed`, to enable a more compact storage format at the\n  expence of heavier table operations. For test and evaluation, `erl +ec` can be\n  used to force compression on all ETS tables.\n\n  Own Id: OTP-8922 Aux Id: seq11658\n\n- The default maximum number of slots of a Dets table has been changed as to be\n  equal to the maximum number of slots. (Thanks to Richard Carlsson.)\n\n  Own Id: OTP-8959","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.17.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-17-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- reference() has been substituted for ref() in the documentation.\n\n  Own Id: OTP-8733","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The ms_transform now warns if the fun head shadows surrounding variables (just\n  like the warnings you would get for an ordinary fun in the same context).\n\n  Own Id: OTP-6759\n\n- ets:select_reverse/\\{1,2,3\\} are now documented.\n\n  Own Id: OTP-7863\n\n- Large parts of the `ethread` library have been rewritten. The `ethread`\n  library is an Erlang runtime system internal, portable thread library used by\n  the runtime system itself.\n\n  Most notable improvement is a reader optimized rwlock implementation which\n  dramatically improve the performance of read-lock/read-unlock operations on\n  multi processor systems by avoiding ping-ponging of the rwlock cache lines.\n  The reader optimized rwlock implementation is used by miscellaneous rwlocks in\n  the runtime system that are known to be read-locked frequently, and can be\n  enabled on ETS tables by passing the\n  [\\{read_concurrency, true\\}](`m:ets#new_2_read_concurrency`) option upon table\n  creation. See the documentation of `ets:new/2` for more information. The\n  reader optimized rwlock implementation can be fine tuned when starting the\n  runtime system. For more information, see the documentation of the\n  [\\+rg](`e:erts:erl_cmd.md#%2Brg`) command line argument of `erl`.\n\n  There is also a new implementation of rwlocks that is not optimized for\n  readers. Both implementations interleaves readers and writers during\n  contention as opposed to, e.g., the NPTL (Linux) pthread rwlock implementation\n  which use either a reader or writer preferred strategy. The reader/writer\n  preferred strategy is problematic since it starves threads doing the\n  non-preferred operation.\n\n  The new rwlock implementations in general performs better in ERTS than common\n  pthread implementations. However, in some extremely heavily contended cases\n  this is not the case. Such heavy contention can more or less only appear on\n  ETS tables. This when multiple processes do very large amounts of write locked\n  operations simultaneously on the same table. Such use of ETS is bad regardless\n  of rwlock implementation, will never scale, and is something we strongly\n  advise against.\n\n  The new rwlock implementations depend on atomic operations. If no native\n  atomic implementation is found, a fallback solution will be used. Using the\n  fallback implies a performance degradation. That is, it is more important now\n  than before to build OTP with a native atomic implementation.\n\n  The `ethread` library contains native atomic implementations for, x86 (32 and\n  64 bit), powerpc (32 bit), sparc V9 (32 and 64 bit), and tilera (32 bit). On\n  other hardware gcc's builtin support for atomic memory access will be used if\n  such exists. If no such support is found, `configure` will warn about no\n  atomic implementation available.\n\n  The `ethread` library can now also use the `libatomic_ops` library for atomic\n  memory accesses. This makes it possible for the Erlang runtime system to\n  utilize optimized native atomic operations on more platforms than before. If\n  `configure` warns about no atomic implementation available, try using the\n  `libatomic_ops` library. Use the\n  [\\--with-libatomic_ops=PATH](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp`)\n  `configure` command line argument when specifying where the `libatomic_ops`\n  installation is located. The `libatomic_ops` library can be downloaded from:\n  [http://www.hpl.hp.com/research/linux/atomic_ops/](http://www.hpl.hp.com/research/linux/atomic_ops/)\n\n  The changed API of the `ethread` library has also caused modifications in the\n  Erlang runtime system. Preparations for the to come \"delayed deallocation\"\n  feature has also been done since it depends on the `ethread` library.\n\n  _Note_: When building for x86, the `ethread` library will now use instructions\n  that first appeared on the pentium 4 processor. If you want the runtime system\n  to be compatible with older processors (back to 486) you need to pass the\n  [\\--enable-ethread-pre-pentium4-compatibility](`e:system:install.md#advanced-configuration-and-build-of-erlang-otp`)\n  `configure` command line argument when configuring the system.\n\n  Own Id: OTP-8544\n\n- Some Built In Functions (BIFs) from the module erlang was never made\n  autoimported for backward compatibility reasons. As local functions now\n  override autoimports, new autoimports is no longer a problem, why the\n  following BIFs are finally made autoimported: monitor/2, monitor/3,\n  demonitor/2, demonitor/3, error/1, error/2, integer_to_list/2,\n  list_to_integer/2.\n\n  Own Id: OTP-8763","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.17 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-17"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The Erlang code preprocessor (`epp`) sent extra messages on the form\n  `{eof,Location}` to the client when parsing the `file` attribute. This bug,\n  introduced in R11B, has been fixed.\n\n  Own Id: OTP-8470\n\n- The abstract type 'fun' could not be printed by the Erlang pretty printer\n  (`erl_pp`). This bug has been fixed.\n\n  Own Id: OTP-8473\n\n- The function `erl_scan:reserved_word/1` no longer returns `true` when given\n  the word `spec`. This bug was introduced in STDLIB-1.15.3 (R12B-3).\n\n  Own Id: OTP-8567\n\n- The documentation of `lists:keysort/2` states that the sort is stable.\n\n  Own Id: OTP-8628 Aux Id: seq11576\n\n- The shell's line editing has been improved to more resemble the behaviour of\n  readline and other shells. (Thanks to Dave Peticolas)\n\n  Own Id: OTP-8635\n\n- The Erlang code preprocessor (`epp`) did not correctly handle premature\n  end-of-input when defining macros. This bug, introduced in STDLIB 1.16, has\n  been fixed.\n\n  Own Id: OTP-8665 Aux Id: OTP-7810","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The module binary from EEP31 (and EEP9) is implemented.\n\n  Own Id: OTP-8217\n\n- The erlang pretty printer (`erl_pp`) no longer quotes atoms in types.\n\n  Own Id: OTP-8501\n\n- The Erlang code preprocessor (`epp`) now considers records with no fields as\n  typed.\n\n  Own Id: OTP-8503\n\n- Added function `zip:foldl/3` to iterate over zip archives.\n\n  Added functions to create and extract escripts. See `escript:create/2` and\n  `escript:extract/2`.\n\n  The undocumented function `escript:foldl/3` has been removed. The same\n  functionality can be achieved with the more flexible functions\n  `escript:extract/2` and `zip:foldl/3`.\n\n  Record fields has been annotated with type info. Source files as been adapted\n  to fit within 80 chars and trailing whitespace has been removed.\n\n  Own Id: OTP-8521\n\n- The Erlang parser no longer duplicates the singleton type `undefined` in the\n  type of record fields without initial value.\n\n  Own Id: OTP-8522\n\n- A regular expression with many levels of parenthesis could cause a buffer\n  overflow. That has been corrected. (Thanks to Michael Santos.)\n\n  Own Id: OTP-8539\n\n- When defining macros the closing right parenthesis before the dot is now\n  mandatory.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8562\n\n- Some properties of a compiled re pattern are defined to allow for guard tests.\n\n  Own Id: OTP-8577\n\n- Local and imported functions now override the auto-imported BIFs when the\n  names clash. The pre R14 behaviour was that auto-imported BIFs would override\n  local functions. To avoid that old programs change behaviour, the following\n  will generate an error:\n\n  - Doing a call without explicit module name to a local function having a name\n    clashing with the name of an auto-imported BIF that was present (and\n    auto-imported) before OTP R14A\n  - Explicitly importing a function having a name clashing with the name of an\n    autoimported BIF that was present (and autoimported) before OTP R14A\n  - Using any form of the old compiler directive `nowarn_bif_clash`\n\n  If the BIF was added or auto-imported in OTP R14A or later, overriding it with\n  an import or a local function will only result in a warning,\n\n  To resolve clashes, you can either use the explicit module name `erlang` to\n  call the BIF, or you can remove the auto-import of that specific BIF by using\n  the new compiler directive `-compile({no_auto_import,[F/A]}).`, which makes\n  all calls to the local or imported function without explicit module name pass\n  without warnings or errors.\n\n  The change makes it possible to add auto-imported BIFs without breaking or\n  silently changing old code in the future. However some current code\n  ingeniously utilizing the old behaviour or the `nowarn_bif_clash` compiler\n  directive, might need changing to be accepted by the compiler.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8579\n\n- The undocumented, unsupport, and deprecated function `lists:flat_length/1` has\n  been removed.\n\n  Own Id: OTP-8584\n\n- A bug in re that could cause certain regular expression matches never to\n  terminate is corrected. (Thanks to Michael Santos and Gordon Guthrie.)\n\n  Own Id: OTP-8589\n\n- Nested records can now be accessed without parenthesis. See the Reference\n  Manual for examples. (Thanks to YAMASHINA Hio and Tuncer Ayaz.)\n\n  Own Id: OTP-8597\n\n- `receive` statements that can only read out a newly created reference are now\n  specially optimized so that it will execute in constant time regardless of the\n  number of messages in the receive queue for the process. That optimization\n  will benefit calls to `gen_server:call()`. (See `gen:do_call/4` for an example\n  of a receive statement that will be optimized.)\n\n  Own Id: OTP-8623\n\n- The beam_lib:cmp/2 function now compares BEAM files in stricter way. The BEAM\n  files will be considered different if there are any changes except in the\n  compilation information (\"CInf\") chunk. beam_lib:cmp/2 used to ignore\n  differences in the debug information (significant for Dialyzer) and other\n  chunks that did not directly change the run-time behavior.\n\n  Own Id: OTP-8625\n\n- When a gen_server, gen_fsm process, or gen_event terminates abnormally,\n  sometimes the text representation of the process state can occupy many lines\n  of the error log, depending on the definition of the state term. A mechanism\n  to trim out parts of the state from the log has been added (using a\n  format_status/2 callback). See the documentation.\n\n  Own Id: OTP-8630\n\n- Calling `sys:get_status()` for processes that have globally registered names\n  that were not atoms would cause a crash. Corrected. (Thanks to Steve Vinoski.)\n\n  Own Id: OTP-8656\n\n- The Erlang scanner has been augmented with two new tokens: `..` and `...`.\n\n  Own Id: OTP-8657\n\n- Expressions evaluating to integers can now be used in types and function\n  specifications where hitherto only integers were allowed (\"Erlang_Integer\").\n\n  Own Id: OTP-8664\n\n- The compiler optimizes record operations better.\n\n  Own Id: OTP-8668\n\n- The recently added BIFs erlang:min/2, erlang:max/2 and erlang:port_command/3\n  are now auto-imported (as they were originally intended to be). Due to the\n  recent compiler change (OTP-8579), the only impact on old code defining it's\n  own min/2, max/2 or port_command/3 functions will be a warning, the local\n  functions will still be used. The warning can be removed by using\n  -compile(\\{no_auto_import,\\[min/2,max/2,port_command/3]\\}). in the source\n  file.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8669 Aux Id: OTP-8579\n\n- Now, binary_to_term/2 is auto-imported. This will cause a compile warning if\n  and only if a module has got a local function with that name.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8671\n\n- The predefined builtin type tid() has been removed. Instead, ets:tid() should\n  be used.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8687","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.16.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-16-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Because of a race condition, using filelib:ensure_dir/1 from multiple\n  processes to create the same path or parts of the same directory structure,\n  filelib:ensure_dir/1 could return a meaningless \\{error,eexist\\}. That race\n  condition has been eliminated, and \\{error,eexist\\} will now be returned only\n  if there exists a regular file, device file, or some other non-directory file\n  with the same name. (Thanks to Tuncer Ayaz.)\n\n  Own Id: OTP-8389\n\n- A number of bugs concerning re and unicode are corrected:\n\n  re:compile no longer loses unicode option, which also fixes bug in re:split.\n\n  re:replace now handles unicode charlist replacement argument\n\n  re:replace now handles unicode RE charlist argument correctly\n\n  re:replace now handles binary unicode output correctly when nothing is\n  replaced.\n\n  Most code, testcases and error isolation done by Rory Byrne.\n\n  Own Id: OTP-8394\n\n- The loading of native code was not properly atomic in the SMP emulator, which\n  could cause crashes. Also a per-MFA information table for the native code has\n  now been protected with a lock since it turns that it could be accessed\n  concurrently in the SMP emulator. (Thanks to Mikael Pettersson.)\n\n  Own Id: OTP-8397\n\n- user.erl (used in oldshell) is updated to handle unicode in prompt strings\n  (io:get_line/\\{1,2\\}). io_lib is also updated to format prompts with the 't'\n  modifier (i.e. ~ts instead of ~s).\n\n  Own Id: OTP-8418 Aux Id: OTP-8393\n\n- The re module: A regular expression with an option change at the start of a\n  pattern that had top-level alternatives could cause overwriting and/or a\n  crash. (Thanks to Michael Santos.)\n\n  Own Id: OTP-8438","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The ability for the gen_server and gen_fsm callback modules to format their\n  own state for display under the sys:get_status/1,2 calls has been restored and\n  documented. (Thanks to Steve Vinoski.)\n\n  Own Id: OTP-8324\n\n- c:nc/\\{1,2\\} used to assume that the beam file was created in the same\n  directory as the source code and failed to load the code if it was not.\n  Corrected to look for the beam file in the current directory or in the\n  directory specified by the `{outdir,Dir}` option. (Thanks to Alex Suraci.)\n\n  Own Id: OTP-8337\n\n- The documentation is now possible to build in an open source environment after\n  a number of bugs are fixed and some features are added in the documentation\n  build process.\n\n  \\- The arity calculation is updated.\n\n  \\- The module prefix used in the function names for bif's are removed in the\n  generated links so the links will look like\n  \"http://www.erlang.org/doc/man/erlang.html#append_element-2\" instead of\n  \"http://www.erlang.org/doc/man/erlang.html#erlang:append_element-2\".\n\n  \\- Enhanced the menu positioning in the html documentation when a new page is\n  loaded.\n\n  \\- A number of corrections in the generation of man pages (thanks to Sergei\n  Golovan)\n\n  \\- The legal notice is taken from the xml book file so OTP's build process can\n  be used for non OTP applications.\n\n  Own Id: OTP-8343\n\n- Shell tab completion now works for quoted module and function names. (Thanks\n  to Ulf Wiger.)\n\n  Own Id: OTP-8383\n\n- Explicit top directories in archive files are now optional.\n\n  For example, if an archive (app-vsn.ez) just contains an app-vsn/ebin/mod.beam\n  file, the file info for the app-vsn and app-vsn/ebin directories are faked\n  using the file info from the archive file as origin. The virtual direcories\n  can also be listed. For short, the top directories are virtual if they does\n  not exist.\n\n  Own Id: OTP-8387\n\n- Macros overloading has been implemented. (Thanks to Christopher Faulet.)\n\n  Own Id: OTP-8388\n\n- The new function `shell:prompt_func/1` and the new application configuration\n  parameter `shell_prompt_func` can be used for customizing the Erlang shell\n  prompt.\n\n  Own Id: OTP-8393\n\n- Improved handling of typed records in escripts\n\n  Own Id: OTP-8434\n\n- Added supervisor:count_children/1 to count the number of children being\n  managed without the memory impact of which_children/1. (Thanks to Jay Nelson.)\n\n  Own Id: OTP-8436","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.16.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-16-4"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The documentation is now built with open source tools (xsltproc and fop) that\n  exists on most platforms. One visible change is that the frames are removed.\n\n  Own Id: OTP-8201\n\n- \\[escript] The restriction that the first line in escripts must begin with\n  `#!` has been removed.\n\n  \\[escript] Some command line options to the escript executable has now been\n  documented. For example you can run an escript in the debugger by just adding\n  a command line option.\n\n  \\[escript] The documentation of the escript header syntax has been clarified.\n  For example the header is optional. This means that it is possible to directly\n  \"execute\" `.erl`, `.beam` and`.zip` files.\n\n  Own Id: OTP-8215\n\n- Optimized array:from_orddict/1, it is now faster and uses less memory if the\n  orddict was sparse.\n\n  Changed array:reset/2, it will now never expand the array which it could\n  before for non fixed arrays. See the documentation.\n\n  Own Id: OTP-8216\n\n- The Erlang Pretty Printer (`erl_pp`) now puts the leading `[` of list\n  comprehensions as well as the leading `<<` of bit string comprehensions on a\n  separate line in order to expose the Cover counter of the template.\n\n  Own Id: OTP-8227\n\n- The extension \".xrl\" used for Leex input files is now recognized by the\n  compiler.\n\n  Own Id: OTP-8232\n\n- Some clarifications have been made in the documentation regarding\n  `gen_server`, `gen_fsm`, and `gen_event` behavior when handling `'EXIT'`\n  messages from the parent process. For more information see the `m:gen_server`,\n  `m:gen_fsm`, and `m:gen_event` documentation.\n\n  Own Id: OTP-8255 Aux Id: seq11419\n\n- The -on_load() directive can be used to run a function when a module is\n  loaded. It is documented in the section about code loading in the Reference\n  Manual.\n\n  Own Id: OTP-8295","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.16.3.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-16-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- An erroneous type spec for `gen:start/6` caused dialyzer to erroneously issue\n  warnings when `{spawn_opt, SpawnOptionList}` was passed in the option list to\n  the `gen_server` and `gen_fsm` start functions.\n\n  Own Id: OTP-8068 Aux Id: seq11323, seq11314","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.16.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-16-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The linter used to crash on invalid `-opaque` declarations.\n\n  Own Id: OTP-8051\n\n- Bugs in `digraph:add_edge/5` and `digraph:del_path/3` have been fixed. (Thanks\n  to Crystal Din.)\n\n  Own Id: OTP-8066\n\n- When trying to insert objects with `dets:insert_new()` into a Dets table of\n  type `duplicate_bag`, already existing objects would sometimes be duplicated.\n  This bug has been fixed. (Thanks to Crystal Din.)\n\n  Own Id: OTP-8070\n\n- Running erlc in a very deep directory (with a path length of more 256 or more\n  characters) would cause the emulator to crash in a call to\n  [`list_to_atom/1`](`list_to_atom/1`). (Thanks to Chris Newcombe.)\n\n  Own Id: OTP-8124\n\n- A few minor bugs have been fixed in the Erlang Code Preprocessor (`epp`).\n\n  Own Id: OTP-8130\n\n- A bug in The Erlang Meta Interpreter (`erl_eval`) has been fixed: exceptions\n  generated in the template of bit string comprehensions were not handled\n  properly. (Thanks to Ulf Wiger.)\n\n  Own Id: OTP-8133","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Option `{capture,none}` was missing in documentation for `re:run/3`.\n\n  Own Id: OTP-8113\n\n- When [`erl_scan:tokens()`](`t:erl_scan:tokens/0`) returns an error tuple\n  `{error, ErrorInfo, EndLocation`\\}, the list `LeftOverChars` is the remaining\n  characters of the input data, starting from `EndLocation`. It used to be the\n  empty list.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-8129\n\n- The Erlang Meta Interpreter (`erl_eval`) has been somewhat optimized when it\n  comes to interpreting `receive`\\-expressions. (Thanks to Richard Carlsson.)\n\n  Own Id: OTP-8139\n\n- The Erlang Pretty Printer (`erl_pp`) has been modified as to handle types.\n\n  Own Id: OTP-8150","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.16.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-16-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The text of tokens returned by the Erlang scanner (`erl_scan`) was sometimes\n  empty when the `text` option was given and `StartLocation` was a line. This\n  bug has been fixed.\n\n  Own Id: OTP-7965\n\n- The documentation for `base64:decode/1` has been updated to point out that it\n  strips whitespace.\n\n  `base64:decode/1` and `base64:mime_decode/1` would sometimes fail instead of\n  stripping away non-base64 characters.\n\n  Own Id: OTP-7984\n\n- Two types in the `gen` module were corrected.\n\n  Own Id: OTP-8029 Aux Id: seq11296\n\n- `array:from_orddict([])` and `array:from_list([])` would construct fixed\n  arrays instead of extendible arrays.\n\n  Own Id: OTP-8033","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Interpreted escripts are now tail recursive.\n\n  The function erl_eval:expr/5 has been introduced.\n\n  Own Id: OTP-7933\n\n- `gen_server:call/2,3` will be somewhat faster if the calling process has a\n  many messages in its message queue.\n\n  Own Id: OTP-7979\n\n- Random now supports seed with arity one, `random:seed/1`, which takes a\n  three-tuple.\n\n  Own Id: OTP-8019\n\n- The `regexp` module now recognizes the escape sequences `\\xXY` and `\\x{X...}`.\n\n  Own Id: OTP-8024","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.16.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-16-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The documentation of `dets:open_file/1` now states that the file is repaired\n  if it has not been properly closed. (Thanks to Ulf Wiger.)\n\n  Own Id: OTP-7895","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The Erlang scanner no longer returns the text of tokens when the start\n  location is a pair of a line and column unless the new option `text` is\n  supplied (incompatibility with R13A).\n\n  There are new functions to access the attributes of tokens:\n  `attributes_info/1,2` and `set_attribute/3`.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7892 Aux Id: OTP-7810\n\n- Several glitches and performance issues in the Unicode and I/O-system\n  implementation of R13A have been corrected.\n\n  Own Id: OTP-7896 Aux Id: OTP-7648 OTP-7887\n\n- The type spec of filelib:wildcard/2 has been corrected.\n\n  Own Id: OTP-7915\n\n- New functions: `gb_sets:is_disjoint/2`, `ordsets:is_disjoint/2`, and\n  `gb_sets:is_disjoint/2`.\n\n  Own Id: OTP-7947\n\n- The function `gb_trees:map/2` which was added in R13A is now documented.\n\n  Own Id: OTP-7948","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.16 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-16"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Fixed a minor race conditions in `gen_server:start*`: if one of these\n  functions returned `{error,Reason}` or `ignore`, the name could still be\n  registered (either locally or in `global`).\n\n  A process started by `proc_lib` in some cases depended on its process\n  dictionary not to be erased, and would crash when terminating abnormally and\n  not generate a proper crash report. This has been corrected (but the initial\n  call will not be shown in the error report if the process dictionary has been\n  erased). NOTE: There is no longer any need to erase the process dictionary for\n  memory conservation reasons, since the actual call arguments are no longer\n  saved in the process dictionary.\n\n  Own Id: OTP-7669\n\n- The Erlang preprocessor used wrong line number when stringifying macro\n  arguments. (Thanks to John Hughes.)\n\n  Own Id: OTP-7702\n\n- A bug in the `qlc` module has been fixed: merge join sometimes failed to\n  return all answers. (Thanks to Bernard Duggan.)\n\n  Own Id: OTP-7714","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- A new option, `key_equality`, has been added to `qlc:table/2`. This option\n  makes it possible for `qlc` to better handle tables that use `==/2` when\n  comparing keys for equality (examples of such tables are ordered ETS tables\n  and gb_table in qlc(3)).\n\n  Own Id: OTP-6674\n\n- The functions `lists:seq/1,2` return the empty list in a few cases when they\n  used to generate an exception, for example `lists:seq(1, 0)`. See lists(3) for\n  details. (Thanks to Richard O'Keefe.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7230\n\n- The order of objects visited in select for ordered_set is now documented.\n\n  Own Id: OTP-7339\n\n- It is now possible to debug code in escripts and archives.\n\n  Own Id: OTP-7626\n\n- Support for Unicode is implemented as described in EEP10. Formatting and\n  reading of unicode data both from terminals and files is supported by the io\n  and io_lib modules. Files can be opened in modes with automatic translation to\n  and from different unicode formats. The module 'unicode' contains functions\n  for conversion between external and internal unicode formats and the re module\n  has support for unicode data. There is also language syntax for specifying\n  string and character data beyond the ISO-latin-1 range.\n\n  The interactive shell will support input and output of unicode characters when\n  the terminal and operating system supports it.\n\n  Please see the EEP and the io/io_lib manual pages as well as the stdlib users\n  guide for details.\n\n  _I/O-protocol incompatibilities:_\n\n  The io_protocol between io_Server and client is updated to handle protocol\n  data in unicode formats. The updated protocol is now documented. The\n  specification resides in the stdlib _users manual_, which is a new part of the\n  manual.\n\n  _io module incompatibilities:_\n\n  The io:put_chars, io:get_chars and io:get_line all handle and return unicode\n  data. In the case where binaries can be provided (as to io:put_chars), they\n  shall be encoded in UTF-8. When binaries are returned (as by\n  io:get_line/get_chars when the io_server is set in _binary mode_) the returned\n  data is also _always_ encoded as UTF-8. The file module however still returns\n  byte-oriented data, why file:read can be used instead of io:get_chars to read\n  binary data in ISO-latin-1.\n\n  _io_lib module incompatibilities:_\n\n  io_lib:format can, given new format directives (i.e \"~ts\" and \"~tc\"), return\n  lists containing integers larger than 255.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7648 Aux Id: OTP-7580 OTP-7514 OTP-7494 OTP-7443 OTP-7181 EEP10\n  EEP11\n\n- The function `pool:attach/1` now returns `already_attached` if the node is\n  already attached, rather than `allready_attached` (sic\\!). (Thanks to Edwin\n  Fine.)\n\n  Own Id: OTP-7653 Aux Id: OTP-7603\n\n- Preprocessor directives are now allowed in escripts. This means that for\n  example macros may be used in escripts.\n\n  Own Id: OTP-7662\n\n- When a process started with `proc_lib`, `gen_server`, or `gen_fsm` exits with\n  reason `{shutdown,Term}`, a crash report will no longer be generated (to allow\n  a clean shutdown, but still provide additional information to process that are\n  linked to the terminating process).\n\n  Own Id: OTP-7740 Aux Id: seq10847\n\n- A new BIF, `lists:keyfind/3`, has been added. It works like\n  `lists:keysearch/3` except that it does not wrap the returned tuple in a\n  `value` tuple in case of success. (Thanks to James Hague for suggesting this\n  function.)\n\n  Own Id: OTP-7752\n\n- `lists:suffix(Suffix, List)` used to have a a complexity of\n  `length(Suffix)*length(List)` (which could become quite slow for some inputs).\n  It has now been re-implemented so that its complexity is\n  `length(Suffix)+length(List)`. (Thanks to Richard O'Keefe for the new\n  implementation.)\n\n  Own Id: OTP-7797\n\n- The Erlang scanner has been augmented as to return white spaces, comments, and\n  exact location of tokens. The functions `string/3`, `tokens/4`, and\n  `token_info/1,2` are new. See erl_scan(3) for details.\n\n  `tokens/3,4` have been modified as to return a list of tokens instead of an\n  error when `eof` is encountered before the dot.\n\n  Own Id: OTP-7810\n\n- `filelib:fold_files/5` now uses the `re` module instead of the `regexp` module\n  for regular expression matching. In practice, this change will not be a\n  problem for most regular expressions used for `filelib:fold_files/5`. (The\n  major difference in regular expression is that parenthesis and curly brackets\n  is treated as literal characters by `regexp` but as special characters by\n  `re`; fortunately, those characters are rarely used in filenames.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7819\n\n- `digraph:new(Type)` will now cause a `badarg` exception if `Type` is not a\n  valid type. Similarly, `digraph_utils:subgraph/2,3` will now cause a `badarg`\n  if the arguments are invalid. (Those functions used to return error tuples if\n  something was wrong.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7824\n\n- The argument passed to `random:uniform/1` must now be an integer (as stated in\n  the documentation). In previous releases, a floating point number was also\n  allowed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7827\n\n- The copyright notices have been updated.\n\n  Own Id: OTP-7851\n\n- A few missing match spec functions was added to dbg:fun2ms; exception_trace/0\n  and trace/2,3.\n\n  There is a new function queue:member/2.\n\n  A bug in io_lib:fread that made it accidentally concatenate fields separated\n  by newline has been corrected. Reported and analyzed by Matthew Palmer to\n  erlang-patches.\n\n  Own Id: OTP-7865","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.15.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-15-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A bug in the `qlc` module has been fixed: when merge joining two query handles\n  the temporary file used for equivalence classes was not truncated properly\n  which could result in poor performance.\n\n  Own Id: OTP-7552\n\n- The characters 16#C0 and 16#E0 (\"A\" and \"a\" with grave accent), were not\n  properly converted by the `string:to_lower/1` and `string:to_upper/1`\n  functions. (Thanks to Richard O'Keefe.)\n\n  Own Id: OTP-7589\n\n- The function `pool:attach/1` now returns `already_attached` if the node is\n  already attached, rather than `allready_attached` (sic\\!). (Thanks to Edwin\n  Fine.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7603\n\n- The documentation for `io:get_line/1,2` now mentions that the return value can\n  also be `{error,Reason}`.\n\n  Own Id: OTP-7604 Aux Id: seq11063","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The split function is now added to the re library. Exceptions and errors from\n  both run, replace and split are made more consistent.\n\n  Own Id: OTP-7514 Aux Id: OTP-7494\n\n- Processes spawned using `proc_lib` (including `gen_server` and other library\n  modules that use `proc_lib`) no longer keep the entire argument list for the\n  initial call, but only the arity.\n\n  Also, if `proc_lib:spawn/1` is used to spawn a fun, the actual fun is not\n  kept, but only module, function name, and arity of the function that\n  implements the fun.\n\n  The reason for the change is that keeping the initial fun (or a fun in an\n  argument list), would prevent upgrading the code for the module. A secondary\n  reason is that keeping the fun and function arguments could waste a\n  significant amount of memory.\n\n  The drawback with the change is that the crash reports will provide less\n  precise information about the initial call (only `Module:Function/Arity`\n  instead of `Module:Function(Arguments)`). The function\n  `proc_lib:initial_call/1` still returns a list, but each argument has been\n  replaced with a dummy atom.\n\n  Own Id: OTP-7531 Aux Id: seq11036\n\n- There is now experimental support for loading of code from archive files. See\n  the documentation of `code`, `init`, `erl_prim_loader `and `escript` for more\n  info.\n\n  The error handling of `escripts` has been improved.\n\n  An `escript` may now set explicit arguments to the emulator, such as\n  `-smp enabled`.\n\n  An `escript` may now contain a precompiled beam file.\n\n  An `escript` may now contain an archive file containing one or more\n  applications (experimental).\n\n  The internal module `code_aux` has been removed.\n\n  Own Id: OTP-7548 Aux Id: otp-6622\n\n- Enabled explicit control of which types of files that should be compressed in\n  a ZIP archive.\n\n  Own Id: OTP-7549 Aux Id: otp-6622\n\n- In the job control mode, the \"s\" and \"r\" commands now take an optional\n  argument to specify which shell to start. (Thanks to Robert Virding.)\n\n  Own Id: OTP-7617","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.15.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-15-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A bug in the calendar module could cause\n  calendar:local_time_to_universal_time_dst/1 to return duplicate identical\n  values for local times in timezones without DST. Multiple values should only\n  be returned when a local time is within the hour occurring twice due to shift\n  from DST to non-DST, and certainly only in timezones with DST. The correct\n  behaviour is now implemented.\n\n  Own Id: OTP-7344 Aux Id: seq10960\n\n- The documentation of `(d)ets:init_table()` has been corrected. (Thanks to Paul\n  Mineiro.)\n\n  Own Id: OTP-7413\n\n- The soft upper limit of 60 on the number of non-white characters on a line,\n  which was introduced in R12B-0 for the control sequences `p` and `P` of the\n  functions `io:fwrite/2,3` and `io_lib:fwrite/2`, has been removed. This means\n  that terms whose printed representation fits on a line will have no NEWLINEs.\n  The Erlang shell still uses the 60 character limit, though.\n\n  Own Id: OTP-7421 Aux Id: OTP-6708\n\n- Some debug code has been removed from Dets.\n\n  Own Id: OTP-7424\n\n- The documentation of `dets:match_delete/2` has been corrected. (Thanks to Paul\n  Mineiro.)\n\n  Own Id: OTP-7445\n\n- Corrections of digraph(3). (Thanks to Vlad Dumitrescu.)\n\n  Own Id: OTP-7492\n\n- For the process that an escript runs in, the `trap_exit` process flag is now\n  `false` instead of `true` (as in previous releases). Scripts that depend on\n  the previous (counter-intuitive) behaviour might not work. (Thanks to Bengt\n  Kleberg.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-7517","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The documentation of `lists:(u)sort/2` now states what is expected of an\n  ordering function.\n\n  Own Id: OTP-7489\n\n- The re module is extended with repetitive matches (global option) and\n  replacement function.\n\n  Own Id: OTP-7494 Aux Id: OTP-7181\n\n- The Erlang shell now displays a nicer error message when evaluating an\n  undefined command. (Thanks to Richard Carlsson.)\n\n  Own Id: OTP-7495","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.15.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-15-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- zip:unzip to/from binary with empty directories did not work. (Thanks to\n  Martin Dvorak.)\n\n  Own Id: OTP-7248\n\n- The documentation of the control sequence `w` of the `io_lib` module now\n  states that floating point numbers are printed accurately.\n\n  Own Id: OTP-7324 Aux Id: OTP-7084\n\n- zip:unzip was not supporting a flavour of the zip format found in jar-files.\n\n  Own Id: OTP-7382 Aux Id: seq10970","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- An experimental module \"re\" is added to the emulator which interfaces a\n  publicly available regular expression library for Perl-like regular\n  expressions (PCRE). The interface is purely experimental and _will_ be subject\n  to change.\n\n  The implementation is for reference and testing in connection to the relevant\n  EEP.\n\n  Own Id: OTP-7181","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.15.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-15-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- When inserting many small objects, Dets sometimes crashed when reaching the\n  maximum number of slots. (Thanks to Daniel Goertzen.)\n\n  Own Id: OTP-7146\n\n- Processes linked to the Erlang shell did not get an exit signal when the\n  evaluator process was killed. This bug, introduced in R12B-0, has been fixed.\n\n  Own Id: OTP-7184 Aux Id: OTP-6554\n\n- Invalid arguments to `ets:update_counter/3` were not handled correctly. A\n  tuple position (`Pos`) less than 1 caused the element directly following the\n  key to be updated (as if no position at all had been specified). All invalid\n  values for `Pos` will now fail with `badarg`.\n\n  Own Id: OTP-7226\n\n- For certain terminals, io:columns/0 could return 0 instead of enotsup. That is\n  now corrected.\n\n  Own Id: OTP-7229 Aux Id: seq10886\n\n- `qlc:info()` can now handle port identifiers, pids, references, and funs.\n  (Thanks to Wojciech Kaczmare for reporting this bug.)\n\n  When evaluating the `parent_fun` messages sent to the process calling\n  `qlc:cursor()` were sometimes erroneously consumed. This bug has been fixed.\n\n  Own Id: OTP-7232\n\n- `erl_parse:abstract()` can now handle bit strings.\n\n  Own Id: OTP-7234","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The `queue` module has been rewritten to make it easier to use. Suggestions\n  and discussion from and with among others Lev Walkin, Anders Ramsell and Rober\n  Virding in december 2007 on erlang-questions@erlang.org. It was also discussed\n  to change the internal representation to contain length information which\n  would speed up `len/1` but that change has been postponed. Anyone interested\n  may write an EEP and try to reach an acceptable compromise for queue overhead\n  and thereby the speed of all other operations than `len/1`. The `queue` module\n  is now optimized for fast and minimal garbage `in/2` and `out/1` and such. See\n  the documentation.\n\n  New functions: `is_queue/1`, [`get/1`](`get/1`), `get_r/1`, `peek/1`,\n  `peek_r/1`, `drop/1`, `drop_r/1` and `liat/1`. `is_queue/1` is a new\n  predicate, `liat/1` is a correction of an old misspelling, and the others\n  (`get`\\*, `peek`\\* and `drop`\\*) are new interface functions.\n\n  Own Id: OTP-7064\n\n- The functions `io_lib:write/1,2` and `io_lib:print/1,4` have been changed when\n  it comes to writing floating point numbers. This change affects the control\n  sequences `p`, `P`, `w`, and `W` of the `io_lib` module. (Thanks to Bob\n  Ippolito for code contribution.)\n\n  Own Id: OTP-7084\n\n- Updated the documentation for `erlang:function_exported/3` and `io:format/2`\n  functions to no longer state that those functions are kept mainly for\n  backwards compatibility.\n\n  Own Id: OTP-7186\n\n- A new BIF ets:update_element/3. To update individual elements within an\n  ets-tuple, without having to read, update and write back the entire tuple.\n\n  Own Id: OTP-7200\n\n- `string:join/2` now accepts an empty list as first argument.\n\n  Own Id: OTP-7231 Aux Id: OTP-6671\n\n- `qlc:info/1,2` accepts a new option, `depth`. The type `SelectedObjects` used\n  in the description of `qlc:table/2` has been augmented.\n\n  Own Id: OTP-7238\n\n- [`tuple_size/1`](`tuple_size/1`) and [`byte_size/1`](`byte_size/1`) have been\n  substituted for [`size/1`](`size/1`) in the documentation.\n\n  Own Id: OTP-7244","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.15.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-15-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Ets:select/3 in combination with ets:repair_continuation/2 and ordered_set\n  data tables could result in function_clause although used as intended. This is\n  now corrected. Thanks to Paul Mineiro for finding and isolating the bug\\!\n\n  Own Id: OTP-7025\n\n- The compiler warning for the deprecated function `ftp:close/1` now mentions\n  the correct replacement function.\n\n  The warning for the removed functions in the `httpd_util` module have been\n  changed to say they have been removed, not merely deprecated. (Thanks to\n  Fredrik Thulin.)\n\n  Own Id: OTP-7034 Aux Id: seq10825\n\n- In `(Expr)#r{}` (no fields are updated), `Expr` is no longer evaluated more\n  than once. There is also a test that `Expr` is of the correct record type.\n  (Thanks to Dominic Williams.)\n\n  Own Id: OTP-7078 Aux Id: OTP-4962\n\n- Documentation bugfixes and clarifications.\n\n  (Thanks to Joern (opendev@gmail.com), Matthias Lang, and Richard Carlsson.)\n\n  Own Id: OTP-7079\n\n- Duplicated objects were sometimes not deleted from the list of answers when a\n  QLC table was traversed using a match specification. (Thanks to Dmitri\n  Girenko.)\n\n  Own Id: OTP-7114","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The documentation has been updated so as to reflect the last updates of the\n  Erlang shell as well as the minor modifications of the control sequence `p` of\n  the `io_lib` module.\n\n  Superfluous empty lines have been removed from code examples and from Erlang\n  shell examples.\n\n  Own Id: OTP-6944 Aux Id: OTP-6554, OTP-6911\n\n- [`tuple_size/1`](`tuple_size/1`) and [`byte_size/1`](`byte_size/1`) have been\n  substituted for [`size/1`](`size/1`).\n\n  Own Id: OTP-7009\n\n- It is now possible to hibernate a gen_server/gen_event/gen_fsm. In gen_server\n  and gen_fsm, hibernation is triggered by returning the atom\n  'hibernate' instead of a timeout value. In the gen_event case hibernation is\n  triggered by a event handler returning a tuple with an extra element\n  containing the atom 'hibernate'.\n\n  Own Id: OTP-7026 Aux Id: seq10817\n\n- Some undocumented debug functionality has been added to Dets.\n\n  Own Id: OTP-7066\n\n- The functions `digraph_utils:is_tree/1`, `digraph_utils:is_arborescence/1`,\n  and `digraph_utils:arborescence_root/1` are new.\n\n  Own Id: OTP-7081\n\n- The compiler could generate suboptimal code for record updates if the record\n  update code consisted of multiple source code lines.\n\n  Own Id: OTP-7101","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.15 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-15"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Bugs have been fixed in `qlc`:\n\n  - Setting the `lookup_fun` option of `qlc:table/2` to `undefined` could cause\n    a crash.\n  - If a QLC restricted some column of a table in such a way that a traversal\n    using a match specification was possible and the QLC also compared the key\n    column or some indexed column of the the table with a column of some other\n    table, `qlc` always chose to traverse the table first, never considering\n    lookup join. This has been changed so that lookup join is always preferred;\n    if an initial traversal using the match specification is desired, the query\n    needs to be rewritten introducing an extra QLC with the filter(s)\n    restricting the column.\n  - When trying to find candidates for match specifications and lookup, filters\n    using variables from one generator only are ignored unless they are placed\n    immediately after the generator and possibly other filters using variables\n    from the same generator. In particular, filters joining two tables should\n    not be placed between the generator and the filters using the generator\n    only.\n  - The call-back function `TraverseFun` used for implementing QLC tables is\n    allowed to return a term other than a list since STDLIB 1.14 (OTP-5195).\n    However, when the returned term was a fun `qlc` often tried to call the fun\n    instead of returning it.\n\n  A few minor optimizations have been implemented as well.\n\n  Own Id: OTP-6673\n\n- A bug concerning the use of parameterized modules from the shell has been\n  fixed.\n\n  Own Id: OTP-6785\n\n- A bug regarding the size expression of the bit syntax has been fixed in the\n  `erl_eval` module.\n\n  Own Id: OTP-6787\n\n- The log_mf_h event handler didn't close the index file when it was done\n  reading it causing a file descriptor leak.\n\n  Own Id: OTP-6800\n\n- Definitions for the `filename()` and `dirname()` types have been added to the\n  documentation for the `filelib` module.\n\n  Own Id: OTP-6870\n\n- file:write_file/3, file:write/2 and file:read/2 could crash (contrary to\n  documentation) for odd enough file system problems, e.g write to full file\n  system. This bug has now been corrected.\n\n  In this process the file module has been rewritten to produce better error\n  codes. Posix error codes now originate from the OS file system calls or are\n  generated only for very similar causes (for example 'enomem' is generated if a\n  memory allocation fails, and 'einval' is generated if the file handle in\n  Erlang is a file handle but currently invalid).\n\n  More Erlang-ish error codes are now generated. For example `{error,badarg}` is\n  now returned from `file:close/1` if the argument is not of a file handle type.\n  See file(3).\n\n  The possibility to write a single byte using `file:write/2` instead of a list\n  or binary of one byte, contradictory to the documentation, has been removed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6967 Aux Id: OTP-6597 OTP-6291\n\n- A bug concerning the evaluation of the `++/2` operator has been fixed in\n  `erl_eval`. (Thanks to Matthew Dempsky.)\n\n  Own Id: OTP-6977","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The behaviour of the internal functions gen:call/3,4 has been changed slightly\n  in the rare case that when the caller was linked to the called server, and the\n  server crashed during the call; its exit signal was consumed by the\n  gen:call/3,4 code and converted to an exit exception. This exit signal is no\n  longer consumed.\n\n  To even notice this change, 1) the calling process has to be linked to the\n  called server.\n\n  2. the call must not be remote by name that is it must be local or remote by\n     pid, local by name or global by name.\n\n  3. the calling process has to have set\n     [`process_flag(trap_exit, true)`](`process_flag/2`).\n\n  4. the server has to crash during the call.\n\n  5. the calling process has to be sensitive to getting previously consumed\n     `{'EXIT',Pid,Reason}` messages in its message queue.\n\n  The old behaviour was once the only way for a client to notice if the server\n  died, but has since `erlang:monitor(process, {Name,Node})` was introduced and\n  used in gen:call been regarded as an undesired behaviour if not a bug.\n\n  The affected user APIs are: `gen_server:call/2,3`,\n  `gen_fsm:sync_send_event/2,3`, `gen_fsm:sync_send_all_state_event/2,3`,\n  `gen_event:_`, `sys:_` and maybe a few others that hardly will be noticed.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-3954 Aux Id: Seq 4538\n\n- When an exception occurs the Erlang shell now displays the class, the reason,\n  and the stacktrace in a clearer way (rather than dumping the raw EXIT tuples\n  as before). `proc_lib:format/1` displays the exception of crash reports in the\n  same clearer way.\n\n  The new shell command `catch_exception` and the new application configuration\n  parameter `shell_catch_exception` can be used for catching exceptions that\n  would normally exit the Erlang shell.\n\n  Own Id: OTP-6554 Aux Id: OTP-6289\n\n- The function `string:join/2` joins strings in a list with a separator.\n  Example: '`string:join([\"a\", \"b\", \"c\"], \", \") gives \"a, b, c\"`'\n\n  Own Id: OTP-6671\n\n- The control sequence `P` of the `Format` argument of the functions\n  `io:fwrite/2,3` and `io_lib:fwrite/2` now inserts fewer line breaks when\n  printing tuples and lists. A soft upper limit of 60 on the number of non-white\n  characters on a line has been introduced.\n\n  Own Id: OTP-6708\n\n- The new module `array` provides a fast functional array implementation.\n\n  Own Id: OTP-6733\n\n- Functions that have long been deprecated have now been removed from the\n  following modules: `dict`, `erl_eval`, `erl_pp`, `io`, `io_lib`, `lists`,\n  `orddict`, `ordsets`, `sets`, and `string`.\n\n  The undocumented function `lists:zf/3` has also been removed (use a list\n  comprehension or `lists:zf/2` instead).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6845\n\n- Minor documentation corrections for file:pread/2 and file:pread/3.\n\n  Own Id: OTP-6853\n\n- Contract directives for modules in Kernel and STDLIB.\n\n  Own Id: OTP-6895\n\n- The `ets:fixtable/2` function, which has been deprecated for several releases,\n  has been removed.\n\n  The `ets:info/1` function has been reimplemented as a BIF, which guarantees\n  that information returned is consistent.\n\n  The `ets:info/2` function now fails with reason `badarg` if the second\n  argument is invalid. (Dialyzer can be used to find buggy code where the second\n  argument is misspelled.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6906\n\n- The Erlang pretty printer `erl_pp` now inserts more newlines in order to\n  facilitate line coverage analysis by `Cover`. (Thanks to Thomas Arts.)\n\n  Own Id: OTP-6911\n\n- The documentation for ets:safe_fixtable/2, ets:foldl/3, and ets:foldr/3 is now\n  clearer about what will happen if objects are inserted during table\n  traversals.\n\n  Own Id: OTP-6928 Aux Id: seq10779\n\n- It is now possible to extract files in tar files directly into binaries. It is\n  also possible to add files to tar files directly from binaries.\n\n  Own Id: OTP-6943\n\n- The functions `keystore/4` and `keytake/3` are new in the `lists` module.\n\n  Own Id: OTP-6953\n\n- The new `qlc` option `tmpdir_usage` can be used for outputting messages onto\n  the error logger when a temporary file is about to be created, or to prohibit\n  the usage of temporary files altogether.\n\n  Own Id: OTP-6964","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.5.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-5-3"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The allowed syntax for -type() and -spec() was updated.\n\n  Own Id: OTP-6861 Aux Id: OTP-6834","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.5.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-5-2"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The compiler will for forward compatibility ignore the -type() and -spec()\n  attributes that will be introduced in the R12B release.\n\n  Own Id: OTP-6834","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.5.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-5-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The log_mf_h event handler didn't close the index file when it was done\n  reading it causing a file descriptor leak.\n\n  Own Id: OTP-6800","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The dict:size/1 and orddict:size/1 functions have been documented.\n\n  Own Id: OTP-6818","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Bugs have been fixed in Dets concerning comparison (==) and matching (=:=).\n\n  The STDLIB manual pages have been updated as to more carefully state when\n  terms are matched and when they are compared.\n\n  Own Id: OTP-4738 Aux Id: OTP-4685\n\n- The shell has been updated to fix the following flaws: Shell process exit left\n  you with an unresponsive initial shell if not using oldshell. Starting a\n  restricted shell with a nonexisting callback module resulted in a shell where\n  no commands could be used, not even init:stop/0. Fun's could not be used as\n  parameters to local shell functions (in shell_default or user_default) when\n  restricted_shell was active.\n\n  Own Id: OTP-6537\n\n- A bug in QLC's parse transform has been fixed.\n\n  Own Id: OTP-6590\n\n- A bug concerning `lists:sort/1` and `lists:keysort/2` and a mix of floating\n  point numbers and integers has been fixed.\n\n  Own Id: OTP-6606\n\n- When calling `erlang:garbage_collect/0` in the Erlang shell not only the\n  evaluator process (the one returned by calling `self/0` in the Erlang shell)\n  is garbage collected, but also the process holding the history list.\n\n  Own Id: OTP-6659\n\n- Functions of the `beam_lib` module that used to catch exceptions and return a\n  tuple `{'EXIT',Reason}` now exit with the reason `Reason`.\n\n  Own Id: OTP-6711\n\n- The `erl_eval` module now calls the non-local function handler whenever an\n  operator is evaluated (exceptions are `andalso`, `orelse`, and `catch`). The\n  non-local function handler is now also called when the function or operator\n  occurs in a guard test (such calls used to be ignored).\n\n  These changes affect the Erlang shell when running in restricted mode: the\n  callback function `non_local_allowed/3` is now called for operators such as\n  `'!'/2`. This means that `non_local_allowed/3` may need to\n  be changed as to let operators through. Note that `erlang:'!'/2` as well as\n  `erlang:send/2,3` have to be restricted in order to stop message passing in\n  the shell.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6714 Aux Id: seq10374","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The new compiler option `warn_obsolete_guard` can be used for turning on\n  warnings for calls to old type testing BIFs.\n\n  Own Id: OTP-6585\n\n- For scripts written using `escript`, there is a new function\n  `escript:script_name/0`, which can be used to retrieve the pathame of the\n  script. The documentation has been clarified regarding pre-defined macros such\n  as ?MODULE and the module name.\n\n  Own Id: OTP-6593\n\n- Minor Makefile changes.\n\n  Own Id: OTP-6689 Aux Id: OTP-6742","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The MD5 calculation of a BEAM file done by `code:module_md5/1`,\n  `beam_lib:md5/1`, and by the compiler for the default value of the `vsn`\n  attribute have all been changed so that its result will be the same on all\n  platforms; modules containing funs could get different MD5s on different\n  platforms.\n\n  Own Id: OTP-6459\n\n- When sorting terms using the `file_sorter` module (the option `Format` set to\n  `term`), file errors were not always properly handled. This bug has been\n  fixed.\n\n  The directory supplied with the `tmpdir` option is no longer checked unless it\n  is actually used. The error reason `not_a_directory` can no longer be\n  returned; instead a `file_error` tuple is returned\n\n  Own Id: OTP-6526\n\n- Bugs regarding `try`/`catch` have been fixed in the `erl_eval` module.\n\n  Own Id: OTP-6539\n\n- When sorting the operands of a join operation, QLC called `file:open/3` with\n  bad arguments. This bug has been fixed.\n\n  Own Id: OTP-6562 Aux Id: seq10606","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The functions `beam_lib:cmp/1` and `beam_lib:strip/1` (and similar functions)\n  have been updated to handle optional chunks (such as \"FunT\") in more general\n  way in order to be future compatible.\n\n  The function `beam_lib:chunks/3` has been added.\n\n  The function `beam_lib:md5/1` has been added.\n\n  Own Id: OTP-6443\n\n- Added base64 as a module to stdlib, encoding and decoding\n\n  Own Id: OTP-6470\n\n- Added the functions to_upper/1 and to_lower/1 to the string module. These\n  provide case conversion for ISO/IEC 8859-1 characters (Latin1) and strings.\n\n  Own Id: OTP-6472\n\n- The callback function `non_local_allowed/3` used by the restricted shell can\n  now return the value `{{restricted,NewFuncSpec,NewArgList},NewState}` which\n  can be used for letting the shell call some other function than the one\n  specified.\n\n  Own Id: OTP-6497 Aux Id: seq10555\n\n- There is a new `escript` program that can be used for writing scripts in\n  Erlang. Erlang scripts don't need to be compiled and any arguments can be\n  passed to them without risk that they are interpreted by the Erlang system.\n\n  Own Id: OTP-6505\n\n- The `Format` argument of the functions `io:fwrite/2,3` and `io_lib:fwrite/2`\n  is now allowed to be a binary.\n\n  Own Id: OTP-6517","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.3.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-3-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The control sequences `p` and `P` of the `Format` argument of the functions\n  `io:fwrite/2,3` and `io_lib:fwrite/2` could cause a `badarg` failure when\n  applied to binaries. This bug was introduced in STDLIB 1.14.3. (Thanks to\n  Denis Bilenko.)\n\n  Own Id: OTP-6495","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Added the option \\{cwd, Dir\\} to make zip-archives with relative pathnames\n  without having to do (a global) file:set_cwd.\n\n  Own Id: OTP-6491 Aux Id: seq10551","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The `spawn_opt/2,3,4,5` option `monitor` \\-- introduced in Kernel 2.11.2 -- is\n  currently not possible to use when starting a process using `proc_lib`, that\n  is, also when starting a gen_server, gen_fsm etc.\n\n  This limitation has now been properly documented and the behavior of the\n  `gen_fsm`, `gen_server`, and `proc_lib` `start` and `start_link` functions\n  when providing this option has been changed from hanging indefinitely to\n  failing with reason `badarg`.\n\n  (Thanks to Fredrik Linder)\n\n  Own Id: OTP-6345","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The control sequence `P` of the `Format` argument of the functions\n  `io:fwrite/2,3` and `io_lib:fwrite/2` now replaces the tail of binary strings\n  with `...` when the maximum depth has been reached. For instance,\n  `io:fwrite(\"~P\", [<<\"a binary string\">>, 3]).` prints `<<\"a binary\"...>>`.\n\n  The indentation takes more care not to exceed the right margin, if possible.\n\n  If the maximum depth is reached while printing a tuple, `,...` is printed\n  instead of `|...` (this change applies to the control sequence `W` as well).\n\n  Own Id: OTP-6354\n\n- The Erlang shell command `h/0` that prints the history list now avoids\n  printing (huge) terms referred to by `v/1` but instead just prints the call to\n  `v/1`.\n\n  Own Id: OTP-6390","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.2.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-2-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The functions `dets:select/1,3`, `dets:match/1,3`, and `dets:match_object/1,3`\n  have been changed as to never return `{[],Continuation}`. This change affects\n  the corresponding functions in Mnesia.\n\n  Bugs have been fixed in QLC: `qlc:info()` could crash if the `tmpdir` option\n  did not designate a valid directory; the results of looking up keys are kept\n  in RAM, which should improve performance.\n\n  Own Id: OTP-6359","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.14.2.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-2-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A bug in `erl_pp:exprs()` has been fixed.\n\n  Own Id: OTP-6321 Aux Id: seq10497","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.14.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-2"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The control sequences `p` and `P` of the `Format` argument of the functions\n  `io:format/2,3` and `io_lib:format/2` did not handle binaries very well. This\n  bug, introduced in stdlib-1.14, has been fixed.\n\n  Own Id: OTP-6230\n\n- `filelib:wildcard(Wc, PathWithRedundantSlashes)`, where\n  `PathWithRedundantSlashes` is a directory path containing redundant slashes,\n  such as `/tmp/` or `//tmp`, could return incorrect results. (Thanks to Martin\n  Bjorklund.)\n\n  Own Id: OTP-6271\n\n- The Erlang code preprocessor crashed if the predefined macros ?MODULE or\n  ?MODULE_STRING were used before the module declaration. This bug has been\n  fixed.\n\n  Own Id: OTP-6277","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Support for faster join of two tables has been added to the `qlc` module.\n  There are two kinds of fast joins: lookup join that uses existing indices, and\n  merge join that takes two sorted inputs. There is a new `join` option that can\n  be used to force QLC to use a particular kind of join in some QLC expression.\n\n  Several other changes have also been included:\n\n  - The new `tmpdir` option of `cursor/2`, `eval/2`, `fold/4`, and `info/2` can\n    be used to set the directory that join uses for temporary files. The option\n    also overrides the `tmpdir` option of `keysort/3` and `sort/2`.\n  - The new `lookup` option can be used to assert that constants are looked up\n    when evaluating some QLC expression.\n  - The `cache` and `cache_all` options accept new tags: `ets`, `list`, and\n    `no`. The tag `list` caches answers in a list using a temporary file if the\n    answers cannot be held in RAM. Combining `{cache,list}` and `{unique, true}`\n    is equivalent to calling `sort/2` with the option `unique` set to `true`.\n    The old tags `true` (equivalent to `ets`) and `false` (equivalent to `no`)\n    are recognized for backward compatibility.\n  - The new option `max_list_size` can be used to set the limit where merge join\n    starts to use temporary files for large equivalence classes and when answers\n    cached in lists are put on temporary files.\n  - There is a new callback `is_sorted_key` to be supplied as an option to\n    `table/2`.\n  - QLC analyzes each and every QLC expression when trying to find constants for\n    the lookup function. Hitherto only QLC expressions with exactly one\n    generator were analyzed.\n\n    Note that only filters with guard syntax placed immediately after the\n    generator are analyzed. The restriction to guard filters is an incompatible\n    change. See `m:qlc` for further details.\n\n  - In a similar way several match specifications for traversal of QLC tables\n    can be utilized for different generators of one single QLC expression.\n  - A bug has been fixed: when caching answers to a sufficiently complex query\n    it could happen that some answers were not returned.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6038\n\n- The Erlang pretty printer (`erl_pp`) is now much faster when the code is\n  deeply nested. A few minor bugs have been fixed as well.\n\n  Own Id: OTP-6227 Aux Id: OTP-5924\n\n- The Erlang shell now tries to garbage collect large binaries. Under certain\n  circumstances such binaries could otherwise linger on for an indefinite amount\n  of time.\n\n  Own Id: OTP-6239\n\n- To help Dialyzer find more bugs, many functions in the Kernel and STDLIB\n  applications now only accept arguments of the type that is documented.\n\n  For instance, the functions `lists:prefix/2` and `lists:suffix/2` are\n  documented to only accept lists as their arguments, but they actually accepted\n  anything and returned `false`. That has been changed so that the functions\n  cause an exception if one or both arguments are not lists.\n\n  Also, the `string:strip/3` function is documented to take a character argument\n  that is a character to strip from one or both ends of the string. Given a list\n  instead of a character, it used to do nothing, but will now cause an\n  exception.\n\n  Dialyzer will find most cases where those functions are passed arguments of\n  the wrong type.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6295","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.14.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The functions `c:y/1,2` which call `yecc:file/1,2` are now listed by\n  `c:help/0`.\n\n  Documentation of `c:y/1,2` has been added to `m:c`.\n\n  The fact that the control sequence character `s` recognizes binaries and deep\n  character lists has been documented in `m:io`. This feature was added in\n  R11B-0 (OTP-5403).\n\n  Own Id: OTP-6140\n\n- The shell command rr() sometimes failed to read record definitions from\n  file(s). This problem has been fixed.\n\n  Own Id: OTP-6166 Aux Id: OTP-5878\n\n- The nonlocal function handler in `erl_eval`, which is used for implementing\n  the restricted mode of the Erlang shell, did not handle calls to\n  `erlang:apply/3` correctly. This bug has been fixed.\n\n  Own Id: OTP-6169 Aux Id: seq10374\n\n- ets:rename/1 could deadlock, or crash the SMP emulator when the table wasn't a\n  named table.\n\n  ets:next/2, and ets:prev/2 could return erroneous results on the SMP emulator.\n\n  Own Id: OTP-6198 Aux Id: seq10392, seq10415\n\n- When closing a Dets table the space management data was sometimes saved in\n  such a way that opening the table could not be done without repairing the\n  file. This bug has been fixed.\n\n  Own Id: OTP-6206","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.14 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-14"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A bugfix in QLC: two of the call-back functions used for implementing QLC\n  tables, `TraverseFun` and `LookupFun`, are now allowed to return a term other\n  than a list. Such a term is immediately returned as the results of the current\n  query, and is useful mostly for returning error tuples.\n\n  Several other minor bugs have been also been fixed.\n\n  Own Id: OTP-5195\n\n- The STDLIB modules `error_logger_file_h` and `error_logger_tty_h` now read the\n  environment variable `utc_log` from the SASL application.\n\n  Own Id: OTP-5535\n\n- `ets:info/1` has been corrected to behave according to the documentation and\n  return a list of tuples, not a tuple with tuples.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-5639\n\n- Referencing a so far undeclared record from the default value of some record\n  declaration is from now on considered an error by the linter. It is also an\n  error if the default value of a record declaration uses or binds a variable.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-5878\n\n- When a file `.hrl` file is included using `-include_lib`, the include path is\n  temporarily updated to include the directory the `.hrl` file was found in,\n  which will allow that `.hrl` file to itself include files from the same\n  directory as itself using `-include`. (Thanks to Richard Carlsson.)\n\n  Own Id: OTP-5944\n\n- Corrected `filelib:ensure_dir/1` which sometimes returned `true` and sometimes\n  `ok` to always return `ok` when successful. This goes against the\n  documentation which said `true`, but `ok` was judged to be a more logical\n  return value.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-5960 Aux Id: seq10240\n\n- The shell now handles records better when used in calls on the form\n  `{Module, Function}(ArgList)`.\n\n  Own Id: OTP-5990 Aux Id: OTP-5876\n\n- The functions `lists:ukeysort/2` and `lists:ukeymerge/3` have been changed in\n  such a way that two tuples are considered equal if their keys match.\n\n  For the sake of consistency, `lists:usort/2` and `lists:umerge/3` have been\n  modified too: two elements are considered equal if they compare equal.\n\n  The `file_sorter` module has been modified in a similar way: the `unique`\n  option now applies to the key (`keysort()` and `keymerge()`) and the ordering\n  function (the option `{order, Order} `).\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-6019\n\n- Correction in documentation for `ets:update_counter/3`; failure with `badarg`\n  also if the counter to be updated is the key.\n\n  Own Id: OTP-6072\n\n- When sorting terms using the `file_sorter` module and an ordering fun, the\n  sort was not always stable. This bug has been fixed.\n\n  Own Id: OTP-6088","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Improvements of the linter:\n\n  - The `compile` attribute is recognized after function definitions.\n  - The new compiler option `nowarn_deprecated_function` can be used for turning\n    off warnings for calls to deprecated functions.\n  - The new compiler option `{nowarn_unused_function,[{Name,Arity}]}` turns off\n    warnings for unused local functions for the mentioned functions. The new\n    options `{nowarn_deprecated_function,[{Module,Name,Arity}]}` and\n    `{nowarn_bif_clash,[{Name,Arity}]}` work similarly.\n\n  The Erlang code preprocessor `epp` now recognizes the `file` attribute. This\n  attribute is meant to be used by tools such as Yecc that generate source code\n  files.\n\n  Own Id: OTP-5362\n\n- The formatting option `~s` of `io:fwrite` and `io_lib:fwrite` has been\n  extended to handle arguments that are binaries or I/O lists.\n\n  Own Id: OTP-5403\n\n- The control sequences `p` and `P` of the `Format` argument of the functions\n  `io:format/2,3` and `io_lib:format/2` have been changed as to display the\n  contents of binaries containing printable characters as strings.\n\n  Own Id: OTP-5485\n\n- The linter emits warnings for functions exported more than once in `export`\n  attributes.\n\n  Own Id: OTP-5494\n\n- A manual for STDLIB has been added, `stdlib(6)`. It mentions the configuration\n  parameters for the Erlang shell.\n\n  Own Id: OTP-5530\n\n- Added the `zip` module with functions for reading and creating zip archives.\n  See `m:zip`.\n\n  Own Id: OTP-5786\n\n- Simple-one-for-one supervisors now store the pids of child processes using\n  `dict` instead of a list. This significantly improves performance when there\n  are many dynamic supervised child processes. (Thanks to Mickaël Rémond et al.)\n\n  Own Id: OTP-5898\n\n- When given the new option '`strict_record_tests`', the compiler will generate\n  code that verifies the record type for '`R#record.field`' operations in\n  guards. Code that verifies record types in bodies has already been generated\n  since R10B, but in this release there will be a '`{badrecord,RecordTag}`'\n  instead of a '`badmatch`' if the record verification test fails. See the\n  documentation for the `compile` module for more information.\n\n  The Erlang shell always applies strict record tests.\n\n  Own Id: OTP-5915 Aux Id: OTP-5714\n\n- The Erlang pretty printer (`erl_pp`) now tries to insert line breaks at\n  appropriate places.\n\n  Own Id: OTP-5924\n\n- The `public` option has been removed from `digraph:new/1`. The reason is that\n  several functions in the `digraph` module are implemented using multiple ETS\n  accesses, which is not thread safe. (Thanks to Ulf Wiger.)\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-5985\n\n- The function `lists:keyreplace/4` checks that the fourth argument (`NewTuple`)\n  is a tuple.\n\n  Own Id: OTP-6023\n\n- Added an example of how to reconstruct source code from debug info (abstract\n  code) to `m:beam_lib`. (Thanks to Mats Cronqvist who wrote the example.)\n\n  Own Id: OTP-6073\n\n- The new compiler option `warn_unused_record` is used for finding unused\n  locally defined record types.\n\n  Own Id: OTP-6105","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.12 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-12"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- `shell_default:xm/1` has been added. It calls `xref:m/1`.\n\n  Own Id: OTP-5405 Aux Id: OTP-4101\n\n- Warnings are output whenever so far undeclared records are referenced from\n  some default value of a record declaration. In STDLIB 1.14 (R11B) such forward\n  references will cause a compilation error.\n\n  Own Id: OTP-5878\n\n- The linter's check of the `deprecated` attribute did not take the compile\n  option `export_all` into account. This bug has been fixed.\n\n  Own Id: OTP-5917\n\n- The Erlang pretty printer did not handle `try/catch` correctly. This bug has\n  been fixed.\n\n  Own Id: OTP-5926\n\n- Corrected documentation for `lists:nthtail/3`.\n\n  Added documentation for `lists:keymap/3`.\n\n  Tried to clarify some other type declarations and function descriptions in\n  `m:lists`.\n\n  Corrected documentation for `timer:now_diff/2`.\n\n  Fixed broken links in `m:gen_fsm`, `m:gen_server`, `m:io_lib` and `lib(3)`.\n\n  Own Id: OTP-5931\n\n- Type checks have been added to functions in `lists.erl`.\n\n  Own Id: OTP-5939","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The new STDLIB module `erl_expand_records` expands records in abstract code.\n  It is used by the Erlang shell, which means that Compiler is no longer used by\n  the shell.\n\n  Own Id: OTP-5876 Aux Id: OTP-5435\n\n- The compiler will now warn that the `megaco:format_versions/1` function is\n  deprecated.\n\n  Own Id: OTP-5976","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.11 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-11"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- When calling `gen_server:enter_loop` with a registered server name, it was\n  only checked that the registered name existed, not that it actually was the\n  name of the calling process.\n\n  Own Id: OTP-5854","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- More detail on `beam_lib:version/1` in documentation.\n\n  Own Id: OTP-5789\n\n- The new function `io:read/3` works like `io:read/1,2` but takes a third\n  argument, `StartLine`.\n\n  Own Id: OTP-5813\n\n- The new function `gen_fsm:enter_loop/4,5,6`, similar to\n  `gen_server:enter_loop/3,4,5`, has been added.\n\n  Own Id: OTP-5846 Aux Id: seq10163\n\n- The function `c:i/1` is now exported.\n\n  Own Id: OTP-5848 Aux Id: seq10164","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.10 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-10"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- A couple of type errors have been fixed in `sofs`.\n\n  Own Id: OTP-5739\n\n- The pre-processor used to complain that the macro definition\n  '`-define(S(S), ??S).`' was circular, which it isn't. (Thanks to Richard\n  Carlsson.)\n\n  Own Id: OTP-5777","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"STDLIB 1.13.9 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-9"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The linter, QLC and the module `erl_pp` did not handle the new '`fun M:F/A`'\n  construct in all situations. This problem has been fixed.\n\n  Own Id: OTP-5644","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The manual pages for most of the Kernel and some of the STDLIB modules have\n  been updated, in particular regarding type definitions.\n\n  The documentation of the return value for `erts:info/1` has been corrected.\n\n  The documentation for `erlang:statistics/1` now lists all possible arguments.\n\n  Own Id: OTP-5360\n\n- Replaced some tuple funs with the new `fun M:F/A` construct.\n\n  The high-order functions in the lists module no longer accept bad funs under\n  any circumstances. '`lists:map(bad_fun, [])`' used to return '`[]`' but now\n  causes an exception.\n\n  Unused, broken compatibility code in the `ets` module was removed. (Thanks to\n  Dialyzer.)\n\n  Eliminated 5 discrepancies found by Dialyzer in the Appmon application.\n\n  Own Id: OTP-5633\n\n- The `c:i/0` function will now run in a paged mode if there are more than 100\n  processes in the system. (Thanks to Ulf Wiger.)\n\n  `erlang:system_info(process_count)` has been optimized and does now return\n  exactly the same value as [`length(processes())`](`length/1`). Previously\n  `erlang:system_info(process_count)` did not include exiting processes which\n  are included in [`length(processes())`](`length/1`).\n\n  The `+P` flag for `erl`, which sets the maximum number of processes allowed to\n  exist at the same, no longer accepts values higher than 134217727. (You will\n  still probably run out of memory before you'll be able to reach that limit.)\n\n  Own Id: OTP-5645 Aux Id: seq9984","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.8 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-8"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Very minor corrections in `beam_lib` and its documentation.\n\n  Own Id: OTP-5589","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The `erlang:port_info/1` BIF is now documented. Minor corrections of the\n  documentation for `erlang:port_info/2`.\n\n  Added a note to the documentation of the `math` module that all functions are\n  not available on all platforms.\n\n  Added more information about the '`+c`' option in the `erl` man page in the\n  ERTS documentation.\n\n  Own Id: OTP-5555\n\n- The new `fun M:F/A` construct creates a fun that refers to the latest version\n  of `M:F/A`. This syntax is meant to replace tuple funs `{M,F}` which have many\n  problems.\n\n  The new type test [`is_function(Fun,A)`](`is_function/2`) (which may be used\n  in guards) test whether `Fun` is a fun that can be applied with `A` arguments.\n  (Currently, `Fun` can also be a tuple fun.)\n\n  Own Id: OTP-5584","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.7 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-7"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- `filelib:wildcard/2` was broken (it ignored its second argument).\n\n  Also, `filelib:wildcard(\"Filename\")` (where the argument does not contain any\n  meta-characters) would always return `[\"Filename\"]`. Corrected so that an\n  empty list will be returned if `\"Filename\"` does not actually exist. (Same\n  correction in `filelib:wildcard/2`.) (This change is a slight\n  incompatibility.)\n\n  `filelib:wildcard/1,2` will generate a different exception when given bad\n  patterns such as `\"{a,\"`. The exception used to be caused by\n  '[`exit(missing_delimiter)`](`exit/1`)' but is now\n  '`erlang:error({badpattern,missing_delimiter})`'.\n\n  Own Id: OTP-5523 Aux Id: seq9824","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- Further improvements of encrypted debug info: New option `encrypt_debug_info`\n  for compiler.\n\n  Own Id: OTP-5541 Aux Id: seq9837","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.6 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-6"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- When opening a Dets table read only an attempt was sometimes made to re-hash\n  the table resulting in an error message. This problem has been fixed.\n\n  Own Id: OTP-5487 Aux Id: OTP-4989","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- It is now possible to encrypt the debug information in Beam files, to help\n  keep the source code secret. See the documentation for `compile` on how to\n  provide the key for encrypting, and the documentation for `beam_lib` on how to\n  provide the key for decryption so that tools such as the Debugger, Xref, or\n  Cover can be used.\n\n  The `beam_lib:chunks/2` functions now accepts an additional chunk type\n  `compile_info` to retrieve the compilation information directly as a term.\n  (Thanks to Tobias Lindahl.)\n\n  Own Id: OTP-5460 Aux Id: seq9787","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.5 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-5"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Closing a Dets table kept in RAM would cause a crash if the file could not be\n  written. This problem has been fixed by returning an error tuple.\n\n  Own Id: OTP-5402\n\n- `erl_pp` now correctly pretty-prints `fun F/A`.\n\n  Own Id: OTP-5412\n\n- The Erlang shell failed if the compiler was not in the code path. This problem\n  has been fixed, but in order to evaluate records the compiler is still needed.\n\n  Own Id: OTP-5435\n\n- Corrected the example in the documentation for `ets:match/2`. Also clarified\n  that `ets:update_counter/3` updates the counter atomically. (Thanks to Anders\n  Svensson.)\n\n  Own Id: OTP-5452 Aux Id: seq9770, seq9789","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The possibility to start the Erlang shell in parallel with the rest of the\n  system was reintroduced for backwards compatibility in STDLIB 1.13.1. The flag\n  to be used for this is now called `async_shell_start` and has been documented.\n  New shells started from the JCL menu are not synchronized with `init` anymore.\n  This makes it possible to start a new shell (e.g. for debugging purposes) even\n  if the initial shell has not come up.\n\n  Own Id: OTP-5406 Aux Id: OTP-5218\n\n- The compiler will now produce warnings when using the deprecated functions in\n  the `snmp` module.\n\n  Own Id: OTP-5425\n\n- The function `c:zi/0` has been removed. Use `c:i/0` instead.\n\n  Own Id: OTP-5432\n\n- Corrected two minor bugs found by the Dialyzer: Calling a parameterized module\n  from a restricted shell (i.e. if `shell:start_restricted/1` has been used)\n  would crash the shell evaluator. A debug printout in `gen_fsm` had a clause\n  that would never match; causing less information to be printed.\n\n  And a somewhat more serious one also found by Dialyzer: `rpc:yield/1` would\n  crash unless the call started by `rpc:async_call/4` had already finished;\n  `rpc:nb_yield(Key,infinity)` would also crash.\n\n  Cleaned up and removed redundant code found by Dialyzer in\n  `erlang:dmonitor_p/2`.\n\n  Own Id: OTP-5462","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.4 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-4"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Bugs in the Erlang shell have been fixed.\n\n  Own Id: OTP-5327\n\n- Some dead code reported by Dialyzer was eliminated.\n\n  A bug in `dbg` when tracing to wrap trace files has been corrected. It failed\n  to delete any already existing wrap trace files with the same names when\n  starting a new wrap trace.\n\n  Own Id: OTP-5329\n\n- The linter could output invalid warnings about bit patterns in record\n  initializations. This problem has been fixed.\n\n  Own Id: OTP-5338\n\n- `ordsets:is_set(NoList)`, where `NoList` is any term except a list, would\n  crash. For consistency with `sets:is_set/1` and `gb_sets:is_set/1`, it now\n  returns `false`.\n\n  Own Id: OTP-5341\n\n- A BIF `erlang:raise/3` has been added. See the manual for details. It is\n  intended for internal system programming only, advanced error handling.\n\n  Own Id: OTP-5376 Aux Id: OTP-5257","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The `deprecated` attribute is now checked by the linter. See `m:xref` for a\n  description of the `deprecated` attribute.\n\n  Own Id: OTP-5276\n\n- The restricted shell will now indicate if the return value from a user\n  predicate is on an incorrect form.\n\n  Own Id: OTP-5335","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.3 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-3"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- Bugs concerning unused and shadowed variables have been fixed in the linter.\n\n  Own Id: OTP-5091\n\n- A bug in the evaluator that caused the shell to choke on bit syntax\n  expressions has been fixed.\n\n  Own Id: OTP-5237\n\n- `io:format/2` et.al no longer crashes for some combinations of precision and\n  value for format character \"g\". Previously it crashed if the precision P was 4\n  or lower and the absolute value of the float to print was lower than 10^4 but\n  10^(P-1) or higher. Now it will not crash depending on the value of the float.\n\n  Own Id: OTP-5263\n\n- Bugs in the handling of the bit syntax have been fixed in the Erlang shell.\n\n  Own Id: OTP-5269\n\n- `gb_sets:del_element/2` was changed to do the same as `gb_sets:delete_any/2`\n  which was the original intention, not as `gb_sets:delete/2`. Code that relies\n  on `gb_sets:del_element/2` causing an error if the element does not exist must\n  be changed to call `gb_sets:delete/2` instead.\n\n  The documentation was also updated to explicitly document functions that were\n  only referred to as 'aliases' of a documented function. Also, a list of all\n  functions common to the `gb_sets`, `sets`, and `ordsets` was added.\n\n  \\*** POTENTIAL INCOMPATIBILITY \\***\n\n  Own Id: OTP-5277\n\n- Debug messages have been removed from the QLC module.\n\n  Own Id: OTP-5283","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The size of continuations returned from `dets:match/1,3`,\n  `dets:match_object/1,3`, and `dets:select/1,3` has been reduced. This affects\n  the amount of data Mnesia sends between nodes while evaluating QLC queries.\n\n  Own Id: OTP-5232","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.2 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-2"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- The `-rsh` switch for starting a remote shell (introduced with OTP-5210)\n  clashed with an already existing switch used by `slave`. Therefore the switch\n  for the remote shell is now instead named `-remsh`.\n\n  Own Id: OTP-5248 Aux Id: OTP-5210","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"STDLIB 1.13.1 - STDLIB Release Notes","doc":"","ref":"notes.html#stdlib-1-13-1"},{"type":"extras","title":"Fixed Bugs and Malfunctions - STDLIB Release Notes","doc":"- The Pman 'trace shell' functionality was broken as has now been fixed.\n  Furthermore, Pman could not correctly find the pid of the active shell if more\n  than one shell process was running on the node. This has also been corrected.\n\n  Own Id: OTP-5191\n\n- When the undocumented feature \"parameterized modules\" was used, the ?MODULE\n  macro did not work correctly.\n\n  Own Id: OTP-5224","ref":"notes.html#fixed-bugs-and-malfunctions"},{"type":"extras","title":"Improvements and New Features - STDLIB Release Notes","doc":"- You can now start Erlang with the `-rsh` flag which gives you a remote initial\n  shell instead of a local one. Example:\n\n  ```text\n              erl -sname this_node -rsh other_node@other_host\n  ```\n\n  Own Id: OTP-5210\n\n- The man page for the `lists` module has been updated with description of the\n  new `zip`, `unzip`, and `partition/2` functions.\n\n  Own Id: OTP-5213\n\n- The top level group leader used to be listed as job #1 in the job list in JCL\n  mode. Since there is no shell associated with this process that can be\n  connected to, it will no longer be listed.\n\n  Own Id: OTP-5214\n\n- The possibility to start the Erlang shell in parallel with the rest of the\n  system has been reintroduced for backwards compatibility. Note that this old\n  behaviour is error prone and should not be used unless for some reason\n  necessary.\n\n  Own Id: OTP-5218 Aux Id: seq9534\n\n- The `shell` commands `rr/1,2,3` now accepts wildcards when reading record\n  definitions from BEAM files.\n\n  Own Id: OTP-5226","ref":"notes.html#improvements-and-new-features"},{"type":"extras","title":"Introduction","doc":"<!--\n%CopyrightBegin%\n\nCopyright Ericsson AB 2023-2024. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Introduction","ref":"introduction.html"},{"type":"extras","title":"Scope - Introduction","doc":"The Standard Erlang Libraries application, _STDLIB_, is mandatory in the sense\nthat the minimal system based on Erlang/OTP consists of _STDLIB_ and _Kernel_.\n\n_STDLIB_ contains the following functional areas:\n\n- Erlang shell\n- Command interface\n- Query interface\n- Interface to standard Erlang I/O servers\n- Interface to the Erlang built-in term storage BIFs\n- Regular expression matching functions for strings and binaries\n- Finite state machine\n- Event handling\n- Functions for the server of a client-server relation\n- Function to control applications in a distributed manner\n- Start and control of slave nodes\n- Operations on finite sets and relations represented as sets\n- Library for handling binary data\n- Disk-based term storage\n- List processing\n- Maps processing","ref":"introduction.html#scope"},{"type":"extras","title":"Prerequisites - Introduction","doc":"It is assumed that the reader is familiar with the Erlang programming language.","ref":"introduction.html#prerequisites"},{"type":"extras","title":"The Erlang I/O Protocol","doc":"<!--\n%CopyrightBegin%\n\nCopyright Ericsson AB 2023-2024. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# The Erlang I/O Protocol\n\nThe I/O protocol in Erlang enables bi-directional communication between clients\nand servers.\n\n- The I/O server is a process that handles the requests and performs the\n  requested task on, for example, an I/O device.\n- The client is any Erlang process wishing to read or write data from/to the I/O\n  device.\n\nThe common I/O protocol has been present in OTP since the beginning, but has\nbeen undocumented and has also evolved over the years. In an addendum to Robert\nVirding's rationale, the original I/O protocol is described. This section\ndescribes the current I/O protocol.\n\nThe original I/O protocol was simple and flexible. Demands for memory efficiency\nand execution time efficiency have triggered extensions to the protocol over the\nyears, making the protocol larger and somewhat less easy to implement than the\noriginal. It can certainly be argued that the current protocol is too complex,\nbut this section describes how it looks today, not how it should have looked.\n\nThe basic ideas from the original protocol still hold. The I/O server and client\ncommunicate with one single, rather simplistic protocol and no server state is\never present in the client. Any I/O server can be used together with any client\ncode, and the client code does not need to be aware of the I/O device that the\nI/O server communicates with.","ref":"io_protocol.html"},{"type":"extras","title":"Protocol Basics - The Erlang I/O Protocol","doc":"As described in Robert's paper, I/O servers and clients communicate using\n`io_request`/`io_reply` tuples as follows:\n\n```erlang\n{io_request, From, ReplyAs, Request}\n{io_reply, ReplyAs, Reply}\n```\n\nThe client sends an `io_request` tuple to the I/O server and the server\neventually sends a corresponding `io_reply` tuple.\n\n- `From` is the `t:pid/0` of the client, the process which the I/O server sends\n  the I/O reply to.\n- `ReplyAs` can be any datum and is returned in the corresponding `io_reply`.\n  The `m:io` module monitors the I/O server and uses the monitor reference as\n  the `ReplyAs` datum. A more complicated client can have many outstanding I/O\n  requests to the same I/O server and can use different references (or something\n  else) to differentiate among the incoming I/O replies. Element `ReplyAs` is to\n  be considered opaque by the I/O server.\n\n  Notice that the `t:pid/0` of the I/O server is not explicitly present in tuple\n  `io_reply`. The reply can be sent from any process, not necessarily the actual\n  I/O server.\n\n- `Request` and `Reply` are described below.\n\nWhen an I/O server receives an `io_request` tuple, it acts upon the `Request`\npart and eventually sends an `io_reply` tuple with the corresponding `Reply`\npart.","ref":"io_protocol.html#protocol-basics"},{"type":"extras","title":"Output Requests - The Erlang I/O Protocol","doc":"To output characters on an I/O device, the following `Request`s exist:\n\n```erlang\n{put_chars, Encoding, Characters}\n{put_chars, Encoding, Module, Function, Args}\n```\n\n- `Encoding` is `unicode` or `latin1`, meaning that the characters are (in case\n  of binaries) encoded as UTF-8 or ISO Latin-1 (pure bytes). A well-behaved I/O\n  server is also to return an error indication if list elements contain\n  integers > 255 when `Encoding` is set to `latin1`.\n\n  Notice that this does not in any way tell how characters are to be put on the\n  I/O device or handled by the I/O server. Different I/O servers can handle the\n  characters however they want, this only tells the I/O server which format the\n  data is expected to have. In the `Module`/`Function`/`Args` case, `Encoding`\n  tells which format the designated function produces.\n\n  Notice also that byte-oriented data is simplest sent using the ISO Latin-1\n  encoding.\n\n- `Characters` are the data to be put on the I/O device. If `Encoding` is\n  `latin1`, this is an `t:iolist/0`. If `Encoding` is `unicode`, this is an\n  Erlang standard mixed Unicode list (one integer in a list per character,\n  characters in binaries represented as UTF-8).\n- `Module`, `Function`, and `Args` denote a function that is called to produce\n  the data (like `io_lib:format/2`).\n\n  `Args` is a list of arguments to the function. The function is to produce data\n  in the specified `Encoding`. The I/O server is to call the function as\n  [`apply(Mod, Func, Args)`](`apply/3`) and put the returned data on the I/O\n  device as if it was sent in a `{put_chars, Encoding, Characters}` request. If\n  the function returns anything else than a binary or list, or throws an\n  exception, an error is to be sent back to the client.\n\nThe I/O server replies to the client with an `io_reply` tuple, where element\n`Reply` is one of:\n\n```text\nok\n{error, Error}\n```\n\n- `Error` describes the error to the client, which can do whatever it wants with\n  it. The `m:io` module typically returns it \"as is\".","ref":"io_protocol.html#output-requests"},{"type":"extras","title":"Input Requests - The Erlang I/O Protocol","doc":"To read characters from an I/O device, the following `Request`s exist:\n\n```erlang\n{get_until, Encoding, Prompt, Module, Function, ExtraArgs}\n```\n\n- `Encoding` denotes how data is to be sent back to the client and what data is\n  sent to the function denoted by `Module`/`Function`/`ExtraArgs`. If the\n  function supplied returns data as a list, the data is converted to this\n  encoding. If the function supplied returns data in some other format, no\n  conversion can be done, and it is up to the client-supplied function to return\n  data in a proper way.\n\n  If `Encoding` is `latin1`, lists of integers `0..255` or binaries containing\n  plain bytes are sent back to the client when possible. If `Encoding` is\n  `unicode`, lists with integers in the whole Unicode range or binaries encoded\n  in UTF-8 are sent to the client. The user-supplied function always sees lists\n  of integers, never binaries, but the list can contain numbers > 255 if\n  `Encoding` is `unicode`.\n\n- `Prompt` is a list of characters (not mixed, no binaries) or an atom to be\n  output as a prompt for input on the I/O device. `Prompt` is often ignored by\n  the I/O server; if set to `''`, it is always to be ignored (and results in\n  nothing being written to the I/O device).\n- `Module`, `Function`, and `ExtraArgs` denote a function and arguments to\n  determine when enough data is written. The function is to take two more\n  arguments, the last state, and a list of characters. The function is to return\n  one of:\n\n  ```erlang\n  {done, Result, RestChars}\n  {more, Continuation}\n  ```\n\n  `Result` can be any Erlang term, but if it is a `t:list/0`, the I/O server can\n  convert it to a `t:binary/0` of appropriate format before returning it to the\n  client, if the I/O server is set in binary mode (see below).\n\n  The function is called with the data the I/O server finds on its I/O device,\n  returning one of:\n\n  - `{done, Result, RestChars}` when enough data is read. In this case `Result`\n    is sent to the client and `RestChars` is kept in the I/O server as a buffer\n    for later input.\n  - `{more, Continuation}`, which indicates that more characters are needed to\n    complete the request.\n\n  `Continuation` is sent as the state in later calls to the function when more\n  characters are available. When no more characters are available, the function\n  must return `{done, eof, Rest}`. The initial state is the empty list. The data\n  when an end of file is reached on the IO device is the atom `eof`.\n\n  An emulation of the `get_line` request can be (inefficiently) implemented\n  using the following functions:\n\n  ```erlang\n  -module(demo).\n  -export([until_newline/3, get_line/1]).\n\n  until_newline(_ThisFar,eof,_MyStopCharacter) ->\n      {done,eof,[]};\n  until_newline(ThisFar,CharList,MyStopCharacter) ->\n      case\n          lists:splitwith(fun(X) -> X =/= MyStopCharacter end,  CharList)\n      of\n  \t{L,[]} ->\n              {more,ThisFar++L};\n  \t{L2,[MyStopCharacter|Rest]} ->\n  \t    {done,ThisFar++L2++[MyStopCharacter],Rest}\n      end.\n\n  get_line(IoServer) ->\n      IoServer ! {io_request,\n                  self(),\n                  IoServer,\n                  {get_until, unicode, '', ?MODULE, until_newline, [$\\n]}},\n      receive\n          {io_reply, IoServer, Data} ->\n  \t    Data\n      end.\n  ```\n\n  Notice that the last element in the `Request` tuple (`[$\\n]`) is appended to\n  the argument list when the function is called. The function is to be called\n  like [`apply(Module, Function, [ State, Data | ExtraArgs ])`](`apply/3`) by\n  the I/O server.\n\nA fixed number of characters is requested using the following `Request`:\n\n```text\n{get_chars, Encoding, Prompt, N}\n```\n\n- `Encoding` and `Prompt` as for `get_until`.\n- `N` is the number of characters to be read from the I/O device.\n\nA single line (as in former example) is requested with the following `Request`:\n\n```text\n{get_line, Encoding, Prompt}\n```\n\n- `Encoding` and `Prompt` as for `get_until`.\n\nClearly, `get_chars` and `get_line` could be implemented with the `get_until`\nrequest (and indeed they were originally), but demands for efficiency have made\nthese additions necessary.\n\nThe I/O server replies to the client with an `io_reply` tuple, where element\n`Reply` is one of:\n\n```text\nData\neof\n{error, Error}\n```\n\n- `Data` is the characters read, in list or binary form (depending on the I/O\n  server mode, see the next section).\n- `eof` is returned when input end is reached and no more data is available to\n  the client process.\n- `Error` describes the error to the client, which can do whatever it wants with\n  it. The `m:io` module typically returns it as is.","ref":"io_protocol.html#input-requests"},{"type":"extras","title":"I/O Server Modes - The Erlang I/O Protocol","doc":"Demands for efficiency when reading data from an I/O server has not only lead to\nthe addition of the `get_line` and `get_chars` requests, but has also added the\nconcept of I/O server options. No options are mandatory to implement, but all\nI/O servers in the Erlang standard libraries honor the `binary` option, which\nallows element `Data` of the `io_reply` tuple to be a binary instead of a list\n_when possible_. If the data is sent as a binary, Unicode data is sent in the\nstandard Erlang Unicode format, that is, UTF-8 (notice that the function of the\n`get_until` request still gets list data regardless of the I/O server mode).\n\nNotice that the `get_until` request allows for a function with the data\nspecified as always being a list. Also, the return value data from such a\nfunction can be of any type (as is indeed the case when an\n[`io:fread/2,3`](`io:fread/2`) request is sent to an I/O server). The client\nmust be prepared for data received as answers to those requests to be in various\nforms. However, the I/O server is to convert the results to binaries whenever\npossible (that is, when the function supplied to `get_until` returns a list).\nThis is done in the example in section\n[An Annotated and Working Example I/O Server](io_protocol.md#example_io_server).\n\nAn I/O server in binary mode affects the data sent to the client, so that it\nmust be able to handle binary data. For convenience, the modes of an I/O server\ncan be set and retrieved using the following I/O requests:\n\n```text\n{setopts, Opts}\n```\n\n- `Opts` is a list of options in the format recognized by the `m:proplists`\n  module (and by the I/O server).\n\nAs an example, the I/O server for the interactive shell (in `group.erl`)\nunderstands the following options:\n\n```erlang\n{binary, boolean()} (or binary/list)\n{echo, boolean()}\n{expand_fun, fun()}\n{encoding, unicode/latin1} (or unicode/latin1)\n```\n\nOptions `binary` and `encoding` are common for all I/O servers in OTP, while\n`echo` and `expand` are valid only for this I/O server. Option `unicode`\nnotifies how characters are put on the physical I/O device, that is, if the\nterminal itself is Unicode-aware. It does not affect how characters are sent in\nthe I/O protocol, where each request contains encoding information for the\nprovided or returned data.\n\nThe I/O server is to send one of the following as `Reply`:\n\n```text\nok\n{error, Error}\n```\n\nAn error (preferably `enotsup`) is to be expected if the option is not supported\nby the I/O server (like if an `echo` option is sent in a `setopts` request to a\nplain file).\n\nTo retrieve options, the following request is used:\n\n```text\ngetopts\n```\n\nThis request asks for a complete list of all options supported by the I/O server\nas well as their current values.\n\nThe I/O server replies:\n\n```text\nOptList\n{error, Error}\n```\n\n- `OptList` is a list of tuples `{Option, Value}`, where `Option` always is an\n  atom.","ref":"io_protocol.html#i-o-server-modes"},{"type":"extras","title":"Multiple I/O Requests - The Erlang I/O Protocol","doc":"The `Request` element can in itself contain many `Request`s by using the\nfollowing format:\n\n```text\n{requests, Requests}\n```\n\n- `Requests` is a list of valid `io_request` tuples for the protocol. They must\n  be executed in the order that they appear in the list. The execution is to\n  continue until one of the requests results in an error or the list is\n  consumed. The result of the last request is sent back to the client.\n\nThe I/O server can, for a list of requests, send any of the following valid\nresults in the reply, depending on the requests in the list:\n\n```erlang\nok\n{ok, Data}\n{ok, Options}\n{error, Error}\n```","ref":"io_protocol.html#multiple-i-o-requests"},{"type":"extras","title":"Optional I/O Request - The Erlang I/O Protocol","doc":"The following I/O request is optional to implement and a client is to be\nprepared for an error return:\n\n```text\n{get_geometry, Geometry}\n```\n\n- `Geometry` is the atom `rows` or the atom `columns`.\n\nThe I/O server is to send one of the following as `Reply`:\n\n```text\nN\n{error, Error}\n```\n\n- `N` is the number of character rows or columns that the I/O device has, if\n  applicable to the I/O device handled by the I/O server, otherwise\n  `{error, enotsup}` is a good answer.","ref":"io_protocol.html#optional-i-o-request"},{"type":"extras","title":"Unimplemented Request Types - The Erlang I/O Protocol","doc":"If an I/O server encounters a request that it does not recognize (that is, the\n`io_request` tuple has the expected format, but the `Request` is unknown), the\nI/O server is to send a valid reply with the error tuple:\n\n```text\n{error, request}\n```\n\nThis makes it possible to extend the protocol with optional requests and for the\nclients to be somewhat backward compatible.","ref":"io_protocol.html#unimplemented-request-types"},{"type":"extras","title":"An Annotated and Working Example I/O Server - The Erlang I/O Protocol","doc":"[](){: #example_io_server }\n\nAn I/O server is any process capable of handling the I/O protocol. There is no\ngeneric I/O server behavior, but could well be. The framework is simple, a\nprocess handling incoming requests, usually both I/O-requests and other I/O\ndevice-specific requests (positioning, closing, and so on).\n\nThe example I/O server stores characters in an ETS table, making up a fairly\ncrude RAM file.\n\nThe module begins with the usual directives, a function to start the I/O server\nand a main loop handling the requests:\n\n```erlang\n-module(ets_io_server).\n\n-export([start_link/0, init/0, loop/1, until_newline/3, until_enough/3]).\n\n-define(CHARS_PER_REC, 10).\n\n-record(state, {\n\t  table,\n\t  position, % absolute\n\t  mode % binary | list\n\t }).\n\nstart_link() ->\n    spawn_link(?MODULE,init,[]).\n\ninit() ->\n    Table = ets:new(noname,[ordered_set]),\n    ?MODULE:loop(#state{table = Table, position = 0, mode=list}).\n\nloop(State) ->\n    receive\n\t{io_request, From, ReplyAs, Request} ->\n\t    case request(Request,State) of\n\t\t{Tag, Reply, NewState} when Tag =:= ok; Tag =:= error ->\n\t\t    reply(From, ReplyAs, Reply),\n\t\t    ?MODULE:loop(NewState);\n\t\t{stop, Reply, _NewState} ->\n\t\t    reply(From, ReplyAs, Reply),\n\t\t    exit(Reply)\n\t    end;\n\t%% Private message\n\t{From, rewind} ->\n\t    From ! {self(), ok},\n\t    ?MODULE:loop(State#state{position = 0});\n\t_Unknown ->\n\t    ?MODULE:loop(State)\n    end.\n```\n\nThe main loop receives messages from the client (which can use the the `m:io`\nmodule to send requests). For each request, the function `request/2` is called\nand a reply is eventually sent using function `reply/3`.\n\nThe \"private\" message `{From, rewind}` results in the current position in the\npseudo-file to be reset to `0` (the beginning of the \"file\"). This is a typical\nexample of I/O device-specific messages not being part of the I/O protocol. It\nis usually a bad idea to embed such private messages in `io_request` tuples, as\nthat can confuse the reader.\n\nFirst, we examine the reply function:\n\n```erlang\nreply(From, ReplyAs, Reply) ->\n    From ! {io_reply, ReplyAs, Reply}.\n```\n\nIt sends the `io_reply` tuple back to the client, providing element `ReplyAs`\nreceived in the request along with the result of the request, as described\nearlier.\n\nWe need to handle some requests. First the requests for writing characters:\n\n```erlang\nrequest({put_chars, Encoding, Chars}, State) ->\n    put_chars(unicode:characters_to_list(Chars,Encoding),State);\nrequest({put_chars, Encoding, Module, Function, Args}, State) ->\n    try\n\trequest({put_chars, Encoding, apply(Module, Function, Args)}, State)\n    catch\n\t_:_ ->\n\t    {error, {error,Function}, State}\n    end;\n```\n\nThe `Encoding` says how the characters in the request are represented. We want\nto store the characters as lists in the ETS table, so we convert them to lists\nusing function `unicode:characters_to_list/2`. The conversion function\nconveniently accepts the encoding types `unicode` and `latin1`, so we can use\n`Encoding` directly.\n\nWhen `Module`, `Function`, and `Arguments` are provided, we apply it and do the\nsame with the result as if the data was provided directly.\n\nWe handle the requests for retrieving data:\n\n```erlang\nrequest({get_until, Encoding, _Prompt, M, F, As}, State) ->\n    get_until(Encoding, M, F, As, State);\nrequest({get_chars, Encoding, _Prompt, N}, State) ->\n    %% To simplify the code, get_chars is implemented using get_until\n    get_until(Encoding, ?MODULE, until_enough, [N], State);\nrequest({get_line, Encoding, _Prompt}, State) ->\n    %% To simplify the code, get_line is implemented using get_until\n    get_until(Encoding, ?MODULE, until_newline, [$\\n], State);\n```\n\nHere we have cheated a little by more or less only implementing `get_until` and\nusing internal helpers to implement `get_chars` and `get_line`. In production\ncode, this can be inefficient, but that depends on the frequency of the\ndifferent requests. Before we start implementing functions `put_chars/2` and\n`get_until/5`, we examine the few remaining requests:\n\n```erlang\nrequest({get_geometry,_}, State) ->\n    {error, {error,enotsup}, State};\nrequest({setopts, Opts}, State) ->\n    setopts(Opts, State);\nrequest(getopts, State) ->\n    getopts(State);\nrequest({requests, Reqs}, State) ->\n     multi_request(Reqs, {ok, ok, State});\n```\n\nRequest `get_geometry` has no meaning for this I/O server, so the reply is\n`{error, enotsup}`. The only option we handle is `binary`/`list`, which is done\nin separate functions.\n\nThe multi-request tag (`requests`) is handled in a separate loop function\napplying the requests in the list one after another, returning the last result.\n\n`{error, request}` must be returned if the request is not recognized:\n\n```erlang\nrequest(_Other, State) ->\n    {error, {error, request}, State}.\n```\n\nNext we handle the different requests, first the fairly generic multi-request\ntype:\n\n```erlang\nmulti_request([R|Rs], {ok, _Res, State}) ->\n    multi_request(Rs, request(R, State));\nmulti_request([_|_], Error) ->\n    Error;\nmulti_request([], Result) ->\n    Result.\n```\n\nWe loop through the requests one at the time, stopping when we either encounter\nan error or the list is exhausted. The last return value is sent back to the\nclient (it is first returned to the main loop and then sent back by function\n`io_reply`).\n\nRequests `getopts` and `setopts` are also simple to handle. We only change or\nread the state record:\n\n```erlang\nsetopts(Opts0,State) ->\n    Opts = proplists:unfold(\n\t     proplists:substitute_negations(\n\t       [{list,binary}],\n\t       Opts0)),\n    case check_valid_opts(Opts) of\n\ttrue ->\n\t        case proplists:get_value(binary, Opts) of\n\t\t    true ->\n\t\t\t{ok,ok,State#state{mode=binary}};\n\t\t    false ->\n\t\t\t{ok,ok,State#state{mode=binary}};\n\t\t    _ ->\n\t\t\t{ok,ok,State}\n\t\tend;\n\tfalse ->\n\t    {error,{error,enotsup},State}\n    end.\ncheck_valid_opts([]) ->\n    true;\ncheck_valid_opts([{binary,Bool}|T]) when is_boolean(Bool) ->\n    check_valid_opts(T);\ncheck_valid_opts(_) ->\n    false.\n\ngetopts(#state{mode=M} = S) ->\n    {ok,[{binary, case M of\n\t\t      binary ->\n\t\t\t  true;\n\t\t      _ ->\n\t\t\t  false\n\t\t  end}],S}.\n```\n\nAs a convention, all I/O servers handle both `{setopts, [binary]}`,\n`{setopts, [list]}`, and `{setopts,[{binary, boolean()}]}`, hence the trick with\n`proplists:substitute_negations/2` and `proplists:unfold/1`. If invalid options\nare sent to us, we send `{error, enotsup}` back to the client.\n\nRequest `getopts` is to return a list of `{Option, Value}` tuples. This has the\ntwofold function of providing both the current values and the available options\nof this I/O server. We have only one option, and hence return that.\n\nSo far this I/O server is fairly generic (except for request `rewind` handled in\nthe main loop and the creation of an ETS table). Most I/O servers contain code\nsimilar to this one.\n\nTo make the example runnable, we start implementing the reading and writing of\nthe data to/from the ETS table. First function `put_chars/3`:\n\n```erlang\nput_chars(Chars, #state{table = T, position = P} = State) ->\n    R = P div ?CHARS_PER_REC,\n    C = P rem ?CHARS_PER_REC,\n    [ apply_update(T,U) || U <- split_data(Chars, R, C) ],\n    {ok, ok, State#state{position = (P + length(Chars))}}.\n```\n\nWe already have the data as (Unicode) lists and therefore only split the list in\nruns of a predefined size and put each run in the table at the current position\n(and forward). Functions `split_data/3` and `apply_update/2` are implemented\nbelow.\n\nNow we want to read data from the table. Function `get_until/5` reads data and\napplies the function until it says that it is done. The result is sent back to\nthe client:\n\n```erlang\nget_until(Encoding, Mod, Func, As,\n\t  #state{position = P, mode = M, table = T} = State) ->\n    case get_loop(Mod,Func,As,T,P,[]) of\n\t{done,Data,_,NewP} when is_binary(Data); is_list(Data) ->\n\t    if\n\t\tM =:= binary ->\n\t\t    {ok,\n\t\t     unicode:characters_to_binary(Data, unicode, Encoding),\n\t\t     State#state{position = NewP}};\n\t\ttrue ->\n\t\t    case check(Encoding,\n\t\t               unicode:characters_to_list(Data, unicode))\n                    of\n\t\t\t{error, _} = E ->\n\t\t\t    {error, E, State};\n\t\t\tList ->\n\t\t\t    {ok, List,\n\t\t\t     State#state{position = NewP}}\n\t\t    end\n\t    end;\n\t{done,Data,_,NewP} ->\n\t    {ok, Data, State#state{position = NewP}};\n\tError ->\n\t    {error, Error, State}\n    end.\n\nget_loop(M,F,A,T,P,C) ->\n    {NewP,L} = get(P,T),\n    case catch apply(M,F,[C,L|A]) of\n\t{done, List, Rest} ->\n\t    {done, List, [], NewP - length(Rest)};\n\t{more, NewC} ->\n\t    get_loop(M,F,A,T,NewP,NewC);\n\t_ ->\n\t    {error,F}\n    end.\n```\n\nHere we also handle the mode (`binary` or `list`) that can be set by request\n`setopts`. By default, all OTP I/O servers send data back to the client as\nlists, but switching mode to `binary` can increase efficiency if the I/O server\nhandles it in an appropriate way. The implementation of `get_until` is difficult\nto get efficient, as the supplied function is defined to take lists as\narguments, but `get_chars` and `get_line` can be optimized for binary mode.\nHowever, this example does not optimize anything.\n\nIt is important though that the returned data is of the correct type depending\non the options set. We therefore convert the lists to binaries in the correct\nencoding _if possible_ before returning. The function supplied in the\n`get_until` request tuple can, as its final result return anything, so only\nfunctions returning lists can get them converted to binaries. If the request\ncontains encoding tag `unicode`, the lists can contain all Unicode code points\nand the binaries are to be in UTF-8. If the encoding tag is `latin1`, the client\nis only to get characters in the range `0..255`. Function `check/2` takes care\nof not returning arbitrary Unicode code points in lists if the encoding was\nspecified as `latin1`. If the function does not return a list, the check cannot\nbe performed and the result is that of the supplied function untouched.\n\nTo manipulate the table we implement the following utility functions:\n\n```erlang\ncheck(unicode, List) ->\n    List;\ncheck(latin1, List) ->\n    try\n\t[ throw(not_unicode) || X <- List,\n\t\t\t\tX > 255 ],\n\tList\n    catch\n\tthrow:_ ->\n\t    {error,{cannot_convert, unicode, latin1}}\n    end.\n```\n\nThe function check provides an error tuple if Unicode code points > 255 are to\nbe returned if the client requested `latin1`.\n\nThe two functions `until_newline/3` and `until_enough/3` are helpers used\ntogether with function `get_until/5` to implement `get_chars` and `get_line`\n(inefficiently):\n\n```erlang\nuntil_newline([],eof,_MyStopCharacter) ->\n    {done,eof,[]};\nuntil_newline(ThisFar,eof,_MyStopCharacter) ->\n    {done,ThisFar,[]};\nuntil_newline(ThisFar,CharList,MyStopCharacter) ->\n    case\n        lists:splitwith(fun(X) -> X =/= MyStopCharacter end,  CharList)\n    of\n\t{L,[]} ->\n            {more,ThisFar++L};\n\t{L2,[MyStopCharacter|Rest]} ->\n\t    {done,ThisFar++L2++[MyStopCharacter],Rest}\n    end.\n\nuntil_enough([],eof,_N) ->\n    {done,eof,[]};\nuntil_enough(ThisFar,eof,_N) ->\n    {done,ThisFar,[]};\nuntil_enough(ThisFar,CharList,N)\n  when length(ThisFar) + length(CharList) >= N ->\n    {Res,Rest} = my_split(N,ThisFar ++ CharList, []),\n    {done,Res,Rest};\nuntil_enough(ThisFar,CharList,_N) ->\n    {more,ThisFar++CharList}.\n```\n\nAs can be seen, the functions above are just the type of functions that are to\nbe provided in `get_until` requests.\n\nTo complete the I/O server, we only need to read and write the table in an\nappropriate way:\n\n```erlang\nget(P,Tab) ->\n    R = P div ?CHARS_PER_REC,\n    C = P rem ?CHARS_PER_REC,\n    case ets:lookup(Tab,R) of\n\t[] ->\n\t    {P,eof};\n\t[{R,List}] ->\n\t    case my_split(C,List,[]) of\n\t\t{_,[]} ->\n\t\t    {P+length(List),eof};\n\t\t{_,Data} ->\n\t\t    {P+length(Data),Data}\n\t    end\n    end.\n\nmy_split(0,Left,Acc) ->\n    {lists:reverse(Acc),Left};\nmy_split(_,[],Acc) ->\n    {lists:reverse(Acc),[]};\nmy_split(N,[H|T],Acc) ->\n    my_split(N-1,T,[H|Acc]).\n\nsplit_data([],_,_) ->\n    [];\nsplit_data(Chars, Row, Col) ->\n    {This,Left} = my_split(?CHARS_PER_REC - Col, Chars, []),\n    [ {Row, Col, This} | split_data(Left, Row + 1, 0) ].\n\napply_update(Table, {Row, Col, List}) ->\n    case ets:lookup(Table,Row) of\n\t[] ->\n\t    ets:insert(Table,{Row, lists:duplicate(Col,0) ++ List});\n\t[{Row, OldData}] ->\n\t    {Part1,_} = my_split(Col,OldData,[]),\n\t    {_,Part2} = my_split(Col+length(List),OldData,[]),\n\t    ets:insert(Table,{Row, Part1 ++ List ++ Part2})\n    end.\n```\n\nThe table is read or written in chunks of `?CHARS_PER_REC`, overwriting when\nnecessary. The implementation is clearly not efficient, it is just working.\n\nThis concludes the example. It is fully runnable and you can read or write to\nthe I/O server by using, for example, the `m:io` module or even the `m:file`\nmodule. It is as simple as that to implement a fully fledged I/O server in\nErlang.","ref":"io_protocol.html#an-annotated-and-working-example-i-o-server"},{"type":"extras","title":"Using Unicode in Erlang","doc":"<!--\n%CopyrightBegin%\n\nCopyright Ericsson AB 2023. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Using Unicode in Erlang","ref":"unicode_usage.html"},{"type":"extras","title":"Unicode Implementation - Using Unicode in Erlang","doc":"Implementing support for Unicode character sets is an ongoing process. The\nErlang Enhancement Proposal (EEP) 10 outlined the basics of Unicode support and\nspecified a default encoding in binaries that all Unicode-aware modules are to\nhandle in the future.\n\nHere is an overview what has been done so far:\n\n- The functionality described in EEP10 was implemented in Erlang/OTP R13A.\n- Erlang/OTP R14B01 added support for Unicode filenames, but it was not complete\n  and was by default disabled on platforms where no guarantee was given for the\n  filename encoding.\n- With Erlang/OTP R16A came support for UTF-8 encoded source code, with\n  enhancements to many of the applications to support both Unicode encoded\n  filenames and support for UTF-8 encoded files in many circumstances. Most\n  notable is the support for UTF-8 in files read by `file:consult/1`, release\n  handler support for UTF-8, and more support for Unicode character sets in the\n  I/O system.\n- In Erlang/OTP 17.0, the encoding default for Erlang source files was switched\n  to UTF-8.\n- In Erlang/OTP 20.0, atoms and function can contain Unicode characters. Module\n  names, application names, and node names are still restricted to the ISO\n  Latin-1 range.\n\n  Support was added for normalizations forms in `unicode` and the `string`\n  module now handles utf8-encoded binaries.\n\nThis section outlines the current Unicode support and gives some recipes for\nworking with Unicode data.","ref":"unicode_usage.html#unicode-implementation"},{"type":"extras","title":"Understanding Unicode - Using Unicode in Erlang","doc":"Experience with the Unicode support in Erlang has made it clear that\nunderstanding Unicode characters and encodings is not as easy as one would\nexpect. The complexity of the field and the implications of the standard require\nthorough understanding of concepts rarely before thought of.\n\nAlso, the Erlang implementation requires understanding of concepts that were\nnever an issue for many (Erlang) programmers. To understand and use Unicode\ncharacters requires that you study the subject thoroughly, even if you are an\nexperienced programmer.\n\nAs an example, contemplate the issue of converting between upper and lower case\nletters. Reading the standard makes you realize that there is not a simple one\nto one mapping in all scripts, for example:\n\n- In German, the letter \"ß\" (sharp s) is in lower case, but the uppercase\n  equivalent is \"SS\".\n- In Greek, the letter \"Σ\" has two different lowercase forms, \"ς\" in word-final\n  position and \"σ\" elsewhere.\n- In Turkish, both dotted and dotless \"i\" exist in lower case and upper case\n  forms.\n- Cyrillic \"I\" has usually no lowercase form.\n- Languages with no concept of upper case (or lower case).\n\nSo, a conversion function must know not only one character at a time, but\npossibly the whole sentence, the natural language to translate to, the\ndifferences in input and output string length, and so on. Erlang/OTP has\ncurrently no Unicode `uppercase`/`lowercase` functionality with language\nspecific handling, but publicly available libraries address these issues.\n\nAnother example is the accented characters, where the same glyph has two\ndifferent representations. The Swedish letter \"ö\" is one example. The Unicode\nstandard has a code point for it, but you can also write it as \"o\" followed by\n\"U+0308\" (Combining Diaeresis, with the simplified meaning that the last letter\nis to have \"¨\" above). They have the same glyph, user perceived character. They\nare for most purposes the same, but have different representations. For example,\nMacOS X converts all filenames to use Combining Diaeresis, while most other\nprograms (including Erlang) try to hide that by doing the opposite when, for\nexample, listing directories. However it is done, it is usually important to\nnormalize such characters to avoid confusion.\n\nThe list of examples can be made long. One need a kind of knowledge that was not\nneeded when programs only considered one or two languages. The complexity of\nhuman languages and scripts has certainly made this a challenge when\nconstructing a universal standard. Supporting Unicode properly in your program\nwill require effort.","ref":"unicode_usage.html#understanding-unicode"},{"type":"extras","title":"What Unicode Is - Using Unicode in Erlang","doc":"Unicode is a standard defining code points (numbers) for all known, living or\ndead, scripts. In principle, every symbol used in any language has a Unicode\ncode point. Unicode code points are defined and published by the Unicode\nConsortium, which is a non-profit organization.\n\nSupport for Unicode is increasing throughout the world of computing, as the\nbenefits of one common character set are overwhelming when programs are used in\na global environment. Along with the base of the standard, the code points for\nall the scripts, some _encoding standards_ are available.\n\nIt is vital to understand the difference between encodings and Unicode\ncharacters. Unicode characters are code points according to the Unicode\nstandard, while the encodings are ways to represent such code points. An\nencoding is only a standard for representation. UTF-8 can, for example, be used\nto represent a very limited part of the Unicode character set (for example\nISO-Latin-1) or the full Unicode range. It is only an encoding format.\n\nAs long as all character sets were limited to 256 characters, each character\ncould be stored in one single byte, so there was more or less only one practical\nencoding for the characters. Encoding each character in one byte was so common\nthat the encoding was not even named. With the Unicode system there are much\nmore than 256 characters, so a common way is needed to represent these. The\ncommon ways of representing the code points are the encodings. This means a\nwhole new concept to the programmer, the concept of character representation,\nwhich was a non-issue earlier.\n\nDifferent operating systems and tools support different encodings. For example,\nLinux and MacOS X have chosen the UTF-8 encoding, which is backward compatible\nwith 7-bit ASCII and therefore affects programs written in plain English the\nleast. Windows supports a limited version of UTF-16, namely all the code planes\nwhere the characters can be stored in one single 16-bit entity, which includes\nmost living languages.\n\nThe following are the most widely spread encodings:\n\n- **Bytewise representation** - This is not a proper Unicode representation, but\n  the representation used for characters before the Unicode standard. It can\n  still be used to represent character code points in the Unicode standard with\n  numbers < 256, which exactly corresponds to the ISO Latin-1 character set. In\n  Erlang, this is commonly denoted `latin1` encoding, which is slightly\n  misleading as ISO Latin-1 is a character code range, not an encoding.\n\n- **UTF-8** - Each character is stored in one to four bytes depending on code\n  point. The encoding is backward compatible with bytewise representation of\n  7-bit ASCII, as all 7-bit characters are stored in one single byte in UTF-8.\n  The characters beyond code point 127 are stored in more bytes, letting the\n  most significant bit in the first character indicate a multi-byte character.\n  For details on the encoding, the RFC is publicly available.\n\n  Notice that UTF-8 is _not_ compatible with bytewise representation for code\n  points from 128 through 255, so an ISO Latin-1 bytewise representation is\n  generally incompatible with UTF-8.\n\n- **UTF-16** - This encoding has many similarities to UTF-8, but the basic unit\n  is a 16-bit number. This means that all characters occupy at least two bytes,\n  and some high numbers four bytes. Some programs, libraries, and operating\n  systems claiming to use UTF-16 only allow for characters that can be stored in\n  one 16-bit entity, which is usually sufficient to handle living languages. As\n  the basic unit is more than one byte, byte-order issues occur, which is why\n  UTF-16 exists in both a big-endian and a little-endian variant.\n\n  In Erlang, the full UTF-16 range is supported when applicable, like in the\n  `m:unicode` module and in the bit syntax.\n\n- **UTF-32** - The most straightforward representation. Each character is stored\n  in one single 32-bit number. There is no need for escapes or any variable\n  number of entities for one character. All Unicode code points can be stored in\n  one single 32-bit entity. As with UTF-16, there are byte-order issues. UTF-32\n  can be both big-endian and little-endian.\n\n- **UCS-4** - Basically the same as UTF-32, but without some Unicode semantics,\n  defined by IEEE, and has little use as a separate encoding standard. For all\n  normal (and possibly abnormal) use, UTF-32 and UCS-4 are interchangeable.\n\nCertain number ranges are unused in the Unicode standard and certain ranges are\neven deemed invalid. The most notable invalid range is 16#D800-16#DFFF, as the\nUTF-16 encoding does not allow for encoding of these numbers. This is possibly\nbecause the UTF-16 encoding standard, from the beginning, was expected to be\nable to hold all Unicode characters in one 16-bit entity, but was then extended,\nleaving a hole in the Unicode range to handle backward compatibility.\n\nCode point 16#FEFF is used for Byte Order Marks (BOMs) and use of that character\nis not encouraged in other contexts. It is valid though, as the character\n\"ZWNBS\" (Zero Width Non Breaking Space). BOMs are used to identify encodings and\nbyte order for programs where such parameters are not known in advance. BOMs are\nmore seldom used than expected, but can become more widely spread as they\nprovide the means for programs to make educated guesses about the Unicode format\nof a certain file.","ref":"unicode_usage.html#what-unicode-is"},{"type":"extras","title":"Areas of Unicode Support - Using Unicode in Erlang","doc":"To support Unicode in Erlang, problems in various areas have been addressed.\nThis section describes each area briefly and more thoroughly later in this\nUser's Guide.\n\n- **Representation** - To handle Unicode characters in Erlang, a common\n  representation in both lists and binaries is needed. EEP (10) and the\n  subsequent initial implementation in Erlang/OTP R13A settled a standard\n  representation of Unicode characters in Erlang.\n\n- **Manipulation** - The Unicode characters need to be processed by the Erlang\n  program, which is why library functions must be able to handle them. In some\n  cases functionality has been added to already existing interfaces (as the\n  `m:string` module now can handle strings with any code points). In some cases\n  new functionality or options have been added (as in the `m:io` module, the\n  file handling, the `m:unicode` module, and the bit syntax). Today most modules\n  in Kernel and STDLIB, as well as the VM are Unicode-aware.\n\n- **File I/O** - I/O is by far the most problematic area for Unicode. A file is\n  an entity where bytes are stored, and the lore of programming has been to\n  treat characters and bytes as interchangeable. With Unicode characters, you\n  must decide on an encoding when you want to store the data in a file. In\n  Erlang, you can open a text file with an encoding option, so that you can read\n  characters from it rather than bytes, but you can also open a file for\n  bytewise I/O.\n\n  The Erlang I/O-system has been designed (or at least used) in a way where you\n  expect any I/O server to handle any string data. That is, however, no longer\n  the case when working with Unicode characters. The Erlang programmer must now\n  know the capabilities of the device where the data ends up. Also, ports in\n  Erlang are byte-oriented, so an arbitrary string of (Unicode) characters\n  cannot be sent to a port without first converting it to an encoding of choice.\n\n- **Terminal I/O** - Terminal I/O is slightly easier than file I/O. The output\n  is meant for human reading and is usually Erlang syntax (for example, in the\n  shell). There exists syntactic representation of any Unicode character without\n  displaying the glyph (instead written as `\\x`\\{`HHH`\\}). Unicode data can\n  therefore usually be displayed even if the terminal as such does not support\n  the whole Unicode range.\n\n- **Filenames** - Filenames can be stored as Unicode strings in different ways\n  depending on the underlying operating system and file system. This can be\n  handled fairly easy by a program. The problems arise when the file system is\n  inconsistent in its encodings. For example, Linux allows files to be named\n  with any sequence of bytes, leaving to each program to interpret those bytes.\n  On systems where these \"transparent\" filenames are used, Erlang must be\n  informed about the filename encoding by a startup flag. The default is\n  bytewise interpretation, which is usually wrong, but allows for interpretation\n  of _all_ filenames.\n\n  The concept of \"raw filenames\" can be used to handle wrongly encoded filenames\n  if one enables Unicode filename translation (`+fnu`) on platforms where this\n  is not the default.\n\n- **Source code encoding** - The Erlang source code has support for the UTF-8\n  encoding and bytewise encoding. The default in Erlang/OTP R16B was bytewise\n  (`latin1`) encoding. It was changed to UTF-8 in Erlang/OTP 17.0. You can\n  control the encoding by a comment like the following in the beginning of the\n  file:\n\n  ```erlang\n  %% -*- coding: utf-8 -*-\n  ```\n\n  This of course requires your editor to support UTF-8 as well. The same comment\n  is also interpreted by functions like `file:consult/1`, the release handler,\n  and so on, so that you can have all text files in your source directories in\n  UTF-8 encoding.\n\n- **The language** - Having the source code in UTF-8 also allows you to write\n  string literals, function names, and atoms containing Unicode characters with\n  code points > 255. Module names, application names, and node names are still\n  restricted to the ISO Latin-1 range. Binary literals, where you use type\n  `/utf8`, can also be expressed using Unicode characters > 255. Having module\n  names or application names using characters other than 7-bit ASCII can cause\n  trouble on operating systems with inconsistent file naming schemes, and can\n  hurt portability, so it is not recommended.\n\n  EEP 40 suggests that the language is also to allow for Unicode characters >\n  255 in variable names. Whether to implement that EEP is yet to be decided.","ref":"unicode_usage.html#areas-of-unicode-support"},{"type":"extras","title":"Standard Unicode Representation - Using Unicode in Erlang","doc":"In Erlang, strings are lists of integers. A string was until Erlang/OTP R13\ndefined to be encoded in the ISO Latin-1 (ISO 8859-1) character set, which is,\ncode point by code point, a subrange of the Unicode character set.\n\nThe standard list encoding for strings was therefore easily extended to handle\nthe whole Unicode range. A Unicode string in Erlang is a list containing\nintegers, where each integer is a valid Unicode code point and represents one\ncharacter in the Unicode character set.\n\nErlang strings in ISO Latin-1 are a subset of Unicode strings.\n\nOnly if a string contains code points < 256, can it be directly converted to a\nbinary by using, for example, `erlang:iolist_to_binary/1` or can be sent\ndirectly to a port. If the string contains Unicode characters > 255, an encoding\nmust be decided upon and the string is to be converted to a binary in the\npreferred encoding using\n[`unicode:characters_to_binary/1,2,3`](`unicode:characters_to_binary/1`).\nStrings are not generally lists of bytes, as they were before Erlang/OTP R13,\nthey are lists of characters. Characters are not generally bytes, they are\nUnicode code points.\n\nBinaries are more troublesome. For performance reasons, programs often store\ntextual data in binaries instead of lists, mainly because they are more compact\n(one byte per character instead of two words per character, as is the case with\nlists). Using `erlang:list_to_binary/1`, an ISO Latin-1 Erlang string can be\nconverted into a binary, effectively using bytewise encoding: one byte per\ncharacter. This was convenient for those limited Erlang strings, but cannot be\ndone for arbitrary Unicode lists.\n\nAs the UTF-8 encoding is widely spread and provides some backward compatibility\nin the 7-bit ASCII range, it is selected as the standard encoding for Unicode\ncharacters in binaries for Erlang.\n\nThe standard binary encoding is used whenever a library function in Erlang is to\nhandle Unicode data in binaries, but is of course not enforced when\ncommunicating externally. Functions and bit syntax exist to encode and decode\nboth UTF-8, UTF-16, and UTF-32 in binaries. However, library functions dealing\nwith binaries and Unicode in general only deal with the default encoding.\n\nCharacter data can be combined from many sources, sometimes available in a mix\nof strings and binaries. Erlang has for long had the concept of `iodata` or\n`iolist`s, where binaries and lists can be combined to represent a sequence of\nbytes. In the same way, the Unicode-aware modules often allow for combinations\nof binaries and lists, where the binaries have characters encoded in UTF-8 and\nthe lists contain such binaries or numbers representing Unicode code points:\n\n```erlang\nunicode_binary() = binary() with characters encoded in UTF-8 coding standard\n\nchardata() = charlist() | unicode_binary()\n\ncharlist() = maybe_improper_list(char() | unicode_binary() | charlist(),\n  unicode_binary() | nil())\n```\n\nThe module `m:unicode` even supports similar mixes with binaries containing\nother encodings than UTF-8, but that is a special case to allow for conversions\nto and from external data:\n\n```erlang\nexternal_unicode_binary() = binary() with characters coded in a user-specified\n  Unicode encoding other than UTF-8 (UTF-16 or UTF-32)\n\nexternal_chardata() = external_charlist() | external_unicode_binary()\n\nexternal_charlist() = maybe_improper_list(char() | external_unicode_binary() |\n  external_charlist(), external_unicode_binary() | nil())\n```","ref":"unicode_usage.html#standard-unicode-representation"},{"type":"extras","title":"Basic Language Support - Using Unicode in Erlang","doc":"[](){: #unicode_in_erlang } As from Erlang/OTP R16, Erlang source files can be\nwritten in UTF-8 or bytewise (`latin1`) encoding. For information about how to\nstate the encoding of an Erlang source file, see the [`epp`](`m:epp#encoding`)\nmodule. As from Erlang/OTP R16, strings and comments can be written using\nUnicode. As from Erlang/OTP 20, also atoms and functions can be written using\nUnicode. Modules, applications, and nodes must still be named using characters\nfrom the ISO Latin-1 character set. (These restrictions in the language are\nindependent of the encoding of the source file.)","ref":"unicode_usage.html#basic-language-support"},{"type":"extras","title":"Bit Syntax - Using Unicode in Erlang","doc":"The bit syntax contains types for handling binary data in the three main\nencodings. The types are named `utf8`, `utf16`, and `utf32`. The `utf16` and\n`utf32` types can be in a big-endian or a little-endian variant:\n\n```text\n< > = Bin1,\n< > = Bin2,\nBin3 = <<$H/utf32-little, $e/utf32-little, $l/utf32-little, $l/utf32-little,\n$o/utf32-little>>,\n```\n\nFor convenience, literal strings can be encoded with a Unicode encoding in\nbinaries using the following (or similar) syntax:\n\n```text\nBin4 = <<\"Hello\"/utf16>>,\n```","ref":"unicode_usage.html#bit-syntax"},{"type":"extras","title":"String and Character Literals - Using Unicode in Erlang","doc":"For source code, there is an extension to syntax `\\`OOO (backslash followed by\nthree octal numbers) and `\\x`HH (backslash followed by `x`, followed by two\nhexadecimal characters), namely `\\x{`H ...`}` (backslash followed by `x`,\nfollowed by left curly bracket, any number of hexadecimal digits, and a\nterminating right curly bracket). This allows for entering characters of any\ncode point literally in a string even when the encoding of the source file is\nbytewise (`latin1`).\n\nIn the shell, if using a Unicode input device, or in source code stored in\nUTF-8, `$` can be followed directly by a Unicode character producing an integer.\nIn the following example, the code point of a Cyrillic `с` is output:\n\n```text\n7> $с.\n1089\n```","ref":"unicode_usage.html#string-and-character-literals"},{"type":"extras","title":"Heuristic String Detection - Using Unicode in Erlang","doc":"In certain output functions and in the output of return values in the shell,\nErlang tries to detect string data in lists and binaries heuristically.\nTypically you will see heuristic detection in a situation like this:\n\n```erlang\n1> [97,98,99].\n\"abc\"\n2> <<97,98,99>>.\n<<\"abc\">>\n3> <<195,165,195,164,195,182>>.\n<<\"åäö\"/utf8>>\n```\n\nHere the shell detects lists containing printable characters or binaries\ncontaining printable characters in bytewise or UTF-8 encoding. But what is a\nprintable character? One view is that anything the Unicode standard thinks is\nprintable, is also printable according to the heuristic detection. The result is\nthen that almost any list of integers are deemed a string, and all sorts of\ncharacters are printed, maybe also characters that your terminal lacks in its\nfont set (resulting in some unappreciated generic output). Another way is to\nkeep it backward compatible so that only the ISO Latin-1 character set is used\nto detect a string. A third way is to let the user decide exactly what Unicode\nranges that are to be viewed as characters.\n\nAs from Erlang/OTP R16B you can select the ISO Latin-1 range or the whole\nUnicode range by supplying startup flag `+pc latin1` or `+pc unicode`,\nrespectively. For backward compatibility, `latin1` is default. This only\ncontrols how heuristic string detection is done. More ranges are expected to be\nadded in the future, enabling tailoring of the heuristics to the language and\nregion relevant to the user.\n\nThe following examples show the two startup options:\n\n```erlang\n$ erl +pc latin1\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> [1024].\n[1024]\n2> [1070,1085,1080,1082,1086,1076].\n[1070,1085,1080,1082,1086,1076]\n3> [229,228,246].\n\"åäö\"\n4> <<208,174,208,189,208,184,208,186,208,190,208,180>>.\n<<208,174,208,189,208,184,208,186,208,190,208,180>>\n5> <<229/utf8,228/utf8,246/utf8>>.\n<<\"åäö\"/utf8>>\n```\n\n```erlang\n$ erl +pc unicode\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> [1024].\n\"Ѐ\"\n2> [1070,1085,1080,1082,1086,1076].\n\"Юникод\"\n3> [229,228,246].\n\"åäö\"\n4> <<208,174,208,189,208,184,208,186,208,190,208,180>>.\n<<\"Юникод\"/utf8>>\n5> <<229/utf8,228/utf8,246/utf8>>.\n<<\"åäö\"/utf8>>\n```\n\nIn the examples, you can see that the default Erlang shell interprets only\ncharacters from the ISO Latin1 range as printable and only detects lists or\nbinaries with those \"printable\" characters as containing string data. The valid\nUTF-8 binary containing the Russian word \"Юникод\", is not printed as a string.\nWhen started with all Unicode characters printable (`+pc unicode`), the shell\noutputs anything containing printable Unicode data (in binaries, either UTF-8 or\nbytewise encoded) as string data.\n\nThese heuristics are also used by `io:format/2`, `io_lib:format/2`, and friends\nwhen modifier `t` is used with `~p` or `~P`:\n\n```erlang\n$ erl +pc latin1\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> io:format(\"~tp~n\",[{<<\"åäö\">>, <<\"åäö\"/utf8>>, <<208,174,208,189,208,184,208,186,208,190,208,180>>}]).\n{<<\"åäö\">>,<<\"åäö\"/utf8>>,<<208,174,208,189,208,184,208,186,208,190,208,180>>}\nok\n```\n\n```erlang\n$ erl +pc unicode\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> io:format(\"~tp~n\",[{<<\"åäö\">>, <<\"åäö\"/utf8>>, <<208,174,208,189,208,184,208,186,208,190,208,180>>}]).\n{<<\"åäö\">>,<<\"åäö\"/utf8>>,<<\"Юникод\"/utf8>>}\nok\n```\n\nNotice that this only affects _heuristic_ interpretation of lists and binaries\non output. For example, the `~ts` format sequence always outputs a valid list of\ncharacters, regardless of the `+pc` setting, as the programmer has explicitly\nrequested string output.","ref":"unicode_usage.html#heuristic-string-detection"},{"type":"extras","title":"The Interactive Shell - Using Unicode in Erlang","doc":"The interactive Erlang shell can support Unicode input and output.\n\nOn Windows, proper operation requires that a suitable font is installed and\nselected for the Erlang application to use. If no suitable font is available on\nyour system, try installing the [DejaVu fonts](http://dejavu-fonts.org), which\nare freely available, and then select that font in the Erlang shell application.\n\nOn Unix-like operating systems, the terminal is to be able to handle UTF-8 on\ninput and output (this is done by, for example, modern versions of XTerm, KDE\nKonsole, and the Gnome terminal) and your locale settings must be proper. As an\nexample, a `LANG` environment variable can be set as follows:\n\n```text\n$ echo $LANG\nen_US.UTF-8\n```\n\nMost systems handle variable `LC_CTYPE` before `LANG`, so if that is set, it\nmust be set to `UTF-8`:\n\n```text\n$ echo $LC_CTYPE\nen_US.UTF-8\n```\n\nThe `LANG` or `LC_CTYPE` setting are to be consistent with what the terminal is\ncapable of. There is no portable way for Erlang to ask the terminal about its\nUTF-8 capacity, we have to rely on the language and character type settings.\n\nTo investigate what Erlang thinks about the terminal, the call\n[`io:getopts()`](`io:getopts/1`) can be used when the shell is started:\n\n```erlang\n$ LC_CTYPE=en_US.ISO-8859-1 erl\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> lists:keyfind(encoding, 1, io:getopts()).\n{encoding,latin1}\n2> q().\nok\n$ LC_CTYPE=en_US.UTF-8 erl\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> lists:keyfind(encoding, 1, io:getopts()).\n{encoding,unicode}\n2>\n```\n\nWhen (finally?) everything is in order with the locale settings, fonts. and the\nterminal emulator, you have probably found a way to input characters in the\nscript you desire. For testing, the simplest way is to add some keyboard\nmappings for other languages, usually done with some applet in your desktop\nenvironment.\n\nIn a KDE environment, select _KDE Control Center (Personal Settings)_ >\n_Regional and Accessibility_ > _Keyboard Layout_.\n\nOn Windows XP, select _Control Panel_ > _Regional and Language Options_, select\ntab _Language_, and click button _Details..._ in the square named _Text Services\nand Input Languages_.\n\nYour environment probably provides similar means of changing the keyboard\nlayout. Ensure that you have a way to switch back and forth between keyboards\neasily if you are not used to this. For example, entering commands using a\nCyrillic character set is not easily done in the Erlang shell.\n\nNow you are set up for some Unicode input and output. The simplest thing to do\nis to enter a string in the shell:\n\n```erlang\n$ erl\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> lists:keyfind(encoding, 1, io:getopts()).\n{encoding,unicode}\n2> \"Юникод\".\n\"Юникод\"\n3> io:format(\"~ts~n\", [v(2)]).\nЮникод\nok\n4>\n```\n\nWhile strings can be input as Unicode characters, the language elements are\nstill limited to the ISO Latin-1 character set. Only character constants and\nstrings are allowed to be beyond that range:\n\n```text\n$ erl\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> $ξ.\n958\n2> Юникод.\n* 1: illegal character\n2>\n```","ref":"unicode_usage.html#the-interactive-shell"},{"type":"extras","title":"Escripts and non-interactive I/O - Using Unicode in Erlang","doc":"When Erlang is started without an interactive shell (`-noshell`, `-noinput` or\nas an escript) the unicode support is identified using environment variables\njust as for [interactive shells](unicode_usage.md#the-interactive-shell).\nWorking with unicode in non-interactive sessions works just the same as for\ninteractive sessions.\n\nIn some situations you may need to be able to read and write raw bytes from\n[`standard_io`](`t:io:standard_io/0`). If that is the case, then you want to set\nthe [standard_io_encoding](`e:kernel:kernel_app.md#standard_io_encoding`)\nconfiguration parameter to `latin1` and use the `m:file` API to read and write\ndata (as explained in\n[Unicode Data in Files](unicode_usage.md#unicode-data-in-files)).\n\nIn the example below we first read the character `ξ` from\n[`standard_io`](`t:io:standard_io/0`) and then print the\n[charlist()](`t:unicode:charlist/0`) represented by it.\n\n```erlang\n#!/usr/bin/env escript\n%%! -kernel standard_io_encoding latin1\n\nmain(_) ->\n  {ok, Char} = file:read_line(standard_io),\n  ok = file:write(standard_io, string:trim(Char)),\n  ok = file:write(standard_io, io_lib:format(\": ~w~n\",[string:trim(Char)])),\n  ok.\n```\n\n```text\n$ escript test.es\nξ\nξ: [206,190]\n```\n\n`ξ` would normally be represented as the integer 958, but since we are using\nbytewise encoding (`latin1`), it is represented by 206 and 190, which is the\nutf-8 bytes representing `ξ`. When we echo those bytes back to\n[`standard_io`](`t:io:standard_io/0`), the terminal will see the bytes as utf-8\nand show the correct value even though in Erlang we never knew that it was\nindeed a unicode string.\n\n[](){: #unicode_file_names }","ref":"unicode_usage.html#escripts-and-non-interactive-i-o"},{"type":"extras","title":"Unicode Filenames - Using Unicode in Erlang","doc":"Most modern operating systems support Unicode filenames in some way. There are\nmany different ways to do this and Erlang by default treats the different\napproaches differently:\n\n- **Mandatory Unicode file naming** - Windows, Android and, for most cases,\n  MacOS X enforce Unicode support for filenames. All files created in the file\n  system have names that can consistently be interpreted. In MacOS X and\n  Android, all filenames are retrieved in UTF-8 encoding. In Windows, each\n  system call handling filenames has a special Unicode-aware variant, giving\n  much the same effect. There are no filenames on these systems that are not\n  Unicode filenames. So, the default behavior of the Erlang VM is to work in\n  \"Unicode filename translation mode\". This means that a filename can be\n  specified as a Unicode list, which is automatically translated to the proper\n  name encoding for the underlying operating system and file system.\n\n  Doing, for example, a `file:list_dir/1` on one of these systems can return\n  Unicode lists with code points > 255, depending on the content of the file\n  system.\n\n- **Transparent file naming** - Most Unix operating systems have adopted a\n  simpler approach, namely that Unicode file naming is not enforced, but by\n  convention. Those systems usually use UTF-8 encoding for Unicode filenames,\n  but do not enforce it. On such a system, a filename containing characters with\n  code points from 128 through 255 can be named as plain ISO Latin-1 or use\n  UTF-8 encoding. As no consistency is enforced, the Erlang VM cannot do\n  consistent translation of all filenames.\n\n  By default on such systems, Erlang starts in `utf8` filename mode if the\n  terminal supports UTF-8, otherwise in `latin1` mode.\n\n  In `latin1` mode, filenames are bytewise encoded. This allows for list\n  representation of all filenames in the system. However, a a file named\n  \"Östersund.txt\", appears in `file:list_dir/1` either as \"Östersund.txt\" (if\n  the filename was encoded in bytewise ISO Latin-1 by the program creating the\n  file) or more probably as `[195,150,115,116,101,114,115,117,110,100]`, which\n  is a list containing UTF-8 bytes (not what you want). If you use Unicode\n  filename translation on such a system, non-UTF-8 filenames are ignored by\n  functions like `file:list_dir/1`. They can be retrieved with function\n  `file:list_dir_all/1`, but wrongly encoded filenames appear as \"raw\n  filenames\".\n\nThe Unicode file naming support was introduced in Erlang/OTP R14B01. A VM\noperating in Unicode filename translation mode can work with files having names\nin any language or character set (as long as it is supported by the underlying\noperating system and file system). The Unicode character list is used to denote\nfilenames or directory names. If the file system content is listed, you also get\nUnicode lists as return value. The support lies in the Kernel and STDLIB\nmodules, which is why most applications (that do not explicitly require the\nfilenames to be in the ISO Latin-1 range) benefit from the Unicode support\nwithout change.\n\nOn operating systems with mandatory Unicode filenames, this means that you more\neasily conform to the filenames of other (non-Erlang) applications. You can also\nprocess filenames that, at least on Windows, were inaccessible (because of\nhaving names that could not be represented in ISO Latin-1). Also, you avoid\ncreating incomprehensible filenames on MacOS X, as the `vfs` layer of the\noperating system accepts all your filenames as UTF-8 does not rewrite them.\n\nFor most systems, turning on Unicode filename translation is no problem even if\nit uses transparent file naming. Very few systems have mixed filename encodings.\nA consistent UTF-8 named system works perfectly in Unicode filename mode. It was\nstill, however, considered experimental in Erlang/OTP R14B01 and is still not\nthe default on such systems.\n\nUnicode filename translation is turned on with switch `+fnu`. On Linux, a VM\nstarted without explicitly stating the filename translation mode defaults to\n`latin1` as the native filename encoding. On Windows, MacOS X and Android, the\ndefault behavior is that of Unicode filename translation. Therefore\n`file:native_name_encoding/0` by default returns `utf8` on those systems\n(Windows does not use UTF-8 on the file system level, but this can safely be\nignored by the Erlang programmer). The default behavior can, as stated earlier,\nbe changed using option `+fnu` or `+fnl` to the VM, see the\n[`erl`](`e:erts:erl_cmd.md`) program. If the VM is started in Unicode filename\ntranslation mode, `file:native_name_encoding/0` returns atom `utf8`. Switch\n`+fnu` can be followed by `w`, `i`, or `e` to control how wrongly encoded\nfilenames are to be reported.\n\n- `w` means that a warning is sent to the `error_logger` whenever a wrongly\n  encoded filename is \"skipped\" in directory listings. `w` is the default.\n- `i` means that wrongly encoded filenames are silently ignored.\n- `e` means that the API function returns an error whenever a wrongly encoded\n  filename (or directory name) is encountered.\n\nNotice that `file:read_link/1` always returns an error if the link points to an\ninvalid filename.\n\nIn Unicode filename mode, filenames given to BIF [`open_port/2`](`open_port/2`)\nwith option `{spawn_executable,...}` are also interpreted as Unicode. So is the\nparameter list specified in option `args` available when using\n`spawn_executable`. The UTF-8 translation of arguments can be avoided using\nbinaries, see section\n[Notes About Raw Filenames](unicode_usage.md#notes-about-raw-filenames).\n\nNotice that the file encoding options specified when opening a file has nothing\nto do with the filename encoding convention. You can very well open files\ncontaining data encoded in UTF-8, but having filenames in bytewise (`latin1`)\nencoding or conversely.\n\n> #### Note {: .info }\n>\n> Erlang drivers and NIF-shared objects still cannot be named with names\n> containing code points > 127. This limitation will be removed in a future\n> release. However, Erlang modules can, but it is definitely not a good idea and\n> is still considered experimental.","ref":"unicode_usage.html#unicode-filenames"},{"type":"extras","title":"Notes About Raw Filenames - Using Unicode in Erlang","doc":"> #### Note {: .info }\n>\n> Note that raw filenames _not_ necessarily are encoded the same way as on the\n> OS level.\n\nRaw filenames were introduced together with Unicode filename support in ERTS\n5.8.2 (Erlang/OTP R14B01). The reason \"raw filenames\" were introduced in the\nsystem was to be able to represent filenames, specified in different encodings\non the same system, consistently. It can seem practical to have the VM\nautomatically translate a filename that is not in UTF-8 to a list of Unicode\ncharacters, but this would open up for both duplicate filenames and other\ninconsistent behavior.\n\nConsider a directory containing a file named \"björn\" in ISO Latin-1, while the\nErlang VM is operating in Unicode filename mode (and therefore expects UTF-8\nfile naming). The ISO Latin-1 name is not valid UTF-8 and one can be tempted to\nthink that automatic conversion in, for example, `file:list_dir/1` is a good\nidea. But what would happen if we later tried to open the file and have the name\nas a Unicode list (magically converted from the ISO Latin-1 filename)? The VM\nconverts the filename to UTF-8, as this is the encoding expected. Effectively\nthis means trying to open the file named <<\"björn\"/utf8>>. This file does not\nexist, and even if it existed it would not be the same file as the one that was\nlisted. We could even create two files named \"björn\", one named in UTF-8\nencoding and one not. If `file:list_dir/1` would automatically convert the ISO\nLatin-1 filename to a list, we would get two identical filenames as the result.\nTo avoid this, we must differentiate between filenames that are properly encoded\naccording to the Unicode file naming convention (that is, UTF-8) and filenames\nthat are invalid under the encoding. By the common function `file:list_dir/1`,\nthe wrongly encoded filenames are ignored in Unicode filename translation mode,\nbut by function `file:list_dir_all/1` the filenames with invalid encoding are\nreturned as \"raw\" filenames, that is, as binaries.\n\nThe `file` module accepts raw filenames as input.\n`open_port({spawn_executable, ...} ...)` also accepts them. As mentioned\nearlier, the arguments specified in the option list to\n`open_port({spawn_executable, ...} ...)` undergo the same conversion as the\nfilenames, meaning that the executable is provided with arguments in UTF-8 as\nwell. This translation is avoided consistently with how the filenames are\ntreated, by giving the argument as a binary.\n\nTo force Unicode filename translation mode on systems where this is not the\ndefault was considered experimental in Erlang/OTP R14B01. This was because the\ninitial implementation did not ignore wrongly encoded filenames, so that raw\nfilenames could spread unexpectedly throughout the system. As from Erlang/OTP\nR16B, the wrongly encoded filenames are only retrieved by special functions\n(such as `file:list_dir_all/1`). Since the impact on existing code is therefore\nmuch lower it is now supported. Unicode filename translation is expected to be\ndefault in future releases.\n\nEven if you are operating without Unicode file naming translation automatically\ndone by the VM, you can access and create files with names in UTF-8 encoding by\nusing raw filenames encoded as UTF-8. Enforcing the UTF-8 encoding regardless of\nthe mode the Erlang VM is started in can in some circumstances be a good idea,\nas the convention of using UTF-8 filenames is spreading.","ref":"unicode_usage.html#notes-about-raw-filenames"},{"type":"extras","title":"Notes About MacOS X - Using Unicode in Erlang","doc":"The `vfs` layer of MacOS X enforces UTF-8 filenames in an aggressive way. Older\nversions did this by refusing to create non-UTF-8 conforming filenames, while\nnewer versions replace offending bytes with the sequence \"%HH\", where HH is the\noriginal character in hexadecimal notation. As Unicode translation is enabled by\ndefault on MacOS X, the only way to come up against this is to either start the\nVM with flag `+fnl` or to use a raw filename in bytewise (`latin1`) encoding. If\nusing a raw filename, with a bytewise encoding containing characters from 127\nthrough 255, to create a file, the file cannot be opened using the same name as\nthe one used to create it. There is no remedy for this behavior, except keeping\nthe filenames in the correct encoding.\n\nMacOS X reorganizes the filenames so that the representation of accents, and so\non, uses the \"combining characters\". For example, character `ö` is represented\nas code points `[111,776]`, where `111` is character `o` and `776` is the\nspecial accent character \"Combining Diaeresis\". This way of normalizing Unicode\nis otherwise very seldom used. Erlang normalizes those filenames in the opposite\nway upon retrieval, so that filenames using combining accents are not passed up\nto the Erlang application. In Erlang, filename \"björn\" is retrieved as\n`[98,106,246,114,110]`, not as `[98,106,117,776,114,110]`, although the file\nsystem can think differently. The normalization into combining accents is redone\nwhen accessing files, so this can usually be ignored by the Erlang programmer.","ref":"unicode_usage.html#notes-about-macos-x"},{"type":"extras","title":"Unicode in Environment and Parameters - Using Unicode in Erlang","doc":"[](){: #unicode_in_environment_and_parameters }\n\nEnvironment variables and their interpretation are handled much in the same way\nas filenames. If Unicode filenames are enabled, environment variables as well as\nparameters to the Erlang VM are expected to be in Unicode.\n\nIf Unicode filenames are enabled, the calls to [`os:getenv/0,1`](`os:getenv/0`),\n`os:putenv/2`, and `os:unsetenv/1` handle Unicode strings. On Unix-like\nplatforms, the built-in functions translate environment variables in UTF-8\nto/from Unicode strings, possibly with code points > 255. On Windows, the\nUnicode versions of the environment system API are used, and code points > 255\nare allowed.\n\nOn Unix-like operating systems, parameters are expected to be UTF-8 without\ntranslation if Unicode filenames are enabled.","ref":"unicode_usage.html#unicode-in-environment-and-parameters"},{"type":"extras","title":"Unicode-Aware Modules - Using Unicode in Erlang","doc":"Most of the modules in Erlang/OTP are Unicode-unaware in the sense that they\nhave no notion of Unicode and should not have. Typically they handle non-textual\nor byte-oriented data (such as `gen_tcp`).\n\nModules handling textual data (such as `m:io_lib` and `m:string` are sometimes\nsubject to conversion or extension to be able to handle Unicode characters.\n\nFortunately, most textual data has been stored in lists and range checking has\nbeen sparse, so modules like `string` work well for Unicode strings with little\nneed for conversion or extension.\n\nSome modules are, however, changed to be explicitly Unicode-aware. These modules\ninclude:\n\n- **`unicode`** - The `m:unicode` module is clearly Unicode-aware. It contains\n  functions for conversion between different Unicode formats and some utilities\n  for identifying byte order marks. Few programs handling Unicode data survive\n  without this module.\n\n- **`io`** - The `m:io` module has been extended along with the actual I/O\n  protocol to handle Unicode data. This means that many functions require\n  binaries to be in UTF-8, and there are modifiers to format control sequences\n  to allow for output of Unicode strings.\n\n- **`file`, `group`, `user`** - I/O-servers throughout the system can handle\n  Unicode data and have options for converting data upon output or input to/from\n  the device. As shown earlier, the `m:shell` module has support for Unicode\n  terminals and the `m:file` module allows for translation to and from various\n  Unicode formats on disk.\n\n  Reading and writing of files with Unicode data is, however, not best done with\n  the `file` module, as its interface is byte-oriented. A file opened with a\n  Unicode encoding (like UTF-8) is best read or written using the `m:io` module.\n\n- **`re`** - The `m:re` module allows for matching Unicode strings as a special\n  option. As the library is centered on matching in binaries, the Unicode\n  support is UTF-8-centered.\n\n- **`wx`** - The graphical library `m:wx` has extensive support for Unicode\n  text.\n\nThe `m:string` module works perfectly for Unicode strings and ISO Latin-1\nstrings, except the language-dependent functions `string:uppercase/1` and\n`string:lowercase/1`. These two functions can never function correctly for\nUnicode characters in their current form, as there are language and locale\nissues to consider when converting text between cases. Converting case in an\ninternational environment is a large subject not yet addressed in OTP.","ref":"unicode_usage.html#unicode-aware-modules"},{"type":"extras","title":"Unicode Data in Files - Using Unicode in Erlang","doc":"Although Erlang can handle Unicode data in many forms does not automatically\nmean that the content of any file can be Unicode text. The external entities,\nsuch as ports and I/O servers, are not generally Unicode capable.\n\nPorts are always byte-oriented, so before sending data that you are not sure is\nbytewise-encoded to a port, ensure to encode it in a proper Unicode encoding.\nSometimes this means that only part of the data must be encoded as, for example,\nUTF-8. Some parts can be binary data (like a length indicator) or something else\nthat must not undergo character encoding, so no automatic translation is\npresent.\n\nI/O servers behave a little differently. The I/O servers connected to terminals\n(or `stdout`) can usually cope with Unicode data regardless of the encoding\noption. This is convenient when one expects a modern environment but do not want\nto crash when writing to an archaic terminal or pipe.\n\nA file can have an encoding option that makes it generally usable by the `m:io`\nmodule (for example `{encoding,utf8}`), but is by default opened as a\nbyte-oriented file. The `m:file` module is byte-oriented, so only ISO Latin-1\ncharacters can be written using that module. Use the `io` module if Unicode data\nis to be output to a file with other `encoding` than `latin1` (bytewise\nencoding). It is slightly confusing that a file opened with, for example,\n`file:open(Name,[read,{encoding,utf8}])` cannot be properly read using\n`file:read(File,N)`, but using the `io` module to retrieve the Unicode data from\nit. The reason is that `file:read` and `file:write` (and friends) are purely\nbyte-oriented, and should be, as that is the way to access files other than text\nfiles, byte by byte. As with ports, you can write encoded data into a file by\n\"manually\" converting the data to the encoding of choice (using the `m:unicode`\nmodule or the bit syntax) and then output it on a bytewise (`latin1`) encoded\nfile.\n\nRecommendations:\n\n- Use the `m:file` module for files opened for bytewise access\n  (`{encoding,latin1}`).\n- Use the `m:io` module when accessing files with any other encoding (for\n  example `{encoding,utf8}`).\n\nFunctions reading Erlang syntax from files recognize the `coding:` comment and\ncan therefore handle Unicode data on input. When writing Erlang terms to a file,\nyou are advised to insert such comments when applicable:\n\n```erlang\n$ erl +fna +pc unicode\nErlang R16B (erts-5.10.1) [source]  [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1  (abort with ^G)\n1> file:write_file(\"test.term\",<<\"%% coding: utf-8\\n[{\\\"Юникод\\\",4711}].\\n\"/utf8>>).\nok\n2> file:consult(\"test.term\").\n{ok,[[{\"Юникод\",4711}]]}\n```","ref":"unicode_usage.html#unicode-data-in-files"},{"type":"extras","title":"Summary of Options - Using Unicode in Erlang","doc":"[](){: #unicode_options_summary }\n\nThe Unicode support is controlled by both command-line switches, some standard\nenvironment variables, and the OTP version you are using. Most options affect\nmainly how Unicode data is displayed, not the functionality of the APIs in the\nstandard libraries. This means that Erlang programs usually do not need to\nconcern themselves with these options, they are more for the development\nenvironment. An Erlang program can be written so that it works well regardless\nof the type of system or the Unicode options that are in effect.\n\nHere follows a summary of the settings affecting Unicode:\n\n- **The `LANG` and `LC_CTYPE` environment variables** - The language setting in\n  the operating system mainly affects the shell. The terminal (that is, the\n  group leader) operates with `{encoding, unicode}` only if the environment\n  tells it that UTF-8 is allowed. This setting is to correspond to the terminal\n  you are using.\n\n  The environment can also affect filename interpretation, if Erlang is started\n  with flag `+fna` (which is default from Erlang/OTP 17.0).\n\n  You can check the setting of this by calling [`io:getopts()`](`io:getopts/1`),\n  which gives you an option list containing `{encoding,unicode}` or\n  `{encoding,latin1}`.\n\n- **The `+pc` \\{`unicode`|`latin1`\\} flag to [`erl(1)`](`e:erts:erl_cmd.md`)** -\n  This flag affects what is interpreted as string data when doing heuristic\n  string detection in the shell and in `m:io`/\n  [`io_lib:format`](`io_lib:format/2`) with the `\"~tp\"` and `~tP` formatting\n  instructions, as described earlier.\n\n  You can check this option by calling `io:printable_range/0`, which returns\n  `unicode` or `latin1`. To be compatible with future (expected) extensions to\n  the settings, rather use `io_lib:printable_list/1` to check if a list is\n  printable according to the setting. That function takes into account new\n  possible settings returned from `io:printable_range/0`.\n\n- **The `+fn`\\{`l`|`u`|`a`\\} [\\{`w`|`i`|`e`\\}] flag to\n  [`erl(1)`](`e:erts:erl_cmd.md`)** - This flag affects how the filenames are to\n  be interpreted. On operating systems with transparent file naming, this must\n  be specified to allow for file naming in Unicode characters (and for correct\n  interpretation of filenames containing characters > 255).\n\n  - `+fnl` means bytewise interpretation of filenames, which was the usual way\n    to represent ISO Latin-1 filenames before UTF-8 file naming got widespread.\n  - `+fnu` means that filenames are encoded in UTF-8, which is nowadays the\n    common scheme (although not enforced).\n  - `+fna` means that you automatically select between `+fnl` and `+fnu`, based\n    on environment variables `LANG` and `LC_CTYPE`. This is optimistic\n    heuristics indeed, nothing enforces a user to have a terminal with the same\n    encoding as the file system, but this is usually the case. This is the\n    default on all Unix-like operating systems, except MacOS X.\n\n  The filename translation mode can be read with function\n  `file:native_name_encoding/0`, which returns `latin1` (bytewise encoding) or\n  `utf8`.\n\n- **`epp:default_encoding/0`** - This function returns the default encoding for\n  Erlang source files (if no encoding comment is present) in the currently\n  running release. In Erlang/OTP R16B, `latin1` (bytewise encoding) was\n  returned. As from Erlang/OTP 17.0, `utf8` is returned.\n\n  The encoding of each file can be specified using comments as described in the\n  [`epp`](`m:epp#encoding`) module.\n\n- **[`io:setopts/1,2`](`io:setopts/1`) and\n  [`standard_io_encoding`](`e:kernel:kernel_app.md#standard_io_encoding`)** -\n  When Erlang is started the encoding for [`standard_io`](`t:io:standard_io/0`)\n  is by default set to what the\n  [locale settings indicate](unicode_usage.md#the-interactive-shell). You can\n  override the default by setting the kernel configuration parameter\n  [`standard_io_encoding`](`e:kernel:kernel_app.md#standard_io_encoding`) to the\n  desired encoding.\n\n  You can set the encoding of a file or other I/O server with function\n  [`io:setopts/2`](`io:setopts/1`). This can also be set when opening a file.\n  Setting the terminal (or other [`standard_io`](`t:io:standard_io/0`) server)\n  unconditionally to option `{encoding,utf8}` implies that UTF-8 encoded\n  characters are written to the device, regardless of how Erlang was started or\n  the user's environment.\n\n  > #### Note {: .info }\n  >\n  > If you use [`io:setopts/2`](`io:setopts/1`) to change the encoding of\n  > [`standard_io`](`t:io:standard_io/0`) the I/O server may already have read\n  > some data using the default encoding. To avoid this you should set the\n  > encoding using\n  > [`standard_io_encoding`](`e:kernel:kernel_app.md#standard_io_encoding`).\n\n  Opening files with option `encoding` is convenient when writing or reading\n  text files in a known encoding.\n\n  You can retrieve the `encoding` setting for an I/O server with function\n  [`io:getopts()`](`io:getopts/1`).","ref":"unicode_usage.html#summary-of-options"},{"type":"extras","title":"Recipes - Using Unicode in Erlang","doc":"When starting with Unicode, one often stumbles over some common issues. This\nsection describes some methods of dealing with Unicode data.","ref":"unicode_usage.html#recipes"},{"type":"extras","title":"Byte Order Marks - Using Unicode in Erlang","doc":"A common method of identifying encoding in text files is to put a Byte Order\nMark (BOM) first in the file. The BOM is the code point 16#FEFF encoded in the\nsame way as the remaining file. If such a file is to be read, the first few\nbytes (depending on encoding) are not part of the text. This code outlines how\nto open a file that is believed to have a BOM, and sets the files encoding and\nposition for further sequential reading (preferably using the `m:io` module).\n\nNotice that error handling is omitted from the code:\n\n```erlang\nopen_bom_file_for_reading(File) ->\n    {ok,F} = file:open(File,[read,binary]),\n    {ok,Bin} = file:read(F,4),\n    {Type,Bytes} = unicode:bom_to_encoding(Bin),\n    file:position(F,Bytes),\n    io:setopts(F,[{encoding,Type}]),\n    {ok,F}.\n```\n\nFunction `unicode:bom_to_encoding/1` identifies the encoding from a binary of at\nleast four bytes. It returns, along with a term suitable for setting the\nencoding of the file, the byte length of the BOM, so that the file position can\nbe set accordingly. Notice that function `file:position/2` always works on\nbyte-offsets, so that the byte length of the BOM is needed.\n\nTo open a file for writing and place the BOM first is even simpler:\n\n```erlang\nopen_bom_file_for_writing(File,Encoding) ->\n    {ok,F} = file:open(File,[write,binary]),\n    ok = file:write(File,unicode:encoding_to_bom(Encoding)),\n    io:setopts(F,[{encoding,Encoding}]),\n    {ok,F}.\n```\n\nThe file is in both these cases then best processed using the `m:io` module, as\nthe functions in that module can handle code points beyond the ISO Latin-1\nrange.","ref":"unicode_usage.html#byte-order-marks"},{"type":"extras","title":"Formatted I/O - Using Unicode in Erlang","doc":"When reading and writing to Unicode-aware entities, like a file opened for\nUnicode translation, you probably want to format text strings using the\nfunctions in the `m:io` module or the `m:io_lib` module. For backward\ncompatibility reasons, these functions do not accept any list as a string, but\nrequire a special _translation modifier_ when working with Unicode texts. The\nmodifier is `t`. When applied to control character `s` in a formatting string,\nit accepts all Unicode code points and expects binaries to be in UTF-8:\n\n```erlang\n1> io:format(\"~ts~n\",[<<\"åäö\"/utf8>>]).\nåäö\nok\n2> io:format(\"~s~n\",[<<\"åäö\"/utf8>>]).\nÃ¥Ã¤Ã¶\nok\n```\n\nClearly, the second `io:format/2` gives undesired output, as the UTF-8 binary is\nnot in `latin1`. For backward compatibility, the non-prefixed control character\n`s` expects bytewise-encoded ISO Latin-1 characters in binaries and lists\ncontaining only code points < 256.\n\nAs long as the data is always lists, modifier `t` can be used for any string,\nbut when binary data is involved, care must be taken to make the correct choice\nof formatting characters. A bytewise-encoded binary is also interpreted as a\nstring, and printed even when using `~ts`, but it can be mistaken for a valid\nUTF-8 string. Avoid therefore using the `~ts` control if the binary contains\nbytewise-encoded characters and not UTF-8.\n\nFunction `io_lib:format/2` behaves similarly. It is defined to return a deep\nlist of characters and the output can easily be converted to binary data for\noutputting on any device by a simple `erlang:list_to_binary/1`. When the\ntranslation modifier is used, the list can, however, contain characters that\ncannot be stored in one byte. The call to `erlang:list_to_binary/1` then fails.\nHowever, if the I/O server you want to communicate with is Unicode-aware, the\nreturned list can still be used directly:\n\n```erlang\n$ erl +pc unicode\nErlang R16B (erts-5.10.1) [source] [async-threads:0] [hipe] [kernel-poll:false]\n\nEshell V5.10.1 (abort with ^G)\n1> io_lib:format(\"~ts~n\", [\"Γιούνικοντ\"]).\n[\"Γιούνικοντ\",\"\\n\"]\n2> io:put_chars(io_lib:format(\"~ts~n\", [\"Γιούνικοντ\"])).\nΓιούνικοντ\nok\n```\n\nThe Unicode string is returned as a Unicode list, which is recognized as such,\nas the Erlang shell uses the Unicode encoding (and is started with all Unicode\ncharacters considered printable). The Unicode list is valid input to function\n`io:put_chars/2`, so data can be output on any Unicode-capable device. If the\ndevice is a terminal, characters are output in format `\\x{`H...`}` if encoding\nis `latin1`. Otherwise in UTF-8 (for the non-interactive terminal: \"oldshell\" or\n\"noshell\") or whatever is suitable to show the character properly (for an\ninteractive terminal: the regular shell).\n\nSo, you can always send Unicode data to the\n[`standard_io`](`t:io:standard_io/0`) device. Files, however, accept only\nUnicode code points beyond ISO Latin-1 if `encoding` is set to something else\nthan `latin1`.","ref":"unicode_usage.html#formatted-i-o"},{"type":"extras","title":"Heuristic Identification of UTF-8 - Using Unicode in Erlang","doc":"While it is strongly encouraged that the encoding of characters in binary data\nis known before processing, that is not always possible. On a typical Linux\nsystem, there is a mix of UTF-8 and ISO Latin-1 text files, and there are seldom\nany BOMs in the files to identify them.\n\nUTF-8 is designed so that ISO Latin-1 characters with numbers beyond the 7-bit\nASCII range are seldom considered valid when decoded as UTF-8. Therefore one can\nusually use heuristics to determine if a file is in UTF-8 or if it is encoded in\nISO Latin-1 (one byte per character). The `m:unicode` module can be used to\ndetermine if data can be interpreted as UTF-8:\n\n```erlang\nheuristic_encoding_bin(Bin) when is_binary(Bin) ->\n    case unicode:characters_to_binary(Bin,utf8,utf8) of\n\tBin ->\n\t    utf8;\n\t_ ->\n\t    latin1\n    end.\n```\n\nIf you do not have a complete binary of the file content, you can instead chunk\nthrough the file and check part by part. The return-tuple\n`{incomplete,Decoded,Rest}` from function\n[`unicode:characters_to_binary/1,2,3`](`unicode:characters_to_binary/1`) comes\nin handy. The incomplete rest from one chunk of data read from the file is\nprepended to the next chunk and we therefore avoid the problem of character\nboundaries when reading chunks of bytes in UTF-8 encoding:\n\n```erlang\nheuristic_encoding_file(FileName) ->\n    {ok,F} = file:open(FileName,[read,binary]),\n    loop_through_file(F,<<>>,file:read(F,1024)).\n\nloop_through_file(_,<<>>,eof) ->\n    utf8;\nloop_through_file(_,_,eof) ->\n    latin1;\nloop_through_file(F,Acc,{ok,Bin}) when is_binary(Bin) ->\n    case unicode:characters_to_binary([Acc,Bin]) of\n\t{error,_,_} ->\n\t    latin1;\n\t{incomplete,_,Rest} ->\n\t    loop_through_file(F,Rest,file:read(F,1024));\n\tRes when is_binary(Res) ->\n\t    loop_through_file(F,<<>>,file:read(F,1024))\n    end.\n```\n\nAnother option is to try to read the whole file in UTF-8 encoding and see if it\nfails. Here we need to read the file using function `io:get_chars/3`, as we have\nto read characters with a code point > 255:\n\n```erlang\nheuristic_encoding_file2(FileName) ->\n    {ok,F} = file:open(FileName,[read,binary,{encoding,utf8}]),\n    loop_through_file2(F,io:get_chars(F,'',1024)).\n\nloop_through_file2(_,eof) ->\n    utf8;\nloop_through_file2(_,{error,_Err}) ->\n    latin1;\nloop_through_file2(F,Bin) when is_binary(Bin) ->\n    loop_through_file2(F,io:get_chars(F,'',1024)).\n```","ref":"unicode_usage.html#heuristic-identification-of-utf-8"},{"type":"extras","title":"Lists of UTF-8 Bytes - Using Unicode in Erlang","doc":"For various reasons, you can sometimes have a list of UTF-8 bytes. This is not a\nregular string of Unicode characters, as each list element does not contain one\ncharacter. Instead you get the \"raw\" UTF-8 encoding that you have in binaries.\nThis is easily converted to a proper Unicode string by first converting byte per\nbyte into a binary, and then converting the binary of UTF-8 encoded characters\nback to a Unicode string:\n\n```erlang\nutf8_list_to_string(StrangeList) ->\n  unicode:characters_to_list(list_to_binary(StrangeList)).\n```","ref":"unicode_usage.html#lists-of-utf-8-bytes"},{"type":"extras","title":"Double UTF-8 Encoding - Using Unicode in Erlang","doc":"When working with binaries, you can get the horrible \"double UTF-8 encoding\",\nwhere strange characters are encoded in your binaries or files. In other words,\nyou can get a UTF-8 encoded binary that for the second time is encoded as UTF-8.\nA common situation is where you read a file, byte by byte, but the content is\nalready UTF-8. If you then convert the bytes to UTF-8, using, for example, the\n`m:unicode` module, or by writing to a file opened with option\n`{encoding,utf8}`, you have each _byte_ in the input file encoded as UTF-8, not\neach character of the original text (one character can have been encoded in many\nbytes). There is no real remedy for this other than to be sure of which data is\nencoded in which format, and never convert UTF-8 data (possibly read byte by\nbyte from a file) into UTF-8 again.\n\nBy far the most common situation where this occurs, is when you get lists of\nUTF-8 instead of proper Unicode strings, and then convert them to UTF-8 in a\nbinary or on a file:\n\n```erlang\nwrong_thing_to_do() ->\n  {ok,Bin} = file:read_file(\"an_utf8_encoded_file.txt\"),\n  MyList = binary_to_list(Bin), %% Wrong! It is an utf8 binary!\n  {ok,C} = file:open(\"catastrophe.txt\",[write,{encoding,utf8}]),\n  io:put_chars(C,MyList), %% Expects a Unicode string, but get UTF-8\n                          %% bytes in a list!\n  file:close(C). %% The file catastrophe.txt contains more or less unreadable\n                 %% garbage!\n```\n\nEnsure you know what a binary contains before converting it to a string. If no\nother option exists, try heuristics:\n\n```erlang\nif_you_can_not_know() ->\n  {ok,Bin} = file:read_file(\"maybe_utf8_encoded_file.txt\"),\n  MyList = case unicode:characters_to_list(Bin) of\n    L when is_list(L) ->\n      L;\n    _ ->\n      binary_to_list(Bin) %% The file was bytewise encoded\n  end,\n  %% Now we know that the list is a Unicode string, not a list of UTF-8 bytes\n  {ok,G} = file:open(\"greatness.txt\",[write,{encoding,utf8}]),\n  io:put_chars(G,MyList), %% Expects a Unicode string, which is what it gets!\n  file:close(G). %% The file contains valid UTF-8 encoded Unicode characters!\n```","ref":"unicode_usage.html#double-utf-8-encoding"},{"type":"extras","title":"Uniform Resource Identifiers","doc":"<!--\n%CopyrightBegin%\n\nCopyright Ericsson AB 2023-2024. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# Uniform Resource Identifiers","ref":"uri_string_usage.html"},{"type":"extras","title":"Basics - Uniform Resource Identifiers","doc":"At the time of writing this document, in October 2020, there are two major\nstandards concerning Universal Resource Identifiers and Universal Resource\nLocators:\n\n- [RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax](https://www.ietf.org/rfc/rfc3986.txt)\n- [WHAT WG URL - Living standard](https://url.spec.whatwg.org/)\n\nThe former is a classical standard with a proper formal syntax, using the so\ncalled [Augmented Backus-Naur Form (ABNF)](https://www.ietf.org/rfc/rfc2234.txt)\nfor describing the grammar, while the latter is a living document describing the\ncurrent pratice, that is, how a majority of Web browsers work with URIs. WHAT WG\nURL is Web focused and it has no formal grammar but a plain english description\nof the algorithms that should be followed.\n\nWhat is the difference between them, if any? They provide an overlapping\ndefinition for resource identifiers and they are not compatible. The\n`m:uri_string` module implements\n[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt) and the term URI will be used\nthroughout this document. A URI is an identifier, a string of characters that\nidentifies a particular resource.\n\nFor a more complete problem statement regarding the URIs check the\n[URL Problem Statement and Directions](https://tools.ietf.org/html/draft-ruby-url-problem-01).","ref":"uri_string_usage.html#basics"},{"type":"extras","title":"What is a URI? - Uniform Resource Identifiers","doc":"Let's start with what it is not. It is not the text that you type in the address\nbar in your Web browser. Web browsers do all possible heuristics to convert the\ninput into a valid URI that could be sent over the network.\n\nA URI is an identifier consisting of a sequence of characters matching the\nsyntax rule named `URI` in [RFC 3986](https://www.ietf.org/rfc/rfc3986.txt).\n\nIt is crucial to clarify that a _character_ is a symbol that is displayed on a\nterminal or written to paper and should not be confused with its internal\nrepresentation.\n\nA URI more specifically, is a sequence of characters from a subset of the US\nASCII character set. The generic URI syntax consists of a hierarchical sequence\nof components referred to as the scheme, authority, path, query, and fragment.\nThere is a formal description for each of these components in\n[ABNF](https://www.ietf.org/rfc/rfc2234.txt) notation in\n[RFC 3986](https://www.ietf.org/rfc/rfc3986.txt):\n\n```text\n    URI         = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n    hier-part   = \"//\" authority path-abempty\n                   / path-absolute\n                   / path-rootless\n                   / path-empty\n    scheme      = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n    authority   = [ userinfo \"@\" ] host [ \":\" port ]\n    userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n\n    reserved    = gen-delims / sub-delims\n    gen-delims  = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\n    sub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n    unreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n```","ref":"uri_string_usage.html#what-is-a-uri"},{"type":"extras","title":"The uri_string module - Uniform Resource Identifiers","doc":"As producing and consuming standard URIs can get quite complex, Erlang/OTP\nprovides a module, `m:uri_string`, to handle all the most difficult operations\nsuch as parsing, recomposing, normalizing and resolving URIs against a base URI.\n\nThe API functions in `m:uri_string` work on two basic data types\n[`uri_string()`](`t:uri_string:uri_string/0`) and\n[`uri_map()`](`t:uri_string:uri_map/0`).\n[`uri_string()`](`t:uri_string:uri_string/0`) represents a standard URI, while\n[`uri_map()`](`t:uri_string:uri_map/0`) is a wider datatype, that can represent\nURI components using [Unicode](unicode_usage.md#what-unicode-is) characters.\n[`uri_map()`](`t:uri_string:uri_map/0`) is a convenient choice for enabling\noperations such as producing standard compliant URIs out of components that have\nspecial or [Unicode](unicode_usage.md#what-unicode-is) characters. It is easier\nto explain this by an example.\n\nLet's say that we would like to create the following URI and send it over the\nnetwork: `http://cities/örebro?foo bar`. This is not a valid URI as it contains\ncharacters that are not allowed in a URI such as \"ö\" and the space. We can\nverify this by parsing the URI:\n\n```erlang\n  1> uri_string:parse(\"http://cities/örebro?foo bar\").\n  {error,invalid_uri,\":\"}\n```\n\nThe URI parser tries all possible combinations to interpret the input and fails\nat the last attempt when it encounters the colon character `\":\"`. Note, that the\ninital fault occurs when the parser attempts to interpret the character `\"ö\"`\nand after a failure back-tracks to the point where it has another possible\nparsing alternative.\n\nThe proper way to solve this problem is to use `uri_string:recompose/1` with a\n[`uri_map()`](`t:uri_string:uri_map/0`) as input:\n\n```erlang\n  2> uri_string:recompose(#{scheme => \"http\", host => \"cities\", path => \"/örebro\",\n  query => \"foo bar\"}).\n  \"http://cities/%C3%B6rebro?foo%20bar\"\n```\n\nThe result is a valid URI where all the special characters are encoded as\ndefined by the standard. Applying `uri_string:parse/1` and\n`uri_string:percent_decode/1` on the URI returns the original input:\n\n```erlang\n  3> uri_string:percent_decode(uri_string:parse(\"http://cities/%C3%B6rebro?foo%20bar\")).\n  #{host => \"cities\",path => \"/örebro\",query => \"foo bar\",\n  scheme => \"http\"}\n```\n\nThis symmetric property is heavily used in our property test suite.","ref":"uri_string_usage.html#the-uri_string-module"},{"type":"extras","title":"Percent-encoding - Uniform Resource Identifiers","doc":"As you have seen in the previous chapter, a standard URI can only contain a\nstrict subset of the US ASCII character set, moreover the allowed set of\ncharacters is not the same in the different URI components. Percent-encoding is\na mechanism to represent a data octet in a component when that octet's\ncorresponding character is outside of the allowed set or is being used as a\ndelimiter. This is what you see when `\"ö\"` is encoded as `%C3%B6` and `space` as\n`%20`. Most of the API functions are expecting UTF-8 encoding when handling\npercent-encoded triplets. The UTF-8 encoding of the\n[Unicode](unicode_usage.md#what-unicode-is) character `\"ö\"` is two octets:\n`OxC3 0xB6`. The character `space` is in the first 128 characters of\n[Unicode](unicode_usage.md#what-unicode-is) and it is encoded using a single\noctet `0x20`.\n\n> #### Note {: .info }\n>\n> [Unicode](unicode_usage.md#what-unicode-is) is backward compatible with ASCII,\n> the encoding of the first 128 characters is the same binary value as in ASCII.\n\n[](){: #percent_encoding } It is a major source of confusion exactly which\ncharacters will be percent-encoded. In order to make it easier to answer this\nquestion the library provides a utility function,\n[`uri_string:allowed_characters/0 `](`uri_string:allowed_characters/0`), that\nlists the allowed set of characters in each major URI component, and also in the\nmost important standard character sets.\n\n```erlang\n    1> uri_string:allowed_characters().\n    [{scheme,\n     \"+-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"},\n    {userinfo,\n     \"!$%&'()*+,-.0123456789:;=ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\"},\n    {host,\n     \"!$&'()*+,-.0123456789:;=ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\"},\n    {ipv4,\".0123456789\"},\n    {ipv6,\".0123456789:ABCDEFabcdef\"},\n    {regname,\n     \"!$%&'()*+,-.0123456789;=ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\"},\n    {path,\n     \"!$%&'()*+,-./0123456789:;=@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\"},\n    {query,\n     \"!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\"},\n    {fragment,\n     \"!$%&'()*+,-./0123456789:;=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\"},\n    {reserved,\"!#$&'()*+,/:;=?@[]\"},\n    {unreserved,\n     \"-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\"}]\n```\n\nIf a URI component has a character that is not allowed, it will be\npercent-encoded when the URI is produced:\n\n```erlang\n    2> uri_string:recompose(#{scheme => \"https\", host => \"local#host\", path => \"\"}).\n    \"https://local%23host\"\n```\n\nConsuming a URI containing percent-encoded triplets can take many steps. The\nfollowing example shows how to handle an input URI that is not normalized and\ncontains multiple percent-encoded triplets. First, the input\n[`uri_string()`](`t:uri_string:uri_string/0`) is to be parsed into a\n[`uri_map()`](`t:uri_string:uri_map/0`). The parsing only splits the URI into\nits components without doing any decoding:\n\n```text\n    3> uri_string:parse(\"http://%6C%6Fcal%23host/%F6re%26bro%20\").\n    #{host => \"%6C%6Fcal%23host\",path => \"/%F6re%26bro%20\",\n      scheme => \"http\"}}\n```\n\nThe input is a valid URI but how can you decode those percent-encoded octets?\nYou can try to normalize the input with `uri_string:normalize/1`. The normalize\noperation decodes those percent-encoded triplets that correspond to a character\nin the unreserved set. Normalization is a safe, idempotent operation that\nconverts a URI into its canonical form:\n\n```erlang\n    4> uri_string:normalize(\"http://%6C%6Fcal%23host/%F6re%26bro%20\").\n    \"http://local%23host/%F6re%26bro%20\"\n    5> uri_string:normalize(\"http://%6C%6Fcal%23host/%F6re%26bro%20\", [return_map]).\n    #{host => \"local%23host\",path => \"/%F6re%26bro%20\",\n      scheme => \"http\"}\n```\n\nThere are still a few percent-encoded triplets left in the output. At this\npoint, when the URI is already parsed, it is safe to apply application specific\ndecoding on the remaining character triplets. Erlang/OTP provides a function,\n`uri_string:percent_decode/1` for raw percent decoding that you can use on the\nhost and path components, or on the whole map:\n\n```erlang\n    6> uri_string:percent_decode(\"local%23host\").\n    \"local#host\"\n    7> uri_string:percent_decode(\"/%F6re%26bro%20\").\n    {error,invalid_utf8,<<\"/öre&bro \">>}\n    8> uri_string:percent_decode(#{host => \"local%23host\",path => \"/%F6re%26bro%20\",\n    scheme => \"http\"}).\n    {error,{invalid,{path,{invalid_utf8,<<\"/öre&bro \">>}}}}\n```\n\nThe `host` was successfully decoded but the path contains at least one character\nwith non-UTF-8 encoding. In order to be able to decode this, you have to make\nassumptions about the encoding used in these triplets. The most obvious choice\nis _latin-1_, so you can try `uri_string:transcode/2`, to transcode the path to\nUTF-8 and run the percent-decode operation on the transcoded string:\n\n```erlang\n    9> uri_string:transcode(\"/%F6re%26bro%20\", [{in_encoding, latin1}]).\n    \"/%C3%B6re%26bro%20\"\n    10> uri_string:percent_decode(\"/%C3%B6re%26bro%20\").\n    \"/öre&bro \"\n```\n\nIt is important to emphasize that it is not safe to apply\n`uri_string:percent_decode/1` directly on an input URI:\n\n```erlang\n    11> uri_string:percent_decode(\"http://%6C%6Fcal%23host/%C3%B6re%26bro%20\").\n    \"http://local#host/öre&bro \"\n    12> uri_string:parse(\"http://local#host/öre&bro \").\n    {error,invalid_uri,\":\"}\n```\n\n> #### Note {: .info }\n>\n> Percent-encoding is implemented in `uri_string:recompose/1` and it happens\n> when converting a [`uri_map()`](`t:uri_string:uri_map/0`) into a\n> [`uri_string()`](`t:uri_string:uri_string/0`). Applying any percent-encoding\n> directly on an input URI would not be safe just as in the case of\n> `uri_string:percent_decode/1`, the output could be an invalid URI. Quoting\n> functions allow users to perform raw percent encoding and decoding on\n> application data which cannot be handled automatically by\n> `uri_string:recompose/1`. For example in scenario when user would need to use\n> '/' or sub-delimeter as data rather than delimeter in a path component.","ref":"uri_string_usage.html#percent-encoding"},{"type":"extras","title":"Normalization - Uniform Resource Identifiers","doc":"Normalization is the operation of converting the input URI into a _canonical_\nform and keeping the reference to the same underlying resource. The most common\napplication of normalization is determining whether two URIs are equivalent\nwithout accessing their referenced resources.\n\nNormalization has 6 distinct steps. First the input URI is parsed into an\nintermediate form that can handle [Unicode](unicode_usage.md#what-unicode-is)\ncharacters. This datatype is the [`uri_map()`](`t:uri_string:uri_map/0`), that\ncan hold the components of the URI in map elements of type\n`t:unicode:chardata/0`. After having the intermediate form, a sequence of\nnormalization algorithms are applied to the individual URI components:\n\n- **Case normalization** - Converts the `scheme` and `host` components to lower\n  case as they are not case sensitive.\n\n- **Percent-encoding normalization** - Decodes percent-encoded triplets that\n  correspond to characters in the unreserved set.\n\n- **Scheme-based normalization** - Applying rules for the schemes http, https,\n  ftp, ssh, sftp and tftp.\n\n- **Path segment normalization** - Converts the path into a canonical form.\n\nAfter these steps, the intermediate data structure, an\n[`uri_map()`](`t:uri_string:uri_map/0`), is fully normalized. The last step is\napplying `uri_string:recompose/1` that converts the intermediate structure into\na valid canonical URI string.\n\nNotice the order, the\n[`uri_string:normalize(URIMap, [return_map])`](`uri_string:normalize/2`) that we\nused many times in this user guide is a shortcut in the normalization process\nreturning the intermediate datastructure, and allowing us to inspect and apply\nfurther decoding on the remaining percent-encoded triplets.\n\n```text\n    13> uri_string:normalize(\"hTTp://LocalHost:80/%c3%B6rebro/a/../b\").\n    \"http://localhost/%C3%B6rebro/b\"\n    14> uri_string:normalize(\"hTTp://LocalHost:80/%c3%B6rebro/a/../b\", [return_map]).\n    #{host => \"localhost\",path => \"/%C3%B6rebro/b\",\n      scheme => \"http\"}\n```","ref":"uri_string_usage.html#normalization"},{"type":"extras","title":"Special considerations - Uniform Resource Identifiers","doc":"The current URI implementation provides support for producing and consuming\nstandard URIs. The API is not meant to be directly exposed in a Web browser's\naddress bar where users can basically enter free text. Application designers\nshall implement proper heuristics to map the input into a parsable URI.","ref":"uri_string_usage.html#special-considerations"},{"type":"extras","title":"assert.hrl","doc":"<!--\n%CopyrightBegin%\n\nCopyright Ericsson AB 2023-2024. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n%CopyrightEnd%\n-->\n# assert.hrl\n\nAssert macros.","ref":"assert_hrl.html"},{"type":"extras","title":"Description - assert.hrl","doc":"The include file `assert.hrl` provides macros for inserting assertions in your\nprogram code.\n\nInclude the following directive in the module from which the function is called:\n\n```erlang\n-include_lib(\"stdlib/include/assert.hrl\").\n```\n\nWhen an assertion succeeds, the assert macro yields the atom `ok`. When an\nassertion fails, an exception of type `error` is generated. The associated error\nterm has the form `{Macro, Info}`. `Macro` is the macro name, for example,\n`assertEqual`. `Info` is a list of tagged values, such as\n`[{module, M}, {line, L}, ...]`, which gives more information about the location\nand cause of the exception. All entries in the `Info` list are optional; do not\nrely programmatically on any of them being present.\n\nEach assert macro has a corresponding version with an extra argument, for adding\ncomments to assertions. These can for example be printed as part of error\nreports, to clarify the meaning of the check that failed. For example,\n`?assertEqual(0, fib(0), \"Fibonacci is defined for zero\")`. The comment text can\nbe any character data (string, UTF8-binary, or deep list of such data), and will\nbe included in the error term as `{comment, Text}`.\n\nIf the macro `NOASSERT` is defined when `assert.hrl` is read by the compiler,\nthe macros are defined as equivalent to the atom `ok`. The test will not be\nperformed and there is no cost at runtime.\n\nFor example, using `erlc` to compile your modules, the following disables all\nassertions:\n\n```text\nerlc -DNOASSERT=true *.erl\n```\n\n(The value of `NOASSERT` does not matter, only the fact that it is defined.)\n\nA few other macros also have effect on the enabling or disabling of assertions:\n\n- If `NODEBUG` is defined, it implies `NOASSERT` (unless `DEBUG` is also\n  defined, which overrides `NODEBUG`).\n- If `ASSERT` is defined, it overrides `NOASSERT`, that is, the assertions\n  remain enabled.\n\nIf you prefer, you can thus use only `DEBUG`/`NODEBUG` as the main flags to\ncontrol the behavior of the assertions (which is useful if you have other\ncompiler conditionals or debugging macros controlled by those flags), or you can\nuse `ASSERT`/`NOASSERT` to control only the assert macros.","ref":"assert_hrl.html#description"},{"type":"extras","title":"Macros - assert.hrl","doc":"- **`assert(BoolExpr)`**\n\n- **`assert(BoolExpr, Comment)`** - Tests that `BoolExpr` completes normally\n  returning `true`.\n\n- **`assertNot(BoolExpr)`**\n\n- **`assertNot(BoolExpr, Comment)`** - Tests that `BoolExpr` completes normally\n  returning `false`.\n\n- **`assertMatch(GuardedPattern, Expr)`**\n\n- **`assertMatch(GuardedPattern, Expr, Comment)`** - Tests that `Expr` completes\n  normally yielding a value that matches `GuardedPattern`, for example:\n\n  ```text\n  ?assertMatch({bork, _}, f())\n  ```\n\n  Notice that a guard `when ...` can be included:\n\n  ```erlang\n  ?assertMatch({bork, X} when X > 0, f())\n  ```\n\n- **`assertNotMatch(GuardedPattern, Expr)`**\n\n- **`assertNotMatch(GuardedPattern, Expr, Comment)`** - Tests that `Expr`\n  completes normally yielding a value that does not match `GuardedPattern`.\n\n  As in `assertMatch`, `GuardedPattern` can have a `when` part.\n\n- **`assertEqual(ExpectedValue, Expr)`**\n\n- **`assertEqual(ExpectedValue, Expr, Comment)`** - Tests that `Expr` completes\n  normally yielding a value that is exactly equal to `ExpectedValue`.\n\n- **`assertNotEqual(ExpectedValue, Expr)`**\n\n- **`assertNotEqual(ExpectedValue, Expr, Comment)`** - Tests that `Expr`\n  completes normally yielding a value that is not exactly equal to\n  `ExpectedValue`.\n\n- **`assertException(Class, Term, Expr)`**\n\n- **`assertException(Class, Term, Expr, Comment)`** - Tests that `Expr`\n  completes abnormally with an exception of type `Class` and with the associated\n  `Term`. The assertion fails if `Expr` raises a different exception or if it\n  completes normally returning any value.\n\n  Notice that both `Class` and `Term` can be guarded patterns, as in\n  `assertMatch`.\n\n- **`assertNotException(Class, Term, Expr)`**\n\n- **`assertNotException(Class, Term, Expr, Comment)`** - Tests that `Expr` does\n  not evaluate abnormally with an exception of type `Class` and with the\n  associated `Term`. The assertion succeeds if `Expr` raises a different\n  exception or if it completes normally returning any value.\n\n  As in `assertException`, both `Class` and `Term` can be guarded patterns.\n\n- **`assertError(Term, Expr)`**\n\n- **`assertError(Term, Expr, Comment)`** - Equivalent to\n  `assertException(error, Term, Expr)`\n\n- **`assertExit(Term, Expr)`**\n\n- **`assertExit(Term, Expr, Comment)`** - Equivalent to\n  `assertException(exit, Term, Expr)`\n\n- **`assertThrow(Term, Expr)`**\n\n- **`assertThrow(Term, Expr, Comment)`** - Equivalent to\n  `assertException(throw, Term, Expr)`","ref":"assert_hrl.html#macros"},{"type":"extras","title":"See Also - assert.hrl","doc":"`m:compile`, [`erlc(3)`](`e:erts:erlc_cmd.md`)","ref":"assert_hrl.html#see-also"}],"proglang":"erlang","content_type":"text/markdown","producer":{"name":"ex_doc","version":"0.37.3"}}